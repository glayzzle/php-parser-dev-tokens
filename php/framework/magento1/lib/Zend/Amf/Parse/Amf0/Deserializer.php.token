[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Amf\n * @subpackage Parse_Amf0\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/** Zend_Amf_Constants *\/",23],["T_WHITESPACE","\n",23],["T_COMMENT","#require_once 'Zend\/Amf\/Constants.php';\n",24],["T_WHITESPACE","\n",25],["T_DOC_COMMENT","\/** Zend_Xml_Security *\/",26],["T_WHITESPACE","\n",26],["T_COMMENT","#require_once 'Zend\/Xml\/Security.php';\n",27],["T_WHITESPACE","\n",28],["T_DOC_COMMENT","\/** @see Zend_Amf_Parse_Deserializer *\/",29],["T_WHITESPACE","\n",29],["T_COMMENT","#require_once 'Zend\/Amf\/Parse\/Deserializer.php';\n",30],["T_WHITESPACE","\n",31],["T_DOC_COMMENT","\/**\n * Read an AMF0 input stream and convert it into PHP data types\n *\n * @todo       Implement Typed Object Class Mapping\n * @todo       Class could be implemented as Factory Class with each data type it's own class\n * @package    Zend_Amf\n * @subpackage Parse_Amf0\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",32],["T_WHITESPACE","\n",41],["T_CLASS","class",42],["T_WHITESPACE"," ",42],["T_STRING","Zend_Amf_Parse_Amf0_Deserializer",42],["T_WHITESPACE"," ",42],["T_EXTENDS","extends",42],["T_WHITESPACE"," ",42],["T_STRING","Zend_Amf_Parse_Deserializer",42],["T_WHITESPACE","\n",42],"{",["T_WHITESPACE","\n    ",43],["T_DOC_COMMENT","\/**\n     * An array of objects used for recursively deserializing an object.\n     * @var array\n     *\/",44],["T_WHITESPACE","\n    ",47],["T_PROTECTED","protected",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$_reference",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],"(",")",";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * If AMF3 serialization occurs, update to AMF0 0x03\n     *\n     * @var int\n     *\/",50],["T_WHITESPACE","\n    ",54],["T_PROTECTED","protected",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$_objectEncoding",55],["T_WHITESPACE"," ",55],"=",["T_WHITESPACE"," ",55],["T_STRING","Zend_Amf_Constants",55],["T_DOUBLE_COLON","::",55],["T_STRING","AMF0_OBJECT_ENCODING",55],";",["T_WHITESPACE","\n\n    ",55],["T_DOC_COMMENT","\/**\n     * Read AMF markers and dispatch for deserialization\n     *\n     * Checks for AMF marker types and calls the appropriate methods\n     * for deserializing those marker types. Markers are the data type of\n     * the following value.\n     *\n     * @param  integer $typeMarker\n     * @return mixed whatever the data type is of the marker in php\n     * @throws Zend_Amf_Exception for invalid type\n     *\/",57],["T_WHITESPACE","\n    ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","readTypeMarker",68],"(",["T_VARIABLE","$typeMarker",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING","null",68],")",["T_WHITESPACE","\n    ",68],"{",["T_WHITESPACE","\n        ",69],["T_IF","if",70],["T_WHITESPACE"," ",70],"(",["T_VARIABLE","$typeMarker",70],["T_WHITESPACE"," ",70],["T_IS_IDENTICAL","===",70],["T_WHITESPACE"," ",70],["T_STRING","null",70],")",["T_WHITESPACE"," ",70],"{",["T_WHITESPACE","\n            ",70],["T_VARIABLE","$typeMarker",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_VARIABLE","$this",71],["T_OBJECT_OPERATOR","->",71],["T_STRING","_stream",71],["T_OBJECT_OPERATOR","->",71],["T_STRING","readByte",71],"(",")",";",["T_WHITESPACE","\n        ",71],"}",["T_WHITESPACE","\n\n        ",72],["T_SWITCH","switch",74],"(",["T_VARIABLE","$typeMarker",74],")",["T_WHITESPACE"," ",74],"{",["T_WHITESPACE","\n            ",74],["T_COMMENT","\/\/ number\n",75],["T_WHITESPACE","            ",76],["T_CASE","case",76],["T_WHITESPACE"," ",76],["T_STRING","Zend_Amf_Constants",76],["T_DOUBLE_COLON","::",76],["T_STRING","AMF0_NUMBER",76],":",["T_WHITESPACE","\n                ",76],["T_RETURN","return",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$this",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","_stream",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","readDouble",77],"(",")",";",["T_WHITESPACE","\n\n            ",77],["T_COMMENT","\/\/ boolean\n",79],["T_WHITESPACE","            ",80],["T_CASE","case",80],["T_WHITESPACE"," ",80],["T_STRING","Zend_Amf_Constants",80],["T_DOUBLE_COLON","::",80],["T_STRING","AMF0_BOOLEAN",80],":",["T_WHITESPACE","\n                ",80],["T_RETURN","return",81],["T_WHITESPACE"," ",81],["T_BOOL_CAST","(boolean)",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","_stream",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","readByte",81],"(",")",";",["T_WHITESPACE","\n\n            ",81],["T_COMMENT","\/\/ string\n",83],["T_WHITESPACE","            ",84],["T_CASE","case",84],["T_WHITESPACE"," ",84],["T_STRING","Zend_Amf_Constants",84],["T_DOUBLE_COLON","::",84],["T_STRING","AMF0_STRING",84],":",["T_WHITESPACE","\n                ",84],["T_RETURN","return",85],["T_WHITESPACE"," ",85],["T_VARIABLE","$this",85],["T_OBJECT_OPERATOR","->",85],["T_STRING","_stream",85],["T_OBJECT_OPERATOR","->",85],["T_STRING","readUTF",85],"(",")",";",["T_WHITESPACE","\n\n            ",85],["T_COMMENT","\/\/ object\n",87],["T_WHITESPACE","            ",88],["T_CASE","case",88],["T_WHITESPACE"," ",88],["T_STRING","Zend_Amf_Constants",88],["T_DOUBLE_COLON","::",88],["T_STRING","AMF0_OBJECT",88],":",["T_WHITESPACE","\n                ",88],["T_RETURN","return",89],["T_WHITESPACE"," ",89],["T_VARIABLE","$this",89],["T_OBJECT_OPERATOR","->",89],["T_STRING","readObject",89],"(",")",";",["T_WHITESPACE","\n\n            ",89],["T_COMMENT","\/\/ null\n",91],["T_WHITESPACE","            ",92],["T_CASE","case",92],["T_WHITESPACE"," ",92],["T_STRING","Zend_Amf_Constants",92],["T_DOUBLE_COLON","::",92],["T_STRING","AMF0_NULL",92],":",["T_WHITESPACE","\n                ",92],["T_RETURN","return",93],["T_WHITESPACE"," ",93],["T_STRING","null",93],";",["T_WHITESPACE","\n\n            ",93],["T_COMMENT","\/\/ undefined\n",95],["T_WHITESPACE","            ",96],["T_CASE","case",96],["T_WHITESPACE"," ",96],["T_STRING","Zend_Amf_Constants",96],["T_DOUBLE_COLON","::",96],["T_STRING","AMF0_UNDEFINED",96],":",["T_WHITESPACE","\n                ",96],["T_RETURN","return",97],["T_WHITESPACE"," ",97],["T_STRING","null",97],";",["T_WHITESPACE","\n\n            ",97],["T_COMMENT","\/\/ Circular references are returned here\n",99],["T_WHITESPACE","            ",100],["T_CASE","case",100],["T_WHITESPACE"," ",100],["T_STRING","Zend_Amf_Constants",100],["T_DOUBLE_COLON","::",100],["T_STRING","AMF0_REFERENCE",100],":",["T_WHITESPACE","\n                ",100],["T_RETURN","return",101],["T_WHITESPACE"," ",101],["T_VARIABLE","$this",101],["T_OBJECT_OPERATOR","->",101],["T_STRING","readReference",101],"(",")",";",["T_WHITESPACE","\n\n            ",101],["T_COMMENT","\/\/ mixed array with numeric and string keys\n",103],["T_WHITESPACE","            ",104],["T_CASE","case",104],["T_WHITESPACE"," ",104],["T_STRING","Zend_Amf_Constants",104],["T_DOUBLE_COLON","::",104],["T_STRING","AMF0_MIXEDARRAY",104],":",["T_WHITESPACE","\n                ",104],["T_RETURN","return",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$this",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","readMixedArray",105],"(",")",";",["T_WHITESPACE","\n\n            ",105],["T_COMMENT","\/\/ array\n",107],["T_WHITESPACE","            ",108],["T_CASE","case",108],["T_WHITESPACE"," ",108],["T_STRING","Zend_Amf_Constants",108],["T_DOUBLE_COLON","::",108],["T_STRING","AMF0_ARRAY",108],":",["T_WHITESPACE","\n                ",108],["T_RETURN","return",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$this",109],["T_OBJECT_OPERATOR","->",109],["T_STRING","readArray",109],"(",")",";",["T_WHITESPACE","\n\n            ",109],["T_COMMENT","\/\/ date\n",111],["T_WHITESPACE","            ",112],["T_CASE","case",112],["T_WHITESPACE"," ",112],["T_STRING","Zend_Amf_Constants",112],["T_DOUBLE_COLON","::",112],["T_STRING","AMF0_DATE",112],":",["T_WHITESPACE","\n                ",112],["T_RETURN","return",113],["T_WHITESPACE"," ",113],["T_VARIABLE","$this",113],["T_OBJECT_OPERATOR","->",113],["T_STRING","readDate",113],"(",")",";",["T_WHITESPACE","\n\n            ",113],["T_COMMENT","\/\/ longString  strlen(string) > 2^16\n",115],["T_WHITESPACE","            ",116],["T_CASE","case",116],["T_WHITESPACE"," ",116],["T_STRING","Zend_Amf_Constants",116],["T_DOUBLE_COLON","::",116],["T_STRING","AMF0_LONGSTRING",116],":",["T_WHITESPACE","\n                ",116],["T_RETURN","return",117],["T_WHITESPACE"," ",117],["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","_stream",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","readLongUTF",117],"(",")",";",["T_WHITESPACE","\n\n            ",117],["T_COMMENT","\/\/internal AS object,  not supported\n",119],["T_WHITESPACE","            ",120],["T_CASE","case",120],["T_WHITESPACE"," ",120],["T_STRING","Zend_Amf_Constants",120],["T_DOUBLE_COLON","::",120],["T_STRING","AMF0_UNSUPPORTED",120],":",["T_WHITESPACE","\n                ",120],["T_RETURN","return",121],["T_WHITESPACE"," ",121],["T_STRING","null",121],";",["T_WHITESPACE","\n\n            ",121],["T_COMMENT","\/\/ XML\n",123],["T_WHITESPACE","            ",124],["T_CASE","case",124],["T_WHITESPACE"," ",124],["T_STRING","Zend_Amf_Constants",124],["T_DOUBLE_COLON","::",124],["T_STRING","AMF0_XML",124],":",["T_WHITESPACE","\n                ",124],["T_RETURN","return",125],["T_WHITESPACE"," ",125],["T_VARIABLE","$this",125],["T_OBJECT_OPERATOR","->",125],["T_STRING","readXmlString",125],"(",")",";",["T_WHITESPACE","\n\n            ",125],["T_COMMENT","\/\/ typed object ie Custom Class\n",127],["T_WHITESPACE","            ",128],["T_CASE","case",128],["T_WHITESPACE"," ",128],["T_STRING","Zend_Amf_Constants",128],["T_DOUBLE_COLON","::",128],["T_STRING","AMF0_TYPEDOBJECT",128],":",["T_WHITESPACE","\n                ",128],["T_RETURN","return",129],["T_WHITESPACE"," ",129],["T_VARIABLE","$this",129],["T_OBJECT_OPERATOR","->",129],["T_STRING","readTypedObject",129],"(",")",";",["T_WHITESPACE","\n\n            ",129],["T_COMMENT","\/\/AMF3-specific\n",131],["T_WHITESPACE","            ",132],["T_CASE","case",132],["T_WHITESPACE"," ",132],["T_STRING","Zend_Amf_Constants",132],["T_DOUBLE_COLON","::",132],["T_STRING","AMF0_AMF3",132],":",["T_WHITESPACE","\n                ",132],["T_RETURN","return",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","readAmf3TypeMarker",133],"(",")",";",["T_WHITESPACE","\n\n            ",133],["T_DEFAULT","default",135],":",["T_WHITESPACE","\n                ",135],["T_COMMENT","#require_once 'Zend\/Amf\/Exception.php';\n",136],["T_WHITESPACE","                ",137],["T_THROW","throw",137],["T_WHITESPACE"," ",137],["T_NEW","new",137],["T_WHITESPACE"," ",137],["T_STRING","Zend_Amf_Exception",137],"(",["T_CONSTANT_ENCAPSED_STRING","'Unsupported marker type: '",137],["T_WHITESPACE"," ",137],".",["T_WHITESPACE"," ",137],["T_VARIABLE","$typeMarker",137],")",";",["T_WHITESPACE","\n        ",137],"}",["T_WHITESPACE","\n    ",138],"}",["T_WHITESPACE","\n\n    ",139],["T_DOC_COMMENT","\/**\n     * Read AMF objects and convert to PHP objects\n     *\n     * Read the name value pair objects form the php message and convert them to\n     * a php object class.\n     *\n     * Called when the marker type is 3.\n     *\n     * @param  array|null $object\n     * @return object\n     *\/",141],["T_WHITESPACE","\n    ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","readObject",152],"(",["T_VARIABLE","$object",152],["T_WHITESPACE"," ",152],"=",["T_WHITESPACE"," ",152],["T_STRING","null",152],")",["T_WHITESPACE","\n    ",152],"{",["T_WHITESPACE","\n        ",153],["T_IF","if",154],["T_WHITESPACE"," ",154],"(",["T_VARIABLE","$object",154],["T_WHITESPACE"," ",154],["T_IS_IDENTICAL","===",154],["T_WHITESPACE"," ",154],["T_STRING","null",154],")",["T_WHITESPACE"," ",154],"{",["T_WHITESPACE","\n            ",154],["T_VARIABLE","$object",155],["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_ARRAY","array",155],"(",")",";",["T_WHITESPACE","\n        ",155],"}",["T_WHITESPACE","\n\n        ",156],["T_WHILE","while",158],["T_WHITESPACE"," ",158],"(",["T_STRING","true",158],")",["T_WHITESPACE"," ",158],"{",["T_WHITESPACE","\n            ",158],["T_VARIABLE","$key",159],["T_WHITESPACE","        ",159],"=",["T_WHITESPACE"," ",159],["T_VARIABLE","$this",159],["T_OBJECT_OPERATOR","->",159],["T_STRING","_stream",159],["T_OBJECT_OPERATOR","->",159],["T_STRING","readUTF",159],"(",")",";",["T_WHITESPACE","\n            ",159],["T_VARIABLE","$typeMarker",160],["T_WHITESPACE"," ",160],"=",["T_WHITESPACE"," ",160],["T_VARIABLE","$this",160],["T_OBJECT_OPERATOR","->",160],["T_STRING","_stream",160],["T_OBJECT_OPERATOR","->",160],["T_STRING","readByte",160],"(",")",";",["T_WHITESPACE","\n            ",160],["T_IF","if",161],["T_WHITESPACE"," ",161],"(",["T_VARIABLE","$typeMarker",161],["T_WHITESPACE"," ",161],["T_IS_NOT_EQUAL","!=",161],["T_WHITESPACE"," ",161],["T_STRING","Zend_Amf_Constants",161],["T_DOUBLE_COLON","::",161],["T_STRING","AMF0_OBJECTTERM",161],["T_WHITESPACE"," ",161],")","{",["T_WHITESPACE","\n                ",161],["T_COMMENT","\/\/Recursivly call readTypeMarker to get the types of properties in the object\n",162],["T_WHITESPACE","                ",163],["T_VARIABLE","$object",163],"[",["T_VARIABLE","$key",163],"]",["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_VARIABLE","$this",163],["T_OBJECT_OPERATOR","->",163],["T_STRING","readTypeMarker",163],"(",["T_VARIABLE","$typeMarker",163],")",";",["T_WHITESPACE","\n            ",163],"}",["T_WHITESPACE"," ",164],["T_ELSE","else",164],["T_WHITESPACE"," ",164],"{",["T_WHITESPACE","\n                ",164],["T_COMMENT","\/\/encountered AMF object terminator\n",165],["T_WHITESPACE","                ",166],["T_BREAK","break",166],";",["T_WHITESPACE","\n            ",166],"}",["T_WHITESPACE","\n        ",167],"}",["T_WHITESPACE","\n        ",168],["T_VARIABLE","$this",169],["T_OBJECT_OPERATOR","->",169],["T_STRING","_reference",169],"[","]",["T_WHITESPACE"," ",169],"=",["T_WHITESPACE"," ",169],["T_VARIABLE","$object",169],";",["T_WHITESPACE","\n        ",169],["T_RETURN","return",170],["T_WHITESPACE"," ",170],["T_OBJECT_CAST","(object)",170],["T_WHITESPACE"," ",170],["T_VARIABLE","$object",170],";",["T_WHITESPACE","\n    ",170],"}",["T_WHITESPACE","\n\n    ",171],["T_DOC_COMMENT","\/**\n     * Read reference objects\n     *\n     * Used to gain access to the private array of reference objects.\n     * Called when marker type is 7.\n     *\n     * @return object\n     * @throws Zend_Amf_Exception for invalid reference keys\n     *\/",173],["T_WHITESPACE","\n    ",181],["T_PUBLIC","public",182],["T_WHITESPACE"," ",182],["T_FUNCTION","function",182],["T_WHITESPACE"," ",182],["T_STRING","readReference",182],"(",")",["T_WHITESPACE","\n    ",182],"{",["T_WHITESPACE","\n        ",183],["T_VARIABLE","$key",184],["T_WHITESPACE"," ",184],"=",["T_WHITESPACE"," ",184],["T_VARIABLE","$this",184],["T_OBJECT_OPERATOR","->",184],["T_STRING","_stream",184],["T_OBJECT_OPERATOR","->",184],["T_STRING","readInt",184],"(",")",";",["T_WHITESPACE","\n        ",184],["T_IF","if",185],["T_WHITESPACE"," ",185],"(","!",["T_STRING","array_key_exists",185],"(",["T_VARIABLE","$key",185],",",["T_WHITESPACE"," ",185],["T_VARIABLE","$this",185],["T_OBJECT_OPERATOR","->",185],["T_STRING","_reference",185],")",")",["T_WHITESPACE"," ",185],"{",["T_WHITESPACE","\n            ",185],["T_COMMENT","#require_once 'Zend\/Amf\/Exception.php';\n",186],["T_WHITESPACE","            ",187],["T_THROW","throw",187],["T_WHITESPACE"," ",187],["T_NEW","new",187],["T_WHITESPACE"," ",187],["T_STRING","Zend_Amf_Exception",187],"(",["T_CONSTANT_ENCAPSED_STRING","'Invalid reference key: '",187],".",["T_WHITESPACE"," ",187],["T_VARIABLE","$key",187],")",";",["T_WHITESPACE","\n        ",187],"}",["T_WHITESPACE","\n        ",188],["T_RETURN","return",189],["T_WHITESPACE"," ",189],["T_VARIABLE","$this",189],["T_OBJECT_OPERATOR","->",189],["T_STRING","_reference",189],"[",["T_VARIABLE","$key",189],"]",";",["T_WHITESPACE","\n    ",189],"}",["T_WHITESPACE","\n\n    ",190],["T_DOC_COMMENT","\/**\n     * Reads an array with numeric and string indexes.\n     *\n     * Called when marker type is 8\n     *\n     * @todo   As of Flash Player 9 there is not support for mixed typed arrays\n     *         so we handle this as an object. With the introduction of vectors\n     *         in Flash Player 10 this may need to be reconsidered.\n     * @return array\n     *\/",192],["T_WHITESPACE","\n    ",201],["T_PUBLIC","public",202],["T_WHITESPACE"," ",202],["T_FUNCTION","function",202],["T_WHITESPACE"," ",202],["T_STRING","readMixedArray",202],"(",")",["T_WHITESPACE","\n    ",202],"{",["T_WHITESPACE","\n        ",203],["T_VARIABLE","$length",204],["T_WHITESPACE"," ",204],"=",["T_WHITESPACE"," ",204],["T_VARIABLE","$this",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","_stream",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","readLong",204],"(",")",";",["T_WHITESPACE","\n        ",204],["T_RETURN","return",205],["T_WHITESPACE"," ",205],["T_VARIABLE","$this",205],["T_OBJECT_OPERATOR","->",205],["T_STRING","readObject",205],"(",")",";",["T_WHITESPACE","\n    ",205],"}",["T_WHITESPACE","\n\n    ",206],["T_DOC_COMMENT","\/**\n     * Converts numerically indexed actiosncript arrays into php arrays.\n     *\n     * Called when marker type is 10\n     *\n     * @return array\n     *\/",208],["T_WHITESPACE","\n    ",214],["T_PUBLIC","public",215],["T_WHITESPACE"," ",215],["T_FUNCTION","function",215],["T_WHITESPACE"," ",215],["T_STRING","readArray",215],"(",")",["T_WHITESPACE","\n    ",215],"{",["T_WHITESPACE","\n        ",216],["T_VARIABLE","$length",217],["T_WHITESPACE"," ",217],"=",["T_WHITESPACE"," ",217],["T_VARIABLE","$this",217],["T_OBJECT_OPERATOR","->",217],["T_STRING","_stream",217],["T_OBJECT_OPERATOR","->",217],["T_STRING","readLong",217],"(",")",";",["T_WHITESPACE","\n        ",217],["T_VARIABLE","$array",218],["T_WHITESPACE"," ",218],"=",["T_WHITESPACE"," ",218],["T_ARRAY","array",218],"(",")",";",["T_WHITESPACE","\n        ",218],["T_WHILE","while",219],["T_WHITESPACE"," ",219],"(",["T_VARIABLE","$length",219],["T_DEC","--",219],")",["T_WHITESPACE"," ",219],"{",["T_WHITESPACE","\n            ",219],["T_VARIABLE","$array",220],"[","]",["T_WHITESPACE"," ",220],"=",["T_WHITESPACE"," ",220],["T_VARIABLE","$this",220],["T_OBJECT_OPERATOR","->",220],["T_STRING","readTypeMarker",220],"(",")",";",["T_WHITESPACE","\n        ",220],"}",["T_WHITESPACE","\n        ",221],["T_RETURN","return",222],["T_WHITESPACE"," ",222],["T_VARIABLE","$array",222],";",["T_WHITESPACE","\n    ",222],"}",["T_WHITESPACE","\n\n    ",223],["T_DOC_COMMENT","\/**\n     * Convert AS Date to Zend_Date\n     *\n     * @return Zend_Date\n     *\/",225],["T_WHITESPACE","\n    ",229],["T_PUBLIC","public",230],["T_WHITESPACE"," ",230],["T_FUNCTION","function",230],["T_WHITESPACE"," ",230],["T_STRING","readDate",230],"(",")",["T_WHITESPACE","\n    ",230],"{",["T_WHITESPACE","\n        ",231],["T_COMMENT","\/\/ get the unix time stamp. Not sure why ActionScript does not use\n",232],["T_WHITESPACE","        ",233],["T_COMMENT","\/\/ milliseconds\n",233],["T_WHITESPACE","        ",234],["T_VARIABLE","$timestamp",234],["T_WHITESPACE"," ",234],"=",["T_WHITESPACE"," ",234],["T_STRING","floor",234],"(",["T_VARIABLE","$this",234],["T_OBJECT_OPERATOR","->",234],["T_STRING","_stream",234],["T_OBJECT_OPERATOR","->",234],["T_STRING","readDouble",234],"(",")",["T_WHITESPACE"," ",234],"\/",["T_WHITESPACE"," ",234],["T_LNUMBER","1000",234],")",";",["T_WHITESPACE","\n\n        ",234],["T_COMMENT","\/\/ The timezone offset is never returned to the server; it is always 0,\n",236],["T_WHITESPACE","        ",237],["T_COMMENT","\/\/ so read and ignore.\n",237],["T_WHITESPACE","        ",238],["T_VARIABLE","$offset",238],["T_WHITESPACE"," ",238],"=",["T_WHITESPACE"," ",238],["T_VARIABLE","$this",238],["T_OBJECT_OPERATOR","->",238],["T_STRING","_stream",238],["T_OBJECT_OPERATOR","->",238],["T_STRING","readInt",238],"(",")",";",["T_WHITESPACE","\n\n        ",238],["T_COMMENT","#require_once 'Zend\/Date.php';\n",240],["T_WHITESPACE","        ",241],["T_VARIABLE","$date",241],["T_WHITESPACE","   ",241],"=",["T_WHITESPACE"," ",241],["T_NEW","new",241],["T_WHITESPACE"," ",241],["T_STRING","Zend_Date",241],"(",["T_VARIABLE","$timestamp",241],")",";",["T_WHITESPACE","\n        ",241],["T_RETURN","return",242],["T_WHITESPACE"," ",242],["T_VARIABLE","$date",242],";",["T_WHITESPACE","\n    ",242],"}",["T_WHITESPACE","\n\n    ",243],["T_DOC_COMMENT","\/**\n     * Convert XML to SimpleXml\n     * If user wants DomDocument they can use dom_import_simplexml\n     *\n     * @return SimpleXml Object\n     *\/",245],["T_WHITESPACE","\n    ",250],["T_PUBLIC","public",251],["T_WHITESPACE"," ",251],["T_FUNCTION","function",251],["T_WHITESPACE"," ",251],["T_STRING","readXmlString",251],"(",")",["T_WHITESPACE","\n    ",251],"{",["T_WHITESPACE","\n        ",252],["T_VARIABLE","$string",253],["T_WHITESPACE"," ",253],"=",["T_WHITESPACE"," ",253],["T_VARIABLE","$this",253],["T_OBJECT_OPERATOR","->",253],["T_STRING","_stream",253],["T_OBJECT_OPERATOR","->",253],["T_STRING","readLongUTF",253],"(",")",";",["T_WHITESPACE","\n        ",253],["T_RETURN","return",254],["T_WHITESPACE"," ",254],["T_STRING","Zend_Xml_Security",254],["T_DOUBLE_COLON","::",254],["T_STRING","scan",254],"(",["T_VARIABLE","$string",254],")",";",["T_WHITESPACE"," ",254],["T_COMMENT","\/\/simplexml_load_string($string);\n",254],["T_WHITESPACE","    ",255],"}",["T_WHITESPACE","\n\n    ",255],["T_DOC_COMMENT","\/**\n     * Read Class that is to be mapped to a server class.\n     *\n     * Commonly used for Value Objects on the server\n     *\n     * @todo   implement Typed Class mapping\n     * @return object|array\n     * @throws Zend_Amf_Exception if unable to load type\n     *\/",257],["T_WHITESPACE","\n    ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","readTypedObject",266],"(",")",["T_WHITESPACE","\n    ",266],"{",["T_WHITESPACE","\n         ",267],["T_COMMENT","#require_once 'Zend\/Amf\/Parse\/TypeLoader.php';\n",268],["T_WHITESPACE","        ",269],["T_COMMENT","\/\/ get the remote class name\n",269],["T_WHITESPACE","        ",270],["T_VARIABLE","$className",270],["T_WHITESPACE"," ",270],"=",["T_WHITESPACE"," ",270],["T_VARIABLE","$this",270],["T_OBJECT_OPERATOR","->",270],["T_STRING","_stream",270],["T_OBJECT_OPERATOR","->",270],["T_STRING","readUTF",270],"(",")",";",["T_WHITESPACE","\n        ",270],["T_VARIABLE","$loader",271],["T_WHITESPACE"," ",271],"=",["T_WHITESPACE"," ",271],["T_STRING","Zend_Amf_Parse_TypeLoader",271],["T_DOUBLE_COLON","::",271],["T_STRING","loadType",271],"(",["T_VARIABLE","$className",271],")",";",["T_WHITESPACE","\n        ",271],["T_VARIABLE","$returnObject",272],["T_WHITESPACE"," ",272],"=",["T_WHITESPACE"," ",272],["T_NEW","new",272],["T_WHITESPACE"," ",272],["T_VARIABLE","$loader",272],"(",")",";",["T_WHITESPACE","\n        ",272],["T_VARIABLE","$properties",273],["T_WHITESPACE"," ",273],"=",["T_WHITESPACE"," ",273],["T_STRING","get_object_vars",273],"(",["T_VARIABLE","$this",273],["T_OBJECT_OPERATOR","->",273],["T_STRING","readObject",273],"(",")",")",";",["T_WHITESPACE","\n        ",273],["T_FOREACH","foreach",274],"(",["T_VARIABLE","$properties",274],["T_WHITESPACE"," ",274],["T_AS","as",274],["T_WHITESPACE"," ",274],["T_VARIABLE","$key",274],["T_DOUBLE_ARROW","=>",274],["T_VARIABLE","$value",274],")",["T_WHITESPACE"," ",274],"{",["T_WHITESPACE","\n            ",274],["T_IF","if",275],"(",["T_VARIABLE","$key",275],")",["T_WHITESPACE"," ",275],"{",["T_WHITESPACE","\n                ",275],["T_VARIABLE","$returnObject",276],["T_OBJECT_OPERATOR","->",276],["T_VARIABLE","$key",276],["T_WHITESPACE"," ",276],"=",["T_WHITESPACE"," ",276],["T_VARIABLE","$value",276],";",["T_WHITESPACE","\n            ",276],"}",["T_WHITESPACE","\n        ",277],"}",["T_WHITESPACE","\n        ",278],["T_IF","if",279],"(",["T_VARIABLE","$returnObject",279],["T_WHITESPACE"," ",279],["T_INSTANCEOF","instanceof",279],["T_WHITESPACE"," ",279],["T_STRING","Zend_Amf_Value_Messaging_ArrayCollection",279],")",["T_WHITESPACE"," ",279],"{",["T_WHITESPACE","\n            ",279],["T_VARIABLE","$returnObject",280],["T_WHITESPACE"," ",280],"=",["T_WHITESPACE"," ",280],["T_STRING","get_object_vars",280],"(",["T_VARIABLE","$returnObject",280],")",";",["T_WHITESPACE","\n        ",280],"}",["T_WHITESPACE","\n        ",281],["T_RETURN","return",282],["T_WHITESPACE"," ",282],["T_VARIABLE","$returnObject",282],";",["T_WHITESPACE","\n    ",282],"}",["T_WHITESPACE","\n\n    ",283],["T_DOC_COMMENT","\/**\n     * AMF3 data type encountered load AMF3 Deserializer to handle\n     * type markers.\n     *\n     * @return string\n     *\/",285],["T_WHITESPACE","\n    ",290],["T_PUBLIC","public",291],["T_WHITESPACE"," ",291],["T_FUNCTION","function",291],["T_WHITESPACE"," ",291],["T_STRING","readAmf3TypeMarker",291],"(",")",["T_WHITESPACE","\n    ",291],"{",["T_WHITESPACE","\n        ",292],["T_COMMENT","#require_once 'Zend\/Amf\/Parse\/Amf3\/Deserializer.php';\n",293],["T_WHITESPACE","        ",294],["T_VARIABLE","$deserializer",294],["T_WHITESPACE"," ",294],"=",["T_WHITESPACE"," ",294],["T_NEW","new",294],["T_WHITESPACE"," ",294],["T_STRING","Zend_Amf_Parse_Amf3_Deserializer",294],"(",["T_VARIABLE","$this",294],["T_OBJECT_OPERATOR","->",294],["T_STRING","_stream",294],")",";",["T_WHITESPACE","\n        ",294],["T_VARIABLE","$this",295],["T_OBJECT_OPERATOR","->",295],["T_STRING","_objectEncoding",295],["T_WHITESPACE"," ",295],"=",["T_WHITESPACE"," ",295],["T_STRING","Zend_Amf_Constants",295],["T_DOUBLE_COLON","::",295],["T_STRING","AMF3_OBJECT_ENCODING",295],";",["T_WHITESPACE","\n        ",295],["T_RETURN","return",296],["T_WHITESPACE"," ",296],["T_VARIABLE","$deserializer",296],["T_OBJECT_OPERATOR","->",296],["T_STRING","readTypeMarker",296],"(",")",";",["T_WHITESPACE","\n    ",296],"}",["T_WHITESPACE","\n\n    ",297],["T_DOC_COMMENT","\/**\n     * Return the object encoding to check if an AMF3 object\n     * is going to be return.\n     *\n     * @return int\n     *\/",299],["T_WHITESPACE","\n    ",304],["T_PUBLIC","public",305],["T_WHITESPACE"," ",305],["T_FUNCTION","function",305],["T_WHITESPACE"," ",305],["T_STRING","getObjectEncoding",305],"(",")",["T_WHITESPACE","\n    ",305],"{",["T_WHITESPACE","\n        ",306],["T_RETURN","return",307],["T_WHITESPACE"," ",307],["T_VARIABLE","$this",307],["T_OBJECT_OPERATOR","->",307],["T_STRING","_objectEncoding",307],";",["T_WHITESPACE","\n    ",307],"}",["T_WHITESPACE","\n",308],"}",["T_WHITESPACE","\n",309]]