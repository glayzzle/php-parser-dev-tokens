[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Amf\n * @subpackage Parse\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * Abstract cass that all deserializer must implement.\n *\n * Logic for deserialization of the AMF envelop is based on resources supplied\n * by Adobe Blaze DS. For and example of deserialization please review the BlazeDS\n * source tree.\n *\n * @see        http:\/\/opensource.adobe.com\/svn\/opensource\/blazeds\/trunk\/modules\/core\/src\/java\/flex\/messaging\/io\/amf\/\n * @package    Zend_Amf\n * @subpackage Parse\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",23],["T_WHITESPACE","\n",35],["T_ABSTRACT","abstract",36],["T_WHITESPACE"," ",36],["T_CLASS","class",36],["T_WHITESPACE"," ",36],["T_STRING","Zend_Amf_Parse_Deserializer",36],["T_WHITESPACE","\n",36],"{",["T_WHITESPACE","\n    ",37],["T_DOC_COMMENT","\/**\n     * The raw string that represents the AMF request.\n     *\n     * @var Zend_Amf_Parse_InputStream\n     *\/",38],["T_WHITESPACE","\n    ",42],["T_PROTECTED","protected",43],["T_WHITESPACE"," ",43],["T_VARIABLE","$_stream",43],";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param  Zend_Amf_Parse_InputStream $stream\n     * @return void\n     *\/",45],["T_WHITESPACE","\n    ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","__construct",51],"(",["T_STRING","Zend_Amf_Parse_InputStream",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$stream",51],")",["T_WHITESPACE","\n    ",51],"{",["T_WHITESPACE","\n        ",52],["T_VARIABLE","$this",53],["T_OBJECT_OPERATOR","->",53],["T_STRING","_stream",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_VARIABLE","$stream",53],";",["T_WHITESPACE","\n    ",53],"}",["T_WHITESPACE","\n\n    ",54],["T_DOC_COMMENT","\/**\n     * Checks for AMF marker types and calls the appropriate methods\n     * for deserializing those marker types. Markers are the data type of\n     * the following value.\n     *\n     * @param  int $typeMarker\n     * @return mixed Whatever the data type is of the marker in php\n     *\/",56],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_ABSTRACT","abstract",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","readTypeMarker",64],"(",["T_VARIABLE","$markerType",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_STRING","null",64],")",";",["T_WHITESPACE","\n",64],"}",["T_WHITESPACE","\n",65]]