[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/** Zend_Pdf_Cmap *\/",23],["T_WHITESPACE","\n",23],["T_COMMENT","#require_once 'Zend\/Pdf\/Cmap.php';\n",24],["T_WHITESPACE","\n\n",25],["T_DOC_COMMENT","\/**\n * Implements the \"segment mapping to delta values\" character map (type 4).\n *\n * This is the Microsoft standard mapping table type for OpenType fonts. It\n * provides the ability to cover multiple contiguous ranges of the Unicode\n * character set, with the exception of Unicode Surrogates (U+D800 - U+DFFF).\n *\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",27],["T_WHITESPACE","\n",38],["T_CLASS","class",39],["T_WHITESPACE"," ",39],["T_STRING","Zend_Pdf_Cmap_SegmentToDelta",39],["T_WHITESPACE"," ",39],["T_EXTENDS","extends",39],["T_WHITESPACE"," ",39],["T_STRING","Zend_Pdf_Cmap",39],["T_WHITESPACE","\n",39],"{",["T_WHITESPACE","\n  ",40],["T_COMMENT","\/**** Instance Variables ****\/",41],["T_WHITESPACE","\n\n\n    ",41],["T_DOC_COMMENT","\/**\n     * The number of segments in the table.\n     * @var integer\n     *\/",44],["T_WHITESPACE","\n    ",47],["T_PROTECTED","protected",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$_segmentCount",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_LNUMBER","0",48],";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * The size of the binary search range for segments.\n     * @var integer\n     *\/",50],["T_WHITESPACE","\n    ",53],["T_PROTECTED","protected",54],["T_WHITESPACE"," ",54],["T_VARIABLE","$_searchRange",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],["T_LNUMBER","0",54],";",["T_WHITESPACE","\n\n    ",54],["T_DOC_COMMENT","\/**\n     * The number of binary search steps required to cover the entire search\n     * range.\n     * @var integer\n     *\/",56],["T_WHITESPACE","\n    ",60],["T_PROTECTED","protected",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$_searchIterations",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],["T_LNUMBER","0",61],";",["T_WHITESPACE","\n\n    ",61],["T_DOC_COMMENT","\/**\n     * Array of ending character codes for each segment.\n     * @var array\n     *\/",63],["T_WHITESPACE","\n    ",66],["T_PROTECTED","protected",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$_segmentTableEndCodes",67],["T_WHITESPACE"," ",67],"=",["T_WHITESPACE"," ",67],["T_ARRAY","array",67],"(",")",";",["T_WHITESPACE","\n\n    ",67],["T_DOC_COMMENT","\/**\n     * The ending character code for the segment at the end of the low search\n     * range.\n     * @var integer\n     *\/",69],["T_WHITESPACE","\n    ",73],["T_PROTECTED","protected",74],["T_WHITESPACE"," ",74],["T_VARIABLE","$_searchRangeEndCode",74],["T_WHITESPACE"," ",74],"=",["T_WHITESPACE"," ",74],["T_LNUMBER","0",74],";",["T_WHITESPACE","\n\n    ",74],["T_DOC_COMMENT","\/**\n     * Array of starting character codes for each segment.\n     * @var array\n     *\/",76],["T_WHITESPACE","\n    ",79],["T_PROTECTED","protected",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$_segmentTableStartCodes",80],["T_WHITESPACE"," ",80],"=",["T_WHITESPACE"," ",80],["T_ARRAY","array",80],"(",")",";",["T_WHITESPACE","\n\n    ",80],["T_DOC_COMMENT","\/**\n     * Array of character code to glyph delta values for each segment.\n     * @var array\n     *\/",82],["T_WHITESPACE","\n    ",85],["T_PROTECTED","protected",86],["T_WHITESPACE"," ",86],["T_VARIABLE","$_segmentTableIdDeltas",86],["T_WHITESPACE"," ",86],"=",["T_WHITESPACE"," ",86],["T_ARRAY","array",86],"(",")",";",["T_WHITESPACE","\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Array of offsets into the glyph index array for each segment.\n     * @var array\n     *\/",88],["T_WHITESPACE","\n    ",91],["T_PROTECTED","protected",92],["T_WHITESPACE"," ",92],["T_VARIABLE","$_segmentTableIdRangeOffsets",92],["T_WHITESPACE"," ",92],"=",["T_WHITESPACE"," ",92],["T_ARRAY","array",92],"(",")",";",["T_WHITESPACE","\n\n    ",92],["T_DOC_COMMENT","\/**\n     * Glyph index array. Stores glyph numbers, used with range offset.\n     * @var array\n     *\/",94],["T_WHITESPACE","\n    ",97],["T_PROTECTED","protected",98],["T_WHITESPACE"," ",98],["T_VARIABLE","$_glyphIndexArray",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_ARRAY","array",98],"(",")",";",["T_WHITESPACE","\n\n\n\n  ",98],["T_COMMENT","\/**** Public Interface ****\/",102],["T_WHITESPACE","\n\n\n  ",102],["T_COMMENT","\/* Concrete Class Implementation *\/",105],["T_WHITESPACE","\n\n    ",105],["T_DOC_COMMENT","\/**\n     * Returns an array of glyph numbers corresponding to the Unicode characters.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumberForCharacter()}.\n     *\n     * @param array $characterCodes Array of Unicode character codes (code points).\n     * @return array Array of glyph numbers.\n     *\/",107],["T_WHITESPACE","\n    ",117],["T_PUBLIC","public",118],["T_WHITESPACE"," ",118],["T_FUNCTION","function",118],["T_WHITESPACE"," ",118],["T_STRING","glyphNumbersForCharacters",118],"(",["T_VARIABLE","$characterCodes",118],")",["T_WHITESPACE","\n    ",118],"{",["T_WHITESPACE","\n        ",119],["T_VARIABLE","$glyphNumbers",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_ARRAY","array",120],"(",")",";",["T_WHITESPACE","\n        ",120],["T_FOREACH","foreach",121],["T_WHITESPACE"," ",121],"(",["T_VARIABLE","$characterCodes",121],["T_WHITESPACE"," ",121],["T_AS","as",121],["T_WHITESPACE"," ",121],["T_VARIABLE","$key",121],["T_WHITESPACE"," ",121],["T_DOUBLE_ARROW","=>",121],["T_WHITESPACE"," ",121],["T_VARIABLE","$characterCode",121],")",["T_WHITESPACE"," ",121],"{",["T_WHITESPACE","\n\n            ",121],["T_COMMENT","\/* These tables only cover the 16-bit character range.\n             *\/",123],["T_WHITESPACE","\n            ",124],["T_IF","if",125],["T_WHITESPACE"," ",125],"(",["T_VARIABLE","$characterCode",125],["T_WHITESPACE"," ",125],">",["T_WHITESPACE"," ",125],["T_LNUMBER","0xffff",125],")",["T_WHITESPACE"," ",125],"{",["T_WHITESPACE","\n                ",125],["T_VARIABLE","$glyphNumbers",126],"[",["T_VARIABLE","$key",126],"]",["T_WHITESPACE"," ",126],"=",["T_WHITESPACE"," ",126],["T_STRING","Zend_Pdf_Cmap",126],["T_DOUBLE_COLON","::",126],["T_STRING","MISSING_CHARACTER_GLYPH",126],";",["T_WHITESPACE","\n                ",126],["T_CONTINUE","continue",127],";",["T_WHITESPACE","\n            ",127],"}",["T_WHITESPACE","\n\n            ",128],["T_COMMENT","\/* Determine where to start the binary search. The segments are\n             * ordered from lowest-to-highest. We are looking for the first\n             * segment whose end code is greater than or equal to our character\n             * code.\n             *\n             * If the end code at the top of the search range is larger, then\n             * our target is probably below it.\n             *\n             * If it is smaller, our target is probably above it, so move the\n             * search range to the end of the segment list.\n             *\/",130],["T_WHITESPACE","\n            ",140],["T_IF","if",141],["T_WHITESPACE"," ",141],"(",["T_VARIABLE","$this",141],["T_OBJECT_OPERATOR","->",141],["T_STRING","_searchRangeEndCode",141],["T_WHITESPACE"," ",141],["T_IS_GREATER_OR_EQUAL",">=",141],["T_WHITESPACE"," ",141],["T_VARIABLE","$characterCode",141],")",["T_WHITESPACE"," ",141],"{",["T_WHITESPACE","\n                ",141],["T_VARIABLE","$searchIndex",142],["T_WHITESPACE"," ",142],"=",["T_WHITESPACE"," ",142],["T_VARIABLE","$this",142],["T_OBJECT_OPERATOR","->",142],["T_STRING","_searchRange",142],";",["T_WHITESPACE","\n            ",142],"}",["T_WHITESPACE"," ",143],["T_ELSE","else",143],["T_WHITESPACE"," ",143],"{",["T_WHITESPACE","\n                ",143],["T_VARIABLE","$searchIndex",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_VARIABLE","$this",144],["T_OBJECT_OPERATOR","->",144],["T_STRING","_segmentCount",144],";",["T_WHITESPACE","\n            ",144],"}",["T_WHITESPACE","\n\n            ",145],["T_COMMENT","\/* Now do a binary search to find the first segment whose end code\n             * is greater or equal to our character code. No matter the number\n             * of segments (there may be hundreds in a large font), we will only\n             * need to perform $this->_searchIterations.\n             *\/",147],["T_WHITESPACE","\n            ",151],["T_FOR","for",152],["T_WHITESPACE"," ",152],"(",["T_VARIABLE","$i",152],["T_WHITESPACE"," ",152],"=",["T_WHITESPACE"," ",152],["T_LNUMBER","1",152],";",["T_WHITESPACE"," ",152],["T_VARIABLE","$i",152],["T_WHITESPACE"," ",152],["T_IS_SMALLER_OR_EQUAL","<=",152],["T_WHITESPACE"," ",152],["T_VARIABLE","$this",152],["T_OBJECT_OPERATOR","->",152],["T_STRING","_searchIterations",152],";",["T_WHITESPACE"," ",152],["T_VARIABLE","$i",152],["T_INC","++",152],")",["T_WHITESPACE"," ",152],"{",["T_WHITESPACE","\n                ",152],["T_IF","if",153],["T_WHITESPACE"," ",153],"(",["T_VARIABLE","$this",153],["T_OBJECT_OPERATOR","->",153],["T_STRING","_segmentTableEndCodes",153],"[",["T_VARIABLE","$searchIndex",153],"]",["T_WHITESPACE"," ",153],["T_IS_GREATER_OR_EQUAL",">=",153],["T_WHITESPACE"," ",153],["T_VARIABLE","$characterCode",153],")",["T_WHITESPACE"," ",153],"{",["T_WHITESPACE","\n                    ",153],["T_VARIABLE","$subtableIndex",154],["T_WHITESPACE"," ",154],"=",["T_WHITESPACE"," ",154],["T_VARIABLE","$searchIndex",154],";",["T_WHITESPACE","\n                    ",154],["T_VARIABLE","$searchIndex",155],["T_WHITESPACE"," ",155],["T_MINUS_EQUAL","-=",155],["T_WHITESPACE"," ",155],["T_VARIABLE","$this",155],["T_OBJECT_OPERATOR","->",155],["T_STRING","_searchRange",155],["T_WHITESPACE"," ",155],["T_SR",">>",155],["T_WHITESPACE"," ",155],["T_VARIABLE","$i",155],";",["T_WHITESPACE","\n                ",155],"}",["T_WHITESPACE"," ",156],["T_ELSE","else",156],["T_WHITESPACE"," ",156],"{",["T_WHITESPACE","\n                    ",156],["T_VARIABLE","$searchIndex",157],["T_WHITESPACE"," ",157],["T_PLUS_EQUAL","+=",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$this",157],["T_OBJECT_OPERATOR","->",157],["T_STRING","_searchRange",157],["T_WHITESPACE"," ",157],["T_SR",">>",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$i",157],";",["T_WHITESPACE","\n                ",157],"}",["T_WHITESPACE","\n            ",158],"}",["T_WHITESPACE","\n\n            ",159],["T_COMMENT","\/* If the segment's start code is greater than our character code,\n             * that character is not represented in this font. Move on.\n             *\/",161],["T_WHITESPACE","\n            ",163],["T_IF","if",164],["T_WHITESPACE"," ",164],"(",["T_VARIABLE","$this",164],["T_OBJECT_OPERATOR","->",164],["T_STRING","_segmentTableStartCodes",164],"[",["T_VARIABLE","$subtableIndex",164],"]",["T_WHITESPACE"," ",164],">",["T_WHITESPACE"," ",164],["T_VARIABLE","$characterCode",164],")",["T_WHITESPACE"," ",164],"{",["T_WHITESPACE","\n                ",164],["T_VARIABLE","$glyphNumbers",165],"[",["T_VARIABLE","$key",165],"]",["T_WHITESPACE"," ",165],"=",["T_WHITESPACE"," ",165],["T_STRING","Zend_Pdf_Cmap",165],["T_DOUBLE_COLON","::",165],["T_STRING","MISSING_CHARACTER_GLYPH",165],";",["T_WHITESPACE","\n                ",165],["T_CONTINUE","continue",166],";",["T_WHITESPACE","\n            ",166],"}",["T_WHITESPACE","\n\n            ",167],["T_IF","if",169],["T_WHITESPACE"," ",169],"(",["T_VARIABLE","$this",169],["T_OBJECT_OPERATOR","->",169],["T_STRING","_segmentTableIdRangeOffsets",169],"[",["T_VARIABLE","$subtableIndex",169],"]",["T_WHITESPACE"," ",169],["T_IS_EQUAL","==",169],["T_WHITESPACE"," ",169],["T_LNUMBER","0",169],")",["T_WHITESPACE"," ",169],"{",["T_WHITESPACE","\n                ",169],["T_COMMENT","\/* This segment uses a simple mapping from character code to\n                 * glyph number.\n                 *\/",170],["T_WHITESPACE","\n                ",172],["T_VARIABLE","$glyphNumbers",173],"[",["T_VARIABLE","$key",173],"]",["T_WHITESPACE"," ",173],"=",["T_WHITESPACE"," ",173],"(",["T_VARIABLE","$characterCode",173],["T_WHITESPACE"," ",173],"+",["T_WHITESPACE"," ",173],["T_VARIABLE","$this",173],["T_OBJECT_OPERATOR","->",173],["T_STRING","_segmentTableIdDeltas",173],"[",["T_VARIABLE","$subtableIndex",173],"]",")",["T_WHITESPACE"," ",173],"%",["T_WHITESPACE"," ",173],["T_LNUMBER","65536",173],";",["T_WHITESPACE","\n\n            ",173],"}",["T_WHITESPACE"," ",175],["T_ELSE","else",175],["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n                ",175],["T_COMMENT","\/* This segment relies on the glyph index array to determine the\n                 * glyph number. The calculation below determines the correct\n                 * index into that array. It's a little odd because the range\n                 * offset in the font file is designed to quickly provide an\n                 * address of the index in the raw binary data instead of the\n                 * index itself. Since we've parsed the data into arrays, we\n                 * must process it a bit differently.\n                 *\/",176],["T_WHITESPACE","\n                ",183],["T_VARIABLE","$glyphIndex",184],["T_WHITESPACE"," ",184],"=",["T_WHITESPACE"," ",184],"(",["T_VARIABLE","$characterCode",184],["T_WHITESPACE"," ",184],"-",["T_WHITESPACE"," ",184],["T_VARIABLE","$this",184],["T_OBJECT_OPERATOR","->",184],["T_STRING","_segmentTableStartCodes",184],"[",["T_VARIABLE","$subtableIndex",184],"]",["T_WHITESPACE"," ",184],"+",["T_WHITESPACE","\n                               ",184],["T_VARIABLE","$this",185],["T_OBJECT_OPERATOR","->",185],["T_STRING","_segmentTableIdRangeOffsets",185],"[",["T_VARIABLE","$subtableIndex",185],"]",["T_WHITESPACE"," ",185],"-",["T_WHITESPACE"," ",185],["T_VARIABLE","$this",185],["T_OBJECT_OPERATOR","->",185],["T_STRING","_segmentCount",185],["T_WHITESPACE"," ",185],"+",["T_WHITESPACE","\n                               ",185],["T_VARIABLE","$subtableIndex",186],["T_WHITESPACE"," ",186],"-",["T_WHITESPACE"," ",186],["T_LNUMBER","1",186],")",";",["T_WHITESPACE","\n                ",186],["T_VARIABLE","$glyphNumbers",187],"[",["T_VARIABLE","$key",187],"]",["T_WHITESPACE"," ",187],"=",["T_WHITESPACE"," ",187],["T_VARIABLE","$this",187],["T_OBJECT_OPERATOR","->",187],["T_STRING","_glyphIndexArray",187],"[",["T_VARIABLE","$glyphIndex",187],"]",";",["T_WHITESPACE","\n\n            ",187],"}",["T_WHITESPACE","\n\n        ",189],"}",["T_WHITESPACE","\n        ",191],["T_RETURN","return",192],["T_WHITESPACE"," ",192],["T_VARIABLE","$glyphNumbers",192],";",["T_WHITESPACE","\n    ",192],"}",["T_WHITESPACE","\n\n    ",193],["T_DOC_COMMENT","\/**\n     * Returns the glyph number corresponding to the Unicode character.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumbersForCharacters()} which is optimized for bulk\n     * operations.\n     *\n     * @param integer $characterCode Unicode character code (code point).\n     * @return integer Glyph number.\n     *\/",195],["T_WHITESPACE","\n    ",206],["T_PUBLIC","public",207],["T_WHITESPACE"," ",207],["T_FUNCTION","function",207],["T_WHITESPACE"," ",207],["T_STRING","glyphNumberForCharacter",207],"(",["T_VARIABLE","$characterCode",207],")",["T_WHITESPACE","\n    ",207],"{",["T_WHITESPACE","\n        ",208],["T_COMMENT","\/* This code is pretty much a copy of glyphNumbersForCharacters().\n         * See that method for inline documentation.\n         *\/",209],["T_WHITESPACE","\n\n        ",211],["T_IF","if",213],["T_WHITESPACE"," ",213],"(",["T_VARIABLE","$characterCode",213],["T_WHITESPACE"," ",213],">",["T_WHITESPACE"," ",213],["T_LNUMBER","0xffff",213],")",["T_WHITESPACE"," ",213],"{",["T_WHITESPACE","\n            ",213],["T_RETURN","return",214],["T_WHITESPACE"," ",214],["T_STRING","Zend_Pdf_Cmap",214],["T_DOUBLE_COLON","::",214],["T_STRING","MISSING_CHARACTER_GLYPH",214],";",["T_WHITESPACE","\n        ",214],"}",["T_WHITESPACE","\n\n        ",215],["T_IF","if",217],["T_WHITESPACE"," ",217],"(",["T_VARIABLE","$this",217],["T_OBJECT_OPERATOR","->",217],["T_STRING","_searchRangeEndCode",217],["T_WHITESPACE"," ",217],["T_IS_GREATER_OR_EQUAL",">=",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$characterCode",217],")",["T_WHITESPACE"," ",217],"{",["T_WHITESPACE","\n            ",217],["T_VARIABLE","$searchIndex",218],["T_WHITESPACE"," ",218],"=",["T_WHITESPACE"," ",218],["T_VARIABLE","$this",218],["T_OBJECT_OPERATOR","->",218],["T_STRING","_searchRange",218],";",["T_WHITESPACE","\n        ",218],"}",["T_WHITESPACE"," ",219],["T_ELSE","else",219],["T_WHITESPACE"," ",219],"{",["T_WHITESPACE","\n            ",219],["T_VARIABLE","$searchIndex",220],["T_WHITESPACE"," ",220],"=",["T_WHITESPACE"," ",220],["T_VARIABLE","$this",220],["T_OBJECT_OPERATOR","->",220],["T_STRING","_segmentCount",220],";",["T_WHITESPACE","\n        ",220],"}",["T_WHITESPACE","\n\n        ",221],["T_FOR","for",223],["T_WHITESPACE"," ",223],"(",["T_VARIABLE","$i",223],["T_WHITESPACE"," ",223],"=",["T_WHITESPACE"," ",223],["T_LNUMBER","1",223],";",["T_WHITESPACE"," ",223],["T_VARIABLE","$i",223],["T_WHITESPACE"," ",223],["T_IS_SMALLER_OR_EQUAL","<=",223],["T_WHITESPACE"," ",223],["T_VARIABLE","$this",223],["T_OBJECT_OPERATOR","->",223],["T_STRING","_searchIterations",223],";",["T_WHITESPACE"," ",223],["T_VARIABLE","$i",223],["T_INC","++",223],")",["T_WHITESPACE"," ",223],"{",["T_WHITESPACE","\n            ",223],["T_IF","if",224],["T_WHITESPACE"," ",224],"(",["T_VARIABLE","$this",224],["T_OBJECT_OPERATOR","->",224],["T_STRING","_segmentTableEndCodes",224],"[",["T_VARIABLE","$searchIndex",224],"]",["T_WHITESPACE"," ",224],["T_IS_GREATER_OR_EQUAL",">=",224],["T_WHITESPACE"," ",224],["T_VARIABLE","$characterCode",224],")",["T_WHITESPACE"," ",224],"{",["T_WHITESPACE","\n                ",224],["T_VARIABLE","$subtableIndex",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],["T_VARIABLE","$searchIndex",225],";",["T_WHITESPACE","\n                ",225],["T_VARIABLE","$searchIndex",226],["T_WHITESPACE"," ",226],["T_MINUS_EQUAL","-=",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$this",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","_searchRange",226],["T_WHITESPACE"," ",226],["T_SR",">>",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$i",226],";",["T_WHITESPACE","\n            ",226],"}",["T_WHITESPACE"," ",227],["T_ELSE","else",227],["T_WHITESPACE"," ",227],"{",["T_WHITESPACE","\n                ",227],["T_VARIABLE","$searchIndex",228],["T_WHITESPACE"," ",228],["T_PLUS_EQUAL","+=",228],["T_WHITESPACE"," ",228],["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","_searchRange",228],["T_WHITESPACE"," ",228],["T_SR",">>",228],["T_WHITESPACE"," ",228],["T_VARIABLE","$i",228],";",["T_WHITESPACE","\n            ",228],"}",["T_WHITESPACE","\n        ",229],"}",["T_WHITESPACE","\n\n        ",230],["T_IF","if",232],["T_WHITESPACE"," ",232],"(",["T_VARIABLE","$this",232],["T_OBJECT_OPERATOR","->",232],["T_STRING","_segmentTableStartCodes",232],"[",["T_VARIABLE","$subtableIndex",232],"]",["T_WHITESPACE"," ",232],">",["T_WHITESPACE"," ",232],["T_VARIABLE","$characterCode",232],")",["T_WHITESPACE"," ",232],"{",["T_WHITESPACE","\n            ",232],["T_RETURN","return",233],["T_WHITESPACE"," ",233],["T_STRING","Zend_Pdf_Cmap",233],["T_DOUBLE_COLON","::",233],["T_STRING","MISSING_CHARACTER_GLYPH",233],";",["T_WHITESPACE","\n        ",233],"}",["T_WHITESPACE","\n\n        ",234],["T_IF","if",236],["T_WHITESPACE"," ",236],"(",["T_VARIABLE","$this",236],["T_OBJECT_OPERATOR","->",236],["T_STRING","_segmentTableIdRangeOffsets",236],"[",["T_VARIABLE","$subtableIndex",236],"]",["T_WHITESPACE"," ",236],["T_IS_EQUAL","==",236],["T_WHITESPACE"," ",236],["T_LNUMBER","0",236],")",["T_WHITESPACE"," ",236],"{",["T_WHITESPACE","\n            ",236],["T_VARIABLE","$glyphNumber",237],["T_WHITESPACE"," ",237],"=",["T_WHITESPACE"," ",237],"(",["T_VARIABLE","$characterCode",237],["T_WHITESPACE"," ",237],"+",["T_WHITESPACE"," ",237],["T_VARIABLE","$this",237],["T_OBJECT_OPERATOR","->",237],["T_STRING","_segmentTableIdDeltas",237],"[",["T_VARIABLE","$subtableIndex",237],"]",")",["T_WHITESPACE"," ",237],"%",["T_WHITESPACE"," ",237],["T_LNUMBER","65536",237],";",["T_WHITESPACE","\n        ",237],"}",["T_WHITESPACE"," ",238],["T_ELSE","else",238],["T_WHITESPACE"," ",238],"{",["T_WHITESPACE","\n            ",238],["T_VARIABLE","$glyphIndex",239],["T_WHITESPACE"," ",239],"=",["T_WHITESPACE"," ",239],"(",["T_VARIABLE","$characterCode",239],["T_WHITESPACE"," ",239],"-",["T_WHITESPACE"," ",239],["T_VARIABLE","$this",239],["T_OBJECT_OPERATOR","->",239],["T_STRING","_segmentTableStartCodes",239],"[",["T_VARIABLE","$subtableIndex",239],"]",["T_WHITESPACE"," ",239],"+",["T_WHITESPACE","\n                           ",239],["T_VARIABLE","$this",240],["T_OBJECT_OPERATOR","->",240],["T_STRING","_segmentTableIdRangeOffsets",240],"[",["T_VARIABLE","$subtableIndex",240],"]",["T_WHITESPACE"," ",240],"-",["T_WHITESPACE"," ",240],["T_VARIABLE","$this",240],["T_OBJECT_OPERATOR","->",240],["T_STRING","_segmentCount",240],["T_WHITESPACE"," ",240],"+",["T_WHITESPACE","\n                           ",240],["T_VARIABLE","$subtableIndex",241],["T_WHITESPACE"," ",241],"-",["T_WHITESPACE"," ",241],["T_LNUMBER","1",241],")",";",["T_WHITESPACE","\n            ",241],["T_VARIABLE","$glyphNumber",242],["T_WHITESPACE"," ",242],"=",["T_WHITESPACE"," ",242],["T_VARIABLE","$this",242],["T_OBJECT_OPERATOR","->",242],["T_STRING","_glyphIndexArray",242],"[",["T_VARIABLE","$glyphIndex",242],"]",";",["T_WHITESPACE","\n        ",242],"}",["T_WHITESPACE","\n        ",243],["T_RETURN","return",244],["T_WHITESPACE"," ",244],["T_VARIABLE","$glyphNumber",244],";",["T_WHITESPACE","\n    ",244],"}",["T_WHITESPACE","\n\n    ",245],["T_DOC_COMMENT","\/**\n     * Returns an array containing the Unicode characters that have entries in\n     * this character map.\n     *\n     * @return array Unicode character codes.\n     *\/",247],["T_WHITESPACE","\n    ",252],["T_PUBLIC","public",253],["T_WHITESPACE"," ",253],["T_FUNCTION","function",253],["T_WHITESPACE"," ",253],["T_STRING","getCoveredCharacters",253],"(",")",["T_WHITESPACE","\n    ",253],"{",["T_WHITESPACE","\n        ",254],["T_VARIABLE","$characterCodes",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_ARRAY","array",255],"(",")",";",["T_WHITESPACE","\n        ",255],["T_FOR","for",256],["T_WHITESPACE"," ",256],"(",["T_VARIABLE","$i",256],["T_WHITESPACE"," ",256],"=",["T_WHITESPACE"," ",256],["T_LNUMBER","1",256],";",["T_WHITESPACE"," ",256],["T_VARIABLE","$i",256],["T_WHITESPACE"," ",256],["T_IS_SMALLER_OR_EQUAL","<=",256],["T_WHITESPACE"," ",256],["T_VARIABLE","$this",256],["T_OBJECT_OPERATOR","->",256],["T_STRING","_segmentCount",256],";",["T_WHITESPACE"," ",256],["T_VARIABLE","$i",256],["T_INC","++",256],")",["T_WHITESPACE"," ",256],"{",["T_WHITESPACE","\n            ",256],["T_FOR","for",257],["T_WHITESPACE"," ",257],"(",["T_VARIABLE","$code",257],["T_WHITESPACE"," ",257],"=",["T_WHITESPACE"," ",257],["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","_segmentTableStartCodes",257],"[",["T_VARIABLE","$i",257],"]",";",["T_WHITESPACE"," ",257],["T_VARIABLE","$code",257],["T_WHITESPACE"," ",257],["T_IS_SMALLER_OR_EQUAL","<=",257],["T_WHITESPACE"," ",257],["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","_segmentTableEndCodes",257],"[",["T_VARIABLE","$i",257],"]",";",["T_WHITESPACE"," ",257],["T_VARIABLE","$code",257],["T_INC","++",257],")",["T_WHITESPACE"," ",257],"{",["T_WHITESPACE","\n                ",257],["T_VARIABLE","$characterCodes",258],"[","]",["T_WHITESPACE"," ",258],"=",["T_WHITESPACE"," ",258],["T_VARIABLE","$code",258],";",["T_WHITESPACE","\n            ",258],"}",["T_WHITESPACE","\n        ",259],"}",["T_WHITESPACE","\n        ",260],["T_RETURN","return",261],["T_WHITESPACE"," ",261],["T_VARIABLE","$characterCodes",261],";",["T_WHITESPACE","\n    ",261],"}",["T_WHITESPACE","\n\n\n    ",262],["T_DOC_COMMENT","\/**\n     * Returns an array containing the glyphs numbers that have entries in this character map.\n     * Keys are Unicode character codes (integers)\n     *\n     * This functionality is partially covered by glyphNumbersForCharacters(getCoveredCharacters())\n     * call, but this method do it in more effective way (prepare complete list instead of searching\n     * glyph for each character code).\n     *\n     * @internal\n     * @return array Array representing <Unicode character code> => <glyph number> pairs.\n     *\/",265],["T_WHITESPACE","\n    ",275],["T_PUBLIC","public",276],["T_WHITESPACE"," ",276],["T_FUNCTION","function",276],["T_WHITESPACE"," ",276],["T_STRING","getCoveredCharactersGlyphs",276],"(",")",["T_WHITESPACE","\n    ",276],"{",["T_WHITESPACE","\n        ",277],["T_VARIABLE","$glyphNumbers",278],["T_WHITESPACE"," ",278],"=",["T_WHITESPACE"," ",278],["T_ARRAY","array",278],"(",")",";",["T_WHITESPACE","\n\n        ",278],["T_FOR","for",280],["T_WHITESPACE"," ",280],"(",["T_VARIABLE","$segmentNum",280],["T_WHITESPACE"," ",280],"=",["T_WHITESPACE"," ",280],["T_LNUMBER","1",280],";",["T_WHITESPACE"," ",280],["T_VARIABLE","$segmentNum",280],["T_WHITESPACE"," ",280],["T_IS_SMALLER_OR_EQUAL","<=",280],["T_WHITESPACE"," ",280],["T_VARIABLE","$this",280],["T_OBJECT_OPERATOR","->",280],["T_STRING","_segmentCount",280],";",["T_WHITESPACE"," ",280],["T_VARIABLE","$segmentNum",280],["T_INC","++",280],")",["T_WHITESPACE"," ",280],"{",["T_WHITESPACE","\n            ",280],["T_IF","if",281],["T_WHITESPACE"," ",281],"(",["T_VARIABLE","$this",281],["T_OBJECT_OPERATOR","->",281],["T_STRING","_segmentTableIdRangeOffsets",281],"[",["T_VARIABLE","$segmentNum",281],"]",["T_WHITESPACE"," ",281],["T_IS_EQUAL","==",281],["T_WHITESPACE"," ",281],["T_LNUMBER","0",281],")",["T_WHITESPACE"," ",281],"{",["T_WHITESPACE","\n                ",281],["T_VARIABLE","$delta",282],["T_WHITESPACE"," ",282],"=",["T_WHITESPACE"," ",282],["T_VARIABLE","$this",282],["T_OBJECT_OPERATOR","->",282],["T_STRING","_segmentTableIdDeltas",282],"[",["T_VARIABLE","$segmentNum",282],"]",";",["T_WHITESPACE","\n\n                ",282],["T_FOR","for",284],["T_WHITESPACE"," ",284],"(",["T_VARIABLE","$code",284],["T_WHITESPACE"," ",284],"=",["T_WHITESPACE","  ",284],["T_VARIABLE","$this",284],["T_OBJECT_OPERATOR","->",284],["T_STRING","_segmentTableStartCodes",284],"[",["T_VARIABLE","$segmentNum",284],"]",";",["T_WHITESPACE","\n                     ",284],["T_VARIABLE","$code",285],["T_WHITESPACE"," ",285],["T_IS_SMALLER_OR_EQUAL","<=",285],["T_WHITESPACE"," ",285],["T_VARIABLE","$this",285],["T_OBJECT_OPERATOR","->",285],["T_STRING","_segmentTableEndCodes",285],"[",["T_VARIABLE","$segmentNum",285],"]",";",["T_WHITESPACE","\n                     ",285],["T_VARIABLE","$code",286],["T_INC","++",286],")",["T_WHITESPACE"," ",286],"{",["T_WHITESPACE","\n                    ",286],["T_VARIABLE","$glyphNumbers",287],"[",["T_VARIABLE","$code",287],"]",["T_WHITESPACE"," ",287],"=",["T_WHITESPACE"," ",287],"(",["T_VARIABLE","$code",287],["T_WHITESPACE"," ",287],"+",["T_WHITESPACE"," ",287],["T_VARIABLE","$delta",287],")",["T_WHITESPACE"," ",287],"%",["T_WHITESPACE"," ",287],["T_LNUMBER","65536",287],";",["T_WHITESPACE","\n                ",287],"}",["T_WHITESPACE","\n            ",288],"}",["T_WHITESPACE"," ",289],["T_ELSE","else",289],["T_WHITESPACE"," ",289],"{",["T_WHITESPACE","\n                ",289],["T_VARIABLE","$code",290],["T_WHITESPACE","       ",290],"=",["T_WHITESPACE"," ",290],["T_VARIABLE","$this",290],["T_OBJECT_OPERATOR","->",290],["T_STRING","_segmentTableStartCodes",290],"[",["T_VARIABLE","$segmentNum",290],"]",";",["T_WHITESPACE","\n                ",290],["T_VARIABLE","$glyphIndex",291],["T_WHITESPACE"," ",291],"=",["T_WHITESPACE"," ",291],["T_VARIABLE","$this",291],["T_OBJECT_OPERATOR","->",291],["T_STRING","_segmentTableIdRangeOffsets",291],"[",["T_VARIABLE","$segmentNum",291],"]",["T_WHITESPACE"," ",291],"-",["T_WHITESPACE"," ",291],"(",["T_VARIABLE","$this",291],["T_OBJECT_OPERATOR","->",291],["T_STRING","_segmentCount",291],["T_WHITESPACE"," ",291],"-",["T_WHITESPACE"," ",291],["T_VARIABLE","$segmentNum",291],")",["T_WHITESPACE"," ",291],"-",["T_WHITESPACE"," ",291],["T_LNUMBER","1",291],";",["T_WHITESPACE","\n\n                ",291],["T_WHILE","while",293],["T_WHITESPACE"," ",293],"(",["T_VARIABLE","$code",293],["T_WHITESPACE"," ",293],["T_IS_SMALLER_OR_EQUAL","<=",293],["T_WHITESPACE"," ",293],["T_VARIABLE","$this",293],["T_OBJECT_OPERATOR","->",293],["T_STRING","_segmentTableEndCodes",293],"[",["T_VARIABLE","$segmentNum",293],"]",")",["T_WHITESPACE"," ",293],"{",["T_WHITESPACE","\n                    ",293],["T_VARIABLE","$glyphNumbers",294],"[",["T_VARIABLE","$code",294],"]",["T_WHITESPACE"," ",294],"=",["T_WHITESPACE"," ",294],["T_VARIABLE","$this",294],["T_OBJECT_OPERATOR","->",294],["T_STRING","_glyphIndexArray",294],"[",["T_VARIABLE","$glyphIndex",294],"]",";",["T_WHITESPACE","\n\n                    ",294],["T_VARIABLE","$code",296],["T_INC","++",296],";",["T_WHITESPACE","\n                    ",296],["T_VARIABLE","$glyphIndex",297],["T_INC","++",297],";",["T_WHITESPACE","\n                ",297],"}",["T_WHITESPACE","\n            ",298],"}",["T_WHITESPACE","\n        ",299],"}",["T_WHITESPACE","\n\n        ",300],["T_RETURN","return",302],["T_WHITESPACE"," ",302],["T_VARIABLE","$glyphNumbers",302],";",["T_WHITESPACE","\n    ",302],"}",["T_WHITESPACE","\n\n\n\n  ",303],["T_COMMENT","\/* Object Lifecycle *\/",307],["T_WHITESPACE","\n\n    ",307],["T_DOC_COMMENT","\/**\n     * Object constructor\n     *\n     * Parses the raw binary table data. Throws an exception if the table is\n     * malformed.\n     *\n     * @param string $cmapData Raw binary cmap table data.\n     * @throws Zend_Pdf_Exception\n     *\/",309],["T_WHITESPACE","\n    ",317],["T_PUBLIC","public",318],["T_WHITESPACE"," ",318],["T_FUNCTION","function",318],["T_WHITESPACE"," ",318],["T_STRING","__construct",318],"(",["T_VARIABLE","$cmapData",318],")",["T_WHITESPACE","\n    ",318],"{",["T_WHITESPACE","\n        ",319],["T_COMMENT","\/* Sanity check: The table should be at least 23 bytes in size.\n         *\/",320],["T_WHITESPACE","\n        ",321],["T_VARIABLE","$actualLength",322],["T_WHITESPACE"," ",322],"=",["T_WHITESPACE"," ",322],["T_STRING","strlen",322],"(",["T_VARIABLE","$cmapData",322],")",";",["T_WHITESPACE","\n        ",322],["T_IF","if",323],["T_WHITESPACE"," ",323],"(",["T_VARIABLE","$actualLength",323],["T_WHITESPACE"," ",323],"<",["T_WHITESPACE"," ",323],["T_LNUMBER","23",323],")",["T_WHITESPACE"," ",323],"{",["T_WHITESPACE","\n            ",323],["T_COMMENT","#require_once 'Zend\/Pdf\/Exception.php';\n",324],["T_WHITESPACE","            ",325],["T_THROW","throw",325],["T_WHITESPACE"," ",325],["T_NEW","new",325],["T_WHITESPACE"," ",325],["T_STRING","Zend_Pdf_Exception",325],"(",["T_CONSTANT_ENCAPSED_STRING","'Insufficient table data'",325],",",["T_WHITESPACE","\n                                         ",325],["T_STRING","Zend_Pdf_Exception",326],["T_DOUBLE_COLON","::",326],["T_STRING","CMAP_TABLE_DATA_TOO_SMALL",326],")",";",["T_WHITESPACE","\n        ",326],"}",["T_WHITESPACE","\n\n        ",327],["T_COMMENT","\/* Sanity check: Make sure this is right data for this table type.\n         *\/",329],["T_WHITESPACE","\n        ",330],["T_VARIABLE","$type",331],["T_WHITESPACE"," ",331],"=",["T_WHITESPACE"," ",331],["T_VARIABLE","$this",331],["T_OBJECT_OPERATOR","->",331],["T_STRING","_extractUInt2",331],"(",["T_VARIABLE","$cmapData",331],",",["T_WHITESPACE"," ",331],["T_LNUMBER","0",331],")",";",["T_WHITESPACE","\n        ",331],["T_IF","if",332],["T_WHITESPACE"," ",332],"(",["T_VARIABLE","$type",332],["T_WHITESPACE"," ",332],["T_IS_NOT_EQUAL","!=",332],["T_WHITESPACE"," ",332],["T_STRING","Zend_Pdf_Cmap",332],["T_DOUBLE_COLON","::",332],["T_STRING","TYPE_SEGMENT_TO_DELTA",332],")",["T_WHITESPACE"," ",332],"{",["T_WHITESPACE","\n            ",332],["T_COMMENT","#require_once 'Zend\/Pdf\/Exception.php';\n",333],["T_WHITESPACE","            ",334],["T_THROW","throw",334],["T_WHITESPACE"," ",334],["T_NEW","new",334],["T_WHITESPACE"," ",334],["T_STRING","Zend_Pdf_Exception",334],"(",["T_CONSTANT_ENCAPSED_STRING","'Wrong cmap table type'",334],",",["T_WHITESPACE","\n                                         ",334],["T_STRING","Zend_Pdf_Exception",335],["T_DOUBLE_COLON","::",335],["T_STRING","CMAP_WRONG_TABLE_TYPE",335],")",";",["T_WHITESPACE","\n        ",335],"}",["T_WHITESPACE","\n\n        ",336],["T_VARIABLE","$length",338],["T_WHITESPACE"," ",338],"=",["T_WHITESPACE"," ",338],["T_VARIABLE","$this",338],["T_OBJECT_OPERATOR","->",338],["T_STRING","_extractUInt2",338],"(",["T_VARIABLE","$cmapData",338],",",["T_WHITESPACE"," ",338],["T_LNUMBER","2",338],")",";",["T_WHITESPACE","\n        ",338],["T_IF","if",339],["T_WHITESPACE"," ",339],"(",["T_VARIABLE","$length",339],["T_WHITESPACE"," ",339],["T_IS_NOT_EQUAL","!=",339],["T_WHITESPACE"," ",339],["T_VARIABLE","$actualLength",339],")",["T_WHITESPACE"," ",339],"{",["T_WHITESPACE","\n            ",339],["T_COMMENT","#require_once 'Zend\/Pdf\/Exception.php';\n",340],["T_WHITESPACE","            ",341],["T_THROW","throw",341],["T_WHITESPACE"," ",341],["T_NEW","new",341],["T_WHITESPACE"," ",341],["T_STRING","Zend_Pdf_Exception",341],"(","\"",["T_ENCAPSED_AND_WHITESPACE","Table length (",341],["T_VARIABLE","$length",341],["T_ENCAPSED_AND_WHITESPACE",") does not match actual length (",341],["T_VARIABLE","$actualLength",341],["T_ENCAPSED_AND_WHITESPACE",")",341],"\"",",",["T_WHITESPACE","\n                                         ",341],["T_STRING","Zend_Pdf_Exception",342],["T_DOUBLE_COLON","::",342],["T_STRING","CMAP_WRONG_TABLE_LENGTH",342],")",";",["T_WHITESPACE","\n        ",342],"}",["T_WHITESPACE","\n\n        ",343],["T_COMMENT","\/* Mapping tables should be language-independent. The font may not work\n         * as expected if they are not. Unfortunately, many font files in the\n         * wild incorrectly record a language ID in this field, so we can't\n         * call this a failure.\n         *\/",345],["T_WHITESPACE","\n        ",349],["T_VARIABLE","$language",350],["T_WHITESPACE"," ",350],"=",["T_WHITESPACE"," ",350],["T_VARIABLE","$this",350],["T_OBJECT_OPERATOR","->",350],["T_STRING","_extractUInt2",350],"(",["T_VARIABLE","$cmapData",350],",",["T_WHITESPACE"," ",350],["T_LNUMBER","4",350],")",";",["T_WHITESPACE","\n        ",350],["T_IF","if",351],["T_WHITESPACE"," ",351],"(",["T_VARIABLE","$language",351],["T_WHITESPACE"," ",351],["T_IS_NOT_EQUAL","!=",351],["T_WHITESPACE"," ",351],["T_LNUMBER","0",351],")",["T_WHITESPACE"," ",351],"{",["T_WHITESPACE","\n            ",351],["T_COMMENT","\/\/ Record a warning here somehow?\n",352],["T_WHITESPACE","        ",353],"}",["T_WHITESPACE","\n\n        ",353],["T_COMMENT","\/* These two values are stored premultiplied by two which is convienent\n         * when using the binary data directly, but we're parsing it out to\n         * native PHP data types, so divide by two.\n         *\/",355],["T_WHITESPACE","\n        ",358],["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","_segmentCount",359],["T_WHITESPACE"," ",359],"=",["T_WHITESPACE"," ",359],["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","_extractUInt2",359],"(",["T_VARIABLE","$cmapData",359],",",["T_WHITESPACE"," ",359],["T_LNUMBER","6",359],")",["T_WHITESPACE"," ",359],["T_SR",">>",359],["T_WHITESPACE"," ",359],["T_LNUMBER","1",359],";",["T_WHITESPACE","\n        ",359],["T_VARIABLE","$this",360],["T_OBJECT_OPERATOR","->",360],["T_STRING","_searchRange",360],["T_WHITESPACE","  ",360],"=",["T_WHITESPACE"," ",360],["T_VARIABLE","$this",360],["T_OBJECT_OPERATOR","->",360],["T_STRING","_extractUInt2",360],"(",["T_VARIABLE","$cmapData",360],",",["T_WHITESPACE"," ",360],["T_LNUMBER","8",360],")",["T_WHITESPACE"," ",360],["T_SR",">>",360],["T_WHITESPACE"," ",360],["T_LNUMBER","1",360],";",["T_WHITESPACE","\n\n        ",360],["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","_searchIterations",362],["T_WHITESPACE"," ",362],"=",["T_WHITESPACE"," ",362],["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","_extractUInt2",362],"(",["T_VARIABLE","$cmapData",362],",",["T_WHITESPACE"," ",362],["T_LNUMBER","10",362],")",["T_WHITESPACE"," ",362],"+",["T_WHITESPACE"," ",362],["T_LNUMBER","1",362],";",["T_WHITESPACE","\n\n        ",362],["T_VARIABLE","$offset",364],["T_WHITESPACE"," ",364],"=",["T_WHITESPACE"," ",364],["T_LNUMBER","14",364],";",["T_WHITESPACE","\n        ",364],["T_FOR","for",365],["T_WHITESPACE"," ",365],"(",["T_VARIABLE","$i",365],["T_WHITESPACE"," ",365],"=",["T_WHITESPACE"," ",365],["T_LNUMBER","1",365],";",["T_WHITESPACE"," ",365],["T_VARIABLE","$i",365],["T_WHITESPACE"," ",365],["T_IS_SMALLER_OR_EQUAL","<=",365],["T_WHITESPACE"," ",365],["T_VARIABLE","$this",365],["T_OBJECT_OPERATOR","->",365],["T_STRING","_segmentCount",365],";",["T_WHITESPACE"," ",365],["T_VARIABLE","$i",365],["T_INC","++",365],",",["T_WHITESPACE"," ",365],["T_VARIABLE","$offset",365],["T_WHITESPACE"," ",365],["T_PLUS_EQUAL","+=",365],["T_WHITESPACE"," ",365],["T_LNUMBER","2",365],")",["T_WHITESPACE"," ",365],"{",["T_WHITESPACE","\n            ",365],["T_VARIABLE","$this",366],["T_OBJECT_OPERATOR","->",366],["T_STRING","_segmentTableEndCodes",366],"[",["T_VARIABLE","$i",366],"]",["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],["T_VARIABLE","$this",366],["T_OBJECT_OPERATOR","->",366],["T_STRING","_extractUInt2",366],"(",["T_VARIABLE","$cmapData",366],",",["T_WHITESPACE"," ",366],["T_VARIABLE","$offset",366],")",";",["T_WHITESPACE","\n        ",366],"}",["T_WHITESPACE","\n\n        ",367],["T_VARIABLE","$this",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","_searchRangeEndCode",369],["T_WHITESPACE"," ",369],"=",["T_WHITESPACE"," ",369],["T_VARIABLE","$this",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","_segmentTableEndCodes",369],"[",["T_VARIABLE","$this",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","_searchRange",369],"]",";",["T_WHITESPACE","\n\n        ",369],["T_VARIABLE","$offset",371],["T_WHITESPACE"," ",371],["T_PLUS_EQUAL","+=",371],["T_WHITESPACE"," ",371],["T_LNUMBER","2",371],";",["T_WHITESPACE","    ",371],["T_COMMENT","\/\/ reserved bytes\n",371],["T_WHITESPACE","\n        ",372],["T_FOR","for",373],["T_WHITESPACE"," ",373],"(",["T_VARIABLE","$i",373],["T_WHITESPACE"," ",373],"=",["T_WHITESPACE"," ",373],["T_LNUMBER","1",373],";",["T_WHITESPACE"," ",373],["T_VARIABLE","$i",373],["T_WHITESPACE"," ",373],["T_IS_SMALLER_OR_EQUAL","<=",373],["T_WHITESPACE"," ",373],["T_VARIABLE","$this",373],["T_OBJECT_OPERATOR","->",373],["T_STRING","_segmentCount",373],";",["T_WHITESPACE"," ",373],["T_VARIABLE","$i",373],["T_INC","++",373],",",["T_WHITESPACE"," ",373],["T_VARIABLE","$offset",373],["T_WHITESPACE"," ",373],["T_PLUS_EQUAL","+=",373],["T_WHITESPACE"," ",373],["T_LNUMBER","2",373],")",["T_WHITESPACE"," ",373],"{",["T_WHITESPACE","\n            ",373],["T_VARIABLE","$this",374],["T_OBJECT_OPERATOR","->",374],["T_STRING","_segmentTableStartCodes",374],"[",["T_VARIABLE","$i",374],"]",["T_WHITESPACE"," ",374],"=",["T_WHITESPACE"," ",374],["T_VARIABLE","$this",374],["T_OBJECT_OPERATOR","->",374],["T_STRING","_extractUInt2",374],"(",["T_VARIABLE","$cmapData",374],",",["T_WHITESPACE"," ",374],["T_VARIABLE","$offset",374],")",";",["T_WHITESPACE","\n        ",374],"}",["T_WHITESPACE","\n\n        ",375],["T_FOR","for",377],["T_WHITESPACE"," ",377],"(",["T_VARIABLE","$i",377],["T_WHITESPACE"," ",377],"=",["T_WHITESPACE"," ",377],["T_LNUMBER","1",377],";",["T_WHITESPACE"," ",377],["T_VARIABLE","$i",377],["T_WHITESPACE"," ",377],["T_IS_SMALLER_OR_EQUAL","<=",377],["T_WHITESPACE"," ",377],["T_VARIABLE","$this",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","_segmentCount",377],";",["T_WHITESPACE"," ",377],["T_VARIABLE","$i",377],["T_INC","++",377],",",["T_WHITESPACE"," ",377],["T_VARIABLE","$offset",377],["T_WHITESPACE"," ",377],["T_PLUS_EQUAL","+=",377],["T_WHITESPACE"," ",377],["T_LNUMBER","2",377],")",["T_WHITESPACE"," ",377],"{",["T_WHITESPACE","\n            ",377],["T_VARIABLE","$this",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","_segmentTableIdDeltas",378],"[",["T_VARIABLE","$i",378],"]",["T_WHITESPACE"," ",378],"=",["T_WHITESPACE"," ",378],["T_VARIABLE","$this",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","_extractInt2",378],"(",["T_VARIABLE","$cmapData",378],",",["T_WHITESPACE"," ",378],["T_VARIABLE","$offset",378],")",";",["T_WHITESPACE","    ",378],["T_COMMENT","\/\/ signed\n",378],["T_WHITESPACE","        ",379],"}",["T_WHITESPACE","\n\n        ",379],["T_COMMENT","\/* The range offset helps determine the index into the glyph index array.\n         * Like the segment count and search range above, it's stored as a byte\n         * multiple in the font, so divide by two as we extract the values.\n         *\/",381],["T_WHITESPACE","\n        ",384],["T_FOR","for",385],["T_WHITESPACE"," ",385],"(",["T_VARIABLE","$i",385],["T_WHITESPACE"," ",385],"=",["T_WHITESPACE"," ",385],["T_LNUMBER","1",385],";",["T_WHITESPACE"," ",385],["T_VARIABLE","$i",385],["T_WHITESPACE"," ",385],["T_IS_SMALLER_OR_EQUAL","<=",385],["T_WHITESPACE"," ",385],["T_VARIABLE","$this",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","_segmentCount",385],";",["T_WHITESPACE"," ",385],["T_VARIABLE","$i",385],["T_INC","++",385],",",["T_WHITESPACE"," ",385],["T_VARIABLE","$offset",385],["T_WHITESPACE"," ",385],["T_PLUS_EQUAL","+=",385],["T_WHITESPACE"," ",385],["T_LNUMBER","2",385],")",["T_WHITESPACE"," ",385],"{",["T_WHITESPACE","\n            ",385],["T_VARIABLE","$this",386],["T_OBJECT_OPERATOR","->",386],["T_STRING","_segmentTableIdRangeOffsets",386],"[",["T_VARIABLE","$i",386],"]",["T_WHITESPACE"," ",386],"=",["T_WHITESPACE"," ",386],["T_VARIABLE","$this",386],["T_OBJECT_OPERATOR","->",386],["T_STRING","_extractUInt2",386],"(",["T_VARIABLE","$cmapData",386],",",["T_WHITESPACE"," ",386],["T_VARIABLE","$offset",386],")",["T_WHITESPACE"," ",386],["T_SR",">>",386],["T_WHITESPACE"," ",386],["T_LNUMBER","1",386],";",["T_WHITESPACE","\n        ",386],"}",["T_WHITESPACE","\n\n        ",387],["T_COMMENT","\/* The size of the glyph index array varies by font and depends on the\n         * extent of the usage of range offsets versus deltas. Some fonts may\n         * not have any entries in this array.\n         *\/",389],["T_WHITESPACE","\n        ",392],["T_FOR","for",393],["T_WHITESPACE"," ",393],"(",";",["T_WHITESPACE"," ",393],["T_VARIABLE","$offset",393],["T_WHITESPACE"," ",393],"<",["T_WHITESPACE"," ",393],["T_VARIABLE","$length",393],";",["T_WHITESPACE"," ",393],["T_VARIABLE","$offset",393],["T_WHITESPACE"," ",393],["T_PLUS_EQUAL","+=",393],["T_WHITESPACE"," ",393],["T_LNUMBER","2",393],")",["T_WHITESPACE"," ",393],"{",["T_WHITESPACE","\n            ",393],["T_VARIABLE","$this",394],["T_OBJECT_OPERATOR","->",394],["T_STRING","_glyphIndexArray",394],"[","]",["T_WHITESPACE"," ",394],"=",["T_WHITESPACE"," ",394],["T_VARIABLE","$this",394],["T_OBJECT_OPERATOR","->",394],["T_STRING","_extractUInt2",394],"(",["T_VARIABLE","$cmapData",394],",",["T_WHITESPACE"," ",394],["T_VARIABLE","$offset",394],")",";",["T_WHITESPACE","\n        ",394],"}",["T_WHITESPACE","\n\n        ",395],["T_COMMENT","\/* Sanity check: After reading all of the data, we should be at the end\n         * of the table.\n         *\/",397],["T_WHITESPACE","\n        ",399],["T_IF","if",400],["T_WHITESPACE"," ",400],"(",["T_VARIABLE","$offset",400],["T_WHITESPACE"," ",400],["T_IS_NOT_EQUAL","!=",400],["T_WHITESPACE"," ",400],["T_VARIABLE","$length",400],")",["T_WHITESPACE"," ",400],"{",["T_WHITESPACE","\n            ",400],["T_COMMENT","#require_once 'Zend\/Pdf\/Exception.php';\n",401],["T_WHITESPACE","            ",402],["T_THROW","throw",402],["T_WHITESPACE"," ",402],["T_NEW","new",402],["T_WHITESPACE"," ",402],["T_STRING","Zend_Pdf_Exception",402],"(","\"",["T_ENCAPSED_AND_WHITESPACE","Ending offset (",402],["T_VARIABLE","$offset",402],["T_ENCAPSED_AND_WHITESPACE",") does not match length (",402],["T_VARIABLE","$length",402],["T_ENCAPSED_AND_WHITESPACE",")",402],"\"",",",["T_WHITESPACE","\n                                         ",402],["T_STRING","Zend_Pdf_Exception",403],["T_DOUBLE_COLON","::",403],["T_STRING","CMAP_FINAL_OFFSET_NOT_LENGTH",403],")",";",["T_WHITESPACE","\n        ",403],"}",["T_WHITESPACE","\n    ",404],"}",["T_WHITESPACE","\n\n",405],"}",["T_WHITESPACE","\n",407]]