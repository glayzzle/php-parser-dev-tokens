[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/** Zend_Pdf_Resource *\/",23],["T_WHITESPACE","\n",23],["T_COMMENT","#require_once 'Zend\/Pdf\/Resource.php';\n",24],["T_WHITESPACE","\n",25],["T_DOC_COMMENT","\/**\n * Zend_Pdf_Font\n *\n * Zend_Pdf_Font class constants are used within Zend_Pdf_Resource_Font\n * and its subclusses.\n *\/",26],["T_WHITESPACE","\n",31],["T_COMMENT","#require_once 'Zend\/Pdf\/Font.php';\n",32],["T_WHITESPACE","\n",33],["T_DOC_COMMENT","\/**\n * Abstract class which manages PDF fonts.\n *\n * Defines the public interface and creates shared storage for concrete\n * subclasses which are responsible for generating the font's information\n * dictionaries, mapping characters to glyphs, and providing both overall font\n * and glyph-specific metric data.\n *\n * Font objects should be normally be obtained from the factory methods\n * {@link Zend_Pdf_Font::fontWithName} and {@link Zend_Pdf_Font::fontWithPath}.\n *\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",34],["T_WHITESPACE","\n",49],["T_ABSTRACT","abstract",50],["T_WHITESPACE"," ",50],["T_CLASS","class",50],["T_WHITESPACE"," ",50],["T_STRING","Zend_Pdf_Resource_Font",50],["T_WHITESPACE"," ",50],["T_EXTENDS","extends",50],["T_WHITESPACE"," ",50],["T_STRING","Zend_Pdf_Resource",50],["T_WHITESPACE","\n",50],"{",["T_WHITESPACE","\n  ",51],["T_COMMENT","\/**** Instance Variables ****\/",52],["T_WHITESPACE","\n\n\n    ",52],["T_DOC_COMMENT","\/**\n     * The type of font. Use TYPE_ constants defined in {@link Zend_Pdf_Font}.\n     * @var integer\n     *\/",55],["T_WHITESPACE","\n    ",58],["T_PROTECTED","protected",59],["T_WHITESPACE"," ",59],["T_VARIABLE","$_fontType",59],["T_WHITESPACE"," ",59],"=",["T_WHITESPACE"," ",59],["T_STRING","Zend_Pdf_Font",59],["T_DOUBLE_COLON","::",59],["T_STRING","TYPE_UNKNOWN",59],";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * Array containing descriptive names for the font. See {@link fontName()}.\n     * @var array\n     *\/",61],["T_WHITESPACE","\n    ",64],["T_PROTECTED","protected",65],["T_WHITESPACE"," ",65],["T_VARIABLE","$_fontNames",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],["T_ARRAY","array",65],"(",")",";",["T_WHITESPACE","\n\n    ",65],["T_DOC_COMMENT","\/**\n     * Flag indicating whether or not this font is bold.\n     * @var boolean\n     *\/",67],["T_WHITESPACE","\n    ",70],["T_PROTECTED","protected",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$_isBold",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","false",71],";",["T_WHITESPACE","\n\n    ",71],["T_DOC_COMMENT","\/**\n     * Flag indicating whether or not this font is italic.\n     * @var boolean\n     *\/",73],["T_WHITESPACE","\n    ",76],["T_PROTECTED","protected",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$_isItalic",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","false",77],";",["T_WHITESPACE","\n\n    ",77],["T_DOC_COMMENT","\/**\n     * Flag indicating whether or not this font is monospaced.\n     * @var boolean\n     *\/",79],["T_WHITESPACE","\n    ",82],["T_PROTECTED","protected",83],["T_WHITESPACE"," ",83],["T_VARIABLE","$_isMonospace",83],["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_STRING","false",83],";",["T_WHITESPACE","\n\n    ",83],["T_DOC_COMMENT","\/**\n     * The position below the text baseline of the underline (in glyph units).\n     * @var integer\n     *\/",85],["T_WHITESPACE","\n    ",88],["T_PROTECTED","protected",89],["T_WHITESPACE"," ",89],["T_VARIABLE","$_underlinePosition",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_LNUMBER","0",89],";",["T_WHITESPACE","\n\n    ",89],["T_DOC_COMMENT","\/**\n     * The thickness of the underline (in glyph units).\n     * @var integer\n     *\/",91],["T_WHITESPACE","\n    ",94],["T_PROTECTED","protected",95],["T_WHITESPACE"," ",95],["T_VARIABLE","$_underlineThickness",95],["T_WHITESPACE"," ",95],"=",["T_WHITESPACE"," ",95],["T_LNUMBER","0",95],";",["T_WHITESPACE","\n\n    ",95],["T_DOC_COMMENT","\/**\n     * The position above the text baseline of the strikethrough (in glyph units).\n     * @var integer\n     *\/",97],["T_WHITESPACE","\n    ",100],["T_PROTECTED","protected",101],["T_WHITESPACE"," ",101],["T_VARIABLE","$_strikePosition",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_LNUMBER","0",101],";",["T_WHITESPACE","\n\n    ",101],["T_DOC_COMMENT","\/**\n     * The thickness of the strikethrough (in glyph units).\n     * @var integer\n     *\/",103],["T_WHITESPACE","\n    ",106],["T_PROTECTED","protected",107],["T_WHITESPACE"," ",107],["T_VARIABLE","$_strikeThickness",107],["T_WHITESPACE"," ",107],"=",["T_WHITESPACE"," ",107],["T_LNUMBER","0",107],";",["T_WHITESPACE","\n\n    ",107],["T_DOC_COMMENT","\/**\n     * Number of glyph units per em. See {@link getUnitsPerEm()}.\n     * @var integer\n     *\/",109],["T_WHITESPACE","\n    ",112],["T_PROTECTED","protected",113],["T_WHITESPACE"," ",113],["T_VARIABLE","$_unitsPerEm",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_LNUMBER","0",113],";",["T_WHITESPACE","\n\n    ",113],["T_DOC_COMMENT","\/**\n     * Typographical ascent. See {@link getAscent()}.\n     * @var integer\n     *\/",115],["T_WHITESPACE","\n    ",118],["T_PROTECTED","protected",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$_ascent",119],["T_WHITESPACE"," ",119],"=",["T_WHITESPACE"," ",119],["T_LNUMBER","0",119],";",["T_WHITESPACE","\n\n    ",119],["T_DOC_COMMENT","\/**\n     * Typographical descent. See {@link getDescent()}.\n     * @var integer\n     *\/",121],["T_WHITESPACE","\n    ",124],["T_PROTECTED","protected",125],["T_WHITESPACE"," ",125],["T_VARIABLE","$_descent",125],["T_WHITESPACE"," ",125],"=",["T_WHITESPACE"," ",125],["T_LNUMBER","0",125],";",["T_WHITESPACE","\n\n    ",125],["T_DOC_COMMENT","\/**\n     * Typographical line gap. See {@link getLineGap()}.\n     * @var integer\n     *\/",127],["T_WHITESPACE","\n    ",130],["T_PROTECTED","protected",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$_lineGap",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_LNUMBER","0",131],";",["T_WHITESPACE","\n\n\n\n  ",131],["T_COMMENT","\/**** Public Interface ****\/",135],["T_WHITESPACE","\n\n\n  ",135],["T_COMMENT","\/* Object Lifecycle *\/",138],["T_WHITESPACE","\n\n    ",138],["T_DOC_COMMENT","\/**\n     * Object constructor.\n     *\n     *\/",140],["T_WHITESPACE","\n    ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","__construct",144],"(",")",["T_WHITESPACE","\n    ",144],"{",["T_WHITESPACE","\n        ",145],["T_STRING","parent",146],["T_DOUBLE_COLON","::",146],["T_STRING","__construct",146],"(",["T_NEW","new",146],["T_WHITESPACE"," ",146],["T_STRING","Zend_Pdf_Element_Dictionary",146],"(",")",")",";",["T_WHITESPACE","\n        ",146],["T_VARIABLE","$this",147],["T_OBJECT_OPERATOR","->",147],["T_STRING","_resource",147],["T_OBJECT_OPERATOR","->",147],["T_STRING","Type",147],["T_WHITESPACE"," ",147],"=",["T_WHITESPACE"," ",147],["T_NEW","new",147],["T_WHITESPACE"," ",147],["T_STRING","Zend_Pdf_Element_Name",147],"(",["T_CONSTANT_ENCAPSED_STRING","'Font'",147],")",";",["T_WHITESPACE","\n    ",147],"}",["T_WHITESPACE","\n\n\n  ",148],["T_COMMENT","\/* Object Magic Methods *\/",151],["T_WHITESPACE","\n\n    ",151],["T_DOC_COMMENT","\/**\n     * Returns the full name of the font in the encoding method of the current\n     * locale. Transliterates any characters that cannot be naturally\n     * represented in that character set.\n     *\n     * @return string\n     *\/",153],["T_WHITESPACE","\n    ",159],["T_PUBLIC","public",160],["T_WHITESPACE"," ",160],["T_FUNCTION","function",160],["T_WHITESPACE"," ",160],["T_STRING","__toString",160],"(",")",["T_WHITESPACE","\n    ",160],"{",["T_WHITESPACE","\n        ",161],["T_RETURN","return",162],["T_WHITESPACE"," ",162],["T_VARIABLE","$this",162],["T_OBJECT_OPERATOR","->",162],["T_STRING","getFontName",162],"(",["T_STRING","Zend_Pdf_Font",162],["T_DOUBLE_COLON","::",162],["T_STRING","NAME_FULL",162],",",["T_WHITESPACE"," ",162],["T_CONSTANT_ENCAPSED_STRING","''",162],",",["T_WHITESPACE"," ",162],["T_CONSTANT_ENCAPSED_STRING","'\/\/TRANSLIT'",162],")",";",["T_WHITESPACE","\n    ",162],"}",["T_WHITESPACE","\n\n\n  ",163],["T_COMMENT","\/* Accessors *\/",166],["T_WHITESPACE","\n\n    ",166],["T_DOC_COMMENT","\/**\n     * Returns the type of font.\n     *\n     * @return integer One of the TYPE_ constants defined in\n     *   {@link Zend_Pdf_Font}.\n     *\/",168],["T_WHITESPACE","\n    ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","getFontType",174],"(",")",["T_WHITESPACE","\n    ",174],"{",["T_WHITESPACE","\n        ",175],["T_RETURN","return",176],["T_WHITESPACE"," ",176],["T_VARIABLE","$this",176],["T_OBJECT_OPERATOR","->",176],["T_STRING","_fontType",176],";",["T_WHITESPACE","\n    ",176],"}",["T_WHITESPACE","\n\n    ",177],["T_DOC_COMMENT","\/**\n     * Returns the specified descriptive name for the font.\n     *\n     * The font name type is usually one of the following:\n     * <ul>\n     *  <li>{@link Zend_Pdf_Font::NAME_FULL}\n     *  <li>{@link Zend_Pdf_Font::NAME_FAMILY}\n     *  <li>{@link Zend_Pdf_Font::NAME_PREFERRED_FAMILY}\n     *  <li>{@link Zend_Pdf_Font::NAME_STYLE}\n     *  <li>{@link Zend_Pdf_Font::NAME_PREFERRED_STYLE}\n     *  <li>{@link Zend_Pdf_Font::NAME_DESCRIPTION}\n     *  <li>{@link Zend_Pdf_Font::NAME_SAMPLE_TEXT}\n     *  <li>{@link Zend_Pdf_Font::NAME_ID}\n     *  <li>{@link Zend_Pdf_Font::NAME_VERSION}\n     *  <li>{@link Zend_Pdf_Font::NAME_POSTSCRIPT}\n     *  <li>{@link Zend_Pdf_Font::NAME_CID_NAME}\n     *  <li>{@link Zend_Pdf_Font::NAME_DESIGNER}\n     *  <li>{@link Zend_Pdf_Font::NAME_DESIGNER_URL}\n     *  <li>{@link Zend_Pdf_Font::NAME_MANUFACTURER}\n     *  <li>{@link Zend_Pdf_Font::NAME_VENDOR_URL}\n     *  <li>{@link Zend_Pdf_Font::NAME_COPYRIGHT}\n     *  <li>{@link Zend_Pdf_Font::NAME_TRADEMARK}\n     *  <li>{@link Zend_Pdf_Font::NAME_LICENSE}\n     *  <li>{@link Zend_Pdf_Font::NAME_LICENSE_URL}\n     * <\/ul>\n     *\n     * Note that not all names are available for all fonts. In addition, some\n     * fonts may contain additional names, whose indicies are in the range\n     * 256 to 32767 inclusive, which are used for certain font layout features.\n     *\n     * If the preferred language translation is not available, uses the first\n     * available translation for the name, which is usually English.\n     *\n     * If the requested name does not exist, returns null.\n     *\n     * All names are stored internally as Unicode strings, using UTF-16BE\n     * encoding. You may optionally supply a different resulting character set.\n     *\n     * @param integer $nameType Type of name requested.\n     * @param mixed $language Preferred language (string) or array of languages\n     *   in preferred order. Use the ISO 639 standard 2-letter language codes.\n     * @param string $characterSet (optional) Desired resulting character set.\n     *   You may use any character set supported by {@link iconv()};\n     * @return string\n     *\/",179],["T_WHITESPACE","\n    ",223],["T_PUBLIC","public",224],["T_WHITESPACE"," ",224],["T_FUNCTION","function",224],["T_WHITESPACE"," ",224],["T_STRING","getFontName",224],"(",["T_VARIABLE","$nameType",224],",",["T_WHITESPACE"," ",224],["T_VARIABLE","$language",224],",",["T_WHITESPACE"," ",224],["T_VARIABLE","$characterSet",224],["T_WHITESPACE"," ",224],"=",["T_WHITESPACE"," ",224],["T_STRING","null",224],")",["T_WHITESPACE","\n    ",224],"{",["T_WHITESPACE","\n        ",225],["T_IF","if",226],["T_WHITESPACE"," ",226],"(","!",["T_WHITESPACE"," ",226],["T_ISSET","isset",226],"(",["T_VARIABLE","$this",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","_fontNames",226],"[",["T_VARIABLE","$nameType",226],"]",")",")",["T_WHITESPACE"," ",226],"{",["T_WHITESPACE","\n            ",226],["T_RETURN","return",227],["T_WHITESPACE"," ",227],["T_STRING","null",227],";",["T_WHITESPACE","\n        ",227],"}",["T_WHITESPACE","\n        ",228],["T_VARIABLE","$name",229],["T_WHITESPACE"," ",229],"=",["T_WHITESPACE"," ",229],["T_STRING","null",229],";",["T_WHITESPACE","\n        ",229],["T_IF","if",230],["T_WHITESPACE"," ",230],"(",["T_STRING","is_array",230],"(",["T_VARIABLE","$language",230],")",")",["T_WHITESPACE"," ",230],"{",["T_WHITESPACE","\n            ",230],["T_FOREACH","foreach",231],["T_WHITESPACE"," ",231],"(",["T_VARIABLE","$language",231],["T_WHITESPACE"," ",231],["T_AS","as",231],["T_WHITESPACE"," ",231],["T_VARIABLE","$code",231],")",["T_WHITESPACE"," ",231],"{",["T_WHITESPACE","\n                ",231],["T_IF","if",232],["T_WHITESPACE"," ",232],"(",["T_ISSET","isset",232],"(",["T_VARIABLE","$this",232],["T_OBJECT_OPERATOR","->",232],["T_STRING","_fontNames",232],"[",["T_VARIABLE","$nameType",232],"]","[",["T_VARIABLE","$code",232],"]",")",")",["T_WHITESPACE"," ",232],"{",["T_WHITESPACE","\n                    ",232],["T_VARIABLE","$name",233],["T_WHITESPACE"," ",233],"=",["T_WHITESPACE"," ",233],["T_VARIABLE","$this",233],["T_OBJECT_OPERATOR","->",233],["T_STRING","_fontNames",233],"[",["T_VARIABLE","$nameType",233],"]","[",["T_VARIABLE","$code",233],"]",";",["T_WHITESPACE","\n                    ",233],["T_BREAK","break",234],";",["T_WHITESPACE","\n                ",234],"}",["T_WHITESPACE","\n            ",235],"}",["T_WHITESPACE","\n        ",236],"}",["T_WHITESPACE"," ",237],["T_ELSE","else",237],["T_WHITESPACE"," ",237],"{",["T_WHITESPACE","\n            ",237],["T_IF","if",238],["T_WHITESPACE"," ",238],"(",["T_ISSET","isset",238],"(",["T_VARIABLE","$this",238],["T_OBJECT_OPERATOR","->",238],["T_STRING","_fontNames",238],"[",["T_VARIABLE","$nameType",238],"]","[",["T_VARIABLE","$language",238],"]",")",")",["T_WHITESPACE"," ",238],"{",["T_WHITESPACE","\n                ",238],["T_VARIABLE","$name",239],["T_WHITESPACE"," ",239],"=",["T_WHITESPACE"," ",239],["T_VARIABLE","$this",239],["T_OBJECT_OPERATOR","->",239],["T_STRING","_fontNames",239],"[",["T_VARIABLE","$nameType",239],"]","[",["T_VARIABLE","$language",239],"]",";",["T_WHITESPACE","\n            ",239],"}",["T_WHITESPACE","\n        ",240],"}",["T_WHITESPACE","\n        ",241],["T_COMMENT","\/* If the preferred language could not be found, use whatever is first.\n         *\/",242],["T_WHITESPACE","\n        ",243],["T_IF","if",244],["T_WHITESPACE"," ",244],"(",["T_VARIABLE","$name",244],["T_WHITESPACE"," ",244],["T_IS_IDENTICAL","===",244],["T_WHITESPACE"," ",244],["T_STRING","null",244],")",["T_WHITESPACE"," ",244],"{",["T_WHITESPACE","\n            ",244],["T_VARIABLE","$names",245],["T_WHITESPACE"," ",245],"=",["T_WHITESPACE"," ",245],["T_VARIABLE","$this",245],["T_OBJECT_OPERATOR","->",245],["T_STRING","_fontNames",245],"[",["T_VARIABLE","$nameType",245],"]",";",["T_WHITESPACE","\n            ",245],["T_VARIABLE","$name",246],["T_WHITESPACE","  ",246],"=",["T_WHITESPACE"," ",246],["T_STRING","reset",246],"(",["T_VARIABLE","$names",246],")",";",["T_WHITESPACE","\n        ",246],"}",["T_WHITESPACE","\n        ",247],["T_COMMENT","\/* Convert the character set if requested.\n         *\/",248],["T_WHITESPACE","\n        ",249],["T_IF","if",250],["T_WHITESPACE"," ",250],"(","(",["T_VARIABLE","$characterSet",250],["T_WHITESPACE"," ",250],["T_IS_NOT_IDENTICAL","!==",250],["T_WHITESPACE"," ",250],["T_STRING","null",250],")",["T_WHITESPACE"," ",250],["T_BOOLEAN_AND","&&",250],["T_WHITESPACE"," ",250],"(",["T_VARIABLE","$characterSet",250],["T_WHITESPACE"," ",250],["T_IS_NOT_EQUAL","!=",250],["T_WHITESPACE"," ",250],["T_CONSTANT_ENCAPSED_STRING","'UTF-16BE'",250],")",["T_WHITESPACE"," ",250],["T_BOOLEAN_AND","&&",250],["T_WHITESPACE"," ",250],["T_STRING","PHP_OS",250],["T_WHITESPACE"," ",250],["T_IS_NOT_EQUAL","!=",250],["T_WHITESPACE"," ",250],["T_CONSTANT_ENCAPSED_STRING","'AIX'",250],")",["T_WHITESPACE"," ",250],"{",["T_WHITESPACE"," ",250],["T_COMMENT","\/\/ AIX knows not this charset\n",250],["T_WHITESPACE","            ",251],["T_VARIABLE","$name",251],["T_WHITESPACE"," ",251],"=",["T_WHITESPACE"," ",251],["T_STRING","iconv",251],"(",["T_CONSTANT_ENCAPSED_STRING","'UTF-16BE'",251],",",["T_WHITESPACE"," ",251],["T_VARIABLE","$characterSet",251],",",["T_WHITESPACE"," ",251],["T_VARIABLE","$name",251],")",";",["T_WHITESPACE","\n        ",251],"}",["T_WHITESPACE","\n        ",252],["T_RETURN","return",253],["T_WHITESPACE"," ",253],["T_VARIABLE","$name",253],";",["T_WHITESPACE","\n    ",253],"}",["T_WHITESPACE","\n\n    ",254],["T_DOC_COMMENT","\/**\n     * Returns whole set of font names.\n     *\n     * @return array\n     *\/",256],["T_WHITESPACE","\n    ",260],["T_PUBLIC","public",261],["T_WHITESPACE"," ",261],["T_FUNCTION","function",261],["T_WHITESPACE"," ",261],["T_STRING","getFontNames",261],"(",")",["T_WHITESPACE","\n    ",261],"{",["T_WHITESPACE","\n        ",262],["T_RETURN","return",263],["T_WHITESPACE"," ",263],["T_VARIABLE","$this",263],["T_OBJECT_OPERATOR","->",263],["T_STRING","_fontNames",263],";",["T_WHITESPACE","\n    ",263],"}",["T_WHITESPACE","\n\n    ",264],["T_DOC_COMMENT","\/**\n     * Returns true if font is bold.\n     *\n     * @return boolean\n     *\/",266],["T_WHITESPACE","\n    ",270],["T_PUBLIC","public",271],["T_WHITESPACE"," ",271],["T_FUNCTION","function",271],["T_WHITESPACE"," ",271],["T_STRING","isBold",271],"(",")",["T_WHITESPACE","\n    ",271],"{",["T_WHITESPACE","\n        ",272],["T_RETURN","return",273],["T_WHITESPACE"," ",273],["T_VARIABLE","$this",273],["T_OBJECT_OPERATOR","->",273],["T_STRING","_isBold",273],";",["T_WHITESPACE","\n    ",273],"}",["T_WHITESPACE","\n\n    ",274],["T_DOC_COMMENT","\/**\n     * Returns true if font is italic.\n     *\n     * @return boolean\n     *\/",276],["T_WHITESPACE","\n    ",280],["T_PUBLIC","public",281],["T_WHITESPACE"," ",281],["T_FUNCTION","function",281],["T_WHITESPACE"," ",281],["T_STRING","isItalic",281],"(",")",["T_WHITESPACE","\n    ",281],"{",["T_WHITESPACE","\n        ",282],["T_RETURN","return",283],["T_WHITESPACE"," ",283],["T_VARIABLE","$this",283],["T_OBJECT_OPERATOR","->",283],["T_STRING","_isItalic",283],";",["T_WHITESPACE","\n    ",283],"}",["T_WHITESPACE","\n\n    ",284],["T_DOC_COMMENT","\/**\n     * Returns true if font is monospace.\n     *\n     * @return boolean\n     *\/",286],["T_WHITESPACE","\n    ",290],["T_PUBLIC","public",291],["T_WHITESPACE"," ",291],["T_FUNCTION","function",291],["T_WHITESPACE"," ",291],["T_STRING","isMonospace",291],"(",")",["T_WHITESPACE","\n    ",291],"{",["T_WHITESPACE","\n        ",292],["T_RETURN","return",293],["T_WHITESPACE"," ",293],["T_VARIABLE","$this",293],["T_OBJECT_OPERATOR","->",293],["T_STRING","_isMonospace",293],";",["T_WHITESPACE","\n    ",293],"}",["T_WHITESPACE","\n\n    ",294],["T_DOC_COMMENT","\/**\n     * Returns the suggested position below the text baseline of the underline\n     * in glyph units.\n     *\n     * This value is usually negative.\n     *\n     * @return integer\n     *\/",296],["T_WHITESPACE","\n    ",303],["T_PUBLIC","public",304],["T_WHITESPACE"," ",304],["T_FUNCTION","function",304],["T_WHITESPACE"," ",304],["T_STRING","getUnderlinePosition",304],"(",")",["T_WHITESPACE","\n    ",304],"{",["T_WHITESPACE","\n        ",305],["T_RETURN","return",306],["T_WHITESPACE"," ",306],["T_VARIABLE","$this",306],["T_OBJECT_OPERATOR","->",306],["T_STRING","_underlinePosition",306],";",["T_WHITESPACE","\n    ",306],"}",["T_WHITESPACE","\n\n    ",307],["T_DOC_COMMENT","\/**\n     * Returns the suggested line thickness of the underline in glyph units.\n     *\n     * @return integer\n     *\/",309],["T_WHITESPACE","\n    ",313],["T_PUBLIC","public",314],["T_WHITESPACE"," ",314],["T_FUNCTION","function",314],["T_WHITESPACE"," ",314],["T_STRING","getUnderlineThickness",314],"(",")",["T_WHITESPACE","\n    ",314],"{",["T_WHITESPACE","\n        ",315],["T_RETURN","return",316],["T_WHITESPACE"," ",316],["T_VARIABLE","$this",316],["T_OBJECT_OPERATOR","->",316],["T_STRING","_underlineThickness",316],";",["T_WHITESPACE","\n    ",316],"}",["T_WHITESPACE","\n\n    ",317],["T_DOC_COMMENT","\/**\n     * Returns the suggested position above the text baseline of the\n     * strikethrough in glyph units.\n     *\n     * @return integer\n     *\/",319],["T_WHITESPACE","\n    ",324],["T_PUBLIC","public",325],["T_WHITESPACE"," ",325],["T_FUNCTION","function",325],["T_WHITESPACE"," ",325],["T_STRING","getStrikePosition",325],"(",")",["T_WHITESPACE","\n    ",325],"{",["T_WHITESPACE","\n        ",326],["T_RETURN","return",327],["T_WHITESPACE"," ",327],["T_VARIABLE","$this",327],["T_OBJECT_OPERATOR","->",327],["T_STRING","_strikePosition",327],";",["T_WHITESPACE","\n    ",327],"}",["T_WHITESPACE","\n\n    ",328],["T_DOC_COMMENT","\/**\n     * Returns the suggested line thickness of the strikethrough in glyph units.\n     *\n     * @return integer\n     *\/",330],["T_WHITESPACE","\n    ",334],["T_PUBLIC","public",335],["T_WHITESPACE"," ",335],["T_FUNCTION","function",335],["T_WHITESPACE"," ",335],["T_STRING","getStrikeThickness",335],"(",")",["T_WHITESPACE","\n    ",335],"{",["T_WHITESPACE","\n        ",336],["T_RETURN","return",337],["T_WHITESPACE"," ",337],["T_VARIABLE","$this",337],["T_OBJECT_OPERATOR","->",337],["T_STRING","_strikeThickness",337],";",["T_WHITESPACE","\n    ",337],"}",["T_WHITESPACE","\n\n    ",338],["T_DOC_COMMENT","\/**\n     * Returns the number of glyph units per em.\n     *\n     * Used to convert glyph space to user space. Frequently used in conjunction\n     * with {@link widthsForGlyphs()} to calculate the with of a run of text.\n     *\n     * @return integer\n     *\/",340],["T_WHITESPACE","\n    ",347],["T_PUBLIC","public",348],["T_WHITESPACE"," ",348],["T_FUNCTION","function",348],["T_WHITESPACE"," ",348],["T_STRING","getUnitsPerEm",348],"(",")",["T_WHITESPACE","\n    ",348],"{",["T_WHITESPACE","\n        ",349],["T_RETURN","return",350],["T_WHITESPACE"," ",350],["T_VARIABLE","$this",350],["T_OBJECT_OPERATOR","->",350],["T_STRING","_unitsPerEm",350],";",["T_WHITESPACE","\n    ",350],"}",["T_WHITESPACE","\n\n    ",351],["T_DOC_COMMENT","\/**\n     * Returns the typographic ascent in font glyph units.\n     *\n     * The typographic ascent is the distance from the font's baseline to the\n     * top of the text frame. It is frequently used to locate the initial\n     * baseline for a paragraph of text inside a given rectangle.\n     *\n     * @return integer\n     *\/",353],["T_WHITESPACE","\n    ",361],["T_PUBLIC","public",362],["T_WHITESPACE"," ",362],["T_FUNCTION","function",362],["T_WHITESPACE"," ",362],["T_STRING","getAscent",362],"(",")",["T_WHITESPACE","\n    ",362],"{",["T_WHITESPACE","\n        ",363],["T_RETURN","return",364],["T_WHITESPACE"," ",364],["T_VARIABLE","$this",364],["T_OBJECT_OPERATOR","->",364],["T_STRING","_ascent",364],";",["T_WHITESPACE","\n    ",364],"}",["T_WHITESPACE","\n\n    ",365],["T_DOC_COMMENT","\/**\n     * Returns the typographic descent in font glyph units.\n     *\n     * The typographic descent is the distance below the font's baseline to the\n     * bottom of the text frame. It is always negative.\n     *\n     * @return integer\n     *\/",367],["T_WHITESPACE","\n    ",374],["T_PUBLIC","public",375],["T_WHITESPACE"," ",375],["T_FUNCTION","function",375],["T_WHITESPACE"," ",375],["T_STRING","getDescent",375],"(",")",["T_WHITESPACE","\n    ",375],"{",["T_WHITESPACE","\n        ",376],["T_RETURN","return",377],["T_WHITESPACE"," ",377],["T_VARIABLE","$this",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","_descent",377],";",["T_WHITESPACE","\n    ",377],"}",["T_WHITESPACE","\n\n    ",378],["T_DOC_COMMENT","\/**\n     * Returns the typographic line gap in font glyph units.\n     *\n     * The typographic line gap is the distance between the bottom of the text\n     * frame of one line to the top of the text frame of the next. It is\n     * typically combined with the typographical ascent and descent to determine\n     * the font's total line height (or leading).\n     *\n     * @return integer\n     *\/",380],["T_WHITESPACE","\n    ",389],["T_PUBLIC","public",390],["T_WHITESPACE"," ",390],["T_FUNCTION","function",390],["T_WHITESPACE"," ",390],["T_STRING","getLineGap",390],"(",")",["T_WHITESPACE","\n    ",390],"{",["T_WHITESPACE","\n        ",391],["T_RETURN","return",392],["T_WHITESPACE"," ",392],["T_VARIABLE","$this",392],["T_OBJECT_OPERATOR","->",392],["T_STRING","_lineGap",392],";",["T_WHITESPACE","\n    ",392],"}",["T_WHITESPACE","\n\n    ",393],["T_DOC_COMMENT","\/**\n     * Returns the suggested line height (or leading) in font glyph units.\n     *\n     * This value is determined by adding together the values of the typographic\n     * ascent, descent, and line gap. This value yields the suggested line\n     * spacing as determined by the font developer.\n     *\n     * It should be noted that this is only a guideline; layout engines will\n     * frequently modify this value to achieve special effects such as double-\n     * spacing.\n     *\n     * @return integer\n     *\/",395],["T_WHITESPACE","\n    ",407],["T_PUBLIC","public",408],["T_WHITESPACE"," ",408],["T_FUNCTION","function",408],["T_WHITESPACE"," ",408],["T_STRING","getLineHeight",408],"(",")",["T_WHITESPACE","\n    ",408],"{",["T_WHITESPACE","\n        ",409],["T_RETURN","return",410],["T_WHITESPACE"," ",410],["T_VARIABLE","$this",410],["T_OBJECT_OPERATOR","->",410],["T_STRING","_ascent",410],["T_WHITESPACE"," ",410],"-",["T_WHITESPACE"," ",410],["T_VARIABLE","$this",410],["T_OBJECT_OPERATOR","->",410],["T_STRING","_descent",410],["T_WHITESPACE"," ",410],"+",["T_WHITESPACE"," ",410],["T_VARIABLE","$this",410],["T_OBJECT_OPERATOR","->",410],["T_STRING","_lineGap",410],";",["T_WHITESPACE","\n    ",410],"}",["T_WHITESPACE","\n\n\n  ",411],["T_COMMENT","\/* Information and Conversion Methods *\/",414],["T_WHITESPACE","\n\n    ",414],["T_DOC_COMMENT","\/**\n     * Returns an array of glyph numbers corresponding to the Unicode characters.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumberForCharacter()}.\n     *\n     * @param array $characterCodes Array of Unicode character codes (code points).\n     * @return array Array of glyph numbers.\n     *\/",416],["T_WHITESPACE","\n    ",426],["T_ABSTRACT","abstract",427],["T_WHITESPACE"," ",427],["T_PUBLIC","public",427],["T_WHITESPACE"," ",427],["T_FUNCTION","function",427],["T_WHITESPACE"," ",427],["T_STRING","glyphNumbersForCharacters",427],"(",["T_VARIABLE","$characterCodes",427],")",";",["T_WHITESPACE","\n\n    ",427],["T_DOC_COMMENT","\/**\n     * Returns the glyph number corresponding to the Unicode character.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumbersForCharacters()} which is optimized for bulk\n     * operations.\n     *\n     * @param integer $characterCode Unicode character code (code point).\n     * @return integer Glyph number.\n     *\/",429],["T_WHITESPACE","\n    ",440],["T_ABSTRACT","abstract",441],["T_WHITESPACE"," ",441],["T_PUBLIC","public",441],["T_WHITESPACE"," ",441],["T_FUNCTION","function",441],["T_WHITESPACE"," ",441],["T_STRING","glyphNumberForCharacter",441],"(",["T_VARIABLE","$characterCode",441],")",";",["T_WHITESPACE","\n\n    ",441],["T_DOC_COMMENT","\/**\n     * Returns a number between 0 and 1 inclusive that indicates the percentage\n     * of characters in the string which are covered by glyphs in this font.\n     *\n     * Since no one font will contain glyphs for the entire Unicode character\n     * range, this method can be used to help locate a suitable font when the\n     * actual contents of the string are not known.\n     *\n     * Note that some fonts lie about the characters they support. Additionally,\n     * fonts don't usually contain glyphs for control characters such as tabs\n     * and line breaks, so it is rare that you will get back a full 1.0 score.\n     * The resulting value should be considered informational only.\n     *\n     * @param string $string\n     * @param string $charEncoding (optional) Character encoding of source text.\n     *   If omitted, uses 'current locale'.\n     * @return float\n     *\/",443],["T_WHITESPACE","\n    ",460],["T_ABSTRACT","abstract",461],["T_WHITESPACE"," ",461],["T_PUBLIC","public",461],["T_WHITESPACE"," ",461],["T_FUNCTION","function",461],["T_WHITESPACE"," ",461],["T_STRING","getCoveredPercentage",461],"(",["T_VARIABLE","$string",461],",",["T_WHITESPACE"," ",461],["T_VARIABLE","$charEncoding",461],["T_WHITESPACE"," ",461],"=",["T_WHITESPACE"," ",461],["T_CONSTANT_ENCAPSED_STRING","''",461],")",";",["T_WHITESPACE","\n\n    ",461],["T_DOC_COMMENT","\/**\n     * Returns the widths of the glyphs.\n     *\n     * The widths are expressed in the font's glyph space. You are responsible\n     * for converting to user space as necessary. See {@link unitsPerEm()}.\n     *\n     * See also {@link widthForGlyph()}.\n     *\n     * @param array $glyphNumbers Array of glyph numbers.\n     * @return array Array of glyph widths (integers).\n     * @throws Zend_Pdf_Exception\n     *\/",463],["T_WHITESPACE","\n    ",474],["T_ABSTRACT","abstract",475],["T_WHITESPACE"," ",475],["T_PUBLIC","public",475],["T_WHITESPACE"," ",475],["T_FUNCTION","function",475],["T_WHITESPACE"," ",475],["T_STRING","widthsForGlyphs",475],"(",["T_VARIABLE","$glyphNumbers",475],")",";",["T_WHITESPACE","\n\n    ",475],["T_DOC_COMMENT","\/**\n     * Returns the width of the glyph.\n     *\n     * Like {@link widthsForGlyphs()} but used for one glyph at a time.\n     *\n     * @param integer $glyphNumber\n     * @return integer\n     * @throws Zend_Pdf_Exception\n     *\/",477],["T_WHITESPACE","\n    ",485],["T_ABSTRACT","abstract",486],["T_WHITESPACE"," ",486],["T_PUBLIC","public",486],["T_WHITESPACE"," ",486],["T_FUNCTION","function",486],["T_WHITESPACE"," ",486],["T_STRING","widthForGlyph",486],"(",["T_VARIABLE","$glyphNumber",486],")",";",["T_WHITESPACE","\n\n    ",486],["T_DOC_COMMENT","\/**\n     * Convert string to the font encoding.\n     *\n     * The method is used to prepare string for text drawing operators\n     *\n     * @param string $string\n     * @param string $charEncoding Character encoding of source text.\n     * @return string\n     *\/",488],["T_WHITESPACE","\n    ",496],["T_ABSTRACT","abstract",497],["T_WHITESPACE"," ",497],["T_PUBLIC","public",497],["T_WHITESPACE"," ",497],["T_FUNCTION","function",497],["T_WHITESPACE"," ",497],["T_STRING","encodeString",497],"(",["T_VARIABLE","$string",497],",",["T_WHITESPACE"," ",497],["T_VARIABLE","$charEncoding",497],")",";",["T_WHITESPACE","\n\n    ",497],["T_DOC_COMMENT","\/**\n     * Convert string from the font encoding.\n     *\n     * The method is used to convert strings retrieved from existing content streams\n     *\n     * @param string $string\n     * @param string $charEncoding Character encoding of resulting text.\n     * @return string\n     *\/",499],["T_WHITESPACE","\n    ",507],["T_ABSTRACT","abstract",508],["T_WHITESPACE"," ",508],["T_PUBLIC","public",508],["T_WHITESPACE"," ",508],["T_FUNCTION","function",508],["T_WHITESPACE"," ",508],["T_STRING","decodeString",508],"(",["T_VARIABLE","$string",508],",",["T_WHITESPACE"," ",508],["T_VARIABLE","$charEncoding",508],")",";",["T_WHITESPACE","\n\n\n\n  ",508],["T_COMMENT","\/**** Internal Methods ****\/",512],["T_WHITESPACE","\n\n\n    ",512],["T_DOC_COMMENT","\/**\n     * If the font's glyph space is not 1000 units per em, converts the value.\n     *\n     * @internal\n     * @param integer $value\n     * @return integer\n     *\/",515],["T_WHITESPACE","\n    ",521],["T_PUBLIC","public",522],["T_WHITESPACE"," ",522],["T_FUNCTION","function",522],["T_WHITESPACE"," ",522],["T_STRING","toEmSpace",522],"(",["T_VARIABLE","$value",522],")",["T_WHITESPACE","\n    ",522],"{",["T_WHITESPACE","\n        ",523],["T_IF","if",524],["T_WHITESPACE"," ",524],"(",["T_VARIABLE","$this",524],["T_OBJECT_OPERATOR","->",524],["T_STRING","_unitsPerEm",524],["T_WHITESPACE"," ",524],["T_IS_EQUAL","==",524],["T_WHITESPACE"," ",524],["T_LNUMBER","1000",524],")",["T_WHITESPACE"," ",524],"{",["T_WHITESPACE","\n            ",524],["T_RETURN","return",525],["T_WHITESPACE"," ",525],["T_VARIABLE","$value",525],";",["T_WHITESPACE","\n        ",525],"}",["T_WHITESPACE","\n        ",526],["T_RETURN","return",527],["T_WHITESPACE"," ",527],["T_STRING","ceil",527],"(","(",["T_VARIABLE","$value",527],["T_WHITESPACE"," ",527],"\/",["T_WHITESPACE"," ",527],["T_VARIABLE","$this",527],["T_OBJECT_OPERATOR","->",527],["T_STRING","_unitsPerEm",527],")",["T_WHITESPACE"," ",527],"*",["T_WHITESPACE"," ",527],["T_LNUMBER","1000",527],")",";",["T_WHITESPACE","    ",527],["T_COMMENT","\/\/ always round up\n",527],["T_WHITESPACE","    ",528],"}",["T_WHITESPACE","\n",528],"}",["T_WHITESPACE","\n\n",529]]