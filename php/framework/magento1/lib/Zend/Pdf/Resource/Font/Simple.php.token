[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n\n",21],["T_DOC_COMMENT","\/** Internally used classes *\/",24],["T_WHITESPACE","\n",24],["T_COMMENT","#require_once 'Zend\/Pdf\/Element\/Name.php';\n",25],["T_WHITESPACE","\n\n",26],["T_DOC_COMMENT","\/** Zend_Pdf_Resource_Font *\/",28],["T_WHITESPACE","\n",28],["T_COMMENT","#require_once 'Zend\/Pdf\/Resource\/Font.php';\n",29],["T_WHITESPACE","\n",30],["T_DOC_COMMENT","\/**\n * Adobe PDF Simple fonts implementation\n *\n * PDF simple fonts functionality is presented by Adobe Type 1\n * (including standard PDF Type1 built-in fonts) and TrueType fonts support.\n *\n * Both fonts have the following properties:\n * - Glyphs in the font are selected by single-byte character codes obtained from a\n *   string that is shown by the text-showing operators. Logically, these codes index\n *   into a table of 256 glyphs; the mapping from codes to glyphs is called the font\u00e2\u0080\u0099s\n *   encoding.\n *   PDF specification provides a possibility to specify any user defined encoding in addition\n *   to the standard built-in encodings: Standard-Encoding, MacRomanEncoding, WinAnsiEncoding,\n *   and PDFDocEncoding, but Zend_Pdf simple fonts implementation operates only with\n *   Windows ANSI encoding (except Symbol and ZapfDingbats built-in fonts).\n *\n * - Each glyph has a single set of metrics, including a horizontal displacement or\n *   width. That is, simple fonts support only horizontal writing mode.\n *\n *\n * The code in this class is common to both types. However, you will only deal\n * directly with subclasses.\n *\n * Font objects should be normally be obtained from the factory methods\n * {@link Zend_Pdf_Font::fontWithName} and {@link Zend_Pdf_Font::fontWithPath}.\n *\n * @package    Zend_Pdf\n * @subpackage Fonts\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",31],["T_WHITESPACE","\n",61],["T_ABSTRACT","abstract",62],["T_WHITESPACE"," ",62],["T_CLASS","class",62],["T_WHITESPACE"," ",62],["T_STRING","Zend_Pdf_Resource_Font_Simple",62],["T_WHITESPACE"," ",62],["T_EXTENDS","extends",62],["T_WHITESPACE"," ",62],["T_STRING","Zend_Pdf_Resource_Font",62],["T_WHITESPACE","\n",62],"{",["T_WHITESPACE","\n    ",63],["T_DOC_COMMENT","\/**\n     * Object representing the font's cmap (character to glyph map).\n     * @var Zend_Pdf_Cmap\n     *\/",64],["T_WHITESPACE","\n    ",67],["T_PROTECTED","protected",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$_cmap",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING","null",68],";",["T_WHITESPACE","\n\n    ",68],["T_DOC_COMMENT","\/**\n     * Array containing the widths of each of the glyphs contained in the font.\n     *\n     * Keys are integers starting from 0, which coresponds to Zend_Pdf_Cmap::MISSING_CHARACTER_GLYPH.\n     *\n     * Font character map may contain gaps for actually used glyphs, nevertheless glyphWidths array\n     * contains widths for all glyphs even they are unused.\n     *\n     * @var array\n     *\/",70],["T_WHITESPACE","\n    ",79],["T_PROTECTED","protected",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$_glyphWidths",80],["T_WHITESPACE"," ",80],"=",["T_WHITESPACE"," ",80],["T_STRING","null",80],";",["T_WHITESPACE","\n\n    ",80],["T_DOC_COMMENT","\/**\n     * Width for glyphs missed in the font\n     *\n     * Note: Adobe PDF specfication (V1.4 - V1.6) doesn't define behavior for rendering\n     * characters missed in the standard PDF fonts (such us 0x7F (DEL) Windows ANSI code)\n     * Adobe Font Metrics files doesn't also define metrics for \"missed glyph\".\n     * We provide character width as \"0\" for this case, but actually it depends on PDF viewer\n     * implementation.\n     *\n     * @var integer\n     *\/",82],["T_WHITESPACE","\n    ",92],["T_PROTECTED","protected",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$_missingGlyphWidth",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_LNUMBER","0",93],";",["T_WHITESPACE","\n\n\n    ",93],["T_COMMENT","\/**** Public Interface ****\/",96],["T_WHITESPACE","\n\n\n  ",96],["T_COMMENT","\/* Object Lifecycle *\/",99],["T_WHITESPACE","\n\n    ",99],["T_DOC_COMMENT","\/**\n     * Object constructor\n     *\n     *\/",101],["T_WHITESPACE","\n    ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","__construct",105],"(",")",["T_WHITESPACE","\n    ",105],"{",["T_WHITESPACE","\n        ",106],["T_STRING","parent",107],["T_DOUBLE_COLON","::",107],["T_STRING","__construct",107],"(",")",";",["T_WHITESPACE","\n\n        ",107],["T_DOC_COMMENT","\/**\n         * @todo\n         * It's easy to add other encodings support now (Standard-Encoding, MacRomanEncoding,\n         * PDFDocEncoding, MacExpertEncoding, Symbol, and ZapfDingbats).\n         * Steps for the implementation:\n         * - completely describe all PDF single byte encodings in the documentation\n         * - implement non-WinAnsi encodings processing into encodeString()\/decodeString() methods\n         *\n         * These encodings will be automatically supported for standard builtin PDF fonts as well\n         * as for external fonts.\n         *\/",109],["T_WHITESPACE","\n        ",119],["T_VARIABLE","$this",120],["T_OBJECT_OPERATOR","->",120],["T_STRING","_resource",120],["T_OBJECT_OPERATOR","->",120],["T_STRING","Encoding",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_NEW","new",120],["T_WHITESPACE"," ",120],["T_STRING","Zend_Pdf_Element_Name",120],"(",["T_CONSTANT_ENCAPSED_STRING","'WinAnsiEncoding'",120],")",";",["T_WHITESPACE","\n    ",120],"}",["T_WHITESPACE","\n\n    ",121],["T_DOC_COMMENT","\/**\n     * Returns an array of glyph numbers corresponding to the Unicode characters.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumberForCharacter()}.\n     *\n     * @param array $characterCodes Array of Unicode character codes (code points).\n     * @return array Array of glyph numbers.\n     *\/",123],["T_WHITESPACE","\n    ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","glyphNumbersForCharacters",134],"(",["T_VARIABLE","$characterCodes",134],")",["T_WHITESPACE","\n    ",134],"{",["T_WHITESPACE","\n        ",135],["T_RETURN","return",136],["T_WHITESPACE"," ",136],["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","_cmap",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","glyphNumbersForCharacters",136],"(",["T_VARIABLE","$characterCodes",136],")",";",["T_WHITESPACE","\n    ",136],"}",["T_WHITESPACE","\n\n    ",137],["T_DOC_COMMENT","\/**\n     * Returns the glyph number corresponding to the Unicode character.\n     *\n     * If a particular character doesn't exist in this font, the special 'missing\n     * character glyph' will be substituted.\n     *\n     * See also {@link glyphNumbersForCharacters()} which is optimized for bulk\n     * operations.\n     *\n     * @param integer $characterCode Unicode character code (code point).\n     * @return integer Glyph number.\n     *\/",139],["T_WHITESPACE","\n    ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","glyphNumberForCharacter",151],"(",["T_VARIABLE","$characterCode",151],")",["T_WHITESPACE","\n    ",151],"{",["T_WHITESPACE","\n        ",152],["T_RETURN","return",153],["T_WHITESPACE"," ",153],["T_VARIABLE","$this",153],["T_OBJECT_OPERATOR","->",153],["T_STRING","_cmap",153],["T_OBJECT_OPERATOR","->",153],["T_STRING","glyphNumberForCharacter",153],"(",["T_VARIABLE","$characterCode",153],")",";",["T_WHITESPACE","\n    ",153],"}",["T_WHITESPACE","\n\n    ",154],["T_DOC_COMMENT","\/**\n     * Returns a number between 0 and 1 inclusive that indicates the percentage\n     * of characters in the string which are covered by glyphs in this font.\n     *\n     * Since no one font will contain glyphs for the entire Unicode character\n     * range, this method can be used to help locate a suitable font when the\n     * actual contents of the string are not known.\n     *\n     * Note that some fonts lie about the characters they support. Additionally,\n     * fonts don't usually contain glyphs for control characters such as tabs\n     * and line breaks, so it is rare that you will get back a full 1.0 score.\n     * The resulting value should be considered informational only.\n     *\n     * @param string $string\n     * @param string $charEncoding (optional) Character encoding of source text.\n     *   If omitted, uses 'current locale'.\n     * @return float\n     *\/",156],["T_WHITESPACE","\n    ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","getCoveredPercentage",174],"(",["T_VARIABLE","$string",174],",",["T_WHITESPACE"," ",174],["T_VARIABLE","$charEncoding",174],["T_WHITESPACE"," ",174],"=",["T_WHITESPACE"," ",174],["T_CONSTANT_ENCAPSED_STRING","''",174],")",["T_WHITESPACE","\n    ",174],"{",["T_WHITESPACE","\n        ",175],["T_COMMENT","\/* Convert the string to UTF-16BE encoding so we can match the string's\n         * character codes to those found in the cmap.\n         *\/",176],["T_WHITESPACE","\n        ",178],["T_IF","if",179],["T_WHITESPACE"," ",179],"(",["T_VARIABLE","$charEncoding",179],["T_WHITESPACE"," ",179],["T_IS_NOT_EQUAL","!=",179],["T_WHITESPACE"," ",179],["T_CONSTANT_ENCAPSED_STRING","'UTF-16BE'",179],")",["T_WHITESPACE"," ",179],"{",["T_WHITESPACE","\n            ",179],["T_IF","if",180],["T_WHITESPACE"," ",180],"(",["T_STRING","PHP_OS",180],["T_WHITESPACE"," ",180],["T_IS_NOT_EQUAL","!=",180],["T_WHITESPACE"," ",180],["T_CONSTANT_ENCAPSED_STRING","'AIX'",180],")",["T_WHITESPACE"," ",180],"{",["T_WHITESPACE"," ",180],["T_COMMENT","\/\/ AIX doesnt know what UTF-16BE is\n",180],["T_WHITESPACE","                ",181],["T_VARIABLE","$string",181],["T_WHITESPACE"," ",181],"=",["T_WHITESPACE"," ",181],["T_STRING","iconv",181],"(",["T_VARIABLE","$charEncoding",181],",",["T_WHITESPACE"," ",181],["T_CONSTANT_ENCAPSED_STRING","'UTF-16BE'",181],",",["T_WHITESPACE"," ",181],["T_VARIABLE","$string",181],")",";",["T_WHITESPACE","\n            ",181],"}",["T_WHITESPACE","\n        ",182],"}",["T_WHITESPACE","\n\n        ",183],["T_VARIABLE","$charCount",185],["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],"(",["T_STRING","PHP_OS",185],["T_WHITESPACE"," ",185],["T_IS_NOT_EQUAL","!=",185],["T_WHITESPACE"," ",185],["T_CONSTANT_ENCAPSED_STRING","'AIX'",185],")",["T_WHITESPACE"," ",185],"?",["T_WHITESPACE"," ",185],["T_STRING","iconv_strlen",185],"(",["T_VARIABLE","$string",185],",",["T_WHITESPACE"," ",185],["T_CONSTANT_ENCAPSED_STRING","'UTF-16BE'",185],")",["T_WHITESPACE"," ",185],":",["T_WHITESPACE"," ",185],["T_STRING","strlen",185],"(",["T_VARIABLE","$string",185],")",";",["T_WHITESPACE","\n        ",185],["T_IF","if",186],["T_WHITESPACE"," ",186],"(",["T_VARIABLE","$charCount",186],["T_WHITESPACE"," ",186],["T_IS_EQUAL","==",186],["T_WHITESPACE"," ",186],["T_LNUMBER","0",186],")",["T_WHITESPACE"," ",186],"{",["T_WHITESPACE","\n            ",186],["T_RETURN","return",187],["T_WHITESPACE"," ",187],["T_LNUMBER","0",187],";",["T_WHITESPACE","\n        ",187],"}",["T_WHITESPACE","\n\n        ",188],["T_COMMENT","\/* Fetch the covered character code list from the font's cmap.\n         *\/",190],["T_WHITESPACE","\n        ",191],["T_VARIABLE","$coveredCharacters",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_VARIABLE","$this",192],["T_OBJECT_OPERATOR","->",192],["T_STRING","_cmap",192],["T_OBJECT_OPERATOR","->",192],["T_STRING","getCoveredCharacters",192],"(",")",";",["T_WHITESPACE","\n\n        ",192],["T_COMMENT","\/* Calculate the score by doing a lookup for each character.\n         *\/",194],["T_WHITESPACE","\n        ",195],["T_VARIABLE","$score",196],["T_WHITESPACE"," ",196],"=",["T_WHITESPACE"," ",196],["T_LNUMBER","0",196],";",["T_WHITESPACE","\n        ",196],["T_VARIABLE","$maxIndex",197],["T_WHITESPACE"," ",197],"=",["T_WHITESPACE"," ",197],["T_STRING","strlen",197],"(",["T_VARIABLE","$string",197],")",";",["T_WHITESPACE","\n        ",197],["T_FOR","for",198],["T_WHITESPACE"," ",198],"(",["T_VARIABLE","$i",198],["T_WHITESPACE"," ",198],"=",["T_WHITESPACE"," ",198],["T_LNUMBER","0",198],";",["T_WHITESPACE"," ",198],["T_VARIABLE","$i",198],["T_WHITESPACE"," ",198],"<",["T_WHITESPACE"," ",198],["T_VARIABLE","$maxIndex",198],";",["T_WHITESPACE"," ",198],["T_VARIABLE","$i",198],["T_INC","++",198],")",["T_WHITESPACE"," ",198],"{",["T_WHITESPACE","\n            ",198],["T_DOC_COMMENT","\/**\n             * @todo Properly handle characters encoded as surrogate pairs.\n             *\/",199],["T_WHITESPACE","\n            ",201],["T_VARIABLE","$charCode",202],["T_WHITESPACE"," ",202],"=",["T_WHITESPACE"," ",202],"(",["T_STRING","ord",202],"(",["T_VARIABLE","$string",202],"[",["T_VARIABLE","$i",202],"]",")",["T_WHITESPACE"," ",202],["T_SL","<<",202],["T_WHITESPACE"," ",202],["T_LNUMBER","8",202],")",["T_WHITESPACE"," ",202],"|",["T_WHITESPACE"," ",202],["T_STRING","ord",202],"(",["T_VARIABLE","$string",202],"[",["T_INC","++",202],["T_VARIABLE","$i",202],"]",")",";",["T_WHITESPACE","\n            ",202],["T_COMMENT","\/* This could probably be optimized a bit with a binary search...\n             *\/",203],["T_WHITESPACE","\n            ",204],["T_IF","if",205],["T_WHITESPACE"," ",205],"(",["T_STRING","in_array",205],"(",["T_VARIABLE","$charCode",205],",",["T_WHITESPACE"," ",205],["T_VARIABLE","$coveredCharacters",205],")",")",["T_WHITESPACE"," ",205],"{",["T_WHITESPACE","\n                ",205],["T_VARIABLE","$score",206],["T_INC","++",206],";",["T_WHITESPACE","\n            ",206],"}",["T_WHITESPACE","\n        ",207],"}",["T_WHITESPACE","\n        ",208],["T_RETURN","return",209],["T_WHITESPACE"," ",209],["T_VARIABLE","$score",209],["T_WHITESPACE"," ",209],"\/",["T_WHITESPACE"," ",209],["T_VARIABLE","$charCount",209],";",["T_WHITESPACE","\n    ",209],"}",["T_WHITESPACE","\n\n    ",210],["T_DOC_COMMENT","\/**\n     * Returns the widths of the glyphs.\n     *\n     * The widths are expressed in the font's glyph space. You are responsible\n     * for converting to user space as necessary. See {@link unitsPerEm()}.\n     *\n     * See also {@link widthForGlyph()}.\n     *\n     * @param array &$glyphNumbers Array of glyph numbers.\n     * @return array Array of glyph widths (integers).\n     *\/",212],["T_WHITESPACE","\n    ",222],["T_PUBLIC","public",223],["T_WHITESPACE"," ",223],["T_FUNCTION","function",223],["T_WHITESPACE"," ",223],["T_STRING","widthsForGlyphs",223],"(",["T_VARIABLE","$glyphNumbers",223],")",["T_WHITESPACE","\n    ",223],"{",["T_WHITESPACE","\n        ",224],["T_VARIABLE","$widths",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],["T_ARRAY","array",225],"(",")",";",["T_WHITESPACE","\n        ",225],["T_FOREACH","foreach",226],["T_WHITESPACE"," ",226],"(",["T_VARIABLE","$glyphNumbers",226],["T_WHITESPACE"," ",226],["T_AS","as",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$key",226],["T_WHITESPACE"," ",226],["T_DOUBLE_ARROW","=>",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$glyphNumber",226],")",["T_WHITESPACE"," ",226],"{",["T_WHITESPACE","\n            ",226],["T_IF","if",227],["T_WHITESPACE"," ",227],"(","!",["T_ISSET","isset",227],"(",["T_VARIABLE","$this",227],["T_OBJECT_OPERATOR","->",227],["T_STRING","_glyphWidths",227],"[",["T_VARIABLE","$glyphNumber",227],"]",")",")",["T_WHITESPACE"," ",227],"{",["T_WHITESPACE","\n                ",227],["T_VARIABLE","$widths",228],"[",["T_VARIABLE","$key",228],"]",["T_WHITESPACE"," ",228],"=",["T_WHITESPACE"," ",228],["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","_missingGlyphWidth",228],";",["T_WHITESPACE","\n            ",228],"}",["T_WHITESPACE"," ",229],["T_ELSE","else",229],["T_WHITESPACE"," ",229],"{",["T_WHITESPACE","\n                ",229],["T_VARIABLE","$widths",230],"[",["T_VARIABLE","$key",230],"]",["T_WHITESPACE"," ",230],"=",["T_WHITESPACE"," ",230],["T_VARIABLE","$this",230],["T_OBJECT_OPERATOR","->",230],["T_STRING","_glyphWidths",230],"[",["T_VARIABLE","$glyphNumber",230],"]",";",["T_WHITESPACE","\n            ",230],"}",["T_WHITESPACE","\n        ",231],"}",["T_WHITESPACE","\n        ",232],["T_RETURN","return",233],["T_WHITESPACE"," ",233],["T_VARIABLE","$widths",233],";",["T_WHITESPACE","\n    ",233],"}",["T_WHITESPACE","\n\n    ",234],["T_DOC_COMMENT","\/**\n     * Returns the width of the glyph.\n     *\n     * Like {@link widthsForGlyphs()} but used for one glyph at a time.\n     *\n     * @param integer $glyphNumber\n     * @return integer\n     *\/",236],["T_WHITESPACE","\n    ",243],["T_PUBLIC","public",244],["T_WHITESPACE"," ",244],["T_FUNCTION","function",244],["T_WHITESPACE"," ",244],["T_STRING","widthForGlyph",244],"(",["T_VARIABLE","$glyphNumber",244],")",["T_WHITESPACE","\n    ",244],"{",["T_WHITESPACE","\n        ",245],["T_IF","if",246],["T_WHITESPACE"," ",246],"(","!",["T_ISSET","isset",246],"(",["T_VARIABLE","$this",246],["T_OBJECT_OPERATOR","->",246],["T_STRING","_glyphWidths",246],"[",["T_VARIABLE","$glyphNumber",246],"]",")",")",["T_WHITESPACE"," ",246],"{",["T_WHITESPACE","\n            ",246],["T_RETURN","return",247],["T_WHITESPACE"," ",247],["T_VARIABLE","$this",247],["T_OBJECT_OPERATOR","->",247],["T_STRING","_missingGlyphWidth",247],";",["T_WHITESPACE","\n        ",247],"}",["T_WHITESPACE","\n        ",248],["T_RETURN","return",249],["T_WHITESPACE"," ",249],["T_VARIABLE","$this",249],["T_OBJECT_OPERATOR","->",249],["T_STRING","_glyphWidths",249],"[",["T_VARIABLE","$glyphNumber",249],"]",";",["T_WHITESPACE","\n    ",249],"}",["T_WHITESPACE","\n\n    ",250],["T_DOC_COMMENT","\/**\n     * Convert string to the font encoding.\n     *\n     * The method is used to prepare string for text drawing operators\n     *\n     * @param string $string\n     * @param string $charEncoding Character encoding of source text.\n     * @return string\n     *\/",252],["T_WHITESPACE","\n    ",260],["T_PUBLIC","public",261],["T_WHITESPACE"," ",261],["T_FUNCTION","function",261],["T_WHITESPACE"," ",261],["T_STRING","encodeString",261],"(",["T_VARIABLE","$string",261],",",["T_WHITESPACE"," ",261],["T_VARIABLE","$charEncoding",261],")",["T_WHITESPACE","\n    ",261],"{",["T_WHITESPACE","\n        ",262],["T_IF","if",263],["T_WHITESPACE"," ",263],"(",["T_STRING","PHP_OS",263],["T_WHITESPACE"," ",263],["T_IS_EQUAL","==",263],["T_WHITESPACE"," ",263],["T_CONSTANT_ENCAPSED_STRING","'AIX'",263],")",["T_WHITESPACE"," ",263],"{",["T_WHITESPACE","\n            ",263],["T_RETURN","return",264],["T_WHITESPACE"," ",264],["T_VARIABLE","$string",264],";",["T_WHITESPACE"," ",264],["T_COMMENT","\/\/ returning here b\/c AIX doesnt know what CP1252 is\n",264],["T_WHITESPACE","        ",265],"}",["T_WHITESPACE","\n\n        ",265],["T_RETURN","return",267],["T_WHITESPACE"," ",267],["T_STRING","iconv",267],"(",["T_VARIABLE","$charEncoding",267],",",["T_WHITESPACE"," ",267],["T_CONSTANT_ENCAPSED_STRING","'CP1252\/\/IGNORE'",267],",",["T_WHITESPACE"," ",267],["T_VARIABLE","$string",267],")",";",["T_WHITESPACE","\n    ",267],"}",["T_WHITESPACE","\n\n    ",268],["T_DOC_COMMENT","\/**\n     * Convert string from the font encoding.\n     *\n     * The method is used to convert strings retrieved from existing content streams\n     *\n     * @param string $string\n     * @param string $charEncoding Character encoding of resulting text.\n     * @return string\n     *\/",270],["T_WHITESPACE","\n    ",278],["T_PUBLIC","public",279],["T_WHITESPACE"," ",279],["T_FUNCTION","function",279],["T_WHITESPACE"," ",279],["T_STRING","decodeString",279],"(",["T_VARIABLE","$string",279],",",["T_WHITESPACE"," ",279],["T_VARIABLE","$charEncoding",279],")",["T_WHITESPACE","\n    ",279],"{",["T_WHITESPACE","\n        ",280],["T_RETURN","return",281],["T_WHITESPACE"," ",281],["T_STRING","iconv",281],"(",["T_CONSTANT_ENCAPSED_STRING","'CP1252'",281],",",["T_WHITESPACE"," ",281],["T_VARIABLE","$charEncoding",281],",",["T_WHITESPACE"," ",281],["T_VARIABLE","$string",281],")",";",["T_WHITESPACE","\n    ",281],"}",["T_WHITESPACE","\n",282],"}",["T_WHITESPACE","\n",283]]