[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Cache\n * @subpackage Zend_Cache_Backend\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * @see Zend_Cache_Backend_Interface\n *\/",23],["T_WHITESPACE","\n",25],["T_COMMENT","#require_once 'Zend\/Cache\/Backend\/ExtendedInterface.php';\n",26],["T_WHITESPACE","\n",27],["T_DOC_COMMENT","\/**\n * @see Zend_Cache_Backend\n *\/",28],["T_WHITESPACE","\n",30],["T_COMMENT","#require_once 'Zend\/Cache\/Backend.php';\n",31],["T_WHITESPACE","\n",32],["T_DOC_COMMENT","\/**\n * @package    Zend_Cache\n * @subpackage Zend_Cache_Backend\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",33],["T_WHITESPACE","\n",38],["T_CLASS","class",39],["T_WHITESPACE"," ",39],["T_STRING","Zend_Cache_Backend_BlackHole",39],["T_WHITESPACE","\n    ",39],["T_EXTENDS","extends",40],["T_WHITESPACE"," ",40],["T_STRING","Zend_Cache_Backend",40],["T_WHITESPACE","\n    ",40],["T_IMPLEMENTS","implements",41],["T_WHITESPACE"," ",41],["T_STRING","Zend_Cache_Backend_ExtendedInterface",41],["T_WHITESPACE","\n",41],"{",["T_WHITESPACE","\n    ",42],["T_DOC_COMMENT","\/**\n     * Test if a cache is available for the given id and (if yes) return it (false else)\n     *\n     * @param  string $id cache id\n     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won't be tested\n     * @return string|false cached datas\n     *\/",43],["T_WHITESPACE","\n    ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","load",50],"(",["T_VARIABLE","$id",50],",",["T_WHITESPACE"," ",50],["T_VARIABLE","$doNotTestCacheValidity",50],["T_WHITESPACE"," ",50],"=",["T_WHITESPACE"," ",50],["T_STRING","false",50],")",["T_WHITESPACE","\n    ",50],"{",["T_WHITESPACE","\n        ",51],["T_RETURN","return",52],["T_WHITESPACE"," ",52],["T_STRING","false",52],";",["T_WHITESPACE","\n    ",52],"}",["T_WHITESPACE","\n\n    ",53],["T_DOC_COMMENT","\/**\n     * Test if a cache is available or not (for the given id)\n     *\n     * @param  string $id cache id\n     * @return mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record\n     *\/",55],["T_WHITESPACE","\n    ",60],["T_PUBLIC","public",61],["T_WHITESPACE"," ",61],["T_FUNCTION","function",61],["T_WHITESPACE"," ",61],["T_STRING","test",61],"(",["T_VARIABLE","$id",61],")",["T_WHITESPACE","\n    ",61],"{",["T_WHITESPACE","\n        ",62],["T_RETURN","return",63],["T_WHITESPACE"," ",63],["T_STRING","false",63],";",["T_WHITESPACE","\n    ",63],"}",["T_WHITESPACE","\n\n    ",64],["T_DOC_COMMENT","\/**\n     * Save some string datas into a cache record\n     *\n     * Note : $data is always \"string\" (serialization is done by the\n     * core not by the backend)\n     *\n     * @param  string $data             Datas to cache\n     * @param  string $id               Cache id\n     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry\n     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)\n     * @return boolean true if no problem\n     *\/",66],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","save",78],"(",["T_VARIABLE","$data",78],",",["T_WHITESPACE"," ",78],["T_VARIABLE","$id",78],",",["T_WHITESPACE"," ",78],["T_VARIABLE","$tags",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_ARRAY","array",78],"(",")",",",["T_WHITESPACE"," ",78],["T_VARIABLE","$specificLifetime",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_STRING","false",78],")",["T_WHITESPACE","\n    ",78],"{",["T_WHITESPACE","\n        ",79],["T_RETURN","return",80],["T_WHITESPACE"," ",80],["T_STRING","true",80],";",["T_WHITESPACE","\n    ",80],"}",["T_WHITESPACE","\n\n    ",81],["T_DOC_COMMENT","\/**\n     * Remove a cache record\n     *\n     * @param  string $id cache id\n     * @return boolean true if no problem\n     *\/",83],["T_WHITESPACE","\n    ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","remove",89],"(",["T_VARIABLE","$id",89],")",["T_WHITESPACE","\n    ",89],"{",["T_WHITESPACE","\n        ",90],["T_RETURN","return",91],["T_WHITESPACE"," ",91],["T_STRING","true",91],";",["T_WHITESPACE","\n    ",91],"}",["T_WHITESPACE","\n\n    ",92],["T_DOC_COMMENT","\/**\n     * Clean some cache records\n     *\n     * Available modes are :\n     * 'all' (default)  => remove all cache entries ($tags is not used)\n     * 'old'            => remove too old cache entries ($tags is not used)\n     * 'matchingTag'    => remove cache entries matching all given tags\n     *                     ($tags can be an array of strings or a single string)\n     * 'notMatchingTag' => remove cache entries not matching one of the given tags\n     *                     ($tags can be an array of strings or a single string)\n     * 'matchingAnyTag' => remove cache entries matching any given tags\n     *                     ($tags can be an array of strings or a single string)\n     *\n     * @param  string $mode clean mode\n     * @param  tags array $tags array of tags\n     * @return boolean true if no problem\n     *\/",94],["T_WHITESPACE","\n    ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","clean",111],"(",["T_VARIABLE","$mode",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_STRING","Zend_Cache",111],["T_DOUBLE_COLON","::",111],["T_STRING","CLEANING_MODE_ALL",111],",",["T_WHITESPACE"," ",111],["T_VARIABLE","$tags",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_ARRAY","array",111],"(",")",")",["T_WHITESPACE","\n    ",111],"{",["T_WHITESPACE","\n        ",112],["T_RETURN","return",113],["T_WHITESPACE"," ",113],["T_STRING","true",113],";",["T_WHITESPACE","\n    ",113],"}",["T_WHITESPACE","\n\n    ",114],["T_DOC_COMMENT","\/**\n     * Return an array of stored cache ids\n     *\n     * @return array array of stored cache ids (string)\n     *\/",116],["T_WHITESPACE","\n    ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","getIds",121],"(",")",["T_WHITESPACE","\n    ",121],"{",["T_WHITESPACE","\n        ",122],["T_RETURN","return",123],["T_WHITESPACE"," ",123],["T_ARRAY","array",123],"(",")",";",["T_WHITESPACE","\n    ",123],"}",["T_WHITESPACE","\n\n    ",124],["T_DOC_COMMENT","\/**\n     * Return an array of stored tags\n     *\n     * @return array array of stored tags (string)\n     *\/",126],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","getTags",131],"(",")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_RETURN","return",133],["T_WHITESPACE"," ",133],["T_ARRAY","array",133],"(",")",";",["T_WHITESPACE","\n    ",133],"}",["T_WHITESPACE","\n\n    ",134],["T_DOC_COMMENT","\/**\n     * Return an array of stored cache ids which match given tags\n     *\n     * In case of multiple tags, a logical AND is made between tags\n     *\n     * @param array $tags array of tags\n     * @return array array of matching cache ids (string)\n     *\/",136],["T_WHITESPACE","\n    ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","getIdsMatchingTags",144],"(",["T_VARIABLE","$tags",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_ARRAY","array",144],"(",")",")",["T_WHITESPACE","\n    ",144],"{",["T_WHITESPACE","\n        ",145],["T_RETURN","return",146],["T_WHITESPACE"," ",146],["T_ARRAY","array",146],"(",")",";",["T_WHITESPACE","\n    ",146],"}",["T_WHITESPACE","\n\n    ",147],["T_DOC_COMMENT","\/**\n     * Return an array of stored cache ids which don't match given tags\n     *\n     * In case of multiple tags, a logical OR is made between tags\n     *\n     * @param array $tags array of tags\n     * @return array array of not matching cache ids (string)\n     *\/",149],["T_WHITESPACE","\n    ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","getIdsNotMatchingTags",157],"(",["T_VARIABLE","$tags",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_ARRAY","array",157],"(",")",")",["T_WHITESPACE","\n    ",157],"{",["T_WHITESPACE","\n        ",158],["T_RETURN","return",159],["T_WHITESPACE"," ",159],["T_ARRAY","array",159],"(",")",";",["T_WHITESPACE","\n    ",159],"}",["T_WHITESPACE","\n\n    ",160],["T_DOC_COMMENT","\/**\n     * Return an array of stored cache ids which match any given tags\n     *\n     * In case of multiple tags, a logical AND is made between tags\n     *\n     * @param  array $tags array of tags\n     * @return array array of any matching cache ids (string)\n     *\/",162],["T_WHITESPACE","\n    ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","getIdsMatchingAnyTags",170],"(",["T_VARIABLE","$tags",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_ARRAY","array",170],"(",")",")",["T_WHITESPACE","\n    ",170],"{",["T_WHITESPACE","\n        ",171],["T_RETURN","return",172],["T_WHITESPACE"," ",172],["T_ARRAY","array",172],"(",")",";",["T_WHITESPACE","\n    ",172],"}",["T_WHITESPACE","\n\n    ",173],["T_DOC_COMMENT","\/**\n     * Return the filling percentage of the backend storage\n     *\n     * @return int integer between 0 and 100\n     * @throws Zend_Cache_Exception\n     *\/",175],["T_WHITESPACE","\n    ",180],["T_PUBLIC","public",181],["T_WHITESPACE"," ",181],["T_FUNCTION","function",181],["T_WHITESPACE"," ",181],["T_STRING","getFillingPercentage",181],"(",")",["T_WHITESPACE","\n    ",181],"{",["T_WHITESPACE","\n        ",182],["T_RETURN","return",183],["T_WHITESPACE"," ",183],["T_LNUMBER","0",183],";",["T_WHITESPACE","\n    ",183],"}",["T_WHITESPACE","\n\n    ",184],["T_DOC_COMMENT","\/**\n     * Return an array of metadatas for the given cache id\n     *\n     * The array must include these keys :\n     * - expire : the expire timestamp\n     * - tags : a string array of tags\n     * - mtime : timestamp of last modification time\n     *\n     * @param  string $id cache id\n     * @return array array of metadatas (false if the cache id is not found)\n     *\/",186],["T_WHITESPACE","\n    ",196],["T_PUBLIC","public",197],["T_WHITESPACE"," ",197],["T_FUNCTION","function",197],["T_WHITESPACE"," ",197],["T_STRING","getMetadatas",197],"(",["T_VARIABLE","$id",197],")",["T_WHITESPACE","\n    ",197],"{",["T_WHITESPACE","\n        ",198],["T_RETURN","return",199],["T_WHITESPACE"," ",199],["T_STRING","false",199],";",["T_WHITESPACE","\n    ",199],"}",["T_WHITESPACE","\n\n    ",200],["T_DOC_COMMENT","\/**\n     * Give (if possible) an extra lifetime to the given cache id\n     *\n     * @param  string $id cache id\n     * @param  int $extraLifetime\n     * @return boolean true if ok\n     *\/",202],["T_WHITESPACE","\n    ",208],["T_PUBLIC","public",209],["T_WHITESPACE"," ",209],["T_FUNCTION","function",209],["T_WHITESPACE"," ",209],["T_STRING","touch",209],"(",["T_VARIABLE","$id",209],",",["T_WHITESPACE"," ",209],["T_VARIABLE","$extraLifetime",209],")",["T_WHITESPACE","\n    ",209],"{",["T_WHITESPACE","\n        ",210],["T_RETURN","return",211],["T_WHITESPACE"," ",211],["T_STRING","false",211],";",["T_WHITESPACE","\n    ",211],"}",["T_WHITESPACE","\n\n    ",212],["T_DOC_COMMENT","\/**\n     * Return an associative array of capabilities (booleans) of the backend\n     *\n     * The array must include these keys :\n     * - automatic_cleaning (is automating cleaning necessary)\n     * - tags (are tags supported)\n     * - expired_read (is it possible to read expired cache records\n     *                 (for doNotTestCacheValidity option for example))\n     * - priority does the backend deal with priority when saving\n     * - infinite_lifetime (is infinite lifetime can work with this backend)\n     * - get_list (is it possible to get the list of cache ids and the complete list of tags)\n     *\n     * @return array associative of with capabilities\n     *\/",214],["T_WHITESPACE","\n    ",227],["T_PUBLIC","public",228],["T_WHITESPACE"," ",228],["T_FUNCTION","function",228],["T_WHITESPACE"," ",228],["T_STRING","getCapabilities",228],"(",")",["T_WHITESPACE","\n    ",228],"{",["T_WHITESPACE","\n        ",229],["T_RETURN","return",230],["T_WHITESPACE"," ",230],["T_ARRAY","array",230],"(",["T_WHITESPACE","\n            ",230],["T_CONSTANT_ENCAPSED_STRING","'automatic_cleaning'",231],["T_WHITESPACE"," ",231],["T_DOUBLE_ARROW","=>",231],["T_WHITESPACE"," ",231],["T_STRING","true",231],",",["T_WHITESPACE","\n            ",231],["T_CONSTANT_ENCAPSED_STRING","'tags'",232],["T_WHITESPACE","               ",232],["T_DOUBLE_ARROW","=>",232],["T_WHITESPACE"," ",232],["T_STRING","true",232],",",["T_WHITESPACE","\n            ",232],["T_CONSTANT_ENCAPSED_STRING","'expired_read'",233],["T_WHITESPACE","       ",233],["T_DOUBLE_ARROW","=>",233],["T_WHITESPACE"," ",233],["T_STRING","true",233],",",["T_WHITESPACE","\n            ",233],["T_CONSTANT_ENCAPSED_STRING","'priority'",234],["T_WHITESPACE","           ",234],["T_DOUBLE_ARROW","=>",234],["T_WHITESPACE"," ",234],["T_STRING","true",234],",",["T_WHITESPACE","\n            ",234],["T_CONSTANT_ENCAPSED_STRING","'infinite_lifetime'",235],["T_WHITESPACE","  ",235],["T_DOUBLE_ARROW","=>",235],["T_WHITESPACE"," ",235],["T_STRING","true",235],",",["T_WHITESPACE","\n            ",235],["T_CONSTANT_ENCAPSED_STRING","'get_list'",236],["T_WHITESPACE","           ",236],["T_DOUBLE_ARROW","=>",236],["T_WHITESPACE"," ",236],["T_STRING","true",236],",",["T_WHITESPACE","\n        ",236],")",";",["T_WHITESPACE","\n    ",237],"}",["T_WHITESPACE","\n\n    ",238],["T_DOC_COMMENT","\/**\n     * PUBLIC METHOD FOR UNIT TESTING ONLY !\n     *\n     * Force a cache record to expire\n     *\n     * @param string $id cache id\n     *\/",240],["T_WHITESPACE","\n    ",246],["T_PUBLIC","public",247],["T_WHITESPACE"," ",247],["T_FUNCTION","function",247],["T_WHITESPACE"," ",247],["T_STRING","___expire",247],"(",["T_VARIABLE","$id",247],")",["T_WHITESPACE","\n    ",247],"{",["T_WHITESPACE","\n    ",248],"}",["T_WHITESPACE","\n",249],"}",["T_WHITESPACE","\n",250]]