[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Cache\n * @subpackage Zend_Cache_Backend\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n\n",21],["T_DOC_COMMENT","\/**\n * @package    Zend_Cache\n * @subpackage Zend_Cache_Backend\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",24],["T_WHITESPACE","\n",29],["T_INTERFACE","interface",30],["T_WHITESPACE"," ",30],["T_STRING","Zend_Cache_Backend_Interface",30],["T_WHITESPACE","\n",30],"{",["T_WHITESPACE","\n    ",31],["T_DOC_COMMENT","\/**\n     * Set the frontend directives\n     *\n     * @param array $directives assoc of directives\n     *\/",32],["T_WHITESPACE","\n    ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","setDirectives",37],"(",["T_VARIABLE","$directives",37],")",";",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * Test if a cache is available for the given id and (if yes) return it (false else)\n     *\n     * Note : return value is always \"string\" (unserialization is done by the core not by the backend)\n     *\n     * @param  string  $id                     Cache id\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\n     * @return string|false cached datas\n     *\/",39],["T_WHITESPACE","\n    ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","load",48],"(",["T_VARIABLE","$id",48],",",["T_WHITESPACE"," ",48],["T_VARIABLE","$doNotTestCacheValidity",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_STRING","false",48],")",";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Test if a cache is available or not (for the given id)\n     *\n     * @param  string $id cache id\n     * @return mixed|false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record\n     *\/",50],["T_WHITESPACE","\n    ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","test",56],"(",["T_VARIABLE","$id",56],")",";",["T_WHITESPACE","\n\n    ",56],["T_DOC_COMMENT","\/**\n     * Save some string datas into a cache record\n     *\n     * Note : $data is always \"string\" (serialization is done by the\n     * core not by the backend)\n     *\n     * @param  string $data            Datas to cache\n     * @param  string $id              Cache id\n     * @param  array $tags             Array of strings, the cache record will be tagged by each string entry\n     * @param  int   $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)\n     * @return boolean true if no problem\n     *\/",58],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","save",70],"(",["T_VARIABLE","$data",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$id",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$tags",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_ARRAY","array",70],"(",")",",",["T_WHITESPACE"," ",70],["T_VARIABLE","$specificLifetime",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_STRING","false",70],")",";",["T_WHITESPACE","\n\n    ",70],["T_DOC_COMMENT","\/**\n     * Remove a cache record\n     *\n     * @param  string $id Cache id\n     * @return boolean True if no problem\n     *\/",72],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","remove",78],"(",["T_VARIABLE","$id",78],")",";",["T_WHITESPACE","\n\n    ",78],["T_DOC_COMMENT","\/**\n     * Clean some cache records\n     *\n     * Available modes are :\n     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)\n     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)\n     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags\n     *                                               ($tags can be an array of strings or a single string)\n     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}\n     *                                               ($tags can be an array of strings or a single string)\n     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags\n     *                                               ($tags can be an array of strings or a single string)\n     *\n     * @param  string $mode Clean mode\n     * @param  array  $tags Array of tags\n     * @return boolean true if no problem\n     *\/",80],["T_WHITESPACE","\n    ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","clean",97],"(",["T_VARIABLE","$mode",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","Zend_Cache",97],["T_DOUBLE_COLON","::",97],["T_STRING","CLEANING_MODE_ALL",97],",",["T_WHITESPACE"," ",97],["T_VARIABLE","$tags",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_ARRAY","array",97],"(",")",")",";",["T_WHITESPACE","\n\n",97],"}",["T_WHITESPACE","\n",99]]