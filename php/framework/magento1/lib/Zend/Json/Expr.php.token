[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/framework.zend.com\/license\/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Json\n * @subpackage Expr\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n * @version    $Id$\n *\/",2],["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * Class for Zend_Json encode method.\n *\n * This class simply holds a string with a native Javascript Expression,\n * so objects | arrays to be encoded with Zend_Json can contain native\n * Javascript Expressions.\n *\n * Example:\n * <code>\n * $foo = array(\n *     'integer'  =>9,\n *     'string'   =>'test string',\n *     'function' => Zend_Json_Expr(\n *         'function(){ window.alert(\"javascript function encoded by Zend_Json\") }'\n *     ),\n * );\n *\n * Zend_Json::encode($foo, false, array('enableJsonExprFinder' => true));\n * \/\/ it will returns json encoded string:\n * \/\/ {\"integer\":9,\"string\":\"test string\",\"function\":function(){window.alert(\"javascript function encoded by Zend_Json\")}}\n * <\/code>\n *\n * @category   Zend\n * @package    Zend_Json\n * @subpackage Expr\n * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http:\/\/www.zend.com)\n * @license    http:\/\/framework.zend.com\/license\/new-bsd     New BSD License\n *\/",23],["T_WHITESPACE","\n",50],["T_CLASS","class",51],["T_WHITESPACE"," ",51],["T_STRING","Zend_Json_Expr",51],["T_WHITESPACE","\n",51],"{",["T_WHITESPACE","\n    ",52],["T_DOC_COMMENT","\/**\n     * Storage for javascript expression.\n     *\n     * @var string\n     *\/",53],["T_WHITESPACE","\n    ",57],["T_PROTECTED","protected",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$_expression",58],";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param  string $expression the expression to hold.\n     * @return void\n     *\/",60],["T_WHITESPACE","\n    ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","__construct",66],"(",["T_VARIABLE","$expression",66],")",["T_WHITESPACE","\n    ",66],"{",["T_WHITESPACE","\n        ",67],["T_VARIABLE","$this",68],["T_OBJECT_OPERATOR","->",68],["T_STRING","_expression",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING_CAST","(string)",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$expression",68],";",["T_WHITESPACE","\n    ",68],"}",["T_WHITESPACE","\n\n    ",69],["T_DOC_COMMENT","\/**\n     * Cast to string\n     *\n     * @return string holded javascript expression.\n     *\/",71],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","__toString",76],"(",")",["T_WHITESPACE","\n    ",76],"{",["T_WHITESPACE","\n        ",77],["T_RETURN","return",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$this",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","_expression",78],";",["T_WHITESPACE","\n    ",78],"}",["T_WHITESPACE","\n",79],"}",["T_WHITESPACE","\n",80]]