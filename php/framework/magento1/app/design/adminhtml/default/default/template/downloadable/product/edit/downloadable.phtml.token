[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License (AFL 3.0)\n * that is bundled with this package in the file LICENSE_AFL.txt.\n * It is also available through the world-wide-web at this URL:\n * http:\/\/opensource.org\/licenses\/afl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http:\/\/www.magento.com for more information.\n *\n * @category    design\n * @package     default_default\n * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http:\/\/www.magento.com)\n * @license     http:\/\/opensource.org\/licenses\/afl-3.0.php  Academic Free License (AFL 3.0)\n *\/",2],["T_WHITESPACE","\n",25],["T_CLOSE_TAG","?>\n",26],["T_INLINE_HTML","\n",27],["T_OPEN_TAG","<?php\n",28],["T_DOC_COMMENT","\/**\n * @see Mage_Downloadable_Block_Adminhtml_Catalog_Product_Edit_Tab_Downloadable\n *\/",29],["T_WHITESPACE","\n",31],["T_CLOSE_TAG","?>\n",32],["T_INLINE_HTML","<script type=\"text\/javascript\">\n\/\/<![CDATA[>\n\nvar uploaderTemplate = '<div class=\"no-display\" id=\"[[idName]]-template\">' +\n                            '<div id=\"{{id}}-container\" class=\"file-row file-row-narrow\">' +\n                                '<span class=\"file-info\">' +\n                                    '<span class=\"file-info-name\">{{name}}<\/span>' +\n                                    ' ' +\n                                    '<span class=\"file-info-size\">{{size}}<\/span>' +\n                                '<\/span>' +\n                                '<span class=\"progress-text\"><\/span>' +\n                                '<div class=\"clear\"><\/div>' +\n                            '<\/div>' +\n                        '<\/div>';\n\nvar fileListTemplate = '<span class=\"file-info\">' +\n                            '<span class=\"file-info-name\">{{name}}<\/span>' +\n                            ' ' +\n                            '<span class=\"file-info-size\">({{size}})<\/span>' +\n                        '<\/span>';\n\nvar Downloadable = {\n    uploaderObj : $H({}),\n    objCount : 0,\n    setUploaderObj : function(type, key, obj){\n        if (!this.uploaderObj.get(type)) {\n            this.uploaderObj.set(type, $H({}));\n        }\n        this.uploaderObj.get(type).set(key, obj);\n    },\n    getUploaderObj : function(type, key){\n        try {\n            return this.uploaderObj.get(type).get(key);\n        } catch (e) {\n            try {\n                console.log(e);\n            } catch (e2) {\n                alert(e.name + '\\n' + e.message);\n            }\n        }\n    },\n    unsetUploaderObj : function(type, key){\n        try {\n            this.uploaderObj.get(type).unset(key);\n        } catch (e) {\n            try {\n                console.log(e);\n            } catch (e2) {\n                alert(e.name + '\\n' + e.message);\n            }\n        }\n    },\n    massUploadByType : function(type){\n        try {\n            this.uploaderObj.get(type).each(function(item){\n                var container = item.value.elements.container.up('tr');\n                if (container.visible() && !container.hasClassName('no-display')) {\n                    item.value.upload();\n                } else {\n                    Downloadable.unsetUploaderObj(type, item.key);\n                }\n            });\n        } catch (e) {\n            try {\n                console.log(e);\n            } catch (e2) {\n                alert(e.name + '\\n' + e.message);\n            }\n        }\n    }\n};\n\nDownloadable.FileUploader = Class.create();\nDownloadable.FileUploader.prototype = {\n    type : null,\n    key : null, \/\/key, identifier of uploader obj\n    elmContainer : null, \/\/insert Flex object and templates to elmContainer\n    fileValueName : null, \/\/name of field of JSON data of saved file\n    fileValue : null,\n    idName : null, \/\/id name of elements for unique uploader\n    uploaderText: uploaderTemplate,\n    uploaderSyntax : \/(^|.|\\r|\\n)(\\[\\[(\\w+)\\]\\])\/,\n    uploaderObj : $H({}),\n    config : null,\n    initialize: function (type, key, elmContainer, fileValueName, fileValue ,idName, config) {\n        this.type = type;\n        this.key = key;\n        this.elmContainer = elmContainer;\n        this.fileValueName = fileValueName;\n        this.fileValue = fileValue;\n        this.idName = idName;\n        this.config = config;\n        uploaderTemplate = new Template(this.uploaderText, this.uploaderSyntax);\n        ",33],["T_OPEN_TAG","<?php ",126],["T_IF","if",126],["T_WHITESPACE"," ",126],"(","!",["T_VARIABLE","$this",126],["T_OBJECT_OPERATOR","->",126],["T_STRING","isReadonly",126],"(",")",")",":",["T_CLOSE_TAG","?>\n",126],["T_INLINE_HTML","        Element.insert(\n            elmContainer,\n            {'top' : uploaderTemplate.evaluate({\n                    'idName' : this.idName,\n                    'fileValueName' : this.fileValueName,\n                    'uploaderObj' : 'Downloadable.getUploaderObj(\\''+this.type+'\\', \\''+this.key+'\\')'\n                })\n            }\n        );\n        if ($(this.idName+'_save')) {\n            $(this.idName+'_save').value = this.fileValue.toJSON\n               ? this.fileValue.toJSON()\n               : Object.toJSON(this.fileValue);\n        }\n        var uploaderConfig = (Object.isString(this.config) && this.config.evalJSON()) || this.config;\n        Downloadable.setUploaderObj(\n            this.type,\n            this.key,\n            new Uploader(uploaderConfig)\n        );\n        if (varienGlobalEvents) {\n            varienGlobalEvents.attachEventHandler('tabChangeBefore', Downloadable.getUploaderObj(type, key).onContainerHideBefore);\n        }\n        new Downloadable.FileList(this.idName, Downloadable.getUploaderObj(type, key));\n        ",127],["T_OPEN_TAG","<?php ",151],["T_ENDIF","endif",151],";",["T_CLOSE_TAG","?>\n",151],["T_INLINE_HTML","    }\n}\n\nDownloadable.FileList = Class.create();\nDownloadable.FileList.prototype = {\n    file: [],\n    containerId: '',\n    container: null,\n    uploader: null,\n    fileListTemplate: fileListTemplate,\n    templatePattern : \/(^|.|\\r|\\n)({{(\\w+)}})\/,\n    listTemplate : null,\n    initialize: function (containerId, uploader) {\n        this.containerId  = containerId,\n        this.container = $(this.containerId);\n        this.uploader = uploader;\n        document.on('uploader:fileSuccess', function(event) {\n            var memo = event.memo;\n            if(this._checkCurrentContainer(memo.containerId)) {\n                this.handleUploadComplete([{response: memo.response}]);\n                this.handleButtonsSwap();\n            }\n        }.bind(this));\n        document.on('uploader:fileError', function(event) {\n            var memo = event.memo;\n            if(this._checkCurrentContainer(memo.containerId)) {\n                this.handleButtonsSwap();\n            }\n        }.bind(this));\n        document.on('upload:simulateDelete', this.handleFileRemoveAll.bind(this));\n        document.on('uploader:simulateNewUpload', this.handleFileNew.bind(this));\n        this.file = this.getElement('save').value.evalJSON();\n        this.listTemplate = new Template(this.fileListTemplate, this.templatePattern);\n        this.updateFiles();\n        this.uploader.onFileRemoveAll = this.handleFileRemoveAll.bind(this);\n        this.uploader.onFileSelect = this.handleFileSelect.bind(this);\n    },\n\n    _checkCurrentContainer: function (child) {\n        return $(this.containerId).down('#' + child);\n    },\n\n    handleFileRemoveAll: function(e) {\n        if(e.memo && this._checkCurrentContainer(e.memo.containerId)) {\n            $(this.containerId+'-new').hide();\n            $(this.containerId+'-old').show();\n            this.handleButtonsSwap();\n        }\n    },\n    handleFileNew: function (e) {\n        if(e.memo && this._checkCurrentContainer(e.memo.containerId)) {\n            $(this.containerId + '-new').show();\n            $(this.containerId + '-old').hide();\n            this.handleButtonsSwap();\n        }\n    },\n    handleButtonsSwap: function () {\n        $$(['#' + this.containerId+'-browse', '#'+this.containerId+'-delete']).invoke('toggle');\n    },\n    handleFileSelect: function() {\n        $(this.containerId+'_type').checked = true;\n    },\n    getElement: function (name) {\n        return $(this.containerId + '_' + name);\n    },\n    handleUploadComplete: function (files) {\n        files.each(function(item) {\n           if (!item.response.isJSON()) {\n                try {\n                    console.log(item.response);\n                } catch (e2) {\n                    alert(item.response);\n                }\n               return;\n           }\n           var response = item.response.evalJSON();\n           if (response.error) {\n               return;\n           }\n           var newFile = {};\n           newFile.file = response.file;\n           newFile.name = response.name;\n           newFile.size = response.size;\n           newFile.status = 'new';\n           this.file[0] = newFile;\n        }.bind(this));\n        this.updateFiles();\n    },\n    updateFiles: function() {\n        this.getElement('save').value = this.file.toJSON\n            ? this.file.toJSON()\n            : Object.toJSON(this.file);\n        this.file.each(function(row){\n            row.size = this.uploader.formatSize(row.size);\n            $(this.containerId + '-old').innerHTML = this.listTemplate.evaluate(row);\n            $(this.containerId + '-new').hide();\n            $(this.containerId + '-old').show();\n        }.bind(this));\n    }\n}\n\nvar alertAlreadyDisplayed = false;\n\nValidation.addAllThese([\n    ['validate-downloadable-file', 'Please upload a file.', function(v,element) {\n            linkType = element.up(0).down('input[value=\"file\"]');\n            if (linkType.checked && (v == '' || v == '[]')) {\n                newFileContainer = element.up(0).down('div.new-file');\n                if (!alertAlreadyDisplayed && (newFileContainer.empty() || newFileContainer.style.display != 'none')) {\n                    alertAlreadyDisplayed = true;\n                    alert('",152],["T_OPEN_TAG","<?php ",262],["T_ECHO","echo",262],["T_WHITESPACE"," ",262],["T_VARIABLE","$this",262],["T_OBJECT_OPERATOR","->",262],["T_STRING","jsQuoteEscape",262],"(",["T_VARIABLE","$this",262],["T_OBJECT_OPERATOR","->",262],["T_STRING","__",262],"(",["T_CONSTANT_ENCAPSED_STRING","'There are files that were selected but not uploaded yet. Please upload or remove them first'",262],")",")",";",["T_CLOSE_TAG","?>",262],["T_INLINE_HTML","');\n                }\n                return false;\n            }\n            return true;\n        }]\n    ]);\n\nValidation.addAllThese([\n    ['validate-downloadable-url', 'Please specify Url.', function(v,element) {\n            linkType = element.up(0).down('input[value=\"url\"]');\n            if (linkType.checked && v == '') {\n                return false;\n            }\n            return true;\n        }]\n    ]);\n\/\/]]>\n<\/script>\n\n<div id=\"alert_messages_block\">",262],["T_OPEN_TAG","<?php ",282],["T_ECHO","echo",282],["T_WHITESPACE"," ",282],["T_VARIABLE","$this",282],["T_OBJECT_OPERATOR","->",282],["T_STRING","getMessageHtml",282],"(",")",["T_WHITESPACE"," ",282],["T_CLOSE_TAG","?>",282],["T_INLINE_HTML","<\/div>\n\n<div class=\"entry-edit\">\n",282],["T_OPEN_TAG","<?php ",285],["T_ECHO","echo",285],["T_WHITESPACE"," ",285],["T_VARIABLE","$this",285],["T_OBJECT_OPERATOR","->",285],["T_STRING","getChildHtml",285],"(",["T_CONSTANT_ENCAPSED_STRING","'accordion'",285],")",["T_WHITESPACE"," ",285],["T_CLOSE_TAG","?>\n",285],["T_INLINE_HTML","<\/div>\n<div style=\"display:none\">\n    <div id=\"custom-advice-container\"><\/div>\n<\/div>\n",286],["T_OPEN_TAG","<?php ",290],["T_IF","if",290],["T_WHITESPACE"," ",290],"(",["T_VARIABLE","$this",290],["T_OBJECT_OPERATOR","->",290],["T_STRING","isReadonly",290],"(",")",")",":",["T_WHITESPACE"," ",290],["T_CLOSE_TAG","?>\n",290],["T_INLINE_HTML","<script type=\"text\/javascript\">\n$('downloadableInfo').select('input', 'select', 'textarea', 'button').each(function (item){\n    item.disabled = true;\n    if (item.tagName.toLowerCase() == 'button') {\n        item.addClassName('disabled');\n    }\n});\n<\/script>\n",291],["T_OPEN_TAG","<?php ",299],["T_ENDIF","endif",299],";",["T_WHITESPACE"," ",299],["T_CLOSE_TAG","?>\n",299],["T_INLINE_HTML","<!--\n<div><input type=\"hidden\" name=\"affect_downloadable_information\" value=\"1\" \/><\/div>\n-->\n",300]]