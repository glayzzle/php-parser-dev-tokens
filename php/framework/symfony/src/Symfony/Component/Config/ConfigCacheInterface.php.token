[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Config",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Config",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Resource",14],["T_NS_SEPARATOR","\\",14],["T_STRING","ResourceInterface",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * Interface for ConfigCache.\n *\n * @author Matthias Pigulla <mp@webfactory.de>\n *\/",16],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","ConfigCacheInterface",21],["T_WHITESPACE","\n",21],"{",["T_WHITESPACE","\n    ",22],["T_DOC_COMMENT","\/**\n     * Gets the cache file path.\n     *\n     * @return string The cache file path\n     *\/",23],["T_WHITESPACE","\n    ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getPath",28],"(",")",";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * Checks if the cache is still fresh.\n     *\n     * This check should take the metadata passed to the write() method into consideration.\n     *\n     * @return bool Whether the cache is still fresh\n     *\/",30],["T_WHITESPACE","\n    ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","isFresh",37],"(",")",";",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * Writes the given content into the cache file. Metadata will be stored\n     * independently and can be used to check cache freshness at a later time.\n     *\n     * @param string                   $content  The content to write into the cache\n     * @param ResourceInterface[]|null $metadata An array of ResourceInterface instances\n     *\n     * @throws \\RuntimeException When the cache file cannot be written\n     *\/",39],["T_WHITESPACE","\n    ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","write",48],"(",["T_VARIABLE","$content",48],",",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$metadata",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_STRING","null",48],")",";",["T_WHITESPACE","\n",48],"}",["T_WHITESPACE","\n",49]]