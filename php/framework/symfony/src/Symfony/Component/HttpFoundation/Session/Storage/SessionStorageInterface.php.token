[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","HttpFoundation",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Session",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Storage",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","HttpFoundation",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Session",14],["T_NS_SEPARATOR","\\",14],["T_STRING","SessionBagInterface",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * StorageInterface.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Drak <drak@zikula.org>\n *\/",16],["T_WHITESPACE","\n",21],["T_INTERFACE","interface",22],["T_WHITESPACE"," ",22],["T_STRING","SessionStorageInterface",22],["T_WHITESPACE","\n",22],"{",["T_WHITESPACE","\n    ",23],["T_DOC_COMMENT","\/**\n     * Starts the session.\n     *\n     * @return bool True if started\n     *\n     * @throws \\RuntimeException If something goes wrong starting the session.\n     *\/",24],["T_WHITESPACE","\n    ",30],["T_PUBLIC","public",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","start",31],"(",")",";",["T_WHITESPACE","\n\n    ",31],["T_DOC_COMMENT","\/**\n     * Checks if the session is started.\n     *\n     * @return bool True if started, false otherwise\n     *\/",33],["T_WHITESPACE","\n    ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","isStarted",38],"(",")",";",["T_WHITESPACE","\n\n    ",38],["T_DOC_COMMENT","\/**\n     * Returns the session ID.\n     *\n     * @return string The session ID or empty\n     *\/",40],["T_WHITESPACE","\n    ",44],["T_PUBLIC","public",45],["T_WHITESPACE"," ",45],["T_FUNCTION","function",45],["T_WHITESPACE"," ",45],["T_STRING","getId",45],"(",")",";",["T_WHITESPACE","\n\n    ",45],["T_DOC_COMMENT","\/**\n     * Sets the session ID.\n     *\n     * @param string $id\n     *\/",47],["T_WHITESPACE","\n    ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","setId",52],"(",["T_VARIABLE","$id",52],")",";",["T_WHITESPACE","\n\n    ",52],["T_DOC_COMMENT","\/**\n     * Returns the session name.\n     *\n     * @return mixed The session name\n     *\/",54],["T_WHITESPACE","\n    ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","getName",59],"(",")",";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * Sets the session name.\n     *\n     * @param string $name\n     *\/",61],["T_WHITESPACE","\n    ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","setName",66],"(",["T_VARIABLE","$name",66],")",";",["T_WHITESPACE","\n\n    ",66],["T_DOC_COMMENT","\/**\n     * Regenerates id that represents this storage.\n     *\n     * This method must invoke session_regenerate_id($destroy) unless\n     * this interface is used for a storage object designed for unit\n     * or functional testing where a real PHP session would interfere\n     * with testing.\n     *\n     * Note regenerate+destroy should not clear the session data in memory\n     * only delete the session data from persistent storage.\n     *\n     * Care: When regenerating the session ID no locking is involved in PHP's\n     * session design. See https:\/\/bugs.php.net\/bug.php?id=61470 for a discussion.\n     * So you must make sure the regenerated session is saved BEFORE sending the\n     * headers with the new ID. Symfony's HttpKernel offers a listener for this.\n     * See Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener.\n     * Otherwise session data could get lost again for concurrent requests with the\n     * new ID. One result could be that you get logged out after just logging in.\n     *\n     * @param bool $destroy  Destroy session when regenerating?\n     * @param int  $lifetime Sets the cookie lifetime for the session cookie. A null value\n     *                       will leave the system settings unchanged, 0 sets the cookie\n     *                       to expire with browser session. Time is in seconds, and is\n     *                       not a Unix timestamp.\n     *\n     * @return bool True if session regenerated, false if error\n     *\n     * @throws \\RuntimeException If an error occurs while regenerating this storage\n     *\/",68],["T_WHITESPACE","\n    ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","regenerate",97],"(",["T_VARIABLE","$destroy",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","false",97],",",["T_WHITESPACE"," ",97],["T_VARIABLE","$lifetime",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","null",97],")",";",["T_WHITESPACE","\n\n    ",97],["T_DOC_COMMENT","\/**\n     * Force the session to be saved and closed.\n     *\n     * This method must invoke session_write_close() unless this interface is\n     * used for a storage object design for unit or functional testing where\n     * a real PHP session would interfere with testing, in which case\n     * it should actually persist the session data if required.\n     *\n     * @throws \\RuntimeException If the session is saved without being started, or if the session\n     *                           is already closed.\n     *\/",99],["T_WHITESPACE","\n    ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","save",110],"(",")",";",["T_WHITESPACE","\n\n    ",110],["T_DOC_COMMENT","\/**\n     * Clear all session data in memory.\n     *\/",112],["T_WHITESPACE","\n    ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","clear",115],"(",")",";",["T_WHITESPACE","\n\n    ",115],["T_DOC_COMMENT","\/**\n     * Gets a SessionBagInterface by name.\n     *\n     * @param string $name\n     *\n     * @return SessionBagInterface\n     *\n     * @throws \\InvalidArgumentException If the bag does not exist\n     *\/",117],["T_WHITESPACE","\n    ",125],["T_PUBLIC","public",126],["T_WHITESPACE"," ",126],["T_FUNCTION","function",126],["T_WHITESPACE"," ",126],["T_STRING","getBag",126],"(",["T_VARIABLE","$name",126],")",";",["T_WHITESPACE","\n\n    ",126],["T_DOC_COMMENT","\/**\n     * Registers a SessionBagInterface for use.\n     *\n     * @param SessionBagInterface $bag\n     *\/",128],["T_WHITESPACE","\n    ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","registerBag",133],"(",["T_STRING","SessionBagInterface",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$bag",133],")",";",["T_WHITESPACE","\n\n    ",133],["T_DOC_COMMENT","\/**\n     * @return MetadataBag\n     *\/",135],["T_WHITESPACE","\n    ",137],["T_PUBLIC","public",138],["T_WHITESPACE"," ",138],["T_FUNCTION","function",138],["T_WHITESPACE"," ",138],["T_STRING","getMetadataBag",138],"(",")",";",["T_WHITESPACE","\n",138],"}",["T_WHITESPACE","\n",139]]