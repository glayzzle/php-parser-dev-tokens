[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Routing",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Generator",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * ConfigurableRequirementsInterface must be implemented by URL generators that\n * can be configured whether an exception should be generated when the parameters\n * do not match the requirements. It is also possible to disable the requirements\n * check for URL generation completely.\n *\n * The possible configurations and use-cases:\n * - setStrictRequirements(true): Throw an exception for mismatching requirements. This\n *   is mostly useful in development environment.\n * - setStrictRequirements(false): Don't throw an exception but return null as URL for\n *   mismatching requirements and log the problem. Useful when you cannot control all\n *   params because they come from third party libs but don't want to have a 404 in\n *   production environment. It should log the mismatch so one can review it.\n * - setStrictRequirements(null): Return the URL with the given parameters without\n *   checking the requirements at all. When generating a URL you should either trust\n *   your params or you validated them beforehand because otherwise it would break your\n *   link anyway. So in production environment you should know that params always pass\n *   the requirements. Thus this option allows to disable the check on URL generation for\n *   performance reasons (saving a preg_match for each requirement every time a URL is\n *   generated).\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Tobias Schultze <http:\/\/tobion.de>\n *\/",14],["T_WHITESPACE","\n",37],["T_INTERFACE","interface",38],["T_WHITESPACE"," ",38],["T_STRING","ConfigurableRequirementsInterface",38],["T_WHITESPACE","\n",38],"{",["T_WHITESPACE","\n    ",39],["T_DOC_COMMENT","\/**\n     * Enables or disables the exception on incorrect parameters.\n     * Passing null will deactivate the requirements check completely.\n     *\n     * @param bool|null $enabled\n     *\/",40],["T_WHITESPACE","\n    ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","setStrictRequirements",46],"(",["T_VARIABLE","$enabled",46],")",";",["T_WHITESPACE","\n\n    ",46],["T_DOC_COMMENT","\/**\n     * Returns whether to throw an exception on incorrect parameters.\n     * Null means the requirements check is deactivated completely.\n     *\n     * @return bool|null\n     *\/",48],["T_WHITESPACE","\n    ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","isStrictRequirements",54],"(",")",";",["T_WHITESPACE","\n",54],"}",["T_WHITESPACE","\n",55]]