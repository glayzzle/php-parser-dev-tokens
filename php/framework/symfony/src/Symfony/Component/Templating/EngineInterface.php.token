[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Templating",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * EngineInterface is the interface each engine must implement.\n *\n * All methods rely on a template name. A template name is a\n * \"logical\" name for the template, and as such it does not refer to\n * a path on the filesystem (in fact, the template can be stored\n * anywhere, like in a database).\n *\n * The methods should accept any name. If the name is not an instance of\n * TemplateReferenceInterface, a TemplateNameParserInterface should be used to\n * convert the name to a TemplateReferenceInterface instance.\n *\n * Each template loader uses the logical template name to look for\n * the template.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\/",14],["T_WHITESPACE","\n",30],["T_INTERFACE","interface",31],["T_WHITESPACE"," ",31],["T_STRING","EngineInterface",31],["T_WHITESPACE","\n",31],"{",["T_WHITESPACE","\n    ",32],["T_DOC_COMMENT","\/**\n     * Renders a template.\n     *\n     * @param string|TemplateReferenceInterface $name       A template name or a TemplateReferenceInterface instance\n     * @param array                             $parameters An array of parameters to pass to the template\n     *\n     * @return string The evaluated template as a string\n     *\n     * @throws \\RuntimeException if the template cannot be rendered\n     *\/",33],["T_WHITESPACE","\n    ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","render",43],"(",["T_VARIABLE","$name",43],",",["T_WHITESPACE"," ",43],["T_ARRAY","array",43],["T_WHITESPACE"," ",43],["T_VARIABLE","$parameters",43],["T_WHITESPACE"," ",43],"=",["T_WHITESPACE"," ",43],["T_ARRAY","array",43],"(",")",")",";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * Returns true if the template exists.\n     *\n     * @param string|TemplateReferenceInterface $name A template name or a TemplateReferenceInterface instance\n     *\n     * @return bool true if the template exists, false otherwise\n     *\n     * @throws \\RuntimeException if the engine cannot handle the template name\n     *\/",45],["T_WHITESPACE","\n    ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","exists",54],"(",["T_VARIABLE","$name",54],")",";",["T_WHITESPACE","\n\n    ",54],["T_DOC_COMMENT","\/**\n     * Returns true if this class is able to render the given template.\n     *\n     * @param string|TemplateReferenceInterface $name A template name or a TemplateReferenceInterface instance\n     *\n     * @return bool true if this class supports the given template, false otherwise\n     *\/",56],["T_WHITESPACE","\n    ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","supports",63],"(",["T_VARIABLE","$name",63],")",";",["T_WHITESPACE","\n",63],"}",["T_WHITESPACE","\n",64]]