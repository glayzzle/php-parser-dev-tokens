[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Security",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Guard",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","HttpFoundation",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Request",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","HttpFoundation",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Response",15],";",["T_WHITESPACE","\n",15],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","Symfony",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Component",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Security",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Core",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Authentication",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Token",16],["T_NS_SEPARATOR","\\",16],["T_STRING","TokenInterface",16],";",["T_WHITESPACE","\n",16],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Symfony",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Component",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Security",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Core",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Exception",17],["T_NS_SEPARATOR","\\",17],["T_STRING","AuthenticationException",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Symfony",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Component",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Security",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Core",18],["T_NS_SEPARATOR","\\",18],["T_STRING","User",18],["T_NS_SEPARATOR","\\",18],["T_STRING","UserInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Symfony",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Component",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Security",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Core",19],["T_NS_SEPARATOR","\\",19],["T_STRING","User",19],["T_NS_SEPARATOR","\\",19],["T_STRING","UserProviderInterface",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Symfony",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Component",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Security",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Guard",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Token",20],["T_NS_SEPARATOR","\\",20],["T_STRING","GuardTokenInterface",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Symfony",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Component",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Security",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Http",21],["T_NS_SEPARATOR","\\",21],["T_STRING","EntryPoint",21],["T_NS_SEPARATOR","\\",21],["T_STRING","AuthenticationEntryPointInterface",21],";",["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * The interface for all \"guard\" authenticators.\n *\n * The methods on this interface are called throughout the guard authentication\n * process to give you the power to control most parts of the process from\n * one location.\n *\n * @author Ryan Weaver <ryan@knpuniversity.com>\n *\/",23],["T_WHITESPACE","\n",31],["T_INTERFACE","interface",32],["T_WHITESPACE"," ",32],["T_STRING","GuardAuthenticatorInterface",32],["T_WHITESPACE"," ",32],["T_EXTENDS","extends",32],["T_WHITESPACE"," ",32],["T_STRING","AuthenticationEntryPointInterface",32],["T_WHITESPACE","\n",32],"{",["T_WHITESPACE","\n    ",33],["T_DOC_COMMENT","\/**\n     * Get the authentication credentials from the request and return them\n     * as any type (e.g. an associate array). If you return null, authentication\n     * will be skipped.\n     *\n     * Whatever value you return here will be passed to getUser() and checkCredentials()\n     *\n     * For example, for a form login, you might:\n     *\n     *      if ($request->request->has('_username')) {\n     *          return array(\n     *              'username' => $request->request->get('_username'),\n     *              'password' => $request->request->get('_password'),\n     *          );\n     *      } else {\n     *          return;\n     *      }\n     *\n     * Or for an API token that's on a header, you might use:\n     *\n     *      return array('api_key' => $request->headers->get('X-API-TOKEN'));\n     *\n     * @param Request $request\n     *\n     * @return mixed|null\n     *\/",34],["T_WHITESPACE","\n    ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","getCredentials",60],"(",["T_STRING","Request",60],["T_WHITESPACE"," ",60],["T_VARIABLE","$request",60],")",";",["T_WHITESPACE","\n\n    ",60],["T_DOC_COMMENT","\/**\n     * Return a UserInterface object based on the credentials.\n     *\n     * The *credentials* are the return value from getCredentials()\n     *\n     * You may throw an AuthenticationException if you wish. If you return\n     * null, then a UsernameNotFoundException is thrown for you.\n     *\n     * @param mixed                 $credentials\n     * @param UserProviderInterface $userProvider\n     *\n     * @throws AuthenticationException\n     *\n     * @return UserInterface|null\n     *\/",62],["T_WHITESPACE","\n    ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","getUser",77],"(",["T_VARIABLE","$credentials",77],",",["T_WHITESPACE"," ",77],["T_STRING","UserProviderInterface",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$userProvider",77],")",";",["T_WHITESPACE","\n\n    ",77],["T_DOC_COMMENT","\/**\n     * Returns true if the credentials are valid.\n     *\n     * If any value other than true is returned, authentication will\n     * fail. You may also throw an AuthenticationException if you wish\n     * to cause authentication to fail.\n     *\n     * The *credentials* are the return value from getCredentials()\n     *\n     * @param mixed         $credentials\n     * @param UserInterface $user\n     *\n     * @return bool\n     *\n     * @throws AuthenticationException\n     *\/",79],["T_WHITESPACE","\n    ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","checkCredentials",95],"(",["T_VARIABLE","$credentials",95],",",["T_WHITESPACE"," ",95],["T_STRING","UserInterface",95],["T_WHITESPACE"," ",95],["T_VARIABLE","$user",95],")",";",["T_WHITESPACE","\n\n    ",95],["T_DOC_COMMENT","\/**\n     * Create an authenticated token for the given user.\n     *\n     * If you don't care about which token class is used or don't really\n     * understand what a \"token\" is, you can skip this method by extending\n     * the AbstractGuardAuthenticator class from your authenticator.\n     *\n     * @see AbstractGuardAuthenticator\n     *\n     * @param UserInterface $user\n     * @param string        $providerKey The provider (i.e. firewall) key\n     *\n     * @return GuardTokenInterface\n     *\/",97],["T_WHITESPACE","\n    ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","createAuthenticatedToken",111],"(",["T_STRING","UserInterface",111],["T_WHITESPACE"," ",111],["T_VARIABLE","$user",111],",",["T_WHITESPACE"," ",111],["T_VARIABLE","$providerKey",111],")",";",["T_WHITESPACE","\n\n    ",111],["T_DOC_COMMENT","\/**\n     * Called when authentication executed, but failed (e.g. wrong username password).\n     *\n     * This should return the Response sent back to the user, like a\n     * RedirectResponse to the login page or a 403 response.\n     *\n     * If you return null, the request will continue, but the user will\n     * not be authenticated. This is probably not what you want to do.\n     *\n     * @param Request                 $request\n     * @param AuthenticationException $exception\n     *\n     * @return Response|null\n     *\/",113],["T_WHITESPACE","\n    ",126],["T_PUBLIC","public",127],["T_WHITESPACE"," ",127],["T_FUNCTION","function",127],["T_WHITESPACE"," ",127],["T_STRING","onAuthenticationFailure",127],"(",["T_STRING","Request",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$request",127],",",["T_WHITESPACE"," ",127],["T_STRING","AuthenticationException",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$exception",127],")",";",["T_WHITESPACE","\n\n    ",127],["T_DOC_COMMENT","\/**\n     * Called when authentication executed and was successful!\n     *\n     * This should return the Response sent back to the user, like a\n     * RedirectResponse to the last page they visited.\n     *\n     * If you return null, the current request will continue, and the user\n     * will be authenticated. This makes sense, for example, with an API.\n     *\n     * @param Request        $request\n     * @param TokenInterface $token\n     * @param string         $providerKey The provider (i.e. firewall) key\n     *\n     * @return Response|null\n     *\/",129],["T_WHITESPACE","\n    ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","onAuthenticationSuccess",144],"(",["T_STRING","Request",144],["T_WHITESPACE"," ",144],["T_VARIABLE","$request",144],",",["T_WHITESPACE"," ",144],["T_STRING","TokenInterface",144],["T_WHITESPACE"," ",144],["T_VARIABLE","$token",144],",",["T_WHITESPACE"," ",144],["T_VARIABLE","$providerKey",144],")",";",["T_WHITESPACE","\n\n    ",144],["T_DOC_COMMENT","\/**\n     * Does this method support remember me cookies?\n     *\n     * Remember me cookie will be set if *all* of the following are met:\n     *  A) This method returns true\n     *  B) The remember_me key under your firewall is configured\n     *  C) The \"remember me\" functionality is activated. This is usually\n     *      done by having a _remember_me checkbox in your form, but\n     *      can be configured by the \"always_remember_me\" and \"remember_me_parameter\"\n     *      parameters under the \"remember_me\" firewall key\n     *\n     * @return bool\n     *\/",146],["T_WHITESPACE","\n    ",158],["T_PUBLIC","public",159],["T_WHITESPACE"," ",159],["T_FUNCTION","function",159],["T_WHITESPACE"," ",159],["T_STRING","supportsRememberMe",159],"(",")",";",["T_WHITESPACE","\n",159],"}",["T_WHITESPACE","\n",160]]