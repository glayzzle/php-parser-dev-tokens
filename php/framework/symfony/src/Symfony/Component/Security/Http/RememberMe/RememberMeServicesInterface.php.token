[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Security",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Http",12],["T_NS_SEPARATOR","\\",12],["T_STRING","RememberMe",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Security",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Core",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Authentication",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Token",14],["T_NS_SEPARATOR","\\",14],["T_STRING","TokenInterface",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","HttpFoundation",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Response",15],";",["T_WHITESPACE","\n",15],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","Symfony",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Component",16],["T_NS_SEPARATOR","\\",16],["T_STRING","HttpFoundation",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Request",16],";",["T_WHITESPACE","\n\n",16],["T_DOC_COMMENT","\/**\n * Interface that needs to be implemented by classes which provide remember-me\n * capabilities.\n *\n * We provide two implementations out-of-the-box:\n * - TokenBasedRememberMeServices (does not require a TokenProvider)\n * - PersistentTokenBasedRememberMeServices (requires a TokenProvider)\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n *\/",18],["T_WHITESPACE","\n",27],["T_INTERFACE","interface",28],["T_WHITESPACE"," ",28],["T_STRING","RememberMeServicesInterface",28],["T_WHITESPACE","\n",28],"{",["T_WHITESPACE","\n    ",29],["T_DOC_COMMENT","\/**\n     * This attribute name can be used by the implementation if it needs to set\n     * a cookie on the Request when there is no actual Response, yet.\n     *\n     * @var string\n     *\/",30],["T_WHITESPACE","\n    ",35],["T_CONST","const",36],["T_WHITESPACE"," ",36],["T_STRING","COOKIE_ATTR_NAME",36],["T_WHITESPACE"," ",36],"=",["T_WHITESPACE"," ",36],["T_CONSTANT_ENCAPSED_STRING","'_security_remember_me_cookie'",36],";",["T_WHITESPACE","\n\n    ",36],["T_DOC_COMMENT","\/**\n     * This method will be called whenever the TokenStorage does not contain\n     * a TokenInterface object and the framework wishes to provide an implementation\n     * with an opportunity to authenticate the request using remember-me capabilities.\n     *\n     * No attempt whatsoever is made to determine whether the browser has requested\n     * remember-me services or presented a valid cookie. Any and all such determinations\n     * are left to the implementation of this method.\n     *\n     * If a browser has presented an unauthorised cookie for whatever reason,\n     * make sure to throw an AuthenticationException as this will consequentially\n     * result in a call to loginFail() and therefore an invalidation of the cookie.\n     *\n     * @param Request $request\n     *\n     * @return TokenInterface\n     *\/",38],["T_WHITESPACE","\n    ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","autoLogin",55],"(",["T_STRING","Request",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$request",55],")",";",["T_WHITESPACE","\n\n    ",55],["T_DOC_COMMENT","\/**\n     * Called whenever an interactive authentication attempt was made, but the\n     * credentials supplied by the user were missing or otherwise invalid.\n     *\n     * This method needs to take care of invalidating the cookie.\n     *\n     * @param Request $request\n     *\/",57],["T_WHITESPACE","\n    ",64],["T_PUBLIC","public",65],["T_WHITESPACE"," ",65],["T_FUNCTION","function",65],["T_WHITESPACE"," ",65],["T_STRING","loginFail",65],"(",["T_STRING","Request",65],["T_WHITESPACE"," ",65],["T_VARIABLE","$request",65],")",";",["T_WHITESPACE","\n\n    ",65],["T_DOC_COMMENT","\/**\n     * Called whenever an interactive authentication attempt is successful\n     * (e.g. a form login).\n     *\n     * An implementation may always set a remember-me cookie in the Response,\n     * although this is not recommended.\n     *\n     * Instead, implementations should typically look for a request parameter\n     * (such as a HTTP POST parameter) that indicates the browser has explicitly\n     * requested for the authentication to be remembered.\n     *\n     * @param Request        $request\n     * @param Response       $response\n     * @param TokenInterface $token\n     *\/",67],["T_WHITESPACE","\n    ",81],["T_PUBLIC","public",82],["T_WHITESPACE"," ",82],["T_FUNCTION","function",82],["T_WHITESPACE"," ",82],["T_STRING","loginSuccess",82],"(",["T_STRING","Request",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$request",82],",",["T_WHITESPACE"," ",82],["T_STRING","Response",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$response",82],",",["T_WHITESPACE"," ",82],["T_STRING","TokenInterface",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$token",82],")",";",["T_WHITESPACE","\n",82],"}",["T_WHITESPACE","\n",83]]