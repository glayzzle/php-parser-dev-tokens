[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Console",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Input",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Console",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Exception",14],["T_NS_SEPARATOR","\\",14],["T_STRING","InvalidArgumentException",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Console",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Exception",15],["T_NS_SEPARATOR","\\",15],["T_STRING","RuntimeException",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * InputInterface is the interface implemented by all input classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\/",17],["T_WHITESPACE","\n",21],["T_INTERFACE","interface",22],["T_WHITESPACE"," ",22],["T_STRING","InputInterface",22],["T_WHITESPACE","\n",22],"{",["T_WHITESPACE","\n    ",23],["T_DOC_COMMENT","\/**\n     * Returns the first argument from the raw parameters (not parsed).\n     *\n     * @return string The value of the first argument or null otherwise\n     *\/",24],["T_WHITESPACE","\n    ",28],["T_PUBLIC","public",29],["T_WHITESPACE"," ",29],["T_FUNCTION","function",29],["T_WHITESPACE"," ",29],["T_STRING","getFirstArgument",29],"(",")",";",["T_WHITESPACE","\n\n    ",29],["T_DOC_COMMENT","\/**\n     * Returns true if the raw parameters (not parsed) contain a value.\n     *\n     * This method is to be used to introspect the input parameters\n     * before they have been validated. It must be used carefully.\n     *\n     * @param string|array $values     The values to look for in the raw parameters (can be an array)\n     * @param bool         $onlyParams Only check real parameters, skip those following an end of options (--) signal\n     *\n     * @return bool true if the value is contained in the raw parameters\n     *\/",31],["T_WHITESPACE","\n    ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","hasParameterOption",42],"(",["T_VARIABLE","$values",42],",",["T_WHITESPACE"," ",42],["T_VARIABLE","$onlyParams",42],["T_WHITESPACE"," ",42],"=",["T_WHITESPACE"," ",42],["T_STRING","false",42],")",";",["T_WHITESPACE","\n\n    ",42],["T_DOC_COMMENT","\/**\n     * Returns the value of a raw option (not parsed).\n     *\n     * This method is to be used to introspect the input parameters\n     * before they have been validated. It must be used carefully.\n     *\n     * @param string|array $values     The value(s) to look for in the raw parameters (can be an array)\n     * @param mixed        $default    The default value to return if no result is found\n     * @param bool         $onlyParams Only check real parameters, skip those following an end of options (--) signal\n     *\n     * @return mixed The option value\n     *\/",44],["T_WHITESPACE","\n    ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","getParameterOption",56],"(",["T_VARIABLE","$values",56],",",["T_WHITESPACE"," ",56],["T_VARIABLE","$default",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_STRING","false",56],",",["T_WHITESPACE"," ",56],["T_VARIABLE","$onlyParams",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_STRING","false",56],")",";",["T_WHITESPACE","\n\n    ",56],["T_DOC_COMMENT","\/**\n     * Binds the current Input instance with the given arguments and options.\n     *\n     * @param InputDefinition $definition A InputDefinition instance\n     *\/",58],["T_WHITESPACE","\n    ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","bind",63],"(",["T_STRING","InputDefinition",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$definition",63],")",";",["T_WHITESPACE","\n\n    ",63],["T_DOC_COMMENT","\/**\n     * Validates the input.\n     *\n     * @throws RuntimeException When not enough arguments are given\n     *\/",65],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","validate",70],"(",")",";",["T_WHITESPACE","\n\n    ",70],["T_DOC_COMMENT","\/**\n     * Returns all the given arguments merged with the default values.\n     *\n     * @return array\n     *\/",72],["T_WHITESPACE","\n    ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","getArguments",77],"(",")",";",["T_WHITESPACE","\n\n    ",77],["T_DOC_COMMENT","\/**\n     * Returns the argument value for a given argument name.\n     *\n     * @param string $name The argument name\n     *\n     * @return mixed The argument value\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     *\/",79],["T_WHITESPACE","\n    ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","getArgument",88],"(",["T_VARIABLE","$name",88],")",";",["T_WHITESPACE","\n\n    ",88],["T_DOC_COMMENT","\/**\n     * Sets an argument value by name.\n     *\n     * @param string $name  The argument name\n     * @param string $value The argument value\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     *\/",90],["T_WHITESPACE","\n    ",97],["T_PUBLIC","public",98],["T_WHITESPACE"," ",98],["T_FUNCTION","function",98],["T_WHITESPACE"," ",98],["T_STRING","setArgument",98],"(",["T_VARIABLE","$name",98],",",["T_WHITESPACE"," ",98],["T_VARIABLE","$value",98],")",";",["T_WHITESPACE","\n\n    ",98],["T_DOC_COMMENT","\/**\n     * Returns true if an InputArgument object exists by name or position.\n     *\n     * @param string|int $name The InputArgument name or position\n     *\n     * @return bool true if the InputArgument object exists, false otherwise\n     *\/",100],["T_WHITESPACE","\n    ",106],["T_PUBLIC","public",107],["T_WHITESPACE"," ",107],["T_FUNCTION","function",107],["T_WHITESPACE"," ",107],["T_STRING","hasArgument",107],"(",["T_VARIABLE","$name",107],")",";",["T_WHITESPACE","\n\n    ",107],["T_DOC_COMMENT","\/**\n     * Returns all the given options merged with the default values.\n     *\n     * @return array\n     *\/",109],["T_WHITESPACE","\n    ",113],["T_PUBLIC","public",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","getOptions",114],"(",")",";",["T_WHITESPACE","\n\n    ",114],["T_DOC_COMMENT","\/**\n     * Returns the option value for a given option name.\n     *\n     * @param string $name The option name\n     *\n     * @return mixed The option value\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     *\/",116],["T_WHITESPACE","\n    ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","getOption",125],"(",["T_VARIABLE","$name",125],")",";",["T_WHITESPACE","\n\n    ",125],["T_DOC_COMMENT","\/**\n     * Sets an option value by name.\n     *\n     * @param string      $name  The option name\n     * @param string|bool $value The option value\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     *\/",127],["T_WHITESPACE","\n    ",134],["T_PUBLIC","public",135],["T_WHITESPACE"," ",135],["T_FUNCTION","function",135],["T_WHITESPACE"," ",135],["T_STRING","setOption",135],"(",["T_VARIABLE","$name",135],",",["T_WHITESPACE"," ",135],["T_VARIABLE","$value",135],")",";",["T_WHITESPACE","\n\n    ",135],["T_DOC_COMMENT","\/**\n     * Returns true if an InputOption object exists by name.\n     *\n     * @param string $name The InputOption name\n     *\n     * @return bool true if the InputOption object exists, false otherwise\n     *\/",137],["T_WHITESPACE","\n    ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","hasOption",144],"(",["T_VARIABLE","$name",144],")",";",["T_WHITESPACE","\n\n    ",144],["T_DOC_COMMENT","\/**\n     * Is this input means interactive?\n     *\n     * @return bool\n     *\/",146],["T_WHITESPACE","\n    ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","isInteractive",151],"(",")",";",["T_WHITESPACE","\n\n    ",151],["T_DOC_COMMENT","\/**\n     * Sets the input interactivity.\n     *\n     * @param bool $interactive If the input should be interactive\n     *\/",153],["T_WHITESPACE","\n    ",157],["T_PUBLIC","public",158],["T_WHITESPACE"," ",158],["T_FUNCTION","function",158],["T_WHITESPACE"," ",158],["T_STRING","setInteractive",158],"(",["T_VARIABLE","$interactive",158],")",";",["T_WHITESPACE","\n",158],"}",["T_WHITESPACE","\n",159]]