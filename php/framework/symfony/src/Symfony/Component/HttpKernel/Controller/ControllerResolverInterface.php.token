[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","HttpKernel",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Controller",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","HttpFoundation",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Request",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * A ControllerResolverInterface implementation knows how to determine the\n * controller to execute based on a Request object.\n *\n * It can also determine the arguments to pass to the Controller.\n *\n * A Controller can be any valid PHP callable.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\/",16],["T_WHITESPACE","\n",25],["T_INTERFACE","interface",26],["T_WHITESPACE"," ",26],["T_STRING","ControllerResolverInterface",26],["T_WHITESPACE","\n",26],"{",["T_WHITESPACE","\n    ",27],["T_DOC_COMMENT","\/**\n     * Returns the Controller instance associated with a Request.\n     *\n     * As several resolvers can exist for a single application, a resolver must\n     * return false when it is not able to determine the controller.\n     *\n     * The resolver must only throw an exception when it should be able to load\n     * controller but cannot because of some errors made by the developer.\n     *\n     * @param Request $request A Request instance\n     *\n     * @return callable|false A PHP callable representing the Controller,\n     *                        or false if this resolver is not able to determine the controller\n     *\n     * @throws \\LogicException If the controller can't be found\n     *\/",28],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","getController",44],"(",["T_STRING","Request",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$request",44],")",";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * Returns the arguments to pass to the controller.\n     *\n     * @param Request  $request    A Request instance\n     * @param callable $controller A PHP callable\n     *\n     * @return array An array of arguments to pass to the controller\n     *\n     * @throws \\RuntimeException When value for argument given is not provided\n     *\n     * @deprecated This method is deprecated as of 3.1 and will be removed in 4.0. Please use the {@see ArgumentResolverInterface} instead.\n     *\/",46],["T_WHITESPACE","\n    ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","getArguments",58],"(",["T_STRING","Request",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$request",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$controller",58],")",";",["T_WHITESPACE","\n",58],"}",["T_WHITESPACE","\n",59]]