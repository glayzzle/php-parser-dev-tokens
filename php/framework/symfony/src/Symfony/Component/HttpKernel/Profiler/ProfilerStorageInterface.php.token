[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","HttpKernel",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Profiler",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * ProfilerStorageInterface.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\/",14],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","ProfilerStorageInterface",19],["T_WHITESPACE","\n",19],"{",["T_WHITESPACE","\n    ",20],["T_DOC_COMMENT","\/**\n     * Finds profiler tokens for the given criteria.\n     *\n     * @param string   $ip     The IP\n     * @param string   $url    The URL\n     * @param string   $limit  The maximum number of tokens to return\n     * @param string   $method The request method\n     * @param int|null $start  The start date to search from\n     * @param int|null $end    The end date to search to\n     *\n     * @return array An array of tokens\n     *\/",21],["T_WHITESPACE","\n    ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","find",33],"(",["T_VARIABLE","$ip",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$url",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$limit",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$method",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$start",33],["T_WHITESPACE"," ",33],"=",["T_WHITESPACE"," ",33],["T_STRING","null",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$end",33],["T_WHITESPACE"," ",33],"=",["T_WHITESPACE"," ",33],["T_STRING","null",33],")",";",["T_WHITESPACE","\n\n    ",33],["T_DOC_COMMENT","\/**\n     * Reads data associated with the given token.\n     *\n     * The method returns false if the token does not exist in the storage.\n     *\n     * @param string $token A token\n     *\n     * @return Profile The profile associated with token\n     *\/",35],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","read",44],"(",["T_VARIABLE","$token",44],")",";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * Saves a Profile.\n     *\n     * @param Profile $profile A Profile instance\n     *\n     * @return bool Write operation successful\n     *\/",46],["T_WHITESPACE","\n    ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","write",53],"(",["T_STRING","Profile",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$profile",53],")",";",["T_WHITESPACE","\n\n    ",53],["T_DOC_COMMENT","\/**\n     * Purges all data from the database.\n     *\/",55],["T_WHITESPACE","\n    ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","purge",58],"(",")",";",["T_WHITESPACE","\n",58],"}",["T_WHITESPACE","\n",59]]