[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Context",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Validator",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Constraint",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Validator",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Mapping",15],";",["T_WHITESPACE","\n",15],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","Symfony",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Component",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Validator",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Mapping",16],["T_NS_SEPARATOR","\\",16],["T_STRING","MetadataInterface",16],";",["T_WHITESPACE","\n",16],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Symfony",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Component",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Validator",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Validator",17],["T_NS_SEPARATOR","\\",17],["T_STRING","ValidatorInterface",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Symfony",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Component",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Validator",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Violation",18],["T_NS_SEPARATOR","\\",18],["T_STRING","ConstraintViolationBuilderInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Symfony",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Component",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Validator",19],["T_NS_SEPARATOR","\\",19],["T_STRING","ConstraintViolationListInterface",19],";",["T_WHITESPACE","\n\n",19],["T_DOC_COMMENT","\/**\n * The context of a validation run.\n *\n * The context collects all violations generated during the validation. By\n * default, validators execute all validations in a new context:\n *\n *     $violations = $validator->validate($object);\n *\n * When you make another call to the validator, while the validation is in\n * progress, the violations will be isolated from each other:\n *\n *     public function validate($value, Constraint $constraint)\n *     {\n *         $validator = $this->context->getValidator();\n *\n *         \/\/ The violations are not added to $this->context\n *         $violations = $validator->validate($value);\n *     }\n *\n * However, if you want to add the violations to the current context, use the\n * {@link ValidatorInterface::inContext()} method:\n *\n *     public function validate($value, Constraint $constraint)\n *     {\n *         $validator = $this->context->getValidator();\n *\n *         \/\/ The violations are added to $this->context\n *         $validator\n *             ->inContext($this->context)\n *             ->validate($value)\n *         ;\n *     }\n *\n * Additionally, the context provides information about the current state of\n * the validator, such as the currently validated class, the name of the\n * currently validated property and more. These values change over time, so you\n * cannot store a context and expect that the methods still return the same\n * results later on.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",21],["T_WHITESPACE","\n",61],["T_INTERFACE","interface",62],["T_WHITESPACE"," ",62],["T_STRING","ExecutionContextInterface",62],["T_WHITESPACE","\n",62],"{",["T_WHITESPACE","\n    ",63],["T_DOC_COMMENT","\/**\n     * Adds a violation at the current node of the validation graph.\n     *\n     * @param string $message The error message\n     * @param array  $params  The parameters substituted in the error message\n     *\/",64],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","addViolation",70],"(",["T_VARIABLE","$message",70],",",["T_WHITESPACE"," ",70],["T_ARRAY","array",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$params",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_ARRAY","array",70],"(",")",")",";",["T_WHITESPACE","\n\n    ",70],["T_DOC_COMMENT","\/**\n     * Returns a builder for adding a violation with extended information.\n     *\n     * Call {@link ConstraintViolationBuilderInterface::addViolation()} to\n     * add the violation when you're done with the configuration:\n     *\n     *     $context->buildViolation('Please enter a number between %min% and %max%.')\n     *         ->setParameter('%min%', 3)\n     *         ->setParameter('%max%', 10)\n     *         ->setTranslationDomain('number_validation')\n     *         ->addViolation();\n     *\n     * @param string $message    The error message\n     * @param array  $parameters The parameters substituted in the error message\n     *\n     * @return ConstraintViolationBuilderInterface The violation builder\n     *\/",72],["T_WHITESPACE","\n    ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","buildViolation",89],"(",["T_VARIABLE","$message",89],",",["T_WHITESPACE"," ",89],["T_ARRAY","array",89],["T_WHITESPACE"," ",89],["T_VARIABLE","$parameters",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_ARRAY","array",89],"(",")",")",";",["T_WHITESPACE","\n\n    ",89],["T_DOC_COMMENT","\/**\n     * Returns the validator.\n     *\n     * Useful if you want to validate additional constraints:\n     *\n     *     public function validate($value, Constraint $constraint)\n     *     {\n     *         $validator = $this->context->getValidator();\n     *\n     *         $violations = $validator->validateValue($value, new Length(array('min' => 3)));\n     *\n     *         if (count($violations) > 0) {\n     *             \/\/ ...\n     *         }\n     *     }\n     *\n     * @return ValidatorInterface\n     *\/",91],["T_WHITESPACE","\n    ",108],["T_PUBLIC","public",109],["T_WHITESPACE"," ",109],["T_FUNCTION","function",109],["T_WHITESPACE"," ",109],["T_STRING","getValidator",109],"(",")",";",["T_WHITESPACE","\n\n    ",109],["T_DOC_COMMENT","\/**\n     * Returns the currently validated object.\n     *\n     * If the validator is currently validating a class constraint, the\n     * object of that class is returned. If it is a validating a property or\n     * getter constraint, the object that the property\/getter belongs to is\n     * returned.\n     *\n     * In other cases, null is returned.\n     *\n     * @return object|null The currently validated object or null\n     *\/",111],["T_WHITESPACE","\n    ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","getObject",123],"(",")",";",["T_WHITESPACE","\n\n    ",123],["T_DOC_COMMENT","\/**\n     * Sets the currently validated value.\n     *\n     * @param mixed                  $value        The validated value\n     * @param object|null            $object       The currently validated object\n     * @param MetadataInterface|null $metadata     The validation metadata\n     * @param string                 $propertyPath The property path to the current value\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",125],["T_WHITESPACE","\n    ",135],["T_PUBLIC","public",136],["T_WHITESPACE"," ",136],["T_FUNCTION","function",136],["T_WHITESPACE"," ",136],["T_STRING","setNode",136],"(",["T_VARIABLE","$value",136],",",["T_WHITESPACE"," ",136],["T_VARIABLE","$object",136],",",["T_WHITESPACE"," ",136],["T_STRING","MetadataInterface",136],["T_WHITESPACE"," ",136],["T_VARIABLE","$metadata",136],["T_WHITESPACE"," ",136],"=",["T_WHITESPACE"," ",136],["T_STRING","null",136],",",["T_WHITESPACE"," ",136],["T_VARIABLE","$propertyPath",136],")",";",["T_WHITESPACE","\n\n    ",136],["T_DOC_COMMENT","\/**\n     * Sets the currently validated group.\n     *\n     * @param string|null $group The validated group\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",138],["T_WHITESPACE","\n    ",145],["T_PUBLIC","public",146],["T_WHITESPACE"," ",146],["T_FUNCTION","function",146],["T_WHITESPACE"," ",146],["T_STRING","setGroup",146],"(",["T_VARIABLE","$group",146],")",";",["T_WHITESPACE","\n\n    ",146],["T_DOC_COMMENT","\/**\n     * Sets the currently validated constraint.\n     *\n     * @param Constraint $constraint The validated constraint\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",148],["T_WHITESPACE","\n    ",155],["T_PUBLIC","public",156],["T_WHITESPACE"," ",156],["T_FUNCTION","function",156],["T_WHITESPACE"," ",156],["T_STRING","setConstraint",156],"(",["T_STRING","Constraint",156],["T_WHITESPACE"," ",156],["T_VARIABLE","$constraint",156],")",";",["T_WHITESPACE","\n\n    ",156],["T_DOC_COMMENT","\/**\n     * Marks an object as validated in a specific validation group.\n     *\n     * @param string $cacheKey  The hash of the object\n     * @param string $groupHash The group's name or hash, if it is group\n     *                          sequence\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",158],["T_WHITESPACE","\n    ",167],["T_PUBLIC","public",168],["T_WHITESPACE"," ",168],["T_FUNCTION","function",168],["T_WHITESPACE"," ",168],["T_STRING","markGroupAsValidated",168],"(",["T_VARIABLE","$cacheKey",168],",",["T_WHITESPACE"," ",168],["T_VARIABLE","$groupHash",168],")",";",["T_WHITESPACE","\n\n    ",168],["T_DOC_COMMENT","\/**\n     * Returns whether an object was validated in a specific validation group.\n     *\n     * @param string $cacheKey  The hash of the object\n     * @param string $groupHash The group's name or hash, if it is group\n     *                          sequence\n     *\n     * @return bool Whether the object was already validated for that\n     *              group\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",170],["T_WHITESPACE","\n    ",182],["T_PUBLIC","public",183],["T_WHITESPACE"," ",183],["T_FUNCTION","function",183],["T_WHITESPACE"," ",183],["T_STRING","isGroupValidated",183],"(",["T_VARIABLE","$cacheKey",183],",",["T_WHITESPACE"," ",183],["T_VARIABLE","$groupHash",183],")",";",["T_WHITESPACE","\n\n    ",183],["T_DOC_COMMENT","\/**\n     * Marks a constraint as validated for an object.\n     *\n     * @param string $cacheKey       The hash of the object\n     * @param string $constraintHash The hash of the constraint\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",185],["T_WHITESPACE","\n    ",193],["T_PUBLIC","public",194],["T_WHITESPACE"," ",194],["T_FUNCTION","function",194],["T_WHITESPACE"," ",194],["T_STRING","markConstraintAsValidated",194],"(",["T_VARIABLE","$cacheKey",194],",",["T_WHITESPACE"," ",194],["T_VARIABLE","$constraintHash",194],")",";",["T_WHITESPACE","\n\n    ",194],["T_DOC_COMMENT","\/**\n     * Returns whether a constraint was validated for an object.\n     *\n     * @param string $cacheKey       The hash of the object\n     * @param string $constraintHash The hash of the constraint\n     *\n     * @return bool Whether the constraint was already validated\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\/",196],["T_WHITESPACE","\n    ",206],["T_PUBLIC","public",207],["T_WHITESPACE"," ",207],["T_FUNCTION","function",207],["T_WHITESPACE"," ",207],["T_STRING","isConstraintValidated",207],"(",["T_VARIABLE","$cacheKey",207],",",["T_WHITESPACE"," ",207],["T_VARIABLE","$constraintHash",207],")",";",["T_WHITESPACE","\n\n    ",207],["T_DOC_COMMENT","\/**\n     * Marks that an object was initialized.\n     *\n     * @param string $cacheKey The hash of the object\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\n     * @see ObjectInitializerInterface\n     *\/",209],["T_WHITESPACE","\n    ",218],["T_PUBLIC","public",219],["T_WHITESPACE"," ",219],["T_FUNCTION","function",219],["T_WHITESPACE"," ",219],["T_STRING","markObjectAsInitialized",219],"(",["T_VARIABLE","$cacheKey",219],")",";",["T_WHITESPACE","\n\n    ",219],["T_DOC_COMMENT","\/**\n     * Returns whether an object was initialized.\n     *\n     * @param string $cacheKey The hash of the object\n     *\n     * @return bool Whether the object was already initialized\n     *\n     * @internal Used by the validator engine. Should not be called by user\n     *           code.\n     *\n     * @see ObjectInitializerInterface\n     *\/",221],["T_WHITESPACE","\n    ",232],["T_PUBLIC","public",233],["T_WHITESPACE"," ",233],["T_FUNCTION","function",233],["T_WHITESPACE"," ",233],["T_STRING","isObjectInitialized",233],"(",["T_VARIABLE","$cacheKey",233],")",";",["T_WHITESPACE","\n\n    ",233],["T_DOC_COMMENT","\/**\n     * Returns the violations generated by the validator so far.\n     *\n     * @return ConstraintViolationListInterface The constraint violation list\n     *\/",235],["T_WHITESPACE","\n    ",239],["T_PUBLIC","public",240],["T_WHITESPACE"," ",240],["T_FUNCTION","function",240],["T_WHITESPACE"," ",240],["T_STRING","getViolations",240],"(",")",";",["T_WHITESPACE","\n\n    ",240],["T_DOC_COMMENT","\/**\n     * Returns the value at which validation was started in the object graph.\n     *\n     * The validator, when given an object, traverses the properties and\n     * related objects and their properties. The root of the validation is the\n     * object from which the traversal started.\n     *\n     * The current value is returned by {@link getValue}.\n     *\n     * @return mixed The root value of the validation\n     *\/",242],["T_WHITESPACE","\n    ",252],["T_PUBLIC","public",253],["T_WHITESPACE"," ",253],["T_FUNCTION","function",253],["T_WHITESPACE"," ",253],["T_STRING","getRoot",253],"(",")",";",["T_WHITESPACE","\n\n    ",253],["T_DOC_COMMENT","\/**\n     * Returns the value that the validator is currently validating.\n     *\n     * If you want to retrieve the object that was originally passed to the\n     * validator, use {@link getRoot}.\n     *\n     * @return mixed The currently validated value\n     *\/",255],["T_WHITESPACE","\n    ",262],["T_PUBLIC","public",263],["T_WHITESPACE"," ",263],["T_FUNCTION","function",263],["T_WHITESPACE"," ",263],["T_STRING","getValue",263],"(",")",";",["T_WHITESPACE","\n\n    ",263],["T_DOC_COMMENT","\/**\n     * Returns the metadata for the currently validated value.\n     *\n     * With the core implementation, this method returns a\n     * {@link Mapping\\ClassMetadataInterface} instance if the current value is an object,\n     * a {@link Mapping\\PropertyMetadata} instance if the current value is\n     * the value of a property and a {@link Mapping\\GetterMetadata} instance if\n     * the validated value is the result of a getter method.\n     *\n     * If the validated value is neither of these, for example if the validator\n     * has been called with a plain value and constraint, this method returns\n     * null.\n     *\n     * @return MetadataInterface|null The metadata of the currently validated\n     *                                value.\n     *\/",265],["T_WHITESPACE","\n    ",280],["T_PUBLIC","public",281],["T_WHITESPACE"," ",281],["T_FUNCTION","function",281],["T_WHITESPACE"," ",281],["T_STRING","getMetadata",281],"(",")",";",["T_WHITESPACE","\n\n    ",281],["T_DOC_COMMENT","\/**\n     * Returns the validation group that is currently being validated.\n     *\n     * @return string The current validation group\n     *\/",283],["T_WHITESPACE","\n    ",287],["T_PUBLIC","public",288],["T_WHITESPACE"," ",288],["T_FUNCTION","function",288],["T_WHITESPACE"," ",288],["T_STRING","getGroup",288],"(",")",";",["T_WHITESPACE","\n\n    ",288],["T_DOC_COMMENT","\/**\n     * Returns the class name of the current node.\n     *\n     * If the metadata of the current node does not implement\n     * {@link Mapping\\ClassMetadataInterface} or if no metadata is available for the\n     * current node, this method returns null.\n     *\n     * @return string|null The class name or null, if no class name could be found\n     *\/",290],["T_WHITESPACE","\n    ",298],["T_PUBLIC","public",299],["T_WHITESPACE"," ",299],["T_FUNCTION","function",299],["T_WHITESPACE"," ",299],["T_STRING","getClassName",299],"(",")",";",["T_WHITESPACE","\n\n    ",299],["T_DOC_COMMENT","\/**\n     * Returns the property name of the current node.\n     *\n     * If the metadata of the current node does not implement\n     * {@link PropertyMetadataInterface} or if no metadata is available for the\n     * current node, this method returns null.\n     *\n     * @return string|null The property name or null, if no property name could be found\n     *\/",301],["T_WHITESPACE","\n    ",309],["T_PUBLIC","public",310],["T_WHITESPACE"," ",310],["T_FUNCTION","function",310],["T_WHITESPACE"," ",310],["T_STRING","getPropertyName",310],"(",")",";",["T_WHITESPACE","\n\n    ",310],["T_DOC_COMMENT","\/**\n     * Returns the property path to the value that the validator is currently\n     * validating.\n     *\n     * For example, take the following object graph:\n     *\n     * <pre>\n     * (Person)---($address: Address)---($street: string)\n     * <\/pre>\n     *\n     * When the <tt>Person<\/tt> instance is passed to the validator, the\n     * property path is initially empty. When the <tt>$address<\/tt> property\n     * of that person is validated, the property path is \"address\". When\n     * the <tt>$street<\/tt> property of the related <tt>Address<\/tt> instance\n     * is validated, the property path is \"address.street\".\n     *\n     * Properties of objects are prefixed with a dot in the property path.\n     * Indices of arrays or objects implementing the {@link \\ArrayAccess}\n     * interface are enclosed in brackets. For example, if the property in\n     * the previous example is <tt>$addresses<\/tt> and contains an array\n     * of <tt>Address<\/tt> instance, the property path generated for the\n     * <tt>$street<\/tt> property of one of these addresses is for example\n     * \"addresses[0].street\".\n     *\n     * @param string $subPath Optional. The suffix appended to the current\n     *                        property path.\n     *\n     * @return string The current property path. The result may be an empty\n     *                string if the validator is currently validating the\n     *                root value of the validation graph.\n     *\/",312],["T_WHITESPACE","\n    ",342],["T_PUBLIC","public",343],["T_WHITESPACE"," ",343],["T_FUNCTION","function",343],["T_WHITESPACE"," ",343],["T_STRING","getPropertyPath",343],"(",["T_VARIABLE","$subPath",343],["T_WHITESPACE"," ",343],"=",["T_WHITESPACE"," ",343],["T_CONSTANT_ENCAPSED_STRING","''",343],")",";",["T_WHITESPACE","\n",343],"}",["T_WHITESPACE","\n",344]]