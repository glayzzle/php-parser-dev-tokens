[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Constraints",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * A sequence of validation groups.\n *\n * When validating a group sequence, each group will only be validated if all\n * of the previous groups in the sequence succeeded. For example:\n *\n *     $validator->validate($address, null, new GroupSequence(array('Basic', 'Strict')));\n *\n * In the first step, all constraints that belong to the group \"Basic\" will be\n * validated. If none of the constraints fail, the validator will then validate\n * the constraints in group \"Strict\". This is useful, for example, if \"Strict\"\n * contains expensive checks that require a lot of CPU or slow, external\n * services. You usually don't want to run expensive checks if any of the cheap\n * checks fail.\n *\n * When adding metadata to a class, you can override the \"Default\" group of\n * that class with a group sequence:\n *\n *     \/**\n *      * @GroupSequence({\"Address\", \"Strict\"})\n *      *\\\/\n *     class Address\n *     {\n *         \/\/ ...\n *     }\n *\n * Whenever you validate that object in the \"Default\" group, the group sequence\n * will be validated:\n *\n *     $validator->validate($address);\n *\n * If you want to execute the constraints of the \"Default\" group for a class\n * with an overridden default group, pass the class name as group name instead:\n *\n *     $validator->validate($address, null, \"Address\")\n *\n * @Annotation\n * @Target({\"CLASS\", \"ANNOTATION\"})\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",14],["T_WHITESPACE","\n",54],["T_CLASS","class",55],["T_WHITESPACE"," ",55],["T_STRING","GroupSequence",55],["T_WHITESPACE","\n",55],"{",["T_WHITESPACE","\n    ",56],["T_DOC_COMMENT","\/**\n     * The groups in the sequence.\n     *\n     * @var string[]|array[]|GroupSequence[]\n     *\/",57],["T_WHITESPACE","\n    ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_VARIABLE","$groups",62],";",["T_WHITESPACE","\n\n    ",62],["T_DOC_COMMENT","\/**\n     * The group in which cascaded objects are validated when validating\n     * this sequence.\n     *\n     * By default, cascaded objects are validated in each of the groups of\n     * the sequence.\n     *\n     * If a class has a group sequence attached, that sequence replaces the\n     * \"Default\" group. When validating that class in the \"Default\" group, the\n     * group sequence is used instead, but still the \"Default\" group should be\n     * cascaded to other objects.\n     *\n     * @var string|GroupSequence\n     *\/",64],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$cascadedGroup",78],";",["T_WHITESPACE","\n\n    ",78],["T_DOC_COMMENT","\/**\n     * Creates a new group sequence.\n     *\n     * @param string[] $groups The groups in the sequence\n     *\/",80],["T_WHITESPACE","\n    ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","__construct",85],"(",["T_ARRAY","array",85],["T_WHITESPACE"," ",85],["T_VARIABLE","$groups",85],")",["T_WHITESPACE","\n    ",85],"{",["T_WHITESPACE","\n        ",86],["T_COMMENT","\/\/ Support for Doctrine annotations\n",87],["T_WHITESPACE","        ",88],["T_VARIABLE","$this",88],["T_OBJECT_OPERATOR","->",88],["T_STRING","groups",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_ISSET","isset",88],"(",["T_VARIABLE","$groups",88],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",88],"]",")",["T_WHITESPACE"," ",88],"?",["T_WHITESPACE"," ",88],["T_VARIABLE","$groups",88],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",88],"]",["T_WHITESPACE"," ",88],":",["T_WHITESPACE"," ",88],["T_VARIABLE","$groups",88],";",["T_WHITESPACE","\n    ",88],"}",["T_WHITESPACE","\n",89],"}",["T_WHITESPACE","\n",90]]