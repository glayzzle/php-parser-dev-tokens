[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Mapping",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * Stores all metadata needed for validating objects of specific class.\n *\n * Most importantly, the metadata stores the constraints against which an object\n * and its properties should be validated.\n *\n * Additionally, the metadata stores whether the \"Default\" group is overridden\n * by a group sequence for that class and whether instances of that class\n * should be traversed or not.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\n * @see MetadataInterface\n * @see \\Symfony\\Component\\Validator\\Constraints\\GroupSequence\n * @see \\Symfony\\Component\\Validator\\GroupSequenceProviderInterface\n * @see TraversalStrategy\n *\/",14],["T_WHITESPACE","\n",30],["T_INTERFACE","interface",31],["T_WHITESPACE"," ",31],["T_STRING","ClassMetadataInterface",31],["T_WHITESPACE"," ",31],["T_EXTENDS","extends",31],["T_WHITESPACE"," ",31],["T_STRING","MetadataInterface",31],["T_WHITESPACE","\n",31],"{",["T_WHITESPACE","\n    ",32],["T_DOC_COMMENT","\/**\n     * Returns the names of all constrained properties.\n     *\n     * @return string[] A list of property names\n     *\/",33],["T_WHITESPACE","\n    ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","getConstrainedProperties",38],"(",")",";",["T_WHITESPACE","\n\n    ",38],["T_DOC_COMMENT","\/**\n     * Returns whether the \"Default\" group is overridden by a group sequence.\n     *\n     * If it is, you can access the group sequence with {@link getGroupSequence()}.\n     *\n     * @return bool Returns true if the \"Default\" group is overridden\n     *\n     * @see \\Symfony\\Component\\Validator\\Constraints\\GroupSequence\n     *\/",40],["T_WHITESPACE","\n    ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","hasGroupSequence",49],"(",")",";",["T_WHITESPACE","\n\n    ",49],["T_DOC_COMMENT","\/**\n     * Returns the group sequence that overrides the \"Default\" group for this\n     * class.\n     *\n     * @return \\Symfony\\Component\\Validator\\Constraints\\GroupSequence|null The group sequence or null\n     *\n     * @see \\Symfony\\Component\\Validator\\Constraints\\GroupSequence\n     *\/",51],["T_WHITESPACE","\n    ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","getGroupSequence",59],"(",")",";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * Returns whether the \"Default\" group is overridden by a dynamic group\n     * sequence obtained by the validated objects.\n     *\n     * If this method returns true, the class must implement\n     * {@link \\Symfony\\Component\\Validator\\GroupSequenceProviderInterface}.\n     * This interface will be used to obtain the group sequence when an object\n     * of this class is validated.\n     *\n     * @return bool Returns true if the \"Default\" group is overridden by\n     *              a dynamic group sequence\n     *\n     * @see \\Symfony\\Component\\Validator\\GroupSequenceProviderInterface\n     *\/",61],["T_WHITESPACE","\n    ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","isGroupSequenceProvider",75],"(",")",";",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Check if there's any metadata attached to the given named property.\n     *\n     * @param string $property The property name\n     *\n     * @return bool\n     *\/",77],["T_WHITESPACE","\n    ",83],["T_PUBLIC","public",84],["T_WHITESPACE"," ",84],["T_FUNCTION","function",84],["T_WHITESPACE"," ",84],["T_STRING","hasPropertyMetadata",84],"(",["T_VARIABLE","$property",84],")",";",["T_WHITESPACE","\n\n    ",84],["T_DOC_COMMENT","\/**\n     * Returns all metadata instances for the given named property.\n     *\n     * If your implementation does not support properties, simply throw an\n     * exception in this method (for example a <tt>BadMethodCallException<\/tt>).\n     *\n     * @param string $property The property name\n     *\n     * @return PropertyMetadataInterface[] A list of metadata instances. Empty if\n     *                                     no metadata exists for the property.\n     *\/",86],["T_WHITESPACE","\n    ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","getPropertyMetadata",97],"(",["T_VARIABLE","$property",97],")",";",["T_WHITESPACE","\n\n    ",97],["T_DOC_COMMENT","\/**\n     * Returns the name of the backing PHP class.\n     *\n     * @return string The name of the backing class\n     *\/",99],["T_WHITESPACE","\n    ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","getClassName",104],"(",")",";",["T_WHITESPACE","\n",104],"}",["T_WHITESPACE","\n",105]]