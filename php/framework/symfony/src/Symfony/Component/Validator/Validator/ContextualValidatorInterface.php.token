[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Validator",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Constraint",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Validator",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ConstraintViolationListInterface",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * A validator in a specific execution context.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",17],["T_WHITESPACE","\n",21],["T_INTERFACE","interface",22],["T_WHITESPACE"," ",22],["T_STRING","ContextualValidatorInterface",22],["T_WHITESPACE","\n",22],"{",["T_WHITESPACE","\n    ",23],["T_DOC_COMMENT","\/**\n     * Appends the given path to the property path of the context.\n     *\n     * If called multiple times, the path will always be reset to the context's\n     * original path with the given path appended to it.\n     *\n     * @param string $path The path to append\n     *\n     * @return $this\n     *\/",24],["T_WHITESPACE","\n    ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","atPath",34],"(",["T_VARIABLE","$path",34],")",";",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Validates a value against a constraint or a list of constraints.\n     *\n     * If no constraint is passed, the constraint\n     * {@link \\Symfony\\Component\\Validator\\Constraints\\Valid} is assumed.\n     *\n     * @param mixed                   $value       The value to validate\n     * @param Constraint|Constraint[] $constraints The constraint(s) to validate\n     *                                             against\n     * @param array|null              $groups      The validation groups to\n     *                                             validate. If none is given,\n     *                                             \"Default\" is assumed\n     *\n     * @return $this\n     *\/",36],["T_WHITESPACE","\n    ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","validate",51],"(",["T_VARIABLE","$value",51],",",["T_WHITESPACE"," ",51],["T_VARIABLE","$constraints",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],["T_STRING","null",51],",",["T_WHITESPACE"," ",51],["T_VARIABLE","$groups",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],["T_STRING","null",51],")",";",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * Validates a property of an object against the constraints specified\n     * for this property.\n     *\n     * @param object     $object       The object\n     * @param string     $propertyName The name of the validated property\n     * @param array|null $groups       The validation groups to validate. If\n     *                                 none is given, \"Default\" is assumed\n     *\n     * @return $this\n     *\/",53],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","validateProperty",64],"(",["T_VARIABLE","$object",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$propertyName",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$groups",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_STRING","null",64],")",";",["T_WHITESPACE","\n\n    ",64],["T_DOC_COMMENT","\/**\n     * Validates a value against the constraints specified for an object's\n     * property.\n     *\n     * @param object|string $objectOrClass The object or its class name\n     * @param string        $propertyName  The name of the property\n     * @param mixed         $value         The value to validate against the\n     *                                     property's constraints\n     * @param array|null    $groups        The validation groups to validate. If\n     *                                     none is given, \"Default\" is assumed\n     *\n     * @return $this\n     *\/",66],["T_WHITESPACE","\n    ",78],["T_PUBLIC","public",79],["T_WHITESPACE"," ",79],["T_FUNCTION","function",79],["T_WHITESPACE"," ",79],["T_STRING","validatePropertyValue",79],"(",["T_VARIABLE","$objectOrClass",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$propertyName",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$value",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$groups",79],["T_WHITESPACE"," ",79],"=",["T_WHITESPACE"," ",79],["T_STRING","null",79],")",";",["T_WHITESPACE","\n\n    ",79],["T_DOC_COMMENT","\/**\n     * Returns the violations that have been generated so far in the context\n     * of the validator.\n     *\n     * @return ConstraintViolationListInterface The constraint violations\n     *\/",81],["T_WHITESPACE","\n    ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","getViolations",87],"(",")",";",["T_WHITESPACE","\n",87],"}",["T_WHITESPACE","\n",88]]