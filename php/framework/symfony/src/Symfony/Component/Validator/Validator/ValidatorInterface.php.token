[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Validator",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Validator",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Constraint",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Validator",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ConstraintViolationListInterface",15],";",["T_WHITESPACE","\n",15],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","Symfony",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Component",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Validator",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Context",16],["T_NS_SEPARATOR","\\",16],["T_STRING","ExecutionContextInterface",16],";",["T_WHITESPACE","\n",16],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Symfony",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Component",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Validator",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Mapping",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Factory",17],["T_NS_SEPARATOR","\\",17],["T_STRING","MetadataFactoryInterface",17],";",["T_WHITESPACE","\n\n",17],["T_DOC_COMMENT","\/**\n * Validates PHP values against constraints.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",19],["T_WHITESPACE","\n",23],["T_INTERFACE","interface",24],["T_WHITESPACE"," ",24],["T_STRING","ValidatorInterface",24],["T_WHITESPACE"," ",24],["T_EXTENDS","extends",24],["T_WHITESPACE"," ",24],["T_STRING","MetadataFactoryInterface",24],["T_WHITESPACE","\n",24],"{",["T_WHITESPACE","\n    ",25],["T_DOC_COMMENT","\/**\n     * Validates a value against a constraint or a list of constraints.\n     *\n     * If no constraint is passed, the constraint\n     * {@link \\Symfony\\Component\\Validator\\Constraints\\Valid} is assumed.\n     *\n     * @param mixed                   $value       The value to validate\n     * @param Constraint|Constraint[] $constraints The constraint(s) to validate\n     *                                             against\n     * @param array|null              $groups      The validation groups to\n     *                                             validate. If none is given,\n     *                                             \"Default\" is assumed\n     *\n     * @return ConstraintViolationListInterface A list of constraint violations\n     *                                          If the list is empty, validation\n     *                                          succeeded\n     *\/",26],["T_WHITESPACE","\n    ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","validate",43],"(",["T_VARIABLE","$value",43],",",["T_WHITESPACE"," ",43],["T_VARIABLE","$constraints",43],["T_WHITESPACE"," ",43],"=",["T_WHITESPACE"," ",43],["T_STRING","null",43],",",["T_WHITESPACE"," ",43],["T_VARIABLE","$groups",43],["T_WHITESPACE"," ",43],"=",["T_WHITESPACE"," ",43],["T_STRING","null",43],")",";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * Validates a property of an object against the constraints specified\n     * for this property.\n     *\n     * @param object     $object       The object\n     * @param string     $propertyName The name of the validated property\n     * @param array|null $groups       The validation groups to validate. If\n     *                                 none is given, \"Default\" is assumed\n     *\n     * @return ConstraintViolationListInterface A list of constraint violations\n     *                                          If the list is empty, validation\n     *                                          succeeded\n     *\/",45],["T_WHITESPACE","\n    ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","validateProperty",58],"(",["T_VARIABLE","$object",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$propertyName",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$groups",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_STRING","null",58],")",";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Validates a value against the constraints specified for an object's\n     * property.\n     *\n     * @param object|string $objectOrClass The object or its class name\n     * @param string        $propertyName  The name of the property\n     * @param mixed         $value         The value to validate against the\n     *                                     property's constraints\n     * @param array|null    $groups        The validation groups to validate. If\n     *                                     none is given, \"Default\" is assumed\n     *\n     * @return ConstraintViolationListInterface A list of constraint violations\n     *                                          If the list is empty, validation\n     *                                          succeeded\n     *\/",60],["T_WHITESPACE","\n    ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","validatePropertyValue",75],"(",["T_VARIABLE","$objectOrClass",75],",",["T_WHITESPACE"," ",75],["T_VARIABLE","$propertyName",75],",",["T_WHITESPACE"," ",75],["T_VARIABLE","$value",75],",",["T_WHITESPACE"," ",75],["T_VARIABLE","$groups",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_STRING","null",75],")",";",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Starts a new validation context and returns a validator for that context.\n     *\n     * The returned validator collects all violations generated within its\n     * context. You can access these violations with the\n     * {@link ContextualValidatorInterface::getViolations()} method.\n     *\n     * @return ContextualValidatorInterface The validator for the new context\n     *\/",77],["T_WHITESPACE","\n    ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","startContext",86],"(",")",";",["T_WHITESPACE","\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Returns a validator in the given execution context.\n     *\n     * The returned validator adds all generated violations to the given\n     * context.\n     *\n     * @param ExecutionContextInterface $context The execution context\n     *\n     * @return ContextualValidatorInterface The validator for that context\n     *\/",88],["T_WHITESPACE","\n    ",97],["T_PUBLIC","public",98],["T_WHITESPACE"," ",98],["T_FUNCTION","function",98],["T_WHITESPACE"," ",98],["T_STRING","inContext",98],"(",["T_STRING","ExecutionContextInterface",98],["T_WHITESPACE"," ",98],["T_VARIABLE","$context",98],")",";",["T_WHITESPACE","\n",98],"}",["T_WHITESPACE","\n",99]]