[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Serializer",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Mapping",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Factory",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Serializer",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Exception",14],["T_NS_SEPARATOR","\\",14],["T_STRING","InvalidArgumentException",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Symfony",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Component",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Serializer",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Mapping",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ClassMetadataInterface",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Returns a {@see ClassMetadataInterface}.\n *\n * @author K\u00c3\u00a9vin Dunglas <dunglas@gmail.com>\n *\/",17],["T_WHITESPACE","\n",21],["T_INTERFACE","interface",22],["T_WHITESPACE"," ",22],["T_STRING","ClassMetadataFactoryInterface",22],["T_WHITESPACE","\n",22],"{",["T_WHITESPACE","\n    ",23],["T_DOC_COMMENT","\/**\n     * If the method was called with the same class name (or an object of that\n     * class) before, the same metadata instance is returned.\n     *\n     * If the factory was configured with a cache, this method will first look\n     * for an existing metadata instance in the cache. If an existing instance\n     * is found, it will be returned without further ado.\n     *\n     * Otherwise, a new metadata instance is created. If the factory was\n     * configured with a loader, the metadata is passed to the\n     * {@link \\Symfony\\Component\\Serializer\\Mapping\\Loader\\LoaderInterface::loadClassMetadata()} method for further\n     * configuration. At last, the new object is returned.\n     *\n     * @param string|object $value\n     *\n     * @return ClassMetadataInterface\n     *\n     * @throws InvalidArgumentException\n     *\/",24],["T_WHITESPACE","\n    ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","getMetadataFor",43],"(",["T_VARIABLE","$value",43],")",";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * Checks if class has metadata.\n     *\n     * @param mixed $value\n     *\n     * @return bool\n     *\/",45],["T_WHITESPACE","\n    ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","hasMetadataFor",52],"(",["T_VARIABLE","$value",52],")",";",["T_WHITESPACE","\n",52],"}",["T_WHITESPACE","\n",53]]