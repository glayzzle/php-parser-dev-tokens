[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",14],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","FormTypeGuesserInterface",17],["T_WHITESPACE","\n",17],"{",["T_WHITESPACE","\n    ",18],["T_DOC_COMMENT","\/**\n     * Returns a field guess for a property name of a class.\n     *\n     * @param string $class    The fully qualified class name\n     * @param string $property The name of the property to guess for\n     *\n     * @return Guess\\TypeGuess|null A guess for the field's type and options\n     *\/",19],["T_WHITESPACE","\n    ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","guessType",27],"(",["T_VARIABLE","$class",27],",",["T_WHITESPACE"," ",27],["T_VARIABLE","$property",27],")",";",["T_WHITESPACE","\n\n    ",27],["T_DOC_COMMENT","\/**\n     * Returns a guess whether a property of a class is required.\n     *\n     * @param string $class    The fully qualified class name\n     * @param string $property The name of the property to guess for\n     *\n     * @return Guess\\ValueGuess A guess for the field's required setting\n     *\/",29],["T_WHITESPACE","\n    ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","guessRequired",37],"(",["T_VARIABLE","$class",37],",",["T_WHITESPACE"," ",37],["T_VARIABLE","$property",37],")",";",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * Returns a guess about the field's maximum length.\n     *\n     * @param string $class    The fully qualified class name\n     * @param string $property The name of the property to guess for\n     *\n     * @return Guess\\ValueGuess|null A guess for the field's maximum length\n     *\/",39],["T_WHITESPACE","\n    ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","guessMaxLength",47],"(",["T_VARIABLE","$class",47],",",["T_WHITESPACE"," ",47],["T_VARIABLE","$property",47],")",";",["T_WHITESPACE","\n\n    ",47],["T_DOC_COMMENT","\/**\n     * Returns a guess about the field's pattern.\n     *\n     * - When you have a min value, you guess a min length of this min (LOW_CONFIDENCE) , lines below\n     * - If this value is a float type, this is wrong so you guess null with MEDIUM_CONFIDENCE to override the previous guess.\n     * Example:\n     *  You want a float greater than 5, 4.512313 is not valid but length(4.512314) > length(5)\n     *\n     * @see https:\/\/github.com\/symfony\/symfony\/pull\/3927\n     *\n     * @param string $class    The fully qualified class name\n     * @param string $property The name of the property to guess for\n     *\n     * @return Guess\\ValueGuess|null A guess for the field's required pattern\n     *\/",49],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","guessPattern",64],"(",["T_VARIABLE","$class",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$property",64],")",";",["T_WHITESPACE","\n",64],"}",["T_WHITESPACE","\n",65]]