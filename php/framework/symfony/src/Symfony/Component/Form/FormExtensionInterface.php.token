[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * Interface for extensions which provide types, type extensions and a guesser.\n *\/",14],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","FormExtensionInterface",17],["T_WHITESPACE","\n",17],"{",["T_WHITESPACE","\n    ",18],["T_DOC_COMMENT","\/**\n     * Returns a type by name.\n     *\n     * @param string $name The name of the type\n     *\n     * @return FormTypeInterface The type\n     *\n     * @throws Exception\\InvalidArgumentException if the given type is not supported by this extension\n     *\/",19],["T_WHITESPACE","\n    ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getType",28],"(",["T_VARIABLE","$name",28],")",";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * Returns whether the given type is supported.\n     *\n     * @param string $name The name of the type\n     *\n     * @return bool Whether the type is supported by this extension\n     *\/",30],["T_WHITESPACE","\n    ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","hasType",37],"(",["T_VARIABLE","$name",37],")",";",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * Returns the extensions for the given type.\n     *\n     * @param string $name The name of the type\n     *\n     * @return FormTypeExtensionInterface[] An array of extensions as FormTypeExtensionInterface instances\n     *\/",39],["T_WHITESPACE","\n    ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","getTypeExtensions",46],"(",["T_VARIABLE","$name",46],")",";",["T_WHITESPACE","\n\n    ",46],["T_DOC_COMMENT","\/**\n     * Returns whether this extension provides type extensions for the given type.\n     *\n     * @param string $name The name of the type\n     *\n     * @return bool Whether the given type has extensions\n     *\/",48],["T_WHITESPACE","\n    ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","hasTypeExtensions",55],"(",["T_VARIABLE","$name",55],")",";",["T_WHITESPACE","\n\n    ",55],["T_DOC_COMMENT","\/**\n     * Returns the type guesser provided by this extension.\n     *\n     * @return FormTypeGuesserInterface|null The type guesser\n     *\/",57],["T_WHITESPACE","\n    ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getTypeGuesser",62],"(",")",";",["T_WHITESPACE","\n",62],"}",["T_WHITESPACE","\n",63]]