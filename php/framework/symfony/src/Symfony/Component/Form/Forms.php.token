[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Form",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Extension",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Core",14],["T_NS_SEPARATOR","\\",14],["T_STRING","CoreExtension",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * Entry point of the Form component.\n *\n * Use this class to conveniently create new form factories:\n *\n * <code>\n * use Symfony\\Component\\Form\\Forms;\n *\n * $formFactory = Forms::createFormFactory();\n *\n * $form = $formFactory->createBuilder()\n *     ->add('firstName', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType')\n *     ->add('lastName', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType')\n *     ->add('age', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType')\n *     ->add('gender', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType', array(\n *         'choices' => array('Male' => 'm', 'Female' => 'f'),\n *     ))\n *     ->getForm();\n * <\/code>\n *\n * You can also add custom extensions to the form factory:\n *\n * <code>\n * $formFactory = Forms::createFormFactoryBuilder()\n *     ->addExtension(new AcmeExtension())\n *     ->getFormFactory();\n * <\/code>\n *\n * If you create custom form types or type extensions, it is\n * generally recommended to create your own extensions that lazily\n * load these types and type extensions. In projects where performance\n * does not matter that much, you can also pass them directly to the\n * form factory:\n *\n * <code>\n * $formFactory = Forms::createFormFactoryBuilder()\n *     ->addType(new PersonType())\n *     ->addType(new PhoneNumberType())\n *     ->addTypeExtension(new FormTypeHelpTextExtension())\n *     ->getFormFactory();\n * <\/code>\n *\n * Support for the Validator component is provided by ValidatorExtension.\n * This extension needs a validator object to function properly:\n *\n * <code>\n * use Symfony\\Component\\Validator\\Validation;\n * use Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension;\n *\n * $validator = Validation::createValidator();\n * $formFactory = Forms::createFormFactoryBuilder()\n *     ->addExtension(new ValidatorExtension($validator))\n *     ->getFormFactory();\n * <\/code>\n *\n * Support for the Templating component is provided by TemplatingExtension.\n * This extension needs a PhpEngine object for rendering forms. As second\n * argument you should pass the names of the default themes. Here is an\n * example for using the default layout with \"<div>\" tags:\n *\n * <code>\n * use Symfony\\Component\\Form\\Extension\\Templating\\TemplatingExtension;\n *\n * $formFactory = Forms::createFormFactoryBuilder()\n *     ->addExtension(new TemplatingExtension($engine, null, array(\n *         'FrameworkBundle:Form',\n *     )))\n *     ->getFormFactory();\n * <\/code>\n *\n * The next example shows how to include the \"<table>\" layout:\n *\n * <code>\n * use Symfony\\Component\\Form\\Extension\\Templating\\TemplatingExtension;\n *\n * $formFactory = Forms::createFormFactoryBuilder()\n *     ->addExtension(new TemplatingExtension($engine, null, array(\n *         'FrameworkBundle:Form',\n *         'FrameworkBundle:FormTable',\n *     )))\n *     ->getFormFactory();\n * <\/code>\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",16],["T_WHITESPACE","\n",100],["T_FINAL","final",101],["T_WHITESPACE"," ",101],["T_CLASS","class",101],["T_WHITESPACE"," ",101],["T_STRING","Forms",101],["T_WHITESPACE","\n",101],"{",["T_WHITESPACE","\n    ",102],["T_DOC_COMMENT","\/**\n     * Creates a form factory with the default configuration.\n     *\n     * @return FormFactoryInterface The form factory\n     *\/",103],["T_WHITESPACE","\n    ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_STATIC","static",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","createFormFactory",108],"(",")",["T_WHITESPACE","\n    ",108],"{",["T_WHITESPACE","\n        ",109],["T_RETURN","return",110],["T_WHITESPACE"," ",110],["T_STRING","self",110],["T_DOUBLE_COLON","::",110],["T_STRING","createFormFactoryBuilder",110],"(",")",["T_OBJECT_OPERATOR","->",110],["T_STRING","getFormFactory",110],"(",")",";",["T_WHITESPACE","\n    ",110],"}",["T_WHITESPACE","\n\n    ",111],["T_DOC_COMMENT","\/**\n     * Creates a form factory builder with the default configuration.\n     *\n     * @return FormFactoryBuilderInterface The form factory builder\n     *\/",113],["T_WHITESPACE","\n    ",117],["T_PUBLIC","public",118],["T_WHITESPACE"," ",118],["T_STATIC","static",118],["T_WHITESPACE"," ",118],["T_FUNCTION","function",118],["T_WHITESPACE"," ",118],["T_STRING","createFormFactoryBuilder",118],"(",")",["T_WHITESPACE","\n    ",118],"{",["T_WHITESPACE","\n        ",119],["T_VARIABLE","$builder",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_NEW","new",120],["T_WHITESPACE"," ",120],["T_STRING","FormFactoryBuilder",120],"(",")",";",["T_WHITESPACE","\n        ",120],["T_VARIABLE","$builder",121],["T_OBJECT_OPERATOR","->",121],["T_STRING","addExtension",121],"(",["T_NEW","new",121],["T_WHITESPACE"," ",121],["T_STRING","CoreExtension",121],"(",")",")",";",["T_WHITESPACE","\n\n        ",121],["T_RETURN","return",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$builder",123],";",["T_WHITESPACE","\n    ",123],"}",["T_WHITESPACE","\n\n    ",124],["T_DOC_COMMENT","\/**\n     * This class cannot be instantiated.\n     *\/",126],["T_WHITESPACE","\n    ",128],["T_PRIVATE","private",129],["T_WHITESPACE"," ",129],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","__construct",129],"(",")",["T_WHITESPACE","\n    ",129],"{",["T_WHITESPACE","\n    ",130],"}",["T_WHITESPACE","\n",131],"}",["T_WHITESPACE","\n",132]]