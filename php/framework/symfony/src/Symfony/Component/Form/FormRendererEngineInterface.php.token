[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * Adapter for rendering form templates with a specific templating engine.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",14],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","FormRendererEngineInterface",19],["T_WHITESPACE","\n",19],"{",["T_WHITESPACE","\n    ",20],["T_DOC_COMMENT","\/**\n     * Sets the theme(s) to be used for rendering a view and its children.\n     *\n     * @param FormView $view   The view to assign the theme(s) to\n     * @param mixed    $themes The theme(s). The type of these themes\n     *                         is open to the implementation.\n     *\/",21],["T_WHITESPACE","\n    ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","setTheme",28],"(",["T_STRING","FormView",28],["T_WHITESPACE"," ",28],["T_VARIABLE","$view",28],",",["T_WHITESPACE"," ",28],["T_VARIABLE","$themes",28],")",";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * Returns the resource for a block name.\n     *\n     * The resource is first searched in the themes attached to $view, then\n     * in the themes of its parent view and so on, until a resource was found.\n     *\n     * The type of the resource is decided by the implementation. The resource\n     * is later passed to {@link renderBlock()} by the rendering algorithm.\n     *\n     * @param FormView $view      The view for determining the used themes\n     *                            First the themes attached directly to the\n     *                            view with {@link setTheme()} are considered,\n     *                            then the ones of its parent etc.\n     * @param string   $blockName The name of the block to render\n     *\n     * @return mixed The renderer resource or false, if none was found\n     *\/",30],["T_WHITESPACE","\n    ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","getResourceForBlockName",47],"(",["T_STRING","FormView",47],["T_WHITESPACE"," ",47],["T_VARIABLE","$view",47],",",["T_WHITESPACE"," ",47],["T_VARIABLE","$blockName",47],")",";",["T_WHITESPACE","\n\n    ",47],["T_DOC_COMMENT","\/**\n     * Returns the resource for a block hierarchy.\n     *\n     * A block hierarchy is an array which starts with the root of the hierarchy\n     * and continues with the child of that root, the child of that child etc.\n     * The following is an example for a block hierarchy:\n     *\n     * <code>\n     * form_widget\n     * text_widget\n     * url_widget\n     * <\/code>\n     *\n     * In this example, \"url_widget\" is the most specific block, while the other\n     * blocks are its ancestors in the hierarchy.\n     *\n     * The second parameter $hierarchyLevel determines the level of the hierarchy\n     * that should be rendered. For example, if $hierarchyLevel is 2 for the\n     * above hierarchy, the engine will first look for the block \"url_widget\",\n     * then, if that does not exist, for the block \"text_widget\" etc.\n     *\n     * The type of the resource is decided by the implementation. The resource\n     * is later passed to {@link renderBlock()} by the rendering algorithm.\n     *\n     * @param FormView $view               The view for determining the used themes\n     *                                     First the themes  attached directly to\n     *                                     the view with {@link setTheme()} are\n     *                                     considered, then the ones of its parent etc.\n     * @param array    $blockNameHierarchy The block name hierarchy, with the root block\n     *                                     at the beginning.\n     * @param int      $hierarchyLevel     The level in the hierarchy at which to start\n     *                                     looking. Level 0 indicates the root block, i.e.\n     *                                     the first element of $blockNameHierarchy.\n     *\n     * @return mixed The renderer resource or false, if none was found\n     *\/",49],["T_WHITESPACE","\n    ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","getResourceForBlockNameHierarchy",85],"(",["T_STRING","FormView",85],["T_WHITESPACE"," ",85],["T_VARIABLE","$view",85],",",["T_WHITESPACE"," ",85],["T_ARRAY","array",85],["T_WHITESPACE"," ",85],["T_VARIABLE","$blockNameHierarchy",85],",",["T_WHITESPACE"," ",85],["T_VARIABLE","$hierarchyLevel",85],")",";",["T_WHITESPACE","\n\n    ",85],["T_DOC_COMMENT","\/**\n     * Returns the hierarchy level at which a resource can be found.\n     *\n     * A block hierarchy is an array which starts with the root of the hierarchy\n     * and continues with the child of that root, the child of that child etc.\n     * The following is an example for a block hierarchy:\n     *\n     * <code>\n     * form_widget\n     * text_widget\n     * url_widget\n     * <\/code>\n     *\n     * The second parameter $hierarchyLevel determines the level of the hierarchy\n     * that should be rendered.\n     *\n     * If we call this method with the hierarchy level 2, the engine will first\n     * look for a resource for block \"url_widget\". If such a resource exists,\n     * the method returns 2. Otherwise it tries to find a resource for block\n     * \"text_widget\" (at level 1) and, again, returns 1 if a resource was found.\n     * The method continues to look for resources until the root level was\n     * reached and nothing was found. In this case false is returned.\n     *\n     * The type of the resource is decided by the implementation. The resource\n     * is later passed to {@link renderBlock()} by the rendering algorithm.\n     *\n     * @param FormView $view               The view for determining the used themes\n     *                                     First the themes  attached directly to\n     *                                     the view with {@link setTheme()} are\n     *                                     considered, then the ones of its parent etc.\n     * @param array    $blockNameHierarchy The block name hierarchy, with the root block\n     *                                     at the beginning.\n     * @param int      $hierarchyLevel     The level in the hierarchy at which to start\n     *                                     looking. Level 0 indicates the root block, i.e.\n     *                                     the first element of $blockNameHierarchy.\n     *\n     * @return int|bool The hierarchy level or false, if no resource was found\n     *\/",87],["T_WHITESPACE","\n    ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","getResourceHierarchyLevel",125],"(",["T_STRING","FormView",125],["T_WHITESPACE"," ",125],["T_VARIABLE","$view",125],",",["T_WHITESPACE"," ",125],["T_ARRAY","array",125],["T_WHITESPACE"," ",125],["T_VARIABLE","$blockNameHierarchy",125],",",["T_WHITESPACE"," ",125],["T_VARIABLE","$hierarchyLevel",125],")",";",["T_WHITESPACE","\n\n    ",125],["T_DOC_COMMENT","\/**\n     * Renders a block in the given renderer resource.\n     *\n     * The resource can be obtained by calling {@link getResourceForBlock()}\n     * or {@link getResourceForBlockHierarchy()}. The type of the resource is\n     * decided by the implementation.\n     *\n     * @param FormView $view      The view to render\n     * @param mixed    $resource  The renderer resource\n     * @param string   $blockName The name of the block to render\n     * @param array    $variables The variables to pass to the template\n     *\n     * @return string The HTML markup\n     *\/",127],["T_WHITESPACE","\n    ",140],["T_PUBLIC","public",141],["T_WHITESPACE"," ",141],["T_FUNCTION","function",141],["T_WHITESPACE"," ",141],["T_STRING","renderBlock",141],"(",["T_STRING","FormView",141],["T_WHITESPACE"," ",141],["T_VARIABLE","$view",141],",",["T_WHITESPACE"," ",141],["T_VARIABLE","$resource",141],",",["T_WHITESPACE"," ",141],["T_VARIABLE","$blockName",141],",",["T_WHITESPACE"," ",141],["T_ARRAY","array",141],["T_WHITESPACE"," ",141],["T_VARIABLE","$variables",141],["T_WHITESPACE"," ",141],"=",["T_WHITESPACE"," ",141],["T_ARRAY","array",141],"(",")",")",";",["T_WHITESPACE","\n",141],"}",["T_WHITESPACE","\n",142]]