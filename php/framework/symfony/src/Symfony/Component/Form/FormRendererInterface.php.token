[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * Renders a form into HTML.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",14],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","FormRendererInterface",19],["T_WHITESPACE","\n",19],"{",["T_WHITESPACE","\n    ",20],["T_DOC_COMMENT","\/**\n     * Returns the engine used by this renderer.\n     *\n     * @return FormRendererEngineInterface The renderer engine\n     *\/",21],["T_WHITESPACE","\n    ",25],["T_PUBLIC","public",26],["T_WHITESPACE"," ",26],["T_FUNCTION","function",26],["T_WHITESPACE"," ",26],["T_STRING","getEngine",26],"(",")",";",["T_WHITESPACE","\n\n    ",26],["T_DOC_COMMENT","\/**\n     * Sets the theme(s) to be used for rendering a view and its children.\n     *\n     * @param FormView $view   The view to assign the theme(s) to\n     * @param mixed    $themes The theme(s). The type of these themes\n     *                         is open to the implementation.\n     *\/",28],["T_WHITESPACE","\n    ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","setTheme",35],"(",["T_STRING","FormView",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$view",35],",",["T_WHITESPACE"," ",35],["T_VARIABLE","$themes",35],")",";",["T_WHITESPACE","\n\n    ",35],["T_DOC_COMMENT","\/**\n     * Renders a named block of the form theme.\n     *\n     * @param FormView $view      The view for which to render the block\n     * @param string   $blockName The name of the block\n     * @param array    $variables The variables to pass to the template\n     *\n     * @return string The HTML markup\n     *\/",37],["T_WHITESPACE","\n    ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","renderBlock",46],"(",["T_STRING","FormView",46],["T_WHITESPACE"," ",46],["T_VARIABLE","$view",46],",",["T_WHITESPACE"," ",46],["T_VARIABLE","$blockName",46],",",["T_WHITESPACE"," ",46],["T_ARRAY","array",46],["T_WHITESPACE"," ",46],["T_VARIABLE","$variables",46],["T_WHITESPACE"," ",46],"=",["T_WHITESPACE"," ",46],["T_ARRAY","array",46],"(",")",")",";",["T_WHITESPACE","\n\n    ",46],["T_DOC_COMMENT","\/**\n     * Searches and renders a block for a given name suffix.\n     *\n     * The block is searched by combining the block names stored in the\n     * form view with the given suffix. If a block name is found, that\n     * block is rendered.\n     *\n     * If this method is called recursively, the block search is continued\n     * where a block was found before.\n     *\n     * @param FormView $view            The view for which to render the block\n     * @param string   $blockNameSuffix The suffix of the block name\n     * @param array    $variables       The variables to pass to the template\n     *\n     * @return string The HTML markup\n     *\/",48],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","searchAndRenderBlock",64],"(",["T_STRING","FormView",64],["T_WHITESPACE"," ",64],["T_VARIABLE","$view",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$blockNameSuffix",64],",",["T_WHITESPACE"," ",64],["T_ARRAY","array",64],["T_WHITESPACE"," ",64],["T_VARIABLE","$variables",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_ARRAY","array",64],"(",")",")",";",["T_WHITESPACE","\n\n    ",64],["T_DOC_COMMENT","\/**\n     * Renders a CSRF token.\n     *\n     * Use this helper for CSRF protection without the overhead of creating a\n     * form.\n     *\n     * <code>\n     * <input type=\"hidden\" name=\"token\" value=\"<?php $renderer->renderCsrfToken('rm_user_'.$user->getId()) ?>\">\n     * <\/code>\n     *\n     * Check the token in your action using the same token ID.\n     *\n     * <code>\n     * $csrfProvider = $this->get('security.csrf.token_generator');\n     * if (!$csrfProvider->isCsrfTokenValid('rm_user_'.$user->getId(), $token)) {\n     *     throw new \\RuntimeException('CSRF attack detected.');\n     * }\n     * <\/code>\n     *\n     * @param string $tokenId The ID of the CSRF token\n     *\n     * @return string A CSRF token\n     *\/",66],["T_WHITESPACE","\n    ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","renderCsrfToken",89],"(",["T_VARIABLE","$tokenId",89],")",";",["T_WHITESPACE","\n\n    ",89],["T_DOC_COMMENT","\/**\n     * Makes a technical name human readable.\n     *\n     * Sequences of underscores are replaced by single spaces. The first letter\n     * of the resulting string is capitalized, while all other letters are\n     * turned to lowercase.\n     *\n     * @param string $text The text to humanize\n     *\n     * @return string The humanized text\n     *\/",91],["T_WHITESPACE","\n    ",101],["T_PUBLIC","public",102],["T_WHITESPACE"," ",102],["T_FUNCTION","function",102],["T_WHITESPACE"," ",102],["T_STRING","humanize",102],"(",["T_VARIABLE","$text",102],")",";",["T_WHITESPACE","\n",102],"}",["T_WHITESPACE","\n",103]]