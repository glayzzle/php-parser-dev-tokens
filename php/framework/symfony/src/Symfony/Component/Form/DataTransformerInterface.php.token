[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Form",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Exception",14],["T_NS_SEPARATOR","\\",14],["T_STRING","TransformationFailedException",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * Transforms a value between different representations.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",16],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","DataTransformerInterface",21],["T_WHITESPACE","\n",21],"{",["T_WHITESPACE","\n    ",22],["T_DOC_COMMENT","\/**\n     * Transforms a value from the original representation to a transformed representation.\n     *\n     * This method is called on two occasions inside a form field:\n     *\n     * 1. When the form field is initialized with the data attached from the datasource (object or array).\n     * 2. When data from a request is submitted using {@link Form::submit()} to transform the new input data\n     *    back into the renderable format. For example if you have a date field and submit '2009-10-10'\n     *    you might accept this value because its easily parsed, but the transformer still writes back\n     *    \"2009\/10\/10\" onto the form field (for further displaying or other purposes).\n     *\n     * This method must be able to deal with empty values. Usually this will\n     * be NULL, but depending on your implementation other empty values are\n     * possible as well (such as empty strings). The reasoning behind this is\n     * that value transformers must be chainable. If the transform() method\n     * of the first value transformer outputs NULL, the second value transformer\n     * must be able to process that value.\n     *\n     * By convention, transform() should return an empty string if NULL is\n     * passed.\n     *\n     * @param mixed $value The value in the original representation\n     *\n     * @return mixed The value in the transformed representation\n     *\n     * @throws TransformationFailedException When the transformation fails.\n     *\/",23],["T_WHITESPACE","\n    ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","transform",50],"(",["T_VARIABLE","$value",50],")",";",["T_WHITESPACE","\n\n    ",50],["T_DOC_COMMENT","\/**\n     * Transforms a value from the transformed representation to its original\n     * representation.\n     *\n     * This method is called when {@link Form::submit()} is called to transform the requests tainted data\n     * into an acceptable format for your data processing\/model layer.\n     *\n     * This method must be able to deal with empty values. Usually this will\n     * be an empty string, but depending on your implementation other empty\n     * values are possible as well (such as NULL). The reasoning behind\n     * this is that value transformers must be chainable. If the\n     * reverseTransform() method of the first value transformer outputs an\n     * empty string, the second value transformer must be able to process that\n     * value.\n     *\n     * By convention, reverseTransform() should return NULL if an empty string\n     * is passed.\n     *\n     * @param mixed $value The value in the transformed representation\n     *\n     * @return mixed The value in the original representation\n     *\n     * @throws TransformationFailedException When the transformation fails.\n     *\/",52],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","reverseTransform",76],"(",["T_VARIABLE","$value",76],")",";",["T_WHITESPACE","\n",76],"}",["T_WHITESPACE","\n",77]]