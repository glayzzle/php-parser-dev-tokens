[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_COMMENT","\/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/",3],["T_WHITESPACE","\n\n",10],["T_NAMESPACE","namespace",12],["T_WHITESPACE"," ",12],["T_STRING","Symfony",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Component",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Form",12],";",["T_WHITESPACE","\n\n",12],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Symfony",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Component",14],["T_NS_SEPARATOR","\\",14],["T_STRING","OptionsResolver",14],["T_NS_SEPARATOR","\\",14],["T_STRING","OptionsResolver",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\/",16],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","FormTypeInterface",19],["T_WHITESPACE","\n",19],"{",["T_WHITESPACE","\n    ",20],["T_DOC_COMMENT","\/**\n     * Builds the form.\n     *\n     * This method is called for each type in the hierarchy starting from the\n     * top most type. Type extensions can further modify the form.\n     *\n     * @see FormTypeExtensionInterface::buildForm()\n     *\n     * @param FormBuilderInterface $builder The form builder\n     * @param array                $options The options\n     *\/",21],["T_WHITESPACE","\n    ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],["T_STRING","buildForm",32],"(",["T_STRING","FormBuilderInterface",32],["T_WHITESPACE"," ",32],["T_VARIABLE","$builder",32],",",["T_WHITESPACE"," ",32],["T_ARRAY","array",32],["T_WHITESPACE"," ",32],["T_VARIABLE","$options",32],")",";",["T_WHITESPACE","\n\n    ",32],["T_DOC_COMMENT","\/**\n     * Builds the form view.\n     *\n     * This method is called for each type in the hierarchy starting from the\n     * top most type. Type extensions can further modify the view.\n     *\n     * A view of a form is built before the views of the child forms are built.\n     * This means that you cannot access child views in this method. If you need\n     * to do so, move your logic to {@link finishView()} instead.\n     *\n     * @see FormTypeExtensionInterface::buildView()\n     *\n     * @param FormView      $view    The view\n     * @param FormInterface $form    The form\n     * @param array         $options The options\n     *\/",34],["T_WHITESPACE","\n    ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","buildView",50],"(",["T_STRING","FormView",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$view",50],",",["T_WHITESPACE"," ",50],["T_STRING","FormInterface",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$form",50],",",["T_WHITESPACE"," ",50],["T_ARRAY","array",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$options",50],")",";",["T_WHITESPACE","\n\n    ",50],["T_DOC_COMMENT","\/**\n     * Finishes the form view.\n     *\n     * This method gets called for each type in the hierarchy starting from the\n     * top most type. Type extensions can further modify the view.\n     *\n     * When this method is called, views of the form's children have already\n     * been built and finished and can be accessed. You should only implement\n     * such logic in this method that actually accesses child views. For everything\n     * else you are recommended to implement {@link buildView()} instead.\n     *\n     * @see FormTypeExtensionInterface::finishView()\n     *\n     * @param FormView      $view    The view\n     * @param FormInterface $form    The form\n     * @param array         $options The options\n     *\/",52],["T_WHITESPACE","\n    ",68],["T_PUBLIC","public",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","finishView",69],"(",["T_STRING","FormView",69],["T_WHITESPACE"," ",69],["T_VARIABLE","$view",69],",",["T_WHITESPACE"," ",69],["T_STRING","FormInterface",69],["T_WHITESPACE"," ",69],["T_VARIABLE","$form",69],",",["T_WHITESPACE"," ",69],["T_ARRAY","array",69],["T_WHITESPACE"," ",69],["T_VARIABLE","$options",69],")",";",["T_WHITESPACE","\n\n    ",69],["T_DOC_COMMENT","\/**\n     * Configures the options for this type.\n     *\n     * @param OptionsResolver $resolver The resolver for the options\n     *\/",71],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","configureOptions",76],"(",["T_STRING","OptionsResolver",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$resolver",76],")",";",["T_WHITESPACE","\n\n    ",76],["T_DOC_COMMENT","\/**\n     * Returns the prefix of the template block name for this type.\n     *\n     * The block prefix defaults to the underscored short class name with\n     * the \"Type\" suffix removed (e.g. \"UserProfileType\" => \"user_profile\").\n     *\n     * @return string The prefix of the template block name\n     *\/",78],["T_WHITESPACE","\n    ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","getBlockPrefix",86],"(",")",";",["T_WHITESPACE","\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Returns the name of the parent type.\n     *\n     * @return string|null The name of the parent type if any, null otherwise\n     *\/",88],["T_WHITESPACE","\n    ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","getParent",93],"(",")",";",["T_WHITESPACE","\n",93],"}",["T_WHITESPACE","\n",94]]