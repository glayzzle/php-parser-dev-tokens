[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Hooks provided by the Migrate module.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","migrate",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Plugin",8],["T_NS_SEPARATOR","\\",8],["T_STRING","MigrationInterface",8],";",["T_WHITESPACE","\n",8],["T_USE","use",9],["T_WHITESPACE"," ",9],["T_STRING","Drupal",9],["T_NS_SEPARATOR","\\",9],["T_STRING","migrate",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Plugin",9],["T_NS_SEPARATOR","\\",9],["T_STRING","MigrateSourceInterface",9],";",["T_WHITESPACE","\n",9],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Drupal",10],["T_NS_SEPARATOR","\\",10],["T_STRING","migrate",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Row",10],";",["T_WHITESPACE","\n\n",10],["T_DOC_COMMENT","\/**\n * @defgroup migration Migration API\n * @{\n * Overview of the Migration API, which migrates data into Drupal.\n *\n * @section overview Overview of migration\n * Migration is an\n * @link http:\/\/wikipedia.org\/wiki\/Extract,_transform,_load Extract, Transform, Load @endlink\n * (ETL) process. In the Drupal migration API the extract phase is called\n * \"source\", the transform phase is called \"process\", and the load phase is\n * called \"destination\". It is important to understand that the \"load\" in ETL\n * means to load data into storage, while traditionally Drupal uses \"load\" to\n * mean load data from storage into memory.\n *\n * In the source phase, a set of data, called the row, is retrieved from the\n * data source, typically a database but it can be a CSV, JSON or XML file. The\n * row is sent to the process phase where it is transformed as needed by the\n * destination, or marked to be skipped. Processing can also determine that a\n * stub needs to be created, for example, if a term has a parent term that does\n * not yet exist. After processing the transformed row is passed to the\n * destination phase where it is loaded (saved) into the Drupal 8 site.\n *\n * The ETL process is configured by the migration plugin. The different phases:\n * source, process, and destination are also plugins, and are managed by the\n * Migration plugin. So there are four types of plugins in the migration\n * process: migration, source, process and destination.\n *\n * @section sec_migrations Migration plugins\n * Migration plugin definitions are stored in a module's 'migrations' directory.\n * For backwards compatibility we also scan the 'migration_templates' directory.\n * Examples of migration plugin definitions can be found in\n * 'core\/modules\/action\/migration_templates'. The plugin class is\n * \\Drupal\\migrate\\Plugin\\Migration, with interface\n * \\Drupal\\migrate\\Plugin\\MigrationInterface. Migration plugins are managed by\n * the \\Drupal\\migrate\\Plugin\\MigrationPluginManager class. Migration plugins\n * are only available if the providers of their source plugins are installed.\n *\n * @section sec_source Source plugins\n * Migration source plugins implement\n * \\Drupal\\migrate\\Plugin\\MigrateSourceInterface and usually extend\n * \\Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase. They are annotated\n * with \\Drupal\\migrate\\Annotation\\MigrateSource annotation, and must be in\n * namespace subdirectory Plugin\\migrate\\source under the namespace of the\n * module that defines them. Migration source plugins are managed by the\n * \\Drupal\\migrate\\Plugin\\MigrateSourcePluginManager class. Source plugin\n * providers are determined by their and their parents namespaces.\n *\n * @section sec_process Process plugins\n * Migration process plugins implement\n * \\Drupal\\migrate\\Plugin\\MigrateProcessInterface and usually extend\n * \\Drupal\\migrate\\ProcessPluginBase. They are annotated\n * with \\Drupal\\migrate\\Annotation\\MigrateProcessPlugin annotation, and must be\n * in namespace subdirectory Plugin\\migrate\\process under the namespace of the\n * module that defines them. Migration process plugins are managed by the\n * \\Drupal\\migrate\\Plugin\\MigratePluginManager class. The Migrate module\n * provides process plugins for common operations (setting default values,\n * mapping values, etc.).\n *\n * @section sec_destination Destination plugins\n * Migration destination plugins implement\n * \\Drupal\\migrate\\Plugin\\MigrateDestinationInterface and usually extend\n * \\Drupal\\migrate\\Plugin\\migrate\\destination\\DestinationBase. They are\n * annotated with \\Drupal\\migrate\\Annotation\\MigrateDestination annotation, and\n * must be in namespace subdirectory Plugin\\migrate\\destination under the\n * namespace of the module that defines them. Migration destination plugins\n * are managed by the \\Drupal\\migrate\\Plugin\\MigrateDestinationPluginManager\n * class. The Migrate module provides destination plugins for Drupal core\n * objects (configuration and entity).\n *\n * @section sec_more_info More information\n * @link https:\/\/www.drupal.org\/node\/2127611 Migration API documentation. @endlink\n *\n * @see update_api\n * @}\n *\/",12],["T_WHITESPACE","\n\n",86],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",88],["T_WHITESPACE","\n\n",91],["T_DOC_COMMENT","\/**\n * Allows adding data to a row before processing it.\n *\n * For example, filter module used to store filter format settings in the\n * variables table which now needs to be inside the filter format config\n * file. So, it needs to be added here.\n *\n * hook_migrate_MIGRATION_ID_prepare_row() is also available.\n *\n * @ingroup migration\n *\/",93],["T_WHITESPACE","\n",103],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","hook_migrate_prepare_row",104],"(",["T_STRING","Row",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$row",104],",",["T_WHITESPACE"," ",104],["T_STRING","MigrateSourceInterface",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$source",104],",",["T_WHITESPACE"," ",104],["T_STRING","MigrationInterface",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$migration",104],")",["T_WHITESPACE"," ",104],"{",["T_WHITESPACE","\n  ",104],["T_IF","if",105],["T_WHITESPACE"," ",105],"(",["T_VARIABLE","$migration",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","id",105],"(",")",["T_WHITESPACE"," ",105],["T_IS_EQUAL","==",105],["T_WHITESPACE"," ",105],["T_CONSTANT_ENCAPSED_STRING","'d6_filter_formats'",105],")",["T_WHITESPACE"," ",105],"{",["T_WHITESPACE","\n    ",105],["T_VARIABLE","$value",106],["T_WHITESPACE"," ",106],"=",["T_WHITESPACE"," ",106],["T_VARIABLE","$source",106],["T_OBJECT_OPERATOR","->",106],["T_STRING","getDatabase",106],"(",")",["T_OBJECT_OPERATOR","->",106],["T_STRING","query",106],"(",["T_CONSTANT_ENCAPSED_STRING","'SELECT value FROM {variable} WHERE name = :name'",106],",",["T_WHITESPACE"," ",106],["T_ARRAY","array",106],"(",["T_CONSTANT_ENCAPSED_STRING","':name'",106],["T_WHITESPACE"," ",106],["T_DOUBLE_ARROW","=>",106],["T_WHITESPACE"," ",106],["T_CONSTANT_ENCAPSED_STRING","'mymodule_filter_foo_'",106],["T_WHITESPACE"," ",106],".",["T_WHITESPACE"," ",106],["T_VARIABLE","$row",106],["T_OBJECT_OPERATOR","->",106],["T_STRING","getSourceProperty",106],"(",["T_CONSTANT_ENCAPSED_STRING","'format'",106],")",")",")",["T_OBJECT_OPERATOR","->",106],["T_STRING","fetchField",106],"(",")",";",["T_WHITESPACE","\n    ",106],["T_IF","if",107],["T_WHITESPACE"," ",107],"(",["T_VARIABLE","$value",107],")",["T_WHITESPACE"," ",107],"{",["T_WHITESPACE","\n      ",107],["T_VARIABLE","$row",108],["T_OBJECT_OPERATOR","->",108],["T_STRING","setSourceProperty",108],"(",["T_CONSTANT_ENCAPSED_STRING","'settings:mymodule:foo'",108],",",["T_WHITESPACE"," ",108],["T_STRING","unserialize",108],"(",["T_VARIABLE","$value",108],")",")",";",["T_WHITESPACE","\n    ",108],"}",["T_WHITESPACE","\n  ",109],"}",["T_WHITESPACE","\n",110],"}",["T_WHITESPACE","\n\n",111],["T_DOC_COMMENT","\/**\n * Allows altering the list of discovered migration plugins.\n *\n * Modules are able to alter specific migrations structures or even remove or\n * append additional migrations to the discovery. For example, this\n * implementation filters out Drupal 6 migrations from the discovered migration\n * list. This is done by checking the migration tags.\n *\n * @param array[] $migrations\n *   An associative array of migrations keyed by migration ID. Each value is the\n *   migration array, obtained by decoding the migration YAML file and enriched\n *   with some meta information added during discovery phase, like migration\n *   'class', 'provider' or '_discovered_file_path'.\n *\n * @ingroup migration\n *\/",113],["T_WHITESPACE","\n",128],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","hook_migration_plugins_alter",129],"(",["T_ARRAY","array",129],["T_WHITESPACE"," ",129],"&",["T_VARIABLE","$migrations",129],")",["T_WHITESPACE"," ",129],"{",["T_WHITESPACE","\n  ",129],["T_VARIABLE","$migrations",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_STRING","array_filter",130],"(",["T_VARIABLE","$migrations",130],",",["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],"(",["T_ARRAY","array",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$migration",130],")",["T_WHITESPACE"," ",130],"{",["T_WHITESPACE","\n    ",130],["T_VARIABLE","$tags",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_ISSET","isset",131],"(",["T_VARIABLE","$migration",131],"[",["T_CONSTANT_ENCAPSED_STRING","'migration_tags'",131],"]",")",["T_WHITESPACE"," ",131],"?",["T_WHITESPACE"," ",131],["T_ARRAY_CAST","(array)",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$migration",131],"[",["T_CONSTANT_ENCAPSED_STRING","'migration_tags'",131],"]",["T_WHITESPACE"," ",131],":",["T_WHITESPACE"," ",131],"[","]",";",["T_WHITESPACE","\n    ",131],["T_RETURN","return",132],["T_WHITESPACE"," ",132],"!",["T_STRING","in_array",132],"(",["T_CONSTANT_ENCAPSED_STRING","'Drupal 6'",132],",",["T_WHITESPACE"," ",132],["T_VARIABLE","$tags",132],")",";",["T_WHITESPACE","\n  ",132],"}",")",";",["T_WHITESPACE","\n",133],"}",["T_WHITESPACE","\n\n",134],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",136],["T_WHITESPACE","\n",138]]