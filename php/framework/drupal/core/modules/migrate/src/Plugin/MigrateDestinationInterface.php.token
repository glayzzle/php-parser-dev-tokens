[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","migrate",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","migrate",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Row",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines an interface for Migration Destination classes.\n *\n * Destinations are responsible for persisting source data into the destination\n * Drupal.\n *\n * @see \\Drupal\\migrate\\Plugin\\destination\\DestinationBase\n * @see \\Drupal\\migrate\\Plugin\\MigrateDestinationPluginManager\n * @see \\Drupal\\migrate\\Annotation\\MigrateDestination\n * @see plugin_api\n *\n * @ingroup migration\n *\/",8],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","MigrateDestinationInterface",21],["T_WHITESPACE"," ",21],["T_EXTENDS","extends",21],["T_WHITESPACE"," ",21],["T_STRING","PluginInspectionInterface",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Gets the destination IDs.\n   *\n   * To support MigrateIdMap maps, derived destination classes should return\n   * field definition(s) corresponding to the primary key of the destination\n   * being implemented. These are used to construct the destination key fields\n   * of the map table for a migration using this destination.\n   *\n   * @return array[]\n   *   An associative array of field definitions keyed by field ID. Values are\n   *   associative arrays with a structure that contains the field type ('type'\n   *   key). The other keys are the field storage settings as they are returned\n   *   by FieldStorageDefinitionInterface::getSettings(). As an example, for a\n   *   composite destination primary key that is defined by an integer and a\n   *   string, the returned value might look like:\n   *   @code\n   *     return [\n   *       'id' => [\n   *         'type' => 'integer',\n   *         'unsigned' => FALSE,\n   *         'size' => 'big',\n   *       ],\n   *       'version' => [\n   *         'type' => 'string',\n   *         'max_length' => 64,\n   *         'is_ascii' => TRUE,\n   *       ],\n   *     ];\n   *   @endcode\n   *   If 'type' points to a field plugin with multiple columns and needs to\n   *   refer to a column different than 'value', the key of that column will be\n   *   appended as a suffix to the plugin name, separated by dot ('.'). Example:\n   *   @code\n   *     return [\n   *       'format' => [\n   *         'type' => 'text.format',\n   *       ],\n   *     ];\n   *   @endcode\n   *   Additional custom keys\/values, that are not part of field storage\n   *   definition, can be passed in definitions:\n   *   @code\n   *     return [\n   *       'nid' => [\n   *         'type' => 'integer',\n   *         'custom_setting' => 'some_value',\n   *       ],\n   *     ];\n   *   @endcode\n   *\n   * @see \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface::getSettings()\n   * @see \\Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\IntegerItem\n   * @see \\Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\StringItem\n   * @see \\Drupal\\text\\Plugin\\Field\\FieldType\\TextItem\n   *\/",23],["T_WHITESPACE","\n  ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","getIds",78],"(",")",";",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Returns an array of destination fields.\n   *\n   * Derived classes must implement fields(), returning a list of available\n   * destination fields.\n   *\n   * @param \\Drupal\\migrate\\Plugin\\MigrationInterface $migration\n   *   Unused, will be removed before Drupal 9.0.x. Defaults to NULL.\n   *\n   * @return array\n   *   - Keys: machine names of the fields\n   *   - Values: Human-friendly descriptions of the fields.\n   *\/",80],["T_WHITESPACE","\n  ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","fields",93],"(",["T_STRING","MigrationInterface",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$migration",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_STRING","NULL",93],")",";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * Import the row.\n   *\n   * Derived classes must implement import(), to construct one new object\n   * (pre-populated) using ID mappings in the Migration.\n   *\n   * @param \\Drupal\\migrate\\Row $row\n   *   The row object.\n   * @param array $old_destination_id_values\n   *   (optional) The old destination IDs. Defaults to an empty array.\n   *\n   * @return mixed\n   *   The entity ID or an indication of success.\n   *\/",95],["T_WHITESPACE","\n  ",108],["T_PUBLIC","public",109],["T_WHITESPACE"," ",109],["T_FUNCTION","function",109],["T_WHITESPACE"," ",109],["T_STRING","import",109],"(",["T_STRING","Row",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$row",109],",",["T_WHITESPACE"," ",109],["T_ARRAY","array",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$old_destination_id_values",109],["T_WHITESPACE"," ",109],"=",["T_WHITESPACE"," ",109],["T_ARRAY","array",109],"(",")",")",";",["T_WHITESPACE","\n\n  ",109],["T_DOC_COMMENT","\/**\n   * Delete the specified destination object from the target Drupal.\n   *\n   * @param array $destination_identifier\n   *   The ID of the destination object to delete.\n   *\/",111],["T_WHITESPACE","\n  ",116],["T_PUBLIC","public",117],["T_WHITESPACE"," ",117],["T_FUNCTION","function",117],["T_WHITESPACE"," ",117],["T_STRING","rollback",117],"(",["T_ARRAY","array",117],["T_WHITESPACE"," ",117],["T_VARIABLE","$destination_identifier",117],")",";",["T_WHITESPACE","\n\n  ",117],["T_DOC_COMMENT","\/**\n   * Whether the destination can be rolled back or not.\n   *\n   * @return bool\n   *   TRUE if rollback is supported, FALSE if not.\n   *\/",119],["T_WHITESPACE","\n  ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","supportsRollback",125],"(",")",";",["T_WHITESPACE","\n\n  ",125],["T_DOC_COMMENT","\/**\n   * The rollback action for the last imported item.\n   *\n   * @return int\n   *   The MigrateIdMapInterface::ROLLBACK_ constant indicating how an imported\n   *   item should be handled on rollback.\n   *\/",127],["T_WHITESPACE","\n  ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","rollbackAction",134],"(",")",";",["T_WHITESPACE","\n\n",134],"}",["T_WHITESPACE","\n",136]]