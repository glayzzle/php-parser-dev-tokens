[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","migrate",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Discovery",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Doctrine",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Common",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Reflection",5],["T_NS_SEPARATOR","\\",5],["T_STRING","StaticReflectionParser",5],["T_WHITESPACE"," ",5],["T_AS","as",5],["T_WHITESPACE"," ",5],["T_STRING","BaseStaticReflectionParser",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Allows getting the reflection parser for the parent class.\n *\n * @internal\n *   This is a temporary solution to the fact that migration source plugins have\n *   more than one provider. This functionality will be moved to core in\n *   https:\/\/www.drupal.org\/node\/2786355.\n *\/",7],["T_WHITESPACE","\n",14],["T_CLASS","class",15],["T_WHITESPACE"," ",15],["T_STRING","StaticReflectionParser",15],["T_WHITESPACE"," ",15],["T_EXTENDS","extends",15],["T_WHITESPACE"," ",15],["T_STRING","BaseStaticReflectionParser",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * If the current class extends another, get the parser for the latter.\n   *\n   * @param \\Doctrine\\Common\\Reflection\\StaticReflectionParser $parser\n   *   The current static parser.\n   * @param $finder\n   *   The class finder. Must implement\n   *   \\Doctrine\\Common\\Reflection\\ClassFinderInterface, but can do so\n   *   implicitly (i.e., implements the interface's methods but not the actual\n   *   interface).\n   *\n   * @return static|null\n   *   The static parser for the parent if there's a parent class or NULL.\n   *\/",17],["T_WHITESPACE","\n  ",30],["T_PUBLIC","public",31],["T_WHITESPACE"," ",31],["T_STATIC","static",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","getParentParser",31],"(",["T_STRING","BaseStaticReflectionParser",31],["T_WHITESPACE"," ",31],["T_VARIABLE","$parser",31],",",["T_WHITESPACE"," ",31],["T_VARIABLE","$finder",31],")",["T_WHITESPACE"," ",31],"{",["T_WHITESPACE","\n    ",31],["T_COMMENT","\/\/ Ensure the class has been parsed before accessing the parentClassName\n",32],["T_WHITESPACE","    ",33],["T_COMMENT","\/\/ property.\n",33],["T_WHITESPACE","    ",34],["T_VARIABLE","$parser",34],["T_OBJECT_OPERATOR","->",34],["T_STRING","parse",34],"(",")",";",["T_WHITESPACE","\n    ",34],["T_IF","if",35],["T_WHITESPACE"," ",35],"(",["T_VARIABLE","$parser",35],["T_OBJECT_OPERATOR","->",35],["T_STRING","parentClassName",35],")",["T_WHITESPACE"," ",35],"{",["T_WHITESPACE","\n      ",35],["T_RETURN","return",36],["T_WHITESPACE"," ",36],["T_NEW","new",36],["T_WHITESPACE"," ",36],["T_STATIC","static",36],"(",["T_VARIABLE","$parser",36],["T_OBJECT_OPERATOR","->",36],["T_STRING","parentClassName",36],",",["T_WHITESPACE"," ",36],["T_VARIABLE","$finder",36],",",["T_WHITESPACE"," ",36],["T_VARIABLE","$parser",36],["T_OBJECT_OPERATOR","->",36],["T_STRING","classAnnotationOptimize",36],")",";",["T_WHITESPACE","\n    ",36],"}",["T_WHITESPACE","\n  ",37],"}",["T_WHITESPACE","\n\n",38],"}",["T_WHITESPACE","\n",40]]