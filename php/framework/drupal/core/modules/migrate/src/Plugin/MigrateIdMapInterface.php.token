[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","migrate",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","migrate",6],["T_NS_SEPARATOR","\\",6],["T_STRING","MigrateMessageInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","migrate",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Row",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Defines an interface for migrate ID mappings.\n *\n * Migrate ID mappings maintain a relation between source ID and destination ID\n * for audit and rollback purposes.\n *\/",9],["T_WHITESPACE","\n",14],["T_INTERFACE","interface",15],["T_WHITESPACE"," ",15],["T_STRING","MigrateIdMapInterface",15],["T_WHITESPACE"," ",15],["T_EXTENDS","extends",15],["T_WHITESPACE"," ",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Iterator",15],",",["T_WHITESPACE"," ",15],["T_STRING","PluginInspectionInterface",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * Codes reflecting the current status of a map row.\n   *\/",17],["T_WHITESPACE","\n  ",19],["T_CONST","const",20],["T_WHITESPACE"," ",20],["T_STRING","STATUS_IMPORTED",20],["T_WHITESPACE"," ",20],"=",["T_WHITESPACE"," ",20],["T_LNUMBER","0",20],";",["T_WHITESPACE","\n  ",20],["T_CONST","const",21],["T_WHITESPACE"," ",21],["T_STRING","STATUS_NEEDS_UPDATE",21],["T_WHITESPACE"," ",21],"=",["T_WHITESPACE"," ",21],["T_LNUMBER","1",21],";",["T_WHITESPACE","\n  ",21],["T_CONST","const",22],["T_WHITESPACE"," ",22],["T_STRING","STATUS_IGNORED",22],["T_WHITESPACE"," ",22],"=",["T_WHITESPACE"," ",22],["T_LNUMBER","2",22],";",["T_WHITESPACE","\n  ",22],["T_CONST","const",23],["T_WHITESPACE"," ",23],["T_STRING","STATUS_FAILED",23],["T_WHITESPACE"," ",23],"=",["T_WHITESPACE"," ",23],["T_LNUMBER","3",23],";",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Codes reflecting how to handle the destination item on rollback.\n   *\/",25],["T_WHITESPACE","\n  ",27],["T_CONST","const",28],["T_WHITESPACE"," ",28],["T_STRING","ROLLBACK_DELETE",28],["T_WHITESPACE"," ",28],"=",["T_WHITESPACE"," ",28],["T_LNUMBER","0",28],";",["T_WHITESPACE","\n  ",28],["T_CONST","const",29],["T_WHITESPACE"," ",29],["T_STRING","ROLLBACK_PRESERVE",29],["T_WHITESPACE"," ",29],"=",["T_WHITESPACE"," ",29],["T_LNUMBER","1",29],";",["T_WHITESPACE","\n\n  ",29],["T_DOC_COMMENT","\/**\n   * Saves a mapping from the source identifiers to the destination identifiers.\n   *\n   * Called upon import of one row, we record a mapping from the source ID to\n   * the destination ID. Also may be called, setting the third parameter to\n   * NEEDS_UPDATE, to signal an existing record should be re-migrated.\n   *\n   * @param \\Drupal\\migrate\\Row $row\n   *   The raw source data. We use the ID map derived from the source object\n   *   to get the source identifier values.\n   * @param array $destination_id_values\n   *   An array of destination identifier values.\n   * @param int $status\n   *   (optional) Status of the source row in the map. Defaults to\n   *   self::STATUS_IMPORTED.\n   * @param int $rollback_action\n   *   (optional) How to handle the destination object on rollback. Defaults to\n   *   self::ROLLBACK_DELETE.\n   *\/",31],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","saveIdMapping",50],"(",["T_STRING","Row",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$row",50],",",["T_WHITESPACE"," ",50],["T_ARRAY","array",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$destination_id_values",50],",",["T_WHITESPACE"," ",50],["T_VARIABLE","$status",50],["T_WHITESPACE"," ",50],"=",["T_WHITESPACE"," ",50],["T_STRING","self",50],["T_DOUBLE_COLON","::",50],["T_STRING","STATUS_IMPORTED",50],",",["T_WHITESPACE"," ",50],["T_VARIABLE","$rollback_action",50],["T_WHITESPACE"," ",50],"=",["T_WHITESPACE"," ",50],["T_STRING","self",50],["T_DOUBLE_COLON","::",50],["T_STRING","ROLLBACK_DELETE",50],")",";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * Saves a message related to a source record in the migration message table.\n   *\n   * @param array $source_id_values\n   *   The source identifier keyed values of the record, e.g. ['nid' => 5].\n   * @param string $message\n   *   The message to record.\n   * @param int $level\n   *   (optional) The message severity. Defaults to\n   *   MigrationInterface::MESSAGE_ERROR.\n   *\/",52],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","saveMessage",63],"(",["T_ARRAY","array",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$source_id_values",63],",",["T_WHITESPACE"," ",63],["T_VARIABLE","$message",63],",",["T_WHITESPACE"," ",63],["T_VARIABLE","$level",63],["T_WHITESPACE"," ",63],"=",["T_WHITESPACE"," ",63],["T_STRING","MigrationInterface",63],["T_DOUBLE_COLON","::",63],["T_STRING","MESSAGE_ERROR",63],")",";",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * Retrieves an iterator over messages relate to source records.\n   *\n   * @param array $source_id_values\n   *   (optional) The source identifier keyed values of the record, e.g.\n   *   ['nid' => 5]. If empty (the default), all messages are retrieved.\n   * @param int $level\n   *   (optional) Message severity. If NULL (the default), retrieve messages of\n   *   all severities.\n   *\n   * @return \\Iterator\n   *   Retrieves an iterator over the message rows.\n   *\/",65],["T_WHITESPACE","\n  ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","getMessageIterator",78],"(",["T_ARRAY","array",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$source_id_values",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],"[","]",",",["T_WHITESPACE"," ",78],["T_VARIABLE","$level",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_STRING","NULL",78],")",";",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Prepares to run a full update.\n   *\n   * Prepares this migration to run as an update - that is, in addition to\n   * unmigrated content (source records not in the map table) being imported,\n   * previously-migrated content will also be updated in place by marking all\n   * previously-imported content as ready to be re-imported.\n   *\/",80],["T_WHITESPACE","\n  ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","prepareUpdate",88],"(",")",";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Returns the number of processed items in the map.\n   *\n   * @return int\n   *   The count of records in the map table.\n   *\/",90],["T_WHITESPACE","\n  ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","processedCount",96],"(",")",";",["T_WHITESPACE","\n\n  ",96],["T_DOC_COMMENT","\/**\n   * Returns the number of imported items in the map.\n   *\n   * @return int\n   *   The number of imported items.\n   *\/",98],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","importedCount",104],"(",")",";",["T_WHITESPACE","\n\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Returns a count of items which are marked as needing update.\n   *\n   * @return int\n   *   The number of items which need updating.\n   *\/",107],["T_WHITESPACE","\n  ",112],["T_PUBLIC","public",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","updateCount",113],"(",")",";",["T_WHITESPACE","\n\n  ",113],["T_DOC_COMMENT","\/**\n   * Returns the number of items that failed to import.\n   *\n   * @return int\n   *   The number of items that errored out.\n   *\/",115],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","errorCount",121],"(",")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Returns the number of messages saved.\n   *\n   * @return int\n   *   The number of messages.\n   *\/",123],["T_WHITESPACE","\n  ",128],["T_PUBLIC","public",129],["T_WHITESPACE"," ",129],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","messageCount",129],"(",")",";",["T_WHITESPACE","\n\n  ",129],["T_DOC_COMMENT","\/**\n   * Deletes the map and message entries for a given source record.\n   *\n   * @param array $source_id_values\n   *   The source identifier keyed values of the record, e.g. ['nid' => 5].\n   * @param bool $messages_only\n   *   (optional) TRUE to only delete the migrate messages. Defaults to FALSE.\n   *\/",131],["T_WHITESPACE","\n  ",138],["T_PUBLIC","public",139],["T_WHITESPACE"," ",139],["T_FUNCTION","function",139],["T_WHITESPACE"," ",139],["T_STRING","delete",139],"(",["T_ARRAY","array",139],["T_WHITESPACE"," ",139],["T_VARIABLE","$source_id_values",139],",",["T_WHITESPACE"," ",139],["T_VARIABLE","$messages_only",139],["T_WHITESPACE"," ",139],"=",["T_WHITESPACE"," ",139],["T_STRING","FALSE",139],")",";",["T_WHITESPACE","\n\n  ",139],["T_DOC_COMMENT","\/**\n   * Deletes the map and message table entries for a given destination row.\n   *\n   * @param array $destination_id_values\n   *   The destination identifier key value pairs we should do the deletes for.\n   *\/",141],["T_WHITESPACE","\n  ",146],["T_PUBLIC","public",147],["T_WHITESPACE"," ",147],["T_FUNCTION","function",147],["T_WHITESPACE"," ",147],["T_STRING","deleteDestination",147],"(",["T_ARRAY","array",147],["T_WHITESPACE"," ",147],["T_VARIABLE","$destination_id_values",147],")",";",["T_WHITESPACE","\n\n  ",147],["T_DOC_COMMENT","\/**\n   * Clears all messages from the map.\n   *\/",149],["T_WHITESPACE","\n  ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","clearMessages",152],"(",")",";",["T_WHITESPACE","\n\n  ",152],["T_DOC_COMMENT","\/**\n   * Retrieves a row from the map table based on source identifier values.\n   *\n   * @param array $source_id_values\n   *   The source identifier keyed values of the record, e.g. ['nid' => 5].\n   *\n   * @return array\n   *   The raw row data as an associative array.\n   *\/",154],["T_WHITESPACE","\n  ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","getRowBySource",163],"(",["T_ARRAY","array",163],["T_WHITESPACE"," ",163],["T_VARIABLE","$source_id_values",163],")",";",["T_WHITESPACE","\n\n  ",163],["T_DOC_COMMENT","\/**\n   * Retrieves a row by the destination identifiers.\n   *\n   * @param array $destination_id_values\n   *   The destination identifier keyed values of the record, e.g. ['nid' => 5].\n   *\n   * @return array\n   *   The row(s) of data.\n   *\/",165],["T_WHITESPACE","\n  ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","getRowByDestination",174],"(",["T_ARRAY","array",174],["T_WHITESPACE"," ",174],["T_VARIABLE","$destination_id_values",174],")",";",["T_WHITESPACE","\n\n  ",174],["T_DOC_COMMENT","\/**\n   * Retrieves an array of map rows marked as needing update.\n   *\n   * @param int $count\n   *   The maximum number of rows to return.\n   *\n   * @return array\n   *   Array of map row objects that need updating.\n   *\/",176],["T_WHITESPACE","\n  ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","getRowsNeedingUpdate",185],"(",["T_VARIABLE","$count",185],")",";",["T_WHITESPACE","\n\n  ",185],["T_DOC_COMMENT","\/**\n   * Looks up the source identifier.\n   *\n   * Given a (possibly multi-field) destination identifier value, return the\n   * (possibly multi-field) source identifier value mapped to it.\n   *\n   * @param array $destination_id_values\n   *   The destination identifier keyed values of the record, e.g. ['nid' => 5].\n   *\n   * @return array\n   *   The source identifier keyed values of the record, e.g. ['nid' => 5], or\n   *   an empty array on failure.\n   *\/",187],["T_WHITESPACE","\n  ",199],["T_PUBLIC","public",200],["T_WHITESPACE"," ",200],["T_FUNCTION","function",200],["T_WHITESPACE"," ",200],["T_STRING","lookupSourceID",200],"(",["T_ARRAY","array",200],["T_WHITESPACE"," ",200],["T_VARIABLE","$destination_id_values",200],")",";",["T_WHITESPACE","\n\n  ",200],["T_DOC_COMMENT","\/**\n   * Looks up the destination identifier corresponding to a source key.\n   *\n   * Given a (possibly multi-field) source identifier value, return the\n   * (possibly multi-field) destination identifier value it is mapped to.\n   *\n   * @param array $source_id_values\n   *   The source identifier keyed values of the record, e.g. ['nid' => 5].\n   *\n   * @return array\n   *   The destination identifier values of the record, or empty on failure.\n   *\n   * @deprecated in Drupal 8.1.x, will be removed before Drupal 9.0.x. Use\n   *   lookupDestinationIds() instead.\n   *\/",202],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","lookupDestinationId",217],"(",["T_ARRAY","array",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$source_id_values",217],")",";",["T_WHITESPACE","\n\n  ",217],["T_DOC_COMMENT","\/**\n   * Looks up the destination identifiers corresponding to a source key.\n   *\n   * This can look up a subset of source keys if only some are provided, and\n   * will return all destination keys that match.\n   *\n   * @param array $source_id_values\n   *   The source identifier keyed values of the records, e.g. ['nid' => 5].\n   *   If unkeyed, the first count($source_id_values) keys will be assumed.\n   *\n   * @return array\n   *    An array of arrays of destination identifier values.\n   *\n   * @throws \\Drupal\\migrate\\MigrateException\n   *   Thrown when $source_id_values contains unknown keys, or is the wrong\n   *   length.\n   *\/",219],["T_WHITESPACE","\n  ",235],["T_PUBLIC","public",236],["T_WHITESPACE"," ",236],["T_FUNCTION","function",236],["T_WHITESPACE"," ",236],["T_STRING","lookupDestinationIds",236],"(",["T_ARRAY","array",236],["T_WHITESPACE"," ",236],["T_VARIABLE","$source_id_values",236],")",";",["T_WHITESPACE","\n\n  ",236],["T_DOC_COMMENT","\/**\n   * Looks up the destination identifier currently being iterated.\n   *\n   * @return array\n   *   The destination identifier values of the record, or NULL on failure.\n   *\/",238],["T_WHITESPACE","\n  ",243],["T_PUBLIC","public",244],["T_WHITESPACE"," ",244],["T_FUNCTION","function",244],["T_WHITESPACE"," ",244],["T_STRING","currentDestination",244],"(",")",";",["T_WHITESPACE","\n\n  ",244],["T_DOC_COMMENT","\/**\n   * Looks up the source identifier(s) currently being iterated.\n   *\n   * @return array\n   *   The source identifier values of the record, or NULL on failure.\n   *\/",246],["T_WHITESPACE","\n  ",251],["T_PUBLIC","public",252],["T_WHITESPACE"," ",252],["T_FUNCTION","function",252],["T_WHITESPACE"," ",252],["T_STRING","currentSource",252],"(",")",";",["T_WHITESPACE","\n\n  ",252],["T_DOC_COMMENT","\/**\n   * Removes any persistent storage used by this map.\n   *\n   * For example, remove the map and message tables.\n   *\/",254],["T_WHITESPACE","\n  ",258],["T_PUBLIC","public",259],["T_WHITESPACE"," ",259],["T_FUNCTION","function",259],["T_WHITESPACE"," ",259],["T_STRING","destroy",259],"(",")",";",["T_WHITESPACE","\n\n  ",259],["T_DOC_COMMENT","\/**\n   * Gets the qualified map table.\n   *\n   * @todo Remove this as this is SQL only and so doesn't belong to the interface.\n   *\/",261],["T_WHITESPACE","\n  ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","getQualifiedMapTableName",266],"(",")",";",["T_WHITESPACE","\n\n  ",266],["T_DOC_COMMENT","\/**\n   * Sets the migrate message.\n   *\n   * @param \\Drupal\\migrate\\MigrateMessageInterface $message\n   *   The message to display.\n   *\/",268],["T_WHITESPACE","\n  ",273],["T_PUBLIC","public",274],["T_WHITESPACE"," ",274],["T_FUNCTION","function",274],["T_WHITESPACE"," ",274],["T_STRING","setMessage",274],"(",["T_STRING","MigrateMessageInterface",274],["T_WHITESPACE"," ",274],["T_VARIABLE","$message",274],")",";",["T_WHITESPACE","\n\n  ",274],["T_DOC_COMMENT","\/**\n   * Sets a specified record to be updated, if it exists.\n   *\n   * @param array $source_id_values\n   *   The source identifier values of the record.\n   *\/",276],["T_WHITESPACE","\n  ",281],["T_PUBLIC","public",282],["T_WHITESPACE"," ",282],["T_FUNCTION","function",282],["T_WHITESPACE"," ",282],["T_STRING","setUpdate",282],"(",["T_ARRAY","array",282],["T_WHITESPACE"," ",282],["T_VARIABLE","$source_id_values",282],")",";",["T_WHITESPACE","\n\n",282],"}",["T_WHITESPACE","\n",284]]