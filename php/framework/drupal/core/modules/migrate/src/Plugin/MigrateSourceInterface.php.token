[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","migrate",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","migrate",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Row",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines an interface for migrate sources.\n *\n * @see \\Drupal\\migrate\\Plugin\\MigratePluginManager\n * @see \\Drupal\\migrate\\Annotation\\MigrateSource\n * @see \\Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\n * @see plugin_api\n *\n * @ingroup migration\n *\/",8],["T_WHITESPACE","\n",17],["T_INTERFACE","interface",18],["T_WHITESPACE"," ",18],["T_STRING","MigrateSourceInterface",18],["T_WHITESPACE"," ",18],["T_EXTENDS","extends",18],["T_WHITESPACE"," ",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Countable",18],",",["T_WHITESPACE"," ",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Iterator",18],",",["T_WHITESPACE"," ",18],["T_STRING","PluginInspectionInterface",18],["T_WHITESPACE"," ",18],"{",["T_WHITESPACE","\n\n  ",18],["T_DOC_COMMENT","\/**\n   * Returns available fields on the source.\n   *\n   * @return array\n   *   Available fields in the source, keys are the field machine names as used\n   *   in field mappings, values are descriptions.\n   *\/",20],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","fields",27],"(",")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Adds additional data to the row.\n   *\n   * @param \\Drupal\\Migrate\\Row $row\n   *   The row object.\n   *\n   * @return bool\n   *   FALSE if this row needs to be skipped.\n   *\/",29],["T_WHITESPACE","\n  ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","prepareRow",38],"(",["T_STRING","Row",38],["T_WHITESPACE"," ",38],["T_VARIABLE","$row",38],")",";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * Allows class to decide how it will react when it is treated like a string.\n   *\/",40],["T_WHITESPACE","\n  ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","__toString",43],"(",")",";",["T_WHITESPACE","\n\n  ",43],["T_DOC_COMMENT","\/**\n   * Defines the source fields uniquely identifying a source row.\n   *\n   * None of these fields should contain a NULL value. If necessary, use\n   * prepareRow() or hook_migrate_prepare_row() to rewrite NULL values to\n   * appropriate empty values (such as '' or 0).\n   *\n   * @return array[]\n   *   An associative array of field definitions keyed by field ID. Values are\n   *   associative arrays with a structure that contains the field type ('type'\n   *   key). The other keys are the field storage settings as they are returned\n   *   by FieldStorageDefinitionInterface::getSettings(). As an example, for a\n   *   composite source primary key that is defined by an integer and a\n   *   string, the returned value might look like:\n   *   @code\n   *     return [\n   *       'id' => [\n   *         'type' => 'integer',\n   *         'unsigned' => FALSE,\n   *         'size' => 'big',\n   *       ],\n   *       'version' => [\n   *         'type' => 'string',\n   *         'max_length' => 64,\n   *         'is_ascii' => TRUE,\n   *       ],\n   *     ];\n   *   @endcode\n   *   If 'type' points to a field plugin with multiple columns and needs to\n   *   refer to a column different than 'value', the key of that column will be\n   *   appended as a suffix to the plugin name, separated by dot ('.'). Example:\n   *   @code\n   *     return [\n   *       'format' => [\n   *         'type' => 'text.format',\n   *       ],\n   *     ];\n   *   @endcode\n   *   Additional custom keys\/values, that are not part of field storage\n   *   definition, can be passed in definitions. The most common setting, passed\n   *   along the ID definition, is 'alias' used by SqlBase source plugin:\n   *   @code\n   *     return [\n   *       'nid' => [\n   *         'type' => 'integer',\n   *         'alias' => 'n',\n   *       ],\n   *     ];\n   *   @endcode\n   *\n   * @see \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface::getSettings()\n   * @see \\Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\IntegerItem\n   * @see \\Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\StringItem\n   * @see \\Drupal\\text\\Plugin\\Field\\FieldType\\TextItem\n   * @see \\Drupal\\migrate\\Plugin\\migrate\\source\\SqlBase\n   *\/",45],["T_WHITESPACE","\n  ",100],["T_PUBLIC","public",101],["T_WHITESPACE"," ",101],["T_FUNCTION","function",101],["T_WHITESPACE"," ",101],["T_STRING","getIds",101],"(",")",";",["T_WHITESPACE","\n\n",101],"}",["T_WHITESPACE","\n",103]]