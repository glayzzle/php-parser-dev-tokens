[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","big_pipe",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Render",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for sending an HTML response in chunks (to get faster page loads).\n *\n * At a high level, BigPipe sends a HTML response in chunks:\n * 1. one chunk: everything until just before <\/body> \u00e2\u0080\u0094 this contains BigPipe\n *    placeholders for the personalized parts of the page. Hence this sends the\n *    non-personalized parts of the page. Let's call it The Skeleton.\n * 2. N chunks: a <script> tag per BigPipe placeholder in The Skeleton.\n * 3. one chunk: <\/body> and everything after it.\n *\n * This is conceptually identical to Facebook's BigPipe (hence the name).\n *\n * @see https:\/\/www.facebook.com\/notes\/facebook-engineering\/bigpipe-pipelining-web-pages-for-high-performance\/389414033919\n *\n * The major way in which Drupal differs from Facebook's implementation (and\n * others) is in its ability to automatically figure out which parts of the page\n * can benefit from BigPipe-style delivery. Drupal's render system has the\n * concept of \"auto-placeholdering\": content that is too dynamic is replaced\n * with a placeholder that can then be rendered at a later time. On top of that,\n * it also has the concept of \"placeholder strategies\": by default, placeholders\n * are replaced on the server side and the response is blocked on all of them\n * being replaced. But it's possible to add additional placeholder strategies.\n * BigPipe is just another placeholder strategy. Others could be ESI, AJAX \u00e2\u0080\u00a6\n *\n * @see https:\/\/www.drupal.org\/developing\/api\/8\/render\/arrays\/cacheability\/auto-placeholdering\n * @see \\Drupal\\Core\\Render\\PlaceholderGeneratorInterface::shouldAutomaticallyPlaceholder()\n * @see \\Drupal\\Core\\Render\\Placeholder\\PlaceholderStrategyInterface\n * @see \\Drupal\\Core\\Render\\Placeholder\\SingleFlushStrategy\n * @see \\Drupal\\big_pipe\\Render\\Placeholder\\BigPipeStrategy\n *\n * There is also one noteworthy technical addition that Drupal makes. BigPipe as\n * described above, and as implemented by Facebook, can only work if JavaScript\n * is enabled. The BigPipe module also makes it possible to replace placeholders\n * using BigPipe in-situ, without JavaScript. This is not technically BigPipe at\n * all; it's just the use of multiple flushes. Since it is able to reuse much of\n * the logic though, we choose to call this \"no-JS BigPipe\".\n *\n * However, there is also a tangible benefit: some dynamic\/expensive content is\n * not HTML, but for example a HTML attribute value (or part thereof). It's not\n * possible to efficiently replace such content using JavaScript, so \"classic\"\n * BigPipe is out of the question. For example: CSRF tokens in URLs.\n *\n * This allows us to use both no-JS BigPipe and \"classic\" BigPipe in the same\n * response to maximize the amount of content we can send as early as possible.\n *\n * Finally, a closer look at the implementation, and how it supports and reuses\n * existing Drupal concepts:\n * 1. BigPipe placeholders: 1 HtmlResponse + N embedded AjaxResponses.\n *   - Before a BigPipe response is sent, it is just a HTML response that\n *     contains BigPipe placeholders. Those placeholders look like\n *     <div data-big-pipe-placeholder-id=\"\u00e2\u0080\u00a6\"><\/div>. JavaScript is used to\n *     replace those placeholders.\n *     Therefore these placeholders are actually sent to the client.\n *   - The Skeleton of course has attachments, including most notably asset\n *     libraries. And those we track in drupalSettings.ajaxPageState.libraries \u00e2\u0080\u0094\n *     so that when we load new content through AJAX, we don't load the same\n *     asset libraries again. A HTML page can have multiple AJAX responses, each\n *     of which should take into account the combined AJAX page state of the\n *     HTML document and all preceding AJAX responses.\n *   - BigPipe does not make use of multiple AJAX requests\/responses. It uses a\n *     single HTML response. But it is a more long-lived one: The Skeleton is\n *     sent first, the closing <\/body> tag is not yet sent, and the connection\n *     is kept open. Whenever another BigPipe Placeholder is rendered, Drupal\n *     sends (and so actually appends to the already-sent HTML) something like\n *     <script type=\"application\/vnd.drupal-ajax\">[{\"command\":\"settings\",\"settings\":{\u00e2\u0080\u00a6}}, {\"command\":\u00e2\u0080\u00a6}.\n *   - So, for every BigPipe placeholder, we send such a <script\n *     type=\"application\/vnd.drupal-ajax\"> tag. And the contents of that tag is\n *     exactly like an AJAX response. The BigPipe module has JavaScript that\n *     listens for these and applies them. Let's call it an Embedded AJAX\n *     Response (since it is embedded in the HTML response). Now for the\n *     interesting bit: each of those Embedded AJAX Responses must also take\n *     into account the cumulative AJAX page state of the HTML document and all\n *     preceding Embedded AJAX responses.\n * 2. No-JS BigPipe placeholders: 1 HtmlResponse + N embedded HtmlResponses.\n *   - Before a BigPipe response is sent, it is just a HTML response that\n *     contains no-JS BigPipe placeholders. Those placeholders can take two\n *     different forms:\n *     1. <div data-big-pipe-nojs-placeholder-id=\"\u00e2\u0080\u00a6\"><\/div> if it's a\n *        placeholder that will be replaced by HTML\n *     2. big_pipe_nojs_placeholder_attribute_safe:\u00e2\u0080\u00a6 if it's a placeholder\n *        inside a HTML attribute, in which 1. would be invalid (angle brackets\n *        are not allowed inside HTML attributes)\n *     No-JS BigPipe placeholders are not replaced using JavaScript, they must\n *     be replaced upon sending the BigPipe response. So, while the response is\n *     being sent, upon encountering these placeholders, their corresponding\n *     placeholder replacements are sent instead.\n *     Therefore these placeholders are never actually sent to the client.\n *   - See second bullet of point 1.\n *   - No-JS BigPipe does not use multiple AJAX requests\/responses. It uses a\n *     single HTML response. But it is a more long-lived one: The Skeleton is\n *     split into multiple parts, the separators are where the no-JS BigPipe\n *     placeholders used to be. Whenever another no-JS BigPipe placeholder is\n *     rendered, Drupal sends (and so actually appends to the already-sent HTML)\n *     something like\n *     <link rel=\"stylesheet\" \u00e2\u0080\u00a6><script \u00e2\u0080\u00a6><content>.\n *   - So, for every no-JS BigPipe placeholder, we send its associated CSS and\n *     header JS that has not already been sent (the bottom JS is not yet sent,\n *     so we can accumulate all of it and send it together at the end). This\n *     ensures that the markup is rendered as it was originally intended: its\n *     CSS and JS used to be blocking, and it still is. Let's call it an\n *     Embedded HTML response. Each of those Embedded HTML Responses must also\n *     take into account the cumulative AJAX page state of the HTML document and\n *     all preceding Embedded HTML responses.\n *   - Finally: any non-critical JavaScript associated with all Embedded HTML\n *     Responses, i.e. any footer\/bottom\/non-header JavaScript, is loaded after\n *     The Skeleton.\n *\n * Combining all of the above, when using both BigPipe placeholders and no-JS\n * BigPipe placeholders, we therefore send: 1 HtmlResponse + M Embedded HTML\n * Responses + N Embedded AJAX Responses. Schematically, we send these chunks:\n *  1. Byte zero until 1st no-JS placeholder: headers + <html><head \/><div>\u00e2\u0080\u00a6<\/div>\n *  2. 1st no-JS placeholder replacement: <link rel=\"stylesheet\" \u00e2\u0080\u00a6><script \u00e2\u0080\u00a6><content>\n *  3. Content until 2nd no-JS placeholder: <div>\u00e2\u0080\u00a6<\/div>\n *  4. 2nd no-JS placeholder replacement: <link rel=\"stylesheet\" \u00e2\u0080\u00a6><script \u00e2\u0080\u00a6><content>\n *  5. Content until 3rd no-JS placeholder: <div>\u00e2\u0080\u00a6<\/div>\n *  6. [\u00e2\u0080\u00a6 repeat until all no-JS placeholder replacements are sent \u00e2\u0080\u00a6]\n *  7. Send content after last no-JS placeholder.\n *  8. Send script_bottom (markup to load bottom i.e. non-critical JS).\n *  9. 1st placeholder replacement: <script type=\"application\/vnd.drupal-ajax\">[{\"command\":\"settings\",\"settings\":{\u00e2\u0080\u00a6}}, {\"command\":\u00e2\u0080\u00a6}\n * 10. 2nd placeholder replacement: <script type=\"application\/vnd.drupal-ajax\">[{\"command\":\"settings\",\"settings\":{\u00e2\u0080\u00a6}}, {\"command\":\u00e2\u0080\u00a6}\n * 11. [\u00e2\u0080\u00a6 repeat until all placeholder replacements are sent \u00e2\u0080\u00a6]\n * 12. Send <\/body> and everything after it.\n * 13. Terminate request\/response cycle.\n *\n * @see \\Drupal\\big_pipe\\EventSubscriber\\HtmlResponseBigPipeSubscriber\n * @see \\Drupal\\big_pipe\\Render\\Placeholder\\BigPipeStrategy\n *\/",5],["T_WHITESPACE","\n",131],["T_INTERFACE","interface",132],["T_WHITESPACE"," ",132],["T_STRING","BigPipeInterface",132],["T_WHITESPACE"," ",132],"{",["T_WHITESPACE","\n\n  ",132],["T_DOC_COMMENT","\/**\n   * Sends an HTML response in chunks using the BigPipe technique.\n   *\n   * @param string $content\n   *   The HTML response content to send.\n   * @param array $attachments\n   *   The HTML response's attachments.\n   *\n   * @internal\n   *   This method should only be invoked by\n   *   \\Drupal\\big_pipe\\Render\\BigPipeResponse, which is itself an internal\n   *   class. Furthermore, the signature of this method will change in\n   *   https:\/\/www.drupal.org\/node\/2657684.\n   *\/",134],["T_WHITESPACE","\n  ",147],["T_PUBLIC","public",148],["T_WHITESPACE"," ",148],["T_FUNCTION","function",148],["T_WHITESPACE"," ",148],["T_STRING","sendContent",148],"(",["T_VARIABLE","$content",148],",",["T_WHITESPACE"," ",148],["T_ARRAY","array",148],["T_WHITESPACE"," ",148],["T_VARIABLE","$attachments",148],")",";",["T_WHITESPACE","\n\n",148],"}",["T_WHITESPACE","\n",150]]