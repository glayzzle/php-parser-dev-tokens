[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","filter",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Plugin",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ConfigurablePluginInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Form",7],["T_NS_SEPARATOR","\\",7],["T_STRING","FormStateInterface",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Defines the interface for text processing filter plugins.\n *\n * User submitted content is passed through a group of filters before it is\n * output in HTML, in order to remove insecure or unwanted parts, correct or\n * enhance the formatting, transform special keywords, etc. A group of filters\n * is referred to as a \"text format\". Administrators can create as many text\n * formats as needed. Individual filters can be enabled and configured\n * differently for each text format.\n *\n * @see \\Drupal\\filter\\Entity\\FilterFormat\n *\n * Filtering is a two-step process. First, the content is 'prepared' by calling\n * the FilterInterface::prepare() method for every filter. The purpose is to\n * escape HTML-like structures. For example, imagine a filter which allows the\n * user to paste entire chunks of programming code without requiring manual\n * escaping of special HTML characters like < or &. If the programming code were\n * left untouched, then other filters could think it was HTML and change it. For\n * many filters, the prepare step is not necessary.\n *\n * The second step is the actual processing step. The result from passing the\n * text through all the filters' prepare steps gets passed to all the filters\n * again, this time to the FilterInterface::process() method. The process method\n * should then actually change the content: transform URLs into hyperlinks,\n * convert smileys into images, etc.\n *\n * @see filter_process_text()\n * @see check_markup()\n *\n * Typically, only text processing is applied, but in more advanced use cases,\n * filters may also:\n * - declare asset libraries to be loaded;\n * - declare cache tags that the resulting filtered text depends upon, so when\n *   either of those cache tags is invalidated, the render-cached HTML that the\n *   filtered text is part of should also be invalidated;\n * - create placeholders to apply uncacheable filtering, for example because it\n *   changes every few seconds.\n *\n * @see \\Drupal\\filter\\Plugin\\FilterInterface::process()\n *\n * Filters are discovered through annotations, which may contain the following\n * definition properties:\n * - title: (required) An administrative summary of what the filter does.\n *   - type: (required) A classification of the filter's purpose. This is one\n *     of the following:\n *     - FilterInterface::TYPE_HTML_RESTRICTOR: HTML tag and attribute\n *       restricting filters.\n *     - FilterInterface::TYPE_MARKUP_LANGUAGE: Non-HTML markup language filters\n *       that generate HTML.\n *     - FilterInterface::TYPE_TRANSFORM_IRREVERSIBLE: Irreversible\n *       transformation filters.\n *     - FilterInterface::TYPE_TRANSFORM_REVERSIBLE: Reversible transformation\n *       filters.\n * - description: Additional administrative information about the filter's\n *   behavior, if needed for clarification.\n * - status: The default status for new instances of the filter. Defaults to\n *   FALSE.\n * - weight: A default weight for new instances of the filter. Defaults to 0.\n * - settings: An associative array containing default settings for new\n *   instances of the filter.\n *\n * Most implementations want to extend the generic basic implementation for\n * filter plugins.\n *\n * @see \\Drupal\\filter\\Annotation\\Filter\n * @see \\Drupal\\filter\\FilterPluginManager\n * @see \\Drupal\\filter\\Plugin\\FilterBase\n * @see plugin_api\n *\/",9],["T_WHITESPACE","\n",77],["T_INTERFACE","interface",78],["T_WHITESPACE"," ",78],["T_STRING","FilterInterface",78],["T_WHITESPACE"," ",78],["T_EXTENDS","extends",78],["T_WHITESPACE"," ",78],["T_STRING","ConfigurablePluginInterface",78],",",["T_WHITESPACE"," ",78],["T_STRING","PluginInspectionInterface",78],["T_WHITESPACE"," ",78],"{",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Non-HTML markup language filters that generate HTML.\n   *\/",80],["T_WHITESPACE","\n  ",82],["T_CONST","const",83],["T_WHITESPACE"," ",83],["T_STRING","TYPE_MARKUP_LANGUAGE",83],["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_LNUMBER","0",83],";",["T_WHITESPACE","\n\n  ",83],["T_DOC_COMMENT","\/**\n   * HTML tag and attribute restricting filters to prevent XSS attacks.\n   *\/",85],["T_WHITESPACE","\n  ",87],["T_CONST","const",88],["T_WHITESPACE"," ",88],["T_STRING","TYPE_HTML_RESTRICTOR",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_LNUMBER","1",88],";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Reversible transformation filters.\n   *\/",90],["T_WHITESPACE","\n  ",92],["T_CONST","const",93],["T_WHITESPACE"," ",93],["T_STRING","TYPE_TRANSFORM_REVERSIBLE",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_LNUMBER","2",93],";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * Irreversible transformation filters.\n   *\/",95],["T_WHITESPACE","\n  ",97],["T_CONST","const",98],["T_WHITESPACE"," ",98],["T_STRING","TYPE_TRANSFORM_IRREVERSIBLE",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_LNUMBER","3",98],";",["T_WHITESPACE","\n\n  ",98],["T_DOC_COMMENT","\/**\n   * Returns the processing type of this filter plugin.\n   *\n   * @return int\n   *   One of:\n   *   - FilterInterface::TYPE_MARKUP_LANGUAGE\n   *   - FilterInterface::TYPE_HTML_RESTRICTOR\n   *   - FilterInterface::TYPE_TRANSFORM_REVERSIBLE\n   *   - FilterInterface::TYPE_TRANSFORM_IRREVERSIBLE\n   *\/",100],["T_WHITESPACE","\n  ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","getType",110],"(",")",";",["T_WHITESPACE","\n\n  ",110],["T_DOC_COMMENT","\/**\n   * Returns the administrative label for this filter plugin.\n   *\n   * @return string\n   *\/",112],["T_WHITESPACE","\n  ",116],["T_PUBLIC","public",117],["T_WHITESPACE"," ",117],["T_FUNCTION","function",117],["T_WHITESPACE"," ",117],["T_STRING","getLabel",117],"(",")",";",["T_WHITESPACE","\n\n  ",117],["T_DOC_COMMENT","\/**\n   * Returns the administrative description for this filter plugin.\n   *\n   * @return string\n   *\/",119],["T_WHITESPACE","\n  ",123],["T_PUBLIC","public",124],["T_WHITESPACE"," ",124],["T_FUNCTION","function",124],["T_WHITESPACE"," ",124],["T_STRING","getDescription",124],"(",")",";",["T_WHITESPACE","\n\n  ",124],["T_DOC_COMMENT","\/**\n   * Generates a filter's settings form.\n   *\n   * @param array $form\n   *   A minimally prepopulated form array.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The state of the (entire) configuration form.\n   *\n   * @return array\n   *   The $form array with additional form elements for the settings of this\n   *   filter. The submitted form values should match $this->settings.\n   *\/",126],["T_WHITESPACE","\n  ",137],["T_PUBLIC","public",138],["T_WHITESPACE"," ",138],["T_FUNCTION","function",138],["T_WHITESPACE"," ",138],["T_STRING","settingsForm",138],"(",["T_ARRAY","array",138],["T_WHITESPACE"," ",138],["T_VARIABLE","$form",138],",",["T_WHITESPACE"," ",138],["T_STRING","FormStateInterface",138],["T_WHITESPACE"," ",138],["T_VARIABLE","$form_state",138],")",";",["T_WHITESPACE","\n\n  ",138],["T_DOC_COMMENT","\/**\n   * Prepares the text for processing.\n   *\n   * Filters should not use the prepare method for anything other than escaping,\n   * because that would short-circuit the control the user has over the order in\n   * which filters are applied.\n   *\n   * @param string $text\n   *   The text string to be filtered.\n   * @param string $langcode\n   *   The language code of the text to be filtered.\n   *\n   * @return string\n   *   The prepared, escaped text.\n   *\/",140],["T_WHITESPACE","\n  ",154],["T_PUBLIC","public",155],["T_WHITESPACE"," ",155],["T_FUNCTION","function",155],["T_WHITESPACE"," ",155],["T_STRING","prepare",155],"(",["T_VARIABLE","$text",155],",",["T_WHITESPACE"," ",155],["T_VARIABLE","$langcode",155],")",";",["T_WHITESPACE","\n\n  ",155],["T_DOC_COMMENT","\/**\n   * Performs the filter processing.\n   *\n   * @param string $text\n   *   The text string to be filtered.\n   * @param string $langcode\n   *   The language code of the text to be filtered.\n   *\n   * @return \\Drupal\\filter\\FilterProcessResult\n   *   The filtered text, wrapped in a FilterProcessResult object, and possibly\n   *   with associated assets, cacheability metadata and placeholders.\n   *\n   * @see \\Drupal\\filter\\FilterProcessResult\n   *\/",157],["T_WHITESPACE","\n  ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","process",171],"(",["T_VARIABLE","$text",171],",",["T_WHITESPACE"," ",171],["T_VARIABLE","$langcode",171],")",";",["T_WHITESPACE","\n\n  ",171],["T_DOC_COMMENT","\/**\n   * Returns HTML allowed by this filter's configuration.\n   *\n   * May be implemented by filters of the FilterInterface::TYPE_HTML_RESTRICTOR\n   * type, this won't be used for filters of other types; they should just\n   * return FALSE.\n   *\n   * This callback function is only necessary for filters that strip away HTML\n   * tags (and possibly attributes) and allows other modules to gain insight in\n   * a generic manner into which HTML tags and attributes are allowed by a\n   * format.\n   *\n   * @return array|false\n   *   A nested array with *either* of the following keys:\n   *     - 'allowed': (optional) the allowed tags as keys, and for each of those\n   *       tags (keys) either of the following values:\n   *       - TRUE to indicate any attribute is allowed\n   *       - FALSE to indicate no attributes are allowed\n   *       - an array to convey attribute restrictions: the keys must be\n   *         attribute names (which may use a wildcard, e.g. \"data-*\"), the\n   *         possible values are similar to the above:\n   *           - TRUE to indicate any attribute value is allowed\n   *           - FALSE to indicate the attribute is forbidden\n   *           - an array to convey attribute value restrictions: the key must\n   *             be attribute values (which may use a wildcard, e.g. \"xsd:*\"),\n   *             the possible values are TRUE or FALSE: to mark the attribute\n   *             value as allowed or forbidden, respectively\n   *     -  'forbidden_tags': (optional) the forbidden tags\n   *\n   *   There is one special case: the \"wildcard tag\", \"*\": any attribute\n   *   restrictions on that pseudotag apply to all tags.\n   *\n   *   If no restrictions apply, then FALSE must be returned.\n   *\n   *   Here is a concrete example, for a very granular filter:\n   *     @code\n   *     array(\n   *       'allowed' => array(\n   *         \/\/ Allows any attribute with any value on the <div> tag.\n   *         'div' => TRUE,\n   *         \/\/ Allows no attributes on the <p> tag.\n   *         'p' => FALSE,\n   *         \/\/ Allows the following attributes on the <a> tag:\n   *         \/\/  - 'href', with any value;\n   *         \/\/  - 'rel', with the value 'nofollow' value.\n   *         'a' => array(\n   *           'href' => TRUE,\n   *           'rel' => array('nofollow' => TRUE),\n   *         ),\n   *         \/\/ Only allows the 'src' and 'alt' attributes on the <alt> tag,\n   *         \/\/ with any value.\n   *         'img' => array(\n   *           'src' => TRUE,\n   *           'alt' => TRUE,\n   *         ),\n   *         \/\/ Allow RDFa on <span> tags, using only the dc, foaf, xsd and sioc\n   *         \/\/ vocabularies\/namespaces.\n   *         'span' => array(\n   *           'property' => array('dc:*' => TRUE, 'foaf:*' => TRUE),\n   *           'datatype' => array('xsd:*' => TRUE),\n   *           'rel' => array('sioc:*' => TRUE),\n   *         ),\n   *         \/\/ Forbid the 'style' and 'on*' ('onClick' etc.) attributes on any\n   *         \/\/ tag.\n   *         '*' => array(\n   *           'style' => FALSE,\n   *           'on*' => FALSE,\n   *         ),\n   *       )\n   *     )\n   *     @endcode\n   *\n   *   A simpler example, for a very coarse filter:\n   *     @code\n   *     array(\n   *       'forbidden_tags' => array('iframe', 'script')\n   *     )\n   *     @endcode\n   *\n   *   The simplest example possible: a filter that doesn't allow any HTML:\n   *     @code\n   *     array(\n   *       'allowed' => array()\n   *     )\n   *     @endcode\n   *\n   *   And for a filter that applies no restrictions, i.e. allows any HTML:\n   *     @code\n   *     FALSE\n   *     @endcode\n   *\n   * @see \\Drupal\\filter\\Entity\\FilterFormatInterface::getHtmlRestrictions()\n   *\/",173],["T_WHITESPACE","\n  ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","getHTMLRestrictions",266],"(",")",";",["T_WHITESPACE","\n\n  ",266],["T_DOC_COMMENT","\/**\n   * Generates a filter's tip.\n   *\n   * A filter's tips should be informative and to the point. Short tips are\n   * preferably one-liners.\n   *\n   * @param bool $long\n   *   Whether this callback should return a short tip to display in a form\n   *   (FALSE), or whether a more elaborate filter tips should be returned for\n   *   template_preprocess_filter_tips() (TRUE).\n   *\n   * @return string|null\n   *   Translated text to display as a tip, or NULL if this filter has no tip.\n   *\n   * @todo Split into getSummaryItem() and buildGuidelines().\n   *\/",268],["T_WHITESPACE","\n  ",283],["T_PUBLIC","public",284],["T_WHITESPACE"," ",284],["T_FUNCTION","function",284],["T_WHITESPACE"," ",284],["T_STRING","tips",284],"(",["T_VARIABLE","$long",284],["T_WHITESPACE"," ",284],"=",["T_WHITESPACE"," ",284],["T_STRING","FALSE",284],")",";",["T_WHITESPACE","\n\n",284],"}",["T_WHITESPACE","\n",286]]