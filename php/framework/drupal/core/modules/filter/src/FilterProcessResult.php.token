[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","filter",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Utility",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Html",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Utility",6],["T_NS_SEPARATOR","\\",6],["T_STRING","UrlHelper",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Render",7],["T_NS_SEPARATOR","\\",7],["T_STRING","BubbleableMetadata",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Used to return values from a text filter plugin's processing method.\n *\n * The typical use case for a text filter plugin's processing method is to just\n * apply some filtering to the given text, but for more advanced use cases,\n * it may be necessary to also:\n * - Declare asset libraries to be loaded.\n * - Declare cache tags that the filtered text depends upon, so when either of\n *   those cache tags is invalidated, the filtered text should also be\n *   invalidated.\n * - Declare cache context to vary by, e.g. 'language' to do language-specific\n *   filtering.\n * - Declare a maximum age for the filtered text.\n * - Apply uncacheable filtering, for example because it differs per user.\n *\n * In case a filter needs one or more of these advanced use cases, it can use\n * the additional methods available.\n *\n * The typical use case:\n * @code\n * public function process($text, $langcode) {\n *   \/\/ Modify $text.\n *\n *   return new FilterProcessResult($text);\n * }\n * @endcode\n *\n * The advanced use cases:\n * @code\n * public function process($text, $langcode) {\n *   \/\/ Modify $text.\n *\n *   $result = new FilterProcessResult($text);\n *\n *   \/\/ Associate assets to be attached.\n *   $result->setAttachments(array(\n *     'library' => array(\n *        'filter\/caption',\n *     ),\n *   ));\n *\n *   \/\/ Associate cache contexts to vary by.\n *   $result->setCacheContexts(['language']);\n *\n *   \/\/ Associate cache tags to be invalidated by.\n *   $result->setCacheTags($node->getCacheTags());\n *\n *   \/\/ Associate a maximum age.\n *   $result->setCacheMaxAge(300); \/\/ 5 minutes.\n *\n *   return $result;\n * }\n * @endcode\n *\/",9],["T_WHITESPACE","\n",62],["T_CLASS","class",63],["T_WHITESPACE"," ",63],["T_STRING","FilterProcessResult",63],["T_WHITESPACE"," ",63],["T_EXTENDS","extends",63],["T_WHITESPACE"," ",63],["T_STRING","BubbleableMetadata",63],["T_WHITESPACE"," ",63],"{",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * The processed text.\n   *\n   * @see \\Drupal\\filter\\Plugin\\FilterInterface::process()\n   *\n   * @var string\n   *\/",65],["T_WHITESPACE","\n  ",71],["T_PROTECTED","protected",72],["T_WHITESPACE"," ",72],["T_VARIABLE","$processedText",72],";",["T_WHITESPACE","\n\n  ",72],["T_DOC_COMMENT","\/**\n   * Constructs a FilterProcessResult object.\n   *\n   * @param string $processed_text\n   *   The text as processed by a text filter.\n   *\/",74],["T_WHITESPACE","\n  ",79],["T_PUBLIC","public",80],["T_WHITESPACE"," ",80],["T_FUNCTION","function",80],["T_WHITESPACE"," ",80],["T_STRING","__construct",80],"(",["T_VARIABLE","$processed_text",80],")",["T_WHITESPACE"," ",80],"{",["T_WHITESPACE","\n    ",80],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","processedText",81],["T_WHITESPACE"," ",81],"=",["T_WHITESPACE"," ",81],["T_VARIABLE","$processed_text",81],";",["T_WHITESPACE","\n  ",81],"}",["T_WHITESPACE","\n\n  ",82],["T_DOC_COMMENT","\/**\n   * Gets the processed text.\n   *\n   * @return string\n   *\/",84],["T_WHITESPACE","\n  ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","getProcessedText",89],"(",")",["T_WHITESPACE"," ",89],"{",["T_WHITESPACE","\n    ",89],["T_RETURN","return",90],["T_WHITESPACE"," ",90],["T_VARIABLE","$this",90],["T_OBJECT_OPERATOR","->",90],["T_STRING","processedText",90],";",["T_WHITESPACE","\n  ",90],"}",["T_WHITESPACE","\n\n  ",91],["T_DOC_COMMENT","\/**\n   * Gets the processed text.\n   *\n   * @return string\n   *\/",93],["T_WHITESPACE","\n  ",97],["T_PUBLIC","public",98],["T_WHITESPACE"," ",98],["T_FUNCTION","function",98],["T_WHITESPACE"," ",98],["T_STRING","__toString",98],"(",")",["T_WHITESPACE"," ",98],"{",["T_WHITESPACE","\n    ",98],["T_RETURN","return",99],["T_WHITESPACE"," ",99],["T_VARIABLE","$this",99],["T_OBJECT_OPERATOR","->",99],["T_STRING","getProcessedText",99],"(",")",";",["T_WHITESPACE","\n  ",99],"}",["T_WHITESPACE","\n\n  ",100],["T_DOC_COMMENT","\/**\n   * Sets the processed text.\n   *\n   * @param string $processed_text\n   *   The text as processed by a text filter.\n   *\n   * @return $this\n   *\/",102],["T_WHITESPACE","\n  ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","setProcessedText",110],"(",["T_VARIABLE","$processed_text",110],")",["T_WHITESPACE"," ",110],"{",["T_WHITESPACE","\n    ",110],["T_VARIABLE","$this",111],["T_OBJECT_OPERATOR","->",111],["T_STRING","processedText",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_VARIABLE","$processed_text",111],";",["T_WHITESPACE","\n    ",111],["T_RETURN","return",112],["T_WHITESPACE"," ",112],["T_VARIABLE","$this",112],";",["T_WHITESPACE","\n  ",112],"}",["T_WHITESPACE","\n\n  ",113],["T_DOC_COMMENT","\/**\n   * Creates a placeholder.\n   *\n   * This generates its own placeholder markup for one major reason: to not have\n   * FilterProcessResult depend on the Renderer service, because this is a value\n   * object. As a side-effect and added benefit, this makes it easier to\n   * distinguish placeholders for filtered text versus generic render system\n   * placeholders.\n   *\n   * @param string $callback\n   *   The #lazy_builder callback that will replace the placeholder with its\n   *   eventual markup.\n   * @param array $args\n   *   The arguments for the #lazy_builder callback.\n   *\n   * @return string\n   *   The placeholder markup.\n   *\/",115],["T_WHITESPACE","\n  ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","createPlaceholder",133],"(",["T_VARIABLE","$callback",133],",",["T_WHITESPACE"," ",133],["T_ARRAY","array",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$args",133],")",["T_WHITESPACE"," ",133],"{",["T_WHITESPACE","\n    ",133],["T_COMMENT","\/\/ Generate placeholder markup.\n",134],["T_WHITESPACE","    ",135],["T_COMMENT","\/\/ @see \\Drupal\\Core\\Render\\PlaceholderGenerator::createPlaceholder()\n",135],["T_WHITESPACE","    ",136],["T_VARIABLE","$arguments",136],["T_WHITESPACE"," ",136],"=",["T_WHITESPACE"," ",136],["T_STRING","UrlHelper",136],["T_DOUBLE_COLON","::",136],["T_STRING","buildQuery",136],"(",["T_VARIABLE","$args",136],")",";",["T_WHITESPACE","\n    ",136],["T_VARIABLE","$token",137],["T_WHITESPACE"," ",137],"=",["T_WHITESPACE"," ",137],["T_STRING","hash",137],"(",["T_CONSTANT_ENCAPSED_STRING","'crc32b'",137],",",["T_WHITESPACE"," ",137],["T_STRING","serialize",137],"(","[",["T_VARIABLE","$callback",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$args",137],"]",")",")",";",["T_WHITESPACE","\n    ",137],["T_VARIABLE","$placeholder_markup",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'<drupal-filter-placeholder callback=\"'",138],["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_STRING","Html",138],["T_DOUBLE_COLON","::",138],["T_STRING","escape",138],"(",["T_VARIABLE","$callback",138],")",["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'\" arguments=\"'",138],["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_STRING","Html",138],["T_DOUBLE_COLON","::",138],["T_STRING","escape",138],"(",["T_VARIABLE","$arguments",138],")",["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'\" token=\"'",138],["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_STRING","Html",138],["T_DOUBLE_COLON","::",138],["T_STRING","escape",138],"(",["T_VARIABLE","$token",138],")",["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'\"><\/drupal-filter-placeholder>'",138],";",["T_WHITESPACE","\n\n    ",138],["T_COMMENT","\/\/ Add the placeholder attachment.\n",140],["T_WHITESPACE","    ",141],["T_VARIABLE","$this",141],["T_OBJECT_OPERATOR","->",141],["T_STRING","addAttachments",141],"(","[",["T_WHITESPACE","\n      ",141],["T_CONSTANT_ENCAPSED_STRING","'placeholders'",142],["T_WHITESPACE"," ",142],["T_DOUBLE_ARROW","=>",142],["T_WHITESPACE"," ",142],"[",["T_WHITESPACE","\n        ",142],["T_VARIABLE","$placeholder_markup",143],["T_WHITESPACE"," ",143],["T_DOUBLE_ARROW","=>",143],["T_WHITESPACE"," ",143],"[",["T_WHITESPACE","\n          ",143],["T_CONSTANT_ENCAPSED_STRING","'#lazy_builder'",144],["T_WHITESPACE"," ",144],["T_DOUBLE_ARROW","=>",144],["T_WHITESPACE"," ",144],"[",["T_VARIABLE","$callback",144],",",["T_WHITESPACE"," ",144],["T_VARIABLE","$args",144],"]",",",["T_WHITESPACE","\n        ",144],"]",["T_WHITESPACE","\n      ",145],"]",",",["T_WHITESPACE","\n    ",146],"]",")",";",["T_WHITESPACE","\n\n    ",147],["T_COMMENT","\/\/ Return the placeholder markup, so that the filter wanting to use a\n",149],["T_WHITESPACE","    ",150],["T_COMMENT","\/\/ placeholder can actually insert the placeholder markup where it needs the\n",150],["T_WHITESPACE","    ",151],["T_COMMENT","\/\/ placeholder to be replaced.\n",151],["T_WHITESPACE","    ",152],["T_RETURN","return",152],["T_WHITESPACE"," ",152],["T_VARIABLE","$placeholder_markup",152],";",["T_WHITESPACE","\n  ",152],"}",["T_WHITESPACE","\n\n",153],"}",["T_WHITESPACE","\n",155]]