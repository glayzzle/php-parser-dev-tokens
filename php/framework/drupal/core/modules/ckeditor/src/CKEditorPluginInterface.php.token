[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","ckeditor",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","editor",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Editor",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines an interface for (loading of) CKEditor plugins.\n *\n * This is the most basic CKEditor plugin interface; it provides the bare\n * minimum information. Solely implementing this interface is not sufficient to\n * be able to enable the plugin though \u00e2\u0080\u0094 a CKEditor plugin can either be enabled\n * automatically when a button it provides is present in the toolbar, or when\n * some programmatically defined condition is true. In the former case,\n * implement the CKEditorPluginButtonsInterface interface, in the latter case,\n * implement the CKEditorPluginContextualInterface interface. It is also\n * possible to implement both, for advanced use cases.\n *\n * Finally, if your plugin must be configurable, you can also implement the\n * CKEditorPluginConfigurableInterface interface.\n *\n * @see \\Drupal\\ckeditor\\CKEditorPluginButtonsInterface\n * @see \\Drupal\\ckeditor\\CKEditorPluginContextualInterface\n * @see \\Drupal\\ckeditor\\CKEditorPluginConfigurableInterface\n * @see \\Drupal\\ckeditor\\CKEditorPluginCssInterface\n * @see \\Drupal\\ckeditor\\CKEditorPluginBase\n * @see \\Drupal\\ckeditor\\CKEditorPluginManager\n * @see \\Drupal\\ckeditor\\Annotation\\CKEditorPlugin\n * @see plugin_api\n *\/",8],["T_WHITESPACE","\n",31],["T_INTERFACE","interface",32],["T_WHITESPACE"," ",32],["T_STRING","CKEditorPluginInterface",32],["T_WHITESPACE"," ",32],["T_EXTENDS","extends",32],["T_WHITESPACE"," ",32],["T_STRING","PluginInspectionInterface",32],["T_WHITESPACE"," ",32],"{",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Indicates if this plugin is part of the optimized CKEditor build.\n   *\n   * Plugins marked as internal are implicitly loaded as part of CKEditor.\n   *\n   * @return bool\n   *\/",34],["T_WHITESPACE","\n  ",40],["T_PUBLIC","public",41],["T_WHITESPACE"," ",41],["T_FUNCTION","function",41],["T_WHITESPACE"," ",41],["T_STRING","isInternal",41],"(",")",";",["T_WHITESPACE","\n\n  ",41],["T_DOC_COMMENT","\/**\n   * Returns a list of plugins this plugin requires.\n   *\n   * @param \\Drupal\\editor\\Entity\\Editor $editor\n   *   A configured text editor object.\n   * @return array\n   *   An unindexed array of plugin names this plugin requires. Each plugin is\n   *   is identified by its annotated ID.\n   *\/",43],["T_WHITESPACE","\n  ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","getDependencies",52],"(",["T_STRING","Editor",52],["T_WHITESPACE"," ",52],["T_VARIABLE","$editor",52],")",";",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * Returns a list of libraries this plugin requires.\n   *\n   * These libraries will be attached to the text_format element on which the\n   * editor is being loaded.\n   *\n   * @param \\Drupal\\editor\\Entity\\Editor $editor\n   *   A configured text editor object.\n   * @return array\n   *   An array of libraries suitable for usage in a render API #attached\n   *   property.\n   *\/",54],["T_WHITESPACE","\n  ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","getLibraries",66],"(",["T_STRING","Editor",66],["T_WHITESPACE"," ",66],["T_VARIABLE","$editor",66],")",";",["T_WHITESPACE","\n\n  ",66],["T_DOC_COMMENT","\/**\n   * Returns the Drupal root-relative file path to the plugin JavaScript file.\n   *\n   * Note: this does not use a Drupal library because this uses CKEditor's API,\n   * see http:\/\/docs.cksource.com\/ckeditor_api\/symbols\/CKEDITOR.resourceManager.html#addExternal.\n   *\n   * @return string|false\n   *   The Drupal root-relative path to the file, FALSE if an internal plugin.\n   *\/",68],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","getFile",77],"(",")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Returns the additions to CKEDITOR.config for a specific CKEditor instance.\n   *\n   * The editor's settings can be retrieved via $editor->getSettings(), but be\n   * aware that it may not yet contain plugin-specific settings, because the\n   * user may not yet have configured the form.\n   * If there are plugin-specific settings (verify with isset()), they can be\n   * found at\n   * @code\n   * $settings = $editor->getSettings();\n   * $plugin_specific_settings = $settings['plugins'][$plugin_id];\n   * @endcode\n   *\n   * @param \\Drupal\\editor\\Entity\\Editor $editor\n   *   A configured text editor object.\n   * @return array\n   *   A keyed array, whose keys will end up as keys under CKEDITOR.config.\n   *\/",79],["T_WHITESPACE","\n  ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","getConfig",97],"(",["T_STRING","Editor",97],["T_WHITESPACE"," ",97],["T_VARIABLE","$editor",97],")",";",["T_WHITESPACE","\n\n",97],"}",["T_WHITESPACE","\n",99]]