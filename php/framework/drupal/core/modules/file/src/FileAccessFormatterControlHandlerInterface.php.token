[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","file",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityAccessControlHandlerInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines an interface for file access handlers that need to run on file formatters.\n *\n * \\Drupal\\Core\\Field\\Plugin\\Field\\FieldFormatter\\EntityReferenceFormatterBase,\n * which file and image formatters extend, checks 'view' access on the\n * referenced files before displaying them. That check would be useless and\n * costly with Core's default access control implementation for files\n * (\\Drupal\\file\\FileAccessControlHandler grants access based on whether\n * there are existing entities with granted access that reference the file). But\n * it might be needed if a different access control handler with different logic\n * is swapped in.\n *\n * \\Drupal\\file\\Plugin\\Field\\FieldFormatter\\FileFormatterBase thus adjusts that\n * behavior, and only checks access if the access control handler in use for\n * files opts in by implementing this interface.\n *\n * @see \\Drupal\\file\\Plugin\\Field\\FieldFormatter\\FileFormatterBase::needsAccessCheck()\n *\/",7],["T_WHITESPACE","\n",24],["T_INTERFACE","interface",25],["T_WHITESPACE"," ",25],["T_STRING","FileAccessFormatterControlHandlerInterface",25],["T_WHITESPACE"," ",25],["T_EXTENDS","extends",25],["T_WHITESPACE"," ",25],["T_STRING","EntityAccessControlHandlerInterface",25],["T_WHITESPACE"," ",25],"{",["T_WHITESPACE"," ",25],"}",["T_WHITESPACE","\n",25]]