[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","simpletest",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Serialization",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Json",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Utility",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Html",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Component",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Utility",7],["T_NS_SEPARATOR","\\",7],["T_STRING","SafeMarkup",7],";",["T_WHITESPACE","\n",7],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Component",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Utility",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Xss",8],";",["T_WHITESPACE","\n",8],["T_USE","use",9],["T_WHITESPACE"," ",9],["T_STRING","Drupal",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Core",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Render",9],["T_NS_SEPARATOR","\\",9],["T_STRING","RenderContext",9],";",["T_WHITESPACE","\n",9],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Symfony",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Component",10],["T_NS_SEPARATOR","\\",10],["T_STRING","CssSelector",10],["T_NS_SEPARATOR","\\",10],["T_STRING","CssSelectorConverter",10],";",["T_WHITESPACE","\n\n",10],["T_DOC_COMMENT","\/**\n * Provides test methods to assert content.\n *\/",12],["T_WHITESPACE","\n",14],["T_TRAIT","trait",15],["T_WHITESPACE"," ",15],["T_STRING","AssertContentTrait",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * The current raw content.\n   *\n   * @var string\n   *\/",17],["T_WHITESPACE","\n  ",21],["T_PROTECTED","protected",22],["T_WHITESPACE"," ",22],["T_VARIABLE","$content",22],";",["T_WHITESPACE","\n\n  ",22],["T_DOC_COMMENT","\/**\n   * The plain-text content of raw $content (text nodes).\n   *\n   * @var string\n   *\/",24],["T_WHITESPACE","\n  ",28],["T_PROTECTED","protected",29],["T_WHITESPACE"," ",29],["T_VARIABLE","$plainTextContent",29],";",["T_WHITESPACE","\n\n  ",29],["T_DOC_COMMENT","\/**\n   * The drupalSettings value from the current raw $content.\n   *\n   * drupalSettings refers to the drupalSettings JavaScript variable.\n   *\n   * @var array\n   *\/",31],["T_WHITESPACE","\n  ",37],["T_PROTECTED","protected",38],["T_WHITESPACE"," ",38],["T_VARIABLE","$drupalSettings",38],";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * The XML structure parsed from the current raw $content.\n   *\n   * @var \\SimpleXMLElement\n   *\/",40],["T_WHITESPACE","\n  ",44],["T_PROTECTED","protected",45],["T_WHITESPACE"," ",45],["T_VARIABLE","$elements",45],";",["T_WHITESPACE","\n\n  ",45],["T_DOC_COMMENT","\/**\n   * Gets the current raw content.\n   *\/",47],["T_WHITESPACE","\n  ",49],["T_PROTECTED","protected",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","getRawContent",50],"(",")",["T_WHITESPACE"," ",50],"{",["T_WHITESPACE","\n    ",50],["T_RETURN","return",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$this",51],["T_OBJECT_OPERATOR","->",51],["T_STRING","content",51],";",["T_WHITESPACE","\n  ",51],"}",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * Sets the raw content (e.g. HTML).\n   *\n   * @param string $content\n   *   The raw content to set.\n   *\/",54],["T_WHITESPACE","\n  ",59],["T_PROTECTED","protected",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","setRawContent",60],"(",["T_VARIABLE","$content",60],")",["T_WHITESPACE"," ",60],"{",["T_WHITESPACE","\n    ",60],["T_VARIABLE","$this",61],["T_OBJECT_OPERATOR","->",61],["T_STRING","content",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],["T_VARIABLE","$content",61],";",["T_WHITESPACE","\n    ",61],["T_VARIABLE","$this",62],["T_OBJECT_OPERATOR","->",62],["T_STRING","plainTextContent",62],["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],["T_STRING","NULL",62],";",["T_WHITESPACE","\n    ",62],["T_VARIABLE","$this",63],["T_OBJECT_OPERATOR","->",63],["T_STRING","elements",63],["T_WHITESPACE"," ",63],"=",["T_WHITESPACE"," ",63],["T_STRING","NULL",63],";",["T_WHITESPACE","\n    ",63],["T_VARIABLE","$this",64],["T_OBJECT_OPERATOR","->",64],["T_STRING","drupalSettings",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_ARRAY","array",64],"(",")",";",["T_WHITESPACE","\n    ",64],["T_IF","if",65],["T_WHITESPACE"," ",65],"(",["T_STRING","preg_match",65],"(",["T_CONSTANT_ENCAPSED_STRING","'@<script type=\"application\/json\" data-drupal-selector=\"drupal-settings-json\">([^<]*)<\/script>@'",65],",",["T_WHITESPACE"," ",65],["T_VARIABLE","$content",65],",",["T_WHITESPACE"," ",65],["T_VARIABLE","$matches",65],")",")",["T_WHITESPACE"," ",65],"{",["T_WHITESPACE","\n      ",65],["T_VARIABLE","$this",66],["T_OBJECT_OPERATOR","->",66],["T_STRING","drupalSettings",66],["T_WHITESPACE"," ",66],"=",["T_WHITESPACE"," ",66],["T_STRING","Json",66],["T_DOUBLE_COLON","::",66],["T_STRING","decode",66],"(",["T_VARIABLE","$matches",66],"[",["T_LNUMBER","1",66],"]",")",";",["T_WHITESPACE","\n    ",66],"}",["T_WHITESPACE","\n  ",67],"}",["T_WHITESPACE","\n\n  ",68],["T_DOC_COMMENT","\/**\n   * Retrieves the plain-text content from the current raw content.\n   *\/",70],["T_WHITESPACE","\n  ",72],["T_PROTECTED","protected",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","getTextContent",73],"(",")",["T_WHITESPACE"," ",73],"{",["T_WHITESPACE","\n    ",73],["T_IF","if",74],["T_WHITESPACE"," ",74],"(","!",["T_ISSET","isset",74],"(",["T_VARIABLE","$this",74],["T_OBJECT_OPERATOR","->",74],["T_STRING","plainTextContent",74],")",")",["T_WHITESPACE"," ",74],"{",["T_WHITESPACE","\n      ",74],["T_VARIABLE","$raw_content",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_VARIABLE","$this",75],["T_OBJECT_OPERATOR","->",75],["T_STRING","getRawContent",75],"(",")",";",["T_WHITESPACE","\n      ",75],["T_COMMENT","\/\/ Strip everything between the HEAD tags.\n",76],["T_WHITESPACE","      ",77],["T_VARIABLE","$raw_content",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","preg_replace",77],"(",["T_CONSTANT_ENCAPSED_STRING","'@<head>(.+?)<\/head>@si'",77],",",["T_WHITESPACE"," ",77],["T_CONSTANT_ENCAPSED_STRING","''",77],",",["T_WHITESPACE"," ",77],["T_VARIABLE","$raw_content",77],")",";",["T_WHITESPACE","\n      ",77],["T_VARIABLE","$this",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","plainTextContent",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_STRING","Xss",78],["T_DOUBLE_COLON","::",78],["T_STRING","filter",78],"(",["T_VARIABLE","$raw_content",78],",",["T_WHITESPACE"," ",78],["T_ARRAY","array",78],"(",")",")",";",["T_WHITESPACE","\n    ",78],"}",["T_WHITESPACE","\n    ",79],["T_RETURN","return",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$this",80],["T_OBJECT_OPERATOR","->",80],["T_STRING","plainTextContent",80],";",["T_WHITESPACE","\n  ",80],"}",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Removes all white-space between HTML tags from the raw content.\n   *\n   * White-space is only removed if there are no non-white-space characters\n   * between HTML tags.\n   *\n   * Use this (once) after performing an operation that sets new raw content,\n   * and when you want to use e.g. assertText() but ignore potential white-space\n   * caused by HTML output templates.\n   *\/",83],["T_WHITESPACE","\n  ",92],["T_PROTECTED","protected",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","removeWhiteSpace",93],"(",")",["T_WHITESPACE"," ",93],"{",["T_WHITESPACE","\n    ",93],["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","content",94],["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_STRING","preg_replace",94],"(",["T_CONSTANT_ENCAPSED_STRING","'@>\\s+<@'",94],",",["T_WHITESPACE"," ",94],["T_CONSTANT_ENCAPSED_STRING","'><'",94],",",["T_WHITESPACE"," ",94],["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","content",94],")",";",["T_WHITESPACE","\n    ",94],["T_VARIABLE","$this",95],["T_OBJECT_OPERATOR","->",95],["T_STRING","plainTextContent",95],["T_WHITESPACE"," ",95],"=",["T_WHITESPACE"," ",95],["T_STRING","NULL",95],";",["T_WHITESPACE","\n    ",95],["T_VARIABLE","$this",96],["T_OBJECT_OPERATOR","->",96],["T_STRING","elements",96],["T_WHITESPACE"," ",96],"=",["T_WHITESPACE"," ",96],["T_STRING","NULL",96],";",["T_WHITESPACE","\n  ",96],"}",["T_WHITESPACE","\n\n  ",97],["T_DOC_COMMENT","\/**\n   * Gets the value of drupalSettings for the currently-loaded page.\n   *\n   * drupalSettings refers to the drupalSettings JavaScript variable.\n   *\/",99],["T_WHITESPACE","\n  ",103],["T_PROTECTED","protected",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","getDrupalSettings",104],"(",")",["T_WHITESPACE"," ",104],"{",["T_WHITESPACE","\n    ",104],["T_RETURN","return",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$this",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","drupalSettings",105],";",["T_WHITESPACE","\n  ",105],"}",["T_WHITESPACE","\n\n  ",106],["T_DOC_COMMENT","\/**\n   * Sets the value of drupalSettings for the currently-loaded page.\n   *\n   * drupalSettings refers to the drupalSettings JavaScript variable.\n   *\/",108],["T_WHITESPACE","\n  ",112],["T_PROTECTED","protected",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","setDrupalSettings",113],"(",["T_VARIABLE","$settings",113],")",["T_WHITESPACE"," ",113],"{",["T_WHITESPACE","\n    ",113],["T_VARIABLE","$this",114],["T_OBJECT_OPERATOR","->",114],["T_STRING","drupalSettings",114],["T_WHITESPACE"," ",114],"=",["T_WHITESPACE"," ",114],["T_VARIABLE","$settings",114],";",["T_WHITESPACE","\n  ",114],"}",["T_WHITESPACE","\n\n  ",115],["T_DOC_COMMENT","\/**\n   * Parse content returned from curlExec using DOM and SimpleXML.\n   *\n   * @return \\SimpleXMLElement|false\n   *   A SimpleXMLElement or FALSE on failure.\n   *\/",117],["T_WHITESPACE","\n  ",122],["T_PROTECTED","protected",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","parse",123],"(",")",["T_WHITESPACE"," ",123],"{",["T_WHITESPACE","\n    ",123],["T_IF","if",124],["T_WHITESPACE"," ",124],"(","!",["T_ISSET","isset",124],"(",["T_VARIABLE","$this",124],["T_OBJECT_OPERATOR","->",124],["T_STRING","elements",124],")",")",["T_WHITESPACE"," ",124],"{",["T_WHITESPACE","\n      ",124],["T_COMMENT","\/\/ DOM can load HTML soup. But, HTML soup can throw warnings, suppress\n",125],["T_WHITESPACE","      ",126],["T_COMMENT","\/\/ them.\n",126],["T_WHITESPACE","      ",127],["T_VARIABLE","$html_dom",127],["T_WHITESPACE"," ",127],"=",["T_WHITESPACE"," ",127],["T_NEW","new",127],["T_WHITESPACE"," ",127],["T_NS_SEPARATOR","\\",127],["T_STRING","DOMDocument",127],"(",")",";",["T_WHITESPACE","\n      ",127],"@",["T_VARIABLE","$html_dom",128],["T_OBJECT_OPERATOR","->",128],["T_STRING","loadHTML",128],"(",["T_CONSTANT_ENCAPSED_STRING","'<?xml encoding=\"UTF-8\">'",128],["T_WHITESPACE"," ",128],".",["T_WHITESPACE"," ",128],["T_VARIABLE","$this",128],["T_OBJECT_OPERATOR","->",128],["T_STRING","getRawContent",128],"(",")",")",";",["T_WHITESPACE","\n      ",128],["T_IF","if",129],["T_WHITESPACE"," ",129],"(",["T_VARIABLE","$html_dom",129],")",["T_WHITESPACE"," ",129],"{",["T_WHITESPACE","\n        ",129],["T_VARIABLE","$this",130],["T_OBJECT_OPERATOR","->",130],["T_STRING","pass",130],"(",["T_STRING","SafeMarkup",130],["T_DOUBLE_COLON","::",130],["T_STRING","format",130],"(",["T_CONSTANT_ENCAPSED_STRING","'Valid HTML found on \"@path\"'",130],",",["T_WHITESPACE"," ",130],["T_ARRAY","array",130],"(",["T_CONSTANT_ENCAPSED_STRING","'@path'",130],["T_WHITESPACE"," ",130],["T_DOUBLE_ARROW","=>",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$this",130],["T_OBJECT_OPERATOR","->",130],["T_STRING","getUrl",130],"(",")",")",")",",",["T_WHITESPACE"," ",130],["T_CONSTANT_ENCAPSED_STRING","'Browser'",130],")",";",["T_WHITESPACE","\n        ",130],["T_COMMENT","\/\/ It's much easier to work with simplexml than DOM, luckily enough\n",131],["T_WHITESPACE","        ",132],["T_COMMENT","\/\/ we can just simply import our DOM tree.\n",132],["T_WHITESPACE","        ",133],["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","elements",133],["T_WHITESPACE"," ",133],"=",["T_WHITESPACE"," ",133],["T_STRING","simplexml_import_dom",133],"(",["T_VARIABLE","$html_dom",133],")",";",["T_WHITESPACE","\n      ",133],"}",["T_WHITESPACE","\n    ",134],"}",["T_WHITESPACE","\n    ",135],["T_IF","if",136],["T_WHITESPACE"," ",136],"(",["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","elements",136],["T_WHITESPACE"," ",136],["T_IS_IDENTICAL","===",136],["T_WHITESPACE"," ",136],["T_STRING","FALSE",136],")",["T_WHITESPACE"," ",136],"{",["T_WHITESPACE","\n      ",136],["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","fail",137],"(",["T_CONSTANT_ENCAPSED_STRING","'Parsed page successfully.'",137],",",["T_WHITESPACE"," ",137],["T_CONSTANT_ENCAPSED_STRING","'Browser'",137],")",";",["T_WHITESPACE","\n    ",137],"}",["T_WHITESPACE","\n\n    ",138],["T_RETURN","return",140],["T_WHITESPACE"," ",140],["T_VARIABLE","$this",140],["T_OBJECT_OPERATOR","->",140],["T_STRING","elements",140],";",["T_WHITESPACE","\n  ",140],"}",["T_WHITESPACE","\n\n  ",141],["T_DOC_COMMENT","\/**\n   * Get the current URL from the cURL handler.\n   *\n   * @return string\n   *   The current URL.\n   *\/",143],["T_WHITESPACE","\n  ",148],["T_PROTECTED","protected",149],["T_WHITESPACE"," ",149],["T_FUNCTION","function",149],["T_WHITESPACE"," ",149],["T_STRING","getUrl",149],"(",")",["T_WHITESPACE"," ",149],"{",["T_WHITESPACE","\n    ",149],["T_RETURN","return",150],["T_WHITESPACE"," ",150],["T_ISSET","isset",150],"(",["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","url",150],")",["T_WHITESPACE"," ",150],"?",["T_WHITESPACE"," ",150],["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","url",150],["T_WHITESPACE"," ",150],":",["T_WHITESPACE"," ",150],["T_CONSTANT_ENCAPSED_STRING","'no-url'",150],";",["T_WHITESPACE","\n  ",150],"}",["T_WHITESPACE","\n\n  ",151],["T_DOC_COMMENT","\/**\n   * Builds an XPath query.\n   *\n   * Builds an XPath query by replacing placeholders in the query by the value\n   * of the arguments.\n   *\n   * XPath 1.0 (the version supported by libxml2, the underlying XML library\n   * used by PHP) doesn't support any form of quotation. This function\n   * simplifies the building of XPath expression.\n   *\n   * @param string $xpath\n   *   An XPath query, possibly with placeholders in the form ':name'.\n   * @param array $args\n   *   An array of arguments with keys in the form ':name' matching the\n   *   placeholders in the query. The values may be either strings or numeric\n   *   values.\n   *\n   * @return string\n   *   An XPath query with arguments replaced.\n   *\/",153],["T_WHITESPACE","\n  ",172],["T_PROTECTED","protected",173],["T_WHITESPACE"," ",173],["T_FUNCTION","function",173],["T_WHITESPACE"," ",173],["T_STRING","buildXPathQuery",173],"(",["T_VARIABLE","$xpath",173],",",["T_WHITESPACE"," ",173],["T_ARRAY","array",173],["T_WHITESPACE"," ",173],["T_VARIABLE","$args",173],["T_WHITESPACE"," ",173],"=",["T_WHITESPACE"," ",173],["T_ARRAY","array",173],"(",")",")",["T_WHITESPACE"," ",173],"{",["T_WHITESPACE","\n    ",173],["T_COMMENT","\/\/ Replace placeholders.\n",174],["T_WHITESPACE","    ",175],["T_FOREACH","foreach",175],["T_WHITESPACE"," ",175],"(",["T_VARIABLE","$args",175],["T_WHITESPACE"," ",175],["T_AS","as",175],["T_WHITESPACE"," ",175],["T_VARIABLE","$placeholder",175],["T_WHITESPACE"," ",175],["T_DOUBLE_ARROW","=>",175],["T_WHITESPACE"," ",175],["T_VARIABLE","$value",175],")",["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n      ",175],["T_COMMENT","\/\/ Cast MarkupInterface objects to string.\n",176],["T_WHITESPACE","      ",177],["T_IF","if",177],["T_WHITESPACE"," ",177],"(",["T_STRING","is_object",177],"(",["T_VARIABLE","$value",177],")",")",["T_WHITESPACE"," ",177],"{",["T_WHITESPACE","\n        ",177],["T_VARIABLE","$value",178],["T_WHITESPACE"," ",178],"=",["T_WHITESPACE"," ",178],["T_STRING_CAST","(string)",178],["T_WHITESPACE"," ",178],["T_VARIABLE","$value",178],";",["T_WHITESPACE","\n      ",178],"}",["T_WHITESPACE","\n      ",179],["T_COMMENT","\/\/ XPath 1.0 doesn't support a way to escape single or double quotes in a\n",180],["T_WHITESPACE","      ",181],["T_COMMENT","\/\/ string literal. We split double quotes out of the string, and encode\n",181],["T_WHITESPACE","      ",182],["T_COMMENT","\/\/ them separately.\n",182],["T_WHITESPACE","      ",183],["T_IF","if",183],["T_WHITESPACE"," ",183],"(",["T_STRING","is_string",183],"(",["T_VARIABLE","$value",183],")",")",["T_WHITESPACE"," ",183],"{",["T_WHITESPACE","\n        ",183],["T_COMMENT","\/\/ Explode the text at the quote characters.\n",184],["T_WHITESPACE","        ",185],["T_VARIABLE","$parts",185],["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],["T_STRING","explode",185],"(",["T_CONSTANT_ENCAPSED_STRING","'\"'",185],",",["T_WHITESPACE"," ",185],["T_VARIABLE","$value",185],")",";",["T_WHITESPACE","\n\n        ",185],["T_COMMENT","\/\/ Quote the parts.\n",187],["T_WHITESPACE","        ",188],["T_FOREACH","foreach",188],["T_WHITESPACE"," ",188],"(",["T_VARIABLE","$parts",188],["T_WHITESPACE"," ",188],["T_AS","as",188],["T_WHITESPACE"," ",188],"&",["T_VARIABLE","$part",188],")",["T_WHITESPACE"," ",188],"{",["T_WHITESPACE","\n          ",188],["T_VARIABLE","$part",189],["T_WHITESPACE"," ",189],"=",["T_WHITESPACE"," ",189],["T_CONSTANT_ENCAPSED_STRING","'\"'",189],["T_WHITESPACE"," ",189],".",["T_WHITESPACE"," ",189],["T_VARIABLE","$part",189],["T_WHITESPACE"," ",189],".",["T_WHITESPACE"," ",189],["T_CONSTANT_ENCAPSED_STRING","'\"'",189],";",["T_WHITESPACE","\n        ",189],"}",["T_WHITESPACE","\n\n        ",190],["T_COMMENT","\/\/ Return the string.\n",192],["T_WHITESPACE","        ",193],["T_VARIABLE","$value",193],["T_WHITESPACE"," ",193],"=",["T_WHITESPACE"," ",193],["T_STRING","count",193],"(",["T_VARIABLE","$parts",193],")",["T_WHITESPACE"," ",193],">",["T_WHITESPACE"," ",193],["T_LNUMBER","1",193],["T_WHITESPACE"," ",193],"?",["T_WHITESPACE"," ",193],["T_CONSTANT_ENCAPSED_STRING","'concat('",193],["T_WHITESPACE"," ",193],".",["T_WHITESPACE"," ",193],["T_STRING","implode",193],"(",["T_CONSTANT_ENCAPSED_STRING","', \\'\"\\', '",193],",",["T_WHITESPACE"," ",193],["T_VARIABLE","$parts",193],")",["T_WHITESPACE"," ",193],".",["T_WHITESPACE"," ",193],["T_CONSTANT_ENCAPSED_STRING","')'",193],["T_WHITESPACE"," ",193],":",["T_WHITESPACE"," ",193],["T_VARIABLE","$parts",193],"[",["T_LNUMBER","0",193],"]",";",["T_WHITESPACE","\n      ",193],"}",["T_WHITESPACE","\n\n      ",194],["T_COMMENT","\/\/ Use preg_replace_callback() instead of preg_replace() to prevent the\n",196],["T_WHITESPACE","      ",197],["T_COMMENT","\/\/ regular expression engine from trying to substitute backreferences.\n",197],["T_WHITESPACE","      ",198],["T_VARIABLE","$replacement",198],["T_WHITESPACE"," ",198],"=",["T_WHITESPACE"," ",198],["T_FUNCTION","function",198],["T_WHITESPACE"," ",198],"(",["T_VARIABLE","$matches",198],")",["T_WHITESPACE"," ",198],["T_USE","use",198],["T_WHITESPACE"," ",198],"(",["T_VARIABLE","$value",198],")",["T_WHITESPACE"," ",198],"{",["T_WHITESPACE","\n        ",198],["T_RETURN","return",199],["T_WHITESPACE"," ",199],["T_VARIABLE","$value",199],";",["T_WHITESPACE","\n      ",199],"}",";",["T_WHITESPACE","\n      ",200],["T_VARIABLE","$xpath",201],["T_WHITESPACE"," ",201],"=",["T_WHITESPACE"," ",201],["T_STRING","preg_replace_callback",201],"(",["T_CONSTANT_ENCAPSED_STRING","'\/'",201],["T_WHITESPACE"," ",201],".",["T_WHITESPACE"," ",201],["T_STRING","preg_quote",201],"(",["T_VARIABLE","$placeholder",201],")",["T_WHITESPACE"," ",201],".",["T_WHITESPACE"," ",201],["T_CONSTANT_ENCAPSED_STRING","'\\b\/'",201],",",["T_WHITESPACE"," ",201],["T_VARIABLE","$replacement",201],",",["T_WHITESPACE"," ",201],["T_VARIABLE","$xpath",201],")",";",["T_WHITESPACE","\n    ",201],"}",["T_WHITESPACE","\n    ",202],["T_RETURN","return",203],["T_WHITESPACE"," ",203],["T_VARIABLE","$xpath",203],";",["T_WHITESPACE","\n  ",203],"}",["T_WHITESPACE","\n\n  ",204],["T_DOC_COMMENT","\/**\n   * Performs an xpath search on the contents of the internal browser.\n   *\n   * The search is relative to the root element (HTML tag normally) of the page.\n   *\n   * @param string $xpath\n   *   The xpath string to use in the search.\n   * @param array $arguments\n   *   An array of arguments with keys in the form ':name' matching the\n   *   placeholders in the query. The values may be either strings or numeric\n   *   values.\n   *\n   * @return \\SimpleXMLElement[]|bool\n   *   The return value of the xpath search or FALSE on failure. For details on\n   *   the xpath string format and return values see the SimpleXML\n   *   documentation.\n   *\n   * @see http:\/\/php.net\/manual\/function.simplexml-element-xpath.php\n   *\/",206],["T_WHITESPACE","\n  ",224],["T_PROTECTED","protected",225],["T_WHITESPACE"," ",225],["T_FUNCTION","function",225],["T_WHITESPACE"," ",225],["T_STRING","xpath",225],"(",["T_VARIABLE","$xpath",225],",",["T_WHITESPACE"," ",225],["T_ARRAY","array",225],["T_WHITESPACE"," ",225],["T_VARIABLE","$arguments",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],"[","]",")",["T_WHITESPACE"," ",225],"{",["T_WHITESPACE","\n    ",225],["T_IF","if",226],["T_WHITESPACE"," ",226],"(",["T_VARIABLE","$this",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","parse",226],"(",")",")",["T_WHITESPACE"," ",226],"{",["T_WHITESPACE","\n      ",226],["T_VARIABLE","$xpath",227],["T_WHITESPACE"," ",227],"=",["T_WHITESPACE"," ",227],["T_VARIABLE","$this",227],["T_OBJECT_OPERATOR","->",227],["T_STRING","buildXPathQuery",227],"(",["T_VARIABLE","$xpath",227],",",["T_WHITESPACE"," ",227],["T_VARIABLE","$arguments",227],")",";",["T_WHITESPACE","\n      ",227],["T_VARIABLE","$result",228],["T_WHITESPACE"," ",228],"=",["T_WHITESPACE"," ",228],["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","elements",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","xpath",228],"(",["T_VARIABLE","$xpath",228],")",";",["T_WHITESPACE","\n      ",228],["T_COMMENT","\/\/ Some combinations of PHP \/ libxml versions return an empty array\n",229],["T_WHITESPACE","      ",230],["T_COMMENT","\/\/ instead of the documented FALSE. Forcefully convert any falsish values\n",230],["T_WHITESPACE","      ",231],["T_COMMENT","\/\/ to an empty array to allow foreach(...) constructions.\n",231],["T_WHITESPACE","      ",232],["T_RETURN","return",232],["T_WHITESPACE"," ",232],["T_VARIABLE","$result",232],["T_WHITESPACE"," ",232],"?",":",["T_WHITESPACE"," ",232],"[","]",";",["T_WHITESPACE","\n    ",232],"}",["T_WHITESPACE","\n    ",233],["T_RETURN","return",234],["T_WHITESPACE"," ",234],["T_STRING","FALSE",234],";",["T_WHITESPACE","\n  ",234],"}",["T_WHITESPACE","\n\n  ",235],["T_DOC_COMMENT","\/**\n   * Searches elements using a CSS selector in the raw content.\n   *\n   * The search is relative to the root element (HTML tag normally) of the page.\n   *\n   * @param string $selector\n   *   CSS selector to use in the search.\n   *\n   * @return \\SimpleXMLElement[]\n   *   The return value of the XPath search performed after converting the CSS\n   *   selector to an XPath selector.\n   *\/",237],["T_WHITESPACE","\n  ",248],["T_PROTECTED","protected",249],["T_WHITESPACE"," ",249],["T_FUNCTION","function",249],["T_WHITESPACE"," ",249],["T_STRING","cssSelect",249],"(",["T_VARIABLE","$selector",249],")",["T_WHITESPACE"," ",249],"{",["T_WHITESPACE","\n    ",249],["T_RETURN","return",250],["T_WHITESPACE"," ",250],["T_VARIABLE","$this",250],["T_OBJECT_OPERATOR","->",250],["T_STRING","xpath",250],"(","(",["T_NEW","new",250],["T_WHITESPACE"," ",250],["T_STRING","CssSelectorConverter",250],"(",")",")",["T_OBJECT_OPERATOR","->",250],["T_STRING","toXPath",250],"(",["T_VARIABLE","$selector",250],")",")",";",["T_WHITESPACE","\n  ",250],"}",["T_WHITESPACE","\n\n  ",251],["T_DOC_COMMENT","\/**\n   * Get all option elements, including nested options, in a select.\n   *\n   * @param \\SimpleXMLElement $element\n   *   The element for which to get the options.\n   *\n   * @return \\SimpleXmlElement[]\n   *   Option elements in select.\n   *\/",253],["T_WHITESPACE","\n  ",261],["T_PROTECTED","protected",262],["T_WHITESPACE"," ",262],["T_FUNCTION","function",262],["T_WHITESPACE"," ",262],["T_STRING","getAllOptions",262],"(",["T_NS_SEPARATOR","\\",262],["T_STRING","SimpleXMLElement",262],["T_WHITESPACE"," ",262],["T_VARIABLE","$element",262],")",["T_WHITESPACE"," ",262],"{",["T_WHITESPACE","\n    ",262],["T_VARIABLE","$options",263],["T_WHITESPACE"," ",263],"=",["T_WHITESPACE"," ",263],["T_ARRAY","array",263],"(",")",";",["T_WHITESPACE","\n    ",263],["T_COMMENT","\/\/ Add all options items.\n",264],["T_WHITESPACE","    ",265],["T_FOREACH","foreach",265],["T_WHITESPACE"," ",265],"(",["T_VARIABLE","$element",265],["T_OBJECT_OPERATOR","->",265],["T_STRING","option",265],["T_WHITESPACE"," ",265],["T_AS","as",265],["T_WHITESPACE"," ",265],["T_VARIABLE","$option",265],")",["T_WHITESPACE"," ",265],"{",["T_WHITESPACE","\n      ",265],["T_VARIABLE","$options",266],"[","]",["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_VARIABLE","$option",266],";",["T_WHITESPACE","\n    ",266],"}",["T_WHITESPACE","\n\n    ",267],["T_COMMENT","\/\/ Search option group children.\n",269],["T_WHITESPACE","    ",270],["T_IF","if",270],["T_WHITESPACE"," ",270],"(",["T_ISSET","isset",270],"(",["T_VARIABLE","$element",270],["T_OBJECT_OPERATOR","->",270],["T_STRING","optgroup",270],")",")",["T_WHITESPACE"," ",270],"{",["T_WHITESPACE","\n      ",270],["T_FOREACH","foreach",271],["T_WHITESPACE"," ",271],"(",["T_VARIABLE","$element",271],["T_OBJECT_OPERATOR","->",271],["T_STRING","optgroup",271],["T_WHITESPACE"," ",271],["T_AS","as",271],["T_WHITESPACE"," ",271],["T_VARIABLE","$group",271],")",["T_WHITESPACE"," ",271],"{",["T_WHITESPACE","\n        ",271],["T_VARIABLE","$options",272],["T_WHITESPACE"," ",272],"=",["T_WHITESPACE"," ",272],["T_STRING","array_merge",272],"(",["T_VARIABLE","$options",272],",",["T_WHITESPACE"," ",272],["T_VARIABLE","$this",272],["T_OBJECT_OPERATOR","->",272],["T_STRING","getAllOptions",272],"(",["T_VARIABLE","$group",272],")",")",";",["T_WHITESPACE","\n      ",272],"}",["T_WHITESPACE","\n    ",273],"}",["T_WHITESPACE","\n    ",274],["T_RETURN","return",275],["T_WHITESPACE"," ",275],["T_VARIABLE","$options",275],";",["T_WHITESPACE","\n  ",275],"}",["T_WHITESPACE","\n\n  ",276],["T_DOC_COMMENT","\/**\n   * Passes if a link with the specified label is found.\n   *\n   * An optional link index may be passed.\n   *\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $label\n   *   Text between the anchor tags.\n   * @param int $index\n   *   Link position counting from zero.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use strtr() to embed variables in the message text, not\n   *   t(). If left blank, a default message will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",278],["T_WHITESPACE","\n  ",299],["T_PROTECTED","protected",300],["T_WHITESPACE"," ",300],["T_FUNCTION","function",300],["T_WHITESPACE"," ",300],["T_STRING","assertLink",300],"(",["T_VARIABLE","$label",300],",",["T_WHITESPACE"," ",300],["T_VARIABLE","$index",300],["T_WHITESPACE"," ",300],"=",["T_WHITESPACE"," ",300],["T_LNUMBER","0",300],",",["T_WHITESPACE"," ",300],["T_VARIABLE","$message",300],["T_WHITESPACE"," ",300],"=",["T_WHITESPACE"," ",300],["T_CONSTANT_ENCAPSED_STRING","''",300],",",["T_WHITESPACE"," ",300],["T_VARIABLE","$group",300],["T_WHITESPACE"," ",300],"=",["T_WHITESPACE"," ",300],["T_CONSTANT_ENCAPSED_STRING","'Other'",300],")",["T_WHITESPACE"," ",300],"{",["T_WHITESPACE","\n    ",300],["T_COMMENT","\/\/ Cast MarkupInterface objects to string.\n",301],["T_WHITESPACE","    ",302],["T_VARIABLE","$label",302],["T_WHITESPACE"," ",302],"=",["T_WHITESPACE"," ",302],["T_STRING_CAST","(string)",302],["T_WHITESPACE"," ",302],["T_VARIABLE","$label",302],";",["T_WHITESPACE","\n    ",302],["T_VARIABLE","$links",303],["T_WHITESPACE"," ",303],"=",["T_WHITESPACE"," ",303],["T_VARIABLE","$this",303],["T_OBJECT_OPERATOR","->",303],["T_STRING","xpath",303],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/a[normalize-space(text())=:label]'",303],",",["T_WHITESPACE"," ",303],["T_ARRAY","array",303],"(",["T_CONSTANT_ENCAPSED_STRING","':label'",303],["T_WHITESPACE"," ",303],["T_DOUBLE_ARROW","=>",303],["T_WHITESPACE"," ",303],["T_VARIABLE","$label",303],")",")",";",["T_WHITESPACE","\n    ",303],["T_VARIABLE","$message",304],["T_WHITESPACE"," ",304],"=",["T_WHITESPACE"," ",304],"(",["T_VARIABLE","$message",304],["T_WHITESPACE"," ",304],"?",["T_WHITESPACE"," ",304],["T_VARIABLE","$message",304],["T_WHITESPACE"," ",304],":",["T_WHITESPACE"," ",304],["T_STRING","strtr",304],"(",["T_CONSTANT_ENCAPSED_STRING","'Link with label %label found.'",304],",",["T_WHITESPACE"," ",304],["T_ARRAY","array",304],"(",["T_CONSTANT_ENCAPSED_STRING","'%label'",304],["T_WHITESPACE"," ",304],["T_DOUBLE_ARROW","=>",304],["T_WHITESPACE"," ",304],["T_VARIABLE","$label",304],")",")",")",";",["T_WHITESPACE","\n    ",304],["T_RETURN","return",305],["T_WHITESPACE"," ",305],["T_VARIABLE","$this",305],["T_OBJECT_OPERATOR","->",305],["T_STRING","assert",305],"(",["T_ISSET","isset",305],"(",["T_VARIABLE","$links",305],"[",["T_VARIABLE","$index",305],"]",")",",",["T_WHITESPACE"," ",305],["T_VARIABLE","$message",305],",",["T_WHITESPACE"," ",305],["T_VARIABLE","$group",305],")",";",["T_WHITESPACE","\n  ",305],"}",["T_WHITESPACE","\n\n  ",306],["T_DOC_COMMENT","\/**\n   * Passes if a link with the specified label is not found.\n   *\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $label\n   *   Text between the anchor tags.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",308],["T_WHITESPACE","\n  ",326],["T_PROTECTED","protected",327],["T_WHITESPACE"," ",327],["T_FUNCTION","function",327],["T_WHITESPACE"," ",327],["T_STRING","assertNoLink",327],"(",["T_VARIABLE","$label",327],",",["T_WHITESPACE"," ",327],["T_VARIABLE","$message",327],["T_WHITESPACE"," ",327],"=",["T_WHITESPACE"," ",327],["T_CONSTANT_ENCAPSED_STRING","''",327],",",["T_WHITESPACE"," ",327],["T_VARIABLE","$group",327],["T_WHITESPACE"," ",327],"=",["T_WHITESPACE"," ",327],["T_CONSTANT_ENCAPSED_STRING","'Other'",327],")",["T_WHITESPACE"," ",327],"{",["T_WHITESPACE","\n    ",327],["T_COMMENT","\/\/ Cast MarkupInterface objects to string.\n",328],["T_WHITESPACE","    ",329],["T_VARIABLE","$label",329],["T_WHITESPACE"," ",329],"=",["T_WHITESPACE"," ",329],["T_STRING_CAST","(string)",329],["T_WHITESPACE"," ",329],["T_VARIABLE","$label",329],";",["T_WHITESPACE","\n    ",329],["T_VARIABLE","$links",330],["T_WHITESPACE"," ",330],"=",["T_WHITESPACE"," ",330],["T_VARIABLE","$this",330],["T_OBJECT_OPERATOR","->",330],["T_STRING","xpath",330],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/a[normalize-space(text())=:label]'",330],",",["T_WHITESPACE"," ",330],["T_ARRAY","array",330],"(",["T_CONSTANT_ENCAPSED_STRING","':label'",330],["T_WHITESPACE"," ",330],["T_DOUBLE_ARROW","=>",330],["T_WHITESPACE"," ",330],["T_VARIABLE","$label",330],")",")",";",["T_WHITESPACE","\n    ",330],["T_VARIABLE","$message",331],["T_WHITESPACE"," ",331],"=",["T_WHITESPACE"," ",331],"(",["T_VARIABLE","$message",331],["T_WHITESPACE"," ",331],"?",["T_WHITESPACE"," ",331],["T_VARIABLE","$message",331],["T_WHITESPACE"," ",331],":",["T_WHITESPACE"," ",331],["T_STRING","SafeMarkup",331],["T_DOUBLE_COLON","::",331],["T_STRING","format",331],"(",["T_CONSTANT_ENCAPSED_STRING","'Link with label %label not found.'",331],",",["T_WHITESPACE"," ",331],["T_ARRAY","array",331],"(",["T_CONSTANT_ENCAPSED_STRING","'%label'",331],["T_WHITESPACE"," ",331],["T_DOUBLE_ARROW","=>",331],["T_WHITESPACE"," ",331],["T_VARIABLE","$label",331],")",")",")",";",["T_WHITESPACE","\n    ",331],["T_RETURN","return",332],["T_WHITESPACE"," ",332],["T_VARIABLE","$this",332],["T_OBJECT_OPERATOR","->",332],["T_STRING","assert",332],"(",["T_EMPTY","empty",332],"(",["T_VARIABLE","$links",332],")",",",["T_WHITESPACE"," ",332],["T_VARIABLE","$message",332],",",["T_WHITESPACE"," ",332],["T_VARIABLE","$group",332],")",";",["T_WHITESPACE","\n  ",332],"}",["T_WHITESPACE","\n\n  ",333],["T_DOC_COMMENT","\/**\n   * Passes if a link containing a given href (part) is found.\n   *\n   * @param string $href\n   *   The full or partial value of the 'href' attribute of the anchor tag.\n   * @param string $index\n   *   Link position counting from zero.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",335],["T_WHITESPACE","\n  ",355],["T_PROTECTED","protected",356],["T_WHITESPACE"," ",356],["T_FUNCTION","function",356],["T_WHITESPACE"," ",356],["T_STRING","assertLinkByHref",356],"(",["T_VARIABLE","$href",356],",",["T_WHITESPACE"," ",356],["T_VARIABLE","$index",356],["T_WHITESPACE"," ",356],"=",["T_WHITESPACE"," ",356],["T_LNUMBER","0",356],",",["T_WHITESPACE"," ",356],["T_VARIABLE","$message",356],["T_WHITESPACE"," ",356],"=",["T_WHITESPACE"," ",356],["T_CONSTANT_ENCAPSED_STRING","''",356],",",["T_WHITESPACE"," ",356],["T_VARIABLE","$group",356],["T_WHITESPACE"," ",356],"=",["T_WHITESPACE"," ",356],["T_CONSTANT_ENCAPSED_STRING","'Other'",356],")",["T_WHITESPACE"," ",356],"{",["T_WHITESPACE","\n    ",356],["T_VARIABLE","$links",357],["T_WHITESPACE"," ",357],"=",["T_WHITESPACE"," ",357],["T_VARIABLE","$this",357],["T_OBJECT_OPERATOR","->",357],["T_STRING","xpath",357],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/a[contains(@href, :href)]'",357],",",["T_WHITESPACE"," ",357],["T_ARRAY","array",357],"(",["T_CONSTANT_ENCAPSED_STRING","':href'",357],["T_WHITESPACE"," ",357],["T_DOUBLE_ARROW","=>",357],["T_WHITESPACE"," ",357],["T_VARIABLE","$href",357],")",")",";",["T_WHITESPACE","\n    ",357],["T_VARIABLE","$message",358],["T_WHITESPACE"," ",358],"=",["T_WHITESPACE"," ",358],"(",["T_VARIABLE","$message",358],["T_WHITESPACE"," ",358],"?",["T_WHITESPACE"," ",358],["T_VARIABLE","$message",358],["T_WHITESPACE"," ",358],":",["T_WHITESPACE"," ",358],["T_STRING","SafeMarkup",358],["T_DOUBLE_COLON","::",358],["T_STRING","format",358],"(",["T_CONSTANT_ENCAPSED_STRING","'Link containing href %href found.'",358],",",["T_WHITESPACE"," ",358],["T_ARRAY","array",358],"(",["T_CONSTANT_ENCAPSED_STRING","'%href'",358],["T_WHITESPACE"," ",358],["T_DOUBLE_ARROW","=>",358],["T_WHITESPACE"," ",358],["T_VARIABLE","$href",358],")",")",")",";",["T_WHITESPACE","\n    ",358],["T_RETURN","return",359],["T_WHITESPACE"," ",359],["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","assert",359],"(",["T_ISSET","isset",359],"(",["T_VARIABLE","$links",359],"[",["T_VARIABLE","$index",359],"]",")",",",["T_WHITESPACE"," ",359],["T_VARIABLE","$message",359],",",["T_WHITESPACE"," ",359],["T_VARIABLE","$group",359],")",";",["T_WHITESPACE","\n  ",359],"}",["T_WHITESPACE","\n\n  ",360],["T_DOC_COMMENT","\/**\n   * Passes if a link containing a given href (part) is not found.\n   *\n   * @param string $href\n   *   The full or partial value of the 'href' attribute of the anchor tag.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",362],["T_WHITESPACE","\n  ",380],["T_PROTECTED","protected",381],["T_WHITESPACE"," ",381],["T_FUNCTION","function",381],["T_WHITESPACE"," ",381],["T_STRING","assertNoLinkByHref",381],"(",["T_VARIABLE","$href",381],",",["T_WHITESPACE"," ",381],["T_VARIABLE","$message",381],["T_WHITESPACE"," ",381],"=",["T_WHITESPACE"," ",381],["T_CONSTANT_ENCAPSED_STRING","''",381],",",["T_WHITESPACE"," ",381],["T_VARIABLE","$group",381],["T_WHITESPACE"," ",381],"=",["T_WHITESPACE"," ",381],["T_CONSTANT_ENCAPSED_STRING","'Other'",381],")",["T_WHITESPACE"," ",381],"{",["T_WHITESPACE","\n    ",381],["T_VARIABLE","$links",382],["T_WHITESPACE"," ",382],"=",["T_WHITESPACE"," ",382],["T_VARIABLE","$this",382],["T_OBJECT_OPERATOR","->",382],["T_STRING","xpath",382],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/a[contains(@href, :href)]'",382],",",["T_WHITESPACE"," ",382],["T_ARRAY","array",382],"(",["T_CONSTANT_ENCAPSED_STRING","':href'",382],["T_WHITESPACE"," ",382],["T_DOUBLE_ARROW","=>",382],["T_WHITESPACE"," ",382],["T_VARIABLE","$href",382],")",")",";",["T_WHITESPACE","\n    ",382],["T_VARIABLE","$message",383],["T_WHITESPACE"," ",383],"=",["T_WHITESPACE"," ",383],"(",["T_VARIABLE","$message",383],["T_WHITESPACE"," ",383],"?",["T_WHITESPACE"," ",383],["T_VARIABLE","$message",383],["T_WHITESPACE"," ",383],":",["T_WHITESPACE"," ",383],["T_STRING","SafeMarkup",383],["T_DOUBLE_COLON","::",383],["T_STRING","format",383],"(",["T_CONSTANT_ENCAPSED_STRING","'No link containing href %href found.'",383],",",["T_WHITESPACE"," ",383],["T_ARRAY","array",383],"(",["T_CONSTANT_ENCAPSED_STRING","'%href'",383],["T_WHITESPACE"," ",383],["T_DOUBLE_ARROW","=>",383],["T_WHITESPACE"," ",383],["T_VARIABLE","$href",383],")",")",")",";",["T_WHITESPACE","\n    ",383],["T_RETURN","return",384],["T_WHITESPACE"," ",384],["T_VARIABLE","$this",384],["T_OBJECT_OPERATOR","->",384],["T_STRING","assert",384],"(",["T_EMPTY","empty",384],"(",["T_VARIABLE","$links",384],")",",",["T_WHITESPACE"," ",384],["T_VARIABLE","$message",384],",",["T_WHITESPACE"," ",384],["T_VARIABLE","$group",384],")",";",["T_WHITESPACE","\n  ",384],"}",["T_WHITESPACE","\n\n  ",385],["T_DOC_COMMENT","\/**\n   * Passes if a link containing a given href is not found in the main region.\n   *\n   * @param string $href\n   *   The full or partial value of the 'href' attribute of the anchor tag.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",387],["T_WHITESPACE","\n  ",405],["T_PROTECTED","protected",406],["T_WHITESPACE"," ",406],["T_FUNCTION","function",406],["T_WHITESPACE"," ",406],["T_STRING","assertNoLinkByHrefInMainRegion",406],"(",["T_VARIABLE","$href",406],",",["T_WHITESPACE"," ",406],["T_VARIABLE","$message",406],["T_WHITESPACE"," ",406],"=",["T_WHITESPACE"," ",406],["T_CONSTANT_ENCAPSED_STRING","''",406],",",["T_WHITESPACE"," ",406],["T_VARIABLE","$group",406],["T_WHITESPACE"," ",406],"=",["T_WHITESPACE"," ",406],["T_CONSTANT_ENCAPSED_STRING","'Other'",406],")",["T_WHITESPACE"," ",406],"{",["T_WHITESPACE","\n    ",406],["T_VARIABLE","$links",407],["T_WHITESPACE"," ",407],"=",["T_WHITESPACE"," ",407],["T_VARIABLE","$this",407],["T_OBJECT_OPERATOR","->",407],["T_STRING","xpath",407],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/main\/\/a[contains(@href, :href)]'",407],",",["T_WHITESPACE"," ",407],["T_ARRAY","array",407],"(",["T_CONSTANT_ENCAPSED_STRING","':href'",407],["T_WHITESPACE"," ",407],["T_DOUBLE_ARROW","=>",407],["T_WHITESPACE"," ",407],["T_VARIABLE","$href",407],")",")",";",["T_WHITESPACE","\n    ",407],["T_VARIABLE","$message",408],["T_WHITESPACE"," ",408],"=",["T_WHITESPACE"," ",408],"(",["T_VARIABLE","$message",408],["T_WHITESPACE"," ",408],"?",["T_WHITESPACE"," ",408],["T_VARIABLE","$message",408],["T_WHITESPACE"," ",408],":",["T_WHITESPACE"," ",408],["T_STRING","SafeMarkup",408],["T_DOUBLE_COLON","::",408],["T_STRING","format",408],"(",["T_CONSTANT_ENCAPSED_STRING","'No link containing href %href found.'",408],",",["T_WHITESPACE"," ",408],["T_ARRAY","array",408],"(",["T_CONSTANT_ENCAPSED_STRING","'%href'",408],["T_WHITESPACE"," ",408],["T_DOUBLE_ARROW","=>",408],["T_WHITESPACE"," ",408],["T_VARIABLE","$href",408],")",")",")",";",["T_WHITESPACE","\n    ",408],["T_RETURN","return",409],["T_WHITESPACE"," ",409],["T_VARIABLE","$this",409],["T_OBJECT_OPERATOR","->",409],["T_STRING","assert",409],"(",["T_EMPTY","empty",409],"(",["T_VARIABLE","$links",409],")",",",["T_WHITESPACE"," ",409],["T_VARIABLE","$message",409],",",["T_WHITESPACE"," ",409],["T_VARIABLE","$group",409],")",";",["T_WHITESPACE","\n  ",409],"}",["T_WHITESPACE","\n\n  ",410],["T_DOC_COMMENT","\/**\n   * Passes if the raw text IS found on the loaded page, fail otherwise.\n   *\n   * Raw text refers to the raw HTML that the page generated.\n   *\n   * @param string $raw\n   *   Raw (HTML) string to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",412],["T_WHITESPACE","\n  ",432],["T_PROTECTED","protected",433],["T_WHITESPACE"," ",433],["T_FUNCTION","function",433],["T_WHITESPACE"," ",433],["T_STRING","assertRaw",433],"(",["T_VARIABLE","$raw",433],",",["T_WHITESPACE"," ",433],["T_VARIABLE","$message",433],["T_WHITESPACE"," ",433],"=",["T_WHITESPACE"," ",433],["T_CONSTANT_ENCAPSED_STRING","''",433],",",["T_WHITESPACE"," ",433],["T_VARIABLE","$group",433],["T_WHITESPACE"," ",433],"=",["T_WHITESPACE"," ",433],["T_CONSTANT_ENCAPSED_STRING","'Other'",433],")",["T_WHITESPACE"," ",433],"{",["T_WHITESPACE","\n    ",433],["T_IF","if",434],["T_WHITESPACE"," ",434],"(","!",["T_VARIABLE","$message",434],")",["T_WHITESPACE"," ",434],"{",["T_WHITESPACE","\n      ",434],["T_VARIABLE","$message",435],["T_WHITESPACE"," ",435],"=",["T_WHITESPACE"," ",435],["T_CONSTANT_ENCAPSED_STRING","'Raw \"'",435],["T_WHITESPACE"," ",435],".",["T_WHITESPACE"," ",435],["T_STRING","Html",435],["T_DOUBLE_COLON","::",435],["T_STRING","escape",435],"(",["T_VARIABLE","$raw",435],")",["T_WHITESPACE"," ",435],".",["T_WHITESPACE"," ",435],["T_CONSTANT_ENCAPSED_STRING","'\" found'",435],";",["T_WHITESPACE","\n    ",435],"}",["T_WHITESPACE","\n    ",436],["T_RETURN","return",437],["T_WHITESPACE"," ",437],["T_VARIABLE","$this",437],["T_OBJECT_OPERATOR","->",437],["T_STRING","assert",437],"(",["T_STRING","strpos",437],"(",["T_VARIABLE","$this",437],["T_OBJECT_OPERATOR","->",437],["T_STRING","getRawContent",437],"(",")",",",["T_WHITESPACE"," ",437],["T_STRING_CAST","(string)",437],["T_WHITESPACE"," ",437],["T_VARIABLE","$raw",437],")",["T_WHITESPACE"," ",437],["T_IS_NOT_IDENTICAL","!==",437],["T_WHITESPACE"," ",437],["T_STRING","FALSE",437],",",["T_WHITESPACE"," ",437],["T_VARIABLE","$message",437],",",["T_WHITESPACE"," ",437],["T_VARIABLE","$group",437],")",";",["T_WHITESPACE","\n  ",437],"}",["T_WHITESPACE","\n\n  ",438],["T_DOC_COMMENT","\/**\n   * Passes if the raw text is NOT found on the loaded page, fail otherwise.\n   *\n   * Raw text refers to the raw HTML that the page generated.\n   *\n   * @param string $raw\n   *   Raw (HTML) string to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",440],["T_WHITESPACE","\n  ",460],["T_PROTECTED","protected",461],["T_WHITESPACE"," ",461],["T_FUNCTION","function",461],["T_WHITESPACE"," ",461],["T_STRING","assertNoRaw",461],"(",["T_VARIABLE","$raw",461],",",["T_WHITESPACE"," ",461],["T_VARIABLE","$message",461],["T_WHITESPACE"," ",461],"=",["T_WHITESPACE"," ",461],["T_CONSTANT_ENCAPSED_STRING","''",461],",",["T_WHITESPACE"," ",461],["T_VARIABLE","$group",461],["T_WHITESPACE"," ",461],"=",["T_WHITESPACE"," ",461],["T_CONSTANT_ENCAPSED_STRING","'Other'",461],")",["T_WHITESPACE"," ",461],"{",["T_WHITESPACE","\n    ",461],["T_IF","if",462],["T_WHITESPACE"," ",462],"(","!",["T_VARIABLE","$message",462],")",["T_WHITESPACE"," ",462],"{",["T_WHITESPACE","\n      ",462],["T_VARIABLE","$message",463],["T_WHITESPACE"," ",463],"=",["T_WHITESPACE"," ",463],["T_CONSTANT_ENCAPSED_STRING","'Raw \"'",463],["T_WHITESPACE"," ",463],".",["T_WHITESPACE"," ",463],["T_STRING","Html",463],["T_DOUBLE_COLON","::",463],["T_STRING","escape",463],"(",["T_VARIABLE","$raw",463],")",["T_WHITESPACE"," ",463],".",["T_WHITESPACE"," ",463],["T_CONSTANT_ENCAPSED_STRING","'\" not found'",463],";",["T_WHITESPACE","\n    ",463],"}",["T_WHITESPACE","\n    ",464],["T_RETURN","return",465],["T_WHITESPACE"," ",465],["T_VARIABLE","$this",465],["T_OBJECT_OPERATOR","->",465],["T_STRING","assert",465],"(",["T_STRING","strpos",465],"(",["T_VARIABLE","$this",465],["T_OBJECT_OPERATOR","->",465],["T_STRING","getRawContent",465],"(",")",",",["T_WHITESPACE"," ",465],["T_STRING_CAST","(string)",465],["T_WHITESPACE"," ",465],["T_VARIABLE","$raw",465],")",["T_WHITESPACE"," ",465],["T_IS_IDENTICAL","===",465],["T_WHITESPACE"," ",465],["T_STRING","FALSE",465],",",["T_WHITESPACE"," ",465],["T_VARIABLE","$message",465],",",["T_WHITESPACE"," ",465],["T_VARIABLE","$group",465],")",";",["T_WHITESPACE","\n  ",465],"}",["T_WHITESPACE","\n\n  ",466],["T_DOC_COMMENT","\/**\n   * Passes if the raw text IS found escaped on the loaded page, fail otherwise.\n   *\n   * Raw text refers to the raw HTML that the page generated.\n   *\n   * @param string $raw\n   *   Raw (HTML) string to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",468],["T_WHITESPACE","\n  ",488],["T_PROTECTED","protected",489],["T_WHITESPACE"," ",489],["T_FUNCTION","function",489],["T_WHITESPACE"," ",489],["T_STRING","assertEscaped",489],"(",["T_VARIABLE","$raw",489],",",["T_WHITESPACE"," ",489],["T_VARIABLE","$message",489],["T_WHITESPACE"," ",489],"=",["T_WHITESPACE"," ",489],["T_CONSTANT_ENCAPSED_STRING","''",489],",",["T_WHITESPACE"," ",489],["T_VARIABLE","$group",489],["T_WHITESPACE"," ",489],"=",["T_WHITESPACE"," ",489],["T_CONSTANT_ENCAPSED_STRING","'Other'",489],")",["T_WHITESPACE"," ",489],"{",["T_WHITESPACE","\n    ",489],["T_IF","if",490],["T_WHITESPACE"," ",490],"(","!",["T_VARIABLE","$message",490],")",["T_WHITESPACE"," ",490],"{",["T_WHITESPACE","\n      ",490],["T_VARIABLE","$message",491],["T_WHITESPACE"," ",491],"=",["T_WHITESPACE"," ",491],["T_CONSTANT_ENCAPSED_STRING","'Escaped \"'",491],["T_WHITESPACE"," ",491],".",["T_WHITESPACE"," ",491],["T_STRING","Html",491],["T_DOUBLE_COLON","::",491],["T_STRING","escape",491],"(",["T_VARIABLE","$raw",491],")",["T_WHITESPACE"," ",491],".",["T_WHITESPACE"," ",491],["T_CONSTANT_ENCAPSED_STRING","'\" found'",491],";",["T_WHITESPACE","\n    ",491],"}",["T_WHITESPACE","\n    ",492],["T_RETURN","return",493],["T_WHITESPACE"," ",493],["T_VARIABLE","$this",493],["T_OBJECT_OPERATOR","->",493],["T_STRING","assert",493],"(",["T_STRING","strpos",493],"(",["T_VARIABLE","$this",493],["T_OBJECT_OPERATOR","->",493],["T_STRING","getRawContent",493],"(",")",",",["T_WHITESPACE"," ",493],["T_STRING","Html",493],["T_DOUBLE_COLON","::",493],["T_STRING","escape",493],"(",["T_VARIABLE","$raw",493],")",")",["T_WHITESPACE"," ",493],["T_IS_NOT_IDENTICAL","!==",493],["T_WHITESPACE"," ",493],["T_STRING","FALSE",493],",",["T_WHITESPACE"," ",493],["T_VARIABLE","$message",493],",",["T_WHITESPACE"," ",493],["T_VARIABLE","$group",493],")",";",["T_WHITESPACE","\n  ",493],"}",["T_WHITESPACE","\n\n  ",494],["T_DOC_COMMENT","\/**\n   * Passes if the raw text IS NOT found escaped on the loaded page, fail\n   * otherwise.\n   *\n   * Raw text refers to the raw HTML that the page generated.\n   *\n   * @param string $raw\n   *   Raw (HTML) string to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",496],["T_WHITESPACE","\n  ",517],["T_PROTECTED","protected",518],["T_WHITESPACE"," ",518],["T_FUNCTION","function",518],["T_WHITESPACE"," ",518],["T_STRING","assertNoEscaped",518],"(",["T_VARIABLE","$raw",518],",",["T_WHITESPACE"," ",518],["T_VARIABLE","$message",518],["T_WHITESPACE"," ",518],"=",["T_WHITESPACE"," ",518],["T_CONSTANT_ENCAPSED_STRING","''",518],",",["T_WHITESPACE"," ",518],["T_VARIABLE","$group",518],["T_WHITESPACE"," ",518],"=",["T_WHITESPACE"," ",518],["T_CONSTANT_ENCAPSED_STRING","'Other'",518],")",["T_WHITESPACE"," ",518],"{",["T_WHITESPACE","\n    ",518],["T_IF","if",519],["T_WHITESPACE"," ",519],"(","!",["T_VARIABLE","$message",519],")",["T_WHITESPACE"," ",519],"{",["T_WHITESPACE","\n      ",519],["T_VARIABLE","$message",520],["T_WHITESPACE"," ",520],"=",["T_WHITESPACE"," ",520],["T_CONSTANT_ENCAPSED_STRING","'Escaped \"'",520],["T_WHITESPACE"," ",520],".",["T_WHITESPACE"," ",520],["T_STRING","Html",520],["T_DOUBLE_COLON","::",520],["T_STRING","escape",520],"(",["T_VARIABLE","$raw",520],")",["T_WHITESPACE"," ",520],".",["T_WHITESPACE"," ",520],["T_CONSTANT_ENCAPSED_STRING","'\" not found'",520],";",["T_WHITESPACE","\n    ",520],"}",["T_WHITESPACE","\n    ",521],["T_RETURN","return",522],["T_WHITESPACE"," ",522],["T_VARIABLE","$this",522],["T_OBJECT_OPERATOR","->",522],["T_STRING","assert",522],"(",["T_STRING","strpos",522],"(",["T_VARIABLE","$this",522],["T_OBJECT_OPERATOR","->",522],["T_STRING","getRawContent",522],"(",")",",",["T_WHITESPACE"," ",522],["T_STRING","Html",522],["T_DOUBLE_COLON","::",522],["T_STRING","escape",522],"(",["T_VARIABLE","$raw",522],")",")",["T_WHITESPACE"," ",522],["T_IS_IDENTICAL","===",522],["T_WHITESPACE"," ",522],["T_STRING","FALSE",522],",",["T_WHITESPACE"," ",522],["T_VARIABLE","$message",522],",",["T_WHITESPACE"," ",522],["T_VARIABLE","$group",522],")",";",["T_WHITESPACE","\n  ",522],"}",["T_WHITESPACE","\n\n  ",523],["T_DOC_COMMENT","\/**\n   * Passes if the page (with HTML stripped) contains the text.\n   *\n   * Note that stripping HTML tags also removes their attributes, such as\n   * the values of text fields.\n   *\n   * @param string $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\n   * @see \\Drupal\\simpletest\\AssertContentTrait::assertRaw()\n   *\/",525],["T_WHITESPACE","\n  ",548],["T_PROTECTED","protected",549],["T_WHITESPACE"," ",549],["T_FUNCTION","function",549],["T_WHITESPACE"," ",549],["T_STRING","assertText",549],"(",["T_VARIABLE","$text",549],",",["T_WHITESPACE"," ",549],["T_VARIABLE","$message",549],["T_WHITESPACE"," ",549],"=",["T_WHITESPACE"," ",549],["T_CONSTANT_ENCAPSED_STRING","''",549],",",["T_WHITESPACE"," ",549],["T_VARIABLE","$group",549],["T_WHITESPACE"," ",549],"=",["T_WHITESPACE"," ",549],["T_CONSTANT_ENCAPSED_STRING","'Other'",549],")",["T_WHITESPACE"," ",549],"{",["T_WHITESPACE","\n    ",549],["T_RETURN","return",550],["T_WHITESPACE"," ",550],["T_VARIABLE","$this",550],["T_OBJECT_OPERATOR","->",550],["T_STRING","assertTextHelper",550],"(",["T_VARIABLE","$text",550],",",["T_WHITESPACE"," ",550],["T_VARIABLE","$message",550],",",["T_WHITESPACE"," ",550],["T_VARIABLE","$group",550],",",["T_WHITESPACE"," ",550],["T_STRING","FALSE",550],")",";",["T_WHITESPACE","\n  ",550],"}",["T_WHITESPACE","\n\n  ",551],["T_DOC_COMMENT","\/**\n   * Passes if the page (with HTML stripped) does not contains the text.\n   *\n   * Note that stripping HTML tags also removes their attributes, such as\n   * the values of text fields.\n   *\n   * @param string $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\n   * @see \\Drupal\\simpletest\\AssertContentTrait::assertNoRaw()\n   *\/",553],["T_WHITESPACE","\n  ",576],["T_PROTECTED","protected",577],["T_WHITESPACE"," ",577],["T_FUNCTION","function",577],["T_WHITESPACE"," ",577],["T_STRING","assertNoText",577],"(",["T_VARIABLE","$text",577],",",["T_WHITESPACE"," ",577],["T_VARIABLE","$message",577],["T_WHITESPACE"," ",577],"=",["T_WHITESPACE"," ",577],["T_CONSTANT_ENCAPSED_STRING","''",577],",",["T_WHITESPACE"," ",577],["T_VARIABLE","$group",577],["T_WHITESPACE"," ",577],"=",["T_WHITESPACE"," ",577],["T_CONSTANT_ENCAPSED_STRING","'Other'",577],")",["T_WHITESPACE"," ",577],"{",["T_WHITESPACE","\n    ",577],["T_RETURN","return",578],["T_WHITESPACE"," ",578],["T_VARIABLE","$this",578],["T_OBJECT_OPERATOR","->",578],["T_STRING","assertTextHelper",578],"(",["T_VARIABLE","$text",578],",",["T_WHITESPACE"," ",578],["T_VARIABLE","$message",578],",",["T_WHITESPACE"," ",578],["T_VARIABLE","$group",578],",",["T_WHITESPACE"," ",578],["T_STRING","TRUE",578],")",";",["T_WHITESPACE","\n  ",578],"}",["T_WHITESPACE","\n\n  ",579],["T_DOC_COMMENT","\/**\n   * Helper for assertText and assertNoText.\n   *\n   * It is not recommended to call this function directly.\n   *\n   * @param string $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default. Defaults to 'Other'.\n   * @param bool $not_exists\n   *   (optional) TRUE if this text should not exist, FALSE if it should.\n   *   Defaults to TRUE.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",581],["T_WHITESPACE","\n  ",604],["T_PROTECTED","protected",605],["T_WHITESPACE"," ",605],["T_FUNCTION","function",605],["T_WHITESPACE"," ",605],["T_STRING","assertTextHelper",605],"(",["T_VARIABLE","$text",605],",",["T_WHITESPACE"," ",605],["T_VARIABLE","$message",605],["T_WHITESPACE"," ",605],"=",["T_WHITESPACE"," ",605],["T_CONSTANT_ENCAPSED_STRING","''",605],",",["T_WHITESPACE"," ",605],["T_VARIABLE","$group",605],["T_WHITESPACE"," ",605],"=",["T_WHITESPACE"," ",605],["T_CONSTANT_ENCAPSED_STRING","'Other'",605],",",["T_WHITESPACE"," ",605],["T_VARIABLE","$not_exists",605],["T_WHITESPACE"," ",605],"=",["T_WHITESPACE"," ",605],["T_STRING","TRUE",605],")",["T_WHITESPACE"," ",605],"{",["T_WHITESPACE","\n    ",605],["T_IF","if",606],["T_WHITESPACE"," ",606],"(","!",["T_VARIABLE","$message",606],")",["T_WHITESPACE"," ",606],"{",["T_WHITESPACE","\n      ",606],["T_VARIABLE","$message",607],["T_WHITESPACE"," ",607],"=",["T_WHITESPACE"," ",607],"!",["T_VARIABLE","$not_exists",607],["T_WHITESPACE"," ",607],"?",["T_WHITESPACE"," ",607],["T_STRING","SafeMarkup",607],["T_DOUBLE_COLON","::",607],["T_STRING","format",607],"(",["T_CONSTANT_ENCAPSED_STRING","'\"@text\" found'",607],",",["T_WHITESPACE"," ",607],["T_ARRAY","array",607],"(",["T_CONSTANT_ENCAPSED_STRING","'@text'",607],["T_WHITESPACE"," ",607],["T_DOUBLE_ARROW","=>",607],["T_WHITESPACE"," ",607],["T_VARIABLE","$text",607],")",")",["T_WHITESPACE"," ",607],":",["T_WHITESPACE"," ",607],["T_STRING","SafeMarkup",607],["T_DOUBLE_COLON","::",607],["T_STRING","format",607],"(",["T_CONSTANT_ENCAPSED_STRING","'\"@text\" not found'",607],",",["T_WHITESPACE"," ",607],["T_ARRAY","array",607],"(",["T_CONSTANT_ENCAPSED_STRING","'@text'",607],["T_WHITESPACE"," ",607],["T_DOUBLE_ARROW","=>",607],["T_WHITESPACE"," ",607],["T_VARIABLE","$text",607],")",")",";",["T_WHITESPACE","\n    ",607],"}",["T_WHITESPACE","\n    ",608],["T_RETURN","return",609],["T_WHITESPACE"," ",609],["T_VARIABLE","$this",609],["T_OBJECT_OPERATOR","->",609],["T_STRING","assert",609],"(",["T_VARIABLE","$not_exists",609],["T_WHITESPACE"," ",609],["T_IS_EQUAL","==",609],["T_WHITESPACE"," ",609],"(",["T_STRING","strpos",609],"(",["T_VARIABLE","$this",609],["T_OBJECT_OPERATOR","->",609],["T_STRING","getTextContent",609],"(",")",",",["T_WHITESPACE"," ",609],["T_STRING_CAST","(string)",609],["T_WHITESPACE"," ",609],["T_VARIABLE","$text",609],")",["T_WHITESPACE"," ",609],["T_IS_IDENTICAL","===",609],["T_WHITESPACE"," ",609],["T_STRING","FALSE",609],")",",",["T_WHITESPACE"," ",609],["T_VARIABLE","$message",609],",",["T_WHITESPACE"," ",609],["T_VARIABLE","$group",609],")",";",["T_WHITESPACE","\n  ",609],"}",["T_WHITESPACE","\n\n  ",610],["T_DOC_COMMENT","\/**\n   * Passes if the text is found ONLY ONCE on the text version of the page.\n   *\n   * The text version is the equivalent of what a user would see when viewing\n   * through a web browser. In other words the HTML has been filtered out of\n   * the contents.\n   *\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",612],["T_WHITESPACE","\n  ",634],["T_PROTECTED","protected",635],["T_WHITESPACE"," ",635],["T_FUNCTION","function",635],["T_WHITESPACE"," ",635],["T_STRING","assertUniqueText",635],"(",["T_VARIABLE","$text",635],",",["T_WHITESPACE"," ",635],["T_VARIABLE","$message",635],["T_WHITESPACE"," ",635],"=",["T_WHITESPACE"," ",635],["T_CONSTANT_ENCAPSED_STRING","''",635],",",["T_WHITESPACE"," ",635],["T_VARIABLE","$group",635],["T_WHITESPACE"," ",635],"=",["T_WHITESPACE"," ",635],["T_CONSTANT_ENCAPSED_STRING","'Other'",635],")",["T_WHITESPACE"," ",635],"{",["T_WHITESPACE","\n    ",635],["T_RETURN","return",636],["T_WHITESPACE"," ",636],["T_VARIABLE","$this",636],["T_OBJECT_OPERATOR","->",636],["T_STRING","assertUniqueTextHelper",636],"(",["T_VARIABLE","$text",636],",",["T_WHITESPACE"," ",636],["T_VARIABLE","$message",636],",",["T_WHITESPACE"," ",636],["T_VARIABLE","$group",636],",",["T_WHITESPACE"," ",636],["T_STRING","TRUE",636],")",";",["T_WHITESPACE","\n  ",636],"}",["T_WHITESPACE","\n\n  ",637],["T_DOC_COMMENT","\/**\n   * Passes if the text is found MORE THAN ONCE on the text version of the page.\n   *\n   * The text version is the equivalent of what a user would see when viewing\n   * through a web browser. In other words the HTML has been filtered out of\n   * the contents.\n   *\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",639],["T_WHITESPACE","\n  ",661],["T_PROTECTED","protected",662],["T_WHITESPACE"," ",662],["T_FUNCTION","function",662],["T_WHITESPACE"," ",662],["T_STRING","assertNoUniqueText",662],"(",["T_VARIABLE","$text",662],",",["T_WHITESPACE"," ",662],["T_VARIABLE","$message",662],["T_WHITESPACE"," ",662],"=",["T_WHITESPACE"," ",662],["T_CONSTANT_ENCAPSED_STRING","''",662],",",["T_WHITESPACE"," ",662],["T_VARIABLE","$group",662],["T_WHITESPACE"," ",662],"=",["T_WHITESPACE"," ",662],["T_CONSTANT_ENCAPSED_STRING","'Other'",662],")",["T_WHITESPACE"," ",662],"{",["T_WHITESPACE","\n    ",662],["T_RETURN","return",663],["T_WHITESPACE"," ",663],["T_VARIABLE","$this",663],["T_OBJECT_OPERATOR","->",663],["T_STRING","assertUniqueTextHelper",663],"(",["T_VARIABLE","$text",663],",",["T_WHITESPACE"," ",663],["T_VARIABLE","$message",663],",",["T_WHITESPACE"," ",663],["T_VARIABLE","$group",663],",",["T_WHITESPACE"," ",663],["T_STRING","FALSE",663],")",";",["T_WHITESPACE","\n  ",663],"}",["T_WHITESPACE","\n\n  ",664],["T_DOC_COMMENT","\/**\n   * Helper for assertUniqueText and assertNoUniqueText.\n   *\n   * It is not recommended to call this function directly.\n   *\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $text\n   *   Plain text to look for.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default. Defaults to 'Other'.\n   * @param bool $be_unique\n   *   (optional) TRUE if this text should be found only once, FALSE if it\n   *   should be found more than once. Defaults to FALSE.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",666],["T_WHITESPACE","\n  ",689],["T_PROTECTED","protected",690],["T_WHITESPACE"," ",690],["T_FUNCTION","function",690],["T_WHITESPACE"," ",690],["T_STRING","assertUniqueTextHelper",690],"(",["T_VARIABLE","$text",690],",",["T_WHITESPACE"," ",690],["T_VARIABLE","$message",690],["T_WHITESPACE"," ",690],"=",["T_WHITESPACE"," ",690],["T_CONSTANT_ENCAPSED_STRING","''",690],",",["T_WHITESPACE"," ",690],["T_VARIABLE","$group",690],["T_WHITESPACE"," ",690],"=",["T_WHITESPACE"," ",690],["T_CONSTANT_ENCAPSED_STRING","'Other'",690],",",["T_WHITESPACE"," ",690],["T_VARIABLE","$be_unique",690],["T_WHITESPACE"," ",690],"=",["T_WHITESPACE"," ",690],["T_STRING","FALSE",690],")",["T_WHITESPACE"," ",690],"{",["T_WHITESPACE","\n    ",690],["T_COMMENT","\/\/ Cast MarkupInterface objects to string.\n",691],["T_WHITESPACE","    ",692],["T_VARIABLE","$text",692],["T_WHITESPACE"," ",692],"=",["T_WHITESPACE"," ",692],["T_STRING_CAST","(string)",692],["T_WHITESPACE"," ",692],["T_VARIABLE","$text",692],";",["T_WHITESPACE","\n    ",692],["T_IF","if",693],["T_WHITESPACE"," ",693],"(","!",["T_VARIABLE","$message",693],")",["T_WHITESPACE"," ",693],"{",["T_WHITESPACE","\n      ",693],["T_VARIABLE","$message",694],["T_WHITESPACE"," ",694],"=",["T_WHITESPACE"," ",694],["T_CONSTANT_ENCAPSED_STRING","'\"'",694],["T_WHITESPACE"," ",694],".",["T_WHITESPACE"," ",694],["T_VARIABLE","$text",694],["T_WHITESPACE"," ",694],".",["T_WHITESPACE"," ",694],["T_CONSTANT_ENCAPSED_STRING","'\"'",694],["T_WHITESPACE"," ",694],".",["T_WHITESPACE"," ",694],"(",["T_VARIABLE","$be_unique",694],["T_WHITESPACE"," ",694],"?",["T_WHITESPACE"," ",694],["T_CONSTANT_ENCAPSED_STRING","' found only once'",694],["T_WHITESPACE"," ",694],":",["T_WHITESPACE"," ",694],["T_CONSTANT_ENCAPSED_STRING","' found more than once'",694],")",";",["T_WHITESPACE","\n    ",694],"}",["T_WHITESPACE","\n    ",695],["T_VARIABLE","$first_occurrence",696],["T_WHITESPACE"," ",696],"=",["T_WHITESPACE"," ",696],["T_STRING","strpos",696],"(",["T_VARIABLE","$this",696],["T_OBJECT_OPERATOR","->",696],["T_STRING","getTextContent",696],"(",")",",",["T_WHITESPACE"," ",696],["T_VARIABLE","$text",696],")",";",["T_WHITESPACE","\n    ",696],["T_IF","if",697],["T_WHITESPACE"," ",697],"(",["T_VARIABLE","$first_occurrence",697],["T_WHITESPACE"," ",697],["T_IS_IDENTICAL","===",697],["T_WHITESPACE"," ",697],["T_STRING","FALSE",697],")",["T_WHITESPACE"," ",697],"{",["T_WHITESPACE","\n      ",697],["T_RETURN","return",698],["T_WHITESPACE"," ",698],["T_VARIABLE","$this",698],["T_OBJECT_OPERATOR","->",698],["T_STRING","assert",698],"(",["T_STRING","FALSE",698],",",["T_WHITESPACE"," ",698],["T_VARIABLE","$message",698],",",["T_WHITESPACE"," ",698],["T_VARIABLE","$group",698],")",";",["T_WHITESPACE","\n    ",698],"}",["T_WHITESPACE","\n    ",699],["T_VARIABLE","$offset",700],["T_WHITESPACE"," ",700],"=",["T_WHITESPACE"," ",700],["T_VARIABLE","$first_occurrence",700],["T_WHITESPACE"," ",700],"+",["T_WHITESPACE"," ",700],["T_STRING","strlen",700],"(",["T_VARIABLE","$text",700],")",";",["T_WHITESPACE","\n    ",700],["T_VARIABLE","$second_occurrence",701],["T_WHITESPACE"," ",701],"=",["T_WHITESPACE"," ",701],["T_STRING","strpos",701],"(",["T_VARIABLE","$this",701],["T_OBJECT_OPERATOR","->",701],["T_STRING","getTextContent",701],"(",")",",",["T_WHITESPACE"," ",701],["T_VARIABLE","$text",701],",",["T_WHITESPACE"," ",701],["T_VARIABLE","$offset",701],")",";",["T_WHITESPACE","\n    ",701],["T_RETURN","return",702],["T_WHITESPACE"," ",702],["T_VARIABLE","$this",702],["T_OBJECT_OPERATOR","->",702],["T_STRING","assert",702],"(",["T_VARIABLE","$be_unique",702],["T_WHITESPACE"," ",702],["T_IS_EQUAL","==",702],["T_WHITESPACE"," ",702],"(",["T_VARIABLE","$second_occurrence",702],["T_WHITESPACE"," ",702],["T_IS_IDENTICAL","===",702],["T_WHITESPACE"," ",702],["T_STRING","FALSE",702],")",",",["T_WHITESPACE"," ",702],["T_VARIABLE","$message",702],",",["T_WHITESPACE"," ",702],["T_VARIABLE","$group",702],")",";",["T_WHITESPACE","\n  ",702],"}",["T_WHITESPACE","\n\n  ",703],["T_DOC_COMMENT","\/**\n   * Triggers a pass if the Perl regex pattern is found in the raw content.\n   *\n   * @param string $pattern\n   *   Perl regex to look for including the regex delimiters.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",705],["T_WHITESPACE","\n  ",723],["T_PROTECTED","protected",724],["T_WHITESPACE"," ",724],["T_FUNCTION","function",724],["T_WHITESPACE"," ",724],["T_STRING","assertPattern",724],"(",["T_VARIABLE","$pattern",724],",",["T_WHITESPACE"," ",724],["T_VARIABLE","$message",724],["T_WHITESPACE"," ",724],"=",["T_WHITESPACE"," ",724],["T_CONSTANT_ENCAPSED_STRING","''",724],",",["T_WHITESPACE"," ",724],["T_VARIABLE","$group",724],["T_WHITESPACE"," ",724],"=",["T_WHITESPACE"," ",724],["T_CONSTANT_ENCAPSED_STRING","'Other'",724],")",["T_WHITESPACE"," ",724],"{",["T_WHITESPACE","\n    ",724],["T_IF","if",725],["T_WHITESPACE"," ",725],"(","!",["T_VARIABLE","$message",725],")",["T_WHITESPACE"," ",725],"{",["T_WHITESPACE","\n      ",725],["T_VARIABLE","$message",726],["T_WHITESPACE"," ",726],"=",["T_WHITESPACE"," ",726],["T_STRING","SafeMarkup",726],["T_DOUBLE_COLON","::",726],["T_STRING","format",726],"(",["T_CONSTANT_ENCAPSED_STRING","'Pattern \"@pattern\" found'",726],",",["T_WHITESPACE"," ",726],["T_ARRAY","array",726],"(",["T_CONSTANT_ENCAPSED_STRING","'@pattern'",726],["T_WHITESPACE"," ",726],["T_DOUBLE_ARROW","=>",726],["T_WHITESPACE"," ",726],["T_VARIABLE","$pattern",726],")",")",";",["T_WHITESPACE","\n    ",726],"}",["T_WHITESPACE","\n    ",727],["T_RETURN","return",728],["T_WHITESPACE"," ",728],["T_VARIABLE","$this",728],["T_OBJECT_OPERATOR","->",728],["T_STRING","assert",728],"(",["T_BOOL_CAST","(bool)",728],["T_WHITESPACE"," ",728],["T_STRING","preg_match",728],"(",["T_VARIABLE","$pattern",728],",",["T_WHITESPACE"," ",728],["T_VARIABLE","$this",728],["T_OBJECT_OPERATOR","->",728],["T_STRING","getRawContent",728],"(",")",")",",",["T_WHITESPACE"," ",728],["T_VARIABLE","$message",728],",",["T_WHITESPACE"," ",728],["T_VARIABLE","$group",728],")",";",["T_WHITESPACE","\n  ",728],"}",["T_WHITESPACE","\n\n  ",729],["T_DOC_COMMENT","\/**\n   * Triggers a pass if the perl regex pattern is not found in raw content.\n   *\n   * @param string $pattern\n   *   Perl regex to look for including the regex delimiters.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",731],["T_WHITESPACE","\n  ",749],["T_PROTECTED","protected",750],["T_WHITESPACE"," ",750],["T_FUNCTION","function",750],["T_WHITESPACE"," ",750],["T_STRING","assertNoPattern",750],"(",["T_VARIABLE","$pattern",750],",",["T_WHITESPACE"," ",750],["T_VARIABLE","$message",750],["T_WHITESPACE"," ",750],"=",["T_WHITESPACE"," ",750],["T_CONSTANT_ENCAPSED_STRING","''",750],",",["T_WHITESPACE"," ",750],["T_VARIABLE","$group",750],["T_WHITESPACE"," ",750],"=",["T_WHITESPACE"," ",750],["T_CONSTANT_ENCAPSED_STRING","'Other'",750],")",["T_WHITESPACE"," ",750],"{",["T_WHITESPACE","\n    ",750],["T_IF","if",751],["T_WHITESPACE"," ",751],"(","!",["T_VARIABLE","$message",751],")",["T_WHITESPACE"," ",751],"{",["T_WHITESPACE","\n      ",751],["T_VARIABLE","$message",752],["T_WHITESPACE"," ",752],"=",["T_WHITESPACE"," ",752],["T_STRING","SafeMarkup",752],["T_DOUBLE_COLON","::",752],["T_STRING","format",752],"(",["T_CONSTANT_ENCAPSED_STRING","'Pattern \"@pattern\" not found'",752],",",["T_WHITESPACE"," ",752],["T_ARRAY","array",752],"(",["T_CONSTANT_ENCAPSED_STRING","'@pattern'",752],["T_WHITESPACE"," ",752],["T_DOUBLE_ARROW","=>",752],["T_WHITESPACE"," ",752],["T_VARIABLE","$pattern",752],")",")",";",["T_WHITESPACE","\n    ",752],"}",["T_WHITESPACE","\n    ",753],["T_RETURN","return",754],["T_WHITESPACE"," ",754],["T_VARIABLE","$this",754],["T_OBJECT_OPERATOR","->",754],["T_STRING","assert",754],"(","!",["T_STRING","preg_match",754],"(",["T_VARIABLE","$pattern",754],",",["T_WHITESPACE"," ",754],["T_VARIABLE","$this",754],["T_OBJECT_OPERATOR","->",754],["T_STRING","getRawContent",754],"(",")",")",",",["T_WHITESPACE"," ",754],["T_VARIABLE","$message",754],",",["T_WHITESPACE"," ",754],["T_VARIABLE","$group",754],")",";",["T_WHITESPACE","\n  ",754],"}",["T_WHITESPACE","\n\n  ",755],["T_DOC_COMMENT","\/**\n   * Asserts that a Perl regex pattern is found in the plain-text content.\n   *\n   * @param string $pattern\n   *   Perl regex to look for including the regex delimiters.\n   * @param string $message\n   *   (optional) A message to display with the assertion.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on failure.\n   *\/",757],["T_WHITESPACE","\n  ",772],["T_PROTECTED","protected",773],["T_WHITESPACE"," ",773],["T_FUNCTION","function",773],["T_WHITESPACE"," ",773],["T_STRING","assertTextPattern",773],"(",["T_VARIABLE","$pattern",773],",",["T_WHITESPACE"," ",773],["T_VARIABLE","$message",773],["T_WHITESPACE"," ",773],"=",["T_WHITESPACE"," ",773],["T_STRING","NULL",773],",",["T_WHITESPACE"," ",773],["T_VARIABLE","$group",773],["T_WHITESPACE"," ",773],"=",["T_WHITESPACE"," ",773],["T_CONSTANT_ENCAPSED_STRING","'Other'",773],")",["T_WHITESPACE"," ",773],"{",["T_WHITESPACE","\n    ",773],["T_IF","if",774],["T_WHITESPACE"," ",774],"(","!",["T_ISSET","isset",774],"(",["T_VARIABLE","$message",774],")",")",["T_WHITESPACE"," ",774],"{",["T_WHITESPACE","\n      ",774],["T_VARIABLE","$message",775],["T_WHITESPACE"," ",775],"=",["T_WHITESPACE"," ",775],["T_STRING","SafeMarkup",775],["T_DOUBLE_COLON","::",775],["T_STRING","format",775],"(",["T_CONSTANT_ENCAPSED_STRING","'Pattern \"@pattern\" found'",775],",",["T_WHITESPACE"," ",775],["T_ARRAY","array",775],"(",["T_CONSTANT_ENCAPSED_STRING","'@pattern'",775],["T_WHITESPACE"," ",775],["T_DOUBLE_ARROW","=>",775],["T_WHITESPACE"," ",775],["T_VARIABLE","$pattern",775],")",")",";",["T_WHITESPACE","\n    ",775],"}",["T_WHITESPACE","\n    ",776],["T_RETURN","return",777],["T_WHITESPACE"," ",777],["T_VARIABLE","$this",777],["T_OBJECT_OPERATOR","->",777],["T_STRING","assert",777],"(",["T_BOOL_CAST","(bool)",777],["T_WHITESPACE"," ",777],["T_STRING","preg_match",777],"(",["T_VARIABLE","$pattern",777],",",["T_WHITESPACE"," ",777],["T_VARIABLE","$this",777],["T_OBJECT_OPERATOR","->",777],["T_STRING","getTextContent",777],"(",")",")",",",["T_WHITESPACE"," ",777],["T_VARIABLE","$message",777],",",["T_WHITESPACE"," ",777],["T_VARIABLE","$group",777],")",";",["T_WHITESPACE","\n  ",777],"}",["T_WHITESPACE","\n\n  ",778],["T_DOC_COMMENT","\/**\n   * Pass if the page title is the given string.\n   *\n   * @param string $title\n   *   The string the title should be.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",780],["T_WHITESPACE","\n  ",798],["T_PROTECTED","protected",799],["T_WHITESPACE"," ",799],["T_FUNCTION","function",799],["T_WHITESPACE"," ",799],["T_STRING","assertTitle",799],"(",["T_VARIABLE","$title",799],",",["T_WHITESPACE"," ",799],["T_VARIABLE","$message",799],["T_WHITESPACE"," ",799],"=",["T_WHITESPACE"," ",799],["T_CONSTANT_ENCAPSED_STRING","''",799],",",["T_WHITESPACE"," ",799],["T_VARIABLE","$group",799],["T_WHITESPACE"," ",799],"=",["T_WHITESPACE"," ",799],["T_CONSTANT_ENCAPSED_STRING","'Other'",799],")",["T_WHITESPACE"," ",799],"{",["T_WHITESPACE","\n    ",799],["T_COMMENT","\/\/ Don't use xpath as it messes with HTML escaping.\n",800],["T_WHITESPACE","    ",801],["T_STRING","preg_match",801],"(",["T_CONSTANT_ENCAPSED_STRING","'@<title>(.*)<\/title>@'",801],",",["T_WHITESPACE"," ",801],["T_VARIABLE","$this",801],["T_OBJECT_OPERATOR","->",801],["T_STRING","getRawContent",801],"(",")",",",["T_WHITESPACE"," ",801],["T_VARIABLE","$matches",801],")",";",["T_WHITESPACE","\n    ",801],["T_IF","if",802],["T_WHITESPACE"," ",802],"(",["T_ISSET","isset",802],"(",["T_VARIABLE","$matches",802],"[",["T_LNUMBER","1",802],"]",")",")",["T_WHITESPACE"," ",802],"{",["T_WHITESPACE","\n      ",802],["T_VARIABLE","$actual",803],["T_WHITESPACE"," ",803],"=",["T_WHITESPACE"," ",803],["T_VARIABLE","$matches",803],"[",["T_LNUMBER","1",803],"]",";",["T_WHITESPACE","\n      ",803],["T_VARIABLE","$actual",804],["T_WHITESPACE"," ",804],"=",["T_WHITESPACE"," ",804],["T_VARIABLE","$this",804],["T_OBJECT_OPERATOR","->",804],["T_STRING","castSafeStrings",804],"(",["T_VARIABLE","$actual",804],")",";",["T_WHITESPACE","\n      ",804],["T_VARIABLE","$title",805],["T_WHITESPACE"," ",805],"=",["T_WHITESPACE"," ",805],["T_VARIABLE","$this",805],["T_OBJECT_OPERATOR","->",805],["T_STRING","castSafeStrings",805],"(",["T_VARIABLE","$title",805],")",";",["T_WHITESPACE","\n      ",805],["T_IF","if",806],["T_WHITESPACE"," ",806],"(","!",["T_VARIABLE","$message",806],")",["T_WHITESPACE"," ",806],"{",["T_WHITESPACE","\n        ",806],["T_VARIABLE","$message",807],["T_WHITESPACE"," ",807],"=",["T_WHITESPACE"," ",807],["T_STRING","SafeMarkup",807],["T_DOUBLE_COLON","::",807],["T_STRING","format",807],"(",["T_CONSTANT_ENCAPSED_STRING","'Page title @actual is equal to @expected.'",807],",",["T_WHITESPACE"," ",807],["T_ARRAY","array",807],"(",["T_WHITESPACE","\n          ",807],["T_CONSTANT_ENCAPSED_STRING","'@actual'",808],["T_WHITESPACE"," ",808],["T_DOUBLE_ARROW","=>",808],["T_WHITESPACE"," ",808],["T_STRING","var_export",808],"(",["T_VARIABLE","$actual",808],",",["T_WHITESPACE"," ",808],["T_STRING","TRUE",808],")",",",["T_WHITESPACE","\n          ",808],["T_CONSTANT_ENCAPSED_STRING","'@expected'",809],["T_WHITESPACE"," ",809],["T_DOUBLE_ARROW","=>",809],["T_WHITESPACE"," ",809],["T_STRING","var_export",809],"(",["T_VARIABLE","$title",809],",",["T_WHITESPACE"," ",809],["T_STRING","TRUE",809],")",",",["T_WHITESPACE","\n        ",809],")",")",";",["T_WHITESPACE","\n      ",810],"}",["T_WHITESPACE","\n      ",811],["T_RETURN","return",812],["T_WHITESPACE"," ",812],["T_VARIABLE","$this",812],["T_OBJECT_OPERATOR","->",812],["T_STRING","assertEqual",812],"(",["T_VARIABLE","$actual",812],",",["T_WHITESPACE"," ",812],["T_VARIABLE","$title",812],",",["T_WHITESPACE"," ",812],["T_VARIABLE","$message",812],",",["T_WHITESPACE"," ",812],["T_VARIABLE","$group",812],")",";",["T_WHITESPACE","\n    ",812],"}",["T_WHITESPACE","\n    ",813],["T_RETURN","return",814],["T_WHITESPACE"," ",814],["T_VARIABLE","$this",814],["T_OBJECT_OPERATOR","->",814],["T_STRING","fail",814],"(",["T_CONSTANT_ENCAPSED_STRING","'No title element found on the page.'",814],")",";",["T_WHITESPACE","\n  ",814],"}",["T_WHITESPACE","\n\n  ",815],["T_DOC_COMMENT","\/**\n   * Pass if the page title is not the given string.\n   *\n   * @param string $title\n   *   The string the title should not be.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",817],["T_WHITESPACE","\n  ",835],["T_PROTECTED","protected",836],["T_WHITESPACE"," ",836],["T_FUNCTION","function",836],["T_WHITESPACE"," ",836],["T_STRING","assertNoTitle",836],"(",["T_VARIABLE","$title",836],",",["T_WHITESPACE"," ",836],["T_VARIABLE","$message",836],["T_WHITESPACE"," ",836],"=",["T_WHITESPACE"," ",836],["T_CONSTANT_ENCAPSED_STRING","''",836],",",["T_WHITESPACE"," ",836],["T_VARIABLE","$group",836],["T_WHITESPACE"," ",836],"=",["T_WHITESPACE"," ",836],["T_CONSTANT_ENCAPSED_STRING","'Other'",836],")",["T_WHITESPACE"," ",836],"{",["T_WHITESPACE","\n    ",836],["T_VARIABLE","$actual",837],["T_WHITESPACE"," ",837],"=",["T_WHITESPACE"," ",837],["T_STRING_CAST","(string)",837],["T_WHITESPACE"," ",837],["T_STRING","current",837],"(",["T_VARIABLE","$this",837],["T_OBJECT_OPERATOR","->",837],["T_STRING","xpath",837],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/title'",837],")",")",";",["T_WHITESPACE","\n    ",837],["T_IF","if",838],["T_WHITESPACE"," ",838],"(","!",["T_VARIABLE","$message",838],")",["T_WHITESPACE"," ",838],"{",["T_WHITESPACE","\n      ",838],["T_VARIABLE","$message",839],["T_WHITESPACE"," ",839],"=",["T_WHITESPACE"," ",839],["T_STRING","SafeMarkup",839],["T_DOUBLE_COLON","::",839],["T_STRING","format",839],"(",["T_CONSTANT_ENCAPSED_STRING","'Page title @actual is not equal to @unexpected.'",839],",",["T_WHITESPACE"," ",839],["T_ARRAY","array",839],"(",["T_WHITESPACE","\n        ",839],["T_CONSTANT_ENCAPSED_STRING","'@actual'",840],["T_WHITESPACE"," ",840],["T_DOUBLE_ARROW","=>",840],["T_WHITESPACE"," ",840],["T_STRING","var_export",840],"(",["T_VARIABLE","$actual",840],",",["T_WHITESPACE"," ",840],["T_STRING","TRUE",840],")",",",["T_WHITESPACE","\n        ",840],["T_CONSTANT_ENCAPSED_STRING","'@unexpected'",841],["T_WHITESPACE"," ",841],["T_DOUBLE_ARROW","=>",841],["T_WHITESPACE"," ",841],["T_STRING","var_export",841],"(",["T_VARIABLE","$title",841],",",["T_WHITESPACE"," ",841],["T_STRING","TRUE",841],")",",",["T_WHITESPACE","\n      ",841],")",")",";",["T_WHITESPACE","\n    ",842],"}",["T_WHITESPACE","\n    ",843],["T_RETURN","return",844],["T_WHITESPACE"," ",844],["T_VARIABLE","$this",844],["T_OBJECT_OPERATOR","->",844],["T_STRING","assertNotEqual",844],"(",["T_VARIABLE","$actual",844],",",["T_WHITESPACE"," ",844],["T_VARIABLE","$title",844],",",["T_WHITESPACE"," ",844],["T_VARIABLE","$message",844],",",["T_WHITESPACE"," ",844],["T_VARIABLE","$group",844],")",";",["T_WHITESPACE","\n  ",844],"}",["T_WHITESPACE","\n\n  ",845],["T_DOC_COMMENT","\/**\n   * Asserts themed output.\n   *\n   * @param string $callback\n   *   The name of the theme hook to invoke; e.g. 'links' for links.html.twig.\n   * @param string $variables\n   *   An array of variables to pass to the theme function.\n   * @param string $expected\n   *   The expected themed output string.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",847],["T_WHITESPACE","\n  ",869],["T_PROTECTED","protected",870],["T_WHITESPACE"," ",870],["T_FUNCTION","function",870],["T_WHITESPACE"," ",870],["T_STRING","assertThemeOutput",870],"(",["T_VARIABLE","$callback",870],",",["T_WHITESPACE"," ",870],["T_ARRAY","array",870],["T_WHITESPACE"," ",870],["T_VARIABLE","$variables",870],["T_WHITESPACE"," ",870],"=",["T_WHITESPACE"," ",870],["T_ARRAY","array",870],"(",")",",",["T_WHITESPACE"," ",870],["T_VARIABLE","$expected",870],["T_WHITESPACE"," ",870],"=",["T_WHITESPACE"," ",870],["T_CONSTANT_ENCAPSED_STRING","''",870],",",["T_WHITESPACE"," ",870],["T_VARIABLE","$message",870],["T_WHITESPACE"," ",870],"=",["T_WHITESPACE"," ",870],["T_CONSTANT_ENCAPSED_STRING","''",870],",",["T_WHITESPACE"," ",870],["T_VARIABLE","$group",870],["T_WHITESPACE"," ",870],"=",["T_WHITESPACE"," ",870],["T_CONSTANT_ENCAPSED_STRING","'Other'",870],")",["T_WHITESPACE"," ",870],"{",["T_WHITESPACE","\n    ",870],["T_DOC_COMMENT","\/** @var \\Drupal\\Core\\Render\\RendererInterface $renderer *\/",871],["T_WHITESPACE","\n    ",871],["T_VARIABLE","$renderer",872],["T_WHITESPACE"," ",872],"=",["T_WHITESPACE"," ",872],["T_NS_SEPARATOR","\\",872],["T_STRING","Drupal",872],["T_DOUBLE_COLON","::",872],["T_STRING","service",872],"(",["T_CONSTANT_ENCAPSED_STRING","'renderer'",872],")",";",["T_WHITESPACE","\n\n    ",872],["T_COMMENT","\/\/ The string cast is necessary because theme functions return\n",874],["T_WHITESPACE","    ",875],["T_COMMENT","\/\/ MarkupInterface objects. This means we can assert that $expected\n",875],["T_WHITESPACE","    ",876],["T_COMMENT","\/\/ matches the theme output without having to worry about 0 == ''.\n",876],["T_WHITESPACE","    ",877],["T_VARIABLE","$output",877],["T_WHITESPACE"," ",877],"=",["T_WHITESPACE"," ",877],["T_STRING_CAST","(string)",877],["T_WHITESPACE"," ",877],["T_VARIABLE","$renderer",877],["T_OBJECT_OPERATOR","->",877],["T_STRING","executeInRenderContext",877],"(",["T_NEW","new",877],["T_WHITESPACE"," ",877],["T_STRING","RenderContext",877],"(",")",",",["T_WHITESPACE"," ",877],["T_FUNCTION","function",877],"(",")",["T_WHITESPACE"," ",877],["T_USE","use",877],["T_WHITESPACE"," ",877],"(",["T_VARIABLE","$callback",877],",",["T_WHITESPACE"," ",877],["T_VARIABLE","$variables",877],")",["T_WHITESPACE"," ",877],"{",["T_WHITESPACE","\n      ",877],["T_RETURN","return",878],["T_WHITESPACE"," ",878],["T_NS_SEPARATOR","\\",878],["T_STRING","Drupal",878],["T_DOUBLE_COLON","::",878],["T_STRING","theme",878],"(",")",["T_OBJECT_OPERATOR","->",878],["T_STRING","render",878],"(",["T_VARIABLE","$callback",878],",",["T_WHITESPACE"," ",878],["T_VARIABLE","$variables",878],")",";",["T_WHITESPACE","\n    ",878],"}",")",";",["T_WHITESPACE","\n    ",879],["T_VARIABLE","$this",880],["T_OBJECT_OPERATOR","->",880],["T_STRING","verbose",880],"(",["T_WHITESPACE","\n      ",880],["T_CONSTANT_ENCAPSED_STRING","'<hr \/>'",881],["T_WHITESPACE"," ",881],".",["T_WHITESPACE"," ",881],["T_CONSTANT_ENCAPSED_STRING","'Result:'",881],["T_WHITESPACE"," ",881],".",["T_WHITESPACE"," ",881],["T_CONSTANT_ENCAPSED_STRING","'<pre>'",881],["T_WHITESPACE"," ",881],".",["T_WHITESPACE"," ",881],["T_STRING","Html",881],["T_DOUBLE_COLON","::",881],["T_STRING","escape",881],"(",["T_STRING","var_export",881],"(",["T_VARIABLE","$output",881],",",["T_WHITESPACE"," ",881],["T_STRING","TRUE",881],")",")",["T_WHITESPACE"," ",881],".",["T_WHITESPACE"," ",881],["T_CONSTANT_ENCAPSED_STRING","'<\/pre>'",881],["T_WHITESPACE","\n      ",881],".",["T_WHITESPACE"," ",882],["T_CONSTANT_ENCAPSED_STRING","'<hr \/>'",882],["T_WHITESPACE"," ",882],".",["T_WHITESPACE"," ",882],["T_CONSTANT_ENCAPSED_STRING","'Expected:'",882],["T_WHITESPACE"," ",882],".",["T_WHITESPACE"," ",882],["T_CONSTANT_ENCAPSED_STRING","'<pre>'",882],["T_WHITESPACE"," ",882],".",["T_WHITESPACE"," ",882],["T_STRING","Html",882],["T_DOUBLE_COLON","::",882],["T_STRING","escape",882],"(",["T_STRING","var_export",882],"(",["T_VARIABLE","$expected",882],",",["T_WHITESPACE"," ",882],["T_STRING","TRUE",882],")",")",["T_WHITESPACE"," ",882],".",["T_WHITESPACE"," ",882],["T_CONSTANT_ENCAPSED_STRING","'<\/pre>'",882],["T_WHITESPACE","\n      ",882],".",["T_WHITESPACE"," ",883],["T_CONSTANT_ENCAPSED_STRING","'<hr \/>'",883],["T_WHITESPACE"," ",883],".",["T_WHITESPACE"," ",883],["T_VARIABLE","$output",883],["T_WHITESPACE","\n    ",883],")",";",["T_WHITESPACE","\n    ",884],["T_IF","if",885],["T_WHITESPACE"," ",885],"(","!",["T_VARIABLE","$message",885],")",["T_WHITESPACE"," ",885],"{",["T_WHITESPACE","\n      ",885],["T_VARIABLE","$message",886],["T_WHITESPACE"," ",886],"=",["T_WHITESPACE"," ",886],["T_CONSTANT_ENCAPSED_STRING","'%callback rendered correctly.'",886],";",["T_WHITESPACE","\n    ",886],"}",["T_WHITESPACE","\n    ",887],["T_VARIABLE","$message",888],["T_WHITESPACE"," ",888],"=",["T_WHITESPACE"," ",888],["T_STRING","format_string",888],"(",["T_VARIABLE","$message",888],",",["T_WHITESPACE"," ",888],["T_ARRAY","array",888],"(",["T_CONSTANT_ENCAPSED_STRING","'%callback'",888],["T_WHITESPACE"," ",888],["T_DOUBLE_ARROW","=>",888],["T_WHITESPACE"," ",888],["T_CONSTANT_ENCAPSED_STRING","'theme_'",888],["T_WHITESPACE"," ",888],".",["T_WHITESPACE"," ",888],["T_VARIABLE","$callback",888],["T_WHITESPACE"," ",888],".",["T_WHITESPACE"," ",888],["T_CONSTANT_ENCAPSED_STRING","'()'",888],")",")",";",["T_WHITESPACE","\n    ",888],["T_RETURN","return",889],["T_WHITESPACE"," ",889],["T_VARIABLE","$this",889],["T_OBJECT_OPERATOR","->",889],["T_STRING","assertIdentical",889],"(",["T_VARIABLE","$output",889],",",["T_WHITESPACE"," ",889],["T_VARIABLE","$expected",889],",",["T_WHITESPACE"," ",889],["T_VARIABLE","$message",889],",",["T_WHITESPACE"," ",889],["T_VARIABLE","$group",889],")",";",["T_WHITESPACE","\n  ",889],"}",["T_WHITESPACE","\n\n  ",890],["T_DOC_COMMENT","\/**\n   * Asserts that a field exists in the current page with a given Xpath result.\n   *\n   * @param \\SimpleXmlElement[] $fields\n   *   Xml elements.\n   * @param string $value\n   *   (optional) Value of the field to assert. You may pass in NULL (default) to skip\n   *   checking the actual value, while still checking that the field exists.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",892],["T_WHITESPACE","\n  ",913],["T_PROTECTED","protected",914],["T_WHITESPACE"," ",914],["T_FUNCTION","function",914],["T_WHITESPACE"," ",914],["T_STRING","assertFieldsByValue",914],"(",["T_VARIABLE","$fields",914],",",["T_WHITESPACE"," ",914],["T_VARIABLE","$value",914],["T_WHITESPACE"," ",914],"=",["T_WHITESPACE"," ",914],["T_STRING","NULL",914],",",["T_WHITESPACE"," ",914],["T_VARIABLE","$message",914],["T_WHITESPACE"," ",914],"=",["T_WHITESPACE"," ",914],["T_CONSTANT_ENCAPSED_STRING","''",914],",",["T_WHITESPACE"," ",914],["T_VARIABLE","$group",914],["T_WHITESPACE"," ",914],"=",["T_WHITESPACE"," ",914],["T_CONSTANT_ENCAPSED_STRING","'Other'",914],")",["T_WHITESPACE"," ",914],"{",["T_WHITESPACE","\n    ",914],["T_COMMENT","\/\/ If value specified then check array for match.\n",915],["T_WHITESPACE","    ",916],["T_VARIABLE","$found",916],["T_WHITESPACE"," ",916],"=",["T_WHITESPACE"," ",916],["T_STRING","TRUE",916],";",["T_WHITESPACE","\n    ",916],["T_IF","if",917],["T_WHITESPACE"," ",917],"(",["T_ISSET","isset",917],"(",["T_VARIABLE","$value",917],")",")",["T_WHITESPACE"," ",917],"{",["T_WHITESPACE","\n      ",917],["T_VARIABLE","$found",918],["T_WHITESPACE"," ",918],"=",["T_WHITESPACE"," ",918],["T_STRING","FALSE",918],";",["T_WHITESPACE","\n      ",918],["T_IF","if",919],["T_WHITESPACE"," ",919],"(",["T_VARIABLE","$fields",919],")",["T_WHITESPACE"," ",919],"{",["T_WHITESPACE","\n        ",919],["T_FOREACH","foreach",920],["T_WHITESPACE"," ",920],"(",["T_VARIABLE","$fields",920],["T_WHITESPACE"," ",920],["T_AS","as",920],["T_WHITESPACE"," ",920],["T_VARIABLE","$field",920],")",["T_WHITESPACE"," ",920],"{",["T_WHITESPACE","\n          ",920],["T_IF","if",921],["T_WHITESPACE"," ",921],"(",["T_ISSET","isset",921],"(",["T_VARIABLE","$field",921],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",921],"]",")",["T_WHITESPACE"," ",921],["T_BOOLEAN_AND","&&",921],["T_WHITESPACE"," ",921],["T_VARIABLE","$field",921],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",921],"]",["T_WHITESPACE"," ",921],["T_IS_EQUAL","==",921],["T_WHITESPACE"," ",921],["T_VARIABLE","$value",921],")",["T_WHITESPACE"," ",921],"{",["T_WHITESPACE","\n            ",921],["T_COMMENT","\/\/ Input element with correct value.\n",922],["T_WHITESPACE","            ",923],["T_VARIABLE","$found",923],["T_WHITESPACE"," ",923],"=",["T_WHITESPACE"," ",923],["T_STRING","TRUE",923],";",["T_WHITESPACE","\n          ",923],"}",["T_WHITESPACE","\n          ",924],["T_ELSEIF","elseif",925],["T_WHITESPACE"," ",925],"(",["T_ISSET","isset",925],"(",["T_VARIABLE","$field",925],["T_OBJECT_OPERATOR","->",925],["T_STRING","option",925],")",["T_WHITESPACE"," ",925],["T_BOOLEAN_OR","||",925],["T_WHITESPACE"," ",925],["T_ISSET","isset",925],"(",["T_VARIABLE","$field",925],["T_OBJECT_OPERATOR","->",925],["T_STRING","optgroup",925],")",")",["T_WHITESPACE"," ",925],"{",["T_WHITESPACE","\n            ",925],["T_COMMENT","\/\/ Select element found.\n",926],["T_WHITESPACE","            ",927],["T_VARIABLE","$selected",927],["T_WHITESPACE"," ",927],"=",["T_WHITESPACE"," ",927],["T_VARIABLE","$this",927],["T_OBJECT_OPERATOR","->",927],["T_STRING","getSelectedItem",927],"(",["T_VARIABLE","$field",927],")",";",["T_WHITESPACE","\n            ",927],["T_IF","if",928],["T_WHITESPACE"," ",928],"(",["T_VARIABLE","$selected",928],["T_WHITESPACE"," ",928],["T_IS_IDENTICAL","===",928],["T_WHITESPACE"," ",928],["T_STRING","FALSE",928],")",["T_WHITESPACE"," ",928],"{",["T_WHITESPACE","\n              ",928],["T_COMMENT","\/\/ No item selected so use first item.\n",929],["T_WHITESPACE","              ",930],["T_VARIABLE","$items",930],["T_WHITESPACE"," ",930],"=",["T_WHITESPACE"," ",930],["T_VARIABLE","$this",930],["T_OBJECT_OPERATOR","->",930],["T_STRING","getAllOptions",930],"(",["T_VARIABLE","$field",930],")",";",["T_WHITESPACE","\n              ",930],["T_IF","if",931],["T_WHITESPACE"," ",931],"(","!",["T_EMPTY","empty",931],"(",["T_VARIABLE","$items",931],")",["T_WHITESPACE"," ",931],["T_BOOLEAN_AND","&&",931],["T_WHITESPACE"," ",931],["T_VARIABLE","$items",931],"[",["T_LNUMBER","0",931],"]","[",["T_CONSTANT_ENCAPSED_STRING","'value'",931],"]",["T_WHITESPACE"," ",931],["T_IS_EQUAL","==",931],["T_WHITESPACE"," ",931],["T_VARIABLE","$value",931],")",["T_WHITESPACE"," ",931],"{",["T_WHITESPACE","\n                ",931],["T_VARIABLE","$found",932],["T_WHITESPACE"," ",932],"=",["T_WHITESPACE"," ",932],["T_STRING","TRUE",932],";",["T_WHITESPACE","\n              ",932],"}",["T_WHITESPACE","\n            ",933],"}",["T_WHITESPACE","\n            ",934],["T_ELSEIF","elseif",935],["T_WHITESPACE"," ",935],"(",["T_VARIABLE","$selected",935],["T_WHITESPACE"," ",935],["T_IS_EQUAL","==",935],["T_WHITESPACE"," ",935],["T_VARIABLE","$value",935],")",["T_WHITESPACE"," ",935],"{",["T_WHITESPACE","\n              ",935],["T_VARIABLE","$found",936],["T_WHITESPACE"," ",936],"=",["T_WHITESPACE"," ",936],["T_STRING","TRUE",936],";",["T_WHITESPACE","\n            ",936],"}",["T_WHITESPACE","\n          ",937],"}",["T_WHITESPACE","\n          ",938],["T_ELSEIF","elseif",939],["T_WHITESPACE"," ",939],"(",["T_STRING_CAST","(string)",939],["T_WHITESPACE"," ",939],["T_VARIABLE","$field",939],["T_WHITESPACE"," ",939],["T_IS_EQUAL","==",939],["T_WHITESPACE"," ",939],["T_VARIABLE","$value",939],")",["T_WHITESPACE"," ",939],"{",["T_WHITESPACE","\n            ",939],["T_COMMENT","\/\/ Text area with correct text.\n",940],["T_WHITESPACE","            ",941],["T_VARIABLE","$found",941],["T_WHITESPACE"," ",941],"=",["T_WHITESPACE"," ",941],["T_STRING","TRUE",941],";",["T_WHITESPACE","\n          ",941],"}",["T_WHITESPACE","\n        ",942],"}",["T_WHITESPACE","\n      ",943],"}",["T_WHITESPACE","\n    ",944],"}",["T_WHITESPACE","\n    ",945],["T_RETURN","return",946],["T_WHITESPACE"," ",946],["T_VARIABLE","$this",946],["T_OBJECT_OPERATOR","->",946],["T_STRING","assertTrue",946],"(",["T_VARIABLE","$fields",946],["T_WHITESPACE"," ",946],["T_BOOLEAN_AND","&&",946],["T_WHITESPACE"," ",946],["T_VARIABLE","$found",946],",",["T_WHITESPACE"," ",946],["T_VARIABLE","$message",946],",",["T_WHITESPACE"," ",946],["T_VARIABLE","$group",946],")",";",["T_WHITESPACE","\n  ",946],"}",["T_WHITESPACE","\n\n  ",947],["T_DOC_COMMENT","\/**\n   * Asserts that a field exists in the current page by the given XPath.\n   *\n   * @param string $xpath\n   *   XPath used to find the field.\n   * @param string $value\n   *   (optional) Value of the field to assert. You may pass in NULL (default)\n   *   to skip checking the actual value, while still checking that the field\n   *   exists.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",949],["T_WHITESPACE","\n  ",971],["T_PROTECTED","protected",972],["T_WHITESPACE"," ",972],["T_FUNCTION","function",972],["T_WHITESPACE"," ",972],["T_STRING","assertFieldByXPath",972],"(",["T_VARIABLE","$xpath",972],",",["T_WHITESPACE"," ",972],["T_VARIABLE","$value",972],["T_WHITESPACE"," ",972],"=",["T_WHITESPACE"," ",972],["T_STRING","NULL",972],",",["T_WHITESPACE"," ",972],["T_VARIABLE","$message",972],["T_WHITESPACE"," ",972],"=",["T_WHITESPACE"," ",972],["T_CONSTANT_ENCAPSED_STRING","''",972],",",["T_WHITESPACE"," ",972],["T_VARIABLE","$group",972],["T_WHITESPACE"," ",972],"=",["T_WHITESPACE"," ",972],["T_CONSTANT_ENCAPSED_STRING","'Other'",972],")",["T_WHITESPACE"," ",972],"{",["T_WHITESPACE","\n    ",972],["T_VARIABLE","$fields",973],["T_WHITESPACE"," ",973],"=",["T_WHITESPACE"," ",973],["T_VARIABLE","$this",973],["T_OBJECT_OPERATOR","->",973],["T_STRING","xpath",973],"(",["T_VARIABLE","$xpath",973],")",";",["T_WHITESPACE","\n\n    ",973],["T_RETURN","return",975],["T_WHITESPACE"," ",975],["T_VARIABLE","$this",975],["T_OBJECT_OPERATOR","->",975],["T_STRING","assertFieldsByValue",975],"(",["T_VARIABLE","$fields",975],",",["T_WHITESPACE"," ",975],["T_VARIABLE","$value",975],",",["T_WHITESPACE"," ",975],["T_VARIABLE","$message",975],",",["T_WHITESPACE"," ",975],["T_VARIABLE","$group",975],")",";",["T_WHITESPACE","\n  ",975],"}",["T_WHITESPACE","\n\n  ",976],["T_DOC_COMMENT","\/**\n   * Get the selected value from a select field.\n   *\n   * @param \\SimpleXmlElement $element\n   *   SimpleXMLElement select element.\n   *\n   * @return bool\n   *   The selected value or FALSE.\n   *\/",978],["T_WHITESPACE","\n  ",986],["T_PROTECTED","protected",987],["T_WHITESPACE"," ",987],["T_FUNCTION","function",987],["T_WHITESPACE"," ",987],["T_STRING","getSelectedItem",987],"(",["T_NS_SEPARATOR","\\",987],["T_STRING","SimpleXMLElement",987],["T_WHITESPACE"," ",987],["T_VARIABLE","$element",987],")",["T_WHITESPACE"," ",987],"{",["T_WHITESPACE","\n    ",987],["T_FOREACH","foreach",988],["T_WHITESPACE"," ",988],"(",["T_VARIABLE","$element",988],["T_OBJECT_OPERATOR","->",988],["T_STRING","children",988],"(",")",["T_WHITESPACE"," ",988],["T_AS","as",988],["T_WHITESPACE"," ",988],["T_VARIABLE","$item",988],")",["T_WHITESPACE"," ",988],"{",["T_WHITESPACE","\n      ",988],["T_IF","if",989],["T_WHITESPACE"," ",989],"(",["T_ISSET","isset",989],"(",["T_VARIABLE","$item",989],"[",["T_CONSTANT_ENCAPSED_STRING","'selected'",989],"]",")",")",["T_WHITESPACE"," ",989],"{",["T_WHITESPACE","\n        ",989],["T_RETURN","return",990],["T_WHITESPACE"," ",990],["T_VARIABLE","$item",990],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",990],"]",";",["T_WHITESPACE","\n      ",990],"}",["T_WHITESPACE","\n      ",991],["T_ELSEIF","elseif",992],["T_WHITESPACE"," ",992],"(",["T_VARIABLE","$item",992],["T_OBJECT_OPERATOR","->",992],["T_STRING","getName",992],"(",")",["T_WHITESPACE"," ",992],["T_IS_EQUAL","==",992],["T_WHITESPACE"," ",992],["T_CONSTANT_ENCAPSED_STRING","'optgroup'",992],")",["T_WHITESPACE"," ",992],"{",["T_WHITESPACE","\n        ",992],["T_IF","if",993],["T_WHITESPACE"," ",993],"(",["T_VARIABLE","$value",993],["T_WHITESPACE"," ",993],"=",["T_WHITESPACE"," ",993],["T_VARIABLE","$this",993],["T_OBJECT_OPERATOR","->",993],["T_STRING","getSelectedItem",993],"(",["T_VARIABLE","$item",993],")",")",["T_WHITESPACE"," ",993],"{",["T_WHITESPACE","\n          ",993],["T_RETURN","return",994],["T_WHITESPACE"," ",994],["T_VARIABLE","$value",994],";",["T_WHITESPACE","\n        ",994],"}",["T_WHITESPACE","\n      ",995],"}",["T_WHITESPACE","\n    ",996],"}",["T_WHITESPACE","\n    ",997],["T_RETURN","return",998],["T_WHITESPACE"," ",998],["T_STRING","FALSE",998],";",["T_WHITESPACE","\n  ",998],"}",["T_WHITESPACE","\n\n  ",999],["T_DOC_COMMENT","\/**\n   * Asserts that a field does not exist or its value does not match, by XPath.\n   *\n   * @param string $xpath\n   *   XPath used to find the field.\n   * @param string $value\n   *   (optional) Value of the field, to assert that the field's value on the\n   *   page does not match it.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1001],["T_WHITESPACE","\n  ",1022],["T_PROTECTED","protected",1023],["T_WHITESPACE"," ",1023],["T_FUNCTION","function",1023],["T_WHITESPACE"," ",1023],["T_STRING","assertNoFieldByXPath",1023],"(",["T_VARIABLE","$xpath",1023],",",["T_WHITESPACE"," ",1023],["T_VARIABLE","$value",1023],["T_WHITESPACE"," ",1023],"=",["T_WHITESPACE"," ",1023],["T_STRING","NULL",1023],",",["T_WHITESPACE"," ",1023],["T_VARIABLE","$message",1023],["T_WHITESPACE"," ",1023],"=",["T_WHITESPACE"," ",1023],["T_CONSTANT_ENCAPSED_STRING","''",1023],",",["T_WHITESPACE"," ",1023],["T_VARIABLE","$group",1023],["T_WHITESPACE"," ",1023],"=",["T_WHITESPACE"," ",1023],["T_CONSTANT_ENCAPSED_STRING","'Other'",1023],")",["T_WHITESPACE"," ",1023],"{",["T_WHITESPACE","\n    ",1023],["T_VARIABLE","$fields",1024],["T_WHITESPACE"," ",1024],"=",["T_WHITESPACE"," ",1024],["T_VARIABLE","$this",1024],["T_OBJECT_OPERATOR","->",1024],["T_STRING","xpath",1024],"(",["T_VARIABLE","$xpath",1024],")",";",["T_WHITESPACE","\n\n    ",1024],["T_COMMENT","\/\/ If value specified then check array for match.\n",1026],["T_WHITESPACE","    ",1027],["T_VARIABLE","$found",1027],["T_WHITESPACE"," ",1027],"=",["T_WHITESPACE"," ",1027],["T_STRING","TRUE",1027],";",["T_WHITESPACE","\n    ",1027],["T_IF","if",1028],["T_WHITESPACE"," ",1028],"(",["T_ISSET","isset",1028],"(",["T_VARIABLE","$value",1028],")",")",["T_WHITESPACE"," ",1028],"{",["T_WHITESPACE","\n      ",1028],["T_VARIABLE","$found",1029],["T_WHITESPACE"," ",1029],"=",["T_WHITESPACE"," ",1029],["T_STRING","FALSE",1029],";",["T_WHITESPACE","\n      ",1029],["T_IF","if",1030],["T_WHITESPACE"," ",1030],"(",["T_VARIABLE","$fields",1030],")",["T_WHITESPACE"," ",1030],"{",["T_WHITESPACE","\n        ",1030],["T_FOREACH","foreach",1031],["T_WHITESPACE"," ",1031],"(",["T_VARIABLE","$fields",1031],["T_WHITESPACE"," ",1031],["T_AS","as",1031],["T_WHITESPACE"," ",1031],["T_VARIABLE","$field",1031],")",["T_WHITESPACE"," ",1031],"{",["T_WHITESPACE","\n          ",1031],["T_IF","if",1032],["T_WHITESPACE"," ",1032],"(",["T_VARIABLE","$field",1032],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",1032],"]",["T_WHITESPACE"," ",1032],["T_IS_EQUAL","==",1032],["T_WHITESPACE"," ",1032],["T_VARIABLE","$value",1032],")",["T_WHITESPACE"," ",1032],"{",["T_WHITESPACE","\n            ",1032],["T_VARIABLE","$found",1033],["T_WHITESPACE"," ",1033],"=",["T_WHITESPACE"," ",1033],["T_STRING","TRUE",1033],";",["T_WHITESPACE","\n          ",1033],"}",["T_WHITESPACE","\n        ",1034],"}",["T_WHITESPACE","\n      ",1035],"}",["T_WHITESPACE","\n    ",1036],"}",["T_WHITESPACE","\n    ",1037],["T_RETURN","return",1038],["T_WHITESPACE"," ",1038],["T_VARIABLE","$this",1038],["T_OBJECT_OPERATOR","->",1038],["T_STRING","assertFalse",1038],"(",["T_VARIABLE","$fields",1038],["T_WHITESPACE"," ",1038],["T_BOOLEAN_AND","&&",1038],["T_WHITESPACE"," ",1038],["T_VARIABLE","$found",1038],",",["T_WHITESPACE"," ",1038],["T_VARIABLE","$message",1038],",",["T_WHITESPACE"," ",1038],["T_VARIABLE","$group",1038],")",";",["T_WHITESPACE","\n  ",1038],"}",["T_WHITESPACE","\n\n  ",1039],["T_DOC_COMMENT","\/**\n   * Asserts that a field exists with the given name and value.\n   *\n   * @param string $name\n   *   Name of field to assert.\n   * @param string $value\n   *   (optional) Value of the field to assert. You may pass in NULL (default)\n   *   to skip checking the actual value, while still checking that the field\n   *   exists.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1041],["T_WHITESPACE","\n  ",1063],["T_PROTECTED","protected",1064],["T_WHITESPACE"," ",1064],["T_FUNCTION","function",1064],["T_WHITESPACE"," ",1064],["T_STRING","assertFieldByName",1064],"(",["T_VARIABLE","$name",1064],",",["T_WHITESPACE"," ",1064],["T_VARIABLE","$value",1064],["T_WHITESPACE"," ",1064],"=",["T_WHITESPACE"," ",1064],["T_STRING","NULL",1064],",",["T_WHITESPACE"," ",1064],["T_VARIABLE","$message",1064],["T_WHITESPACE"," ",1064],"=",["T_WHITESPACE"," ",1064],["T_STRING","NULL",1064],",",["T_WHITESPACE"," ",1064],["T_VARIABLE","$group",1064],["T_WHITESPACE"," ",1064],"=",["T_WHITESPACE"," ",1064],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1064],")",["T_WHITESPACE"," ",1064],"{",["T_WHITESPACE","\n    ",1064],["T_IF","if",1065],["T_WHITESPACE"," ",1065],"(","!",["T_ISSET","isset",1065],"(",["T_VARIABLE","$message",1065],")",")",["T_WHITESPACE"," ",1065],"{",["T_WHITESPACE","\n      ",1065],["T_IF","if",1066],["T_WHITESPACE"," ",1066],"(","!",["T_ISSET","isset",1066],"(",["T_VARIABLE","$value",1066],")",")",["T_WHITESPACE"," ",1066],"{",["T_WHITESPACE","\n        ",1066],["T_VARIABLE","$message",1067],["T_WHITESPACE"," ",1067],"=",["T_WHITESPACE"," ",1067],["T_STRING","SafeMarkup",1067],["T_DOUBLE_COLON","::",1067],["T_STRING","format",1067],"(",["T_CONSTANT_ENCAPSED_STRING","'Found field with name @name'",1067],",",["T_WHITESPACE"," ",1067],["T_ARRAY","array",1067],"(",["T_WHITESPACE","\n          ",1067],["T_CONSTANT_ENCAPSED_STRING","'@name'",1068],["T_WHITESPACE"," ",1068],["T_DOUBLE_ARROW","=>",1068],["T_WHITESPACE"," ",1068],["T_STRING","var_export",1068],"(",["T_VARIABLE","$name",1068],",",["T_WHITESPACE"," ",1068],["T_STRING","TRUE",1068],")",",",["T_WHITESPACE","\n        ",1068],")",")",";",["T_WHITESPACE","\n      ",1069],"}",["T_WHITESPACE","\n      ",1070],["T_ELSE","else",1071],["T_WHITESPACE"," ",1071],"{",["T_WHITESPACE","\n        ",1071],["T_VARIABLE","$message",1072],["T_WHITESPACE"," ",1072],"=",["T_WHITESPACE"," ",1072],["T_STRING","SafeMarkup",1072],["T_DOUBLE_COLON","::",1072],["T_STRING","format",1072],"(",["T_CONSTANT_ENCAPSED_STRING","'Found field with name @name and value @value'",1072],",",["T_WHITESPACE"," ",1072],["T_ARRAY","array",1072],"(",["T_WHITESPACE","\n          ",1072],["T_CONSTANT_ENCAPSED_STRING","'@name'",1073],["T_WHITESPACE"," ",1073],["T_DOUBLE_ARROW","=>",1073],["T_WHITESPACE"," ",1073],["T_STRING","var_export",1073],"(",["T_VARIABLE","$name",1073],",",["T_WHITESPACE"," ",1073],["T_STRING","TRUE",1073],")",",",["T_WHITESPACE","\n          ",1073],["T_CONSTANT_ENCAPSED_STRING","'@value'",1074],["T_WHITESPACE"," ",1074],["T_DOUBLE_ARROW","=>",1074],["T_WHITESPACE"," ",1074],["T_STRING","var_export",1074],"(",["T_VARIABLE","$value",1074],",",["T_WHITESPACE"," ",1074],["T_STRING","TRUE",1074],")",",",["T_WHITESPACE","\n        ",1074],")",")",";",["T_WHITESPACE","\n      ",1075],"}",["T_WHITESPACE","\n    ",1076],"}",["T_WHITESPACE","\n    ",1077],["T_RETURN","return",1078],["T_WHITESPACE"," ",1078],["T_VARIABLE","$this",1078],["T_OBJECT_OPERATOR","->",1078],["T_STRING","assertFieldByXPath",1078],"(",["T_VARIABLE","$this",1078],["T_OBJECT_OPERATOR","->",1078],["T_STRING","constructFieldXpath",1078],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",1078],",",["T_WHITESPACE"," ",1078],["T_VARIABLE","$name",1078],")",",",["T_WHITESPACE"," ",1078],["T_VARIABLE","$value",1078],",",["T_WHITESPACE"," ",1078],["T_VARIABLE","$message",1078],",",["T_WHITESPACE"," ",1078],["T_VARIABLE","$group",1078],")",";",["T_WHITESPACE","\n  ",1078],"}",["T_WHITESPACE","\n\n  ",1079],["T_DOC_COMMENT","\/**\n   * Asserts that a field does not exist with the given name and value.\n   *\n   * @param string $name\n   *   Name of field to assert.\n   * @param string $value\n   *   (optional) Value for the field, to assert that the field's value on the\n   *   page doesn't match it. You may pass in NULL to skip checking the\n   *   value, while still checking that the field doesn't exist. However, the\n   *   default value ('') asserts that the field value is not an empty string.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1081],["T_WHITESPACE","\n  ",1104],["T_PROTECTED","protected",1105],["T_WHITESPACE"," ",1105],["T_FUNCTION","function",1105],["T_WHITESPACE"," ",1105],["T_STRING","assertNoFieldByName",1105],"(",["T_VARIABLE","$name",1105],",",["T_WHITESPACE"," ",1105],["T_VARIABLE","$value",1105],["T_WHITESPACE"," ",1105],"=",["T_WHITESPACE"," ",1105],["T_CONSTANT_ENCAPSED_STRING","''",1105],",",["T_WHITESPACE"," ",1105],["T_VARIABLE","$message",1105],["T_WHITESPACE"," ",1105],"=",["T_WHITESPACE"," ",1105],["T_CONSTANT_ENCAPSED_STRING","''",1105],",",["T_WHITESPACE"," ",1105],["T_VARIABLE","$group",1105],["T_WHITESPACE"," ",1105],"=",["T_WHITESPACE"," ",1105],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1105],")",["T_WHITESPACE"," ",1105],"{",["T_WHITESPACE","\n    ",1105],["T_RETURN","return",1106],["T_WHITESPACE"," ",1106],["T_VARIABLE","$this",1106],["T_OBJECT_OPERATOR","->",1106],["T_STRING","assertNoFieldByXPath",1106],"(",["T_VARIABLE","$this",1106],["T_OBJECT_OPERATOR","->",1106],["T_STRING","constructFieldXpath",1106],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",1106],",",["T_WHITESPACE"," ",1106],["T_VARIABLE","$name",1106],")",",",["T_WHITESPACE"," ",1106],["T_VARIABLE","$value",1106],",",["T_WHITESPACE"," ",1106],["T_VARIABLE","$message",1106],["T_WHITESPACE"," ",1106],"?",["T_WHITESPACE"," ",1106],["T_VARIABLE","$message",1106],["T_WHITESPACE"," ",1106],":",["T_WHITESPACE"," ",1106],["T_STRING","SafeMarkup",1106],["T_DOUBLE_COLON","::",1106],["T_STRING","format",1106],"(",["T_CONSTANT_ENCAPSED_STRING","'Did not find field by name @name'",1106],",",["T_WHITESPACE"," ",1106],["T_ARRAY","array",1106],"(",["T_CONSTANT_ENCAPSED_STRING","'@name'",1106],["T_WHITESPACE"," ",1106],["T_DOUBLE_ARROW","=>",1106],["T_WHITESPACE"," ",1106],["T_VARIABLE","$name",1106],")",")",",",["T_WHITESPACE"," ",1106],["T_VARIABLE","$group",1106],")",";",["T_WHITESPACE","\n  ",1106],"}",["T_WHITESPACE","\n\n  ",1107],["T_DOC_COMMENT","\/**\n   * Asserts that a field exists with the given ID and value.\n   *\n   * @param string $id\n   *   ID of field to assert.\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $value\n   *   (optional) Value for the field to assert. You may pass in NULL to skip\n   *   checking the value, while still checking that the field exists.\n   *   However, the default value ('') asserts that the field value is an empty\n   *   string.\n   * @param string|\\Drupal\\Component\\Render\\MarkupInterface $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1109],["T_WHITESPACE","\n  ",1132],["T_PROTECTED","protected",1133],["T_WHITESPACE"," ",1133],["T_FUNCTION","function",1133],["T_WHITESPACE"," ",1133],["T_STRING","assertFieldById",1133],"(",["T_VARIABLE","$id",1133],",",["T_WHITESPACE"," ",1133],["T_VARIABLE","$value",1133],["T_WHITESPACE"," ",1133],"=",["T_WHITESPACE"," ",1133],["T_CONSTANT_ENCAPSED_STRING","''",1133],",",["T_WHITESPACE"," ",1133],["T_VARIABLE","$message",1133],["T_WHITESPACE"," ",1133],"=",["T_WHITESPACE"," ",1133],["T_CONSTANT_ENCAPSED_STRING","''",1133],",",["T_WHITESPACE"," ",1133],["T_VARIABLE","$group",1133],["T_WHITESPACE"," ",1133],"=",["T_WHITESPACE"," ",1133],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1133],")",["T_WHITESPACE"," ",1133],"{",["T_WHITESPACE","\n    ",1133],["T_COMMENT","\/\/ Cast MarkupInterface objects to string.\n",1134],["T_WHITESPACE","    ",1135],["T_IF","if",1135],["T_WHITESPACE"," ",1135],"(",["T_ISSET","isset",1135],"(",["T_VARIABLE","$value",1135],")",")",["T_WHITESPACE"," ",1135],"{",["T_WHITESPACE","\n      ",1135],["T_VARIABLE","$value",1136],["T_WHITESPACE"," ",1136],"=",["T_WHITESPACE"," ",1136],["T_STRING_CAST","(string)",1136],["T_WHITESPACE"," ",1136],["T_VARIABLE","$value",1136],";",["T_WHITESPACE","\n    ",1136],"}",["T_WHITESPACE","\n    ",1137],["T_VARIABLE","$message",1138],["T_WHITESPACE"," ",1138],"=",["T_WHITESPACE"," ",1138],["T_STRING_CAST","(string)",1138],["T_WHITESPACE"," ",1138],["T_VARIABLE","$message",1138],";",["T_WHITESPACE","\n    ",1138],["T_RETURN","return",1139],["T_WHITESPACE"," ",1139],["T_VARIABLE","$this",1139],["T_OBJECT_OPERATOR","->",1139],["T_STRING","assertFieldByXPath",1139],"(",["T_VARIABLE","$this",1139],["T_OBJECT_OPERATOR","->",1139],["T_STRING","constructFieldXpath",1139],"(",["T_CONSTANT_ENCAPSED_STRING","'id'",1139],",",["T_WHITESPACE"," ",1139],["T_VARIABLE","$id",1139],")",",",["T_WHITESPACE"," ",1139],["T_VARIABLE","$value",1139],",",["T_WHITESPACE"," ",1139],["T_VARIABLE","$message",1139],["T_WHITESPACE"," ",1139],"?",["T_WHITESPACE"," ",1139],["T_VARIABLE","$message",1139],["T_WHITESPACE"," ",1139],":",["T_WHITESPACE"," ",1139],["T_STRING","SafeMarkup",1139],["T_DOUBLE_COLON","::",1139],["T_STRING","format",1139],"(",["T_CONSTANT_ENCAPSED_STRING","'Found field by id @id'",1139],",",["T_WHITESPACE"," ",1139],["T_ARRAY","array",1139],"(",["T_CONSTANT_ENCAPSED_STRING","'@id'",1139],["T_WHITESPACE"," ",1139],["T_DOUBLE_ARROW","=>",1139],["T_WHITESPACE"," ",1139],["T_VARIABLE","$id",1139],")",")",",",["T_WHITESPACE"," ",1139],["T_VARIABLE","$group",1139],")",";",["T_WHITESPACE","\n  ",1139],"}",["T_WHITESPACE","\n\n  ",1140],["T_DOC_COMMENT","\/**\n   * Asserts that a field does not exist with the given ID and value.\n   *\n   * @param string $id\n   *   ID of field to assert.\n   * @param string $value\n   *   (optional) Value for the field, to assert that the field's value on the\n   *   page doesn't match it. You may pass in NULL to skip checking the value,\n   *   while still checking that the field doesn't exist. However, the default\n   *   value ('') asserts that the field value is not an empty string.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1142],["T_WHITESPACE","\n  ",1165],["T_PROTECTED","protected",1166],["T_WHITESPACE"," ",1166],["T_FUNCTION","function",1166],["T_WHITESPACE"," ",1166],["T_STRING","assertNoFieldById",1166],"(",["T_VARIABLE","$id",1166],",",["T_WHITESPACE"," ",1166],["T_VARIABLE","$value",1166],["T_WHITESPACE"," ",1166],"=",["T_WHITESPACE"," ",1166],["T_CONSTANT_ENCAPSED_STRING","''",1166],",",["T_WHITESPACE"," ",1166],["T_VARIABLE","$message",1166],["T_WHITESPACE"," ",1166],"=",["T_WHITESPACE"," ",1166],["T_CONSTANT_ENCAPSED_STRING","''",1166],",",["T_WHITESPACE"," ",1166],["T_VARIABLE","$group",1166],["T_WHITESPACE"," ",1166],"=",["T_WHITESPACE"," ",1166],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1166],")",["T_WHITESPACE"," ",1166],"{",["T_WHITESPACE","\n    ",1166],["T_RETURN","return",1167],["T_WHITESPACE"," ",1167],["T_VARIABLE","$this",1167],["T_OBJECT_OPERATOR","->",1167],["T_STRING","assertNoFieldByXPath",1167],"(",["T_VARIABLE","$this",1167],["T_OBJECT_OPERATOR","->",1167],["T_STRING","constructFieldXpath",1167],"(",["T_CONSTANT_ENCAPSED_STRING","'id'",1167],",",["T_WHITESPACE"," ",1167],["T_VARIABLE","$id",1167],")",",",["T_WHITESPACE"," ",1167],["T_VARIABLE","$value",1167],",",["T_WHITESPACE"," ",1167],["T_VARIABLE","$message",1167],["T_WHITESPACE"," ",1167],"?",["T_WHITESPACE"," ",1167],["T_VARIABLE","$message",1167],["T_WHITESPACE"," ",1167],":",["T_WHITESPACE"," ",1167],["T_STRING","SafeMarkup",1167],["T_DOUBLE_COLON","::",1167],["T_STRING","format",1167],"(",["T_CONSTANT_ENCAPSED_STRING","'Did not find field by id @id'",1167],",",["T_WHITESPACE"," ",1167],["T_ARRAY","array",1167],"(",["T_CONSTANT_ENCAPSED_STRING","'@id'",1167],["T_WHITESPACE"," ",1167],["T_DOUBLE_ARROW","=>",1167],["T_WHITESPACE"," ",1167],["T_VARIABLE","$id",1167],")",")",",",["T_WHITESPACE"," ",1167],["T_VARIABLE","$group",1167],")",";",["T_WHITESPACE","\n  ",1167],"}",["T_WHITESPACE","\n\n  ",1168],["T_DOC_COMMENT","\/**\n   * Asserts that a checkbox field in the current page is checked.\n   *\n   * @param string $id\n   *   ID of field to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1170],["T_WHITESPACE","\n  ",1188],["T_PROTECTED","protected",1189],["T_WHITESPACE"," ",1189],["T_FUNCTION","function",1189],["T_WHITESPACE"," ",1189],["T_STRING","assertFieldChecked",1189],"(",["T_VARIABLE","$id",1189],",",["T_WHITESPACE"," ",1189],["T_VARIABLE","$message",1189],["T_WHITESPACE"," ",1189],"=",["T_WHITESPACE"," ",1189],["T_CONSTANT_ENCAPSED_STRING","''",1189],",",["T_WHITESPACE"," ",1189],["T_VARIABLE","$group",1189],["T_WHITESPACE"," ",1189],"=",["T_WHITESPACE"," ",1189],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1189],")",["T_WHITESPACE"," ",1189],"{",["T_WHITESPACE","\n    ",1189],["T_VARIABLE","$elements",1190],["T_WHITESPACE"," ",1190],"=",["T_WHITESPACE"," ",1190],["T_VARIABLE","$this",1190],["T_OBJECT_OPERATOR","->",1190],["T_STRING","xpath",1190],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/input[@id=:id]'",1190],",",["T_WHITESPACE"," ",1190],["T_ARRAY","array",1190],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1190],["T_WHITESPACE"," ",1190],["T_DOUBLE_ARROW","=>",1190],["T_WHITESPACE"," ",1190],["T_VARIABLE","$id",1190],")",")",";",["T_WHITESPACE","\n    ",1190],["T_RETURN","return",1191],["T_WHITESPACE"," ",1191],["T_VARIABLE","$this",1191],["T_OBJECT_OPERATOR","->",1191],["T_STRING","assertTrue",1191],"(",["T_ISSET","isset",1191],"(",["T_VARIABLE","$elements",1191],"[",["T_LNUMBER","0",1191],"]",")",["T_WHITESPACE"," ",1191],["T_BOOLEAN_AND","&&",1191],["T_WHITESPACE"," ",1191],"!",["T_EMPTY","empty",1191],"(",["T_VARIABLE","$elements",1191],"[",["T_LNUMBER","0",1191],"]","[",["T_CONSTANT_ENCAPSED_STRING","'checked'",1191],"]",")",",",["T_WHITESPACE"," ",1191],["T_VARIABLE","$message",1191],["T_WHITESPACE"," ",1191],"?",["T_WHITESPACE"," ",1191],["T_VARIABLE","$message",1191],["T_WHITESPACE"," ",1191],":",["T_WHITESPACE"," ",1191],["T_STRING","SafeMarkup",1191],["T_DOUBLE_COLON","::",1191],["T_STRING","format",1191],"(",["T_CONSTANT_ENCAPSED_STRING","'Checkbox field @id is checked.'",1191],",",["T_WHITESPACE"," ",1191],["T_ARRAY","array",1191],"(",["T_CONSTANT_ENCAPSED_STRING","'@id'",1191],["T_WHITESPACE"," ",1191],["T_DOUBLE_ARROW","=>",1191],["T_WHITESPACE"," ",1191],["T_VARIABLE","$id",1191],")",")",",",["T_WHITESPACE"," ",1191],["T_VARIABLE","$group",1191],")",";",["T_WHITESPACE","\n  ",1191],"}",["T_WHITESPACE","\n\n  ",1192],["T_DOC_COMMENT","\/**\n   * Asserts that a checkbox field in the current page is not checked.\n   *\n   * @param string $id\n   *   ID of field to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1194],["T_WHITESPACE","\n  ",1212],["T_PROTECTED","protected",1213],["T_WHITESPACE"," ",1213],["T_FUNCTION","function",1213],["T_WHITESPACE"," ",1213],["T_STRING","assertNoFieldChecked",1213],"(",["T_VARIABLE","$id",1213],",",["T_WHITESPACE"," ",1213],["T_VARIABLE","$message",1213],["T_WHITESPACE"," ",1213],"=",["T_WHITESPACE"," ",1213],["T_CONSTANT_ENCAPSED_STRING","''",1213],",",["T_WHITESPACE"," ",1213],["T_VARIABLE","$group",1213],["T_WHITESPACE"," ",1213],"=",["T_WHITESPACE"," ",1213],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1213],")",["T_WHITESPACE"," ",1213],"{",["T_WHITESPACE","\n    ",1213],["T_VARIABLE","$elements",1214],["T_WHITESPACE"," ",1214],"=",["T_WHITESPACE"," ",1214],["T_VARIABLE","$this",1214],["T_OBJECT_OPERATOR","->",1214],["T_STRING","xpath",1214],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/input[@id=:id]'",1214],",",["T_WHITESPACE"," ",1214],["T_ARRAY","array",1214],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1214],["T_WHITESPACE"," ",1214],["T_DOUBLE_ARROW","=>",1214],["T_WHITESPACE"," ",1214],["T_VARIABLE","$id",1214],")",")",";",["T_WHITESPACE","\n    ",1214],["T_RETURN","return",1215],["T_WHITESPACE"," ",1215],["T_VARIABLE","$this",1215],["T_OBJECT_OPERATOR","->",1215],["T_STRING","assertTrue",1215],"(",["T_ISSET","isset",1215],"(",["T_VARIABLE","$elements",1215],"[",["T_LNUMBER","0",1215],"]",")",["T_WHITESPACE"," ",1215],["T_BOOLEAN_AND","&&",1215],["T_WHITESPACE"," ",1215],["T_EMPTY","empty",1215],"(",["T_VARIABLE","$elements",1215],"[",["T_LNUMBER","0",1215],"]","[",["T_CONSTANT_ENCAPSED_STRING","'checked'",1215],"]",")",",",["T_WHITESPACE"," ",1215],["T_VARIABLE","$message",1215],["T_WHITESPACE"," ",1215],"?",["T_WHITESPACE"," ",1215],["T_VARIABLE","$message",1215],["T_WHITESPACE"," ",1215],":",["T_WHITESPACE"," ",1215],["T_STRING","SafeMarkup",1215],["T_DOUBLE_COLON","::",1215],["T_STRING","format",1215],"(",["T_CONSTANT_ENCAPSED_STRING","'Checkbox field @id is not checked.'",1215],",",["T_WHITESPACE"," ",1215],["T_ARRAY","array",1215],"(",["T_CONSTANT_ENCAPSED_STRING","'@id'",1215],["T_WHITESPACE"," ",1215],["T_DOUBLE_ARROW","=>",1215],["T_WHITESPACE"," ",1215],["T_VARIABLE","$id",1215],")",")",",",["T_WHITESPACE"," ",1215],["T_VARIABLE","$group",1215],")",";",["T_WHITESPACE","\n  ",1215],"}",["T_WHITESPACE","\n\n  ",1216],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page exists.\n   *\n   * @param string $id\n   *   ID of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1218],["T_WHITESPACE","\n  ",1238],["T_PROTECTED","protected",1239],["T_WHITESPACE"," ",1239],["T_FUNCTION","function",1239],["T_WHITESPACE"," ",1239],["T_STRING","assertOption",1239],"(",["T_VARIABLE","$id",1239],",",["T_WHITESPACE"," ",1239],["T_VARIABLE","$option",1239],",",["T_WHITESPACE"," ",1239],["T_VARIABLE","$message",1239],["T_WHITESPACE"," ",1239],"=",["T_WHITESPACE"," ",1239],["T_CONSTANT_ENCAPSED_STRING","''",1239],",",["T_WHITESPACE"," ",1239],["T_VARIABLE","$group",1239],["T_WHITESPACE"," ",1239],"=",["T_WHITESPACE"," ",1239],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1239],")",["T_WHITESPACE"," ",1239],"{",["T_WHITESPACE","\n    ",1239],["T_VARIABLE","$options",1240],["T_WHITESPACE"," ",1240],"=",["T_WHITESPACE"," ",1240],["T_VARIABLE","$this",1240],["T_OBJECT_OPERATOR","->",1240],["T_STRING","xpath",1240],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]\/\/option[@value=:option]'",1240],",",["T_WHITESPACE"," ",1240],["T_ARRAY","array",1240],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1240],["T_WHITESPACE"," ",1240],["T_DOUBLE_ARROW","=>",1240],["T_WHITESPACE"," ",1240],["T_VARIABLE","$id",1240],",",["T_WHITESPACE"," ",1240],["T_CONSTANT_ENCAPSED_STRING","':option'",1240],["T_WHITESPACE"," ",1240],["T_DOUBLE_ARROW","=>",1240],["T_WHITESPACE"," ",1240],["T_VARIABLE","$option",1240],")",")",";",["T_WHITESPACE","\n    ",1240],["T_RETURN","return",1241],["T_WHITESPACE"," ",1241],["T_VARIABLE","$this",1241],["T_OBJECT_OPERATOR","->",1241],["T_STRING","assertTrue",1241],"(",["T_ISSET","isset",1241],"(",["T_VARIABLE","$options",1241],"[",["T_LNUMBER","0",1241],"]",")",",",["T_WHITESPACE"," ",1241],["T_VARIABLE","$message",1241],["T_WHITESPACE"," ",1241],"?",["T_WHITESPACE"," ",1241],["T_VARIABLE","$message",1241],["T_WHITESPACE"," ",1241],":",["T_WHITESPACE"," ",1241],["T_STRING","SafeMarkup",1241],["T_DOUBLE_COLON","::",1241],["T_STRING","format",1241],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @id exists.'",1241],",",["T_WHITESPACE"," ",1241],["T_ARRAY","array",1241],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1241],["T_WHITESPACE"," ",1241],["T_DOUBLE_ARROW","=>",1241],["T_WHITESPACE"," ",1241],["T_VARIABLE","$option",1241],",",["T_WHITESPACE"," ",1241],["T_CONSTANT_ENCAPSED_STRING","'@id'",1241],["T_WHITESPACE"," ",1241],["T_DOUBLE_ARROW","=>",1241],["T_WHITESPACE"," ",1241],["T_VARIABLE","$id",1241],")",")",",",["T_WHITESPACE"," ",1241],["T_VARIABLE","$group",1241],")",";",["T_WHITESPACE","\n  ",1241],"}",["T_WHITESPACE","\n\n  ",1242],["T_DOC_COMMENT","\/**\n   * Asserts that a select option with the visible text exists.\n   *\n   * @param string $id\n   *   The ID of the select field to assert.\n   * @param string $text\n   *   The text for the option tag to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1244],["T_WHITESPACE","\n  ",1256],["T_PROTECTED","protected",1257],["T_WHITESPACE"," ",1257],["T_FUNCTION","function",1257],["T_WHITESPACE"," ",1257],["T_STRING","assertOptionByText",1257],"(",["T_VARIABLE","$id",1257],",",["T_WHITESPACE"," ",1257],["T_VARIABLE","$text",1257],",",["T_WHITESPACE"," ",1257],["T_VARIABLE","$message",1257],["T_WHITESPACE"," ",1257],"=",["T_WHITESPACE"," ",1257],["T_CONSTANT_ENCAPSED_STRING","''",1257],")",["T_WHITESPACE"," ",1257],"{",["T_WHITESPACE","\n    ",1257],["T_VARIABLE","$options",1258],["T_WHITESPACE"," ",1258],"=",["T_WHITESPACE"," ",1258],["T_VARIABLE","$this",1258],["T_OBJECT_OPERATOR","->",1258],["T_STRING","xpath",1258],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]\/\/option[normalize-space(text())=:text]'",1258],",",["T_WHITESPACE"," ",1258],"[",["T_CONSTANT_ENCAPSED_STRING","':id'",1258],["T_WHITESPACE"," ",1258],["T_DOUBLE_ARROW","=>",1258],["T_WHITESPACE"," ",1258],["T_VARIABLE","$id",1258],",",["T_WHITESPACE"," ",1258],["T_CONSTANT_ENCAPSED_STRING","':text'",1258],["T_WHITESPACE"," ",1258],["T_DOUBLE_ARROW","=>",1258],["T_WHITESPACE"," ",1258],["T_VARIABLE","$text",1258],"]",")",";",["T_WHITESPACE","\n    ",1258],["T_RETURN","return",1259],["T_WHITESPACE"," ",1259],["T_VARIABLE","$this",1259],["T_OBJECT_OPERATOR","->",1259],["T_STRING","assertTrue",1259],"(",["T_ISSET","isset",1259],"(",["T_VARIABLE","$options",1259],"[",["T_LNUMBER","0",1259],"]",")",",",["T_WHITESPACE"," ",1259],["T_VARIABLE","$message",1259],["T_WHITESPACE"," ",1259],"?",":",["T_WHITESPACE"," ",1259],["T_CONSTANT_ENCAPSED_STRING","'Option with text label '",1259],["T_WHITESPACE"," ",1259],".",["T_WHITESPACE"," ",1259],["T_VARIABLE","$text",1259],["T_WHITESPACE"," ",1259],".",["T_WHITESPACE"," ",1259],["T_CONSTANT_ENCAPSED_STRING","' for select field '",1259],["T_WHITESPACE"," ",1259],".",["T_WHITESPACE"," ",1259],["T_VARIABLE","$id",1259],["T_WHITESPACE"," ",1259],".",["T_WHITESPACE"," ",1259],["T_CONSTANT_ENCAPSED_STRING","' exits.'",1259],")",";",["T_WHITESPACE","\n  ",1259],"}",["T_WHITESPACE","\n\n  ",1260],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page exists.\n   *\n   * @param string $drupal_selector\n   *   The data drupal selector of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1262],["T_WHITESPACE","\n  ",1282],["T_PROTECTED","protected",1283],["T_WHITESPACE"," ",1283],["T_FUNCTION","function",1283],["T_WHITESPACE"," ",1283],["T_STRING","assertOptionWithDrupalSelector",1283],"(",["T_VARIABLE","$drupal_selector",1283],",",["T_WHITESPACE"," ",1283],["T_VARIABLE","$option",1283],",",["T_WHITESPACE"," ",1283],["T_VARIABLE","$message",1283],["T_WHITESPACE"," ",1283],"=",["T_WHITESPACE"," ",1283],["T_CONSTANT_ENCAPSED_STRING","''",1283],",",["T_WHITESPACE"," ",1283],["T_VARIABLE","$group",1283],["T_WHITESPACE"," ",1283],"=",["T_WHITESPACE"," ",1283],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1283],")",["T_WHITESPACE"," ",1283],"{",["T_WHITESPACE","\n    ",1283],["T_VARIABLE","$options",1284],["T_WHITESPACE"," ",1284],"=",["T_WHITESPACE"," ",1284],["T_VARIABLE","$this",1284],["T_OBJECT_OPERATOR","->",1284],["T_STRING","xpath",1284],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@data-drupal-selector=:data_drupal_selector]\/\/option[@value=:option]'",1284],",",["T_WHITESPACE"," ",1284],["T_ARRAY","array",1284],"(",["T_CONSTANT_ENCAPSED_STRING","':data_drupal_selector'",1284],["T_WHITESPACE"," ",1284],["T_DOUBLE_ARROW","=>",1284],["T_WHITESPACE"," ",1284],["T_VARIABLE","$drupal_selector",1284],",",["T_WHITESPACE"," ",1284],["T_CONSTANT_ENCAPSED_STRING","':option'",1284],["T_WHITESPACE"," ",1284],["T_DOUBLE_ARROW","=>",1284],["T_WHITESPACE"," ",1284],["T_VARIABLE","$option",1284],")",")",";",["T_WHITESPACE","\n    ",1284],["T_RETURN","return",1285],["T_WHITESPACE"," ",1285],["T_VARIABLE","$this",1285],["T_OBJECT_OPERATOR","->",1285],["T_STRING","assertTrue",1285],"(",["T_ISSET","isset",1285],"(",["T_VARIABLE","$options",1285],"[",["T_LNUMBER","0",1285],"]",")",",",["T_WHITESPACE"," ",1285],["T_VARIABLE","$message",1285],["T_WHITESPACE"," ",1285],"?",["T_WHITESPACE"," ",1285],["T_VARIABLE","$message",1285],["T_WHITESPACE"," ",1285],":",["T_WHITESPACE"," ",1285],["T_STRING","SafeMarkup",1285],["T_DOUBLE_COLON","::",1285],["T_STRING","format",1285],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @data_drupal_selector exists.'",1285],",",["T_WHITESPACE"," ",1285],["T_ARRAY","array",1285],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1285],["T_WHITESPACE"," ",1285],["T_DOUBLE_ARROW","=>",1285],["T_WHITESPACE"," ",1285],["T_VARIABLE","$option",1285],",",["T_WHITESPACE"," ",1285],["T_CONSTANT_ENCAPSED_STRING","'@data_drupal_selector'",1285],["T_WHITESPACE"," ",1285],["T_DOUBLE_ARROW","=>",1285],["T_WHITESPACE"," ",1285],["T_VARIABLE","$drupal_selector",1285],")",")",",",["T_WHITESPACE"," ",1285],["T_VARIABLE","$group",1285],")",";",["T_WHITESPACE","\n  ",1285],"}",["T_WHITESPACE","\n\n  ",1286],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page does not exist.\n   *\n   * @param string $id\n   *   ID of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1288],["T_WHITESPACE","\n  ",1308],["T_PROTECTED","protected",1309],["T_WHITESPACE"," ",1309],["T_FUNCTION","function",1309],["T_WHITESPACE"," ",1309],["T_STRING","assertNoOption",1309],"(",["T_VARIABLE","$id",1309],",",["T_WHITESPACE"," ",1309],["T_VARIABLE","$option",1309],",",["T_WHITESPACE"," ",1309],["T_VARIABLE","$message",1309],["T_WHITESPACE"," ",1309],"=",["T_WHITESPACE"," ",1309],["T_CONSTANT_ENCAPSED_STRING","''",1309],",",["T_WHITESPACE"," ",1309],["T_VARIABLE","$group",1309],["T_WHITESPACE"," ",1309],"=",["T_WHITESPACE"," ",1309],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1309],")",["T_WHITESPACE"," ",1309],"{",["T_WHITESPACE","\n    ",1309],["T_VARIABLE","$selects",1310],["T_WHITESPACE"," ",1310],"=",["T_WHITESPACE"," ",1310],["T_VARIABLE","$this",1310],["T_OBJECT_OPERATOR","->",1310],["T_STRING","xpath",1310],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]'",1310],",",["T_WHITESPACE"," ",1310],["T_ARRAY","array",1310],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1310],["T_WHITESPACE"," ",1310],["T_DOUBLE_ARROW","=>",1310],["T_WHITESPACE"," ",1310],["T_VARIABLE","$id",1310],")",")",";",["T_WHITESPACE","\n    ",1310],["T_VARIABLE","$options",1311],["T_WHITESPACE"," ",1311],"=",["T_WHITESPACE"," ",1311],["T_VARIABLE","$this",1311],["T_OBJECT_OPERATOR","->",1311],["T_STRING","xpath",1311],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]\/\/option[@value=:option]'",1311],",",["T_WHITESPACE"," ",1311],["T_ARRAY","array",1311],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1311],["T_WHITESPACE"," ",1311],["T_DOUBLE_ARROW","=>",1311],["T_WHITESPACE"," ",1311],["T_VARIABLE","$id",1311],",",["T_WHITESPACE"," ",1311],["T_CONSTANT_ENCAPSED_STRING","':option'",1311],["T_WHITESPACE"," ",1311],["T_DOUBLE_ARROW","=>",1311],["T_WHITESPACE"," ",1311],["T_VARIABLE","$option",1311],")",")",";",["T_WHITESPACE","\n    ",1311],["T_RETURN","return",1312],["T_WHITESPACE"," ",1312],["T_VARIABLE","$this",1312],["T_OBJECT_OPERATOR","->",1312],["T_STRING","assertTrue",1312],"(",["T_ISSET","isset",1312],"(",["T_VARIABLE","$selects",1312],"[",["T_LNUMBER","0",1312],"]",")",["T_WHITESPACE"," ",1312],["T_BOOLEAN_AND","&&",1312],["T_WHITESPACE"," ",1312],"!",["T_ISSET","isset",1312],"(",["T_VARIABLE","$options",1312],"[",["T_LNUMBER","0",1312],"]",")",",",["T_WHITESPACE"," ",1312],["T_VARIABLE","$message",1312],["T_WHITESPACE"," ",1312],"?",["T_WHITESPACE"," ",1312],["T_VARIABLE","$message",1312],["T_WHITESPACE"," ",1312],":",["T_WHITESPACE"," ",1312],["T_STRING","SafeMarkup",1312],["T_DOUBLE_COLON","::",1312],["T_STRING","format",1312],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @id does not exist.'",1312],",",["T_WHITESPACE"," ",1312],["T_ARRAY","array",1312],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1312],["T_WHITESPACE"," ",1312],["T_DOUBLE_ARROW","=>",1312],["T_WHITESPACE"," ",1312],["T_VARIABLE","$option",1312],",",["T_WHITESPACE"," ",1312],["T_CONSTANT_ENCAPSED_STRING","'@id'",1312],["T_WHITESPACE"," ",1312],["T_DOUBLE_ARROW","=>",1312],["T_WHITESPACE"," ",1312],["T_VARIABLE","$id",1312],")",")",",",["T_WHITESPACE"," ",1312],["T_VARIABLE","$group",1312],")",";",["T_WHITESPACE","\n  ",1312],"}",["T_WHITESPACE","\n\n  ",1313],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page is checked.\n   *\n   * @param string $id\n   *   ID of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\n   * @todo $id is unusable. Replace with $name.\n   *\/",1315],["T_WHITESPACE","\n  ",1337],["T_PROTECTED","protected",1338],["T_WHITESPACE"," ",1338],["T_FUNCTION","function",1338],["T_WHITESPACE"," ",1338],["T_STRING","assertOptionSelected",1338],"(",["T_VARIABLE","$id",1338],",",["T_WHITESPACE"," ",1338],["T_VARIABLE","$option",1338],",",["T_WHITESPACE"," ",1338],["T_VARIABLE","$message",1338],["T_WHITESPACE"," ",1338],"=",["T_WHITESPACE"," ",1338],["T_CONSTANT_ENCAPSED_STRING","''",1338],",",["T_WHITESPACE"," ",1338],["T_VARIABLE","$group",1338],["T_WHITESPACE"," ",1338],"=",["T_WHITESPACE"," ",1338],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1338],")",["T_WHITESPACE"," ",1338],"{",["T_WHITESPACE","\n    ",1338],["T_VARIABLE","$elements",1339],["T_WHITESPACE"," ",1339],"=",["T_WHITESPACE"," ",1339],["T_VARIABLE","$this",1339],["T_OBJECT_OPERATOR","->",1339],["T_STRING","xpath",1339],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]\/\/option[@value=:option]'",1339],",",["T_WHITESPACE"," ",1339],["T_ARRAY","array",1339],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1339],["T_WHITESPACE"," ",1339],["T_DOUBLE_ARROW","=>",1339],["T_WHITESPACE"," ",1339],["T_VARIABLE","$id",1339],",",["T_WHITESPACE"," ",1339],["T_CONSTANT_ENCAPSED_STRING","':option'",1339],["T_WHITESPACE"," ",1339],["T_DOUBLE_ARROW","=>",1339],["T_WHITESPACE"," ",1339],["T_VARIABLE","$option",1339],")",")",";",["T_WHITESPACE","\n    ",1339],["T_RETURN","return",1340],["T_WHITESPACE"," ",1340],["T_VARIABLE","$this",1340],["T_OBJECT_OPERATOR","->",1340],["T_STRING","assertTrue",1340],"(",["T_ISSET","isset",1340],"(",["T_VARIABLE","$elements",1340],"[",["T_LNUMBER","0",1340],"]",")",["T_WHITESPACE"," ",1340],["T_BOOLEAN_AND","&&",1340],["T_WHITESPACE"," ",1340],"!",["T_EMPTY","empty",1340],"(",["T_VARIABLE","$elements",1340],"[",["T_LNUMBER","0",1340],"]","[",["T_CONSTANT_ENCAPSED_STRING","'selected'",1340],"]",")",",",["T_WHITESPACE"," ",1340],["T_VARIABLE","$message",1340],["T_WHITESPACE"," ",1340],"?",["T_WHITESPACE"," ",1340],["T_VARIABLE","$message",1340],["T_WHITESPACE"," ",1340],":",["T_WHITESPACE"," ",1340],["T_STRING","SafeMarkup",1340],["T_DOUBLE_COLON","::",1340],["T_STRING","format",1340],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @id is selected.'",1340],",",["T_WHITESPACE"," ",1340],["T_ARRAY","array",1340],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1340],["T_WHITESPACE"," ",1340],["T_DOUBLE_ARROW","=>",1340],["T_WHITESPACE"," ",1340],["T_VARIABLE","$option",1340],",",["T_WHITESPACE"," ",1340],["T_CONSTANT_ENCAPSED_STRING","'@id'",1340],["T_WHITESPACE"," ",1340],["T_DOUBLE_ARROW","=>",1340],["T_WHITESPACE"," ",1340],["T_VARIABLE","$id",1340],")",")",",",["T_WHITESPACE"," ",1340],["T_VARIABLE","$group",1340],")",";",["T_WHITESPACE","\n  ",1340],"}",["T_WHITESPACE","\n\n  ",1341],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page is checked.\n   *\n   * @param string $drupal_selector\n   *   The data drupal selector of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\n   * @todo $id is unusable. Replace with $name.\n   *\/",1343],["T_WHITESPACE","\n  ",1365],["T_PROTECTED","protected",1366],["T_WHITESPACE"," ",1366],["T_FUNCTION","function",1366],["T_WHITESPACE"," ",1366],["T_STRING","assertOptionSelectedWithDrupalSelector",1366],"(",["T_VARIABLE","$drupal_selector",1366],",",["T_WHITESPACE"," ",1366],["T_VARIABLE","$option",1366],",",["T_WHITESPACE"," ",1366],["T_VARIABLE","$message",1366],["T_WHITESPACE"," ",1366],"=",["T_WHITESPACE"," ",1366],["T_CONSTANT_ENCAPSED_STRING","''",1366],",",["T_WHITESPACE"," ",1366],["T_VARIABLE","$group",1366],["T_WHITESPACE"," ",1366],"=",["T_WHITESPACE"," ",1366],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1366],")",["T_WHITESPACE"," ",1366],"{",["T_WHITESPACE","\n    ",1366],["T_VARIABLE","$elements",1367],["T_WHITESPACE"," ",1367],"=",["T_WHITESPACE"," ",1367],["T_VARIABLE","$this",1367],["T_OBJECT_OPERATOR","->",1367],["T_STRING","xpath",1367],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@data-drupal-selector=:data_drupal_selector]\/\/option[@value=:option]'",1367],",",["T_WHITESPACE"," ",1367],["T_ARRAY","array",1367],"(",["T_CONSTANT_ENCAPSED_STRING","':data_drupal_selector'",1367],["T_WHITESPACE"," ",1367],["T_DOUBLE_ARROW","=>",1367],["T_WHITESPACE"," ",1367],["T_VARIABLE","$drupal_selector",1367],",",["T_WHITESPACE"," ",1367],["T_CONSTANT_ENCAPSED_STRING","':option'",1367],["T_WHITESPACE"," ",1367],["T_DOUBLE_ARROW","=>",1367],["T_WHITESPACE"," ",1367],["T_VARIABLE","$option",1367],")",")",";",["T_WHITESPACE","\n    ",1367],["T_RETURN","return",1368],["T_WHITESPACE"," ",1368],["T_VARIABLE","$this",1368],["T_OBJECT_OPERATOR","->",1368],["T_STRING","assertTrue",1368],"(",["T_ISSET","isset",1368],"(",["T_VARIABLE","$elements",1368],"[",["T_LNUMBER","0",1368],"]",")",["T_WHITESPACE"," ",1368],["T_BOOLEAN_AND","&&",1368],["T_WHITESPACE"," ",1368],"!",["T_EMPTY","empty",1368],"(",["T_VARIABLE","$elements",1368],"[",["T_LNUMBER","0",1368],"]","[",["T_CONSTANT_ENCAPSED_STRING","'selected'",1368],"]",")",",",["T_WHITESPACE"," ",1368],["T_VARIABLE","$message",1368],["T_WHITESPACE"," ",1368],"?",["T_WHITESPACE"," ",1368],["T_VARIABLE","$message",1368],["T_WHITESPACE"," ",1368],":",["T_WHITESPACE"," ",1368],["T_STRING","SafeMarkup",1368],["T_DOUBLE_COLON","::",1368],["T_STRING","format",1368],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @data_drupal_selector is selected.'",1368],",",["T_WHITESPACE"," ",1368],["T_ARRAY","array",1368],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1368],["T_WHITESPACE"," ",1368],["T_DOUBLE_ARROW","=>",1368],["T_WHITESPACE"," ",1368],["T_VARIABLE","$option",1368],",",["T_WHITESPACE"," ",1368],["T_CONSTANT_ENCAPSED_STRING","'@data_drupal_selector'",1368],["T_WHITESPACE"," ",1368],["T_DOUBLE_ARROW","=>",1368],["T_WHITESPACE"," ",1368],["T_VARIABLE","$drupal_selector",1368],")",")",",",["T_WHITESPACE"," ",1368],["T_VARIABLE","$group",1368],")",";",["T_WHITESPACE","\n  ",1368],"}",["T_WHITESPACE","\n\n  ",1369],["T_DOC_COMMENT","\/**\n   * Asserts that a select option in the current page is not checked.\n   *\n   * @param string $id\n   *   ID of select field to assert.\n   * @param string $option\n   *   Option to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Browser'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1371],["T_WHITESPACE","\n  ",1391],["T_PROTECTED","protected",1392],["T_WHITESPACE"," ",1392],["T_FUNCTION","function",1392],["T_WHITESPACE"," ",1392],["T_STRING","assertNoOptionSelected",1392],"(",["T_VARIABLE","$id",1392],",",["T_WHITESPACE"," ",1392],["T_VARIABLE","$option",1392],",",["T_WHITESPACE"," ",1392],["T_VARIABLE","$message",1392],["T_WHITESPACE"," ",1392],"=",["T_WHITESPACE"," ",1392],["T_CONSTANT_ENCAPSED_STRING","''",1392],",",["T_WHITESPACE"," ",1392],["T_VARIABLE","$group",1392],["T_WHITESPACE"," ",1392],"=",["T_WHITESPACE"," ",1392],["T_CONSTANT_ENCAPSED_STRING","'Browser'",1392],")",["T_WHITESPACE"," ",1392],"{",["T_WHITESPACE","\n    ",1392],["T_VARIABLE","$elements",1393],["T_WHITESPACE"," ",1393],"=",["T_WHITESPACE"," ",1393],["T_VARIABLE","$this",1393],["T_OBJECT_OPERATOR","->",1393],["T_STRING","xpath",1393],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/select[@id=:id]\/\/option[@value=:option]'",1393],",",["T_WHITESPACE"," ",1393],["T_ARRAY","array",1393],"(",["T_CONSTANT_ENCAPSED_STRING","':id'",1393],["T_WHITESPACE"," ",1393],["T_DOUBLE_ARROW","=>",1393],["T_WHITESPACE"," ",1393],["T_VARIABLE","$id",1393],",",["T_WHITESPACE"," ",1393],["T_CONSTANT_ENCAPSED_STRING","':option'",1393],["T_WHITESPACE"," ",1393],["T_DOUBLE_ARROW","=>",1393],["T_WHITESPACE"," ",1393],["T_VARIABLE","$option",1393],")",")",";",["T_WHITESPACE","\n    ",1393],["T_RETURN","return",1394],["T_WHITESPACE"," ",1394],["T_VARIABLE","$this",1394],["T_OBJECT_OPERATOR","->",1394],["T_STRING","assertTrue",1394],"(",["T_ISSET","isset",1394],"(",["T_VARIABLE","$elements",1394],"[",["T_LNUMBER","0",1394],"]",")",["T_WHITESPACE"," ",1394],["T_BOOLEAN_AND","&&",1394],["T_WHITESPACE"," ",1394],["T_EMPTY","empty",1394],"(",["T_VARIABLE","$elements",1394],"[",["T_LNUMBER","0",1394],"]","[",["T_CONSTANT_ENCAPSED_STRING","'selected'",1394],"]",")",",",["T_WHITESPACE"," ",1394],["T_VARIABLE","$message",1394],["T_WHITESPACE"," ",1394],"?",["T_WHITESPACE"," ",1394],["T_VARIABLE","$message",1394],["T_WHITESPACE"," ",1394],":",["T_WHITESPACE"," ",1394],["T_STRING","SafeMarkup",1394],["T_DOUBLE_COLON","::",1394],["T_STRING","format",1394],"(",["T_CONSTANT_ENCAPSED_STRING","'Option @option for field @id is not selected.'",1394],",",["T_WHITESPACE"," ",1394],["T_ARRAY","array",1394],"(",["T_CONSTANT_ENCAPSED_STRING","'@option'",1394],["T_WHITESPACE"," ",1394],["T_DOUBLE_ARROW","=>",1394],["T_WHITESPACE"," ",1394],["T_VARIABLE","$option",1394],",",["T_WHITESPACE"," ",1394],["T_CONSTANT_ENCAPSED_STRING","'@id'",1394],["T_WHITESPACE"," ",1394],["T_DOUBLE_ARROW","=>",1394],["T_WHITESPACE"," ",1394],["T_VARIABLE","$id",1394],")",")",",",["T_WHITESPACE"," ",1394],["T_VARIABLE","$group",1394],")",";",["T_WHITESPACE","\n  ",1394],"}",["T_WHITESPACE","\n\n  ",1395],["T_DOC_COMMENT","\/**\n   * Asserts that a field exists with the given name or ID.\n   *\n   * @param string $field\n   *   Name or ID of field to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1397],["T_WHITESPACE","\n  ",1415],["T_PROTECTED","protected",1416],["T_WHITESPACE"," ",1416],["T_FUNCTION","function",1416],["T_WHITESPACE"," ",1416],["T_STRING","assertField",1416],"(",["T_VARIABLE","$field",1416],",",["T_WHITESPACE"," ",1416],["T_VARIABLE","$message",1416],["T_WHITESPACE"," ",1416],"=",["T_WHITESPACE"," ",1416],["T_CONSTANT_ENCAPSED_STRING","''",1416],",",["T_WHITESPACE"," ",1416],["T_VARIABLE","$group",1416],["T_WHITESPACE"," ",1416],"=",["T_WHITESPACE"," ",1416],["T_CONSTANT_ENCAPSED_STRING","'Other'",1416],")",["T_WHITESPACE"," ",1416],"{",["T_WHITESPACE","\n    ",1416],["T_RETURN","return",1417],["T_WHITESPACE"," ",1417],["T_VARIABLE","$this",1417],["T_OBJECT_OPERATOR","->",1417],["T_STRING","assertFieldByXPath",1417],"(",["T_VARIABLE","$this",1417],["T_OBJECT_OPERATOR","->",1417],["T_STRING","constructFieldXpath",1417],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",1417],",",["T_WHITESPACE"," ",1417],["T_VARIABLE","$field",1417],")",["T_WHITESPACE"," ",1417],".",["T_WHITESPACE"," ",1417],["T_CONSTANT_ENCAPSED_STRING","'|'",1417],["T_WHITESPACE"," ",1417],".",["T_WHITESPACE"," ",1417],["T_VARIABLE","$this",1417],["T_OBJECT_OPERATOR","->",1417],["T_STRING","constructFieldXpath",1417],"(",["T_CONSTANT_ENCAPSED_STRING","'id'",1417],",",["T_WHITESPACE"," ",1417],["T_VARIABLE","$field",1417],")",",",["T_WHITESPACE"," ",1417],["T_STRING","NULL",1417],",",["T_WHITESPACE"," ",1417],["T_VARIABLE","$message",1417],",",["T_WHITESPACE"," ",1417],["T_VARIABLE","$group",1417],")",";",["T_WHITESPACE","\n  ",1417],"}",["T_WHITESPACE","\n\n  ",1418],["T_DOC_COMMENT","\/**\n   * Asserts that a field does not exist with the given name or ID.\n   *\n   * @param string $field\n   *   Name or ID of field to assert.\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1420],["T_WHITESPACE","\n  ",1438],["T_PROTECTED","protected",1439],["T_WHITESPACE"," ",1439],["T_FUNCTION","function",1439],["T_WHITESPACE"," ",1439],["T_STRING","assertNoField",1439],"(",["T_VARIABLE","$field",1439],",",["T_WHITESPACE"," ",1439],["T_VARIABLE","$message",1439],["T_WHITESPACE"," ",1439],"=",["T_WHITESPACE"," ",1439],["T_CONSTANT_ENCAPSED_STRING","''",1439],",",["T_WHITESPACE"," ",1439],["T_VARIABLE","$group",1439],["T_WHITESPACE"," ",1439],"=",["T_WHITESPACE"," ",1439],["T_CONSTANT_ENCAPSED_STRING","'Other'",1439],")",["T_WHITESPACE"," ",1439],"{",["T_WHITESPACE","\n    ",1439],["T_RETURN","return",1440],["T_WHITESPACE"," ",1440],["T_VARIABLE","$this",1440],["T_OBJECT_OPERATOR","->",1440],["T_STRING","assertNoFieldByXPath",1440],"(",["T_VARIABLE","$this",1440],["T_OBJECT_OPERATOR","->",1440],["T_STRING","constructFieldXpath",1440],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",1440],",",["T_WHITESPACE"," ",1440],["T_VARIABLE","$field",1440],")",["T_WHITESPACE"," ",1440],".",["T_WHITESPACE"," ",1440],["T_CONSTANT_ENCAPSED_STRING","'|'",1440],["T_WHITESPACE"," ",1440],".",["T_WHITESPACE"," ",1440],["T_VARIABLE","$this",1440],["T_OBJECT_OPERATOR","->",1440],["T_STRING","constructFieldXpath",1440],"(",["T_CONSTANT_ENCAPSED_STRING","'id'",1440],",",["T_WHITESPACE"," ",1440],["T_VARIABLE","$field",1440],")",",",["T_WHITESPACE"," ",1440],["T_STRING","NULL",1440],",",["T_WHITESPACE"," ",1440],["T_VARIABLE","$message",1440],",",["T_WHITESPACE"," ",1440],["T_VARIABLE","$group",1440],")",";",["T_WHITESPACE","\n  ",1440],"}",["T_WHITESPACE","\n\n  ",1441],["T_DOC_COMMENT","\/**\n   * Asserts that each HTML ID is used for just a single element.\n   *\n   * @param string $message\n   *   (optional) A message to display with the assertion. Do not translate\n   *   messages: use \\Drupal\\Component\\Utility\\SafeMarkup::format() to embed\n   *   variables in the message text, not t(). If left blank, a default message\n   *   will be displayed.\n   * @param string $group\n   *   (optional) The group this message is in, which is displayed in a column\n   *   in test output. Use 'Debug' to indicate this is debugging output. Do not\n   *   translate this string. Defaults to 'Other'; most tests do not override\n   *   this default.\n   * @param array $ids_to_skip\n   *   An optional array of ids to skip when checking for duplicates. It is\n   *   always a bug to have duplicate HTML IDs, so this parameter is to enable\n   *   incremental fixing of core code. Whenever a test passes this parameter,\n   *   it should add a \"todo\" comment above the call to this function explaining\n   *   the legacy bug that the test wishes to ignore and including a link to an\n   *   issue that is working to fix that legacy bug.\n   *\n   * @return bool\n   *   TRUE on pass, FALSE on fail.\n   *\/",1443],["T_WHITESPACE","\n  ",1466],["T_PROTECTED","protected",1467],["T_WHITESPACE"," ",1467],["T_FUNCTION","function",1467],["T_WHITESPACE"," ",1467],["T_STRING","assertNoDuplicateIds",1467],"(",["T_VARIABLE","$message",1467],["T_WHITESPACE"," ",1467],"=",["T_WHITESPACE"," ",1467],["T_CONSTANT_ENCAPSED_STRING","''",1467],",",["T_WHITESPACE"," ",1467],["T_VARIABLE","$group",1467],["T_WHITESPACE"," ",1467],"=",["T_WHITESPACE"," ",1467],["T_CONSTANT_ENCAPSED_STRING","'Other'",1467],",",["T_WHITESPACE"," ",1467],["T_VARIABLE","$ids_to_skip",1467],["T_WHITESPACE"," ",1467],"=",["T_WHITESPACE"," ",1467],["T_ARRAY","array",1467],"(",")",")",["T_WHITESPACE"," ",1467],"{",["T_WHITESPACE","\n    ",1467],["T_VARIABLE","$status",1468],["T_WHITESPACE"," ",1468],"=",["T_WHITESPACE"," ",1468],["T_STRING","TRUE",1468],";",["T_WHITESPACE","\n    ",1468],["T_FOREACH","foreach",1469],["T_WHITESPACE"," ",1469],"(",["T_VARIABLE","$this",1469],["T_OBJECT_OPERATOR","->",1469],["T_STRING","xpath",1469],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\/*[@id]'",1469],")",["T_WHITESPACE"," ",1469],["T_AS","as",1469],["T_WHITESPACE"," ",1469],["T_VARIABLE","$element",1469],")",["T_WHITESPACE"," ",1469],"{",["T_WHITESPACE","\n      ",1469],["T_VARIABLE","$id",1470],["T_WHITESPACE"," ",1470],"=",["T_WHITESPACE"," ",1470],["T_STRING_CAST","(string)",1470],["T_WHITESPACE"," ",1470],["T_VARIABLE","$element",1470],"[",["T_CONSTANT_ENCAPSED_STRING","'id'",1470],"]",";",["T_WHITESPACE","\n      ",1470],["T_IF","if",1471],["T_WHITESPACE"," ",1471],"(",["T_ISSET","isset",1471],"(",["T_VARIABLE","$seen_ids",1471],"[",["T_VARIABLE","$id",1471],"]",")",["T_WHITESPACE"," ",1471],["T_BOOLEAN_AND","&&",1471],["T_WHITESPACE"," ",1471],"!",["T_STRING","in_array",1471],"(",["T_VARIABLE","$id",1471],",",["T_WHITESPACE"," ",1471],["T_VARIABLE","$ids_to_skip",1471],")",")",["T_WHITESPACE"," ",1471],"{",["T_WHITESPACE","\n        ",1471],["T_VARIABLE","$this",1472],["T_OBJECT_OPERATOR","->",1472],["T_STRING","fail",1472],"(",["T_STRING","SafeMarkup",1472],["T_DOUBLE_COLON","::",1472],["T_STRING","format",1472],"(",["T_CONSTANT_ENCAPSED_STRING","'The HTML ID %id is unique.'",1472],",",["T_WHITESPACE"," ",1472],["T_ARRAY","array",1472],"(",["T_CONSTANT_ENCAPSED_STRING","'%id'",1472],["T_WHITESPACE"," ",1472],["T_DOUBLE_ARROW","=>",1472],["T_WHITESPACE"," ",1472],["T_VARIABLE","$id",1472],")",")",",",["T_WHITESPACE"," ",1472],["T_VARIABLE","$group",1472],")",";",["T_WHITESPACE","\n        ",1472],["T_VARIABLE","$status",1473],["T_WHITESPACE"," ",1473],"=",["T_WHITESPACE"," ",1473],["T_STRING","FALSE",1473],";",["T_WHITESPACE","\n      ",1473],"}",["T_WHITESPACE","\n      ",1474],["T_VARIABLE","$seen_ids",1475],"[",["T_VARIABLE","$id",1475],"]",["T_WHITESPACE"," ",1475],"=",["T_WHITESPACE"," ",1475],["T_STRING","TRUE",1475],";",["T_WHITESPACE","\n    ",1475],"}",["T_WHITESPACE","\n    ",1476],["T_RETURN","return",1477],["T_WHITESPACE"," ",1477],["T_VARIABLE","$this",1477],["T_OBJECT_OPERATOR","->",1477],["T_STRING","assert",1477],"(",["T_VARIABLE","$status",1477],",",["T_WHITESPACE"," ",1477],["T_VARIABLE","$message",1477],",",["T_WHITESPACE"," ",1477],["T_VARIABLE","$group",1477],")",";",["T_WHITESPACE","\n  ",1477],"}",["T_WHITESPACE","\n\n  ",1478],["T_DOC_COMMENT","\/**\n   * Helper: Constructs an XPath for the given set of attributes and value.\n   *\n   * @param string $attribute\n   *   Field attributes.\n   * @param string $value\n   *   Value of field.\n   *\n   * @return string\n   *   XPath for specified values.\n   *\/",1480],["T_WHITESPACE","\n  ",1490],["T_PROTECTED","protected",1491],["T_WHITESPACE"," ",1491],["T_FUNCTION","function",1491],["T_WHITESPACE"," ",1491],["T_STRING","constructFieldXpath",1491],"(",["T_VARIABLE","$attribute",1491],",",["T_WHITESPACE"," ",1491],["T_VARIABLE","$value",1491],")",["T_WHITESPACE"," ",1491],"{",["T_WHITESPACE","\n    ",1491],["T_VARIABLE","$xpath",1492],["T_WHITESPACE"," ",1492],"=",["T_WHITESPACE"," ",1492],["T_CONSTANT_ENCAPSED_STRING","'\/\/textarea[@'",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_VARIABLE","$attribute",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_CONSTANT_ENCAPSED_STRING","'=:value]|\/\/input[@'",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_VARIABLE","$attribute",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_CONSTANT_ENCAPSED_STRING","'=:value]|\/\/select[@'",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_VARIABLE","$attribute",1492],["T_WHITESPACE"," ",1492],".",["T_WHITESPACE"," ",1492],["T_CONSTANT_ENCAPSED_STRING","'=:value]'",1492],";",["T_WHITESPACE","\n    ",1492],["T_RETURN","return",1493],["T_WHITESPACE"," ",1493],["T_VARIABLE","$this",1493],["T_OBJECT_OPERATOR","->",1493],["T_STRING","buildXPathQuery",1493],"(",["T_VARIABLE","$xpath",1493],",",["T_WHITESPACE"," ",1493],["T_ARRAY","array",1493],"(",["T_CONSTANT_ENCAPSED_STRING","':value'",1493],["T_WHITESPACE"," ",1493],["T_DOUBLE_ARROW","=>",1493],["T_WHITESPACE"," ",1493],["T_VARIABLE","$value",1493],")",")",";",["T_WHITESPACE","\n  ",1493],"}",["T_WHITESPACE","\n\n",1494],"}",["T_WHITESPACE","\n",1496]]