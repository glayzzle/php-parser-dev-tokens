[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Field API documentation.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",8],["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * @defgroup field_types Field Types API\n * @{\n * Defines field, widget, display formatter, and storage types.\n *\n * In the Field API, each field has a type, which determines what kind of data\n * (integer, string, date, etc.) the field can hold, which settings it provides,\n * and so on. The data type(s) accepted by a field are defined in\n * hook_field_schema().\n *\n * Field types are plugins annotated with class\n * \\Drupal\\Core\\Field\\Annotation\\FieldType, and implement plugin interface\n * \\Drupal\\Core\\Field\\FieldItemInterface. Field Type plugins are managed by the\n * \\Drupal\\Core\\Field\\FieldTypePluginManager class. Field type classes usually\n * extend base class \\Drupal\\Core\\Field\\FieldItemBase. Field-type plugins need\n * to be in the namespace \\Drupal\\{your_module}\\Plugin\\Field\\FieldType. See the\n * @link plugin_api Plugin API topic @endlink for more information on how to\n * define plugins.\n *\n * The Field Types API also defines two kinds of pluggable handlers: widgets\n * and formatters. @link field_widget Widgets @endlink specify how the field\n * appears in edit forms, while @link field_formatter formatters @endlink\n * specify how the field appears in displayed entities.\n *\n * See @link field Field API @endlink for information about the other parts of\n * the Field API.\n *\n * @see field\n * @see field_widget\n * @see field_formatter\n * @see plugin_api\n *\/",13],["T_WHITESPACE","\n\n\n",44],["T_DOC_COMMENT","\/**\n * Perform alterations on Field API field types.\n *\n * @param $info\n *   Array of information on field types as collected by the \"field type\" plugin\n *   manager.\n *\/",47],["T_WHITESPACE","\n",53],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","hook_field_info_alter",54],"(","&",["T_VARIABLE","$info",54],")",["T_WHITESPACE"," ",54],"{",["T_WHITESPACE","\n  ",54],["T_COMMENT","\/\/ Change the default widget for fields of type 'foo'.\n",55],["T_WHITESPACE","  ",56],["T_IF","if",56],["T_WHITESPACE"," ",56],"(",["T_ISSET","isset",56],"(",["T_VARIABLE","$info",56],"[",["T_CONSTANT_ENCAPSED_STRING","'foo'",56],"]",")",")",["T_WHITESPACE"," ",56],"{",["T_WHITESPACE","\n    ",56],["T_VARIABLE","$info",57],"[",["T_CONSTANT_ENCAPSED_STRING","'foo'",57],"]","[",["T_CONSTANT_ENCAPSED_STRING","'default widget'",57],"]",["T_WHITESPACE"," ",57],"=",["T_WHITESPACE"," ",57],["T_CONSTANT_ENCAPSED_STRING","'mymodule_widget'",57],";",["T_WHITESPACE","\n  ",57],"}",["T_WHITESPACE","\n",58],"}",["T_WHITESPACE","\n\n",59],["T_DOC_COMMENT","\/**\n * Forbid a field storage update from occurring.\n *\n * Any module may forbid any update for any reason. For example, the\n * field's storage module might forbid an update if it would change\n * the storage schema while data for the field exists. A field type\n * module might forbid an update if it would change existing data's\n * semantics, or if there are external dependencies on field settings\n * that cannot be updated.\n *\n * To forbid the update from occurring, throw a\n * \\Drupal\\Core\\Entity\\Exception\\FieldStorageDefinitionUpdateForbiddenException.\n *\n * @param \\Drupal\\field\\FieldStorageConfigInterface $field_storage\n *   The field storage as it will be post-update.\n * @param \\Drupal\\field\\FieldStorageConfigInterface $prior_field_storage\n *   The field storage as it is pre-update.\n *\n * @see entity_crud\n *\/",61],["T_WHITESPACE","\n",80],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","hook_field_storage_config_update_forbid",81],"(",["T_NS_SEPARATOR","\\",81],["T_STRING","Drupal",81],["T_NS_SEPARATOR","\\",81],["T_STRING","field",81],["T_NS_SEPARATOR","\\",81],["T_STRING","FieldStorageConfigInterface",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$field_storage",81],",",["T_WHITESPACE"," ",81],["T_NS_SEPARATOR","\\",81],["T_STRING","Drupal",81],["T_NS_SEPARATOR","\\",81],["T_STRING","field",81],["T_NS_SEPARATOR","\\",81],["T_STRING","FieldStorageConfigInterface",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$prior_field_storage",81],")",["T_WHITESPACE"," ",81],"{",["T_WHITESPACE","\n  ",81],["T_IF","if",82],["T_WHITESPACE"," ",82],"(",["T_VARIABLE","$field_storage",82],["T_OBJECT_OPERATOR","->",82],["T_STRING","module",82],["T_WHITESPACE"," ",82],["T_IS_EQUAL","==",82],["T_WHITESPACE"," ",82],["T_CONSTANT_ENCAPSED_STRING","'options'",82],["T_WHITESPACE"," ",82],["T_BOOLEAN_AND","&&",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$field_storage",82],["T_OBJECT_OPERATOR","->",82],["T_STRING","hasData",82],"(",")",")",["T_WHITESPACE"," ",82],"{",["T_WHITESPACE","\n    ",82],["T_COMMENT","\/\/ Forbid any update that removes allowed values with actual data.\n",83],["T_WHITESPACE","    ",84],["T_VARIABLE","$allowed_values",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_VARIABLE","$field_storage",84],["T_OBJECT_OPERATOR","->",84],["T_STRING","getSetting",84],"(",["T_CONSTANT_ENCAPSED_STRING","'allowed_values'",84],")",";",["T_WHITESPACE","\n    ",84],["T_VARIABLE","$prior_allowed_values",85],["T_WHITESPACE"," ",85],"=",["T_WHITESPACE"," ",85],["T_VARIABLE","$prior_field_storage",85],["T_OBJECT_OPERATOR","->",85],["T_STRING","getSetting",85],"(",["T_CONSTANT_ENCAPSED_STRING","'allowed_values'",85],")",";",["T_WHITESPACE","\n    ",85],["T_VARIABLE","$lost_keys",86],["T_WHITESPACE"," ",86],"=",["T_WHITESPACE"," ",86],["T_STRING","array_keys",86],"(",["T_STRING","array_diff_key",86],"(",["T_VARIABLE","$prior_allowed_values",86],",",["T_WHITESPACE"," ",86],["T_VARIABLE","$allowed_values",86],")",")",";",["T_WHITESPACE","\n    ",86],["T_IF","if",87],["T_WHITESPACE"," ",87],"(",["T_STRING","_options_values_in_use",87],"(",["T_VARIABLE","$field_storage",87],["T_OBJECT_OPERATOR","->",87],["T_STRING","getTargetEntityTypeId",87],"(",")",",",["T_WHITESPACE"," ",87],["T_VARIABLE","$field_storage",87],["T_OBJECT_OPERATOR","->",87],["T_STRING","getName",87],"(",")",",",["T_WHITESPACE"," ",87],["T_VARIABLE","$lost_keys",87],")",")",["T_WHITESPACE"," ",87],"{",["T_WHITESPACE","\n      ",87],["T_THROW","throw",88],["T_WHITESPACE"," ",88],["T_NEW","new",88],["T_WHITESPACE"," ",88],["T_NS_SEPARATOR","\\",88],["T_STRING","Drupal",88],["T_NS_SEPARATOR","\\",88],["T_STRING","Core",88],["T_NS_SEPARATOR","\\",88],["T_STRING","Entity",88],["T_NS_SEPARATOR","\\",88],["T_STRING","Exception",88],["T_NS_SEPARATOR","\\",88],["T_STRING","FieldStorageDefinitionUpdateForbiddenException",88],"(",["T_STRING","t",88],"(",["T_CONSTANT_ENCAPSED_STRING","'A list field (@field_name) with existing data cannot have its keys changed.'",88],",",["T_WHITESPACE"," ",88],["T_ARRAY","array",88],"(",["T_CONSTANT_ENCAPSED_STRING","'@field_name'",88],["T_WHITESPACE"," ",88],["T_DOUBLE_ARROW","=>",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$field_storage",88],["T_OBJECT_OPERATOR","->",88],["T_STRING","getName",88],"(",")",")",")",")",";",["T_WHITESPACE","\n    ",88],"}",["T_WHITESPACE","\n  ",89],"}",["T_WHITESPACE","\n",90],"}",["T_WHITESPACE","\n\n",91],["T_DOC_COMMENT","\/**\n * @} End of \"defgroup field_types\".\n *\/",93],["T_WHITESPACE","\n\n",95],["T_DOC_COMMENT","\/**\n * @defgroup field_widget Field Widget API\n * @{\n * Define Field API widget types.\n *\n * Field API widgets specify how fields are displayed in edit forms. Fields of a\n * given @link field_types field type @endlink may be edited using more than one\n * widget. In this case, the Field UI module allows the site builder to choose\n * which widget to use.\n *\n * Widgets are Plugins managed by the\n * \\Drupal\\Core\\Field\\WidgetPluginManager class. A widget is a plugin annotated\n * with class \\Drupal\\Core\\Field\\Annotation\\FieldWidget that implements\n * \\Drupal\\Core\\Field\\WidgetInterface (in most cases, by\n * subclassing \\Drupal\\Core\\Field\\WidgetBase). Widget plugins need to be in the\n * namespace \\Drupal\\{your_module}\\Plugin\\Field\\FieldWidget.\n *\n * Widgets are @link form_api Form API @endlink elements with additional\n * processing capabilities. The methods of the WidgetInterface object are\n * typically called by respective methods in the\n * \\Drupal\\Core\\Entity\\Entity\\EntityFormDisplay class.\n *\n * @see field\n * @see field_types\n * @see field_formatter\n * @see plugin_api\n *\/",97],["T_WHITESPACE","\n\n",123],["T_DOC_COMMENT","\/**\n * Perform alterations on Field API widget types.\n *\n * @param array $info\n *   An array of information on existing widget types, as collected by the\n *   annotation discovery mechanism.\n *\/",125],["T_WHITESPACE","\n",131],["T_FUNCTION","function",132],["T_WHITESPACE"," ",132],["T_STRING","hook_field_widget_info_alter",132],"(",["T_ARRAY","array",132],["T_WHITESPACE"," ",132],"&",["T_VARIABLE","$info",132],")",["T_WHITESPACE"," ",132],"{",["T_WHITESPACE","\n  ",132],["T_COMMENT","\/\/ Let a new field type re-use an existing widget.\n",133],["T_WHITESPACE","  ",134],["T_VARIABLE","$info",134],"[",["T_CONSTANT_ENCAPSED_STRING","'options_select'",134],"]","[",["T_CONSTANT_ENCAPSED_STRING","'field_types'",134],"]","[","]",["T_WHITESPACE"," ",134],"=",["T_WHITESPACE"," ",134],["T_CONSTANT_ENCAPSED_STRING","'my_field_type'",134],";",["T_WHITESPACE","\n",134],"}",["T_WHITESPACE","\n\n",135],["T_DOC_COMMENT","\/**\n * Alter forms for field widgets provided by other modules.\n *\n * @param $element\n *   The field widget form element as constructed by hook_field_widget_form().\n * @param $form_state\n *   The current state of the form.\n * @param $context\n *   An associative array containing the following key-value pairs:\n *   - form: The form structure to which widgets are being attached. This may be\n *     a full form structure, or a sub-element of a larger form.\n *   - widget: The widget plugin instance.\n *   - items: The field values, as a\n *     \\Drupal\\Core\\Field\\FieldItemListInterface object.\n *   - delta: The order of this item in the array of subelements (0, 1, 2, etc).\n *   - default: A boolean indicating whether the form is being shown as a dummy\n *     form to set default values.\n *\n * @see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()\n * @see hook_field_widget_WIDGET_TYPE_form_alter()\n *\/",137],["T_WHITESPACE","\n",157],["T_FUNCTION","function",158],["T_WHITESPACE"," ",158],["T_STRING","hook_field_widget_form_alter",158],"(","&",["T_VARIABLE","$element",158],",",["T_WHITESPACE"," ",158],["T_NS_SEPARATOR","\\",158],["T_STRING","Drupal",158],["T_NS_SEPARATOR","\\",158],["T_STRING","Core",158],["T_NS_SEPARATOR","\\",158],["T_STRING","Form",158],["T_NS_SEPARATOR","\\",158],["T_STRING","FormStateInterface",158],["T_WHITESPACE"," ",158],["T_VARIABLE","$form_state",158],",",["T_WHITESPACE"," ",158],["T_VARIABLE","$context",158],")",["T_WHITESPACE"," ",158],"{",["T_WHITESPACE","\n  ",158],["T_COMMENT","\/\/ Add a css class to widget form elements for all fields of type mytype.\n",159],["T_WHITESPACE","  ",160],["T_VARIABLE","$field_definition",160],["T_WHITESPACE"," ",160],"=",["T_WHITESPACE"," ",160],["T_VARIABLE","$context",160],"[",["T_CONSTANT_ENCAPSED_STRING","'items'",160],"]",["T_OBJECT_OPERATOR","->",160],["T_STRING","getFieldDefinition",160],"(",")",";",["T_WHITESPACE","\n  ",160],["T_IF","if",161],["T_WHITESPACE"," ",161],"(",["T_VARIABLE","$field_definition",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","getType",161],"(",")",["T_WHITESPACE"," ",161],["T_IS_EQUAL","==",161],["T_WHITESPACE"," ",161],["T_CONSTANT_ENCAPSED_STRING","'mytype'",161],")",["T_WHITESPACE"," ",161],"{",["T_WHITESPACE","\n    ",161],["T_COMMENT","\/\/ Be sure not to overwrite existing attributes.\n",162],["T_WHITESPACE","    ",163],["T_VARIABLE","$element",163],"[",["T_CONSTANT_ENCAPSED_STRING","'#attributes'",163],"]","[",["T_CONSTANT_ENCAPSED_STRING","'class'",163],"]","[","]",["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_CONSTANT_ENCAPSED_STRING","'myclass'",163],";",["T_WHITESPACE","\n  ",163],"}",["T_WHITESPACE","\n",164],"}",["T_WHITESPACE","\n\n",165],["T_DOC_COMMENT","\/**\n * Alter widget forms for a specific widget provided by another module.\n *\n * Modules can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a\n * specific widget form, rather than using hook_field_widget_form_alter() and\n * checking the widget type.\n *\n * @param $element\n *   The field widget form element as constructed by hook_field_widget_form().\n * @param $form_state\n *   The current state of the form.\n * @param $context\n *   An associative array. See hook_field_widget_form_alter() for the structure\n *   and content of the array.\n *\n * @see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()\n * @see hook_field_widget_form_alter()\n *\/",167],["T_WHITESPACE","\n",184],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","hook_field_widget_WIDGET_TYPE_form_alter",185],"(","&",["T_VARIABLE","$element",185],",",["T_WHITESPACE"," ",185],["T_NS_SEPARATOR","\\",185],["T_STRING","Drupal",185],["T_NS_SEPARATOR","\\",185],["T_STRING","Core",185],["T_NS_SEPARATOR","\\",185],["T_STRING","Form",185],["T_NS_SEPARATOR","\\",185],["T_STRING","FormStateInterface",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$form_state",185],",",["T_WHITESPACE"," ",185],["T_VARIABLE","$context",185],")",["T_WHITESPACE"," ",185],"{",["T_WHITESPACE","\n  ",185],["T_COMMENT","\/\/ Code here will only act on widgets of type WIDGET_TYPE.  For example,\n",186],["T_WHITESPACE","  ",187],["T_COMMENT","\/\/ hook_field_widget_mymodule_autocomplete_form_alter() will only act on\n",187],["T_WHITESPACE","  ",188],["T_COMMENT","\/\/ widgets of type 'mymodule_autocomplete'.\n",188],["T_WHITESPACE","  ",189],["T_VARIABLE","$element",189],"[",["T_CONSTANT_ENCAPSED_STRING","'#autocomplete_route_name'",189],"]",["T_WHITESPACE"," ",189],"=",["T_WHITESPACE"," ",189],["T_CONSTANT_ENCAPSED_STRING","'mymodule.autocomplete_route'",189],";",["T_WHITESPACE","\n",189],"}",["T_WHITESPACE","\n\n",190],["T_DOC_COMMENT","\/**\n * @} End of \"defgroup field_widget\".\n *\/",192],["T_WHITESPACE","\n\n\n",194],["T_DOC_COMMENT","\/**\n * @defgroup field_formatter Field Formatter API\n * @{\n * Define Field API formatter types.\n *\n * Field API formatters specify how fields are displayed when the entity to\n * which the field is attached is displayed. Fields of a given\n * @link field_types field type @endlink may be displayed using more than one\n * formatter. In this case, the Field UI module allows the site builder to\n * choose which formatter to use.\n *\n * Formatters are Plugins managed by the\n * \\Drupal\\Core\\Field\\FormatterPluginManager class. A formatter is a plugin\n * annotated with class \\Drupal\\Core\\Field\\Annotation\\FieldFormatter that\n * implements \\Drupal\\Core\\Field\\FormatterInterface (in most cases, by\n * subclassing \\Drupal\\Core\\Field\\FormatterBase). Formatter plugins need to be\n * in the namespace \\Drupal\\{your_module}\\Plugin\\Field\\FieldFormatter.\n *\n * @see field\n * @see field_types\n * @see field_widget\n * @see plugin_api\n *\/",197],["T_WHITESPACE","\n\n",219],["T_DOC_COMMENT","\/**\n * Perform alterations on Field API formatter types.\n *\n * @param array $info\n *   An array of information on existing formatter types, as collected by the\n *   annotation discovery mechanism.\n *\/",221],["T_WHITESPACE","\n",227],["T_FUNCTION","function",228],["T_WHITESPACE"," ",228],["T_STRING","hook_field_formatter_info_alter",228],"(",["T_ARRAY","array",228],["T_WHITESPACE"," ",228],"&",["T_VARIABLE","$info",228],")",["T_WHITESPACE"," ",228],"{",["T_WHITESPACE","\n  ",228],["T_COMMENT","\/\/ Let a new field type re-use an existing formatter.\n",229],["T_WHITESPACE","  ",230],["T_VARIABLE","$info",230],"[",["T_CONSTANT_ENCAPSED_STRING","'text_default'",230],"]","[",["T_CONSTANT_ENCAPSED_STRING","'field_types'",230],"]","[","]",["T_WHITESPACE"," ",230],"=",["T_WHITESPACE"," ",230],["T_CONSTANT_ENCAPSED_STRING","'my_field_type'",230],";",["T_WHITESPACE","\n",230],"}",["T_WHITESPACE","\n\n",231],["T_DOC_COMMENT","\/**\n * @} End of \"defgroup field_formatter\".\n *\/",233],["T_WHITESPACE","\n\n",235],["T_DOC_COMMENT","\/**\n * Returns the maximum weight for the entity components handled by the module.\n *\n * Field API takes care of fields and 'extra_fields'. This hook is intended for\n * third-party modules adding other entity components (e.g. field_group).\n *\n * @param string $entity_type\n *   The type of entity; e.g. 'node' or 'user'.\n * @param string $bundle\n *   The bundle name.\n * @param string $context\n *   The context for which the maximum weight is requested. Either 'form' or\n *   'display'.\n * @param string $context_mode\n *   The view or form mode name.\n *\n * @return int\n *   The maximum weight of the entity's components, or NULL if no components\n *   were found.\n *\n * @ingroup field_info\n *\/",237],["T_WHITESPACE","\n",258],["T_FUNCTION","function",259],["T_WHITESPACE"," ",259],["T_STRING","hook_field_info_max_weight",259],"(",["T_VARIABLE","$entity_type",259],",",["T_WHITESPACE"," ",259],["T_VARIABLE","$bundle",259],",",["T_WHITESPACE"," ",259],["T_VARIABLE","$context",259],",",["T_WHITESPACE"," ",259],["T_VARIABLE","$context_mode",259],")",["T_WHITESPACE"," ",259],"{",["T_WHITESPACE","\n  ",259],["T_VARIABLE","$weights",260],["T_WHITESPACE"," ",260],"=",["T_WHITESPACE"," ",260],["T_ARRAY","array",260],"(",")",";",["T_WHITESPACE","\n\n  ",260],["T_FOREACH","foreach",262],["T_WHITESPACE"," ",262],"(",["T_STRING","my_module_entity_additions",262],"(",["T_VARIABLE","$entity_type",262],",",["T_WHITESPACE"," ",262],["T_VARIABLE","$bundle",262],",",["T_WHITESPACE"," ",262],["T_VARIABLE","$context",262],",",["T_WHITESPACE"," ",262],["T_VARIABLE","$context_mode",262],")",["T_WHITESPACE"," ",262],["T_AS","as",262],["T_WHITESPACE"," ",262],["T_VARIABLE","$addition",262],")",["T_WHITESPACE"," ",262],"{",["T_WHITESPACE","\n    ",262],["T_VARIABLE","$weights",263],"[","]",["T_WHITESPACE"," ",263],"=",["T_WHITESPACE"," ",263],["T_VARIABLE","$addition",263],"[",["T_CONSTANT_ENCAPSED_STRING","'weight'",263],"]",";",["T_WHITESPACE","\n  ",263],"}",["T_WHITESPACE","\n\n  ",264],["T_RETURN","return",266],["T_WHITESPACE"," ",266],["T_VARIABLE","$weights",266],["T_WHITESPACE"," ",266],"?",["T_WHITESPACE"," ",266],["T_STRING","max",266],"(",["T_VARIABLE","$weights",266],")",["T_WHITESPACE"," ",266],":",["T_WHITESPACE"," ",266],["T_STRING","NULL",266],";",["T_WHITESPACE","\n",266],"}",["T_WHITESPACE","\n\n",267],["T_DOC_COMMENT","\/**\n * @addtogroup field_purge\n * @{\n *\/",269],["T_WHITESPACE","\n\n",272],["T_DOC_COMMENT","\/**\n * Acts when a field storage definition is being purged.\n *\n * In field_purge_field_storage(), after the storage definition has been removed\n * from the system, the entity storage has purged stored field data, and the\n * field definitions cache has been cleared, this hook is invoked on all modules\n * to allow them to respond to the field storage being purged.\n *\n * @param $field_storage \\Drupal\\field\\Entity\\FieldStorageConfig\n *   The field storage being purged.\n *\/",274],["T_WHITESPACE","\n",284],["T_FUNCTION","function",285],["T_WHITESPACE"," ",285],["T_STRING","hook_field_purge_field_storage",285],"(",["T_NS_SEPARATOR","\\",285],["T_STRING","Drupal",285],["T_NS_SEPARATOR","\\",285],["T_STRING","field",285],["T_NS_SEPARATOR","\\",285],["T_STRING","Entity",285],["T_NS_SEPARATOR","\\",285],["T_STRING","FieldStorageConfig",285],["T_WHITESPACE"," ",285],["T_VARIABLE","$field_storage",285],")",["T_WHITESPACE"," ",285],"{",["T_WHITESPACE","\n  ",285],["T_STRING","db_delete",286],"(",["T_CONSTANT_ENCAPSED_STRING","'my_module_field_storage_info'",286],")",["T_WHITESPACE","\n    ",286],["T_OBJECT_OPERATOR","->",287],["T_STRING","condition",287],"(",["T_CONSTANT_ENCAPSED_STRING","'uuid'",287],",",["T_WHITESPACE"," ",287],["T_VARIABLE","$field_storage",287],["T_OBJECT_OPERATOR","->",287],["T_STRING","uuid",287],"(",")",")",["T_WHITESPACE","\n    ",287],["T_OBJECT_OPERATOR","->",288],["T_STRING","execute",288],"(",")",";",["T_WHITESPACE","\n",288],"}",["T_WHITESPACE","\n\n",289],["T_DOC_COMMENT","\/**\n * Acts when a field is being purged.\n *\n * In field_purge_field(), after the field definition has been removed\n * from the system, the entity storage has purged stored field data, and the\n * field info cache has been cleared, this hook is invoked on all modules to\n * allow them to respond to the field being purged.\n *\n * @param $field\n *   The field being purged.\n *\/",291],["T_WHITESPACE","\n",301],["T_FUNCTION","function",302],["T_WHITESPACE"," ",302],["T_STRING","hook_field_purge_field",302],"(",["T_NS_SEPARATOR","\\",302],["T_STRING","Drupal",302],["T_NS_SEPARATOR","\\",302],["T_STRING","field",302],["T_NS_SEPARATOR","\\",302],["T_STRING","Entity",302],["T_NS_SEPARATOR","\\",302],["T_STRING","FieldConfig",302],["T_WHITESPACE"," ",302],["T_VARIABLE","$field",302],")",["T_WHITESPACE"," ",302],"{",["T_WHITESPACE","\n  ",302],["T_STRING","db_delete",303],"(",["T_CONSTANT_ENCAPSED_STRING","'my_module_field_info'",303],")",["T_WHITESPACE","\n    ",303],["T_OBJECT_OPERATOR","->",304],["T_STRING","condition",304],"(",["T_CONSTANT_ENCAPSED_STRING","'id'",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$field",304],["T_OBJECT_OPERATOR","->",304],["T_STRING","id",304],"(",")",")",["T_WHITESPACE","\n    ",304],["T_OBJECT_OPERATOR","->",305],["T_STRING","execute",305],"(",")",";",["T_WHITESPACE","\n",305],"}",["T_WHITESPACE","\n\n",306],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup field_purge\".\n *\/",308],["T_WHITESPACE","\n\n",310],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",312],["T_WHITESPACE","\n",314]]