[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","taxonomy",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ContentEntityStorageInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines an interface for taxonomy_term entity storage classes.\n *\/",8],["T_WHITESPACE","\n",10],["T_INTERFACE","interface",11],["T_WHITESPACE"," ",11],["T_STRING","TermStorageInterface",11],["T_WHITESPACE"," ",11],["T_EXTENDS","extends",11],["T_WHITESPACE"," ",11],["T_STRING","ContentEntityStorageInterface",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * Removed reference to terms from term_hierarchy.\n   *\n   * @param array $tids\n   *   Array of terms that need to be removed from hierarchy.\n   *\/",13],["T_WHITESPACE","\n  ",18],["T_PUBLIC","public",19],["T_WHITESPACE"," ",19],["T_FUNCTION","function",19],["T_WHITESPACE"," ",19],["T_STRING","deleteTermHierarchy",19],"(",["T_VARIABLE","$tids",19],")",";",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Updates terms hierarchy information with the hierarchy trail of it.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityInterface $term\n   *   Term entity that needs to be added to term hierarchy information.\n   *\/",21],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","updateTermHierarchy",27],"(",["T_STRING","EntityInterface",27],["T_WHITESPACE"," ",27],["T_VARIABLE","$term",27],")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Finds all parents of a given term ID.\n   *\n   * @param int $tid\n   *   Term ID to retrieve parents for.\n   *\n   * @return \\Drupal\\taxonomy\\TermInterface[]\n   *   An array of term objects which are the parents of the term $tid.\n   *\/",29],["T_WHITESPACE","\n  ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","loadParents",38],"(",["T_VARIABLE","$tid",38],")",";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * Finds all ancestors of a given term ID.\n   *\n   * @param int $tid\n   *   Term ID to retrieve ancestors for.\n   *\n   * @return \\Drupal\\taxonomy\\TermInterface[]\n   *   An array of term objects which are the ancestors of the term $tid.\n   *\/",40],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","loadAllParents",49],"(",["T_VARIABLE","$tid",49],")",";",["T_WHITESPACE","\n\n  ",49],["T_DOC_COMMENT","\/**\n   * Finds all children of a term ID.\n   *\n   * @param int $tid\n   *   Term ID to retrieve parents for.\n   * @param string $vid\n   *   An optional vocabulary ID to restrict the child search.\n   *\n   * @return \\Drupal\\taxonomy\\TermInterface[]\n   *   An array of term objects that are the children of the term $tid.\n   *\/",51],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","loadChildren",62],"(",["T_VARIABLE","$tid",62],",",["T_WHITESPACE"," ",62],["T_VARIABLE","$vid",62],["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],["T_STRING","NULL",62],")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Finds all terms in a given vocabulary ID.\n   *\n   * @param string $vid\n   *   Vocabulary ID to retrieve terms for.\n   * @param int $parent\n   *   The term ID under which to generate the tree. If 0, generate the tree\n   *   for the entire vocabulary.\n   * @param int $max_depth\n   *   The number of levels of the tree to return. Leave NULL to return all\n   *   levels.\n   * @param bool $load_entities\n   *   If TRUE, a full entity load will occur on the term objects. Otherwise\n   *   they are partial objects queried directly from the {taxonomy_term_data}\n   *   table to save execution time and memory consumption when listing large\n   *   numbers of terms. Defaults to FALSE.\n   *\n   * @return object[]|\\Drupal\\taxonomy\\TermInterface[]\n   *   An array of term objects that are the children of the vocabulary $vid.\n   *\/",64],["T_WHITESPACE","\n  ",83],["T_PUBLIC","public",84],["T_WHITESPACE"," ",84],["T_FUNCTION","function",84],["T_WHITESPACE"," ",84],["T_STRING","loadTree",84],"(",["T_VARIABLE","$vid",84],",",["T_WHITESPACE"," ",84],["T_VARIABLE","$parent",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_LNUMBER","0",84],",",["T_WHITESPACE"," ",84],["T_VARIABLE","$max_depth",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_STRING","NULL",84],",",["T_WHITESPACE"," ",84],["T_VARIABLE","$load_entities",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_STRING","FALSE",84],")",";",["T_WHITESPACE","\n\n  ",84],["T_DOC_COMMENT","\/**\n   * Count the number of nodes in a given vocabulary ID.\n   *\n   * @param string $vid\n   *   Vocabulary ID to retrieve terms for.\n   *\n   * @return int\n   *   A count of the nodes in a given vocabulary ID.\n   *\/",86],["T_WHITESPACE","\n  ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","nodeCount",95],"(",["T_VARIABLE","$vid",95],")",";",["T_WHITESPACE","\n\n  ",95],["T_DOC_COMMENT","\/**\n   * Reset the weights for a given vocabulary ID.\n   *\n   * @param string $vid\n   *   Vocabulary ID to retrieve terms for.\n   *\/",97],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","resetWeights",103],"(",["T_VARIABLE","$vid",103],")",";",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Returns all terms used to tag some given nodes.\n   *\n   * @param array $nids\n   *   Node IDs to retrieve terms for.\n   * @param array $vocabs\n   *   (optional) A vocabularies array to restrict the term search. Defaults to\n   *   empty array.\n   * @param string $langcode\n   *   (optional) A language code to restrict the term search. Defaults to NULL.\n   *\n   * @return array\n   *   An array of nids and the term entities they were tagged with.\n   *\/",105],["T_WHITESPACE","\n  ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","getNodeTerms",119],"(",["T_ARRAY","array",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$nids",119],",",["T_WHITESPACE"," ",119],["T_ARRAY","array",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$vocabs",119],["T_WHITESPACE"," ",119],"=",["T_WHITESPACE"," ",119],["T_ARRAY","array",119],"(",")",",",["T_WHITESPACE"," ",119],["T_VARIABLE","$langcode",119],["T_WHITESPACE"," ",119],"=",["T_WHITESPACE"," ",119],["T_STRING","NULL",119],")",";",["T_WHITESPACE","\n\n",119],"}",["T_WHITESPACE","\n",121]]