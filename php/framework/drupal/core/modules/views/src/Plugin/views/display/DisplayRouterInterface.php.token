[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","views",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","views",3],["T_NS_SEPARATOR","\\",3],["T_STRING","display",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Routing",5],["T_NS_SEPARATOR","\\",5],["T_STRING","RouteCollection",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines an interface for displays that can collect routes.\n *\n * In addition to implementing the interface, specify 'uses_routes' in the\n * plugin definition.\n *\/",7],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","DisplayRouterInterface",13],["T_WHITESPACE"," ",13],["T_EXTENDS","extends",13],["T_WHITESPACE"," ",13],["T_STRING","DisplayPluginInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Adds the route entry of a view to the collection.\n   *\n   * @param \\Symfony\\Component\\Routing\\RouteCollection $collection\n   *   A collection of routes that should be registered for this resource.\n   *\/",15],["T_WHITESPACE","\n  ",20],["T_PUBLIC","public",21],["T_WHITESPACE"," ",21],["T_FUNCTION","function",21],["T_WHITESPACE"," ",21],["T_STRING","collectRoutes",21],"(",["T_STRING","RouteCollection",21],["T_WHITESPACE"," ",21],["T_VARIABLE","$collection",21],")",";",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Alters a collection of routes and replaces definitions to the view.\n   *\n   * Most of the collections won't have the needed route, so by the return value\n   * the method can specify to break the search.\n   *\n   * @param \\Symfony\\Component\\Routing\\RouteCollection $collection\n   *\n   * @return array\n   *   Returns a list of \"$view_id.$display_id\" elements which got overridden.\n   *\/",23],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","alterRoutes",34],"(",["T_STRING","RouteCollection",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$collection",34],")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Generates a URL to this display.\n   *\n   * @return \\Drupal\\Core\\Url\n   *   A URL object for the display.\n   *\/",36],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","getUrlInfo",42],"(",")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Returns the route name for the display.\n   *\n   * The default route name for a display is views.$view_id.$display_id. Some\n   * displays may override existing routes; in these cases, the route that is\n   * overridden is returned instead.\n   *\n   * @return string\n   *   The name of the route\n   *\n   * @see \\Drupal\\views\\Plugin\\views\\display\\DisplayRouterInterface::alterRoutes()\n   * @see \\Drupal\\views\\Plugin\\views\\display\\DisplayRouterInterface::getAlteredRouteNames()\n   *\/",44],["T_WHITESPACE","\n  ",56],["T_PUBLIC","public",57],["T_WHITESPACE"," ",57],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","getRouteName",57],"(",")",";",["T_WHITESPACE","\n\n  ",57],["T_DOC_COMMENT","\/**\n   * Returns the list of routes overridden by Views.\n   *\n   * @return string[]\n   *   An array of overridden route names. The keys are in the form\n   *   view_id.display_id and the values are the route names.\n   *\n   * @see \\Drupal\\views\\Plugin\\views\\display\\DisplayRouterInterface::alterRoutes()\n   *\/",59],["T_WHITESPACE","\n  ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","getAlteredRouteNames",68],"(",")",";",["T_WHITESPACE","\n\n",68],"}",["T_WHITESPACE","\n",70]]