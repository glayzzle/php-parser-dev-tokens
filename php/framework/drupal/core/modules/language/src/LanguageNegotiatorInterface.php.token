[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","language",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Session",5],["T_NS_SEPARATOR","\\",5],["T_STRING","AccountInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Common interface for language negotiation services.\n *\n * The language negotiation API is based on two major concepts:\n * - Language types: types of translatable data (the types of data that a user\n *   can view or request).\n * - Language negotiation methods: responsible for determining which language to\n *   use to present a particular piece of data to the user.\n * Both language types and language negotiation methods are customizable.\n *\n * Drupal defines three built-in language types:\n * - Interface language: The page's main language, used to present translated\n *   user interface elements such as titles, labels, help text, and messages.\n * - Content language: The language used to present content that is available\n *   in more than one language.\n * - URL language: The language associated with URLs. When generating a URL,\n *   this value will be used for URL's as a default if no explicit preference is\n *   provided.\n * Modules can define additional language types through\n * hook_language_types_info(), and alter existing language type definitions\n * through hook_language_types_info_alter().\n *\n * Language types may be configurable or fixed. The language negotiation\n * methods associated with a configurable language type can be explicitly\n * set through the user interface. A fixed language type has predetermined\n * (module-defined) language negotiation settings and, thus, does not appear in\n * the configuration page. Here is a code snippet that makes the content\n * language (which by default inherits the interface language's values)\n * configurable:\n * @code\n * function mymodule_language_types_info_alter(&$language_types) {\n *   unset($language_types[LanguageInterface::TYPE_CONTENT]['fixed']);\n * }\n * @endcode\n *\n * The locked configuration property prevents one language type from being\n * switched from customized to not customized, and vice versa.\n * @see \\Drupal\\language\\LanguageNegotiator::updateConfiguration()\n *\n * Every language type can have a different set of language negotiation methods\n * assigned to it. Different language types often share the same language\n * negotiation settings, but they can have independent settings if needed. If\n * two language types are configured the same way, their language switcher\n * configuration will be functionally identical and the same settings will act\n * on both language types.\n *\n * Drupal defines the following built-in language negotiation methods:\n * - URL: Determine the language from the URL (path prefix or domain).\n * - Session: Determine the language from a request\/session parameter.\n * - User: Follow the user's language preference.\n * - User admin language: Identify admin language from the user preferences.\n * - Browser: Determine the language from the browser's language settings.\n * - Selected language: Use the default site language.\n * Language negotiation methods are simple plugin classes that implement a\n * particular logic to return a language code. For instance, the URL method\n * searches for a valid path prefix or domain name in the current request URL.\n * If a language negotiation method does not return a valid language code, the\n * next method associated with the language type (based on method weight) is\n * invoked.\n *\n * Modules can define additional language negotiation methods by simply provide\n * the related plugins, and alter existing methods through\n * hook_language_negotiation_info_alter(). Here is an example snippet that lets\n * path prefixes be ignored for administrative paths:\n * @code\n * function mymodule_language_negotiation_info_alter(&$negotiation_info) {\n *   \/\/ Replace the original plugin with our own implementation.\n *   $method_id = \\Drupal\\language\\Plugin\\LanguageNegotiation\\LanguageNegotiationUrl::METHOD_ID;\n *   $negotiation_info[$method_id]['class'] = 'Drupal\\my_module\\Plugin\\LanguageNegotiation\\MyLanguageNegotiationUrl';\n * }\n *\n * class MyLanguageNegotiationUrl extends LanguageNegotiationUrl {\n *   public function getCurrentLanguage(Request $request = NULL) {\n *     if ($request) {\n *       \/\/ Use the original URL language negotiation method to get a valid\n *       \/\/ language code.\n *       $langcode = parent::getCurrentLanguage($request);\n *\n *       \/\/ If we are on an administrative path, override with the default\n *       language.\n *       if ($request->query->has('q') && strtok($request->query->get('q'), '\/') == 'admin') {\n *         return $this->languageManager->getDefaultLanguage()->getId();\n *       }\n *       return $langcode;\n *     }\n *   }\n * }\n * ?>\n * @endcode\n *\n * For more information, see\n * @link https:\/\/www.drupal.org\/node\/1497272 Language Negotiation API @endlink\n *\/",7],["T_WHITESPACE","\n",99],["T_INTERFACE","interface",100],["T_WHITESPACE"," ",100],["T_STRING","LanguageNegotiatorInterface",100],["T_WHITESPACE"," ",100],"{",["T_WHITESPACE","\n\n  ",100],["T_DOC_COMMENT","\/**\n   * The language negotiation method id for the language negotiator itself.\n   *\/",102],["T_WHITESPACE","\n  ",104],["T_CONST","const",105],["T_WHITESPACE"," ",105],["T_STRING","METHOD_ID",105],["T_WHITESPACE"," ",105],"=",["T_WHITESPACE"," ",105],["T_CONSTANT_ENCAPSED_STRING","'language-default'",105],";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * Resets the negotiated languages and the method instances.\n   *\/",107],["T_WHITESPACE","\n  ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","reset",110],"(",")",";",["T_WHITESPACE","\n\n  ",110],["T_DOC_COMMENT","\/**\n   * Sets the current active user and resets all language types.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $current_user\n   *   The current active user.\n   *\/",112],["T_WHITESPACE","\n  ",117],["T_PUBLIC","public",118],["T_WHITESPACE"," ",118],["T_FUNCTION","function",118],["T_WHITESPACE"," ",118],["T_STRING","setCurrentUser",118],"(",["T_STRING","AccountInterface",118],["T_WHITESPACE"," ",118],["T_VARIABLE","$current_user",118],")",";",["T_WHITESPACE","\n\n  ",118],["T_DOC_COMMENT","\/**\n   * Initializes the specified language type.\n   *\n   * @param string $type\n   *   The language type to be initialized.\n   *\n   * @return \\Drupal\\Core\\Language\\LanguageInterface[]\n   *   Returns an array containing a single language keyed by the language\n   *   negotiation method ID used to determine the language of the specified\n   *   type. If negotiation is not possible the default language is returned.\n   *\/",120],["T_WHITESPACE","\n  ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","initializeType",131],"(",["T_VARIABLE","$type",131],")",";",["T_WHITESPACE","\n\n  ",131],["T_DOC_COMMENT","\/**\n   * Returns the language negotiation methods enabled for a language type.\n   *\n   * @param string $type\n   *   (optional) The language type. If no type is specified all the method\n   *   definitions are returned.\n   *\n   * @return array[]\n   *   An array of language negotiation method definitions keyed by method id.\n   *\/",133],["T_WHITESPACE","\n  ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","getNegotiationMethods",143],"(",["T_VARIABLE","$type",143],["T_WHITESPACE"," ",143],"=",["T_WHITESPACE"," ",143],["T_STRING","NULL",143],")",";",["T_WHITESPACE","\n\n  ",143],["T_DOC_COMMENT","\/**\n   * Returns an instance of the specified language negotiation method.\n   *\n   * @param string $method_id\n   *   The method identifier.\n   *\n   * @return \\Drupal\\language\\LanguageNegotiationMethodInterface\n   *\/",145],["T_WHITESPACE","\n  ",152],["T_PUBLIC","public",153],["T_WHITESPACE"," ",153],["T_FUNCTION","function",153],["T_WHITESPACE"," ",153],["T_STRING","getNegotiationMethodInstance",153],"(",["T_VARIABLE","$method_id",153],")",";",["T_WHITESPACE","\n\n  ",153],["T_DOC_COMMENT","\/**\n   * Returns the ID of the language type's primary language negotiation method.\n   *\n   * @param string $type\n   *   The language type.\n   *\n   * @return string\n   *   The identifier of the primary language negotiation method for the given\n   *   language type, or the default method if none exists.\n   *\/",155],["T_WHITESPACE","\n  ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","getPrimaryNegotiationMethod",165],"(",["T_VARIABLE","$type",165],")",";",["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Checks whether a language negotiation method is enabled for a language type.\n   *\n   * @param string $method_id\n   *   The language negotiation method ID.\n   * @param string $type\n   *   (optional) The language type. If none is passed, all the configurable\n   *   language types will be inspected.\n   *\n   * @return bool\n   *   TRUE if the method is enabled for at least one of the given language\n   *   types, or FALSE otherwise.\n   *\/",167],["T_WHITESPACE","\n  ",179],["T_PUBLIC","public",180],["T_WHITESPACE"," ",180],["T_FUNCTION","function",180],["T_WHITESPACE"," ",180],["T_STRING","isNegotiationMethodEnabled",180],"(",["T_VARIABLE","$method_id",180],",",["T_WHITESPACE"," ",180],["T_VARIABLE","$type",180],["T_WHITESPACE"," ",180],"=",["T_WHITESPACE"," ",180],["T_STRING","NULL",180],")",";",["T_WHITESPACE","\n\n  ",180],["T_DOC_COMMENT","\/**\n   * Saves a list of language negotiation methods for a language type.\n   *\n   * @param string $type\n   *   The language type.\n   * @param int[] $enabled_methods\n   *   An array of language negotiation method weights keyed by method ID.\n   *\/",182],["T_WHITESPACE","\n  ",189],["T_FUNCTION","function",190],["T_WHITESPACE"," ",190],["T_STRING","saveConfiguration",190],"(",["T_VARIABLE","$type",190],",",["T_WHITESPACE"," ",190],["T_VARIABLE","$enabled_methods",190],")",";",["T_WHITESPACE","\n\n  ",190],["T_DOC_COMMENT","\/**\n   * Resave the configuration to purge missing negotiation methods.\n   *\/",192],["T_WHITESPACE","\n  ",194],["T_FUNCTION","function",195],["T_WHITESPACE"," ",195],["T_STRING","purgeConfiguration",195],"(",")",";",["T_WHITESPACE","\n\n  ",195],["T_DOC_COMMENT","\/**\n   * Updates the configuration based on the given language types.\n   *\n   * Stores the list of the language types along with information about their\n   * configurable state. Stores the default settings if the language type is\n   * not configurable.\n   *\n   * @param string[] $types\n   *   An array of configurable language types.\n   *\/",197],["T_WHITESPACE","\n  ",206],["T_FUNCTION","function",207],["T_WHITESPACE"," ",207],["T_STRING","updateConfiguration",207],"(",["T_ARRAY","array",207],["T_WHITESPACE"," ",207],["T_VARIABLE","$types",207],")",";",["T_WHITESPACE","\n\n",207],"}",["T_WHITESPACE","\n",209]]