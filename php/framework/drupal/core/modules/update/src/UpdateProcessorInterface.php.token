[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","update",3],";",["T_WHITESPACE","\n\n\n",3],["T_DOC_COMMENT","\/**\n * Processor of project update information.\n *\/",6],["T_WHITESPACE","\n",8],["T_INTERFACE","interface",9],["T_WHITESPACE"," ",9],["T_STRING","UpdateProcessorInterface",9],["T_WHITESPACE"," ",9],"{",["T_WHITESPACE","\n\n  ",9],["T_DOC_COMMENT","\/**\n   * Claims an item in the update fetch queue for processing.\n   *\n   * @return bool|\\stdClass\n   *   On success we return an item object. If the queue is unable to claim an\n   *   item it returns false.\n   *\n   * @see \\Drupal\\Core\\Queue\\QueueInterface::claimItem()\n   *\/",11],["T_WHITESPACE","\n  ",19],["T_PUBLIC","public",20],["T_WHITESPACE"," ",20],["T_FUNCTION","function",20],["T_WHITESPACE"," ",20],["T_STRING","claimQueueItem",20],"(",")",";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * Attempts to drain the queue of tasks for release history data to fetch.\n   *\/",22],["T_WHITESPACE","\n  ",24],["T_PUBLIC","public",25],["T_WHITESPACE"," ",25],["T_FUNCTION","function",25],["T_WHITESPACE"," ",25],["T_STRING","fetchData",25],"(",")",";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Adds a task to the queue for fetching release history data for a project.\n   *\n   * We only create a new fetch task if there's no task already in the queue for\n   * this particular project (based on 'update_fetch_task' key-value\n   * collection).\n   *\n   * @param array $project\n   *   Associative array of information about a project as created by\n   *   \\Drupal\\Update\\UpdateManager::getProjects(), including keys such as\n   *   'name' (short name), and the 'info' array with data from a .info.yml\n   *   file for the project.\n   *\n   * @see \\Drupal\\update\\UpdateManager::getProjects()\n   * @see update_get_available()\n   * @see \\Drupal\\update\\UpdateManager::refreshUpdateData()\n   * @see \\Drupal\\update\\UpdateProcessor::fetchData()\n   * @see \\Drupal\\update\\UpdateProcessor::processFetchTask()\n   *\/",27],["T_WHITESPACE","\n  ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","createFetchTask",46],"(",["T_VARIABLE","$project",46],")",";",["T_WHITESPACE","\n\n  ",46],["T_DOC_COMMENT","\/**\n   * Processes a task to fetch available update data for a single project.\n   *\n   * Once the release history XML data is downloaded, it is parsed and saved in\n   * an entry just for that project.\n   *\n   * @param array $project\n   *   Associative array of information about the project to fetch data for.\n   *\n   * @return bool\n   *   TRUE if we fetched parsable XML, otherwise FALSE.\n   *\/",48],["T_WHITESPACE","\n  ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","processFetchTask",60],"(",["T_VARIABLE","$project",60],")",";",["T_WHITESPACE","\n\n  ",60],["T_DOC_COMMENT","\/**\n   * Retrieves the number of items in the update fetch queue.\n   *\n   * @return int\n   *   An integer estimate of the number of items in the queue.\n   *\n   * @see \\Drupal\\Core\\Queue\\QueueInterface::numberOfItems()\n   *\/",62],["T_WHITESPACE","\n  ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","numberOfQueueItems",70],"(",")",";",["T_WHITESPACE","\n\n  ",70],["T_DOC_COMMENT","\/**\n   * Deletes a finished item from the update fetch queue.\n   *\n   * @param \\stdClass $item\n   *   The item returned by \\Drupal\\Core\\Queue\\QueueInterface::claimItem().\n   *\n   * @see \\Drupal\\Core\\Queue\\QueueInterface::deleteItem()\n   *\/",72],["T_WHITESPACE","\n  ",79],["T_PUBLIC","public",80],["T_WHITESPACE"," ",80],["T_FUNCTION","function",80],["T_WHITESPACE"," ",80],["T_STRING","deleteQueueItem",80],"(",["T_VARIABLE","$item",80],")",";",["T_WHITESPACE","\n\n",80],"}",["T_WHITESPACE","\n",82]]