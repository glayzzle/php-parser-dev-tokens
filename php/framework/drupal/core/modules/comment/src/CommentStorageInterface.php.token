[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","comment",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ContentEntityStorageInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Entity",7],["T_NS_SEPARATOR","\\",7],["T_STRING","FieldableEntityInterface",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Defines an interface for comment entity storage classes.\n *\/",9],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","CommentStorageInterface",12],["T_WHITESPACE"," ",12],["T_EXTENDS","extends",12],["T_WHITESPACE"," ",12],["T_STRING","ContentEntityStorageInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Gets the maximum encoded thread value for the top level comments.\n   *\n   * @param \\Drupal\\comment\\CommentInterface $comment\n   *   A comment entity.\n   *\n   * @return string\n   *   The maximum encoded thread value among the top level comments of the\n   *   node $comment belongs to.\n   *\/",14],["T_WHITESPACE","\n  ",23],["T_PUBLIC","public",24],["T_WHITESPACE"," ",24],["T_FUNCTION","function",24],["T_WHITESPACE"," ",24],["T_STRING","getMaxThread",24],"(",["T_STRING","CommentInterface",24],["T_WHITESPACE"," ",24],["T_VARIABLE","$comment",24],")",";",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Gets the maximum encoded thread value for the children of this comment.\n   *\n   * @param \\Drupal\\comment\\CommentInterface $comment\n   *   A comment entity.\n   *\n   * @return string\n   *   The maximum encoded thread value among all replies of $comment.\n   *\/",26],["T_WHITESPACE","\n  ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","getMaxThreadPerThread",35],"(",["T_STRING","CommentInterface",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$comment",35],")",";",["T_WHITESPACE","\n\n  ",35],["T_DOC_COMMENT","\/**\n   * Calculates the page number for the first new comment.\n   *\n   * @param int $total_comments\n   *   The total number of comments that the entity has.\n   * @param int $new_comments\n   *   The number of new comments that the entity has.\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity to which the comments belong.\n   * @param string $field_name\n   *   The field name on the entity to which comments are attached.\n   *\n   * @return array|null\n   *   The page number where first new comment appears. (First page returns 0.)\n   *\/",37],["T_WHITESPACE","\n  ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","getNewCommentPageNumber",52],"(",["T_VARIABLE","$total_comments",52],",",["T_WHITESPACE"," ",52],["T_VARIABLE","$new_comments",52],",",["T_WHITESPACE"," ",52],["T_STRING","FieldableEntityInterface",52],["T_WHITESPACE"," ",52],["T_VARIABLE","$entity",52],",",["T_WHITESPACE"," ",52],["T_VARIABLE","$field_name",52],")",";",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * Gets the display ordinal or page number for a comment.\n   *\n   * @param \\Drupal\\comment\\CommentInterface $comment\n   *   The comment to use as a reference point.\n   * @param int $comment_mode\n   *   The comment display mode: CommentManagerInterface::COMMENT_MODE_FLAT or\n   *   CommentManagerInterface::COMMENT_MODE_THREADED.\n   * @param int $divisor\n   *   Defaults to 1, which returns the display ordinal for a comment. If the\n   *   number of comments per page is provided, the returned value will be the\n   *   page number. (The return value will be divided by $divisor.)\n   *\n   * @return int\n   *   The display ordinal or page number for the comment. It is 0-based, so\n   *   will represent the number of items before the given comment\/page.\n   *\/",54],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","getDisplayOrdinal",71],"(",["T_STRING","CommentInterface",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$comment",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$comment_mode",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$divisor",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_LNUMBER","1",71],")",";",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Gets the comment ids of the passed comment entities' children.\n   *\n   * @param \\Drupal\\comment\\CommentInterface[] $comments\n   *   An array of comment entities keyed by their ids.\n   * @return array\n   *   The entity ids of the passed comment entities' children as an array.\n   *\/",73],["T_WHITESPACE","\n  ",80],["T_PUBLIC","public",81],["T_WHITESPACE"," ",81],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","getChildCids",81],"(",["T_ARRAY","array",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$comments",81],")",";",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Retrieves comments for a thread, sorted in an order suitable for display.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityInterface $entity\n   *   The entity whose comment(s) needs rendering.\n   * @param string $field_name\n   *   The field_name whose comment(s) needs rendering.\n   * @param int $mode\n   *   The comment display mode: CommentManagerInterface::COMMENT_MODE_FLAT or\n   *   CommentManagerInterface::COMMENT_MODE_THREADED.\n   * @param int $comments_per_page\n   *   (optional) The amount of comments to display per page.\n   *   Defaults to 0, which means show all comments.\n   * @param int $pager_id\n   *   (optional) Pager id to use in case of multiple pagers on the one page.\n   *   Defaults to 0; is only used when $comments_per_page is greater than zero.\n   *\n   * @return array\n   *   Ordered array of comment objects, keyed by comment id.\n   *\/",83],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","loadThread",103],"(",["T_STRING","EntityInterface",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$entity",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$field_name",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$mode",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$comments_per_page",103],["T_WHITESPACE"," ",103],"=",["T_WHITESPACE"," ",103],["T_LNUMBER","0",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$pager_id",103],["T_WHITESPACE"," ",103],"=",["T_WHITESPACE"," ",103],["T_LNUMBER","0",103],")",";",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Returns the number of unapproved comments.\n   *\n   * @return int\n   *   The number of unapproved comments.\n   *\/",105],["T_WHITESPACE","\n  ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","getUnapprovedCount",111],"(",")",";",["T_WHITESPACE","\n\n",111],"}",["T_WHITESPACE","\n",113]]