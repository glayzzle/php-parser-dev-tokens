[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","node",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Session",5],["T_NS_SEPARATOR","\\",5],["T_STRING","AccountInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides an interface for node access grant storage.\n *\n * @ingroup node_access\n *\/",7],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","NodeGrantDatabaseStorageInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Checks all grants for a given account.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   A user object representing the user for whom the operation is to be\n   *   performed.\n   *\n   * @return int.\n   *   Status of the access check.\n   *\/",14],["T_WHITESPACE","\n  ",23],["T_PUBLIC","public",24],["T_WHITESPACE"," ",24],["T_FUNCTION","function",24],["T_WHITESPACE"," ",24],["T_STRING","checkAll",24],"(",["T_STRING","AccountInterface",24],["T_WHITESPACE"," ",24],["T_VARIABLE","$account",24],")",";",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Alters a query when node access is required.\n   *\n   * @param mixed $query\n   *   Query that is being altered.\n   * @param array $tables\n   *   A list of tables that need to be part of the alter.\n   * @param string $op\n   *    The operation to be performed on the node. Possible values are:\n   *    - \"view\"\n   *    - \"update\"\n   *    - \"delete\"\n   *    - \"create\"\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   A user object representing the user for whom the operation is to be\n   *   performed.\n   * @param string $base_table\n   *   The base table of the query.\n   *\n   * @return int\n   *   Status of the access check.\n   *\/",26],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","alterQuery",48],"(",["T_VARIABLE","$query",48],",",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$tables",48],",",["T_WHITESPACE"," ",48],["T_VARIABLE","$op",48],",",["T_WHITESPACE"," ",48],["T_STRING","AccountInterface",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$account",48],",",["T_WHITESPACE"," ",48],["T_VARIABLE","$base_table",48],")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Writes a list of grants to the database, deleting previously saved ones.\n   *\n   * If a realm is provided, it will only delete grants from that realm, but\n   * it will always delete a grant from the 'all' realm. Modules that use\n   * node access can use this method when doing mass updates due to widespread\n   * permission changes.\n   *\n   * Note: Don't call this method directly from a contributed module. Call\n   * \\Drupal\\node\\NodeAccessControlHandlerInterface::acquireGrants() instead.\n   *\n   * @param \\Drupal\\node\\NodeInterface $node\n   *   The node whose grants are being written.\n   * @param array $grants\n   *   A list of grants to write. Each grant is an array that must contain the\n   *   following keys: realm, gid, grant_view, grant_update, grant_delete.\n   *   The realm is specified by a particular module; the gid is as well, and\n   *   is a module-defined id to define grant privileges. each grant_* field\n   *   is a boolean value.\n   * @param string $realm\n   *   (optional) If provided, read\/write grants for that realm only. Defaults to\n   *   NULL.\n   * @param bool $delete\n   *   (optional) If false, does not delete records. This is only for optimization\n   *   purposes, and assumes the caller has already performed a mass delete of\n   *   some form. Defaults to TRUE.\n   *\/",50],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","write",77],"(",["T_STRING","NodeInterface",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$node",77],",",["T_WHITESPACE"," ",77],["T_ARRAY","array",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$grants",77],",",["T_WHITESPACE"," ",77],["T_VARIABLE","$realm",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","NULL",77],",",["T_WHITESPACE"," ",77],["T_VARIABLE","$delete",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","TRUE",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Deletes all node access entries.\n   *\/",79],["T_WHITESPACE","\n  ",81],["T_PUBLIC","public",82],["T_WHITESPACE"," ",82],["T_FUNCTION","function",82],["T_WHITESPACE"," ",82],["T_STRING","delete",82],"(",")",";",["T_WHITESPACE","\n\n  ",82],["T_DOC_COMMENT","\/**\n   * Creates the default node access grant entry.\n   *\/",84],["T_WHITESPACE","\n  ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","writeDefault",87],"(",")",";",["T_WHITESPACE","\n\n  ",87],["T_DOC_COMMENT","\/**\n   * Determines access to nodes based on node grants.\n   *\n   * @param \\Drupal\\node\\NodeInterface $node\n   *   The entity for which to check 'create' access.\n   * @param string $operation\n   *   The entity operation. Usually one of 'view', 'edit', 'create' or\n   *   'delete'.\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   The user for which to check access.\n   *\n   * @return \\Drupal\\Core\\Access\\AccessResultInterface\n   *   The access result, either allowed or neutral. If there are no node\n   *   grants, the default grant defined by writeDefault() is applied.\n   *\n   * @see hook_node_grants()\n   * @see hook_node_access_records()\n   * @see \\Drupal\\node\\NodeGrantDatabaseStorageInterface::writeDefault()\n   *\/",89],["T_WHITESPACE","\n  ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","access",108],"(",["T_STRING","NodeInterface",108],["T_WHITESPACE"," ",108],["T_VARIABLE","$node",108],",",["T_WHITESPACE"," ",108],["T_VARIABLE","$operation",108],",",["T_WHITESPACE"," ",108],["T_STRING","AccountInterface",108],["T_WHITESPACE"," ",108],["T_VARIABLE","$account",108],")",";",["T_WHITESPACE","\n\n  ",108],["T_DOC_COMMENT","\/**\n   * Counts available node grants.\n   *\n   * @return int\n   *   Returns the amount of node grants.\n   *\/",110],["T_WHITESPACE","\n  ",115],["T_PUBLIC","public",116],["T_WHITESPACE"," ",116],["T_FUNCTION","function",116],["T_WHITESPACE"," ",116],["T_STRING","count",116],"(",")",";",["T_WHITESPACE","\n\n  ",116],["T_DOC_COMMENT","\/**\n   * Remove the access records belonging to certain nodes.\n   *\n   * @param array $nids\n   *   A list of node IDs. The grant records belonging to these nodes will be\n   *   deleted.\n   *\/",118],["T_WHITESPACE","\n  ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","deleteNodeRecords",125],"(",["T_ARRAY","array",125],["T_WHITESPACE"," ",125],["T_VARIABLE","$nids",125],")",";",["T_WHITESPACE","\n\n",125],"}",["T_WHITESPACE","\n",127]]