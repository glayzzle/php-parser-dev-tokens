[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","book",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Form",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FormStateInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Session",6],["T_NS_SEPARATOR","\\",6],["T_STRING","AccountInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","node",7],["T_NS_SEPARATOR","\\",7],["T_STRING","NodeInterface",7],";",["T_WHITESPACE","\n\n\n",7],["T_DOC_COMMENT","\/**\n * Provides an interface defining a book manager.\n *\/",10],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","BookManagerInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Gets the data structure representing a named menu tree.\n   *\n   * Since this can be the full tree including hidden items, the data returned\n   * may be used for generating an an admin interface or a select.\n   *\n   * Note: based on menu_tree_all_data().\n   *\n   * @param int $bid\n   *   The Book ID to find links for.\n   * @param array|null $link\n   *   (optional) A fully loaded menu link, or NULL. If a link is supplied, only\n   *   the path to root will be included in the returned tree - as if this link\n   *   represented the current page in a visible menu.\n   * @param int|null $max_depth\n   *   (optional) Maximum depth of links to retrieve. Typically useful if only\n   *   one or two levels of a sub tree are needed in conjunction with a non-NULL\n   *   $link, in which case $max_depth should be greater than $link['depth'].\n   *\n   * @return array\n   *   An tree of menu links in an array, in the order they should be rendered.\n   *\/",15],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","bookTreeAllData",37],"(",["T_VARIABLE","$bid",37],",",["T_WHITESPACE"," ",37],["T_VARIABLE","$link",37],["T_WHITESPACE"," ",37],"=",["T_WHITESPACE"," ",37],["T_STRING","NULL",37],",",["T_WHITESPACE"," ",37],["T_VARIABLE","$max_depth",37],["T_WHITESPACE"," ",37],"=",["T_WHITESPACE"," ",37],["T_STRING","NULL",37],")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Gets the active trail IDs for the specified book at the provided path.\n   *\n   * @param string $bid\n   *   The Book ID to find links for.\n   * @param array $link\n   *   A fully loaded menu link.\n   *\n   * @return array\n   *   An array containing the active trail: a list of mlids.\n   *\/",39],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","getActiveTrailIds",50],"(",["T_VARIABLE","$bid",50],",",["T_WHITESPACE"," ",50],["T_VARIABLE","$link",50],")",";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * Loads a single book entry.\n   *\n   * The entries of a book entry is documented in\n   * \\Drupal\\book\\BookOutlineStorageInterface::loadMultiple.\n   *\n   * If $translate is TRUE, it also checks access ('access' key) and\n   * loads the title from the node itself.\n   *\n   * @param int $nid\n   *   The node ID of the book.\n   * @param bool $translate\n   *   If TRUE, set access, title, and other elements.\n   *\n   * @return array\n   *   The book data of that node.\n   *\n   * @see \\Drupal\\book\\BookOutlineStorageInterface::loadMultiple\n   *\/",52],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","loadBookLink",71],"(",["T_VARIABLE","$nid",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$translate",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","TRUE",71],")",";",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Loads multiple book entries.\n   *\n   * The entries of a book entry is documented in\n   * \\Drupal\\book\\BookOutlineStorageInterface::loadMultiple.\n   *\n   * If $translate is TRUE, it also checks access ('access' key) and\n   * loads the title from the node itself.\n   *\n   * @param int[] $nids\n   *   An array of nids to load.\n   * @param bool $translate\n   *   If TRUE, set access, title, and other elements.\n   *\n   * @return array[]\n   *   The book data of each node keyed by NID.\n   *\n   * @see \\Drupal\\book\\BookOutlineStorageInterface::loadMultiple\n   *\/",73],["T_WHITESPACE","\n  ",91],["T_PUBLIC","public",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","loadBookLinks",92],"(",["T_VARIABLE","$nids",92],",",["T_WHITESPACE"," ",92],["T_VARIABLE","$translate",92],["T_WHITESPACE"," ",92],"=",["T_WHITESPACE"," ",92],["T_STRING","TRUE",92],")",";",["T_WHITESPACE","\n\n  ",92],["T_DOC_COMMENT","\/**\n   * Returns an array of book pages in table of contents order.\n   *\n   * @param int $bid\n   *   The ID of the book whose pages are to be listed.\n   * @param int $depth_limit\n   *   Any link deeper than this value will be excluded (along with its\n   *   children).\n   * @param array $exclude\n   *   (optional) An array of menu link ID values. Any link whose menu link ID\n   *   is in this array will be excluded (along with its children). Defaults to\n   *   an empty array.\n   *\n   * @return array\n   *   An array of (menu link ID, title) pairs for use as options for selecting\n   *   a book page.\n   *\/",94],["T_WHITESPACE","\n  ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","getTableOfContents",111],"(",["T_VARIABLE","$bid",111],",",["T_WHITESPACE"," ",111],["T_VARIABLE","$depth_limit",111],",",["T_WHITESPACE"," ",111],["T_ARRAY","array",111],["T_WHITESPACE"," ",111],["T_VARIABLE","$exclude",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_ARRAY","array",111],"(",")",")",";",["T_WHITESPACE","\n\n  ",111],["T_DOC_COMMENT","\/**\n   * Finds the depth limit for items in the parent select.\n   *\n   * @param array $book_link\n   *   A fully loaded menu link that is part of the book hierarchy.\n   *\n   * @return int\n   *   The depth limit for items in the parent select.\n   *\/",113],["T_WHITESPACE","\n  ",121],["T_PUBLIC","public",122],["T_WHITESPACE"," ",122],["T_FUNCTION","function",122],["T_WHITESPACE"," ",122],["T_STRING","getParentDepthLimit",122],"(",["T_ARRAY","array",122],["T_WHITESPACE"," ",122],["T_VARIABLE","$book_link",122],")",";",["T_WHITESPACE","\n\n  ",122],["T_DOC_COMMENT","\/**\n   * Collects node links from a given menu tree recursively.\n   *\n   * @param array $tree\n   *   The menu tree you wish to collect node links from.\n   * @param array $node_links\n   *   An array in which to store the collected node links.\n   *\/",124],["T_WHITESPACE","\n  ",131],["T_PUBLIC","public",132],["T_WHITESPACE"," ",132],["T_FUNCTION","function",132],["T_WHITESPACE"," ",132],["T_STRING","bookTreeCollectNodeLinks",132],"(","&",["T_VARIABLE","$tree",132],",",["T_WHITESPACE"," ",132],"&",["T_VARIABLE","$node_links",132],")",";",["T_WHITESPACE","\n\n  ",132],["T_DOC_COMMENT","\/**\n   * Provides book loading, access control and translation.\n   *\n   * Note: copied from _menu_link_translate() in menu.inc, but reduced to the\n   * minimal code that's used.\n   *\n   * @param array $link\n   *   A book link.\n   *\/",134],["T_WHITESPACE","\n  ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","bookLinkTranslate",143],"(","&",["T_VARIABLE","$link",143],")",";",["T_WHITESPACE","\n\n  ",143],["T_DOC_COMMENT","\/**\n   * Gets the book for a page and returns it as a linear array.\n   *\n   * @param array $book_link\n   *   A fully loaded book link that is part of the book hierarchy.\n   *\n   * @return array\n   *   A linear array of book links in the order that the links are shown in the\n   *   book, so the previous and next pages are the elements before and after the\n   *   element corresponding to the current node. The children of the current node\n   *   (if any) will come immediately after it in the array, and links will only\n   *   be fetched as deep as one level deeper than $book_link.\n   *\/",145],["T_WHITESPACE","\n  ",157],["T_PUBLIC","public",158],["T_WHITESPACE"," ",158],["T_FUNCTION","function",158],["T_WHITESPACE"," ",158],["T_STRING","bookTreeGetFlat",158],"(",["T_ARRAY","array",158],["T_WHITESPACE"," ",158],["T_VARIABLE","$book_link",158],")",";",["T_WHITESPACE","\n\n  ",158],["T_DOC_COMMENT","\/**\n   * Returns an array of all books.\n   *\n   * This list may be used for generating a list of all the books, or for\n   * building the options for a form select.\n   *\n   * @return array\n   *   An array of all books.\n   *\/",160],["T_WHITESPACE","\n  ",168],["T_PUBLIC","public",169],["T_WHITESPACE"," ",169],["T_FUNCTION","function",169],["T_WHITESPACE"," ",169],["T_STRING","getAllBooks",169],"(",")",";",["T_WHITESPACE","\n\n  ",169],["T_DOC_COMMENT","\/**\n   * Handles additions and updates to the book outline.\n   *\n   * This common helper function performs all additions and updates to the book\n   * outline through node addition, node editing, node deletion, or the outline\n   * tab.\n   *\n   * @param \\Drupal\\node\\NodeInterface $node\n   *   The node that is being saved, added, deleted, or moved.\n   *\n   * @return bool\n   *   TRUE if the book link was saved; FALSE otherwise.\n   *\/",171],["T_WHITESPACE","\n  ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","updateOutline",184],"(",["T_STRING","NodeInterface",184],["T_WHITESPACE"," ",184],["T_VARIABLE","$node",184],")",";",["T_WHITESPACE","\n\n  ",184],["T_DOC_COMMENT","\/**\n   * Saves a single book entry.\n   *\n   * @param array $link\n   *   The link data to save.\n   * @param bool $new\n   *   Is this a new book.\n   *\n   * @return array\n   *   The book data of that node.\n   *\/",186],["T_WHITESPACE","\n  ",196],["T_PUBLIC","public",197],["T_WHITESPACE"," ",197],["T_FUNCTION","function",197],["T_WHITESPACE"," ",197],["T_STRING","saveBookLink",197],"(",["T_ARRAY","array",197],["T_WHITESPACE"," ",197],["T_VARIABLE","$link",197],",",["T_WHITESPACE"," ",197],["T_VARIABLE","$new",197],")",";",["T_WHITESPACE","\n\n  ",197],["T_DOC_COMMENT","\/**\n   * Returns an array with default values for a book page's menu link.\n   *\n   * @param string|int $nid\n   *   The ID of the node whose menu link is being created.\n   *\n   * @return array\n   *   The default values for the menu link.\n   *\/",199],["T_WHITESPACE","\n  ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","getLinkDefaults",208],"(",["T_VARIABLE","$nid",208],")",";",["T_WHITESPACE","\n\n  ",208],["T_PUBLIC","public",210],["T_WHITESPACE"," ",210],["T_FUNCTION","function",210],["T_WHITESPACE"," ",210],["T_STRING","getBookParents",210],"(",["T_ARRAY","array",210],["T_WHITESPACE"," ",210],["T_VARIABLE","$item",210],",",["T_WHITESPACE"," ",210],["T_ARRAY","array",210],["T_WHITESPACE"," ",210],["T_VARIABLE","$parent",210],["T_WHITESPACE"," ",210],"=",["T_WHITESPACE"," ",210],["T_ARRAY","array",210],"(",")",")",";",["T_WHITESPACE","\n\n  ",210],["T_DOC_COMMENT","\/**\n   * Builds the common elements of the book form for the node and outline forms.\n   *\n   * @param array $form\n   *   An associative array containing the structure of the form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   * @param \\Drupal\\node\\NodeInterface $node\n   *   The node whose form is being viewed.\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   The account viewing the form.\n   * @param bool $collapsed\n   *   If TRUE, the fieldset starts out collapsed.\n   *\n   * @return array\n   *   The form structure, with the book elements added.\n   *\/",212],["T_WHITESPACE","\n  ",228],["T_PUBLIC","public",229],["T_WHITESPACE"," ",229],["T_FUNCTION","function",229],["T_WHITESPACE"," ",229],["T_STRING","addFormElements",229],"(",["T_ARRAY","array",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$form",229],",",["T_WHITESPACE"," ",229],["T_STRING","FormStateInterface",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$form_state",229],",",["T_WHITESPACE"," ",229],["T_STRING","NodeInterface",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$node",229],",",["T_WHITESPACE"," ",229],["T_STRING","AccountInterface",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$account",229],",",["T_WHITESPACE"," ",229],["T_VARIABLE","$collapsed",229],["T_WHITESPACE"," ",229],"=",["T_WHITESPACE"," ",229],["T_STRING","TRUE",229],")",";",["T_WHITESPACE","\n\n  ",229],["T_DOC_COMMENT","\/**\n   * Deletes node's entry from book table.\n   *\n   * @param int $nid\n   *   The nid to delete.\n   *\/",231],["T_WHITESPACE","\n  ",236],["T_PUBLIC","public",237],["T_WHITESPACE"," ",237],["T_FUNCTION","function",237],["T_WHITESPACE"," ",237],["T_STRING","deleteFromBook",237],"(",["T_VARIABLE","$nid",237],")",";",["T_WHITESPACE","\n\n  ",237],["T_DOC_COMMENT","\/**\n   * Returns a rendered menu tree.\n   *\n   * The menu item's LI element is given one of the following classes:\n   * - expanded: The menu item is showing its submenu.\n   * - collapsed: The menu item has a submenu which is not shown.\n   *\n   * @param array $tree\n   *   A data structure representing the tree as returned from buildBookOutlineData.\n   *\n   * @return array\n   *   A structured array to be rendered by drupal_render().\n   *\n   * @see \\Drupal\\Core\\Menu\\MenuLinkTree::build\n   *\/",239],["T_WHITESPACE","\n  ",253],["T_PUBLIC","public",254],["T_WHITESPACE"," ",254],["T_FUNCTION","function",254],["T_WHITESPACE"," ",254],["T_STRING","bookTreeOutput",254],"(",["T_ARRAY","array",254],["T_WHITESPACE"," ",254],["T_VARIABLE","$tree",254],")",";",["T_WHITESPACE","\n\n  ",254],["T_DOC_COMMENT","\/**\n   * Checks access and performs dynamic operations for each link in the tree.\n   *\n   * @param array $tree\n   *   The book tree you wish to operate on.\n   * @param array $node_links\n   *   A collection of node link references generated from $tree by\n   *   menu_tree_collect_node_links().\n   *\/",256],["T_WHITESPACE","\n  ",264],["T_PUBLIC","public",265],["T_WHITESPACE"," ",265],["T_FUNCTION","function",265],["T_WHITESPACE"," ",265],["T_STRING","bookTreeCheckAccess",265],"(","&",["T_VARIABLE","$tree",265],",",["T_WHITESPACE"," ",265],["T_VARIABLE","$node_links",265],["T_WHITESPACE"," ",265],"=",["T_WHITESPACE"," ",265],["T_ARRAY","array",265],"(",")",")",";",["T_WHITESPACE","\n\n  ",265],["T_DOC_COMMENT","\/**\n   * Gets the data representing a subtree of the book hierarchy.\n   *\n   * The root of the subtree will be the link passed as a parameter, so the\n   * returned tree will contain this item and all its descendants in the menu\n   * tree.\n   *\n   * @param array $link\n   *   A fully loaded book link.\n   *\n   * @return\n   *   A subtree of book links in an array, in the order they should be rendered.\n   *\/",267],["T_WHITESPACE","\n  ",279],["T_PUBLIC","public",280],["T_WHITESPACE"," ",280],["T_FUNCTION","function",280],["T_WHITESPACE"," ",280],["T_STRING","bookSubtreeData",280],"(",["T_VARIABLE","$link",280],")",";",["T_WHITESPACE","\n\n  ",280],["T_DOC_COMMENT","\/**\n   * Determines if a node can be removed from the book.\n   *\n   * A node can be removed from a book if it is actually in a book and it either\n   * is not a top-level page or is a top-level page with no children.\n   *\n   * @param \\Drupal\\node\\NodeInterface $node\n   *   The node to remove from the outline.\n   *\n   * @return bool\n   *   TRUE if a node can be removed from the book, FALSE otherwise.\n   *\/",282],["T_WHITESPACE","\n  ",293],["T_PUBLIC","public",294],["T_WHITESPACE"," ",294],["T_FUNCTION","function",294],["T_WHITESPACE"," ",294],["T_STRING","checkNodeIsRemovable",294],"(",["T_STRING","NodeInterface",294],["T_WHITESPACE"," ",294],["T_VARIABLE","$node",294],")",";",["T_WHITESPACE","\n\n",294],"}",["T_WHITESPACE","\n",296]]