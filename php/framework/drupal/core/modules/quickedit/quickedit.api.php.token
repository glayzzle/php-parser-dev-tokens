[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Hooks provided by the Edit module.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",8],["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * Allow modules to alter in-place editor plugin metadata.\n *\n * This hook is called after the in-place editor plugins have been discovered,\n * but before they are cached. Hence any alterations will be cached.\n *\n * @param array &$editors\n *   An array of metadata on existing in-place editors, as collected by the\n *   annotation discovery mechanism.\n *\n * @see \\Drupal\\quickedit\\Annotation\\InPlaceEditor\n * @see \\Drupal\\quickedit\\Plugin\\EditorManager\n *\/",13],["T_WHITESPACE","\n",25],["T_FUNCTION","function",26],["T_WHITESPACE"," ",26],["T_STRING","hook_quickedit_editor_alter",26],"(","&",["T_VARIABLE","$editors",26],")",["T_WHITESPACE"," ",26],"{",["T_WHITESPACE","\n  ",26],["T_COMMENT","\/\/ Cleanly override editor.module's in-place editor plugin.\n",27],["T_WHITESPACE","  ",28],["T_VARIABLE","$editors",28],"[",["T_CONSTANT_ENCAPSED_STRING","'editor'",28],"]","[",["T_CONSTANT_ENCAPSED_STRING","'class'",28],"]",["T_WHITESPACE"," ",28],"=",["T_WHITESPACE"," ",28],["T_CONSTANT_ENCAPSED_STRING","'Drupal\\advanced_editor\\Plugin\\quickedit\\editor\\AdvancedEditor'",28],";",["T_WHITESPACE","\n",28],"}",["T_WHITESPACE","\n\n",29],["T_DOC_COMMENT","\/**\n * Returns a renderable array for the value of a single field in an entity.\n *\n * To integrate with in-place field editing when a non-standard render pipeline\n * is used (FieldItemListInterface::view() is not sufficient to render back the\n * field following in-place editing in the exact way it was displayed\n * originally), implement this hook.\n *\n * Edit module integrates with HTML elements with data-edit-field-id attributes.\n * For example:\n *   data-edit-field-id=\"node\/1\/<field-name>\/und\/<module-name>-<custom-id>\"\n * After the editing is complete, this hook is invoked on the module with\n * the custom render pipeline identifier (last part of data-edit-field-id) to\n * re-render the field. Use the same logic used when rendering the field for\n * the original display.\n *\n * The implementation should take care of invoking the prepare_view steps. It\n * should also respect field access permissions.\n *\n * @param \\Drupal\\Core\\Entity\\EntityInterface $entity\n *   The entity containing the field to display.\n * @param string $field_name\n *   The name of the field to display.\n * @param string $view_mode_id\n *   View mode ID for the custom render pipeline this field view was destined\n *   for. This is not a regular view mode ID for the Entity\/Field API render\n *   pipeline and is provided by the renderer module instead. An example could\n *   be Views' render pipeline. In the example of Views, the view mode ID would\n *   probably contain the View's ID, display and the row index. Views would\n *   know the internal structure of this ID. The only structure imposed on this\n *   ID is that it contains dash separated values and the first value is the\n *   module name. Only that module's hook implementation will be invoked. Eg.\n *   'views-...-...'.\n * @param string $langcode\n *   (Optional) The language code the field values are to be shown in.\n *\n * @return\n *   A renderable array for the field value.\n *\n * @see \\Drupal\\Core\\Field\\FieldItemListInterface::view()\n *\/",31],["T_WHITESPACE","\n",71],["T_FUNCTION","function",72],["T_WHITESPACE"," ",72],["T_STRING","hook_quickedit_render_field",72],"(",["T_STRING","Drupal",72],["T_NS_SEPARATOR","\\",72],["T_STRING","Core",72],["T_NS_SEPARATOR","\\",72],["T_STRING","Entity",72],["T_NS_SEPARATOR","\\",72],["T_STRING","EntityInterface",72],["T_WHITESPACE"," ",72],["T_VARIABLE","$entity",72],",",["T_WHITESPACE"," ",72],["T_VARIABLE","$field_name",72],",",["T_WHITESPACE"," ",72],["T_VARIABLE","$view_mode_id",72],",",["T_WHITESPACE"," ",72],["T_VARIABLE","$langcode",72],")",["T_WHITESPACE"," ",72],"{",["T_WHITESPACE","\n  ",72],["T_RETURN","return",73],["T_WHITESPACE"," ",73],["T_ARRAY","array",73],"(",["T_WHITESPACE","\n    ",73],["T_CONSTANT_ENCAPSED_STRING","'#prefix'",74],["T_WHITESPACE"," ",74],["T_DOUBLE_ARROW","=>",74],["T_WHITESPACE"," ",74],["T_CONSTANT_ENCAPSED_STRING","'<div class=\"example-markup\">'",74],",",["T_WHITESPACE","\n    ",74],["T_CONSTANT_ENCAPSED_STRING","'field'",75],["T_WHITESPACE"," ",75],["T_DOUBLE_ARROW","=>",75],["T_WHITESPACE"," ",75],["T_VARIABLE","$entity",75],["T_OBJECT_OPERATOR","->",75],["T_STRING","getTranslation",75],"(",["T_VARIABLE","$langcode",75],")",["T_OBJECT_OPERATOR","->",75],["T_STRING","get",75],"(",["T_VARIABLE","$field_name",75],")",["T_OBJECT_OPERATOR","->",75],["T_STRING","view",75],"(",["T_VARIABLE","$view_mode_id",75],")",",",["T_WHITESPACE","\n    ",75],["T_CONSTANT_ENCAPSED_STRING","'#suffix'",76],["T_WHITESPACE"," ",76],["T_DOUBLE_ARROW","=>",76],["T_WHITESPACE"," ",76],["T_CONSTANT_ENCAPSED_STRING","'<\/div>'",76],",",["T_WHITESPACE","\n  ",76],")",";",["T_WHITESPACE","\n",77],"}",["T_WHITESPACE","\n\n",78],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",80],["T_WHITESPACE","\n",82]]