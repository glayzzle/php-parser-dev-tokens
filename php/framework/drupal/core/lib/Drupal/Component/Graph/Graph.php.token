[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Component",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Graph",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Directed acyclic graph manipulation.\n *\/",5],["T_WHITESPACE","\n",7],["T_CLASS","class",8],["T_WHITESPACE"," ",8],["T_STRING","Graph",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Holds the directed acyclic graph.\n   *\/",10],["T_WHITESPACE","\n  ",12],["T_PROTECTED","protected",13],["T_WHITESPACE"," ",13],["T_VARIABLE","$graph",13],";",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Instantiates the depth first search object.\n   *\n   * @param $graph\n   *   A three dimensional associated array, with the first keys being the names\n   *   of the vertices, these can be strings or numbers. The second key is\n   *   'edges' and the third one are again vertices, each such key representing\n   *   an edge. Values of array elements are copied over.\n   *\n   *   Example:\n   *   @code\n   *     $graph[1]['edges'][2] = 1;\n   *     $graph[2]['edges'][3] = 1;\n   *     $graph[2]['edges'][4] = 1;\n   *     $graph[3]['edges'][4] = 1;\n   *   @endcode\n   *\n   *   On return you will also have:\n   *   @code\n   *     $graph[1]['paths'][2] = 1;\n   *     $graph[1]['paths'][3] = 1;\n   *     $graph[2]['reverse_paths'][1] = 1;\n   *     $graph[3]['reverse_paths'][1] = 1;\n   *   @endcode\n   *\/",15],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","__construct",40],"(",["T_VARIABLE","$graph",40],")",["T_WHITESPACE"," ",40],"{",["T_WHITESPACE","\n    ",40],["T_VARIABLE","$this",41],["T_OBJECT_OPERATOR","->",41],["T_STRING","graph",41],["T_WHITESPACE"," ",41],"=",["T_WHITESPACE"," ",41],["T_VARIABLE","$graph",41],";",["T_WHITESPACE","\n  ",41],"}",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Performs a depth-first search and sort on the directed acyclic graph.\n   *\n   * @return\n   *   The given $graph with more secondary keys filled in:\n   *   - 'paths': Contains a list of vertices than can be reached on a path from\n   *     this vertex.\n   *   - 'reverse_paths': Contains a list of vertices that has a path from them\n   *     to this vertex.\n   *   - 'weight': If there is a path from a vertex to another then the weight of\n   *     the latter is higher.\n   *   - 'component': Vertices in the same component have the same component\n   *     identifier.\n   *\/",44],["T_WHITESPACE","\n  ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","searchAndSort",58],"(",")",["T_WHITESPACE"," ",58],"{",["T_WHITESPACE","\n    ",58],["T_VARIABLE","$state",59],["T_WHITESPACE"," ",59],"=",["T_WHITESPACE"," ",59],["T_ARRAY","array",59],"(",["T_WHITESPACE","\n      ",59],["T_COMMENT","\/\/ The order of last visit of the depth first search. This is the reverse\n",60],["T_WHITESPACE","      ",61],["T_COMMENT","\/\/ of the topological order if the graph is acyclic.\n",61],["T_WHITESPACE","      ",62],["T_CONSTANT_ENCAPSED_STRING","'last_visit_order'",62],["T_WHITESPACE"," ",62],["T_DOUBLE_ARROW","=>",62],["T_WHITESPACE"," ",62],["T_ARRAY","array",62],"(",")",",",["T_WHITESPACE","\n      ",62],["T_COMMENT","\/\/ The components of the graph.\n",63],["T_WHITESPACE","      ",64],["T_CONSTANT_ENCAPSED_STRING","'components'",64],["T_WHITESPACE"," ",64],["T_DOUBLE_ARROW","=>",64],["T_WHITESPACE"," ",64],["T_ARRAY","array",64],"(",")",",",["T_WHITESPACE","\n    ",64],")",";",["T_WHITESPACE","\n    ",65],["T_COMMENT","\/\/ Perform the actual search.\n",66],["T_WHITESPACE","    ",67],["T_FOREACH","foreach",67],["T_WHITESPACE"," ",67],"(",["T_VARIABLE","$this",67],["T_OBJECT_OPERATOR","->",67],["T_STRING","graph",67],["T_WHITESPACE"," ",67],["T_AS","as",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$start",67],["T_WHITESPACE"," ",67],["T_DOUBLE_ARROW","=>",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$data",67],")",["T_WHITESPACE"," ",67],"{",["T_WHITESPACE","\n      ",67],["T_VARIABLE","$this",68],["T_OBJECT_OPERATOR","->",68],["T_STRING","depthFirstSearch",68],"(",["T_VARIABLE","$state",68],",",["T_WHITESPACE"," ",68],["T_VARIABLE","$start",68],")",";",["T_WHITESPACE","\n    ",68],"}",["T_WHITESPACE","\n\n    ",69],["T_COMMENT","\/\/ We do such a numbering that every component starts with 0. This is useful\n",71],["T_WHITESPACE","    ",72],["T_COMMENT","\/\/ for module installs as we can install every 0 weighted module in one\n",72],["T_WHITESPACE","    ",73],["T_COMMENT","\/\/ request, and then every 1 weighted etc.\n",73],["T_WHITESPACE","    ",74],["T_VARIABLE","$component_weights",74],["T_WHITESPACE"," ",74],"=",["T_WHITESPACE"," ",74],["T_ARRAY","array",74],"(",")",";",["T_WHITESPACE","\n\n    ",74],["T_FOREACH","foreach",76],["T_WHITESPACE"," ",76],"(",["T_VARIABLE","$state",76],"[",["T_CONSTANT_ENCAPSED_STRING","'last_visit_order'",76],"]",["T_WHITESPACE"," ",76],["T_AS","as",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$vertex",76],")",["T_WHITESPACE"," ",76],"{",["T_WHITESPACE","\n      ",76],["T_VARIABLE","$component",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_VARIABLE","$this",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","graph",77],"[",["T_VARIABLE","$vertex",77],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",77],"]",";",["T_WHITESPACE","\n      ",77],["T_IF","if",78],["T_WHITESPACE"," ",78],"(","!",["T_ISSET","isset",78],"(",["T_VARIABLE","$component_weights",78],"[",["T_VARIABLE","$component",78],"]",")",")",["T_WHITESPACE"," ",78],"{",["T_WHITESPACE","\n        ",78],["T_VARIABLE","$component_weights",79],"[",["T_VARIABLE","$component",79],"]",["T_WHITESPACE"," ",79],"=",["T_WHITESPACE"," ",79],["T_LNUMBER","0",79],";",["T_WHITESPACE","\n      ",79],"}",["T_WHITESPACE","\n      ",80],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","graph",81],"[",["T_VARIABLE","$vertex",81],"]","[",["T_CONSTANT_ENCAPSED_STRING","'weight'",81],"]",["T_WHITESPACE"," ",81],"=",["T_WHITESPACE"," ",81],["T_VARIABLE","$component_weights",81],"[",["T_VARIABLE","$component",81],"]",["T_DEC","--",81],";",["T_WHITESPACE","\n    ",81],"}",["T_WHITESPACE","\n\n    ",82],["T_RETURN","return",84],["T_WHITESPACE"," ",84],["T_VARIABLE","$this",84],["T_OBJECT_OPERATOR","->",84],["T_STRING","graph",84],";",["T_WHITESPACE","\n  ",84],"}",["T_WHITESPACE","\n\n  ",85],["T_DOC_COMMENT","\/**\n   * Performs a depth-first search on a graph.\n   *\n   * @param $state\n   *   An associative array. The key 'last_visit_order' stores a list of the\n   *   vertices visited. The key components stores list of vertices belonging\n   *   to the same the component.\n   * @param $start\n   *   An arbitrary vertex where we started traversing the graph.\n   * @param $component\n   *   The component of the last vertex.\n   *\n   * @see \\Drupal\\Component\\Graph\\Graph::searchAndSort()\n   *\/",87],["T_WHITESPACE","\n  ",100],["T_PROTECTED","protected",101],["T_WHITESPACE"," ",101],["T_FUNCTION","function",101],["T_WHITESPACE"," ",101],["T_STRING","depthFirstSearch",101],"(","&",["T_VARIABLE","$state",101],",",["T_WHITESPACE"," ",101],["T_VARIABLE","$start",101],",",["T_WHITESPACE"," ",101],"&",["T_VARIABLE","$component",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_STRING","NULL",101],")",["T_WHITESPACE"," ",101],"{",["T_WHITESPACE","\n    ",101],["T_COMMENT","\/\/ Assign new component for each new vertex, i.e. when not called recursively.\n",102],["T_WHITESPACE","    ",103],["T_IF","if",103],["T_WHITESPACE"," ",103],"(","!",["T_ISSET","isset",103],"(",["T_VARIABLE","$component",103],")",")",["T_WHITESPACE"," ",103],"{",["T_WHITESPACE","\n      ",103],["T_VARIABLE","$component",104],["T_WHITESPACE"," ",104],"=",["T_WHITESPACE"," ",104],["T_VARIABLE","$start",104],";",["T_WHITESPACE","\n    ",104],"}",["T_WHITESPACE","\n    ",105],["T_COMMENT","\/\/ Nothing to do, if we already visited this vertex.\n",106],["T_WHITESPACE","    ",107],["T_IF","if",107],["T_WHITESPACE"," ",107],"(",["T_ISSET","isset",107],"(",["T_VARIABLE","$this",107],["T_OBJECT_OPERATOR","->",107],["T_STRING","graph",107],"[",["T_VARIABLE","$start",107],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",107],"]",")",")",["T_WHITESPACE"," ",107],"{",["T_WHITESPACE","\n      ",107],["T_RETURN","return",108],";",["T_WHITESPACE","\n    ",108],"}",["T_WHITESPACE","\n    ",109],["T_COMMENT","\/\/ Mark $start as visited.\n",110],["T_WHITESPACE","    ",111],["T_VARIABLE","$this",111],["T_OBJECT_OPERATOR","->",111],["T_STRING","graph",111],"[",["T_VARIABLE","$start",111],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",111],"]",["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_ARRAY","array",111],"(",")",";",["T_WHITESPACE","\n\n    ",111],["T_COMMENT","\/\/ Assign $start to the current component.\n",113],["T_WHITESPACE","    ",114],["T_VARIABLE","$this",114],["T_OBJECT_OPERATOR","->",114],["T_STRING","graph",114],"[",["T_VARIABLE","$start",114],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",114],"]",["T_WHITESPACE"," ",114],"=",["T_WHITESPACE"," ",114],["T_VARIABLE","$component",114],";",["T_WHITESPACE","\n    ",114],["T_VARIABLE","$state",115],"[",["T_CONSTANT_ENCAPSED_STRING","'components'",115],"]","[",["T_VARIABLE","$component",115],"]","[","]",["T_WHITESPACE"," ",115],"=",["T_WHITESPACE"," ",115],["T_VARIABLE","$start",115],";",["T_WHITESPACE","\n\n    ",115],["T_COMMENT","\/\/ Visit edges of $start.\n",117],["T_WHITESPACE","    ",118],["T_IF","if",118],["T_WHITESPACE"," ",118],"(",["T_ISSET","isset",118],"(",["T_VARIABLE","$this",118],["T_OBJECT_OPERATOR","->",118],["T_STRING","graph",118],"[",["T_VARIABLE","$start",118],"]","[",["T_CONSTANT_ENCAPSED_STRING","'edges'",118],"]",")",")",["T_WHITESPACE"," ",118],"{",["T_WHITESPACE","\n      ",118],["T_FOREACH","foreach",119],["T_WHITESPACE"," ",119],"(",["T_VARIABLE","$this",119],["T_OBJECT_OPERATOR","->",119],["T_STRING","graph",119],"[",["T_VARIABLE","$start",119],"]","[",["T_CONSTANT_ENCAPSED_STRING","'edges'",119],"]",["T_WHITESPACE"," ",119],["T_AS","as",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$end",119],["T_WHITESPACE"," ",119],["T_DOUBLE_ARROW","=>",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$v",119],")",["T_WHITESPACE"," ",119],"{",["T_WHITESPACE","\n        ",119],["T_COMMENT","\/\/ Mark that $start can reach $end.\n",120],["T_WHITESPACE","        ",121],["T_VARIABLE","$this",121],["T_OBJECT_OPERATOR","->",121],["T_STRING","graph",121],"[",["T_VARIABLE","$start",121],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",121],"]","[",["T_VARIABLE","$end",121],"]",["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_VARIABLE","$v",121],";",["T_WHITESPACE","\n\n        ",121],["T_IF","if",123],["T_WHITESPACE"," ",123],"(",["T_ISSET","isset",123],"(",["T_VARIABLE","$this",123],["T_OBJECT_OPERATOR","->",123],["T_STRING","graph",123],"[",["T_VARIABLE","$end",123],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",123],"]",")",["T_WHITESPACE"," ",123],["T_BOOLEAN_AND","&&",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$component",123],["T_WHITESPACE"," ",123],["T_IS_NOT_EQUAL","!=",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$this",123],["T_OBJECT_OPERATOR","->",123],["T_STRING","graph",123],"[",["T_VARIABLE","$end",123],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",123],"]",")",["T_WHITESPACE"," ",123],"{",["T_WHITESPACE","\n          ",123],["T_COMMENT","\/\/ This vertex already has a component, use that from now on and\n",124],["T_WHITESPACE","          ",125],["T_COMMENT","\/\/ reassign all the previously explored vertices.\n",125],["T_WHITESPACE","          ",126],["T_VARIABLE","$new_component",126],["T_WHITESPACE"," ",126],"=",["T_WHITESPACE"," ",126],["T_VARIABLE","$this",126],["T_OBJECT_OPERATOR","->",126],["T_STRING","graph",126],"[",["T_VARIABLE","$end",126],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",126],"]",";",["T_WHITESPACE","\n          ",126],["T_FOREACH","foreach",127],["T_WHITESPACE"," ",127],"(",["T_VARIABLE","$state",127],"[",["T_CONSTANT_ENCAPSED_STRING","'components'",127],"]","[",["T_VARIABLE","$component",127],"]",["T_WHITESPACE"," ",127],["T_AS","as",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$vertex",127],")",["T_WHITESPACE"," ",127],"{",["T_WHITESPACE","\n            ",127],["T_VARIABLE","$this",128],["T_OBJECT_OPERATOR","->",128],["T_STRING","graph",128],"[",["T_VARIABLE","$vertex",128],"]","[",["T_CONSTANT_ENCAPSED_STRING","'component'",128],"]",["T_WHITESPACE"," ",128],"=",["T_WHITESPACE"," ",128],["T_VARIABLE","$new_component",128],";",["T_WHITESPACE","\n            ",128],["T_VARIABLE","$state",129],"[",["T_CONSTANT_ENCAPSED_STRING","'components'",129],"]","[",["T_VARIABLE","$new_component",129],"]","[","]",["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_VARIABLE","$vertex",129],";",["T_WHITESPACE","\n          ",129],"}",["T_WHITESPACE","\n          ",130],["T_UNSET","unset",131],"(",["T_VARIABLE","$state",131],"[",["T_CONSTANT_ENCAPSED_STRING","'components'",131],"]","[",["T_VARIABLE","$component",131],"]",")",";",["T_WHITESPACE","\n          ",131],["T_VARIABLE","$component",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_VARIABLE","$new_component",132],";",["T_WHITESPACE","\n        ",132],"}",["T_WHITESPACE","\n        ",133],["T_COMMENT","\/\/ Only visit existing vertices.\n",134],["T_WHITESPACE","        ",135],["T_IF","if",135],["T_WHITESPACE"," ",135],"(",["T_ISSET","isset",135],"(",["T_VARIABLE","$this",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","graph",135],"[",["T_VARIABLE","$end",135],"]",")",")",["T_WHITESPACE"," ",135],"{",["T_WHITESPACE","\n          ",135],["T_COMMENT","\/\/ Visit the connected vertex.\n",136],["T_WHITESPACE","          ",137],["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","depthFirstSearch",137],"(",["T_VARIABLE","$state",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$end",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$component",137],")",";",["T_WHITESPACE","\n\n          ",137],["T_COMMENT","\/\/ All vertices reachable by $end are also reachable by $start.\n",139],["T_WHITESPACE","          ",140],["T_VARIABLE","$this",140],["T_OBJECT_OPERATOR","->",140],["T_STRING","graph",140],"[",["T_VARIABLE","$start",140],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",140],"]",["T_WHITESPACE"," ",140],["T_PLUS_EQUAL","+=",140],["T_WHITESPACE"," ",140],["T_VARIABLE","$this",140],["T_OBJECT_OPERATOR","->",140],["T_STRING","graph",140],"[",["T_VARIABLE","$end",140],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",140],"]",";",["T_WHITESPACE","\n        ",140],"}",["T_WHITESPACE","\n      ",141],"}",["T_WHITESPACE","\n    ",142],"}",["T_WHITESPACE","\n\n    ",143],["T_COMMENT","\/\/ Now that any other subgraph has been explored, add $start to all reverse\n",145],["T_WHITESPACE","    ",146],["T_COMMENT","\/\/ paths.\n",146],["T_WHITESPACE","    ",147],["T_FOREACH","foreach",147],["T_WHITESPACE"," ",147],"(",["T_VARIABLE","$this",147],["T_OBJECT_OPERATOR","->",147],["T_STRING","graph",147],"[",["T_VARIABLE","$start",147],"]","[",["T_CONSTANT_ENCAPSED_STRING","'paths'",147],"]",["T_WHITESPACE"," ",147],["T_AS","as",147],["T_WHITESPACE"," ",147],["T_VARIABLE","$end",147],["T_WHITESPACE"," ",147],["T_DOUBLE_ARROW","=>",147],["T_WHITESPACE"," ",147],["T_VARIABLE","$v",147],")",["T_WHITESPACE"," ",147],"{",["T_WHITESPACE","\n      ",147],["T_IF","if",148],["T_WHITESPACE"," ",148],"(",["T_ISSET","isset",148],"(",["T_VARIABLE","$this",148],["T_OBJECT_OPERATOR","->",148],["T_STRING","graph",148],"[",["T_VARIABLE","$end",148],"]",")",")",["T_WHITESPACE"," ",148],"{",["T_WHITESPACE","\n        ",148],["T_VARIABLE","$this",149],["T_OBJECT_OPERATOR","->",149],["T_STRING","graph",149],"[",["T_VARIABLE","$end",149],"]","[",["T_CONSTANT_ENCAPSED_STRING","'reverse_paths'",149],"]","[",["T_VARIABLE","$start",149],"]",["T_WHITESPACE"," ",149],"=",["T_WHITESPACE"," ",149],["T_VARIABLE","$v",149],";",["T_WHITESPACE","\n      ",149],"}",["T_WHITESPACE","\n    ",150],"}",["T_WHITESPACE","\n\n    ",151],["T_COMMENT","\/\/ Record the order of the last visit. This is the reverse of the\n",153],["T_WHITESPACE","    ",154],["T_COMMENT","\/\/ topological order if the graph is acyclic.\n",154],["T_WHITESPACE","    ",155],["T_VARIABLE","$state",155],"[",["T_CONSTANT_ENCAPSED_STRING","'last_visit_order'",155],"]","[","]",["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_VARIABLE","$start",155],";",["T_WHITESPACE","\n  ",155],"}",["T_WHITESPACE","\n\n",156],"}",["T_WHITESPACE","\n",158]]