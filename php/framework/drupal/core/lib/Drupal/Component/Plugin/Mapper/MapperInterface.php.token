[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Component",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Mapper",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Plugin mapper interface.\n *\n * Plugin mappers are responsible for mapping a plugin request to its\n * implementation. For example, it might map a cache bin to a memcache bin.\n *\n * Mapper objects incorporate the best practices of retrieving configurations,\n * type information, and factory instantiation.\n *\/",5],["T_WHITESPACE","\n",13],["T_INTERFACE","interface",14],["T_WHITESPACE"," ",14],["T_STRING","MapperInterface",14],["T_WHITESPACE"," ",14],"{",["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Gets a preconfigured instance of a plugin.\n   *\n   * @param array $options\n   *   An array of options that can be used to determine a suitable plugin to\n   *   instantiate and how to configure it.\n   *\n   * @return object|false\n   *   A fully configured plugin instance. The interface of the plugin instance\n   *   will depends on the plugin type. If no instance can be retrieved, FALSE\n   *   will be returned.\n   *\/",16],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getInstance",28],"(",["T_ARRAY","array",28],["T_WHITESPACE"," ",28],["T_VARIABLE","$options",28],")",";",["T_WHITESPACE","\n\n",28],"}",["T_WHITESPACE","\n",30]]