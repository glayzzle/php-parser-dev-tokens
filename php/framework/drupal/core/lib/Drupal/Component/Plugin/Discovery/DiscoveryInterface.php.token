[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Component",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Discovery",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * An interface defining the minimum requirements of building a plugin\n * discovery component.\n *\n * @ingroup plugin_api\n *\/",5],["T_WHITESPACE","\n",10],["T_INTERFACE","interface",11],["T_WHITESPACE"," ",11],["T_STRING","DiscoveryInterface",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * Gets a specific plugin definition.\n   *\n   * @param string $plugin_id\n   *   A plugin id.\n   * @param bool $exception_on_invalid\n   *   (optional) If TRUE, an invalid plugin ID will throw an exception.\n   *\n   * @return mixed\n   *   A plugin definition, or NULL if the plugin ID is invalid and\n   *   $exception_on_invalid is FALSE.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginNotFoundException\n   *   Thrown if $plugin_id is invalid and $exception_on_invalid is TRUE.\n   *\/",13],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getDefinition",28],"(",["T_VARIABLE","$plugin_id",28],",",["T_WHITESPACE"," ",28],["T_VARIABLE","$exception_on_invalid",28],["T_WHITESPACE"," ",28],"=",["T_WHITESPACE"," ",28],["T_STRING","TRUE",28],")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Gets the definition of all plugins for this type.\n   *\n   * @return mixed[]\n   *   An array of plugin definitions (empty array if no definitions were\n   *   found). Keys are plugin IDs.\n   *\/",30],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","getDefinitions",37],"(",")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Indicates if a specific plugin definition exists.\n   *\n   * @param string $plugin_id\n   *   A plugin ID.\n   *\n   * @return bool\n   *   TRUE if the definition exists, FALSE otherwise.\n   *\/",39],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","hasDefinition",48],"(",["T_VARIABLE","$plugin_id",48],")",";",["T_WHITESPACE","\n\n",48],"}",["T_WHITESPACE","\n",50]]