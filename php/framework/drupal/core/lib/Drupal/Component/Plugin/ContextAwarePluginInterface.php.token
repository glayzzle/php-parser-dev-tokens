[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Component",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Context",5],["T_NS_SEPARATOR","\\",5],["T_STRING","ContextInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for defining context aware plugins.\n *\n * Context aware plugins can specify an array of context definitions keyed by\n * context name at the plugin definition under the \"context\" key.\n *\n * @ingroup plugin_api\n *\/",7],["T_WHITESPACE","\n",14],["T_INTERFACE","interface",15],["T_WHITESPACE"," ",15],["T_STRING","ContextAwarePluginInterface",15],["T_WHITESPACE"," ",15],["T_EXTENDS","extends",15],["T_WHITESPACE"," ",15],["T_STRING","PluginInspectionInterface",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * Gets the context definitions of the plugin.\n   *\n   * @return \\Drupal\\Component\\Plugin\\Context\\ContextDefinitionInterface[]\n   *   The array of context definitions, keyed by context name.\n   *\/",17],["T_WHITESPACE","\n  ",22],["T_PUBLIC","public",23],["T_WHITESPACE"," ",23],["T_FUNCTION","function",23],["T_WHITESPACE"," ",23],["T_STRING","getContextDefinitions",23],"(",")",";",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Gets a specific context definition of the plugin.\n   *\n   * @param string $name\n   *   The name of the context in the plugin definition.\n   *\n   * @return \\Drupal\\Component\\Plugin\\Context\\ContextDefinitionInterface.\n   *   The definition against which the context value must validate.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   If the requested context is not defined.\n   *\/",25],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","getContextDefinition",37],"(",["T_VARIABLE","$name",37],")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Gets the defined contexts.\n   *\n   * @return array\n   *   The set context objects.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   If contexts are defined but not set.\n   *\/",39],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","getContexts",48],"(",")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Gets a defined context.\n   *\n   * @param string $name\n   *   The name of the context in the plugin definition.\n   *\n   * @return \\Drupal\\Component\\Plugin\\Context\\ContextInterface\n   *   The context object.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   If the requested context is not set.\n   *\/",50],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getContext",62],"(",["T_VARIABLE","$name",62],")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Gets the values for all defined contexts.\n   *\n   * @return array\n   *   An array of set context values, keyed by context name. If a context is\n   *   unset its value is returned as NULL.\n   *\/",64],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","getContextValues",71],"(",")",";",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Gets the value for a defined context.\n   *\n   * @param string $name\n   *   The name of the context in the plugin configuration.\n   *\n   * @return mixed\n   *   The currently set context value.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   If the requested context is not set.\n   *\/",73],["T_WHITESPACE","\n  ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","getContextValue",85],"(",["T_VARIABLE","$name",85],")",";",["T_WHITESPACE","\n\n  ",85],["T_DOC_COMMENT","\/**\n   * Set a context on this plugin.\n   *\n   * @param string $name\n   *   The name of the context in the plugin configuration.\n   * @param \\Drupal\\Component\\Plugin\\Context\\ContextInterface $context\n   *   The context object to set.\n   *\/",87],["T_WHITESPACE","\n  ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","setContext",95],"(",["T_VARIABLE","$name",95],",",["T_WHITESPACE"," ",95],["T_STRING","ContextInterface",95],["T_WHITESPACE"," ",95],["T_VARIABLE","$context",95],")",";",["T_WHITESPACE","\n\n  ",95],["T_DOC_COMMENT","\/**\n   * Sets the value for a defined context.\n   *\n   * @param string $name\n   *   The name of the context in the plugin definition.\n   * @param mixed $value\n   *   The value to set the context to. The value has to validate against the\n   *   provided context definition.\n   *\n   * @return \\Drupal\\Component\\Plugin\\ContextAwarePluginInterface.\n   *   A context aware plugin object for chaining.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   If the value does not pass validation.\n   *\/",97],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","setContextValue",112],"(",["T_VARIABLE","$name",112],",",["T_WHITESPACE"," ",112],["T_VARIABLE","$value",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Validates the set values for the defined contexts.\n   *\n   * @return \\Symfony\\Component\\Validator\\ConstraintViolationListInterface\n   *   A list of constraint violations. If the list is empty, validation\n   *   succeeded.\n   *\/",114],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","validateContexts",121],"(",")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Gets a mapping of the expected assignment names to their context names.\n   *\n   * @return array\n   *   A mapping of the expected assignment names to their context names. For\n   *   example, if one of the $contexts is named 'user.current_user', but the\n   *   plugin expects a context named 'user', then this map would contain\n   *   'user' => 'user.current_user'.\n   *\/",123],["T_WHITESPACE","\n  ",131],["T_PUBLIC","public",132],["T_WHITESPACE"," ",132],["T_FUNCTION","function",132],["T_WHITESPACE"," ",132],["T_STRING","getContextMapping",132],"(",")",";",["T_WHITESPACE","\n\n  ",132],["T_DOC_COMMENT","\/**\n   * Sets a mapping of the expected assignment names to their context names.\n   *\n   * @param array $context_mapping\n   *   A mapping of the expected assignment names to their context names. For\n   *   example, if one of the $contexts is named 'user.current_user', but the\n   *   plugin expects a context named 'user', then this map would contain\n   *   'user' => 'user.current_user'.\n   *\n   * @return $this\n   *\/",134],["T_WHITESPACE","\n  ",144],["T_PUBLIC","public",145],["T_WHITESPACE"," ",145],["T_FUNCTION","function",145],["T_WHITESPACE"," ",145],["T_STRING","setContextMapping",145],"(",["T_ARRAY","array",145],["T_WHITESPACE"," ",145],["T_VARIABLE","$context_mapping",145],")",";",["T_WHITESPACE","\n\n",145],"}",["T_WHITESPACE","\n",147]]