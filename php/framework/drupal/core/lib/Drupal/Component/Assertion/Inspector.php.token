[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Component",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Assertion",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Traversable",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Generic inspections for the assert() statement.\n *\n * This is a static function collection for inspecting variable contents. All\n * functions in this collection check a variable against an assertion about its\n * structure.\n *\n * Example call:\n * @code\n *   assert('Drupal\\\\Component\\\\Assertion\\\\Inspector::assertAllStrings($array)');\n * @endcode\n *\n * @ingroup php_assert\n *\/",7],["T_WHITESPACE","\n",20],["T_CLASS","class",21],["T_WHITESPACE"," ",21],["T_STRING","Inspector",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Asserts argument can be traversed with foreach.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed with foreach.\n   *\/",23],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_STATIC","static",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],["T_STRING","assertTraversable",32],"(",["T_VARIABLE","$traversable",32],")",["T_WHITESPACE"," ",32],"{",["T_WHITESPACE","\n    ",32],["T_RETURN","return",33],["T_WHITESPACE"," ",33],["T_STRING","is_array",33],"(",["T_VARIABLE","$traversable",33],")",["T_WHITESPACE"," ",33],["T_BOOLEAN_OR","||",33],["T_WHITESPACE"," ",33],["T_VARIABLE","$traversable",33],["T_WHITESPACE"," ",33],["T_INSTANCEOF","instanceof",33],["T_WHITESPACE"," ",33],["T_STRING","Traversable",33],";",["T_WHITESPACE","\n  ",33],"}",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Asserts callback returns TRUE for each member of a traversable.\n   *\n   * This is less memory intensive than using array_filter() to build a second\n   * array and then comparing the arrays. Many of the other functions in this\n   * collection alias this function passing a specific callback to make the\n   * code more readable.\n   *\n   * @param callable $callable\n   *   Callback function.\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and $callable returns TRUE on\n   *   all members.\n   *\n   * @see http:\/\/php.net\/manual\/language.types.callable.php\n   *\/",36],["T_WHITESPACE","\n  ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_STATIC","static",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","assertAll",55],"(",["T_CALLABLE","callable",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$callable",55],",",["T_WHITESPACE"," ",55],["T_VARIABLE","$traversable",55],")",["T_WHITESPACE"," ",55],"{",["T_WHITESPACE","\n    ",55],["T_IF","if",56],["T_WHITESPACE"," ",56],"(",["T_STATIC","static",56],["T_DOUBLE_COLON","::",56],["T_STRING","assertTraversable",56],"(",["T_VARIABLE","$traversable",56],")",")",["T_WHITESPACE"," ",56],"{",["T_WHITESPACE","\n      ",56],["T_FOREACH","foreach",57],["T_WHITESPACE"," ",57],"(",["T_VARIABLE","$traversable",57],["T_WHITESPACE"," ",57],["T_AS","as",57],["T_WHITESPACE"," ",57],["T_VARIABLE","$member",57],")",["T_WHITESPACE"," ",57],"{",["T_WHITESPACE","\n        ",57],["T_IF","if",58],["T_WHITESPACE"," ",58],"(","!",["T_VARIABLE","$callable",58],"(",["T_VARIABLE","$member",58],")",")",["T_WHITESPACE"," ",58],"{",["T_WHITESPACE","\n          ",58],["T_RETURN","return",59],["T_WHITESPACE"," ",59],["T_STRING","FALSE",59],";",["T_WHITESPACE","\n        ",59],"}",["T_WHITESPACE","\n      ",60],"}",["T_WHITESPACE","\n      ",61],["T_RETURN","return",62],["T_WHITESPACE"," ",62],["T_STRING","TRUE",62],";",["T_WHITESPACE","\n    ",62],"}",["T_WHITESPACE","\n    ",63],["T_RETURN","return",64],["T_WHITESPACE"," ",64],["T_STRING","FALSE",64],";",["T_WHITESPACE","\n  ",64],"}",["T_WHITESPACE","\n\n  ",65],["T_DOC_COMMENT","\/**\n   * Asserts that all members are strings.\n   *\n   * Use this only if it is vital that the members not be objects, otherwise\n   * test with ::assertAllStringable().\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are strings.\n   *\/",67],["T_WHITESPACE","\n  ",78],["T_PUBLIC","public",79],["T_WHITESPACE"," ",79],["T_STATIC","static",79],["T_WHITESPACE"," ",79],["T_FUNCTION","function",79],["T_WHITESPACE"," ",79],["T_STRING","assertAllStrings",79],"(",["T_VARIABLE","$traversable",79],")",["T_WHITESPACE"," ",79],"{",["T_WHITESPACE","\n    ",79],["T_RETURN","return",80],["T_WHITESPACE"," ",80],["T_STATIC","static",80],["T_DOUBLE_COLON","::",80],["T_STRING","assertAll",80],"(",["T_CONSTANT_ENCAPSED_STRING","'is_string'",80],",",["T_WHITESPACE"," ",80],["T_VARIABLE","$traversable",80],")",";",["T_WHITESPACE","\n  ",80],"}",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Asserts all members are strings or objects with magic __toString() method.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are strings or\n   *   objects with __toString().\n   *\/",83],["T_WHITESPACE","\n  ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_STATIC","static",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","assertAllStringable",93],"(",["T_VARIABLE","$traversable",93],")",["T_WHITESPACE"," ",93],"{",["T_WHITESPACE","\n    ",93],["T_IF","if",94],["T_WHITESPACE"," ",94],"(",["T_STATIC","static",94],["T_DOUBLE_COLON","::",94],["T_STRING","assertTraversable",94],"(",["T_VARIABLE","$traversable",94],")",")",["T_WHITESPACE"," ",94],"{",["T_WHITESPACE","\n      ",94],["T_FOREACH","foreach",95],["T_WHITESPACE"," ",95],"(",["T_VARIABLE","$traversable",95],["T_WHITESPACE"," ",95],["T_AS","as",95],["T_WHITESPACE"," ",95],["T_VARIABLE","$member",95],")",["T_WHITESPACE"," ",95],"{",["T_WHITESPACE","\n        ",95],["T_IF","if",96],["T_WHITESPACE"," ",96],"(","!",["T_STATIC","static",96],["T_DOUBLE_COLON","::",96],["T_STRING","assertStringable",96],"(",["T_VARIABLE","$member",96],")",")",["T_WHITESPACE"," ",96],"{",["T_WHITESPACE","\n          ",96],["T_RETURN","return",97],["T_WHITESPACE"," ",97],["T_STRING","FALSE",97],";",["T_WHITESPACE","\n        ",97],"}",["T_WHITESPACE","\n      ",98],"}",["T_WHITESPACE","\n      ",99],["T_RETURN","return",100],["T_WHITESPACE"," ",100],["T_STRING","TRUE",100],";",["T_WHITESPACE","\n    ",100],"}",["T_WHITESPACE","\n    ",101],["T_RETURN","return",102],["T_WHITESPACE"," ",102],["T_STRING","FALSE",102],";",["T_WHITESPACE","\n  ",102],"}",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Asserts argument is a string or an object castable to a string.\n   *\n   * Use this instead of is_string() alone unless the argument being an object\n   * in any way will cause a problem.\n   *\n   * @param mixed $string\n   *   Variable to be examined\n   *\n   * @return bool\n   *   TRUE if $string is a string or an object castable to a string.\n   *\/",105],["T_WHITESPACE","\n  ",116],["T_PUBLIC","public",117],["T_WHITESPACE"," ",117],["T_STATIC","static",117],["T_WHITESPACE"," ",117],["T_FUNCTION","function",117],["T_WHITESPACE"," ",117],["T_STRING","assertStringable",117],"(",["T_VARIABLE","$string",117],")",["T_WHITESPACE"," ",117],"{",["T_WHITESPACE","\n    ",117],["T_RETURN","return",118],["T_WHITESPACE"," ",118],["T_STRING","is_string",118],"(",["T_VARIABLE","$string",118],")",["T_WHITESPACE"," ",118],["T_BOOLEAN_OR","||",118],["T_WHITESPACE"," ",118],"(",["T_STRING","is_object",118],"(",["T_VARIABLE","$string",118],")",["T_WHITESPACE"," ",118],["T_BOOLEAN_AND","&&",118],["T_WHITESPACE"," ",118],["T_STRING","method_exists",118],"(",["T_VARIABLE","$string",118],",",["T_WHITESPACE"," ",118],["T_CONSTANT_ENCAPSED_STRING","'__toString'",118],")",")",";",["T_WHITESPACE","\n  ",118],"}",["T_WHITESPACE","\n\n  ",119],["T_DOC_COMMENT","\/**\n   * Asserts that all members are arrays.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are arrays.\n   *\/",121],["T_WHITESPACE","\n  ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_STATIC","static",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","assertAllArrays",130],"(",["T_VARIABLE","$traversable",130],")",["T_WHITESPACE"," ",130],"{",["T_WHITESPACE","\n    ",130],["T_RETURN","return",131],["T_WHITESPACE"," ",131],["T_STATIC","static",131],["T_DOUBLE_COLON","::",131],["T_STRING","assertAll",131],"(",["T_CONSTANT_ENCAPSED_STRING","'is_array'",131],",",["T_WHITESPACE"," ",131],["T_VARIABLE","$traversable",131],")",";",["T_WHITESPACE","\n  ",131],"}",["T_WHITESPACE","\n\n  ",132],["T_DOC_COMMENT","\/**\n   * Asserts that the array is strict.\n   *\n   * What PHP calls arrays are more formally called maps in most other\n   * programming languages. A map is a datatype that associates values to keys.\n   * The term 'strict array' here refers to a 0-indexed array in the classic\n   * sense found in programming languages other than PHP.\n   *\n   * @param mixed $array\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable is a 0-indexed array.\n   *\n   * @see http:\/\/php.net\/manual\/language.types.array.php\n   *\/",134],["T_WHITESPACE","\n  ",149],["T_PUBLIC","public",150],["T_WHITESPACE"," ",150],["T_STATIC","static",150],["T_WHITESPACE"," ",150],["T_FUNCTION","function",150],["T_WHITESPACE"," ",150],["T_STRING","assertStrictArray",150],"(",["T_VARIABLE","$array",150],")",["T_WHITESPACE"," ",150],"{",["T_WHITESPACE","\n    ",150],["T_IF","if",151],["T_WHITESPACE"," ",151],"(","!",["T_STRING","is_array",151],"(",["T_VARIABLE","$array",151],")",")",["T_WHITESPACE"," ",151],"{",["T_WHITESPACE","\n      ",151],["T_RETURN","return",152],["T_WHITESPACE"," ",152],["T_STRING","FALSE",152],";",["T_WHITESPACE","\n    ",152],"}",["T_WHITESPACE","\n    ",153],["T_VARIABLE","$i",154],["T_WHITESPACE"," ",154],"=",["T_WHITESPACE"," ",154],["T_LNUMBER","0",154],";",["T_WHITESPACE","\n\n    ",154],["T_FOREACH","foreach",156],["T_WHITESPACE"," ",156],"(",["T_STRING","array_keys",156],"(",["T_VARIABLE","$array",156],")",["T_WHITESPACE"," ",156],["T_AS","as",156],["T_WHITESPACE"," ",156],["T_VARIABLE","$key",156],")",["T_WHITESPACE"," ",156],"{",["T_WHITESPACE","\n      ",156],["T_IF","if",157],["T_WHITESPACE"," ",157],"(",["T_VARIABLE","$i",157],["T_WHITESPACE"," ",157],["T_IS_NOT_IDENTICAL","!==",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$key",157],")",["T_WHITESPACE"," ",157],"{",["T_WHITESPACE","\n        ",157],["T_RETURN","return",158],["T_WHITESPACE"," ",158],["T_STRING","FALSE",158],";",["T_WHITESPACE","\n      ",158],"}",["T_WHITESPACE","\n      ",159],["T_VARIABLE","$i",160],["T_INC","++",160],";",["T_WHITESPACE","\n    ",160],"}",["T_WHITESPACE","\n    ",161],["T_RETURN","return",162],["T_WHITESPACE"," ",162],["T_STRING","TRUE",162],";",["T_WHITESPACE","\n  ",162],"}",["T_WHITESPACE","\n\n  ",163],["T_DOC_COMMENT","\/**\n   * Asserts all members are strict arrays.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are strict arrays.\n   *\n   * @see ::assertStrictArray\n   *\/",165],["T_WHITESPACE","\n  ",175],["T_PUBLIC","public",176],["T_WHITESPACE"," ",176],["T_STATIC","static",176],["T_WHITESPACE"," ",176],["T_FUNCTION","function",176],["T_WHITESPACE"," ",176],["T_STRING","assertAllStrictArrays",176],"(",["T_VARIABLE","$traversable",176],")",["T_WHITESPACE"," ",176],"{",["T_WHITESPACE","\n    ",176],["T_RETURN","return",177],["T_WHITESPACE"," ",177],["T_STATIC","static",177],["T_DOUBLE_COLON","::",177],["T_STRING","assertAll",177],"(","[",["T_CLASS_C","__CLASS__",177],",",["T_WHITESPACE"," ",177],["T_CONSTANT_ENCAPSED_STRING","'assertStrictArray'",177],"]",",",["T_WHITESPACE"," ",177],["T_VARIABLE","$traversable",177],")",";",["T_WHITESPACE","\n  ",177],"}",["T_WHITESPACE","\n\n  ",178],["T_DOC_COMMENT","\/**\n   * Asserts all given keys exist in every member array.\n   *\n   * Drupal has several data structure arrays that require certain keys be set.\n   * You can overload this function to specify a list of required keys. All\n   * of the keys must be set for this method to return TRUE.\n   *\n   * As an example, this assertion tests for the keys of a theme registry.\n   *\n   * @code\n   *   assert('Drupal\\\\Component\\\\Assertion\\\\Inspector::assertAllHaveKey(\n   *     $arrayToTest, \"type\", \"theme path\", \"function\", \"template\", \"variables\", \"render element\", \"preprocess functions\")');\n   * @endcode\n   *\n   * Note: If a method requires certain keys to be present it will usually be\n   * specific about the data types for the values of those keys. Therefore it\n   * will be best to write a specific test for it. Such tests are either bound\n   * to the object that uses them, or are collected into one assertion set for\n   * the package.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   * @param string ...\n   *   Keys to be searched for.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members have all keys.\n   *\/",180],["T_WHITESPACE","\n  ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_STATIC","static",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","assertAllHaveKey",208],"(",")",["T_WHITESPACE"," ",208],"{",["T_WHITESPACE","\n    ",208],["T_VARIABLE","$args",209],["T_WHITESPACE"," ",209],"=",["T_WHITESPACE"," ",209],["T_STRING","func_get_args",209],"(",")",";",["T_WHITESPACE","\n    ",209],["T_VARIABLE","$traversable",210],["T_WHITESPACE"," ",210],"=",["T_WHITESPACE"," ",210],["T_STRING","array_shift",210],"(",["T_VARIABLE","$args",210],")",";",["T_WHITESPACE","\n\n    ",210],["T_IF","if",212],["T_WHITESPACE"," ",212],"(",["T_STATIC","static",212],["T_DOUBLE_COLON","::",212],["T_STRING","assertTraversable",212],"(",["T_VARIABLE","$traversable",212],")",")",["T_WHITESPACE"," ",212],"{",["T_WHITESPACE","\n      ",212],["T_FOREACH","foreach",213],["T_WHITESPACE"," ",213],"(",["T_VARIABLE","$traversable",213],["T_WHITESPACE"," ",213],["T_AS","as",213],["T_WHITESPACE"," ",213],["T_VARIABLE","$member",213],")",["T_WHITESPACE"," ",213],"{",["T_WHITESPACE","\n        ",213],["T_FOREACH","foreach",214],["T_WHITESPACE"," ",214],"(",["T_VARIABLE","$args",214],["T_WHITESPACE"," ",214],["T_AS","as",214],["T_WHITESPACE"," ",214],["T_VARIABLE","$key",214],")",["T_WHITESPACE"," ",214],"{",["T_WHITESPACE","\n          ",214],["T_IF","if",215],["T_WHITESPACE"," ",215],"(","!",["T_STRING","array_key_exists",215],"(",["T_VARIABLE","$key",215],",",["T_WHITESPACE"," ",215],["T_VARIABLE","$member",215],")",")",["T_WHITESPACE"," ",215],"{",["T_WHITESPACE","\n            ",215],["T_RETURN","return",216],["T_WHITESPACE"," ",216],["T_STRING","FALSE",216],";",["T_WHITESPACE","\n          ",216],"}",["T_WHITESPACE","\n        ",217],"}",["T_WHITESPACE","\n      ",218],"}",["T_WHITESPACE","\n      ",219],["T_RETURN","return",220],["T_WHITESPACE"," ",220],["T_STRING","TRUE",220],";",["T_WHITESPACE","\n    ",220],"}",["T_WHITESPACE","\n    ",221],["T_RETURN","return",222],["T_WHITESPACE"," ",222],["T_STRING","FALSE",222],";",["T_WHITESPACE","\n  ",222],"}",["T_WHITESPACE","\n\n  ",223],["T_DOC_COMMENT","\/**\n   * Asserts that all members are integer values.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are integers.\n   *\/",225],["T_WHITESPACE","\n  ",233],["T_PUBLIC","public",234],["T_WHITESPACE"," ",234],["T_STATIC","static",234],["T_WHITESPACE"," ",234],["T_FUNCTION","function",234],["T_WHITESPACE"," ",234],["T_STRING","assertAllIntegers",234],"(",["T_VARIABLE","$traversable",234],")",["T_WHITESPACE"," ",234],"{",["T_WHITESPACE","\n    ",234],["T_RETURN","return",235],["T_WHITESPACE"," ",235],["T_STATIC","static",235],["T_DOUBLE_COLON","::",235],["T_STRING","assertAll",235],"(",["T_CONSTANT_ENCAPSED_STRING","'is_int'",235],",",["T_WHITESPACE"," ",235],["T_VARIABLE","$traversable",235],")",";",["T_WHITESPACE","\n  ",235],"}",["T_WHITESPACE","\n\n  ",236],["T_DOC_COMMENT","\/**\n   * Asserts that all members are float values.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are floating point\n   *   numbers.\n   *\/",238],["T_WHITESPACE","\n  ",247],["T_PUBLIC","public",248],["T_WHITESPACE"," ",248],["T_STATIC","static",248],["T_WHITESPACE"," ",248],["T_FUNCTION","function",248],["T_WHITESPACE"," ",248],["T_STRING","assertAllFloat",248],"(",["T_VARIABLE","$traversable",248],")",["T_WHITESPACE"," ",248],"{",["T_WHITESPACE","\n    ",248],["T_RETURN","return",249],["T_WHITESPACE"," ",249],["T_STATIC","static",249],["T_DOUBLE_COLON","::",249],["T_STRING","assertAll",249],"(",["T_CONSTANT_ENCAPSED_STRING","'is_float'",249],",",["T_WHITESPACE"," ",249],["T_VARIABLE","$traversable",249],")",";",["T_WHITESPACE","\n  ",249],"}",["T_WHITESPACE","\n\n  ",250],["T_DOC_COMMENT","\/**\n   * Asserts that all members are callable.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are callable.\n   *\/",252],["T_WHITESPACE","\n  ",260],["T_PUBLIC","public",261],["T_WHITESPACE"," ",261],["T_STATIC","static",261],["T_WHITESPACE"," ",261],["T_FUNCTION","function",261],["T_WHITESPACE"," ",261],["T_STRING","assertAllCallable",261],"(",["T_VARIABLE","$traversable",261],")",["T_WHITESPACE"," ",261],"{",["T_WHITESPACE","\n    ",261],["T_RETURN","return",262],["T_WHITESPACE"," ",262],["T_STATIC","static",262],["T_DOUBLE_COLON","::",262],["T_STRING","assertAll",262],"(",["T_CONSTANT_ENCAPSED_STRING","'is_callable'",262],",",["T_WHITESPACE"," ",262],["T_VARIABLE","$traversable",262],")",";",["T_WHITESPACE","\n  ",262],"}",["T_WHITESPACE","\n\n  ",263],["T_DOC_COMMENT","\/**\n   * Asserts that all members are not empty.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members not empty.\n   *\/",265],["T_WHITESPACE","\n  ",273],["T_PUBLIC","public",274],["T_WHITESPACE"," ",274],["T_STATIC","static",274],["T_WHITESPACE"," ",274],["T_FUNCTION","function",274],["T_WHITESPACE"," ",274],["T_STRING","assertAllNotEmpty",274],"(",["T_VARIABLE","$traversable",274],")",["T_WHITESPACE"," ",274],"{",["T_WHITESPACE","\n    ",274],["T_IF","if",275],["T_WHITESPACE"," ",275],"(",["T_STATIC","static",275],["T_DOUBLE_COLON","::",275],["T_STRING","assertTraversable",275],"(",["T_VARIABLE","$traversable",275],")",")",["T_WHITESPACE"," ",275],"{",["T_WHITESPACE","\n      ",275],["T_FOREACH","foreach",276],["T_WHITESPACE"," ",276],"(",["T_VARIABLE","$traversable",276],["T_WHITESPACE"," ",276],["T_AS","as",276],["T_WHITESPACE"," ",276],["T_VARIABLE","$member",276],")",["T_WHITESPACE"," ",276],"{",["T_WHITESPACE","\n        ",276],["T_IF","if",277],["T_WHITESPACE"," ",277],"(",["T_EMPTY","empty",277],"(",["T_VARIABLE","$member",277],")",")",["T_WHITESPACE"," ",277],"{",["T_WHITESPACE","\n          ",277],["T_RETURN","return",278],["T_WHITESPACE"," ",278],["T_STRING","FALSE",278],";",["T_WHITESPACE","\n        ",278],"}",["T_WHITESPACE","\n      ",279],"}",["T_WHITESPACE","\n      ",280],["T_RETURN","return",281],["T_WHITESPACE"," ",281],["T_STRING","TRUE",281],";",["T_WHITESPACE","\n    ",281],"}",["T_WHITESPACE","\n    ",282],["T_RETURN","return",283],["T_WHITESPACE"," ",283],["T_STRING","FALSE",283],";",["T_WHITESPACE","\n  ",283],"}",["T_WHITESPACE","\n\n  ",284],["T_DOC_COMMENT","\/**\n   * Asserts all members are numeric data types or strings castable to such.\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are numeric.\n   *\/",286],["T_WHITESPACE","\n  ",294],["T_PUBLIC","public",295],["T_WHITESPACE"," ",295],["T_STATIC","static",295],["T_WHITESPACE"," ",295],["T_FUNCTION","function",295],["T_WHITESPACE"," ",295],["T_STRING","assertAllNumeric",295],"(",["T_VARIABLE","$traversable",295],")",["T_WHITESPACE"," ",295],"{",["T_WHITESPACE","\n    ",295],["T_RETURN","return",296],["T_WHITESPACE"," ",296],["T_STATIC","static",296],["T_DOUBLE_COLON","::",296],["T_STRING","assertAll",296],"(",["T_CONSTANT_ENCAPSED_STRING","'is_numeric'",296],",",["T_WHITESPACE"," ",296],["T_VARIABLE","$traversable",296],")",";",["T_WHITESPACE","\n  ",296],"}",["T_WHITESPACE","\n\n  ",297],["T_DOC_COMMENT","\/**\n   * Asserts that all members are strings that contain the specified string.\n   *\n   * This runs faster than the regular expression equivalent.\n   *\n   * @param string $pattern\n   *   The needle to find.\n   * @param mixed $traversable\n   *   Variable to examine.\n   * @param bool $case_sensitive\n   *   TRUE to use strstr(), FALSE to use stristr() which is case insensitive.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are strings\n   *   containing $pattern.\n   *\/",299],["T_WHITESPACE","\n  ",314],["T_PUBLIC","public",315],["T_WHITESPACE"," ",315],["T_STATIC","static",315],["T_WHITESPACE"," ",315],["T_FUNCTION","function",315],["T_WHITESPACE"," ",315],["T_STRING","assertAllMatch",315],"(",["T_VARIABLE","$pattern",315],",",["T_WHITESPACE"," ",315],["T_VARIABLE","$traversable",315],",",["T_WHITESPACE"," ",315],["T_VARIABLE","$case_sensitive",315],["T_WHITESPACE"," ",315],"=",["T_WHITESPACE"," ",315],["T_STRING","FALSE",315],")",["T_WHITESPACE"," ",315],"{",["T_WHITESPACE","\n    ",315],["T_IF","if",316],["T_WHITESPACE"," ",316],"(",["T_STATIC","static",316],["T_DOUBLE_COLON","::",316],["T_STRING","assertTraversable",316],"(",["T_VARIABLE","$traversable",316],")",")",["T_WHITESPACE"," ",316],"{",["T_WHITESPACE","\n      ",316],["T_IF","if",317],["T_WHITESPACE"," ",317],"(",["T_VARIABLE","$case_sensitive",317],")",["T_WHITESPACE"," ",317],"{",["T_WHITESPACE","\n        ",317],["T_FOREACH","foreach",318],["T_WHITESPACE"," ",318],"(",["T_VARIABLE","$traversable",318],["T_WHITESPACE"," ",318],["T_AS","as",318],["T_WHITESPACE"," ",318],["T_VARIABLE","$member",318],")",["T_WHITESPACE"," ",318],"{",["T_WHITESPACE","\n          ",318],["T_IF","if",319],["T_WHITESPACE"," ",319],"(","!","(",["T_STRING","is_string",319],"(",["T_VARIABLE","$member",319],")",["T_WHITESPACE"," ",319],["T_BOOLEAN_AND","&&",319],["T_WHITESPACE"," ",319],["T_STRING","strstr",319],"(",["T_VARIABLE","$member",319],",",["T_WHITESPACE"," ",319],["T_VARIABLE","$pattern",319],")",")",")",["T_WHITESPACE"," ",319],"{",["T_WHITESPACE","\n            ",319],["T_RETURN","return",320],["T_WHITESPACE"," ",320],["T_STRING","FALSE",320],";",["T_WHITESPACE","\n          ",320],"}",["T_WHITESPACE","\n        ",321],"}",["T_WHITESPACE","\n      ",322],"}",["T_WHITESPACE","\n      ",323],["T_ELSE","else",324],["T_WHITESPACE"," ",324],"{",["T_WHITESPACE","\n        ",324],["T_FOREACH","foreach",325],["T_WHITESPACE"," ",325],"(",["T_VARIABLE","$traversable",325],["T_WHITESPACE"," ",325],["T_AS","as",325],["T_WHITESPACE"," ",325],["T_VARIABLE","$member",325],")",["T_WHITESPACE"," ",325],"{",["T_WHITESPACE","\n          ",325],["T_IF","if",326],["T_WHITESPACE"," ",326],"(","!","(",["T_STRING","is_string",326],"(",["T_VARIABLE","$member",326],")",["T_WHITESPACE"," ",326],["T_BOOLEAN_AND","&&",326],["T_WHITESPACE"," ",326],["T_STRING","stristr",326],"(",["T_VARIABLE","$member",326],",",["T_WHITESPACE"," ",326],["T_VARIABLE","$pattern",326],")",")",")",["T_WHITESPACE"," ",326],"{",["T_WHITESPACE","\n            ",326],["T_RETURN","return",327],["T_WHITESPACE"," ",327],["T_STRING","FALSE",327],";",["T_WHITESPACE","\n          ",327],"}",["T_WHITESPACE","\n        ",328],"}",["T_WHITESPACE","\n      ",329],"}",["T_WHITESPACE","\n      ",330],["T_RETURN","return",331],["T_WHITESPACE"," ",331],["T_STRING","TRUE",331],";",["T_WHITESPACE","\n    ",331],"}",["T_WHITESPACE","\n    ",332],["T_RETURN","return",333],["T_WHITESPACE"," ",333],["T_STRING","FALSE",333],";",["T_WHITESPACE","\n  ",333],"}",["T_WHITESPACE","\n\n\n  ",334],["T_DOC_COMMENT","\/**\n   * Asserts that all members are strings matching a regular expression.\n   *\n   * @param string $pattern\n   *   Regular expression string to find.\n   * @param mixed $traversable\n   *   Variable to be examined.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are strings\n   *   matching $pattern.\n   *\/",337],["T_WHITESPACE","\n  ",348],["T_PUBLIC","public",349],["T_WHITESPACE"," ",349],["T_STATIC","static",349],["T_WHITESPACE"," ",349],["T_FUNCTION","function",349],["T_WHITESPACE"," ",349],["T_STRING","assertAllRegularExpressionMatch",349],"(",["T_VARIABLE","$pattern",349],",",["T_WHITESPACE"," ",349],["T_VARIABLE","$traversable",349],")",["T_WHITESPACE"," ",349],"{",["T_WHITESPACE","\n    ",349],["T_IF","if",350],["T_WHITESPACE"," ",350],"(",["T_STATIC","static",350],["T_DOUBLE_COLON","::",350],["T_STRING","assertTraversable",350],"(",["T_VARIABLE","$traversable",350],")",")",["T_WHITESPACE"," ",350],"{",["T_WHITESPACE","\n      ",350],["T_FOREACH","foreach",351],["T_WHITESPACE"," ",351],"(",["T_VARIABLE","$traversable",351],["T_WHITESPACE"," ",351],["T_AS","as",351],["T_WHITESPACE"," ",351],["T_VARIABLE","$member",351],")",["T_WHITESPACE"," ",351],"{",["T_WHITESPACE","\n        ",351],["T_IF","if",352],["T_WHITESPACE"," ",352],"(","!",["T_STRING","is_string",352],"(",["T_VARIABLE","$member",352],")",")",["T_WHITESPACE"," ",352],"{",["T_WHITESPACE","\n          ",352],["T_RETURN","return",353],["T_WHITESPACE"," ",353],["T_STRING","FALSE",353],";",["T_WHITESPACE","\n        ",353],"}",["T_WHITESPACE","\n\n        ",354],["T_IF","if",356],["T_WHITESPACE"," ",356],"(","!",["T_STRING","preg_match",356],"(",["T_VARIABLE","$pattern",356],",",["T_WHITESPACE"," ",356],["T_VARIABLE","$member",356],")",")",["T_WHITESPACE"," ",356],"{",["T_WHITESPACE","\n          ",356],["T_RETURN","return",357],["T_WHITESPACE"," ",357],["T_STRING","FALSE",357],";",["T_WHITESPACE","\n        ",357],"}",["T_WHITESPACE","\n      ",358],"}",["T_WHITESPACE","\n      ",359],["T_RETURN","return",360],["T_WHITESPACE"," ",360],["T_STRING","TRUE",360],";",["T_WHITESPACE","\n    ",360],"}",["T_WHITESPACE","\n    ",361],["T_RETURN","return",362],["T_WHITESPACE"," ",362],["T_STRING","FALSE",362],";",["T_WHITESPACE","\n  ",362],"}",["T_WHITESPACE","\n\n  ",363],["T_DOC_COMMENT","\/**\n   * Asserts that all members are objects.\n   *\n   * When testing if a collection is composed of objects those objects should\n   * be given a common interface to implement and the test should be written to\n   * search for just that interface. While this method will allow tests for\n   * just object status or for multiple classes and interfaces this was done to\n   * allow tests to be written for existing code without altering it. Only use\n   * this method in that manner when testing code from third party vendors.\n   *\n   * Here are some examples:\n   * @code\n   *   \/\/ Just test all are objects, like a cache.\n   *   assert('Drupal\\\\Component\\\\Assertion\\\\Inspector::assertAllObjects(\n   *     $collection');\n   *\n   *   \/\/ Test if traversable objects (arrays won't pass this)\n   *   assert('Drupal\\\\Component\\\\Assertion\\\\Inspector::assertAllObjects(\n   *     $collection', \\'\\\\Traversable\\');\n   *\n   *   \/\/ Test for the Foo class or Bar\\None interface\n   *   assert('Drupal\\\\Component\\\\Assertion\\\\Inspector::assertAllObjects(\n   *     $collection', \\'\\\\Foo\\', \\'\\\\Bar\\\\None\\'');\n   * @endcode\n   *\n   * @param mixed $traversable\n   *   Variable to be examined.\n   * @param string ...\n   *   Classes and interfaces to test objects against.\n   *\n   * @return bool\n   *   TRUE if $traversable can be traversed and all members are objects with\n   *   at least one of the listed classes or interfaces.\n   *\/",365],["T_WHITESPACE","\n  ",398],["T_PUBLIC","public",399],["T_WHITESPACE"," ",399],["T_STATIC","static",399],["T_WHITESPACE"," ",399],["T_FUNCTION","function",399],["T_WHITESPACE"," ",399],["T_STRING","assertAllObjects",399],"(",")",["T_WHITESPACE"," ",399],"{",["T_WHITESPACE","\n    ",399],["T_VARIABLE","$args",400],["T_WHITESPACE"," ",400],"=",["T_WHITESPACE"," ",400],["T_STRING","func_get_args",400],"(",")",";",["T_WHITESPACE","\n    ",400],["T_VARIABLE","$traversable",401],["T_WHITESPACE"," ",401],"=",["T_WHITESPACE"," ",401],["T_STRING","array_shift",401],"(",["T_VARIABLE","$args",401],")",";",["T_WHITESPACE","\n\n    ",401],["T_IF","if",403],["T_WHITESPACE"," ",403],"(",["T_STATIC","static",403],["T_DOUBLE_COLON","::",403],["T_STRING","assertTraversable",403],"(",["T_VARIABLE","$traversable",403],")",")",["T_WHITESPACE"," ",403],"{",["T_WHITESPACE","\n      ",403],["T_FOREACH","foreach",404],["T_WHITESPACE"," ",404],"(",["T_VARIABLE","$traversable",404],["T_WHITESPACE"," ",404],["T_AS","as",404],["T_WHITESPACE"," ",404],["T_VARIABLE","$member",404],")",["T_WHITESPACE"," ",404],"{",["T_WHITESPACE","\n        ",404],["T_IF","if",405],["T_WHITESPACE"," ",405],"(",["T_STRING","count",405],"(",["T_VARIABLE","$args",405],")",["T_WHITESPACE"," ",405],">",["T_WHITESPACE"," ",405],["T_LNUMBER","0",405],")",["T_WHITESPACE"," ",405],"{",["T_WHITESPACE","\n          ",405],["T_FOREACH","foreach",406],["T_WHITESPACE"," ",406],"(",["T_VARIABLE","$args",406],["T_WHITESPACE"," ",406],["T_AS","as",406],["T_WHITESPACE"," ",406],["T_VARIABLE","$instance",406],")",["T_WHITESPACE"," ",406],"{",["T_WHITESPACE","\n            ",406],["T_IF","if",407],["T_WHITESPACE"," ",407],"(",["T_VARIABLE","$member",407],["T_WHITESPACE"," ",407],["T_INSTANCEOF","instanceof",407],["T_WHITESPACE"," ",407],["T_VARIABLE","$instance",407],")",["T_WHITESPACE"," ",407],"{",["T_WHITESPACE","\n              ",407],["T_COMMENT","\/\/ We're continuing to the next member on the outer loop.\n",408],["T_WHITESPACE","              ",409],["T_COMMENT","\/\/ @see http:\/\/php.net\/continue\n",409],["T_WHITESPACE","              ",410],["T_CONTINUE","continue",410],["T_WHITESPACE"," ",410],["T_LNUMBER","2",410],";",["T_WHITESPACE","\n            ",410],"}",["T_WHITESPACE","\n          ",411],"}",["T_WHITESPACE","\n          ",412],["T_RETURN","return",413],["T_WHITESPACE"," ",413],["T_STRING","FALSE",413],";",["T_WHITESPACE","\n        ",413],"}",["T_WHITESPACE","\n        ",414],["T_ELSEIF","elseif",415],["T_WHITESPACE"," ",415],"(","!",["T_STRING","is_object",415],"(",["T_VARIABLE","$member",415],")",")",["T_WHITESPACE"," ",415],"{",["T_WHITESPACE","\n          ",415],["T_RETURN","return",416],["T_WHITESPACE"," ",416],["T_STRING","FALSE",416],";",["T_WHITESPACE","\n        ",416],"}",["T_WHITESPACE","\n      ",417],"}",["T_WHITESPACE","\n      ",418],["T_RETURN","return",419],["T_WHITESPACE"," ",419],["T_STRING","TRUE",419],";",["T_WHITESPACE","\n    ",419],"}",["T_WHITESPACE","\n    ",420],["T_RETURN","return",421],["T_WHITESPACE"," ",421],["T_STRING","FALSE",421],";",["T_WHITESPACE","\n  ",421],"}",["T_WHITESPACE","\n\n",422],"}",["T_WHITESPACE","\n",424]]