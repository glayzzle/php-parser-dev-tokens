[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Access",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Routing",5],["T_NS_SEPARATOR","\\",5],["T_STRING","RouteCollection",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides the available access checkers by service IDs.\n *\n * Access checker services are added by ::addCheckService calls and are loaded\n * by ::loadCheck.\n *\n * The checker provider service and the actual checking is separated in order\n * to not require the full access manager on route build time.\n *\/",7],["T_WHITESPACE","\n",15],["T_INTERFACE","interface",16],["T_WHITESPACE"," ",16],["T_STRING","CheckProviderInterface",16],["T_WHITESPACE"," ",16],"{",["T_WHITESPACE","\n\n\n  ",16],["T_DOC_COMMENT","\/**\n   * For each route, saves a list of applicable access checks to the route.\n   *\n   * @param \\Symfony\\Component\\Routing\\RouteCollection $routes\n   *   A collection of routes to apply checks to.\n   *\/",19],["T_WHITESPACE","\n  ",24],["T_PUBLIC","public",25],["T_WHITESPACE"," ",25],["T_FUNCTION","function",25],["T_WHITESPACE"," ",25],["T_STRING","setChecks",25],"(",["T_STRING","RouteCollection",25],["T_WHITESPACE"," ",25],["T_VARIABLE","$routes",25],")",";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Registers a new AccessCheck by service ID.\n   *\n   * @param string $service_id\n   *   The ID of the service in the Container that provides a check.\n   * @param string $service_method\n   *   The method to invoke on the service object for performing the check.\n   * @param array $applies_checks\n   *   (optional) An array of route requirement keys the checker service applies\n   *   to.\n   * @param bool $needs_incoming_request\n   *   (optional) True if access-check method only acts on an incoming request.\n   *\/",27],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","addCheckService",40],"(",["T_VARIABLE","$service_id",40],",",["T_WHITESPACE"," ",40],["T_VARIABLE","$service_method",40],",",["T_WHITESPACE"," ",40],["T_ARRAY","array",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$applies_checks",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_ARRAY","array",40],"(",")",",",["T_WHITESPACE"," ",40],["T_VARIABLE","$needs_incoming_request",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_STRING","FALSE",40],")",";",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Lazy-loads access check services.\n   *\n   * @param string $service_id\n   *   The service id of the access check service to load.\n   *\n   * @return callable\n   *   A callable access check.\n   *\n   * @throws \\InvalidArgumentException\n   *   Thrown when the service hasn't been registered in addCheckService().\n   * @throws \\Drupal\\Core\\Access\\AccessException\n   *   Thrown when the service doesn't implement the required interface.\n   *\/",42],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","loadCheck",56],"(",["T_VARIABLE","$service_id",56],")",";",["T_WHITESPACE","\n\n  ",56],["T_DOC_COMMENT","\/**\n   * A list of checks that needs the request.\n   *\n   * @return array\n   *\/",58],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","getChecksNeedRequest",63],"(",")",";",["T_WHITESPACE","\n\n",63],"}",["T_WHITESPACE","\n",65]]