[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Extension",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for classes that manage a set of enabled modules.\n *\n * Classes implementing this interface work with a fixed list of modules and are\n * responsible for loading module files and maintaining information about module\n * dependencies and hook implementations.\n *\/",5],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","ModuleHandlerInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Includes a module's .module file.\n   *\n   * This prevents including a module more than once.\n   *\n   * @param string $name\n   *   The name of the module to load.\n   *\n   * @return bool\n   *   TRUE if the item is loaded or has already been loaded.\n   *\/",14],["T_WHITESPACE","\n  ",24],["T_PUBLIC","public",25],["T_WHITESPACE"," ",25],["T_FUNCTION","function",25],["T_WHITESPACE"," ",25],["T_STRING","load",25],"(",["T_VARIABLE","$name",25],")",";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Loads all enabled modules.\n   *\/",27],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","loadAll",30],"(",")",";",["T_WHITESPACE","\n\n  ",30],["T_DOC_COMMENT","\/**\n   * Returns whether all modules have been loaded.\n   *\n   * @return bool\n   *   A Boolean indicating whether all modules have been loaded. This means all\n   *   modules; the load status of bootstrap modules cannot be checked.\n   *\/",32],["T_WHITESPACE","\n  ",38],["T_PUBLIC","public",39],["T_WHITESPACE"," ",39],["T_FUNCTION","function",39],["T_WHITESPACE"," ",39],["T_STRING","isLoaded",39],"(",")",";",["T_WHITESPACE","\n\n  ",39],["T_DOC_COMMENT","\/**\n   * Reloads all enabled modules.\n   *\/",41],["T_WHITESPACE","\n  ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","reload",44],"(",")",";",["T_WHITESPACE","\n\n  ",44],["T_DOC_COMMENT","\/**\n   * Returns the list of currently active modules.\n   *\n   * @return \\Drupal\\Core\\Extension\\Extension[]\n   *   An associative array whose keys are the names of the modules and whose\n   *   values are Extension objects.\n   *\/",46],["T_WHITESPACE","\n  ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","getModuleList",53],"(",")",";",["T_WHITESPACE","\n\n  ",53],["T_DOC_COMMENT","\/**\n   * Returns a module extension object from the currently active modules list.\n   *\n   * @param string $name\n   *   The name of the module to return.\n   *\n   * @return \\Drupal\\Core\\Extension\\Extension\n   *   An extension object.\n   *\n   * @throws \\InvalidArgumentException\n   *   Thrown when the requested module does not exist.\n   *\/",55],["T_WHITESPACE","\n  ",66],["T_PUBLIC","public",67],["T_WHITESPACE"," ",67],["T_FUNCTION","function",67],["T_WHITESPACE"," ",67],["T_STRING","getModule",67],"(",["T_VARIABLE","$name",67],")",";",["T_WHITESPACE","\n\n  ",67],["T_DOC_COMMENT","\/**\n   * Sets an explicit list of currently active modules.\n   *\n   * @param \\Drupal\\Core\\Extension\\Extension[] $module_list\n   *   An associative array whose keys are the names of the modules and whose\n   *   values are Extension objects.\n   *\/",69],["T_WHITESPACE","\n  ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","setModuleList",76],"(",["T_ARRAY","array",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$module_list",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_ARRAY","array",76],"(",")",")",";",["T_WHITESPACE","\n\n  ",76],["T_DOC_COMMENT","\/**\n   * Adds a module to the list of currently active modules.\n   *\n   * @param string $name\n   *   The module name; e.g., 'node'.\n   * @param string $path\n   *   The module path; e.g., 'core\/modules\/node'.\n   *\/",78],["T_WHITESPACE","\n  ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","addModule",86],"(",["T_VARIABLE","$name",86],",",["T_WHITESPACE"," ",86],["T_VARIABLE","$path",86],")",";",["T_WHITESPACE","\n\n  ",86],["T_DOC_COMMENT","\/**\n   * Adds an installation profile to the list of currently active modules.\n   *\n   * @param string $name\n   *   The profile name; e.g., 'standard'.\n   * @param string $path\n   *   The profile path; e.g., 'core\/profiles\/standard'.\n   *\/",88],["T_WHITESPACE","\n  ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","addProfile",96],"(",["T_VARIABLE","$name",96],",",["T_WHITESPACE"," ",96],["T_VARIABLE","$path",96],")",";",["T_WHITESPACE","\n\n  ",96],["T_DOC_COMMENT","\/**\n   * Determines which modules require and are required by each module.\n   *\n   * @param array $modules\n   *   An array of module objects keyed by module name. Each object contains\n   *   information discovered during a Drupal\\Core\\Extension\\ExtensionDiscovery\n   *   scan.\n   *\n   * @return\n   *   The same array with the new keys for each module:\n   *   - requires: An array with the keys being the modules that this module\n   *     requires.\n   *   - required_by: An array with the keys being the modules that will not work\n   *     without this module.\n   *\n   * @see \\Drupal\\Core\\Extension\\ExtensionDiscovery\n   *\/",98],["T_WHITESPACE","\n  ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","buildModuleDependencies",115],"(",["T_ARRAY","array",115],["T_WHITESPACE"," ",115],["T_VARIABLE","$modules",115],")",";",["T_WHITESPACE","\n\n  ",115],["T_DOC_COMMENT","\/**\n   * Determines whether a given module is enabled.\n   *\n   * @param string $module\n   *   The name of the module (without the .module extension).\n   *\n   * @return bool\n   *   TRUE if the module is both installed and enabled.\n   *\/",117],["T_WHITESPACE","\n  ",125],["T_PUBLIC","public",126],["T_WHITESPACE"," ",126],["T_FUNCTION","function",126],["T_WHITESPACE"," ",126],["T_STRING","moduleExists",126],"(",["T_VARIABLE","$module",126],")",";",["T_WHITESPACE","\n\n  ",126],["T_DOC_COMMENT","\/**\n   * Loads an include file for each enabled module.\n   *\n   * @param string $type\n   *   The include file's type (file extension).\n   * @param string $name\n   *   (optional) The base file name (without the $type extension). If omitted,\n   *   each module's name is used; i.e., \"$module.$type\" by default.\n   *\/",128],["T_WHITESPACE","\n  ",136],["T_PUBLIC","public",137],["T_WHITESPACE"," ",137],["T_FUNCTION","function",137],["T_WHITESPACE"," ",137],["T_STRING","loadAllIncludes",137],"(",["T_VARIABLE","$type",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$name",137],["T_WHITESPACE"," ",137],"=",["T_WHITESPACE"," ",137],["T_STRING","NULL",137],")",";",["T_WHITESPACE","\n\n  ",137],["T_DOC_COMMENT","\/**\n   * Loads a module include file.\n   *\n   * Examples:\n   * @code\n   *   \/\/ Load node.admin.inc from the node module.\n   *   $this->loadInclude('node', 'inc', 'node.admin');\n   *   \/\/ Load content_types.inc from the node module.\n   *   $this->loadInclude('node', 'inc', ''content_types');\n   * @endcode\n   *\n   * @param string $module\n   *   The module to which the include file belongs.\n   * @param string $type\n   *   The include file's type (file extension).\n   * @param string $name\n   *   (optional) The base file name (without the $type extension). If omitted,\n   *   $module is used; i.e., resulting in \"$module.$type\" by default.\n   *\n   * @return string|false\n   *   The name of the included file, if successful; FALSE otherwise.\n   *\/",139],["T_WHITESPACE","\n  ",160],["T_PUBLIC","public",161],["T_WHITESPACE"," ",161],["T_FUNCTION","function",161],["T_WHITESPACE"," ",161],["T_STRING","loadInclude",161],"(",["T_VARIABLE","$module",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$type",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$name",161],["T_WHITESPACE"," ",161],"=",["T_WHITESPACE"," ",161],["T_STRING","NULL",161],")",";",["T_WHITESPACE","\n\n  ",161],["T_DOC_COMMENT","\/**\n   * Retrieves a list of hooks that are declared through hook_hook_info().\n   *\n   * @return array\n   *   An associative array whose keys are hook names and whose values are an\n   *   associative array containing a group name. The structure of the array\n   *   is the same as the return value of hook_hook_info().\n   *\n   * @see hook_hook_info()\n   *\/",163],["T_WHITESPACE","\n  ",172],["T_PUBLIC","public",173],["T_WHITESPACE"," ",173],["T_FUNCTION","function",173],["T_WHITESPACE"," ",173],["T_STRING","getHookInfo",173],"(",")",";",["T_WHITESPACE","\n\n  ",173],["T_DOC_COMMENT","\/**\n   * Determines which modules are implementing a hook.\n   *\n   * @param string $hook\n   *   The name of the hook (e.g. \"help\" or \"menu\").\n   *\n   * @return array\n   *   An array with the names of the modules which are implementing this hook.\n   *\/",175],["T_WHITESPACE","\n  ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","getImplementations",184],"(",["T_VARIABLE","$hook",184],")",";",["T_WHITESPACE","\n\n  ",184],["T_DOC_COMMENT","\/**\n   * Write the hook implementation info to the cache.\n   *\/",186],["T_WHITESPACE","\n  ",188],["T_PUBLIC","public",189],["T_WHITESPACE"," ",189],["T_FUNCTION","function",189],["T_WHITESPACE"," ",189],["T_STRING","writeCache",189],"(",")",";",["T_WHITESPACE","\n\n  ",189],["T_DOC_COMMENT","\/**\n   * Resets the cached list of hook implementations.\n   *\/",191],["T_WHITESPACE","\n  ",193],["T_PUBLIC","public",194],["T_WHITESPACE"," ",194],["T_FUNCTION","function",194],["T_WHITESPACE"," ",194],["T_STRING","resetImplementations",194],"(",")",";",["T_WHITESPACE","\n\n  ",194],["T_DOC_COMMENT","\/**\n   * Returns whether a given module implements a given hook.\n   *\n   * @param string $module\n   *   The name of the module (without the .module extension).\n   * @param string $hook\n   *   The name of the hook (e.g. \"help\" or \"menu\").\n   *\n   * @return bool\n   *   TRUE if the module is both installed and enabled, and the hook is\n   *   implemented in that module.\n   *\/",196],["T_WHITESPACE","\n  ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","implementsHook",208],"(",["T_VARIABLE","$module",208],",",["T_WHITESPACE"," ",208],["T_VARIABLE","$hook",208],")",";",["T_WHITESPACE","\n\n  ",208],["T_DOC_COMMENT","\/**\n   * Invokes a hook in a particular module.\n   *\n   * @param string $module\n   *   The name of the module (without the .module extension).\n   * @param string $hook\n   *   The name of the hook to invoke.\n   * @param array $args\n   *   Arguments to pass to the hook implementation.\n   *\n   * @return mixed\n   *   The return value of the hook implementation.\n   *\/",210],["T_WHITESPACE","\n  ",222],["T_PUBLIC","public",223],["T_WHITESPACE"," ",223],["T_FUNCTION","function",223],["T_WHITESPACE"," ",223],["T_STRING","invoke",223],"(",["T_VARIABLE","$module",223],",",["T_WHITESPACE"," ",223],["T_VARIABLE","$hook",223],",",["T_WHITESPACE"," ",223],["T_ARRAY","array",223],["T_WHITESPACE"," ",223],["T_VARIABLE","$args",223],["T_WHITESPACE"," ",223],"=",["T_WHITESPACE"," ",223],["T_ARRAY","array",223],"(",")",")",";",["T_WHITESPACE","\n\n  ",223],["T_DOC_COMMENT","\/**\n   * Invokes a hook in all enabled modules that implement it.\n   *\n   * @param string $hook\n   *   The name of the hook to invoke.\n   * @param array $args\n   *   Arguments to pass to the hook.\n   *\n   * @return array\n   *   An array of return values of the hook implementations. If modules return\n   *   arrays from their implementations, those are merged into one array\n   *   recursively. Note: integer keys in arrays will be lost, as the merge is\n   *   done using array_merge_recursive().\n   *\/",225],["T_WHITESPACE","\n  ",238],["T_PUBLIC","public",239],["T_WHITESPACE"," ",239],["T_FUNCTION","function",239],["T_WHITESPACE"," ",239],["T_STRING","invokeAll",239],"(",["T_VARIABLE","$hook",239],",",["T_WHITESPACE"," ",239],["T_ARRAY","array",239],["T_WHITESPACE"," ",239],["T_VARIABLE","$args",239],["T_WHITESPACE"," ",239],"=",["T_WHITESPACE"," ",239],["T_ARRAY","array",239],"(",")",")",";",["T_WHITESPACE","\n\n  ",239],["T_DOC_COMMENT","\/**\n   * Passes alterable variables to specific hook_TYPE_alter() implementations.\n   *\n   * This dispatch function hands off the passed-in variables to type-specific\n   * hook_TYPE_alter() implementations in modules. It ensures a consistent\n   * interface for all altering operations.\n   *\n   * A maximum of 2 alterable arguments is supported. In case more arguments need\n   * to be passed and alterable, modules provide additional variables assigned by\n   * reference in the last $context argument:\n   * @code\n   *   $context = array(\n   *     'alterable' => &$alterable,\n   *     'unalterable' => $unalterable,\n   *     'foo' => 'bar',\n   *   );\n   *   $this->alter('mymodule_data', $alterable1, $alterable2, $context);\n   * @endcode\n   *\n   * Note that objects are always passed by reference in PHP5. If it is absolutely\n   * required that no implementation alters a passed object in $context, then an\n   * object needs to be cloned:\n   * @code\n   *   $context = array(\n   *     'unalterable_object' => clone $object,\n   *   );\n   *   $this->alter('mymodule_data', $data, $context);\n   * @endcode\n   *\n   * @param string|array $type\n   *   A string describing the type of the alterable $data. 'form', 'links',\n   *   'node_content', and so on are several examples. Alternatively can be an\n   *   array, in which case hook_TYPE_alter() is invoked for each value in the\n   *   array, ordered first by module, and then for each module, in the order of\n   *   values in $type. For example, when Form API is using $this->alter() to\n   *   execute both hook_form_alter() and hook_form_FORM_ID_alter()\n   *   implementations, it passes array('form', 'form_' . $form_id) for $type.\n   * @param mixed $data\n   *   The variable that will be passed to hook_TYPE_alter() implementations to be\n   *   altered. The type of this variable depends on the value of the $type\n   *   argument. For example, when altering a 'form', $data will be a structured\n   *   array. When altering a 'profile', $data will be an object.\n   * @param mixed $context1\n   *   (optional) An additional variable that is passed by reference.\n   * @param mixed $context2\n   *   (optional) An additional variable that is passed by reference. If more\n   *   context needs to be provided to implementations, then this should be an\n   *   associative array as described above.\n   *\/",241],["T_WHITESPACE","\n  ",289],["T_PUBLIC","public",290],["T_WHITESPACE"," ",290],["T_FUNCTION","function",290],["T_WHITESPACE"," ",290],["T_STRING","alter",290],"(",["T_VARIABLE","$type",290],",",["T_WHITESPACE"," ",290],"&",["T_VARIABLE","$data",290],",",["T_WHITESPACE"," ",290],"&",["T_VARIABLE","$context1",290],["T_WHITESPACE"," ",290],"=",["T_WHITESPACE"," ",290],["T_STRING","NULL",290],",",["T_WHITESPACE"," ",290],"&",["T_VARIABLE","$context2",290],["T_WHITESPACE"," ",290],"=",["T_WHITESPACE"," ",290],["T_STRING","NULL",290],")",";",["T_WHITESPACE","\n\n  ",290],["T_DOC_COMMENT","\/**\n   * Returns an array of directories for all enabled modules. Useful for\n   * tasks such as finding a file that exists in all module directories.\n   *\n   * @return array\n   *\/",292],["T_WHITESPACE","\n  ",297],["T_PUBLIC","public",298],["T_WHITESPACE"," ",298],["T_FUNCTION","function",298],["T_WHITESPACE"," ",298],["T_STRING","getModuleDirectories",298],"(",")",";",["T_WHITESPACE","\n\n  ",298],["T_DOC_COMMENT","\/**\n   * Gets the human readable name of a given module.\n   *\n   * @param string $module\n   *   The machine name of the module which title should be shown.\n   *\n   * @return string\n   *   Returns the human readable name of the module or the machine name passed\n   *   in if no matching module is found.\n   *\/",300],["T_WHITESPACE","\n  ",309],["T_PUBLIC","public",310],["T_WHITESPACE"," ",310],["T_FUNCTION","function",310],["T_WHITESPACE"," ",310],["T_STRING","getName",310],"(",["T_VARIABLE","$module",310],")",";",["T_WHITESPACE","\n\n",310],"}",["T_WHITESPACE","\n",312]]