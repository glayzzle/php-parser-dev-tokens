[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Extension",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Common interface for module uninstall validators.\n *\n * A module uninstall validator must implement this interface and be defined in\n * a Drupal @link container service @endlink that is tagged\n * module_install.uninstall_validator.\n *\/",5],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","ModuleUninstallValidatorInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Determines the reasons a module can not be uninstalled.\n   *\n   * Example implementation:\n   * @code\n   * public function validate($module) {\n   *   $entity_types = $this->entityManager->getDefinitions();\n   *   $reasons = array();\n   *   foreach ($entity_types as $entity_type) {\n   *     if ($module == $entity_type->getProvider() && $entity_type instanceof ContentEntityTypeInterface && $this->entityManager->getStorage($entity_type->id())->hasData()) {\n   *       $reasons[] = $this->t('There is content for the entity type: @entity_type', array('@entity_type' => $entity_type->getLabel()));\n   *     }\n   *   }\n   *   return $reasons;\n   * }\n   * @endcode\n   *\n   * @param string $module\n   *   A module name.\n   *\n   * @return string[]\n   *   An array of reasons the module can not be uninstalled, empty if it can.\n   *   Each reason should not end with any punctuation since multiple reasons\n   *   can be displayed together.\n   *\n   * @see template_preprocess_system_modules_uninstall()\n   *\/",14],["T_WHITESPACE","\n  ",40],["T_PUBLIC","public",41],["T_WHITESPACE"," ",41],["T_FUNCTION","function",41],["T_WHITESPACE"," ",41],["T_STRING","validate",41],"(",["T_VARIABLE","$module",41],")",";",["T_WHITESPACE","\n\n",41],"}",["T_WHITESPACE","\n",43]]