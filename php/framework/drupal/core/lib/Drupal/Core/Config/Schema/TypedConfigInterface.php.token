[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Schema",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","TypedData",5],["T_NS_SEPARATOR","\\",5],["T_STRING","TraversableTypedDataInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for a typed configuration object that contains multiple elements.\n *\n * A list of typed configuration contains any number of items whose type\n * will depend on the configuration schema but also on the configuration\n * data being parsed.\n *\n * When implementing this interface which extends Traversable, make sure to list\n * IteratorAggregate or Iterator before this interface in the implements clause.\n *\/",7],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","TypedConfigInterface",17],["T_WHITESPACE"," ",17],["T_EXTENDS","extends",17],["T_WHITESPACE"," ",17],["T_STRING","TraversableTypedDataInterface",17],["T_WHITESPACE"," ",17],"{",["T_WHITESPACE","\n\n  ",17],["T_DOC_COMMENT","\/**\n   * Determines whether the data structure is empty.\n   *\n   * @return bool\n   *   TRUE if the data structure is empty, FALSE otherwise.\n   *\/",19],["T_WHITESPACE","\n  ",24],["T_PUBLIC","public",25],["T_WHITESPACE"," ",25],["T_FUNCTION","function",25],["T_WHITESPACE"," ",25],["T_STRING","isEmpty",25],"(",")",";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Gets an array of contained elements.\n   *\n   * @return array\n   *   Array of \\Drupal\\Core\\TypedData\\TypedDataInterface objects.\n   *\/",27],["T_WHITESPACE","\n  ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","getElements",33],"(",")",";",["T_WHITESPACE","\n\n  ",33],["T_DOC_COMMENT","\/**\n   * Gets a contained typed configuration element.\n   *\n   * @param $name\n   *   The name of the property to get; e.g., 'title' or 'name'. Nested\n   *   elements can be get using multiple dot delimited names, for example,\n   *   'page.front'.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The property object.\n   *\n   * @throws \\InvalidArgumentException\n   *   If an invalid property name is given.\n   *\/",35],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","get",49],"(",["T_VARIABLE","$name",49],")",";",["T_WHITESPACE","\n\n  ",49],["T_DOC_COMMENT","\/**\n   * Returns an array of all property values.\n   *\n   * @return array\n   *   An array of property values, keyed by property name.\n   *\/",51],["T_WHITESPACE","\n  ",56],["T_PUBLIC","public",57],["T_WHITESPACE"," ",57],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","toArray",57],"(",")",";",["T_WHITESPACE","\n\n",57],"}",["T_WHITESPACE","\n",59]]