[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for configuration manager.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","ConfigManagerInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Returns the entity type of a configuration object.\n   *\n   * @param string $name\n   *   The configuration object name.\n   *\n   * @return string|null\n   *   Either the entity type name, or NULL if none match.\n   *\/",10],["T_WHITESPACE","\n  ",18],["T_PUBLIC","public",19],["T_WHITESPACE"," ",19],["T_FUNCTION","function",19],["T_WHITESPACE"," ",19],["T_STRING","getEntityTypeIdByName",19],"(",["T_VARIABLE","$name",19],")",";",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Loads a configuration entity using the configuration name.\n   *\n   * @param string $name\n   *   The configuration object name.\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityInterface|null\n   *   The configuration entity or NULL if it does not exist.\n   *\/",21],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","loadConfigEntityByName",30],"(",["T_VARIABLE","$name",30],")",";",["T_WHITESPACE","\n\n  ",30],["T_DOC_COMMENT","\/**\n   * Gets the entity manager.\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityManagerInterface\n   *   The entity manager.\n   *\/",32],["T_WHITESPACE","\n  ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","getEntityManager",38],"(",")",";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * Gets the config factory.\n   *\n   * @return \\Drupal\\Core\\Config\\ConfigFactoryInterface\n   *   The entity manager.\n   *\/",40],["T_WHITESPACE","\n  ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","getConfigFactory",46],"(",")",";",["T_WHITESPACE","\n\n  ",46],["T_DOC_COMMENT","\/**\n   * Creates a Diff object using the config data from the two storages.\n   *\n   * @param \\Drupal\\Core\\Config\\StorageInterface $source_storage\n   *   The storage to diff configuration from.\n   * @param \\Drupal\\Core\\Config\\StorageInterface $target_storage\n   *   The storage to diff configuration to.\n   * @param string $source_name\n   *   The name of the configuration object in the source storage to diff.\n   * @param string $target_name\n   *   (optional) The name of the configuration object in the target storage.\n   *   If omitted, the source name is used.\n   * @param string $collection\n   *   (optional) The configuration collection name. Defaults to the default\n   *   collection.\n   *\n   * @return \\Drupal\\Component\\Diff\\Diff\n   *   A Diff object using the config data from the two storages.\n   *\n   * @todo Make renderer injectable\n   *\n   * @see \\Drupal\\Core\\Diff\\DiffFormatter\n   *\/",48],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","diff",71],"(",["T_STRING","StorageInterface",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$source_storage",71],",",["T_WHITESPACE"," ",71],["T_STRING","StorageInterface",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$target_storage",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$source_name",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$target_name",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","NULL",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$collection",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","StorageInterface",71],["T_DOUBLE_COLON","::",71],["T_STRING","DEFAULT_COLLECTION",71],")",";",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Creates a configuration snapshot following a successful import.\n   *\n   * @param \\Drupal\\Core\\Config\\StorageInterface $source_storage\n   *   The storage to synchronize configuration from.\n   * @param \\Drupal\\Core\\Config\\StorageInterface $snapshot_storage\n   *   The storage to synchronize configuration to.\n   *\/",73],["T_WHITESPACE","\n  ",80],["T_PUBLIC","public",81],["T_WHITESPACE"," ",81],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","createSnapshot",81],"(",["T_STRING","StorageInterface",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$source_storage",81],",",["T_WHITESPACE"," ",81],["T_STRING","StorageInterface",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$snapshot_storage",81],")",";",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Uninstalls the configuration of a given extension.\n   *\n   * @param string $type\n   *   The extension type; e.g., 'module' or 'theme'.\n   * @param string $name\n   *   The name of the module or theme to install configuration for.\n   *\/",83],["T_WHITESPACE","\n  ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","uninstall",91],"(",["T_VARIABLE","$type",91],",",["T_WHITESPACE"," ",91],["T_VARIABLE","$name",91],")",";",["T_WHITESPACE","\n\n  ",91],["T_DOC_COMMENT","\/**\n   * Creates and populates a ConfigDependencyManager object.\n   *\n   * The configuration dependency manager is populated with data from the active\n   * store.\n   *\n   * @return \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   *\/",93],["T_WHITESPACE","\n  ",100],["T_PUBLIC","public",101],["T_WHITESPACE"," ",101],["T_FUNCTION","function",101],["T_WHITESPACE"," ",101],["T_STRING","getConfigDependencyManager",101],"(",")",";",["T_WHITESPACE","\n\n  ",101],["T_DOC_COMMENT","\/**\n   * Finds config entities that are dependent on extensions or entities.\n   *\n   * @param string $type\n   *   The type of dependency being checked. Either 'module', 'theme', 'config'\n   *   or 'content'.\n   * @param array $names\n   *   The specific names to check. If $type equals 'module' or 'theme' then it\n   *   should be a list of module names or theme names. In the case of 'config'\n   *   or 'content' it should be a list of configuration dependency names.\n   *\n   * @return \\Drupal\\Core\\Config\\Entity\\ConfigEntityDependency[]\n   *   An array of configuration entity dependency objects.\n   *\/",103],["T_WHITESPACE","\n  ",116],["T_PUBLIC","public",117],["T_WHITESPACE"," ",117],["T_FUNCTION","function",117],["T_WHITESPACE"," ",117],["T_STRING","findConfigEntityDependents",117],"(",["T_VARIABLE","$type",117],",",["T_WHITESPACE"," ",117],["T_ARRAY","array",117],["T_WHITESPACE"," ",117],["T_VARIABLE","$names",117],")",";",["T_WHITESPACE","\n\n  ",117],["T_DOC_COMMENT","\/**\n   * Finds config entities that are dependent on extensions or entities.\n   *\n   * @param string $type\n   *   The type of dependency being checked. Either 'module', 'theme', 'config'\n   *   or 'content'.\n   * @param array $names\n   *   The specific names to check. If $type equals 'module' or 'theme' then it\n   *   should be a list of module names or theme names. In the case of 'config'\n   *   or 'content' it should be a list of configuration dependency names.\n   *\n   * @return \\Drupal\\Core\\Config\\Entity\\ConfigEntityInterface[]\n   *   An array of dependencies as configuration entities.\n   *\/",119],["T_WHITESPACE","\n  ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","findConfigEntityDependentsAsEntities",133],"(",["T_VARIABLE","$type",133],",",["T_WHITESPACE"," ",133],["T_ARRAY","array",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$names",133],")",";",["T_WHITESPACE","\n\n  ",133],["T_DOC_COMMENT","\/**\n   * Lists which config entities to update and delete on removal of a dependency.\n   *\n   * @param string $type\n   *   The type of dependency being checked. Either 'module', 'theme', 'config'\n   *   or 'content'.\n   * @param array $names\n   *   The specific names to check. If $type equals 'module' or 'theme' then it\n   *   should be a list of module names or theme names. In the case of 'config'\n   *   or 'content' it should be a list of configuration dependency names.\n   * @param bool $dry_run\n   *   If set to FALSE the entities returned in the list of updates will be\n   *   modified. In order to make the changes the caller needs to save them. If\n   *   set to TRUE the entities returned will not be modified.\n   *\n   * @return array\n   *   An array with the keys: 'update', 'delete' and 'unchanged'. The value of\n   *   each is a list of configuration entities that need to have that action\n   *   applied when the supplied dependencies are removed. Updates need to be\n   *   processed before deletes. The order of the deletes is significant and\n   *   must be processed in the returned order.\n   *\/",135],["T_WHITESPACE","\n  ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","getConfigEntitiesToChangeOnDependencyRemoval",157],"(",["T_VARIABLE","$type",157],",",["T_WHITESPACE"," ",157],["T_ARRAY","array",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$names",157],",",["T_WHITESPACE"," ",157],["T_VARIABLE","$dry_run",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_STRING","TRUE",157],")",";",["T_WHITESPACE","\n\n  ",157],["T_DOC_COMMENT","\/**\n   * Gets available collection information using the event system.\n   *\n   * @return \\Drupal\\Core\\Config\\ConfigCollectionInfo\n   *   The object which contains information about the available collections.\n   *\/",159],["T_WHITESPACE","\n  ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","getConfigCollectionInfo",165],"(",")",";",["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Finds missing content dependencies declared in configuration entities.\n   *\n   * @return array\n   *   A list of missing content dependencies. The array is keyed by UUID. Each\n   *   value is an array with the following keys: 'entity_type', 'bundle' and\n   *   'uuid'.\n   *\/",167],["T_WHITESPACE","\n  ",174],["T_PUBLIC","public",175],["T_WHITESPACE"," ",175],["T_FUNCTION","function",175],["T_WHITESPACE"," ",175],["T_STRING","findMissingContentDependencies",175],"(",")",";",["T_WHITESPACE","\n\n",175],"}",["T_WHITESPACE","\n",177]]