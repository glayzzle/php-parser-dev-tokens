[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for configuration storage.\n *\n * Classes implementing this interface allow reading and writing configuration\n * data from and to the storage.\n *\/",5],["T_WHITESPACE","\n",10],["T_INTERFACE","interface",11],["T_WHITESPACE"," ",11],["T_STRING","StorageInterface",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * The default collection name.\n   *\/",13],["T_WHITESPACE","\n  ",15],["T_CONST","const",16],["T_WHITESPACE"," ",16],["T_STRING","DEFAULT_COLLECTION",16],["T_WHITESPACE"," ",16],"=",["T_WHITESPACE"," ",16],["T_CONSTANT_ENCAPSED_STRING","''",16],";",["T_WHITESPACE","\n\n  ",16],["T_DOC_COMMENT","\/**\n   * Returns whether a configuration object exists.\n   *\n   * @param string $name\n   *   The name of a configuration object to test.\n   *\n   * @return bool\n   *   TRUE if the configuration object exists, FALSE otherwise.\n   *\/",18],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","exists",27],"(",["T_VARIABLE","$name",27],")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Reads configuration data from the storage.\n   *\n   * @param string $name\n   *   The name of a configuration object to load.\n   *\n   * @return array|bool\n   *   The configuration data stored for the configuration object name. If no\n   *   configuration data exists for the given name, FALSE is returned.\n   *\/",29],["T_WHITESPACE","\n  ",38],["T_PUBLIC","public",39],["T_WHITESPACE"," ",39],["T_FUNCTION","function",39],["T_WHITESPACE"," ",39],["T_STRING","read",39],"(",["T_VARIABLE","$name",39],")",";",["T_WHITESPACE","\n\n  ",39],["T_DOC_COMMENT","\/**\n   * Reads configuration data from the storage.\n   *\n   * @param array $names\n   *   List of names of the configuration objects to load.\n   *\n   * @return array\n   *   A list of the configuration data stored for the configuration object name\n   *   that could be loaded for the passed list of names.\n   *\/",41],["T_WHITESPACE","\n  ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","readMultiple",51],"(",["T_ARRAY","array",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$names",51],")",";",["T_WHITESPACE","\n\n  ",51],["T_DOC_COMMENT","\/**\n   * Writes configuration data to the storage.\n   *\n   * @param string $name\n   *   The name of a configuration object to save.\n   * @param array $data\n   *   The configuration data to write.\n   *\n   * @return bool\n   *   TRUE on success, FALSE in case of an error.\n   *\n   * @throws \\Drupal\\Core\\Config\\StorageException\n   *   If the back-end storage does not exist and cannot be created.\n   *\/",53],["T_WHITESPACE","\n  ",66],["T_PUBLIC","public",67],["T_WHITESPACE"," ",67],["T_FUNCTION","function",67],["T_WHITESPACE"," ",67],["T_STRING","write",67],"(",["T_VARIABLE","$name",67],",",["T_WHITESPACE"," ",67],["T_ARRAY","array",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$data",67],")",";",["T_WHITESPACE","\n\n  ",67],["T_DOC_COMMENT","\/**\n   * Deletes a configuration object from the storage.\n   *\n   * @param string $name\n   *   The name of a configuration object to delete.\n   *\n   * @return bool\n   *   TRUE on success, FALSE otherwise.\n   *\/",69],["T_WHITESPACE","\n  ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","delete",78],"(",["T_VARIABLE","$name",78],")",";",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Renames a configuration object in the storage.\n   *\n   * @param string $name\n   *   The name of a configuration object to rename.\n   * @param string $new_name\n   *   The new name of a configuration object.\n   *\n   * @return bool\n   *   TRUE on success, FALSE otherwise.\n   *\/",80],["T_WHITESPACE","\n  ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","rename",91],"(",["T_VARIABLE","$name",91],",",["T_WHITESPACE"," ",91],["T_VARIABLE","$new_name",91],")",";",["T_WHITESPACE","\n\n  ",91],["T_DOC_COMMENT","\/**\n   * Encodes configuration data into the storage-specific format.\n   *\n   * This is a publicly accessible static method to allow for alternative\n   * usages in data conversion scripts and also tests.\n   *\n   * @param array $data\n   *   The configuration data to encode.\n   *\n   * @return string\n   *   The encoded configuration data.\n   *\/",93],["T_WHITESPACE","\n  ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","encode",105],"(",["T_VARIABLE","$data",105],")",";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * Decodes configuration data from the storage-specific format.\n   *\n   * This is a publicly accessible static method to allow for alternative\n   * usages in data conversion scripts and also tests.\n   *\n   * @param string $raw\n   *   The raw configuration data string to decode.\n   *\n   * @return array\n   *   The decoded configuration data as an associative array.\n   *\/",107],["T_WHITESPACE","\n  ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","decode",119],"(",["T_VARIABLE","$raw",119],")",";",["T_WHITESPACE","\n\n  ",119],["T_DOC_COMMENT","\/**\n   * Gets configuration object names starting with a given prefix.\n   *\n   * Given the following configuration objects:\n   * - node.type.article\n   * - node.type.page\n   *\n   * Passing the prefix 'node.type.' will return an array containing the above\n   * names.\n   *\n   * @param string $prefix\n   *   (optional) The prefix to search for. If omitted, all configuration object\n   *   names that exist are returned.\n   *\n   * @return array\n   *   An array containing matching configuration object names.\n   *\/",121],["T_WHITESPACE","\n  ",137],["T_PUBLIC","public",138],["T_WHITESPACE"," ",138],["T_FUNCTION","function",138],["T_WHITESPACE"," ",138],["T_STRING","listAll",138],"(",["T_VARIABLE","$prefix",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","''",138],")",";",["T_WHITESPACE","\n\n  ",138],["T_DOC_COMMENT","\/**\n   * Deletes configuration objects whose names start with a given prefix.\n   *\n   * Given the following configuration object names:\n   * - node.type.article\n   * - node.type.page\n   *\n   * Passing the prefix 'node.type.' will delete the above configuration\n   * objects.\n   *\n   * @param string $prefix\n   *   (optional) The prefix to search for. If omitted, all configuration\n   *   objects that exist will be deleted.\n   *\n   * @return bool\n   *   TRUE on success, FALSE otherwise.\n   *\/",140],["T_WHITESPACE","\n  ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","deleteAll",157],"(",["T_VARIABLE","$prefix",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_CONSTANT_ENCAPSED_STRING","''",157],")",";",["T_WHITESPACE","\n\n  ",157],["T_DOC_COMMENT","\/**\n   * Creates a collection on the storage.\n   *\n   * A configuration storage can contain multiple sets of configuration objects\n   * in partitioned collections. The collection name identifies the current\n   * collection used.\n   *\n   * Implementations of this method must provide a new instance to avoid side\n   * effects caused by the fact that Config objects have their storage injected.\n   *\n   * @param string $collection\n   *   The collection name. Valid collection names conform to the following\n   *   regex [a-zA-Z_.]. A storage does not need to have a collection set.\n   *   However, if a collection is set, then storage should use it to store\n   *   configuration in a way that allows retrieval of configuration for a\n   *   particular collection.\n   *\n   * @return \\Drupal\\Core\\Config\\StorageInterface\n   *   A new instance of the storage backend with the collection set.\n   *\/",159],["T_WHITESPACE","\n  ",178],["T_PUBLIC","public",179],["T_WHITESPACE"," ",179],["T_FUNCTION","function",179],["T_WHITESPACE"," ",179],["T_STRING","createCollection",179],"(",["T_VARIABLE","$collection",179],")",";",["T_WHITESPACE","\n\n  ",179],["T_DOC_COMMENT","\/**\n   * Gets the existing collections.\n   *\n   * A configuration storage can contain multiple sets of configuration objects\n   * in partitioned collections. The collection key name identifies the current\n   * collection used.\n   *\n   * @return array\n   *   An array of existing collection names.\n   *\/",181],["T_WHITESPACE","\n  ",190],["T_PUBLIC","public",191],["T_WHITESPACE"," ",191],["T_FUNCTION","function",191],["T_WHITESPACE"," ",191],["T_STRING","getAllCollectionNames",191],"(",")",";",["T_WHITESPACE","\n\n  ",191],["T_DOC_COMMENT","\/**\n   * Gets the name of the current collection the storage is using.\n   *\n   * @return string\n   *   The current collection name.\n   *\/",193],["T_WHITESPACE","\n  ",198],["T_PUBLIC","public",199],["T_WHITESPACE"," ",199],["T_FUNCTION","function",199],["T_WHITESPACE"," ",199],["T_STRING","getCollectionName",199],"(",")",";",["T_WHITESPACE","\n\n",199],"}",["T_WHITESPACE","\n",201]]