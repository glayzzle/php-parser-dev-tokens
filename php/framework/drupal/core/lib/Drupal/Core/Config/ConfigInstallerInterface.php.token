[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for classes that install config.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","ConfigInstallerInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Installs the default configuration of a given extension.\n   *\n   * When an extension is installed, it searches all the default configuration\n   * directories for all other extensions to locate any configuration with its\n   * name prefix. For example, the Node module provides the frontpage view as a\n   * default configuration file:\n   * core\/modules\/node\/config\/install\/views.view.frontpage.yml\n   * When the Views module is installed after the Node module is already\n   * enabled, the frontpage view will be installed.\n   *\n   * Additionally, the default configuration directory for the extension being\n   * installed is searched to discover if it contains default configuration\n   * that is owned by other enabled extensions. So, the frontpage view will also\n   * be installed when the Node module is installed after Views.\n   *\n   * @param string $type\n   *   The extension type; e.g., 'module' or 'theme'.\n   * @param string $name\n   *   The name of the module or theme to install default configuration for.\n   *\n   * @see \\Drupal\\Core\\Config\\ExtensionInstallStorage\n   *\/",10],["T_WHITESPACE","\n  ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","installDefaultConfig",33],"(",["T_VARIABLE","$type",33],",",["T_WHITESPACE"," ",33],["T_VARIABLE","$name",33],")",";",["T_WHITESPACE","\n\n  ",33],["T_DOC_COMMENT","\/**\n   * Installs optional configuration.\n   *\n   * Optional configuration is only installed if:\n   * - the configuration does not exist already.\n   * - it's a configuration entity.\n   * - its dependencies can be met.\n   *\n   * @param \\Drupal\\Core\\Config\\StorageInterface $storage\n   *   (optional) The configuration storage to search for optional\n   *   configuration. If not provided, all enabled extension's optional\n   *   configuration directories will be searched.\n   * @param array $dependency\n   *   (optional) If set, ensures that the configuration being installed has\n   *   this dependency. The format is dependency type as the key ('module',\n   *   'theme', or 'config') and the dependency name as the value\n   *   ('book', 'bartik', 'views.view.frontpage').\n   *\/",35],["T_WHITESPACE","\n  ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","installOptionalConfig",53],"(",["T_STRING","StorageInterface",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$storage",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_STRING","NULL",53],",",["T_WHITESPACE"," ",53],["T_VARIABLE","$dependency",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],"[","]",")",";",["T_WHITESPACE","\n\n  ",53],["T_DOC_COMMENT","\/**\n   * Installs all default configuration in the specified collection.\n   *\n   * The function is useful if the site needs to respond to an event that has\n   * just created another collection and we need to check all the installed\n   * extensions for any matching configuration. For example, if a language has\n   * just been created.\n   *\n   * @param string $collection\n   *   The configuration collection.\n   *\/",55],["T_WHITESPACE","\n  ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","installCollectionDefaultConfig",66],"(",["T_VARIABLE","$collection",66],")",";",["T_WHITESPACE","\n\n  ",66],["T_DOC_COMMENT","\/**\n   * Sets the configuration storage that provides the default configuration.\n   *\n   * @param \\Drupal\\Core\\Config\\StorageInterface $storage\n   *\n   * @return $this\n   *\/",68],["T_WHITESPACE","\n  ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","setSourceStorage",75],"(",["T_STRING","StorageInterface",75],["T_WHITESPACE"," ",75],["T_VARIABLE","$storage",75],")",";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * Sets the status of the isSyncing flag.\n   *\n   * @param bool $status\n   *   The status of the sync flag.\n   *\n   * @return $this\n   *\/",77],["T_WHITESPACE","\n  ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","setSyncing",85],"(",["T_VARIABLE","$status",85],")",";",["T_WHITESPACE","\n\n  ",85],["T_DOC_COMMENT","\/**\n   * Gets the syncing state.\n   *\n   * @return bool\n   *   Returns TRUE is syncing flag set.\n   *\/",87],["T_WHITESPACE","\n  ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","isSyncing",93],"(",")",";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * Checks the configuration that will be installed for an extension.\n   *\n   * @param string $type\n   *   Type of extension to install.\n   * @param string $name\n   *   Name of extension to install.\n   *\n   * @throws \\Drupal\\Core\\Config\\UnmetDependenciesException\n   * @throws \\Drupal\\Core\\Config\\PreExistingConfigException\n   *\/",95],["T_WHITESPACE","\n  ",105],["T_PUBLIC","public",106],["T_WHITESPACE"," ",106],["T_FUNCTION","function",106],["T_WHITESPACE"," ",106],["T_STRING","checkConfigurationToInstall",106],"(",["T_VARIABLE","$type",106],",",["T_WHITESPACE"," ",106],["T_VARIABLE","$name",106],")",";",["T_WHITESPACE","\n\n",106],"}",["T_WHITESPACE","\n",108]]