[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines events for the configuration system.\n *\n * @see \\Drupal\\Core\\Config\\ConfigCrudEvent\n *\/",5],["T_WHITESPACE","\n",9],["T_FINAL","final",10],["T_WHITESPACE"," ",10],["T_CLASS","class",10],["T_WHITESPACE"," ",10],["T_STRING","ConfigEvents",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Name of the event fired when saving a configuration object.\n   *\n   * This event allows modules to perform an action whenever a configuration\n   * object is saved. The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigCrudEvent instance.\n   *\n   * See hook_update_N() documentation for safe configuration API usage and\n   * restrictions as this event will be fired when configuration is saved by\n   * hook_update_N().\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigCrudEvent\n   * @see \\Drupal\\Core\\Config\\Config::save()\n   * @see \\Drupal\\Core\\Config\\ConfigFactory::onConfigSave()\n   * @see hook_update_N()\n   *\n   * @var string\n   *\/",12],["T_WHITESPACE","\n  ",31],["T_CONST","const",32],["T_WHITESPACE"," ",32],["T_STRING","SAVE",32],["T_WHITESPACE"," ",32],"=",["T_WHITESPACE"," ",32],["T_CONSTANT_ENCAPSED_STRING","'config.save'",32],";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Name of the event fired when deleting a configuration object.\n   *\n   * This event allows modules to perform an action whenever a configuration\n   * object is deleted. The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigCrudEvent instance.\n   *\n   * See hook_update_N() documentation for safe configuration API usage and\n   * restrictions as this event will be fired when configuration is deleted by\n   * hook_update_N().\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigCrudEvent\n   * @see \\Drupal\\Core\\Config\\Config::delete()\n   * @see \\Drupal\\Core\\Config\\ConfigFactory::onConfigDelete()\n   * @see hook_update_N()\n   *\n   * @var string\n   *\/",34],["T_WHITESPACE","\n  ",53],["T_CONST","const",54],["T_WHITESPACE"," ",54],["T_STRING","DELETE",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],["T_CONSTANT_ENCAPSED_STRING","'config.delete'",54],";",["T_WHITESPACE","\n\n  ",54],["T_DOC_COMMENT","\/**\n   * Name of the event fired when renaming a configuration object.\n   *\n   * This event allows modules to perform an action whenever a configuration\n   * object's name is changed. The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigRenameEvent instance.\n   *\n   * See hook_update_N() documentation for safe configuration API usage and\n   * restrictions as this event will be fired when configuration is renamed by\n   * hook_update_N().\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigRenameEvent\n   * @see \\Drupal\\Core\\Config\\ConfigFactoryInterface::rename()\n   * @see hook_update_N()\n   *\n   * @var string\n   *\/",56],["T_WHITESPACE","\n  ",74],["T_CONST","const",75],["T_WHITESPACE"," ",75],["T_STRING","RENAME",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_CONSTANT_ENCAPSED_STRING","'config.rename'",75],";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * Name of the event fired when validating imported configuration.\n   *\n   * This event allows modules to perform additional validation operations when\n   * configuration is being imported. The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigImporterEvent instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigImporterEvent\n   * @see \\Drupal\\Core\\Config\\ConfigImporter::validate().\n   * @see \\Drupal\\Core\\EventSubscriber\\ConfigImportSubscriber::onConfigImporterValidate().\n   *\n   * @var string\n   *\/",77],["T_WHITESPACE","\n  ",91],["T_CONST","const",92],["T_WHITESPACE"," ",92],["T_STRING","IMPORT_VALIDATE",92],["T_WHITESPACE"," ",92],"=",["T_WHITESPACE"," ",92],["T_CONSTANT_ENCAPSED_STRING","'config.importer.validate'",92],";",["T_WHITESPACE","\n\n  ",92],["T_DOC_COMMENT","\/**\n   * Name of the event fired when importing configuration to target storage.\n   *\n   * This event allows modules to perform additional actions when configuration\n   * is imported. The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigImporterEvent instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigImporterEvent\n   * @see \\Drupal\\Core\\Config\\ConfigImporter::import().\n   * @see \\Drupal\\Core\\EventSubscriber\\ConfigSnapshotSubscriber::onConfigImporterImport().\n   *\n   * @var string\n   *\/",94],["T_WHITESPACE","\n  ",108],["T_CONST","const",109],["T_WHITESPACE"," ",109],["T_STRING","IMPORT",109],["T_WHITESPACE"," ",109],"=",["T_WHITESPACE"," ",109],["T_CONSTANT_ENCAPSED_STRING","'config.importer.import'",109],";",["T_WHITESPACE","\n\n  ",109],["T_DOC_COMMENT","\/**\n   * Name of event fired when missing content dependencies are detected.\n   *\n   * Events subscribers are fired as part of the configuration import batch.\n   * Each subscribe should call\n   * \\Drupal\\Core\\Config\\MissingContentEvent::resolveMissingContent() when they\n   * address a missing dependency. To address large amounts of dependencies\n   * subscribers can call\n   * \\Drupal\\Core\\Config\\MissingContentEvent::stopPropagation() which will stop\n   * calling other events and guarantee that the configuration import batch will\n   * fire the event again to continue processing missing content dependencies.\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigImporter::processMissingContent()\n   * @see \\Drupal\\Core\\Config\\MissingContentEvent\n   *\/",111],["T_WHITESPACE","\n  ",125],["T_CONST","const",126],["T_WHITESPACE"," ",126],["T_STRING","IMPORT_MISSING_CONTENT",126],["T_WHITESPACE"," ",126],"=",["T_WHITESPACE"," ",126],["T_CONSTANT_ENCAPSED_STRING","'config.importer.missing_content'",126],";",["T_WHITESPACE","\n\n  ",126],["T_DOC_COMMENT","\/**\n   * Name of event fired to collect information on all config collections.\n   *\n   * This event allows modules to add to the list of configuration collections\n   * retrieved by \\Drupal\\Core\\Config\\ConfigManager::getConfigCollectionInfo().\n   * The event listener method receives a\n   * \\Drupal\\Core\\Config\\ConfigCollectionInfo instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigCollectionInfo\n   * @see \\Drupal\\Core\\Config\\ConfigManager::getConfigCollectionInfo()\n   * @see \\Drupal\\Core\\Config\\ConfigFactoryOverrideBase\n   *\n   * @var string\n   *\/",128],["T_WHITESPACE","\n  ",143],["T_CONST","const",144],["T_WHITESPACE"," ",144],["T_STRING","COLLECTION_INFO",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_CONSTANT_ENCAPSED_STRING","'config.collection_info'",144],";",["T_WHITESPACE","\n\n",144],"}",["T_WHITESPACE","\n",146]]