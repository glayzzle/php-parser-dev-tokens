[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines a common interface for configuration entities.\n *\n * @ingroup config_api\n * @ingroup entity_api\n *\/",7],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","ConfigEntityInterface",13],["T_WHITESPACE"," ",13],["T_EXTENDS","extends",13],["T_WHITESPACE"," ",13],["T_STRING","EntityInterface",13],",",["T_WHITESPACE"," ",13],["T_STRING","ThirdPartySettingsInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Enables the configuration entity.\n   *\n   * @return $this\n   *\/",15],["T_WHITESPACE","\n  ",19],["T_PUBLIC","public",20],["T_WHITESPACE"," ",20],["T_FUNCTION","function",20],["T_WHITESPACE"," ",20],["T_STRING","enable",20],"(",")",";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * Disables the configuration entity.\n   *\n   * @return $this\n   *\/",22],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","disable",27],"(",")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Sets the status of the configuration entity.\n   *\n   * @param bool $status\n   *   The status of the configuration entity.\n   *\n   * @return $this\n   *\/",29],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","setStatus",37],"(",["T_VARIABLE","$status",37],")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Sets the status of the isSyncing flag.\n   *\n   * @param bool $status\n   *   The status of the sync flag.\n   *\n   * @return $this\n   *\/",39],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","setSyncing",47],"(",["T_VARIABLE","$status",47],")",";",["T_WHITESPACE","\n\n  ",47],["T_DOC_COMMENT","\/**\n   * Returns whether the configuration entity is enabled.\n   *\n   * Status implementations for configuration entities should follow these\n   * general rules:\n   *   - Status does not affect the loading of entities. I.e. Disabling\n   *     configuration entities should only have UI\/access implications.\n   *   - It should only take effect when a 'status' key is explicitly declared\n   *     in the entity_keys info of a configuration entity's annotation data.\n   *   - Each entity implementation (entity\/controller) is responsible for\n   *     checking and managing the status.\n   *\n   * @return bool\n   *   Whether the entity is enabled or not.\n   *\/",49],["T_WHITESPACE","\n  ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","status",64],"(",")",";",["T_WHITESPACE","\n\n  ",64],["T_DOC_COMMENT","\/**\n   * Returns whether this entity is being changed as part of an import process.\n   *\n   * If you are writing code that responds to a change in this entity (insert,\n   * update, delete, presave, etc.), and your code would result in a\n   * configuration change (whether related to this configuration entity, another\n   * configuration entity, or non-entity configuration) or your code would\n   * result in a change to this entity itself, you need to check and see if this\n   * entity change is part of an import process, and skip executing your code if\n   * that is the case.\n   *\n   * For example, \\Drupal\\node\\Entity\\NodeType::postSave() adds the default body\n   * field to newly created node type configuration entities, which is a\n   * configuration change. You would not want this code to run during an import,\n   * because imported entities were already given the body field when they were\n   * originally created, and the imported configuration includes all of their\n   * currently-configured fields. On the other hand,\n   * \\Drupal\\field\\Entity\\FieldStorageConfig::preSave() and the methods it calls\n   * make sure that the storage tables are created or updated for the field\n   * storage configuration entity, which is not a configuration change, and it\n   * must be done whether due to an import or not. So, the first method should\n   * check $entity->isSyncing() and skip executing if it returns TRUE, and the\n   * second should not perform this check.\n   *\n   * @return bool\n   *   TRUE if the configuration entity is being created, updated, or deleted\n   *   through the import process.\n   *\/",66],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","isSyncing",94],"(",")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Returns whether this entity is being changed during the uninstall process.\n   *\n   * If you are writing code that responds to a change in this entity (insert,\n   * update, delete, presave, etc.), and your code would result in a\n   * configuration change (whether related to this configuration entity, another\n   * configuration entity, or non-entity configuration) or your code would\n   * result in a change to this entity itself, you need to check and see if this\n   * entity change is part of an uninstall process, and skip executing your code\n   * if that is the case.\n   *\n   * For example, \\Drupal\\language\\Entity\\ConfigurableLanguage::preDelete()\n   * prevents the API from deleting the default language. However during an\n   * uninstall of the language module it is expected that the default language\n   * should be deleted.\n   *\n   * @return bool\n   *\/",96],["T_WHITESPACE","\n  ",113],["T_PUBLIC","public",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","isUninstalling",114],"(",")",";",["T_WHITESPACE","\n\n  ",114],["T_DOC_COMMENT","\/**\n   * Returns the value of a property.\n   *\n   * @param string $property_name\n   *   The name of the property that should be returned.\n   *\n   * @return mixed\n   *   The property if it exists, or NULL otherwise.\n   *\/",116],["T_WHITESPACE","\n  ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","get",125],"(",["T_VARIABLE","$property_name",125],")",";",["T_WHITESPACE","\n\n  ",125],["T_DOC_COMMENT","\/**\n   * Sets the value of a property.\n   *\n   * @param string $property_name\n   *   The name of the property that should be set.\n   * @param mixed $value\n   *   The value the property should be set to.\n   *\n   * @return $this\n   *\/",127],["T_WHITESPACE","\n  ",136],["T_PUBLIC","public",137],["T_WHITESPACE"," ",137],["T_FUNCTION","function",137],["T_WHITESPACE"," ",137],["T_STRING","set",137],"(",["T_VARIABLE","$property_name",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$value",137],")",";",["T_WHITESPACE","\n\n  ",137],["T_DOC_COMMENT","\/**\n   * Calculates dependencies and stores them in the dependency property.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   *\/",139],["T_WHITESPACE","\n  ",145],["T_PUBLIC","public",146],["T_WHITESPACE"," ",146],["T_FUNCTION","function",146],["T_WHITESPACE"," ",146],["T_STRING","calculateDependencies",146],"(",")",";",["T_WHITESPACE","\n\n  ",146],["T_DOC_COMMENT","\/**\n   * Informs the entity that entities it depends on will be deleted.\n   *\n   * This method allows configuration entities to remove dependencies instead\n   * of being deleted themselves. Configuration entities can use this method to\n   * avoid being unnecessarily deleted during an extension uninstallation.\n   * For example, entity displays remove references to widgets and formatters if\n   * the plugin that supplies them depends on a module that is being\n   * uninstalled.\n   *\n   * If this method returns TRUE then the entity needs to be re-saved by the\n   * caller for the changes to take effect. Implementations should not save the\n   * entity.\n   *\n   * @param array $dependencies\n   *   An array of dependencies that will be deleted keyed by dependency type.\n   *   Dependency types are, for example, entity, module and theme.\n   *\n   * @return bool\n   *   TRUE if the entity has been changed as a result, FALSE if not.\n   *\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   * @see \\Drupal\\Core\\Config\\ConfigEntityBase::preDelete()\n   * @see \\Drupal\\Core\\Config\\ConfigManager::uninstall()\n   * @see \\Drupal\\Core\\Entity\\EntityDisplayBase::onDependencyRemoval()\n   *\/",148],["T_WHITESPACE","\n  ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","onDependencyRemoval",174],"(",["T_ARRAY","array",174],["T_WHITESPACE"," ",174],["T_VARIABLE","$dependencies",174],")",";",["T_WHITESPACE","\n\n  ",174],["T_DOC_COMMENT","\/**\n   * Gets the configuration dependencies.\n   *\n   * @return array\n   *   An array of dependencies, keyed by $type.\n   *\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   *\/",176],["T_WHITESPACE","\n  ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","getDependencies",184],"(",")",";",["T_WHITESPACE","\n\n  ",184],["T_DOC_COMMENT","\/**\n   * Checks whether this entity is installable.\n   *\n   * For example, a default view might not be installable if the base table\n   * doesn't exist.\n   *\n   * @retun bool\n   *   TRUE if the entity is installable, FALSE otherwise.\n   *\/",186],["T_WHITESPACE","\n  ",194],["T_PUBLIC","public",195],["T_WHITESPACE"," ",195],["T_FUNCTION","function",195],["T_WHITESPACE"," ",195],["T_STRING","isInstallable",195],"(",")",";",["T_WHITESPACE","\n\n  ",195],["T_DOC_COMMENT","\/**\n   * Sets that the data should be trusted.\n   *\n   * If the data is trusted then dependencies will not be calculated on save and\n   * schema will not be used to cast the values. Generally this is only used\n   * during module and theme installation. Once the config entity has been saved\n   * the data will no longer be marked as trusted. This is an optimization for\n   * creation of configuration during installation.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigInstaller::createConfiguration()\n   *\/",197],["T_WHITESPACE","\n  ",209],["T_PUBLIC","public",210],["T_WHITESPACE"," ",210],["T_FUNCTION","function",210],["T_WHITESPACE"," ",210],["T_STRING","trustData",210],"(",")",";",["T_WHITESPACE","\n\n  ",210],["T_DOC_COMMENT","\/**\n   * Gets whether on not the data is trusted.\n   *\n   * @return bool\n   *   TRUE if the configuration data is trusted, FALSE if not.\n   *\/",212],["T_WHITESPACE","\n  ",217],["T_PUBLIC","public",218],["T_WHITESPACE"," ",218],["T_FUNCTION","function",218],["T_WHITESPACE"," ",218],["T_STRING","hasTrustedData",218],"(",")",";",["T_WHITESPACE","\n\n",218],"}",["T_WHITESPACE","\n",220]]