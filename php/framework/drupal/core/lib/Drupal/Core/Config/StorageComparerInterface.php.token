[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for comparison of configuration storage objects.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","StorageComparerInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Gets the configuration source storage.\n   *\n   * @param string $collection\n   *   (optional) The storage collection to use. Defaults to the\n   *   default collection.\n   *\n   * @return \\Drupal\\Core\\Config\\StorageInterface\n   *   Storage object used to read configuration.\n   *\/",10],["T_WHITESPACE","\n  ",19],["T_PUBLIC","public",20],["T_WHITESPACE"," ",20],["T_FUNCTION","function",20],["T_WHITESPACE"," ",20],["T_STRING","getSourceStorage",20],"(",["T_VARIABLE","$collection",20],["T_WHITESPACE"," ",20],"=",["T_WHITESPACE"," ",20],["T_STRING","StorageInterface",20],["T_DOUBLE_COLON","::",20],["T_STRING","DEFAULT_COLLECTION",20],")",";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * Gets the configuration target storage.\n   *\n   * @param string $collection\n   *   (optional) The storage collection to use. Defaults to the\n   *   default collection.\n   *\n   * @return \\Drupal\\Core\\Config\\StorageInterface\n   *   Storage object used to write configuration.\n   *\/",22],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],["T_STRING","getTargetStorage",32],"(",["T_VARIABLE","$collection",32],["T_WHITESPACE"," ",32],"=",["T_WHITESPACE"," ",32],["T_STRING","StorageInterface",32],["T_DOUBLE_COLON","::",32],["T_STRING","DEFAULT_COLLECTION",32],")",";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Gets an empty changelist.\n   *\n   * @return array\n   *   An empty changelist array.\n   *\/",34],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","getEmptyChangelist",40],"(",")",";",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Gets the list of differences to import.\n   *\n   * @param string $op\n   *   (optional) A change operation. Either delete, create or update. If\n   *   supplied the returned list will be limited to this operation.\n   * @param string $collection\n   *   (optional) The collection to get the changelist for. Defaults to the\n   *   default collection.\n   *\n   * @return array\n   *   An array of config changes that are yet to be imported.\n   *\/",42],["T_WHITESPACE","\n  ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","getChangelist",55],"(",["T_VARIABLE","$op",55],["T_WHITESPACE"," ",55],"=",["T_WHITESPACE"," ",55],["T_STRING","NULL",55],",",["T_WHITESPACE"," ",55],["T_VARIABLE","$collection",55],["T_WHITESPACE"," ",55],"=",["T_WHITESPACE"," ",55],["T_STRING","StorageInterface",55],["T_DOUBLE_COLON","::",55],["T_STRING","DEFAULT_COLLECTION",55],")",";",["T_WHITESPACE","\n\n  ",55],["T_DOC_COMMENT","\/**\n   * Recalculates the differences.\n   *\n   * @return \\Drupal\\Core\\Config\\StorageComparerInterface\n   *   An object which implements the StorageComparerInterface.\n   *\/",57],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","reset",63],"(",")",";",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * Checks if there are any operations with changes to process.\n   *\n   * Until the changelist has been calculated this will always be FALSE.\n   *\n   * @return bool\n   *   TRUE if there are changes to process and FALSE if not.\n   *\n   * @see \\Drupal\\Core\\Config\\StorageComparerInterface::createChangelist()\n   *\/",65],["T_WHITESPACE","\n  ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","hasChanges",75],"(",")",";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * Validates that the system.site::uuid in the source and target match.\n   *\n   * @return bool\n   *   TRUE if identical, FALSE if not.\n   *\/",77],["T_WHITESPACE","\n  ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_FUNCTION","function",83],["T_WHITESPACE"," ",83],["T_STRING","validateSiteUuid",83],"(",")",";",["T_WHITESPACE","\n\n  ",83],["T_DOC_COMMENT","\/**\n   * Moves a rename operation to an update.\n   *\n   * @param string $rename\n   *   The rename name, as provided by ConfigImporter::createRenameName().\n   * @param string $collection\n   *   (optional) The collection where the configuration is stored. Defaults to\n   *   the default collection.\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigImporter::createRenameName()\n   *\/",85],["T_WHITESPACE","\n  ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","moveRenameToUpdate",96],"(",["T_VARIABLE","$rename",96],",",["T_WHITESPACE"," ",96],["T_VARIABLE","$collection",96],["T_WHITESPACE"," ",96],"=",["T_WHITESPACE"," ",96],["T_STRING","StorageInterface",96],["T_DOUBLE_COLON","::",96],["T_STRING","DEFAULT_COLLECTION",96],")",";",["T_WHITESPACE","\n\n  ",96],["T_DOC_COMMENT","\/**\n   * Extracts old and new configuration names from a configuration change name.\n   *\n   * @param string $name\n   *   The configuration change name, as provided by\n   *   ConfigImporter::createRenameName().\n   *\n   * @return array\n   *   An associative array of configuration names. The array keys are\n   *   'old_name' and 'new_name' representing the old and new configuration\n   *   object names during a rename operation.\n   *\n   * @see \\Drupal\\Core\\Config\\StorageComparer::createRenameNames()\n   *\/",98],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","extractRenameNames",112],"(",["T_VARIABLE","$name",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Gets the existing collections from both the target and source storage.\n   *\n   * @param bool $include_default\n   *   (optional) Include the default collection. Defaults to TRUE.\n   *\n   * @return array\n   *   An array of existing collection names.\n   *\/",114],["T_WHITESPACE","\n  ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","getAllCollectionNames",123],"(",["T_VARIABLE","$include_default",123],["T_WHITESPACE"," ",123],"=",["T_WHITESPACE"," ",123],["T_STRING","TRUE",123],")",";",["T_WHITESPACE","\n\n",123],"}",["T_WHITESPACE","\n",125]]