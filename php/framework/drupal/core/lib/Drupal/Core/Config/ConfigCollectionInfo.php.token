[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EventDispatcher",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Event",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Gets information on all the possible configuration collections.\n *\/",7],["T_WHITESPACE","\n",9],["T_CLASS","class",10],["T_WHITESPACE"," ",10],["T_STRING","ConfigCollectionInfo",10],["T_WHITESPACE"," ",10],["T_EXTENDS","extends",10],["T_WHITESPACE"," ",10],["T_STRING","Event",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Configuration collection information keyed by collection name.\n   *\n   * The value is either the configuration factory override that is responsible\n   * for the collection or null if there is not one.\n   *\n   * @var array\n   *\/",12],["T_WHITESPACE","\n  ",19],["T_PROTECTED","protected",20],["T_WHITESPACE"," ",20],["T_VARIABLE","$collections",20],["T_WHITESPACE"," ",20],"=",["T_WHITESPACE"," ",20],["T_ARRAY","array",20],"(",")",";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * Adds a collection to the list of possible collections.\n   *\n   * @param string $collection\n   *   Collection name to add.\n   * @param \\Drupal\\Core\\Config\\ConfigFactoryOverrideInterface $override_service\n   *   (optional) The configuration factory override service responsible for the\n   *   collection.\n   *\n   * @throws \\InvalidArgumentException\n   *   Exception thrown if $collection is equal to\n   *   \\Drupal\\Core\\Config\\StorageInterface::DEFAULT_COLLECTION.\n   *\/",22],["T_WHITESPACE","\n  ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","addCollection",35],"(",["T_VARIABLE","$collection",35],",",["T_WHITESPACE"," ",35],["T_STRING","ConfigFactoryOverrideInterface",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$override_service",35],["T_WHITESPACE"," ",35],"=",["T_WHITESPACE"," ",35],["T_STRING","NULL",35],")",["T_WHITESPACE"," ",35],"{",["T_WHITESPACE","\n    ",35],["T_IF","if",36],["T_WHITESPACE"," ",36],"(",["T_VARIABLE","$collection",36],["T_WHITESPACE"," ",36],["T_IS_EQUAL","==",36],["T_WHITESPACE"," ",36],["T_STRING","StorageInterface",36],["T_DOUBLE_COLON","::",36],["T_STRING","DEFAULT_COLLECTION",36],")",["T_WHITESPACE"," ",36],"{",["T_WHITESPACE","\n      ",36],["T_THROW","throw",37],["T_WHITESPACE"," ",37],["T_NEW","new",37],["T_WHITESPACE"," ",37],["T_NS_SEPARATOR","\\",37],["T_STRING","InvalidArgumentException",37],"(",["T_CONSTANT_ENCAPSED_STRING","'Can not add the default collection to the ConfigCollectionInfo object'",37],")",";",["T_WHITESPACE","\n    ",37],"}",["T_WHITESPACE","\n    ",38],["T_VARIABLE","$this",39],["T_OBJECT_OPERATOR","->",39],["T_STRING","collections",39],"[",["T_VARIABLE","$collection",39],"]",["T_WHITESPACE"," ",39],"=",["T_WHITESPACE"," ",39],["T_VARIABLE","$override_service",39],";",["T_WHITESPACE","\n  ",39],"}",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Gets the list of possible collection names.\n   *\n   * @param bool $include_default\n   *   (Optional) Include the default collection. Defaults to TRUE.\n   *\n   * @return array\n   *   The list of possible collection names.\n   *\/",42],["T_WHITESPACE","\n  ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","getCollectionNames",51],"(",["T_VARIABLE","$include_default",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],["T_STRING","TRUE",51],")",["T_WHITESPACE"," ",51],"{",["T_WHITESPACE","\n    ",51],["T_VARIABLE","$collection_names",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],["T_STRING","array_keys",52],"(",["T_VARIABLE","$this",52],["T_OBJECT_OPERATOR","->",52],["T_STRING","collections",52],")",";",["T_WHITESPACE","\n    ",52],["T_STRING","sort",53],"(",["T_VARIABLE","$collection_names",53],")",";",["T_WHITESPACE","\n    ",53],["T_IF","if",54],["T_WHITESPACE"," ",54],"(",["T_VARIABLE","$include_default",54],")",["T_WHITESPACE"," ",54],"{",["T_WHITESPACE","\n      ",54],["T_STRING","array_unshift",55],"(",["T_VARIABLE","$collection_names",55],",",["T_WHITESPACE"," ",55],["T_STRING","StorageInterface",55],["T_DOUBLE_COLON","::",55],["T_STRING","DEFAULT_COLLECTION",55],")",";",["T_WHITESPACE","\n    ",55],"}",["T_WHITESPACE","\n    ",56],["T_RETURN","return",57],["T_WHITESPACE"," ",57],["T_VARIABLE","$collection_names",57],";",["T_WHITESPACE","\n  ",57],"}",["T_WHITESPACE","\n\n  ",58],["T_DOC_COMMENT","\/**\n   * Gets the config factory override service responsible for the collection.\n   *\n   * @param string $collection\n   *   The configuration collection.\n   *\n   * @return \\Drupal\\Core\\Config\\ConfigFactoryOverrideInterface|null\n   *   The override service responsible for the collection if one exists. NULL\n   *   if not.\n   *\/",60],["T_WHITESPACE","\n  ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","getOverrideService",70],"(",["T_VARIABLE","$collection",70],")",["T_WHITESPACE"," ",70],"{",["T_WHITESPACE","\n    ",70],["T_RETURN","return",71],["T_WHITESPACE"," ",71],["T_ISSET","isset",71],"(",["T_VARIABLE","$this",71],["T_OBJECT_OPERATOR","->",71],["T_STRING","collections",71],"[",["T_VARIABLE","$collection",71],"]",")",["T_WHITESPACE"," ",71],"?",["T_WHITESPACE"," ",71],["T_VARIABLE","$this",71],["T_OBJECT_OPERATOR","->",71],["T_STRING","collections",71],"[",["T_VARIABLE","$collection",71],"]",["T_WHITESPACE"," ",71],":",["T_WHITESPACE"," ",71],["T_STRING","NULL",71],";",["T_WHITESPACE","\n  ",71],"}",["T_WHITESPACE","\n\n",72],"}",["T_WHITESPACE","\n",74]]