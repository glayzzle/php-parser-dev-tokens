[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Config",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines the interface for a configuration factory override object.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","ConfigFactoryOverrideInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Returns config overrides.\n   *\n   * @param array $names\n   *   A list of configuration names that are being loaded.\n   *\n   * @return array\n   *   An array keyed by configuration name of override data. Override data\n   *   contains a nested array structure of overrides.\n   *\/",10],["T_WHITESPACE","\n  ",19],["T_PUBLIC","public",20],["T_WHITESPACE"," ",20],["T_FUNCTION","function",20],["T_WHITESPACE"," ",20],["T_STRING","loadOverrides",20],"(",["T_VARIABLE","$names",20],")",";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * The string to append to the configuration static cache name.\n   *\n   * @return string\n   *   A string to append to the configuration static cache name.\n   *\/",22],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getCacheSuffix",28],"(",")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Creates a configuration object for use during install and synchronization.\n   *\n   * If the overrider stores its overrides in configuration collections then\n   * it can have its own implementation of\n   * \\Drupal\\Core\\Config\\StorableConfigBase. Configuration overriders can link\n   * themselves to a configuration collection by listening to the\n   * \\Drupal\\Core\\Config\\ConfigEvents::COLLECTION_INFO event and adding the\n   * collections they are responsible for. Doing this will allow installation\n   * and synchronization to use the overrider's implementation of\n   * StorableConfigBase.\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigCollectionInfo\n   * @see \\Drupal\\Core\\Config\\ConfigImporter::importConfig()\n   * @see \\Drupal\\Core\\Config\\ConfigInstaller::createConfiguration()\n   *\n   * @param string $name\n   *   The configuration object name.\n   * @param string $collection\n   *   The configuration collection.\n   *\n   * @return \\Drupal\\Core\\Config\\StorableConfigBase\n   *   The configuration object for the provided name and collection.\n   *\/",30],["T_WHITESPACE","\n  ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","createConfigObject",54],"(",["T_VARIABLE","$name",54],",",["T_WHITESPACE"," ",54],["T_VARIABLE","$collection",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],["T_STRING","StorageInterface",54],["T_DOUBLE_COLON","::",54],["T_STRING","DEFAULT_COLLECTION",54],")",";",["T_WHITESPACE","\n\n  ",54],["T_DOC_COMMENT","\/**\n   * Gets the cacheability metadata associated with the config factory override.\n   *\n   * @param string $name\n   *   The name of the configuration override to get metadata for.\n   *\n   * @return \\Drupal\\Core\\Cache\\CacheableMetadata\n   *   A cacheable metadata object.\n   *\/",56],["T_WHITESPACE","\n  ",64],["T_PUBLIC","public",65],["T_WHITESPACE"," ",65],["T_FUNCTION","function",65],["T_WHITESPACE"," ",65],["T_STRING","getCacheableMetadata",65],"(",["T_VARIABLE","$name",65],")",";",["T_WHITESPACE","\n\n",65],"}",["T_WHITESPACE","\n",67]]