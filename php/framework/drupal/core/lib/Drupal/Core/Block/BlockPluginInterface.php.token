[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Block",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","DerivativeInspectionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Cache",6],["T_NS_SEPARATOR","\\",6],["T_STRING","CacheableDependencyInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Component",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Plugin",7],["T_NS_SEPARATOR","\\",7],["T_STRING","PluginInspectionInterface",7],";",["T_WHITESPACE","\n",7],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Component",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Plugin",8],["T_NS_SEPARATOR","\\",8],["T_STRING","ConfigurablePluginInterface",8],";",["T_WHITESPACE","\n",8],["T_USE","use",9],["T_WHITESPACE"," ",9],["T_STRING","Drupal",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Core",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Form",9],["T_NS_SEPARATOR","\\",9],["T_STRING","FormStateInterface",9],";",["T_WHITESPACE","\n",9],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Drupal",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Core",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Plugin",10],["T_NS_SEPARATOR","\\",10],["T_STRING","PluginFormInterface",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","Drupal",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Core",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Session",11],["T_NS_SEPARATOR","\\",11],["T_STRING","AccountInterface",11],";",["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * Defines the required interface for all block plugins.\n *\n * @todo Add detailed documentation here explaining the block system's\n *   architecture and the relationships between the various objects, including\n *   brief references to the important components that are not coupled to the\n *   interface.\n *\n * @ingroup block_api\n *\/",13],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","BlockPluginInterface",23],["T_WHITESPACE"," ",23],["T_EXTENDS","extends",23],["T_WHITESPACE"," ",23],["T_STRING","ConfigurablePluginInterface",23],",",["T_WHITESPACE"," ",23],["T_STRING","PluginFormInterface",23],",",["T_WHITESPACE"," ",23],["T_STRING","PluginInspectionInterface",23],",",["T_WHITESPACE"," ",23],["T_STRING","CacheableDependencyInterface",23],",",["T_WHITESPACE"," ",23],["T_STRING","DerivativeInspectionInterface",23],["T_WHITESPACE"," ",23],"{",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Returns the user-facing block label.\n   *\n   * @todo Provide other specific label-related methods in\n   *   https:\/\/www.drupal.org\/node\/2025649.\n   *\n   * @return string\n   *   The block label.\n   *\/",25],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","label",34],"(",")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Indicates whether the block should be shown.\n   *\n   * This method allows base implementations to add general access restrictions\n   * that should apply to all extending block plugins.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   The user session for which to check access.\n   * @param bool $return_as_object\n   *   (optional) Defaults to FALSE.\n   *\n   * @return bool|\\Drupal\\Core\\Access\\AccessResultInterface\n   *   The access result. Returns a boolean if $return_as_object is FALSE (this\n   *   is the default) and otherwise an AccessResultInterface object.\n   *   When a boolean is returned, the result of AccessInterface::isAllowed() is\n   *   returned, i.e. TRUE means access is explicitly allowed, FALSE means\n   *   access is either explicitly forbidden or \"no opinion\".\n   *\n   * @see \\Drupal\\block\\BlockAccessControlHandler\n   *\/",36],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","access",56],"(",["T_STRING","AccountInterface",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$account",56],",",["T_WHITESPACE"," ",56],["T_VARIABLE","$return_as_object",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_STRING","FALSE",56],")",";",["T_WHITESPACE","\n\n  ",56],["T_DOC_COMMENT","\/**\n   * Builds and returns the renderable array for this block plugin.\n   *\n   * If a block should not be rendered because it has no content, then this\n   * method must also ensure to return no content: it must then only return an\n   * empty array, or an empty array with #cache set (with cacheability metadata\n   * indicating the circumstances for it being empty).\n   *\n   * @return array\n   *   A renderable array representing the content of the block.\n   *\n   * @see \\Drupal\\block\\BlockViewBuilder\n   *\/",58],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","build",71],"(",")",";",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Sets a particular value in the block settings.\n   *\n   * @param string $key\n   *   The key of PluginBase::$configuration to set.\n   * @param mixed $value\n   *   The value to set for the provided key.\n   *\n   * @todo This doesn't belong here. Move this into a new base class in\n   *   https:\/\/www.drupal.org\/node\/1764380.\n   * @todo This does not set a value in \\Drupal::config(), so the name is confusing.\n   *\n   * @see \\Drupal\\Component\\Plugin\\PluginBase::$configuration\n   *\/",73],["T_WHITESPACE","\n  ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","setConfigurationValue",87],"(",["T_VARIABLE","$key",87],",",["T_WHITESPACE"," ",87],["T_VARIABLE","$value",87],")",";",["T_WHITESPACE","\n\n  ",87],["T_DOC_COMMENT","\/**\n   * Returns the configuration form elements specific to this block plugin.\n   *\n   * Blocks that need to add form elements to the normal block configuration\n   * form should implement this method.\n   *\n   * @param array $form\n   *   The form definition array for the block configuration form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return array $form\n   *   The renderable form array representing the entire configuration form.\n   *\/",89],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","blockForm",103],"(",["T_VARIABLE","$form",103],",",["T_WHITESPACE"," ",103],["T_STRING","FormStateInterface",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$form_state",103],")",";",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Adds block type-specific validation for the block form.\n   *\n   * Note that this method takes the form structure and form state for the full\n   * block configuration form as arguments, not just the elements defined in\n   * BlockPluginInterface::blockForm().\n   *\n   * @param array $form\n   *   The form definition array for the full block configuration form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @see \\Drupal\\Core\\Block\\BlockPluginInterface::blockForm()\n   * @see \\Drupal\\Core\\Block\\BlockPluginInterface::blockSubmit()\n   *\/",105],["T_WHITESPACE","\n  ",119],["T_PUBLIC","public",120],["T_WHITESPACE"," ",120],["T_FUNCTION","function",120],["T_WHITESPACE"," ",120],["T_STRING","blockValidate",120],"(",["T_VARIABLE","$form",120],",",["T_WHITESPACE"," ",120],["T_STRING","FormStateInterface",120],["T_WHITESPACE"," ",120],["T_VARIABLE","$form_state",120],")",";",["T_WHITESPACE","\n\n  ",120],["T_DOC_COMMENT","\/**\n   * Adds block type-specific submission handling for the block form.\n   *\n   * Note that this method takes the form structure and form state for the full\n   * block configuration form as arguments, not just the elements defined in\n   * BlockPluginInterface::blockForm().\n   *\n   * @param array $form\n   *   The form definition array for the full block configuration form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @see \\Drupal\\Core\\Block\\BlockPluginInterface::blockForm()\n   * @see \\Drupal\\Core\\Block\\BlockPluginInterface::blockValidate()\n   *\/",122],["T_WHITESPACE","\n  ",136],["T_PUBLIC","public",137],["T_WHITESPACE"," ",137],["T_FUNCTION","function",137],["T_WHITESPACE"," ",137],["T_STRING","blockSubmit",137],"(",["T_VARIABLE","$form",137],",",["T_WHITESPACE"," ",137],["T_STRING","FormStateInterface",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$form_state",137],")",";",["T_WHITESPACE","\n\n  ",137],["T_DOC_COMMENT","\/**\n   * Suggests a machine name to identify an instance of this block.\n   *\n   * The block plugin need not verify that the machine name is at all unique. It\n   * is only responsible for providing a baseline suggestion; calling code is\n   * responsible for ensuring whatever uniqueness is required for the use case.\n   *\n   * @return string\n   *   The suggested machine name.\n   *\/",139],["T_WHITESPACE","\n  ",148],["T_PUBLIC","public",149],["T_WHITESPACE"," ",149],["T_FUNCTION","function",149],["T_WHITESPACE"," ",149],["T_STRING","getMachineNameSuggestion",149],"(",")",";",["T_WHITESPACE","\n\n",149],"}",["T_WHITESPACE","\n",151]]