[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","ParamConverter",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Routing",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Route",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for parameter converters.\n *\n * Classes implementing this interface are responsible for converting a path\n * parameter to the object it represents.\n *\n * Here is an example path: \/admin\/structure\/block\/manage\/{block}\n *\n * In this case, '{block}' would be the path parameter which should be turned\n * into a block object representing the block in question.\n *\n * ParamConverters are defined as services tagged with 'paramconverter', and are\n * managed by the 'paramconverter_manager' service.\n *\n * @see menu\n * @see \\Drupal\\Core\\ParamConverter\\ParamConverterManagerInterface\n * @see \\Drupal\\Core\\ParamConverter\\EntityConverter\n *\/",7],["T_WHITESPACE","\n",24],["T_INTERFACE","interface",25],["T_WHITESPACE"," ",25],["T_STRING","ParamConverterInterface",25],["T_WHITESPACE"," ",25],"{",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Converts path variables to their corresponding objects.\n   *\n   * @param mixed $value\n   *   The raw value.\n   * @param mixed $definition\n   *   The parameter definition provided in the route options.\n   * @param string $name\n   *   The name of the parameter.\n   * @param array $defaults\n   *   The route defaults array.\n   *\n   * @return mixed|null\n   *   The converted parameter value.\n   *\/",27],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","convert",42],"(",["T_VARIABLE","$value",42],",",["T_WHITESPACE"," ",42],["T_VARIABLE","$definition",42],",",["T_WHITESPACE"," ",42],["T_VARIABLE","$name",42],",",["T_WHITESPACE"," ",42],["T_ARRAY","array",42],["T_WHITESPACE"," ",42],["T_VARIABLE","$defaults",42],")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Determines if the converter applies to a specific route and variable.\n   *\n   * @param mixed $definition\n   *   The parameter definition provided in the route options.\n   * @param string $name\n   *   The name of the parameter.\n   * @param \\Symfony\\Component\\Routing\\Route $route\n   *   The route to consider attaching to.\n   *\n   * @return bool\n   *   TRUE if the converter applies to the passed route and parameter, FALSE\n   *   otherwise.\n   *\/",44],["T_WHITESPACE","\n  ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","applies",58],"(",["T_VARIABLE","$definition",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$name",58],",",["T_WHITESPACE"," ",58],["T_STRING","Route",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$route",58],")",";",["T_WHITESPACE","\n\n",58],"}",["T_WHITESPACE","\n",60]]