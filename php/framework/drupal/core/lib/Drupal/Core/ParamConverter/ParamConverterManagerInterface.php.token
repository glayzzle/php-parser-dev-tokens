[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","ParamConverter",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Routing",5],["T_NS_SEPARATOR","\\",5],["T_STRING","RouteCollection",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides an interface for a parameter converter manager.\n *\/",7],["T_WHITESPACE","\n",9],["T_INTERFACE","interface",10],["T_WHITESPACE"," ",10],["T_STRING","ParamConverterManagerInterface",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Registers a parameter converter with the manager.\n   *\n   * @param \\Drupal\\Core\\ParamConverter\\ParamConverterInterface $param_converter\n   *   The added param converter instance.\n   * @param string $id\n   *   The parameter converter service id to register.\n   *\n   * @return $this\n   *\/",12],["T_WHITESPACE","\n  ",21],["T_PUBLIC","public",22],["T_WHITESPACE"," ",22],["T_FUNCTION","function",22],["T_WHITESPACE"," ",22],["T_STRING","addConverter",22],"(",["T_STRING","ParamConverterInterface",22],["T_WHITESPACE"," ",22],["T_VARIABLE","$param_converter",22],",",["T_WHITESPACE"," ",22],["T_VARIABLE","$id",22],")",";",["T_WHITESPACE","\n\n  ",22],["T_DOC_COMMENT","\/**\n   * Lazy-loads converter services.\n   *\n   * @param string $id\n   *   The service id of converter service to load.\n   *\n   * @return \\Drupal\\Core\\ParamConverter\\ParamConverterInterface\n   *   The loaded converter service identified by the given service id.\n   *\n   * @throws \\InvalidArgumentException\n   *   If the given service id is not a registered converter.\n   *\/",24],["T_WHITESPACE","\n  ",35],["T_PUBLIC","public",36],["T_WHITESPACE"," ",36],["T_FUNCTION","function",36],["T_WHITESPACE"," ",36],["T_STRING","getConverter",36],"(",["T_VARIABLE","$id",36],")",";",["T_WHITESPACE","\n\n  ",36],["T_DOC_COMMENT","\/**\n   * Saves a list of applicable converters to each route.\n   *\n   * @param \\Symfony\\Component\\Routing\\RouteCollection $routes\n   *   A collection of routes to apply converters to.\n   *\/",38],["T_WHITESPACE","\n  ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","setRouteParameterConverters",44],"(",["T_STRING","RouteCollection",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$routes",44],")",";",["T_WHITESPACE","\n\n  ",44],["T_DOC_COMMENT","\/**\n   * Invokes the registered converter for each defined parameter on a route.\n   *\n   * @param array $defaults\n   *   The route defaults array.\n   *\n   * @return array\n   *   The modified defaults.\n   *\n   * @throws \\Drupal\\Core\\ParamConverter\\ParamNotConvertedException\n   *   If one of the assigned converters returned NULL because the given\n   *   variable could not be converted.\n   *\/",46],["T_WHITESPACE","\n  ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","convert",59],"(",["T_ARRAY","array",59],["T_WHITESPACE"," ",59],["T_VARIABLE","$defaults",59],")",";",["T_WHITESPACE","\n\n",59],"}",["T_WHITESPACE","\n",61]]