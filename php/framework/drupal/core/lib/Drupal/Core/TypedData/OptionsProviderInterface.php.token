[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Session",5],["T_NS_SEPARATOR","\\",5],["T_STRING","AccountInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for retrieving all possible and settable values.\n *\n * While possible values specify which values existing data might have, settable\n * values define the values that are allowed to be set by a user.\n *\n * For example, in an workflow scenario, the settable values for a state field\n * might depend on the currently set state, while possible values are all\n * states. Thus settable values would be used in an editing context, while\n * possible values would be used for presenting filtering options in a search.\n *\n * For convenience, lists of both settable and possible values are also provided\n * as structured options arrays that can be used in an Options widget such as a\n * select box or checkboxes.\n *\n * Note that this interface is mostly applicable for primitive data values, but\n * can be used on complex data structures if a (primitive) main property is\n * specified. In that case, the allowed values and options apply to the main\n * property only.\n *\n * @see \\Drupal\\options\\Plugin\\Field\\FieldWidget\\OptionsWidgetBase\n *\/",7],["T_WHITESPACE","\n",28],["T_INTERFACE","interface",29],["T_WHITESPACE"," ",29],["T_STRING","OptionsProviderInterface",29],["T_WHITESPACE"," ",29],"{",["T_WHITESPACE","\n\n  ",29],["T_DOC_COMMENT","\/**\n   * Returns an array of possible values.\n   *\n   * If the optional $account parameter is passed, then the array is filtered to\n   * values viewable by the account.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   (optional) The user account for which to filter the possible values. If\n   *   omitted, all possible values are returned.\n   *\n   * @return array\n   *   An array of possible values.\n   *\/",31],["T_WHITESPACE","\n  ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","getPossibleValues",44],"(",["T_STRING","AccountInterface",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$account",44],["T_WHITESPACE"," ",44],"=",["T_WHITESPACE"," ",44],["T_STRING","NULL",44],")",";",["T_WHITESPACE","\n\n  ",44],["T_DOC_COMMENT","\/**\n   * Returns an array of possible values with labels for display.\n   *\n   * If the optional $account parameter is passed, then the array is filtered to\n   * values viewable by the account.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   (optional) The user account for which to filter the possible options.\n   *   If omitted, all possible options are returned.\n   *\n   * @return array\n   *   An array of possible options for the object that may be used in an\n   *   Options widget, for example when existing data should be filtered. It may\n   *   either be a flat array of option labels keyed by values, or a\n   *   two-dimensional array of option groups (array of flat option arrays,\n   *   keyed by option group label). Note that labels should NOT be sanitized.\n   *\/",46],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","getPossibleOptions",63],"(",["T_STRING","AccountInterface",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$account",63],["T_WHITESPACE"," ",63],"=",["T_WHITESPACE"," ",63],["T_STRING","NULL",63],")",";",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * Returns an array of settable values.\n   *\n   * If the optional $account parameter is passed, then the array is filtered to\n   * values settable by the account.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   (optional) The user account for which to filter the settable values. If\n   *   omitted, all settable values are returned.\n   *\n   * @return array\n   *   An array of settable values.\n   *\/",65],["T_WHITESPACE","\n  ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","getSettableValues",78],"(",["T_STRING","AccountInterface",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$account",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_STRING","NULL",78],")",";",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Returns an array of settable values with labels for display.\n   *\n   * If the optional $account parameter is passed, then the array is filtered to\n   * values settable by the account.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountInterface $account\n   *   (optional) The user account for which to filter the settable options. If\n   *   omitted, all settable options are returned.\n   *\n   * @return array\n   *   An array of settable options for the object that may be used in an\n   *   Options widget, usually when new data should be entered. It may either be\n   *   a flat array of option labels keyed by values, or a two-dimensional array\n   *   of option groups (array of flat option arrays, keyed by option group\n   *   label). Note that labels should NOT be sanitized.\n   *\/",80],["T_WHITESPACE","\n  ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","getSettableOptions",97],"(",["T_STRING","AccountInterface",97],["T_WHITESPACE"," ",97],["T_VARIABLE","$account",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","NULL",97],")",";",["T_WHITESPACE","\n\n",97],"}",["T_WHITESPACE","\n",99]]