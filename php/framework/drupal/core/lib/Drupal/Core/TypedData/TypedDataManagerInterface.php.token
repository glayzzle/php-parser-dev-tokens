[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginManagerInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Plugin",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Discovery",6],["T_NS_SEPARATOR","\\",6],["T_STRING","CachedDiscoveryInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Validation",7],["T_NS_SEPARATOR","\\",7],["T_STRING","ConstraintManager",7],";",["T_WHITESPACE","\n",7],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Symfony",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Component",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Validator",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Validator",8],["T_NS_SEPARATOR","\\",8],["T_STRING","ValidatorInterface",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * Defines an interface for typed data manager.\n *\/",10],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","TypedDataManagerInterface",13],["T_WHITESPACE"," ",13],["T_EXTENDS","extends",13],["T_WHITESPACE"," ",13],["T_STRING","PluginManagerInterface",13],",",["T_WHITESPACE"," ",13],["T_STRING","CachedDiscoveryInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Instantiates a typed data object.\n   *\n   * @param string $data_type\n   *   The data type, for which a typed object should be instantiated.\n   * @param array $configuration\n   *   The plugin configuration array, i.e. an array with the following keys:\n   *   - data_definition: The data definition object, i.e. an instance of\n   *     \\Drupal\\Core\\TypedData\\DataDefinitionInterface.\n   *   - name: The name of the property or the delta of the list item if a\n   *     property or list item is to be created. Otherwise, this should be set\n   *     to NULL, but the key must be specified.\n   *   - parent: The parent typed data object implementing either the\n   *     ListInterface or the ComplexDataInterface if a property or list item is\n   *     to be created. Otherwise, this should be set to NULL, but the key must\n   *     be specified.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The instantiated typed data object.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::create()\n   *\/",15],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","createInstance",37],"(",["T_VARIABLE","$data_type",37],",",["T_WHITESPACE"," ",37],["T_ARRAY","array",37],["T_WHITESPACE"," ",37],["T_VARIABLE","$configuration",37],["T_WHITESPACE"," ",37],"=",["T_WHITESPACE"," ",37],["T_ARRAY","array",37],"(",")",")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Creates a new typed data object instance.\n   *\n   * @param \\Drupal\\Core\\TypedData\\DataDefinitionInterface $definition\n   *   The data definition of the typed data object. For backwards-compatibility\n   *   an array representation of the data definition may be passed also.\n   * @param mixed $value\n   *   (optional) The data value. If set, it has to match one of the supported\n   *   data type format as documented for the data type classes.\n   * @param string $name\n   *   (optional) If a property or list item is to be created, the name of the\n   *   property or the delta of the list item.\n   * @param mixed $parent\n   *   (optional) If a property or list item is to be created, the parent typed\n   *   data object implementing either the ListInterface or the\n   *   ComplexDataInterface.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The instantiated typed data object.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::getPropertyInstance()\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\BinaryData\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\BooleanData\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\Date\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\Duration\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\FloatData\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\IntegerData\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\StringData\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\Uri\n   *\/",39],["T_WHITESPACE","\n  ",68],["T_PUBLIC","public",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","create",69],"(",["T_STRING","DataDefinitionInterface",69],["T_WHITESPACE"," ",69],["T_VARIABLE","$definition",69],",",["T_WHITESPACE"," ",69],["T_VARIABLE","$value",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_STRING","NULL",69],",",["T_WHITESPACE"," ",69],["T_VARIABLE","$name",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_STRING","NULL",69],",",["T_WHITESPACE"," ",69],["T_VARIABLE","$parent",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_STRING","NULL",69],")",";",["T_WHITESPACE","\n\n  ",69],["T_DOC_COMMENT","\/**\n   * Creates a new data definition object.\n   *\n   * While data definitions objects may be created directly if the definition\n   * class used by a data type is known, this method allows the creation of data\n   * definitions for any given data type.\n   *\n   * For example, if a definition for a map is to be created, the following code\n   * could be used instead of calling this method with the argument 'map':\n   * @code\n   *   $map_definition = \\Drupal\\Core\\TypedData\\MapDataDefinition::create();\n   * @endcode\n   *\n   * @param string $data_type\n   *   The data type plugin ID, for which a data definition object should be\n   *   created.\n   *\n   * @return \\Drupal\\Core\\TypedData\\DataDefinitionInterface\n   *   A data definition object for the given data type. The class of this\n   *   object is provided by the definition_class in the plugin annotation.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::createListDataDefinition()\n   *\/",71],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","createDataDefinition",94],"(",["T_VARIABLE","$data_type",94],")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Creates a new list data definition for items of the given data type.\n   *\n   * @param string $item_type\n   *   The item type, for which a list data definition should be created.\n   *\n   * @return \\Drupal\\Core\\TypedData\\ListDataDefinitionInterface\n   *   A list definition for items of the given data type.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::createDataDefinition()\n   *\/",96],["T_WHITESPACE","\n  ",106],["T_PUBLIC","public",107],["T_WHITESPACE"," ",107],["T_FUNCTION","function",107],["T_WHITESPACE"," ",107],["T_STRING","createListDataDefinition",107],"(",["T_VARIABLE","$item_type",107],")",";",["T_WHITESPACE","\n\n  ",107],["T_DOC_COMMENT","\/**\n   * {@inheritdoc}\n   *\n   * @param array $options\n   *   An array of options with the following keys:\n   *   - object: The parent typed data object, implementing the\n   *     TypedDataInterface and either the ListInterface or the\n   *     ComplexDataInterface.\n   *   - property: The name of the property to instantiate, or the delta of the\n   *     the list item to instantiate.\n   *   - value: The value to set. If set, it has to match one of the supported\n   *     data type formats as documented by the data type classes.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The new property instance.\n   *\n   * @throws \\InvalidArgumentException\n   *   If the given property is not known, or the passed object does not\n   *   implement the ListInterface or the ComplexDataInterface.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::getPropertyInstance()\n   *\/",109],["T_WHITESPACE","\n  ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","getInstance",131],"(",["T_ARRAY","array",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$options",131],")",";",["T_WHITESPACE","\n\n  ",131],["T_DOC_COMMENT","\/**\n   * Get a typed data instance for a property of a given typed data object.\n   *\n   * This method will use prototyping for fast and efficient instantiation of\n   * many property objects with the same property path; for example,\n   * when multiple comments are used comment_body.0.value needs to be\n   * instantiated very often.\n   *\n   * Prototyping is done by the root object's data type and the given\n   * property path, i.e. all property instances having the same property path\n   * and inheriting from the same data type are prototyped.\n   *\n   * @param \\Drupal\\Core\\TypedData\\TypedDataInterface $object\n   *   The parent typed data object, implementing the TypedDataInterface and\n   *   either the ListInterface or the ComplexDataInterface.\n   * @param string $property_name\n   *   The name of the property to instantiate, or the delta of an list item.\n   * @param mixed $value\n   *   (optional) The data value. If set, it has to match one of the supported\n   *   data type formats as documented by the data type classes.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The new property instance.\n   *\n   * @throws \\InvalidArgumentException\n   *   If the given property is not known, or the passed object does not\n   *   implement the ListInterface or the ComplexDataInterface.\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::create()\n   *\/",133],["T_WHITESPACE","\n  ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","getPropertyInstance",163],"(",["T_STRING","TypedDataInterface",163],["T_WHITESPACE"," ",163],["T_VARIABLE","$object",163],",",["T_WHITESPACE"," ",163],["T_VARIABLE","$property_name",163],",",["T_WHITESPACE"," ",163],["T_VARIABLE","$value",163],["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_STRING","NULL",163],")",";",["T_WHITESPACE","\n\n  ",163],["T_DOC_COMMENT","\/**\n   * Gets the validator for validating typed data.\n   *\n   * @return \\Symfony\\Component\\Validator\\Validator\\ValidatorInterface\n   *   The validator object.\n   *\/",165],["T_WHITESPACE","\n  ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","getValidator",171],"(",")",";",["T_WHITESPACE","\n\n  ",171],["T_DOC_COMMENT","\/**\n   * Sets the validator for validating typed data.\n   *\n   * @param \\Symfony\\Component\\Validator\\Validator\\ValidatorInterface $validator\n   *   The validator object to set.\n   *\/",173],["T_WHITESPACE","\n  ",178],["T_PUBLIC","public",179],["T_WHITESPACE"," ",179],["T_FUNCTION","function",179],["T_WHITESPACE"," ",179],["T_STRING","setValidator",179],"(",["T_STRING","ValidatorInterface",179],["T_WHITESPACE"," ",179],["T_VARIABLE","$validator",179],")",";",["T_WHITESPACE","\n\n  ",179],["T_DOC_COMMENT","\/**\n   * Gets the validation constraint manager.\n   *\n   * @return \\Drupal\\Core\\Validation\\ConstraintManager\n   *   The constraint manager.\n   *\/",181],["T_WHITESPACE","\n  ",186],["T_PUBLIC","public",187],["T_WHITESPACE"," ",187],["T_FUNCTION","function",187],["T_WHITESPACE"," ",187],["T_STRING","getValidationConstraintManager",187],"(",")",";",["T_WHITESPACE","\n\n  ",187],["T_DOC_COMMENT","\/**\n   * Sets the validation constraint manager.\n   *\n   * The validation constraint manager is used to instantiate validation\n   * constraint plugins.\n   *\n   * @param \\Drupal\\Core\\Validation\\ConstraintManager $constraintManager\n   *   The constraint manager to set.\n   *\/",189],["T_WHITESPACE","\n  ",197],["T_PUBLIC","public",198],["T_WHITESPACE"," ",198],["T_FUNCTION","function",198],["T_WHITESPACE"," ",198],["T_STRING","setValidationConstraintManager",198],"(",["T_STRING","ConstraintManager",198],["T_WHITESPACE"," ",198],["T_VARIABLE","$constraintManager",198],")",";",["T_WHITESPACE","\n\n  ",198],["T_DOC_COMMENT","\/**\n   * Gets default constraints for the given data definition.\n   *\n   * This generates default constraint definitions based on the data definition;\n   * for example, a NotNull constraint is generated if the data is defined as\n   * required. Besides that, any constraints defined for the data type (that is,\n   * below the 'constraint' key of the type's plugin definition) are taken into\n   * account.\n   *\n   * @param \\Drupal\\Core\\TypedData\\DataDefinitionInterface $definition\n   *   A data definition.\n   *\n   * @return array\n   *   An array of validation constraint definitions, keyed by constraint name.\n   *   Each constraint definition can be used for instantiating\n   *   \\Symfony\\Component\\Validator\\Constraint objects.\n   *\/",200],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","getDefaultConstraints",217],"(",["T_STRING","DataDefinitionInterface",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$definition",217],")",";",["T_WHITESPACE","\n\n  ",217],["T_DOC_COMMENT","\/**\n   * Gets the canonical representation of a TypedData object.\n   *\n   * The canonical representation is typically used when data is passed on to\n   * other code components. In many use cases, the TypedData object is mostly\n   * unified adapter wrapping a primary value (a string, an entity, etc.) which\n   * is the canonical representation that consuming code like constraint\n   * validators are really interested in. For some APIs, though, the domain\n   * object (for example, Field API's FieldItem and FieldItemList) directly\n   * implements TypedDataInterface, and the canonical representation is thus the\n   * data object itself.\n   *\n   * When a TypedData object gets validated, for example, its canonical\n   * representation is passed on to constraint validators, which thus receive\n   * an Entity unwrapped, but a FieldItem as is.\n   *\n   * Data types specify whether their data objects need unwrapping by using the\n   * 'unwrap_for_canonical_representation' property in the data definition\n   * (defaults to TRUE).\n   *\n   * @param \\Drupal\\Core\\TypedData\\TypedDataInterface $data\n   *   The data.\n   *\n   * @return mixed\n   *   The canonical representation of the passed data.\n   *\/",219],["T_WHITESPACE","\n  ",244],["T_PUBLIC","public",245],["T_WHITESPACE"," ",245],["T_FUNCTION","function",245],["T_WHITESPACE"," ",245],["T_STRING","getCanonicalRepresentation",245],"(",["T_STRING","TypedDataInterface",245],["T_WHITESPACE"," ",245],["T_VARIABLE","$data",245],")",";",["T_WHITESPACE","\n\n",245],"}",["T_WHITESPACE","\n",247]]