[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for data definitions.\n *\n * Data definitions are used to describe data based upon available data types.\n * For example, a plugin could describe its parameters using data definitions\n * in order to specify what kind of data is required for it.\n *\n * Definitions that describe lists or complex data have to implement the\n * respective interfaces, such that the metadata about contained list items or\n * properties can be retrieved from the definition.\n *\n * @see \\Drupal\\Core\\TypedData\\DataDefinition\n * @see \\Drupal\\Core\\TypedData\\ListDefinitionInterface\n * @see \\Drupal\\Core\\TypedData\\ComplexDataDefinitionInterface\n * @see \\Drupal\\Core\\TypedData\\DataReferenceDefinitionInterface\n * @see \\Drupal\\Core\\TypedData\\TypedDataInterface\n *\n * @ingroup typed_data\n *\/",5],["T_WHITESPACE","\n",23],["T_INTERFACE","interface",24],["T_WHITESPACE"," ",24],["T_STRING","DataDefinitionInterface",24],["T_WHITESPACE"," ",24],"{",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Creates a new data definition object.\n   *\n   * This method is typically used by\n   * \\Drupal\\Core\\TypedData\\TypedDataManager::createDataDefinition() to build a\n   * definition object for an arbitrary data type. When the definition class is\n   * known, it is recommended to directly use the static create() method on that\n   * class instead; e.g.:\n   * @code\n   *   $map_definition = \\Drupal\\Core\\TypedData\\MapDataDefinition::create();\n   * @endcode\n   *\n   * @param string $data_type\n   *   The data type, for which a data definition should be created.\n   *\n   * @return static\n   *\n   * @throws \\InvalidArgumentException\n   *   If an unsupported data type gets passed to the class; e.g., 'string' to a\n   *   definition class handling 'entity:* data types.\n   *\/",26],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_STATIC","static",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","createFromDataType",47],"(",["T_VARIABLE","$data_type",47],")",";",["T_WHITESPACE","\n\n  ",47],["T_DOC_COMMENT","\/**\n   * Returns the data type of the data.\n   *\n   * @return string\n   *   The data type.\n   *\/",49],["T_WHITESPACE","\n  ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","getDataType",55],"(",")",";",["T_WHITESPACE","\n\n  ",55],["T_DOC_COMMENT","\/**\n   * Returns a human readable label.\n   *\n   * @return string|\\Drupal\\Core\\StringTranslation\\TranslatableMarkup\n   *   The label. A string or an instance of TranslatableMarkup will be returned\n   *   based on the way the label translation is handled.\n   *\/",57],["T_WHITESPACE","\n  ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","getLabel",64],"(",")",";",["T_WHITESPACE","\n\n  ",64],["T_DOC_COMMENT","\/**\n   * Returns a human readable description.\n   *\n   * Descriptions are usually used on user interfaces where the data is edited\n   * or displayed.\n   *\n   * @return string|null\n   *   The description, or NULL if no description is available.\n   *\/",66],["T_WHITESPACE","\n  ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","getDescription",75],"(",")",";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * Returns whether the data is multi-valued, i.e. a list of data items.\n   *\n   * This is equivalent to checking whether the data definition implements the\n   * \\Drupal\\Core\\TypedData\\ListDefinitionInterface interface.\n   *\n   * @return bool\n   *   Whether the data is multi-valued.\n   *\/",77],["T_WHITESPACE","\n  ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","isList",86],"(",")",";",["T_WHITESPACE","\n\n  ",86],["T_DOC_COMMENT","\/**\n   * Determines whether the data is read-only.\n   *\n   * @return bool\n   *   Whether the data is read-only.\n   *\/",88],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","isReadOnly",94],"(",")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Determines whether the data value is computed.\n   *\n   * For example, data could be computed depending on some other values.\n   *\n   * @return bool\n   *   Whether the data value is computed.\n   *\/",96],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","isComputed",104],"(",")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Determines whether a data value is required.\n   *\n   * For required data a non-NULL value is mandatory.\n   *\n   * @return bool\n   *   Whether a data value is required.\n   *\/",106],["T_WHITESPACE","\n  ",113],["T_PUBLIC","public",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","isRequired",114],"(",")",";",["T_WHITESPACE","\n\n  ",114],["T_DOC_COMMENT","\/**\n   * Returns the class used for creating the typed data object.\n   *\n   * If not specified, the default class of the data type will be returned.\n   *\n   * @return string\n   *   The class used for creating the typed data object.\n   *\/",116],["T_WHITESPACE","\n  ",123],["T_PUBLIC","public",124],["T_WHITESPACE"," ",124],["T_FUNCTION","function",124],["T_WHITESPACE"," ",124],["T_STRING","getClass",124],"(",")",";",["T_WHITESPACE","\n\n  ",124],["T_DOC_COMMENT","\/**\n   * Returns the array of settings, as required by the used class.\n   *\n   * See the documentation of the class for supported or required settings.\n   *\n   * @return array\n   *   The array of settings.\n   *\/",126],["T_WHITESPACE","\n  ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","getSettings",134],"(",")",";",["T_WHITESPACE","\n\n  ",134],["T_DOC_COMMENT","\/**\n   * Returns the value of a given setting.\n   *\n   * @param string $setting_name\n   *   The setting name.\n   *\n   * @return mixed\n   *   The setting value.\n   *\/",136],["T_WHITESPACE","\n  ",144],["T_PUBLIC","public",145],["T_WHITESPACE"," ",145],["T_FUNCTION","function",145],["T_WHITESPACE"," ",145],["T_STRING","getSetting",145],"(",["T_VARIABLE","$setting_name",145],")",";",["T_WHITESPACE","\n\n  ",145],["T_DOC_COMMENT","\/**\n   * Returns an array of validation constraints.\n   *\n   * The validation constraints of a definition consist of any for it defined\n   * constraints and default constraints, which are generated based on the\n   * definition and its data type. See\n   * \\Drupal\\Core\\TypedData\\TypedDataManager::getDefaultConstraints().\n   *\n   * Constraints are defined via an array, having constraint plugin IDs as key\n   * and constraint options as values, e.g.\n   * @code\n   * $constraints = array(\n   *   'Range' => array('min' => 5, 'max' => 10),\n   *   'NotBlank' => array(),\n   * );\n   * @endcode\n   * Options have to be specified using another array if the constraint has more\n   * than one or zero options. If it has exactly one option, the value should be\n   * specified without nesting it into another array:\n   * @code\n   * $constraints = array(\n   *   'EntityType' => 'node',\n   *   'Bundle' => 'article',\n   * );\n   * @endcode\n   *\n   * Note that the specified constraints must be compatible with the data type,\n   * e.g. for data of type 'entity' the 'EntityType' and 'Bundle' constraints\n   * may be specified.\n   *\n   * @see \\Drupal\\Core\\Validation\\ConstraintManager\n   *\n   * @return array[]\n   *   An array of validation constraint definitions, keyed by constraint name.\n   *   Each constraint definition can be used for instantiating\n   *   \\Symfony\\Component\\Validator\\Constraint objects.\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",147],["T_WHITESPACE","\n  ",185],["T_PUBLIC","public",186],["T_WHITESPACE"," ",186],["T_FUNCTION","function",186],["T_WHITESPACE"," ",186],["T_STRING","getConstraints",186],"(",")",";",["T_WHITESPACE","\n\n  ",186],["T_DOC_COMMENT","\/**\n   * Returns a validation constraint.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details.\n   *\n   * @param string $constraint_name\n   *   The name of the constraint, i.e. its plugin id.\n   *\n   * @return array\n   *   A validation constraint definition which can be used for instantiating a\n   *   \\Symfony\\Component\\Validator\\Constraint object.\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",188],["T_WHITESPACE","\n  ",202],["T_PUBLIC","public",203],["T_WHITESPACE"," ",203],["T_FUNCTION","function",203],["T_WHITESPACE"," ",203],["T_STRING","getConstraint",203],"(",["T_VARIABLE","$constraint_name",203],")",";",["T_WHITESPACE","\n\n  ",203],["T_DOC_COMMENT","\/**\n   * Adds a validation constraint.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details.\n   *\n   * @param string $constraint_name\n   *   The name of the constraint to add, i.e. its plugin id.\n   * @param array|null $options\n   *   The constraint options as required by the constraint plugin, or NULL.\n   *\n   * @return static\n   *   The object itself for chaining.\n   *\/",205],["T_WHITESPACE","\n  ",218],["T_PUBLIC","public",219],["T_WHITESPACE"," ",219],["T_FUNCTION","function",219],["T_WHITESPACE"," ",219],["T_STRING","addConstraint",219],"(",["T_VARIABLE","$constraint_name",219],",",["T_WHITESPACE"," ",219],["T_VARIABLE","$options",219],["T_WHITESPACE"," ",219],"=",["T_WHITESPACE"," ",219],["T_STRING","NULL",219],")",";",["T_WHITESPACE","\n\n",219],"}",["T_WHITESPACE","\n",221]]