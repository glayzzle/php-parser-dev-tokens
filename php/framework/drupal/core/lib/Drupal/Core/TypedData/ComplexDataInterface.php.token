[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for complex data; i.e. data containing named and typed properties.\n *\n * The name of a property has to be a valid PHP variable name, starting with\n * an alphabetic character.\n *\n * This is implemented by entities as well as by field item classes of\n * entities.\n *\n * When implementing this interface which extends Traversable, make sure to list\n * IteratorAggregate or Iterator before this interface in the implements clause.\n *\n * @see \\Drupal\\Core\\TypedData\\ComplexDataDefinitionInterface\n *\n * @ingroup typed_data\n *\/",5],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","ComplexDataInterface",21],["T_WHITESPACE"," ",21],["T_EXTENDS","extends",21],["T_WHITESPACE"," ",21],["T_STRING","TraversableTypedDataInterface",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Gets the data definition.\n   *\n   * @return \\Drupal\\Core\\TypedData\\ComplexDataDefinitionInterface\n   *   The data definition object describing the complex data.\n   *\/",23],["T_WHITESPACE","\n  ",28],["T_PUBLIC","public",29],["T_WHITESPACE"," ",29],["T_FUNCTION","function",29],["T_WHITESPACE"," ",29],["T_STRING","getDataDefinition",29],"(",")",";",["T_WHITESPACE","\n\n  ",29],["T_DOC_COMMENT","\/**\n   * Gets a property object.\n   *\n   * @param $property_name\n   *   The name of the property to get; e.g., 'title' or 'name'.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The property object.\n   *\n   * @throws \\InvalidArgumentException\n   *   If an invalid property name is given.\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no property can be created.\n   *\/",31],["T_WHITESPACE","\n  ",44],["T_PUBLIC","public",45],["T_WHITESPACE"," ",45],["T_FUNCTION","function",45],["T_WHITESPACE"," ",45],["T_STRING","get",45],"(",["T_VARIABLE","$property_name",45],")",";",["T_WHITESPACE","\n\n  ",45],["T_DOC_COMMENT","\/**\n   * Sets a property value.\n   *\n   * @param $property_name\n   *   The name of the property to set; e.g., 'title' or 'name'.\n   * @param $value\n   *   The value to set, or NULL to unset the property.\n   * @param bool $notify\n   *   (optional) Whether to notify the parent object of the change. Defaults to\n   *   TRUE. If the update stems from a parent object, set it to FALSE to avoid\n   *   being notified again.\n   *\n   * @return $this\n   *\n   * @throws \\InvalidArgumentException\n   *   If the specified property does not exist.\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no property can be set.\n   *\/",47],["T_WHITESPACE","\n  ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","set",66],"(",["T_VARIABLE","$property_name",66],",",["T_WHITESPACE"," ",66],["T_VARIABLE","$value",66],",",["T_WHITESPACE"," ",66],["T_VARIABLE","$notify",66],["T_WHITESPACE"," ",66],"=",["T_WHITESPACE"," ",66],["T_STRING","TRUE",66],")",";",["T_WHITESPACE","\n\n  ",66],["T_DOC_COMMENT","\/**\n   * Gets an array of property objects.\n   *\n   * @param bool $include_computed\n   *   If set to TRUE, computed properties are included. Defaults to FALSE.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface[]\n   *   An array of property objects implementing the TypedDataInterface, keyed\n   *   by property name.\n   *\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no property can be created.\n   *\/",68],["T_WHITESPACE","\n  ",80],["T_PUBLIC","public",81],["T_WHITESPACE"," ",81],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","getProperties",81],"(",["T_VARIABLE","$include_computed",81],["T_WHITESPACE"," ",81],"=",["T_WHITESPACE"," ",81],["T_STRING","FALSE",81],")",";",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Returns an array of all property values.\n   *\n   * Gets an array of plain property values including all not-computed\n   * properties.\n   *\n   * @return array\n   *   An array of property values, keyed by property name.\n   *\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no property can be created.\n   *\/",83],["T_WHITESPACE","\n  ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","toArray",95],"(",")",";",["T_WHITESPACE","\n\n  ",95],["T_DOC_COMMENT","\/**\n   * Determines whether the data structure is empty.\n   *\n   * @return bool\n   *   TRUE if the data structure is empty, FALSE otherwise.\n   *\/",97],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","isEmpty",103],"(",")",";",["T_WHITESPACE","\n\n",103],"}",["T_WHITESPACE","\n",105]]