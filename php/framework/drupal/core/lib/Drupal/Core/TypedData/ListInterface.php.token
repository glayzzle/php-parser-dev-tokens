[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for a list of typed data.\n *\n * A list of typed data contains only items of the same type, is ordered and may\n * contain duplicates. Note that the data type of a list is always 'list'.\n *\n * When implementing this interface which extends Traversable, make sure to list\n * IteratorAggregate or Iterator before this interface in the implements clause.\n *\n * @see \\Drupal\\Core\\TypedData\\ListDefinitionInterface\n *\n * @ingroup typed_data\n *\/",5],["T_WHITESPACE","\n",17],["T_INTERFACE","interface",18],["T_WHITESPACE"," ",18],["T_STRING","ListInterface",18],["T_WHITESPACE"," ",18],["T_EXTENDS","extends",18],["T_WHITESPACE"," ",18],["T_STRING","TraversableTypedDataInterface",18],",",["T_WHITESPACE"," ",18],["T_NS_SEPARATOR","\\",18],["T_STRING","ArrayAccess",18],",",["T_WHITESPACE"," ",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Countable",18],["T_WHITESPACE"," ",18],"{",["T_WHITESPACE","\n\n  ",18],["T_DOC_COMMENT","\/**\n   * Gets the data definition.\n   *\n   * @return \\Drupal\\Core\\TypedData\\ListDataDefinitionInterface\n   *   The data definition object describing the list.\n   *\/",20],["T_WHITESPACE","\n  ",25],["T_PUBLIC","public",26],["T_WHITESPACE"," ",26],["T_FUNCTION","function",26],["T_WHITESPACE"," ",26],["T_STRING","getDataDefinition",26],"(",")",";",["T_WHITESPACE","\n\n  ",26],["T_DOC_COMMENT","\/**\n   * Determines whether the list contains any non-empty items.\n   *\n   * @return bool\n   *   TRUE if the list is empty, FALSE otherwise.\n   *\/",28],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","isEmpty",34],"(",")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Gets the definition of a contained item.\n   *\n   * @return \\Drupal\\Core\\TypedData\\DataDefinitionInterface\n   *   The data definition of contained items.\n   *\/",36],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","getItemDefinition",42],"(",")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Returns the item at the specified position in this list.\n   *\n   * @param int $index\n   *   Index of the item to return.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface|null\n   *   The item at the specified position in this list, or NULL if no item\n   *   exists at that position.\n   *\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no item can be created.\n   *\/",44],["T_WHITESPACE","\n  ",56],["T_PUBLIC","public",57],["T_WHITESPACE"," ",57],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","get",57],"(",["T_VARIABLE","$index",57],")",";",["T_WHITESPACE","\n\n  ",57],["T_DOC_COMMENT","\/**\n   * Sets the value of the item at a given position in the list.\n   *\n   * @param int $index\n   *   The position of the item in the list. Since a List only contains\n   *   sequential, 0-based indexes, $index has to be:\n   *   - Either the position of an existing item in the list. This updates the\n   *   item value.\n   *   - Or the next available position in the sequence of the current list\n   *   indexes. This appends a new item with the provided value at the end of\n   *   the list.\n   * @param mixed $value\n   *   The value of the item to be stored at the specified position.\n   *\n   * @return $this\n   *\n   * @throws \\InvalidArgumentException\n   *   If the $index is invalid (non-numeric, or pointing to an invalid\n   *   position in the list).\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no item can be set.\n   *\/",59],["T_WHITESPACE","\n  ",80],["T_PUBLIC","public",81],["T_WHITESPACE"," ",81],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","set",81],"(",["T_VARIABLE","$index",81],",",["T_WHITESPACE"," ",81],["T_VARIABLE","$value",81],")",";",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Returns the first item in this list.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The first item in this list.\n   *\n   * @throws \\Drupal\\Core\\TypedData\\Exception\\MissingDataException\n   *   If the complex data structure is unset and no item can be created.\n   *\/",83],["T_WHITESPACE","\n  ",91],["T_PUBLIC","public",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","first",92],"(",")",";",["T_WHITESPACE","\n\n  ",92],["T_DOC_COMMENT","\/**\n   * Appends a new item to the list.\n   *\n   * @param mixed $value\n   *   The value of the new item.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The item that was appended.\n   *\/",94],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","appendItem",103],"(",["T_VARIABLE","$value",103],["T_WHITESPACE"," ",103],"=",["T_WHITESPACE"," ",103],["T_STRING","NULL",103],")",";",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Removes the item at the specified position.\n   *\n   * @param int $index\n   *   Index of the item to remove.\n   *\n   * @return $this\n   *\/",105],["T_WHITESPACE","\n  ",112],["T_PUBLIC","public",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","removeItem",113],"(",["T_VARIABLE","$index",113],")",";",["T_WHITESPACE","\n\n  ",113],["T_DOC_COMMENT","\/**\n   * Filters the items in the list using a custom callback.\n   *\n   * @param callable $callback\n   *   The callback to use for filtering. Like with array_filter(), the\n   *   callback is called for each item in the list. Only items for which the\n   *   callback returns TRUE are preserved.\n   *\n   * @return $this\n   *\/",115],["T_WHITESPACE","\n  ",124],["T_PUBLIC","public",125],["T_WHITESPACE"," ",125],["T_FUNCTION","function",125],["T_WHITESPACE"," ",125],["T_STRING","filter",125],"(",["T_VARIABLE","$callback",125],")",";",["T_WHITESPACE","\n\n",125],"}",["T_WHITESPACE","\n",127]]