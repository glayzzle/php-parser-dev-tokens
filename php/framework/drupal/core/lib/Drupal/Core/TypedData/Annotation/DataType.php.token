[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","TypedData",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Annotation",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Annotation",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines a data type annotation object.\n *\n * The typed data API allows modules to support any kind of data based upon\n * pre-defined primitive types and interfaces for complex data and lists.\n *\n * Defined data types may map to one of the pre-defined primitive types in\n * \\Drupal\\Core\\TypedData\\Primitive or may be complex data types, containing on\n * or more data properties. Typed data objects for complex data types have to\n * implement the \\Drupal\\Core\\TypedData\\ComplexDataInterface. Further interface\n * that may be implemented are:\n *  - \\Drupal\\Core\\Access\\AccessibleInterface\n *  - \\Drupal\\Core\\TypedData\\TranslatableInterface\n *\n * Furthermore, lists of data items are represented by objects implementing the\n * \\Drupal\\Core\\TypedData\\ListInterface. A list contains items of the same data\n * type, is ordered and may contain duplicates. The class used for a list of\n * items of a certain type may be specified using the 'list class' key.\n *\n * @see \\Drupal::typedDataManager()\n * @see \\Drupal\\Core\\TypedData\\TypedDataManager::create()\n * @see hook_data_type_info_alter()\n *\n * @ingroup typed_data\n *\n * @Annotation\n *\/",7],["T_WHITESPACE","\n",33],["T_CLASS","class",34],["T_WHITESPACE"," ",34],["T_STRING","DataType",34],["T_WHITESPACE"," ",34],["T_EXTENDS","extends",34],["T_WHITESPACE"," ",34],["T_STRING","Plugin",34],["T_WHITESPACE"," ",34],"{",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * The data type plugin ID.\n   *\n   * @var string\n   *\/",36],["T_WHITESPACE","\n  ",40],["T_PUBLIC","public",41],["T_WHITESPACE"," ",41],["T_VARIABLE","$id",41],";",["T_WHITESPACE","\n\n  ",41],["T_DOC_COMMENT","\/**\n   * The human-readable name of the data type.\n   *\n   * @ingroup plugin_translatable\n   *\n   * @var \\Drupal\\Core\\Annotation\\Translation\n   *\/",43],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$label",50],";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * The description of the data type.\n   *\n   * @ingroup plugin_translatable\n   *\n   * @var \\Drupal\\Core\\Annotation\\Translation\n   *\/",52],["T_WHITESPACE","\n  ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_VARIABLE","$description",59],";",["T_WHITESPACE","\n\n  ",59],["T_DOC_COMMENT","\/**\n   * The definition class to use for defining data of this type.\n   * Must implement the \\Drupal\\Core\\TypedData\\DataDefinitionInterface.\n   *\n   * @var string\n   *\/",61],["T_WHITESPACE","\n  ",66],["T_PUBLIC","public",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$definition_class",67],["T_WHITESPACE"," ",67],"=",["T_WHITESPACE"," ",67],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\Core\\TypedData\\DataDefinition'",67],";",["T_WHITESPACE","\n\n  ",67],["T_DOC_COMMENT","\/**\n   * The typed data class used for wrapping multiple data items of the type.\n   * Must implement the \\Drupal\\Core\\TypedData\\ListInterface.\n   *\n   * @var string\n   *\/",69],["T_WHITESPACE","\n  ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_VARIABLE","$list_class",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList'",75],";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * The definition class to use for defining a list of items of this type.\n   * Must implement the \\Drupal\\Core\\TypedData\\ListDataDefinitionInterface.\n   *\n   * @var string\n   *\/",77],["T_WHITESPACE","\n  ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_VARIABLE","$list_definition_class",83],["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\Core\\TypedData\\ListDataDefinition'",83],";",["T_WHITESPACE","\n\n  ",83],["T_DOC_COMMENT","\/**\n   * The pre-defined primitive type that this data type maps to.\n   *\n   * If set, it must be a constant defined by \\Drupal\\Core\\TypedData\\Primitive\n   * such as \\Drupal\\Core\\TypedData\\Primitive::STRING.\n   *\n   * @var string\n   *\/",85],["T_WHITESPACE","\n  ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$primitive_type",93],";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * An array of validation constraints for this type.\n   *\n   * @var array\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::getConstraints().\n   *\/",95],["T_WHITESPACE","\n  ",101],["T_PUBLIC","public",102],["T_WHITESPACE"," ",102],["T_VARIABLE","$constraints",102],";",["T_WHITESPACE","\n\n  ",102],["T_DOC_COMMENT","\/**\n   * Whether the typed object wraps the canonical representation of the data.\n   *\n   * @var bool\n   *\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::getCanonicalRepresentation()\n   *\/",104],["T_WHITESPACE","\n  ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_VARIABLE","$unwrap_for_canonical_representation",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_STRING","TRUE",111],";",["T_WHITESPACE","\n\n",111],"}",["T_WHITESPACE","\n",113]]