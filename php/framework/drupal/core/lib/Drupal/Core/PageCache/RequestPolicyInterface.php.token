[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","PageCache",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","HttpFoundation",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Request",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines the interface for request policy implementations.\n *\n * The request policy is evaluated in order to determine whether delivery of a\n * cached page should be attempted. The caller should do so if static::ALLOW is\n * returned from the check() method.\n *\/",7],["T_WHITESPACE","\n",13],["T_INTERFACE","interface",14],["T_WHITESPACE"," ",14],["T_STRING","RequestPolicyInterface",14],["T_WHITESPACE"," ",14],"{",["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Allow delivery of cached pages.\n   *\/",16],["T_WHITESPACE","\n  ",18],["T_CONST","const",19],["T_WHITESPACE"," ",19],["T_STRING","ALLOW",19],["T_WHITESPACE"," ",19],"=",["T_WHITESPACE"," ",19],["T_CONSTANT_ENCAPSED_STRING","'allow'",19],";",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Deny delivery of cached pages.\n   *\/",21],["T_WHITESPACE","\n  ",23],["T_CONST","const",24],["T_WHITESPACE"," ",24],["T_STRING","DENY",24],["T_WHITESPACE"," ",24],"=",["T_WHITESPACE"," ",24],["T_CONSTANT_ENCAPSED_STRING","'deny'",24],";",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Determines whether delivery of a cached page should be attempted.\n   *\n   * Note that the request-policy check runs very early. In particular it is\n   * not possible to determine the logged in user. Also the current route match\n   * is not yet present when the check runs. Therefore, request-policy checks\n   * need to be designed in a way such that they do not depend on any other\n   * service and only take in account the information present on the incoming\n   * request.\n   *\n   * When matching against the request path, special attention is needed to\n   * support path prefixes which are often used on multilingual sites.\n   *\n   * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n   *   The incoming request object.\n   *\n   * @return string|null\n   *   One of static::ALLOW, static::DENY or NULL. Calling code may attempt to\n   *   deliver a cached page if static::ALLOW is returned. Returns NULL if the\n   *   policy is not specified for the given request.\n   *\/",26],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","check",47],"(",["T_STRING","Request",47],["T_WHITESPACE"," ",47],["T_VARIABLE","$request",47],")",";",["T_WHITESPACE","\n\n",47],"}",["T_WHITESPACE","\n",49]]