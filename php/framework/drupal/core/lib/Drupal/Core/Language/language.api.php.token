[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Hooks provided by the base system for language support.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Core",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Language",8],["T_NS_SEPARATOR","\\",8],["T_STRING","LanguageInterface",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * @defgroup i18n Internationalization\n * @{\n * Internationalization and translation\n *\n * The principle of internationalization is that it should be possible to make a\n * Drupal site in any language (or a multi-lingual site), where only content in\n * the desired language is displayed for any particular page request. In order\n * to make this happen, developers of modules, themes, and installation profiles\n * need to make sure that all of the displayable content and user interface (UI)\n * text that their project deals with is internationalized properly, so that it\n * can be translated using the standard Drupal translation mechanisms.\n *\n * @section internationalization Internationalization\n * Different @link info_types types of information in Drupal @endlink have\n * different methods for internationalization, and different portions of the\n * UI also have different methods for internationalization. Here is a list of\n * the different mechanisms for internationalization, and some notes:\n * - UI text is always put into code and related files in English.\n * - Any time UI text is displayed using PHP code, it should be passed through\n *   either the global t() function or a t() method on the class. If it\n *   involves plurals, it should be passed through either the global\n *   \\Drupal\\Core\\StringTranslation\\PluralTranslatableMarkup::createFromTranslatedString()\n *   or a formatPlural() method on the class. Use\n *   \\Drupal\\Core\\StringTranslation\\StringTranslationTrait to get these methods\n *   into a class.\n * - Dates displayed in the UI should be passed through the 'date' service\n *   class's format() method. Again see the Services topic; the method to\n *   call is \\Drupal\\Core\\Datetime\\Date::format().\n * - Some YML files contain UI text that is automatically translatable:\n *   - *.routing.yml files: route titles. This also applies to\n *     *.links.task.yml, *.links.action.yml, and *.links.contextual.yml files.\n *   - *.info.yml files: module names and descriptions.\n * - For configuration, make sure any configuration that is displayable to\n *   users is marked as translatable in the configuration schema. Configuration\n *   types label, text, and date_format are translatable; string is\n *   non-translatable text. See the @link config_api Config API topic @endlink\n *   for more information.\n * - For annotation, make sure that any text that is displayable in the UI\n *   is wrapped in \\@Translation(). See the\n *   @link plugin_translatable Plugin translatables topic @endlink for more\n *   information.\n * - Content entities are translatable if they have\n *   @code\n *   translatable = TRUE,\n *   @endcode\n *   in their annotation. The use of entities to store user-editable content to\n *   be displayed in the site is highly recommended over creating your own\n *   method for storing, retrieving, displaying, and internationalizing content.\n * - For Twig templates, use 't' or 'trans' filters to indicate translatable\n *   text. See https:\/\/www.drupal.org\/node\/2133321 for more information.\n * - In JavaScript code, use the Drupal.t() and Drupal.formatPlural() functions\n *   (defined in core\/misc\/drupal.js) to translate UI text.\n * - If you are using a custom module, theme, etc. that is not hosted on\n *   Drupal.org, see\n *   @link interface_translation_properties Interface translation properties topic @endlink\n *   for information on how to make sure your UI text is translatable.\n *\n * @section translation Translation\n * Once your data and user interface are internationalized, the following Core\n * modules are used to translate it into different languages (machine names of\n * modules in parentheses):\n * - Language (language): Define which languages are active on the site.\n * - Interface Translation (locale): Translate UI text.\n * - Content Translation (content_translation): Translate content entities.\n * - Configuration Translation (config_translation): Translate configuration.\n *\n * The Interface Translation module deserves special mention, because besides\n * providing a UI for translating UI text, it also imports community\n * translations from the\n * @link https:\/\/localize.drupal.org Drupal translation server. @endlink If\n * UI text and provided configuration in Drupal Core and contributed modules,\n * themes, and installation profiles is properly internationalized (as described\n * above), the text is automatically added to the translation server for\n * community members to translate, via *.po files that are generated by\n * scanning the project files.\n *\n * @section context Translation string sharing and context\n * By default, translated strings are only translated once, no matter where\n * they are being used. For instance, there are many forms with Save\n * buttons on them, and they all would have t('Save') in their code. The\n * translation system will only store this string once in the translation\n * database, so that if the translation is updated, all forms using that text\n * will get the updated translation.\n *\n * Because the source of translation strings is English, and some words in\n * English have multiple meanings or uses, this centralized, shared translation\n * string storage can sometimes lead to ambiguous translations that are not\n * correct for every place the string is used. As an example, the English word\n * \"May\", in a string by itself, could be part of a list of full month names or\n * part of a list of 3-letter abbreviated month names. So, in languages where\n * the month name for May is longer than 3 letters, you'd need to translate May\n * differently depending on how it's being used. To address this problem, the\n * translation system includes the concept of the \"context\" of a translated\n * string, which can be used to disambiguate text for translators, and obtain\n * the correct translation for each usage of the string.\n *\n * Here are some examples of how to provide translation context with strings, so\n * that this information can be included in *.po files, displayed on the\n * localization server for translators, and used to obtain the correct\n * translation in the user interface:\n * @code\n * \/\/ PHP code\n * t('May', array(), array('context' => 'Long month name');\n * \\Drupal::translation()->formatPlural($count, '1 something',\n *   '@count somethings', array(), array('context' => 'My context'));\n *\n * \/\/ JavaScript code\n * Drupal.t('May', {}, {'context': 'Long month name'});\n * Drupal.formatPlural(count, '1 something', '@count somethings', {},\n *   {'context': 'My context'});\n *\n * \/\/ *.links.yml file\n * title: 'May'\n * title_context: 'Long month name'\n *\n * \/\/ *.routing.yml file\n * my.route.name:\n *   pattern: '\/something'\n *   defaults:\n *     _title: 'May'\n *     _title_context: 'Long month name'\n *\n * \/\/ Config schema to say that a certain piece of configuration should be\n * \/\/ translatable using the Config Translation API. Note that the schema label\n * \/\/ is also translatable, but it cannot have context.\n * date_format:\n *  type: string\n *  label: 'PHP date format'\n *  translatable: true\n *  translation context: 'PHP date format'\n *\n * \/\/ Twig template\n * {% trans with {'context': 'Long month name'} %}\n *  May\n * {% endtrans %}\n * @endcode\n *\n * @see transliteration\n * @see t()\n * @}\n *\/",10],["T_WHITESPACE","\n\n",151],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",153],["T_WHITESPACE","\n\n",156],["T_DOC_COMMENT","\/**\n * Perform alterations on language switcher links.\n *\n * A language switcher link may need to point to a different path or use a\n * translated link text before going through the link generator, which will\n * just handle the path aliases.\n *\n * @param $links\n *   Nested array of links keyed by language code.\n * @param $type\n *   The language type the links will switch.\n * @param $path\n *   The current path.\n *\/",158],["T_WHITESPACE","\n",171],["T_FUNCTION","function",172],["T_WHITESPACE"," ",172],["T_STRING","hook_language_switch_links_alter",172],"(",["T_ARRAY","array",172],["T_WHITESPACE"," ",172],"&",["T_VARIABLE","$links",172],",",["T_WHITESPACE"," ",172],["T_VARIABLE","$type",172],",",["T_WHITESPACE"," ",172],["T_VARIABLE","$path",172],")",["T_WHITESPACE"," ",172],"{",["T_WHITESPACE","\n  ",172],["T_VARIABLE","$language_interface",173],["T_WHITESPACE"," ",173],"=",["T_WHITESPACE"," ",173],["T_NS_SEPARATOR","\\",173],["T_STRING","Drupal",173],["T_DOUBLE_COLON","::",173],["T_STRING","languageManager",173],"(",")",["T_OBJECT_OPERATOR","->",173],["T_STRING","getCurrentLanguage",173],"(",")",";",["T_WHITESPACE","\n\n  ",173],["T_IF","if",175],["T_WHITESPACE"," ",175],"(",["T_VARIABLE","$type",175],["T_WHITESPACE"," ",175],["T_IS_EQUAL","==",175],["T_WHITESPACE"," ",175],["T_STRING","LanguageInterface",175],["T_DOUBLE_COLON","::",175],["T_STRING","TYPE_CONTENT",175],["T_WHITESPACE"," ",175],["T_BOOLEAN_AND","&&",175],["T_WHITESPACE"," ",175],["T_ISSET","isset",175],"(",["T_VARIABLE","$links",175],"[",["T_VARIABLE","$language_interface",175],["T_OBJECT_OPERATOR","->",175],["T_STRING","getId",175],"(",")","]",")",")",["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n    ",175],["T_FOREACH","foreach",176],["T_WHITESPACE"," ",176],"(",["T_VARIABLE","$links",176],"[",["T_VARIABLE","$language_interface",176],["T_OBJECT_OPERATOR","->",176],["T_STRING","getId",176],"(",")","]",["T_WHITESPACE"," ",176],["T_AS","as",176],["T_WHITESPACE"," ",176],["T_VARIABLE","$link",176],")",["T_WHITESPACE"," ",176],"{",["T_WHITESPACE","\n      ",176],["T_VARIABLE","$link",177],"[",["T_CONSTANT_ENCAPSED_STRING","'attributes'",177],"]","[",["T_CONSTANT_ENCAPSED_STRING","'class'",177],"]","[","]",["T_WHITESPACE"," ",177],"=",["T_WHITESPACE"," ",177],["T_CONSTANT_ENCAPSED_STRING","'active-language'",177],";",["T_WHITESPACE","\n    ",177],"}",["T_WHITESPACE","\n  ",178],"}",["T_WHITESPACE","\n",179],"}",["T_WHITESPACE","\n\n",180],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",182],["T_WHITESPACE","\n\n",184],["T_DOC_COMMENT","\/**\n * @defgroup transliteration Transliteration\n * @{\n * Transliterate from Unicode to US-ASCII\n *\n * Transliteration is the process of translating individual non-US-ASCII\n * characters into ASCII characters, which specifically does not transform\n * non-printable and punctuation characters in any way. This process will always\n * be both inexact and language-dependent. For instance, the character \u00c3\u0096 (O with\n * an umlaut) is commonly transliterated as O, but in German text, the\n * convention would be to transliterate it as Oe or OE, depending on the context\n * (beginning of a capitalized word, or in an all-capital letter context).\n *\n * The Drupal default transliteration process transliterates text character by\n * character using a database of generic character transliterations and\n * language-specific overrides. Character context (such as all-capitals\n * vs. initial capital letter only) is not taken into account, and in\n * transliterations of capital letters that result in two or more letters, by\n * convention only the first is capitalized in the Drupal transliteration\n * result. Also, only Unicode characters of 4 bytes or less can be\n * transliterated in the base system; language-specific overrides can be made\n * for longer Unicode characters. So, the process has limitations; however,\n * since the reason for transliteration is typically to create machine names or\n * file names, this should not really be a problem. After transliteration,\n * other transformation or validation may be necessary, such as converting\n * spaces to another character, removing non-printable characters,\n * lower-casing, etc.\n *\n * Here is a code snippet to transliterate some text:\n * @code\n * \/\/ Use the current default interface language.\n * $langcode = \\Drupal::languageManager()->getCurrentLanguage()->getId();\n * \/\/ Instantiate the transliteration class.\n * $trans = \\Drupal::transliteration();\n * \/\/ Use this to transliterate some text.\n * $transformed = $trans->transliterate($string, $langcode);\n * @endcode\n *\n * Drupal Core provides the generic transliteration character tables and\n * overrides for a few common languages; modules can implement\n * hook_transliteration_overrides_alter() to provide further language-specific\n * overrides (including providing transliteration for Unicode characters that\n * are longer than 4 bytes). Modules can also completely override the\n * transliteration classes in \\Drupal\\Core\\CoreServiceProvider.\n *\/",186],["T_WHITESPACE","\n\n",230],["T_DOC_COMMENT","\/**\n * Provide language-specific overrides for transliteration.\n *\n * If the overrides you want to provide are standard for your language, consider\n * providing a patch for the Drupal Core transliteration system instead of using\n * this hook. This hook can be used temporarily until Drupal Core's\n * transliteration tables are fixed, or for sites that want to use a\n * non-standard transliteration system.\n *\n * @param array $overrides\n *   Associative array of language-specific overrides whose keys are integer\n *   Unicode character codes, and whose values are the transliterations of those\n *   characters in the given language, to override default transliterations.\n * @param string $langcode\n *   The code for the language that is being transliterated.\n *\n * @ingroup hooks\n *\/",232],["T_WHITESPACE","\n",249],["T_FUNCTION","function",250],["T_WHITESPACE"," ",250],["T_STRING","hook_transliteration_overrides_alter",250],"(","&",["T_VARIABLE","$overrides",250],",",["T_WHITESPACE"," ",250],["T_VARIABLE","$langcode",250],")",["T_WHITESPACE"," ",250],"{",["T_WHITESPACE","\n  ",250],["T_COMMENT","\/\/ Provide special overrides for German for a custom site.\n",251],["T_WHITESPACE","  ",252],["T_IF","if",252],["T_WHITESPACE"," ",252],"(",["T_VARIABLE","$langcode",252],["T_WHITESPACE"," ",252],["T_IS_EQUAL","==",252],["T_WHITESPACE"," ",252],["T_CONSTANT_ENCAPSED_STRING","'de'",252],")",["T_WHITESPACE"," ",252],"{",["T_WHITESPACE","\n    ",252],["T_COMMENT","\/\/ The core-provided transliteration of \u00c3\u0084 is Ae, but we want just A.\n",253],["T_WHITESPACE","    ",254],["T_VARIABLE","$overrides",254],"[",["T_LNUMBER","0xC4",254],"]",["T_WHITESPACE"," ",254],"=",["T_WHITESPACE"," ",254],["T_CONSTANT_ENCAPSED_STRING","'A'",254],";",["T_WHITESPACE","\n  ",254],"}",["T_WHITESPACE","\n",255],"}",["T_WHITESPACE","\n\n",256],["T_DOC_COMMENT","\/**\n * @} End of \"defgroup transliteration\".\n *\/",258],["T_WHITESPACE","\n",260]]