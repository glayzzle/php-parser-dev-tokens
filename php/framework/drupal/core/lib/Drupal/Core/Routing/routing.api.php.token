[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Hooks and documentation related to the routing system.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @defgroup routing Routing API\n * @{\n * Route page requests to code based on URLs.\n *\n * @section sec_overview Overview and terminology\n * The Drupal routing system defines how Drupal responds to URL requests that\n * the web server passes on to Drupal. The routing system is based on the\n * @link http:\/\/symfony.com Symfony framework. @endlink The central idea is\n * that Drupal subsystems and modules can register routes (basically, URL\n * paths and context); they can also register to respond dynamically to\n * routes, for more flexibility. When Drupal receives a URL request, it will\n * attempt to match the request to a registered route, and query dynamic\n * responders. If a match is made, Drupal will then instantiate the required\n * classes, gather the data, format it, and send it back to the web browser.\n * Otherwise, Drupal will return a 404 or 403 response.\n *\n * The following sections of this topic provide an overview of the routing API.\n * For more detailed information, see\n * https:\/\/www.drupal.org\/developing\/api\/8\/routing\n *\n * @section sec_register Registering simple routes\n * To register a route, add lines similar to this to a module_name.routing.yml\n * file in your top-level module directory:\n * @code\n * dblog.overview:\n *   path: '\/admin\/reports\/dblog'\n *   defaults:\n *     _controller: '\\Drupal\\dblog\\Controller\\DbLogController::overview'\n *     _title: 'Recent log messages'\n *   requirements:\n *     _permission: 'access site reports'\n * @endcode\n * Some notes:\n * - The first line is the machine name of the route. Typically, it is prefixed\n *   by the machine name of the module that defines the route, or the name of\n *   a subsystem.\n * - The 'path' line gives the URL path of the route (relative to the site's\n *   base URL). Note: The path in Drupal is treated case insensitive so\n *   \/example and \/EXAmplE should return the same page.\n *   @todo Fix https:\/\/www.drupal.org\/node\/2075889 to actually get this\n *   behaviour.\n * - The 'defaults' section tells how to build the main content of the route,\n *   and can also give other information, such as the page title and additional\n *   arguments for the route controller method. There are several possibilities\n *   for how to build the main content, including:\n *   - _controller: A callable, usually a method on a page controller class\n *     (see @ref sec_controller below for details).\n *   - _form: A form controller class. See the\n *     @link form_api Form API topic @endlink for more information about\n *     form controllers.\n *   - _entity_form: A form for editing an entity. See the\n *     @link entity_api Entity API topic @endlink for more information.\n * - The 'requirements' section is used in Drupal to give access permission\n *   instructions (it has other uses in the Symfony framework). Most\n *   routes have a simple permission-based access scheme, as shown in this\n *   example. See the @link user_api Permission system topic @endlink for\n *   more information about permissions.\n *\n * See https:\/\/www.drupal.org\/node\/2092643 for more details about *.routing.yml\n * files, and https:\/\/www.drupal.org\/node\/2122201 for information on how to\n * set up dynamic routes. The @link events Events topic @endlink is also\n * relevant to dynamic routes.\n *\n * @section sec_placeholders Defining routes with placeholders\n * Some routes have placeholders in them, and these can also be defined in a\n * module_name.routing.yml file, as in this example from the Block module:\n * @code\n * entity.block.edit_form:\n *   path: '\/admin\/structure\/block\/manage\/{block}'\n *   defaults:\n *     _entity_form: 'block.default'\n *     _title: 'Configure block'\n *   requirements:\n *     _entity_access: 'block.update'\n * @endcode\n * In the path, '{block}' is a placeholder - it will be replaced by the\n * ID of the block that is being configured by the entity system. See the\n * @link entity_api Entity API topic @endlink for more information.\n *\n * @section sec_controller Route controllers for simple routes\n * For simple routes, after you have defined the route in a *.routing.yml file\n * (see @ref sec_register above), the next step is to define a page controller\n * class and method. Page controller classes do not necessarily need to\n * implement any particular interface or extend any particular base class. The\n * only requirement is that the method specified in your *.routing.yml file\n * returns:\n * - A render array (see the\n *   @link theme_render Theme and render topic @endlink for more information).\n *   This render array is then rendered in the requested format (HTML, dialog,\n *   modal, AJAX are supported by default). In the case of HTML, it will be\n *   surrounded by blocks by default: the Block module is enabled by default,\n *   and hence its Page Display Variant that surrounds the main content with\n *   blocks is also used by default.\n * - A \\Symfony\\Component\\HttpFoundation\\Response object.\n * As a note, if your module registers multiple simple routes, it is usual\n * (and usually easiest) to put all of their methods on one controller class.\n *\n * If the route has placeholders (see @ref sec_placeholders above) the\n * placeholders will be passed to the method (using reflection) by name.\n * For example, the placeholder '{myvar}' in a route will become the $myvar\n * parameter to the method.\n *\n * Additionally, if a parameter is typed to one of the following special classes\n * the system will pass those values as well.\n *\n * - \\Symfony\\Component\\HttpFoundation\\Request: The raw Symfony request object.\n *   It is generally only useful if the controller needs access to the query\n *   parameters of the request. By convention, this parameter is usually named\n *   $request.\n * - \\Psr\\Http\\Message\\ServerRequestInterface: The raw request, represented\n *   using the PSR-7 ServerRequest format. This object is derived as necessary\n *   from the Symfony request, so if either will suffice the Symfony request\n *   will be slightly more performant. By convention this parameter is usually\n *   named $request.\n * - \\Drupal\\Core\\Routing\\RouteMatchInterface: The \"route match\" data from\n *   this request. This object contains various standard data derived from\n *   the request and routing process. Consult the interface for details.\n *\n * Most controllers will need to display some information stored in the Drupal\n * database, which will involve using one or more Drupal services (see the\n * @link container Services and container topic @endlink). In order to properly\n * inject services, a controller should implement\n * \\Drupal\\Core\\DependencyInjection\\ContainerInjectionInterface; simple\n * controllers can do this by extending the\n * \\Drupal\\Core\\Controller\\ControllerBase class. See\n * \\Drupal\\dblog\\Controller\\DbLogController for a straightforward example of\n * a controller class.\n *\n * @}\n *\/",8],["T_WHITESPACE","\n",138]]