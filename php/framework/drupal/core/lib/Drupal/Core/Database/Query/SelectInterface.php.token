[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Connection",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface definition for a Select Query object.\n *\n * @ingroup database\n *\/",7],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","SelectInterface",12],["T_WHITESPACE"," ",12],["T_EXTENDS","extends",12],["T_WHITESPACE"," ",12],["T_STRING","ConditionInterface",12],",",["T_WHITESPACE"," ",12],["T_STRING","AlterableInterface",12],",",["T_WHITESPACE"," ",12],["T_STRING","ExtendableInterface",12],",",["T_WHITESPACE"," ",12],["T_STRING","PlaceholderInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_COMMENT","\/* Alter accessors to expose the query data to alter hooks. *\/",14],["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Returns a reference to the fields array for this query.\n   *\n   * Because this method returns by reference, alter hooks may edit the fields\n   * array directly to make their changes. If just adding fields, however, the\n   * use of addField() is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getFields();\n   * @endcode\n   *\n   * @return\n   *   A reference to the fields array structure.\n   *\/",16],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],"&",["T_STRING","getFields",32],"(",")",";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Returns a reference to the expressions array for this query.\n   *\n   * Because this method returns by reference, alter hooks may edit the expressions\n   * array directly to make their changes. If just adding expressions, however, the\n   * use of addExpression() is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getExpressions();\n   * @endcode\n   *\n   * @return\n   *   A reference to the expression array structure.\n   *\/",34],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],"&",["T_STRING","getExpressions",50],"(",")",";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * Returns a reference to the order by array for this query.\n   *\n   * Because this method returns by reference, alter hooks may edit the order-by\n   * array directly to make their changes. If just adding additional ordering\n   * fields, however, the use of orderBy() is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getOrderBy();\n   * @endcode\n   *\n   * @return\n   *   A reference to the expression array structure.\n   *\/",52],["T_WHITESPACE","\n  ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],"&",["T_STRING","getOrderBy",68],"(",")",";",["T_WHITESPACE","\n\n  ",68],["T_DOC_COMMENT","\/**\n   * Returns a reference to the group-by array for this query.\n   *\n   * Because this method returns by reference, alter hooks may edit the group-by\n   * array directly to make their changes. If just adding additional grouping\n   * fields, however, the use of groupBy() is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getGroupBy();\n   * @endcode\n   *\n   * @return\n   *   A reference to the group-by array structure.\n   *\/",70],["T_WHITESPACE","\n  ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],"&",["T_STRING","getGroupBy",86],"(",")",";",["T_WHITESPACE","\n\n  ",86],["T_DOC_COMMENT","\/**\n   * Returns a reference to the tables array for this query.\n   *\n   * Because this method returns by reference, alter hooks may edit the tables\n   * array directly to make their changes. If just adding tables, however, the\n   * use of the join() methods is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getTables();\n   * @endcode\n   *\n   * @return\n   *   A reference to the tables array structure.\n   *\/",88],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],"&",["T_STRING","getTables",104],"(",")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Returns a reference to the union queries for this query. This include\n   * queries for UNION, UNION ALL, and UNION DISTINCT.\n   *\n   * Because this method returns by reference, alter hooks may edit the tables\n   * array directly to make their changes. If just adding union queries,\n   * however, the use of the union() method is preferred.\n   *\n   * Note that this method must be called by reference as well:\n   *\n   * @code\n   * $fields =& $query->getUnion();\n   * @endcode\n   *\n   * @return\n   *   A reference to the union query array structure.\n   *\/",106],["T_WHITESPACE","\n  ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],"&",["T_STRING","getUnion",123],"(",")",";",["T_WHITESPACE","\n\n  ",123],["T_DOC_COMMENT","\/**\n   * Escapes characters that work as wildcard characters in a LIKE pattern.\n   *\n   * @param $string\n   *   The string to escape.\n   *\n   * @return string\n   *   The escaped string.\n   *\n   * @see \\Drupal\\Core\\Database\\Connection::escapeLike()\n   *\/",125],["T_WHITESPACE","\n  ",135],["T_PUBLIC","public",136],["T_WHITESPACE"," ",136],["T_FUNCTION","function",136],["T_WHITESPACE"," ",136],["T_STRING","escapeLike",136],"(",["T_VARIABLE","$string",136],")",";",["T_WHITESPACE","\n\n  ",136],["T_DOC_COMMENT","\/**\n   * Escapes a field name string.\n   *\n   * Force all field names to be strictly alphanumeric-plus-underscore.\n   * For some database drivers, it may also wrap the field name in\n   * database-specific escape characters.\n   *\n   * @param string $string\n   *   An unsanitized field name.\n   *\n   * @return\n   *   The sanitized field name string.\n   *\/",138],["T_WHITESPACE","\n  ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","escapeField",151],"(",["T_VARIABLE","$string",151],")",";",["T_WHITESPACE","\n\n  ",151],["T_DOC_COMMENT","\/**\n   * Compiles and returns an associative array of the arguments for this prepared statement.\n   *\n   * @param $queryPlaceholder\n   *   When collecting the arguments of a subquery, the main placeholder\n   *   object should be passed as this parameter.\n   *\n   * @return\n   *   An associative array of all placeholder arguments for this query.\n   *\/",153],["T_WHITESPACE","\n  ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","getArguments",163],"(",["T_STRING","PlaceholderInterface",163],["T_WHITESPACE"," ",163],["T_VARIABLE","$queryPlaceholder",163],["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_STRING","NULL",163],")",";",["T_WHITESPACE","\n\n  ",163],["T_COMMENT","\/* Query building operations *\/",165],["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Sets this query to be DISTINCT.\n   *\n   * @param $distinct\n   *   TRUE to flag this query DISTINCT, FALSE to disable it.\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",167],["T_WHITESPACE","\n  ",174],["T_PUBLIC","public",175],["T_WHITESPACE"," ",175],["T_FUNCTION","function",175],["T_WHITESPACE"," ",175],["T_STRING","distinct",175],"(",["T_VARIABLE","$distinct",175],["T_WHITESPACE"," ",175],"=",["T_WHITESPACE"," ",175],["T_STRING","TRUE",175],")",";",["T_WHITESPACE","\n\n  ",175],["T_DOC_COMMENT","\/**\n   * Adds a field to the list to be SELECTed.\n   *\n   * @param $table_alias\n   *   The name of the table from which the field comes, as an alias. Generally\n   *   you will want to use the return value of join() here to ensure that it is\n   *   valid.\n   * @param $field\n   *   The name of the field.\n   * @param $alias\n   *   The alias for this field. If not specified, one will be generated\n   *   automatically based on the $table_alias and $field. The alias will be\n   *   checked for uniqueness, so the requested alias may not be the alias\n   *   that is assigned in all cases.\n   * @return\n   *   The unique alias that was assigned for this field.\n   *\/",177],["T_WHITESPACE","\n  ",193],["T_PUBLIC","public",194],["T_WHITESPACE"," ",194],["T_FUNCTION","function",194],["T_WHITESPACE"," ",194],["T_STRING","addField",194],"(",["T_VARIABLE","$table_alias",194],",",["T_WHITESPACE"," ",194],["T_VARIABLE","$field",194],",",["T_WHITESPACE"," ",194],["T_VARIABLE","$alias",194],["T_WHITESPACE"," ",194],"=",["T_WHITESPACE"," ",194],["T_STRING","NULL",194],")",";",["T_WHITESPACE","\n\n  ",194],["T_DOC_COMMENT","\/**\n   * Add multiple fields from the same table to be SELECTed.\n   *\n   * This method does not return the aliases set for the passed fields. In the\n   * majority of cases that is not a problem, as the alias will be the field\n   * name. However, if you do need to know the alias you can call getFields()\n   * and examine the result to determine what alias was created. Alternatively,\n   * simply use addField() for the few fields you care about and this method for\n   * the rest.\n   *\n   * @param $table_alias\n   *   The name of the table from which the field comes, as an alias. Generally\n   *   you will want to use the return value of join() here to ensure that it is\n   *   valid.\n   * @param $fields\n   *   An indexed array of fields present in the specified table that should be\n   *   included in this query. If not specified, $table_alias.* will be generated\n   *   without any aliases.\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",196],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","fields",217],"(",["T_VARIABLE","$table_alias",217],",",["T_WHITESPACE"," ",217],["T_ARRAY","array",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$fields",217],["T_WHITESPACE"," ",217],"=",["T_WHITESPACE"," ",217],["T_ARRAY","array",217],"(",")",")",";",["T_WHITESPACE","\n\n  ",217],["T_DOC_COMMENT","\/**\n   * Adds an expression to the list of \"fields\" to be SELECTed.\n   *\n   * An expression can be any arbitrary string that is valid SQL. That includes\n   * various functions, which may in some cases be database-dependent. This\n   * method makes no effort to correct for database-specific functions.\n   *\n   * @param $expression\n   *   The expression string. May contain placeholders.\n   * @param $alias\n   *   The alias for this expression. If not specified, one will be generated\n   *   automatically in the form \"expression_#\". The alias will be checked for\n   *   uniqueness, so the requested alias may not be the alias that is assigned\n   *   in all cases.\n   * @param $arguments\n   *   Any placeholder arguments needed for this expression.\n   * @return\n   *   The unique alias that was assigned for this expression.\n   *\/",219],["T_WHITESPACE","\n  ",237],["T_PUBLIC","public",238],["T_WHITESPACE"," ",238],["T_FUNCTION","function",238],["T_WHITESPACE"," ",238],["T_STRING","addExpression",238],"(",["T_VARIABLE","$expression",238],",",["T_WHITESPACE"," ",238],["T_VARIABLE","$alias",238],["T_WHITESPACE"," ",238],"=",["T_WHITESPACE"," ",238],["T_STRING","NULL",238],",",["T_WHITESPACE"," ",238],["T_VARIABLE","$arguments",238],["T_WHITESPACE"," ",238],"=",["T_WHITESPACE"," ",238],["T_ARRAY","array",238],"(",")",")",";",["T_WHITESPACE","\n\n  ",238],["T_DOC_COMMENT","\/**\n   * Default Join against another table in the database.\n   *\n   * This method is a convenience method for innerJoin().\n   *\n   * @param $table\n   *   The table against which to join. May be a string or another SelectQuery\n   *   object. If a query object is passed, it will be used as a subselect.\n   *   Unless the table name starts with the database \/ schema name and a dot\n   *   it will be prefixed.\n   * @param $alias\n   *   The alias for the table. In most cases this should be the first letter\n   *   of the table, or the first letter of each \"word\" in the table.\n   * @param $condition\n   *   The condition on which to join this table. If the join requires values,\n   *   this clause should use a named placeholder and the value or values to\n   *   insert should be passed in the 4th parameter. For the first table joined\n   *   on a query, this value is ignored as the first table is taken as the base\n   *   table. The token %alias can be used in this string to be replaced with\n   *   the actual alias. This is useful when $alias is modified by the database\n   *   system, for example, when joining the same table more than once.\n   * @param $arguments\n   *   An array of arguments to replace into the $condition of this join.\n   * @return\n   *   The unique alias that was assigned for this table.\n   *\/",240],["T_WHITESPACE","\n  ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","join",266],"(",["T_VARIABLE","$table",266],",",["T_WHITESPACE"," ",266],["T_VARIABLE","$alias",266],["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_STRING","NULL",266],",",["T_WHITESPACE"," ",266],["T_VARIABLE","$condition",266],["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_STRING","NULL",266],",",["T_WHITESPACE"," ",266],["T_VARIABLE","$arguments",266],["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_ARRAY","array",266],"(",")",")",";",["T_WHITESPACE","\n\n  ",266],["T_DOC_COMMENT","\/**\n   * Inner Join against another table in the database.\n   *\n   * @param $table\n   *   The table against which to join. May be a string or another SelectQuery\n   *   object. If a query object is passed, it will be used as a subselect.\n   *   Unless the table name starts with the database \/ schema name and a dot\n   *   it will be prefixed.\n   * @param $alias\n   *   The alias for the table. In most cases this should be the first letter\n   *   of the table, or the first letter of each \"word\" in the table.\n   * @param $condition\n   *   The condition on which to join this table. If the join requires values,\n   *   this clause should use a named placeholder and the value or values to\n   *   insert should be passed in the 4th parameter. For the first table joined\n   *   on a query, this value is ignored as the first table is taken as the base\n   *   table. The token %alias can be used in this string to be replaced with\n   *   the actual alias. This is useful when $alias is modified by the database\n   *   system, for example, when joining the same table more than once.\n   * @param $arguments\n   *   An array of arguments to replace into the $condition of this join.\n   * @return\n   *   The unique alias that was assigned for this table.\n   *\/",268],["T_WHITESPACE","\n  ",291],["T_PUBLIC","public",292],["T_WHITESPACE"," ",292],["T_FUNCTION","function",292],["T_WHITESPACE"," ",292],["T_STRING","innerJoin",292],"(",["T_VARIABLE","$table",292],",",["T_WHITESPACE"," ",292],["T_VARIABLE","$alias",292],["T_WHITESPACE"," ",292],"=",["T_WHITESPACE"," ",292],["T_STRING","NULL",292],",",["T_WHITESPACE"," ",292],["T_VARIABLE","$condition",292],["T_WHITESPACE"," ",292],"=",["T_WHITESPACE"," ",292],["T_STRING","NULL",292],",",["T_WHITESPACE"," ",292],["T_VARIABLE","$arguments",292],["T_WHITESPACE"," ",292],"=",["T_WHITESPACE"," ",292],["T_ARRAY","array",292],"(",")",")",";",["T_WHITESPACE","\n\n  ",292],["T_DOC_COMMENT","\/**\n   * Left Outer Join against another table in the database.\n   *\n   * @param $table\n   *   The table against which to join. May be a string or another SelectQuery\n   *   object. If a query object is passed, it will be used as a subselect.\n   *   Unless the table name starts with the database \/ schema name and a dot\n   *   it will be prefixed.\n   * @param $alias\n   *   The alias for the table. In most cases this should be the first letter\n   *   of the table, or the first letter of each \"word\" in the table.\n   * @param $condition\n   *   The condition on which to join this table. If the join requires values,\n   *   this clause should use a named placeholder and the value or values to\n   *   insert should be passed in the 4th parameter. For the first table joined\n   *   on a query, this value is ignored as the first table is taken as the base\n   *   table. The token %alias can be used in this string to be replaced with\n   *   the actual alias. This is useful when $alias is modified by the database\n   *   system, for example, when joining the same table more than once.\n   * @param $arguments\n   *   An array of arguments to replace into the $condition of this join.\n   * @return\n   *   The unique alias that was assigned for this table.\n   *\/",294],["T_WHITESPACE","\n  ",317],["T_PUBLIC","public",318],["T_WHITESPACE"," ",318],["T_FUNCTION","function",318],["T_WHITESPACE"," ",318],["T_STRING","leftJoin",318],"(",["T_VARIABLE","$table",318],",",["T_WHITESPACE"," ",318],["T_VARIABLE","$alias",318],["T_WHITESPACE"," ",318],"=",["T_WHITESPACE"," ",318],["T_STRING","NULL",318],",",["T_WHITESPACE"," ",318],["T_VARIABLE","$condition",318],["T_WHITESPACE"," ",318],"=",["T_WHITESPACE"," ",318],["T_STRING","NULL",318],",",["T_WHITESPACE"," ",318],["T_VARIABLE","$arguments",318],["T_WHITESPACE"," ",318],"=",["T_WHITESPACE"," ",318],["T_ARRAY","array",318],"(",")",")",";",["T_WHITESPACE","\n\n  ",318],["T_DOC_COMMENT","\/**\n   * Right Outer Join against another table in the database.\n   *\n   * @param $table\n   *   The table against which to join. May be a string or another SelectQuery\n   *   object. If a query object is passed, it will be used as a subselect.\n   *   Unless the table name starts with the database \/ schema name and a dot\n   *   it will be prefixed.\n   * @param $alias\n   *   The alias for the table. In most cases this should be the first letter\n   *   of the table, or the first letter of each \"word\" in the table.\n   * @param $condition\n   *   The condition on which to join this table. If the join requires values,\n   *   this clause should use a named placeholder and the value or values to\n   *   insert should be passed in the 4th parameter. For the first table joined\n   *   on a query, this value is ignored as the first table is taken as the base\n   *   table. The token %alias can be used in this string to be replaced with\n   *   the actual alias. This is useful when $alias is modified by the database\n   *   system, for example, when joining the same table more than once.\n   * @param $arguments\n   *   An array of arguments to replace into the $condition of this join.\n   * @return\n   *   The unique alias that was assigned for this table.\n   *\n   * @deprecated as of Drupal 8.1.x, will be removed in Drupal 9.0.0. Instead,\n   *   change the query to use leftJoin(). For instance:\n   *   db_query('A')->rightJoin('B') is identical to\n   *   db_query('B')->leftJoin('A'). This functionality has been deprecated\n   *   because SQLite does not support it.\n   *\/",320],["T_WHITESPACE","\n  ",349],["T_PUBLIC","public",350],["T_WHITESPACE"," ",350],["T_FUNCTION","function",350],["T_WHITESPACE"," ",350],["T_STRING","rightJoin",350],"(",["T_VARIABLE","$table",350],",",["T_WHITESPACE"," ",350],["T_VARIABLE","$alias",350],["T_WHITESPACE"," ",350],"=",["T_WHITESPACE"," ",350],["T_STRING","NULL",350],",",["T_WHITESPACE"," ",350],["T_VARIABLE","$condition",350],["T_WHITESPACE"," ",350],"=",["T_WHITESPACE"," ",350],["T_STRING","NULL",350],",",["T_WHITESPACE"," ",350],["T_VARIABLE","$arguments",350],["T_WHITESPACE"," ",350],"=",["T_WHITESPACE"," ",350],["T_ARRAY","array",350],"(",")",")",";",["T_WHITESPACE","\n\n  ",350],["T_DOC_COMMENT","\/**\n   * Join against another table in the database.\n   *\n   * This method does the \"hard\" work of queuing up a table to be joined against.\n   * In some cases, that may include dipping into the Schema API to find the necessary\n   * fields on which to join.\n   *\n   * @param $type\n   *   The type of join. Typically one one of INNER, LEFT OUTER, and RIGHT OUTER.\n   * @param $table\n   *   The table against which to join. May be a string or another SelectQuery\n   *   object. If a query object is passed, it will be used as a subselect.\n   *   Unless the table name starts with the database \/ schema name and a dot\n   *   it will be prefixed.\n   * @param $alias\n   *   The alias for the table. In most cases this should be the first letter\n   *   of the table, or the first letter of each \"word\" in the table. If omitted,\n   *   one will be dynamically generated.\n   * @param $condition\n   *   The condition on which to join this table. If the join requires values,\n   *   this clause should use a named placeholder and the value or values to\n   *   insert should be passed in the 4th parameter. For the first table joined\n   *   on a query, this value is ignored as the first table is taken as the base\n   *   table. The token %alias can be used in this string to be replaced with\n   *   the actual alias. This is useful when $alias is modified by the database\n   *   system, for example, when joining the same table more than once.\n   * @param $arguments\n   *   An array of arguments to replace into the $condition of this join.\n   * @return\n   *   The unique alias that was assigned for this table.\n   *\/",352],["T_WHITESPACE","\n  ",382],["T_PUBLIC","public",383],["T_WHITESPACE"," ",383],["T_FUNCTION","function",383],["T_WHITESPACE"," ",383],["T_STRING","addJoin",383],"(",["T_VARIABLE","$type",383],",",["T_WHITESPACE"," ",383],["T_VARIABLE","$table",383],",",["T_WHITESPACE"," ",383],["T_VARIABLE","$alias",383],["T_WHITESPACE"," ",383],"=",["T_WHITESPACE"," ",383],["T_STRING","NULL",383],",",["T_WHITESPACE"," ",383],["T_VARIABLE","$condition",383],["T_WHITESPACE"," ",383],"=",["T_WHITESPACE"," ",383],["T_STRING","NULL",383],",",["T_WHITESPACE"," ",383],["T_VARIABLE","$arguments",383],["T_WHITESPACE"," ",383],"=",["T_WHITESPACE"," ",383],["T_ARRAY","array",383],"(",")",")",";",["T_WHITESPACE","\n\n  ",383],["T_DOC_COMMENT","\/**\n   * Orders the result set by a given field.\n   *\n   * If called multiple times, the query will order by each specified field in the\n   * order this method is called.\n   *\n   * If the query uses DISTINCT or GROUP BY conditions, fields or expressions\n   * that are used for the order must be selected to be compatible with some\n   * databases like PostgreSQL. The PostgreSQL driver can handle simple cases\n   * automatically but it is suggested to explicitly specify them. Additionally,\n   * when ordering on an alias, the alias must be added before orderBy() is\n   * called.\n   *\n   * @param $field\n   *   The field on which to order. The field is escaped for security so only\n   *   valid field and alias names are possible. To order by an expression, add\n   *   the expression with addExpression() first and then use the alias to order\n   *   on.\n   *\n   *   Example:\n   *   <code>\n   *   $query->addExpression('SUBSTRING(thread, 1, (LENGTH(thread) - 1))', 'order_field');\n   *   $query->orderBy('order_field', 'ASC');\n   *   <\/code>\n   * @param $direction\n   *   The direction to sort. Legal values are \"ASC\" and \"DESC\". Any other value\n   *   will be converted to \"ASC\".\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",385],["T_WHITESPACE","\n  ",414],["T_PUBLIC","public",415],["T_WHITESPACE"," ",415],["T_FUNCTION","function",415],["T_WHITESPACE"," ",415],["T_STRING","orderBy",415],"(",["T_VARIABLE","$field",415],",",["T_WHITESPACE"," ",415],["T_VARIABLE","$direction",415],["T_WHITESPACE"," ",415],"=",["T_WHITESPACE"," ",415],["T_CONSTANT_ENCAPSED_STRING","'ASC'",415],")",";",["T_WHITESPACE","\n\n  ",415],["T_DOC_COMMENT","\/**\n   * Orders the result set by a random value.\n   *\n   * This may be stacked with other orderBy() calls. If so, the query will order\n   * by each specified field, including this one, in the order called. Although\n   * this method may be called multiple times on the same query, doing so\n   * is not particularly useful.\n   *\n   * Note: The method used by most drivers may not scale to very large result\n   * sets. If you need to work with extremely large data sets, you may create\n   * your own database driver by subclassing off of an existing driver and\n   * implementing your own randomization mechanism. See\n   *\n   * http:\/\/jan.kneschke.de\/projects\/mysql\/order-by-rand\/\n   *\n   * for an example of such an alternate sorting mechanism.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object\n   *\/",417],["T_WHITESPACE","\n  ",436],["T_PUBLIC","public",437],["T_WHITESPACE"," ",437],["T_FUNCTION","function",437],["T_WHITESPACE"," ",437],["T_STRING","orderRandom",437],"(",")",";",["T_WHITESPACE","\n\n  ",437],["T_DOC_COMMENT","\/**\n   * Restricts a query to a given range in the result set.\n   *\n   * If this method is called with no parameters, will remove any range\n   * directives that have been set.\n   *\n   * @param $start\n   *   The first record from the result set to return. If NULL, removes any\n   *   range directives that are set.\n   * @param $length\n   *   The number of records to return from the result set.\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",439],["T_WHITESPACE","\n  ",452],["T_PUBLIC","public",453],["T_WHITESPACE"," ",453],["T_FUNCTION","function",453],["T_WHITESPACE"," ",453],["T_STRING","range",453],"(",["T_VARIABLE","$start",453],["T_WHITESPACE"," ",453],"=",["T_WHITESPACE"," ",453],["T_STRING","NULL",453],",",["T_WHITESPACE"," ",453],["T_VARIABLE","$length",453],["T_WHITESPACE"," ",453],"=",["T_WHITESPACE"," ",453],["T_STRING","NULL",453],")",";",["T_WHITESPACE","\n\n  ",453],["T_DOC_COMMENT","\/**\n   * Add another Select query to UNION to this one.\n   *\n   * Union queries consist of two or more queries whose\n   * results are effectively concatenated together. Queries\n   * will be UNIONed in the order they are specified, with\n   * this object's query coming first. Duplicate columns will\n   * be discarded. All forms of UNION are supported, using\n   * the second '$type' argument.\n   *\n   * Note: All queries UNIONed together must have the same\n   * field structure, in the same order. It is up to the\n   * caller to ensure that they match properly. If they do\n   * not, an SQL syntax error will result.\n   *\n   * @param $query\n   *   The query to UNION to this query.\n   * @param $type\n   *   The type of UNION to add to the query. Defaults to plain\n   *   UNION.\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",455],["T_WHITESPACE","\n  ",477],["T_PUBLIC","public",478],["T_WHITESPACE"," ",478],["T_FUNCTION","function",478],["T_WHITESPACE"," ",478],["T_STRING","union",478],"(",["T_STRING","SelectInterface",478],["T_WHITESPACE"," ",478],["T_VARIABLE","$query",478],",",["T_WHITESPACE"," ",478],["T_VARIABLE","$type",478],["T_WHITESPACE"," ",478],"=",["T_WHITESPACE"," ",478],["T_CONSTANT_ENCAPSED_STRING","''",478],")",";",["T_WHITESPACE","\n\n  ",478],["T_DOC_COMMENT","\/**\n   * Groups the result set by the specified field.\n   *\n   * @param $field\n   *   The field on which to group. This should be the field as aliased.\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   The called object.\n   *\/",480],["T_WHITESPACE","\n  ",487],["T_PUBLIC","public",488],["T_WHITESPACE"," ",488],["T_FUNCTION","function",488],["T_WHITESPACE"," ",488],["T_STRING","groupBy",488],"(",["T_VARIABLE","$field",488],")",";",["T_WHITESPACE","\n\n  ",488],["T_DOC_COMMENT","\/**\n   * Get the equivalent COUNT query of this query as a new query object.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\SelectInterface\n   *   A new SelectQuery object with no fields or expressions besides COUNT(*).\n   *\/",490],["T_WHITESPACE","\n  ",495],["T_PUBLIC","public",496],["T_WHITESPACE"," ",496],["T_FUNCTION","function",496],["T_WHITESPACE"," ",496],["T_STRING","countQuery",496],"(",")",";",["T_WHITESPACE","\n\n  ",496],["T_DOC_COMMENT","\/**\n   * Indicates if preExecute() has already been called on that object.\n   *\n   * @return\n   *   TRUE is this query has already been prepared, FALSE otherwise.\n   *\/",498],["T_WHITESPACE","\n  ",503],["T_PUBLIC","public",504],["T_WHITESPACE"," ",504],["T_FUNCTION","function",504],["T_WHITESPACE"," ",504],["T_STRING","isPrepared",504],"(",")",";",["T_WHITESPACE","\n\n  ",504],["T_DOC_COMMENT","\/**\n   * Generic preparation and validation for a SELECT query.\n   *\n   * @return\n   *   TRUE if the validation was successful, FALSE if not.\n   *\/",506],["T_WHITESPACE","\n  ",511],["T_PUBLIC","public",512],["T_WHITESPACE"," ",512],["T_FUNCTION","function",512],["T_WHITESPACE"," ",512],["T_STRING","preExecute",512],"(",["T_STRING","SelectInterface",512],["T_WHITESPACE"," ",512],["T_VARIABLE","$query",512],["T_WHITESPACE"," ",512],"=",["T_WHITESPACE"," ",512],["T_STRING","NULL",512],")",";",["T_WHITESPACE","\n\n  ",512],["T_DOC_COMMENT","\/**\n   * Runs the query against the database.\n   *\n   * @return \\Drupal\\Core\\Database\\StatementInterface|null\n   *   A prepared statement, or NULL if the query is not valid.\n   *\/",514],["T_WHITESPACE","\n  ",519],["T_PUBLIC","public",520],["T_WHITESPACE"," ",520],["T_FUNCTION","function",520],["T_WHITESPACE"," ",520],["T_STRING","execute",520],"(",")",";",["T_WHITESPACE","\n\n  ",520],["T_DOC_COMMENT","\/**\n   * Helper function to build most common HAVING conditional clauses.\n   *\n   * This method can take a variable number of parameters. If called with two\n   * parameters, they are taken as $field and $value with $operator having a value\n   * of IN if $value is an array and = otherwise.\n   *\n   * @param $field\n   *   The name of the field to check. If you would like to add a more complex\n   *   condition involving operators or functions, use having().\n   * @param $value\n   *   The value to test the field against. In most cases, this is a scalar. For more\n   *   complex options, it is an array. The meaning of each element in the array is\n   *   dependent on the $operator.\n   * @param $operator\n   *   The comparison operator, such as =, <, or >=. It also accepts more complex\n   *   options such as IN, LIKE, or BETWEEN. Defaults to IN if $value is an array\n   *   = otherwise.\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",522],["T_WHITESPACE","\n  ",542],["T_PUBLIC","public",543],["T_WHITESPACE"," ",543],["T_FUNCTION","function",543],["T_WHITESPACE"," ",543],["T_STRING","havingCondition",543],"(",["T_VARIABLE","$field",543],",",["T_WHITESPACE"," ",543],["T_VARIABLE","$value",543],["T_WHITESPACE"," ",543],"=",["T_WHITESPACE"," ",543],["T_STRING","NULL",543],",",["T_WHITESPACE"," ",543],["T_VARIABLE","$operator",543],["T_WHITESPACE"," ",543],"=",["T_WHITESPACE"," ",543],["T_STRING","NULL",543],")",";",["T_WHITESPACE","\n\n  ",543],["T_DOC_COMMENT","\/**\n   * Gets a list of all conditions in the HAVING clause.\n   *\n   * This method returns by reference. That allows alter hooks to access the\n   * data structure directly and manipulate it before it gets compiled.\n   *\n   * @return array\n   *   An array of conditions.\n   *\n   * @see \\Drupal\\Core\\Database\\Query\\ConditionInterface::conditions()\n   *\/",545],["T_WHITESPACE","\n  ",555],["T_PUBLIC","public",556],["T_WHITESPACE"," ",556],["T_FUNCTION","function",556],["T_WHITESPACE"," ",556],"&",["T_STRING","havingConditions",556],"(",")",";",["T_WHITESPACE","\n\n  ",556],["T_DOC_COMMENT","\/**\n   * Gets a list of all values to insert into the HAVING clause.\n   *\n   * @return array\n   *   An associative array of placeholders and values.\n   *\/",558],["T_WHITESPACE","\n  ",563],["T_PUBLIC","public",564],["T_WHITESPACE"," ",564],["T_FUNCTION","function",564],["T_WHITESPACE"," ",564],["T_STRING","havingArguments",564],"(",")",";",["T_WHITESPACE","\n\n  ",564],["T_DOC_COMMENT","\/**\n   * Adds an arbitrary HAVING clause to the query.\n   *\n   * @param $snippet\n   *   A portion of a HAVING clause as a prepared statement. It must use named\n   *   placeholders, not ? placeholders.\n   * @param $args\n   *   (optional) An associative array of arguments.\n   *\n   * @return $this\n   *\/",566],["T_WHITESPACE","\n  ",576],["T_PUBLIC","public",577],["T_WHITESPACE"," ",577],["T_FUNCTION","function",577],["T_WHITESPACE"," ",577],["T_STRING","having",577],"(",["T_VARIABLE","$snippet",577],",",["T_WHITESPACE"," ",577],["T_VARIABLE","$args",577],["T_WHITESPACE"," ",577],"=",["T_WHITESPACE"," ",577],["T_ARRAY","array",577],"(",")",")",";",["T_WHITESPACE","\n\n  ",577],["T_DOC_COMMENT","\/**\n   * Compiles the HAVING clause for later retrieval.\n   *\n   * @param $connection\n   *   The database connection for which to compile the clause.\n   *\/",579],["T_WHITESPACE","\n  ",584],["T_PUBLIC","public",585],["T_WHITESPACE"," ",585],["T_FUNCTION","function",585],["T_WHITESPACE"," ",585],["T_STRING","havingCompile",585],"(",["T_STRING","Connection",585],["T_WHITESPACE"," ",585],["T_VARIABLE","$connection",585],")",";",["T_WHITESPACE","\n\n  ",585],["T_DOC_COMMENT","\/**\n   * Sets a condition in the HAVING clause that the specified field be NULL.\n   *\n   * @param $field\n   *   The name of the field to check.\n   *\n   * @return $this\n   *\/",587],["T_WHITESPACE","\n  ",594],["T_PUBLIC","public",595],["T_WHITESPACE"," ",595],["T_FUNCTION","function",595],["T_WHITESPACE"," ",595],["T_STRING","havingIsNull",595],"(",["T_VARIABLE","$field",595],")",";",["T_WHITESPACE","\n\n  ",595],["T_DOC_COMMENT","\/**\n   * Sets a condition in the HAVING clause that the specified field be NOT NULL.\n   *\n   * @param $field\n   *   The name of the field to check.\n   *\n   * @return $this\n   *\/",597],["T_WHITESPACE","\n  ",604],["T_PUBLIC","public",605],["T_WHITESPACE"," ",605],["T_FUNCTION","function",605],["T_WHITESPACE"," ",605],["T_STRING","havingIsNotNull",605],"(",["T_VARIABLE","$field",605],")",";",["T_WHITESPACE","\n\n  ",605],["T_DOC_COMMENT","\/**\n   * Sets a HAVING condition that the specified subquery returns values.\n   *\n   * @param \\Drupal\\Core\\Database\\Query\\SelectInterface $select\n   *   The subquery that must contain results.\n   *\n   * @return $this\n   *\/",607],["T_WHITESPACE","\n  ",614],["T_PUBLIC","public",615],["T_WHITESPACE"," ",615],["T_FUNCTION","function",615],["T_WHITESPACE"," ",615],["T_STRING","havingExists",615],"(",["T_STRING","SelectInterface",615],["T_WHITESPACE"," ",615],["T_VARIABLE","$select",615],")",";",["T_WHITESPACE","\n\n  ",615],["T_DOC_COMMENT","\/**\n   * Sets a HAVING condition that the specified subquery returns no values.\n   *\n   * @param \\Drupal\\Core\\Database\\Query\\SelectInterface $select\n   *   The subquery that must contain results.\n   *\n   * @return $this\n   *\/",617],["T_WHITESPACE","\n  ",624],["T_PUBLIC","public",625],["T_WHITESPACE"," ",625],["T_FUNCTION","function",625],["T_WHITESPACE"," ",625],["T_STRING","havingNotExists",625],"(",["T_STRING","SelectInterface",625],["T_WHITESPACE"," ",625],["T_VARIABLE","$select",625],")",";",["T_WHITESPACE","\n\n  ",625],["T_DOC_COMMENT","\/**\n   * Clone magic method.\n   *\n   * Select queries have dependent objects that must be deep-cloned.  The\n   * connection object itself, however, should not be cloned as that would\n   * duplicate the connection itself.\n   *\/",627],["T_WHITESPACE","\n  ",633],["T_PUBLIC","public",634],["T_WHITESPACE"," ",634],["T_FUNCTION","function",634],["T_WHITESPACE"," ",634],["T_STRING","__clone",634],"(",")",";",["T_WHITESPACE","\n\n  ",634],["T_DOC_COMMENT","\/**\n   * Add FOR UPDATE to the query.\n   *\n   * FOR UPDATE prevents the rows retrieved by the SELECT statement from being\n   * modified or deleted by other transactions until the current transaction\n   * ends. Other transactions that attempt UPDATE, DELETE, or SELECT FOR UPDATE\n   * of these rows will be blocked until the current transaction ends.\n   *\n   * @param $set\n   *   IF TRUE, FOR UPDATE will be added to the query, if FALSE then it won't.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",636],["T_WHITESPACE","\n  ",649],["T_PUBLIC","public",650],["T_WHITESPACE"," ",650],["T_FUNCTION","function",650],["T_WHITESPACE"," ",650],["T_STRING","forUpdate",650],"(",["T_VARIABLE","$set",650],["T_WHITESPACE"," ",650],"=",["T_WHITESPACE"," ",650],["T_STRING","TRUE",650],")",";",["T_WHITESPACE","\n\n  ",650],["T_DOC_COMMENT","\/**\n   * Returns a string representation of how the query will be executed in SQL.\n   *\n   * @return string\n   *   The Select Query object expressed as a string.\n   *\/",652],["T_WHITESPACE","\n  ",657],["T_PUBLIC","public",658],["T_WHITESPACE"," ",658],["T_FUNCTION","function",658],["T_WHITESPACE"," ",658],["T_STRING","__toString",658],"(",")",";",["T_WHITESPACE","\n\n",658],"}",["T_WHITESPACE","\n",660]]