[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * A wrapper class for creating and managing database transactions.\n *\n * Not all databases or database configurations support transactions. For\n * example, MySQL MyISAM tables do not. It is also easy to begin a transaction\n * and then forget to commit it, which can lead to connection errors when\n * another transaction is started.\n *\n * This class acts as a wrapper for transactions. To begin a transaction,\n * simply instantiate it. When the object goes out of scope and is destroyed\n * it will automatically commit. It also will check to see if the specified\n * connection supports transactions. If not, it will simply skip any transaction\n * commands, allowing user-space code to proceed normally. The only difference\n * is that rollbacks won't actually do anything.\n *\n * In the vast majority of cases, you should not instantiate this class\n * directly. Instead, call ->startTransaction(), from the appropriate connection\n * object.\n *\/",5],["T_WHITESPACE","\n",23],["T_CLASS","class",24],["T_WHITESPACE"," ",24],["T_STRING","Transaction",24],["T_WHITESPACE"," ",24],"{",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * The connection object for this transaction.\n   *\n   * @var \\Drupal\\Core\\Database\\Connection\n   *\/",26],["T_WHITESPACE","\n  ",30],["T_PROTECTED","protected",31],["T_WHITESPACE"," ",31],["T_VARIABLE","$connection",31],";",["T_WHITESPACE","\n\n  ",31],["T_DOC_COMMENT","\/**\n   * A boolean value to indicate whether this transaction has been rolled back.\n   *\n   * @var bool\n   *\/",33],["T_WHITESPACE","\n  ",37],["T_PROTECTED","protected",38],["T_WHITESPACE"," ",38],["T_VARIABLE","$rolledBack",38],["T_WHITESPACE"," ",38],"=",["T_WHITESPACE"," ",38],["T_STRING","FALSE",38],";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * The name of the transaction.\n   *\n   * This is used to label the transaction savepoint. It will be overridden to\n   * 'drupal_transaction' if there is no transaction depth.\n   *\/",40],["T_WHITESPACE","\n  ",45],["T_PROTECTED","protected",46],["T_WHITESPACE"," ",46],["T_VARIABLE","$name",46],";",["T_WHITESPACE","\n\n  ",46],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","__construct",48],"(",["T_STRING","Connection",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$connection",48],",",["T_WHITESPACE"," ",48],["T_VARIABLE","$name",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_STRING","NULL",48],")",["T_WHITESPACE"," ",48],"{",["T_WHITESPACE","\n    ",48],["T_VARIABLE","$this",49],["T_OBJECT_OPERATOR","->",49],["T_STRING","connection",49],["T_WHITESPACE"," ",49],"=",["T_WHITESPACE"," ",49],["T_VARIABLE","$connection",49],";",["T_WHITESPACE","\n    ",49],["T_COMMENT","\/\/ If there is no transaction depth, then no transaction has started. Name\n",50],["T_WHITESPACE","    ",51],["T_COMMENT","\/\/ the transaction 'drupal_transaction'.\n",51],["T_WHITESPACE","    ",52],["T_IF","if",52],["T_WHITESPACE"," ",52],"(","!",["T_VARIABLE","$depth",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],["T_VARIABLE","$connection",52],["T_OBJECT_OPERATOR","->",52],["T_STRING","transactionDepth",52],"(",")",")",["T_WHITESPACE"," ",52],"{",["T_WHITESPACE","\n      ",52],["T_VARIABLE","$this",53],["T_OBJECT_OPERATOR","->",53],["T_STRING","name",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_CONSTANT_ENCAPSED_STRING","'drupal_transaction'",53],";",["T_WHITESPACE","\n    ",53],"}",["T_WHITESPACE","\n    ",54],["T_COMMENT","\/\/ Within transactions, savepoints are used. Each savepoint requires a\n",55],["T_WHITESPACE","    ",56],["T_COMMENT","\/\/ name. So if no name is present we need to create one.\n",56],["T_WHITESPACE","    ",57],["T_ELSEIF","elseif",57],["T_WHITESPACE"," ",57],"(","!",["T_VARIABLE","$name",57],")",["T_WHITESPACE"," ",57],"{",["T_WHITESPACE","\n      ",57],["T_VARIABLE","$this",58],["T_OBJECT_OPERATOR","->",58],["T_STRING","name",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_CONSTANT_ENCAPSED_STRING","'savepoint_'",58],["T_WHITESPACE"," ",58],".",["T_WHITESPACE"," ",58],["T_VARIABLE","$depth",58],";",["T_WHITESPACE","\n    ",58],"}",["T_WHITESPACE","\n    ",59],["T_ELSE","else",60],["T_WHITESPACE"," ",60],"{",["T_WHITESPACE","\n      ",60],["T_VARIABLE","$this",61],["T_OBJECT_OPERATOR","->",61],["T_STRING","name",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],["T_VARIABLE","$name",61],";",["T_WHITESPACE","\n    ",61],"}",["T_WHITESPACE","\n    ",62],["T_VARIABLE","$this",63],["T_OBJECT_OPERATOR","->",63],["T_STRING","connection",63],["T_OBJECT_OPERATOR","->",63],["T_STRING","pushTransaction",63],"(",["T_VARIABLE","$this",63],["T_OBJECT_OPERATOR","->",63],["T_STRING","name",63],")",";",["T_WHITESPACE","\n  ",63],"}",["T_WHITESPACE","\n\n  ",64],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","__destruct",66],"(",")",["T_WHITESPACE"," ",66],"{",["T_WHITESPACE","\n    ",66],["T_COMMENT","\/\/ If we rolled back then the transaction would have already been popped.\n",67],["T_WHITESPACE","    ",68],["T_IF","if",68],["T_WHITESPACE"," ",68],"(","!",["T_VARIABLE","$this",68],["T_OBJECT_OPERATOR","->",68],["T_STRING","rolledBack",68],")",["T_WHITESPACE"," ",68],"{",["T_WHITESPACE","\n      ",68],["T_VARIABLE","$this",69],["T_OBJECT_OPERATOR","->",69],["T_STRING","connection",69],["T_OBJECT_OPERATOR","->",69],["T_STRING","popTransaction",69],"(",["T_VARIABLE","$this",69],["T_OBJECT_OPERATOR","->",69],["T_STRING","name",69],")",";",["T_WHITESPACE","\n    ",69],"}",["T_WHITESPACE","\n  ",70],"}",["T_WHITESPACE","\n\n  ",71],["T_DOC_COMMENT","\/**\n   * Retrieves the name of the transaction or savepoint.\n   *\/",73],["T_WHITESPACE","\n  ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","name",76],"(",")",["T_WHITESPACE"," ",76],"{",["T_WHITESPACE","\n    ",76],["T_RETURN","return",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$this",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","name",77],";",["T_WHITESPACE","\n  ",77],"}",["T_WHITESPACE","\n\n  ",78],["T_DOC_COMMENT","\/**\n   * Rolls back the current transaction.\n   *\n   * This is just a wrapper method to rollback whatever transaction stack we are\n   * currently in, which is managed by the connection object itself. Note that\n   * logging (preferable with watchdog_exception()) needs to happen after a\n   * transaction has been rolled back or the log messages will be rolled back\n   * too.\n   *\n   * @see \\Drupal\\Core\\Database\\Connection::rollback()\n   * @see watchdog_exception()\n   *\/",80],["T_WHITESPACE","\n  ",91],["T_PUBLIC","public",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","rollback",92],"(",")",["T_WHITESPACE"," ",92],"{",["T_WHITESPACE","\n    ",92],["T_VARIABLE","$this",93],["T_OBJECT_OPERATOR","->",93],["T_STRING","rolledBack",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_STRING","TRUE",93],";",["T_WHITESPACE","\n    ",93],["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","connection",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","rollback",94],"(",["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","name",94],")",";",["T_WHITESPACE","\n  ",94],"}",["T_WHITESPACE","\n\n",95],"}",["T_WHITESPACE","\n",97]]