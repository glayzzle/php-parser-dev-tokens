[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Connection",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for a conditional clause in a query.\n *\/",7],["T_WHITESPACE","\n",9],["T_INTERFACE","interface",10],["T_WHITESPACE"," ",10],["T_STRING","ConditionInterface",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Helper function: builds the most common conditional clauses.\n   *\n   * This method can take a variable number of parameters. If called with two\n   * parameters, they are taken as $field and $value with $operator having a\n   * value of =.\n   *\n   * Do not use this method to test for NULL values. Instead, use\n   * QueryConditionInterface::isNull() or QueryConditionInterface::isNotNull().\n   *\n   * Drupal considers LIKE case insensitive and the following is often used\n   * to tell the database that case insensitive equivalence is desired:\n   * @code\n   * db_select('users')\n   *  ->condition('name', db_like($name), 'LIKE')\n   * @endcode\n   * Use 'LIKE BINARY' instead of 'LIKE' for case sensitive queries.\n   *\n   * Note: When using MySQL, the exact behavior also depends on the used\n   * collation. if the field is set to binary, then a LIKE condition will also\n   * be case sensitive and when a case insensitive collation is used, the =\n   * operator will also be case insensitive.\n   *\n   * @param $field\n   *   The name of the field to check. If you would like to add a more complex\n   *   condition involving operators or functions, use where().\n   * @param $value\n   *   The value to test the field against. In most cases, this is a scalar.\n   *   For more complex options, it is an array. The meaning of each element in\n   *   the array is dependent on the $operator.\n   * @param $operator\n   *   The comparison operator, such as =, <, or >=. It also accepts more\n   *   complex options such as IN, LIKE, LIKE BINARY, or BETWEEN. Defaults to =.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\n   * @see \\Drupal\\Core\\Database\\Query\\ConditionInterface::isNull()\n   * @see \\Drupal\\Core\\Database\\Query\\ConditionInterface::isNotNull()\n   *\/",12],["T_WHITESPACE","\n  ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","condition",52],"(",["T_VARIABLE","$field",52],",",["T_WHITESPACE"," ",52],["T_VARIABLE","$value",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],["T_STRING","NULL",52],",",["T_WHITESPACE"," ",52],["T_VARIABLE","$operator",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],["T_CONSTANT_ENCAPSED_STRING","'='",52],")",";",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * Adds an arbitrary WHERE clause to the query.\n   *\n   * @param $snippet\n   *   A portion of a WHERE clause as a prepared statement. It must use named\n   *   placeholders, not ? placeholders.\n   * @param $args\n   *   An associative array of arguments.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",54],["T_WHITESPACE","\n  ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","where",66],"(",["T_VARIABLE","$snippet",66],",",["T_WHITESPACE"," ",66],["T_VARIABLE","$args",66],["T_WHITESPACE"," ",66],"=",["T_WHITESPACE"," ",66],["T_ARRAY","array",66],"(",")",")",";",["T_WHITESPACE","\n\n  ",66],["T_DOC_COMMENT","\/**\n   * Sets a condition that the specified field be NULL.\n   *\n   * @param $field\n   *   The name of the field to check.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",68],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","isNull",77],"(",["T_VARIABLE","$field",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Sets a condition that the specified field be NOT NULL.\n   *\n   * @param $field\n   *   The name of the field to check.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",79],["T_WHITESPACE","\n  ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","isNotNull",88],"(",["T_VARIABLE","$field",88],")",";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Sets a condition that the specified subquery returns values.\n   *\n   * @param \\Drupal\\Core\\Database\\Query\\SelectInterface $select\n   *   The subquery that must contain results.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",90],["T_WHITESPACE","\n  ",98],["T_PUBLIC","public",99],["T_WHITESPACE"," ",99],["T_FUNCTION","function",99],["T_WHITESPACE"," ",99],["T_STRING","exists",99],"(",["T_STRING","SelectInterface",99],["T_WHITESPACE"," ",99],["T_VARIABLE","$select",99],")",";",["T_WHITESPACE","\n\n  ",99],["T_DOC_COMMENT","\/**\n   * Sets a condition that the specified subquery returns no values.\n   *\n   * @param \\Drupal\\Core\\Database\\Query\\SelectInterface $select\n   *   The subquery that must not contain results.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   The called object.\n   *\/",101],["T_WHITESPACE","\n  ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","notExists",110],"(",["T_STRING","SelectInterface",110],["T_WHITESPACE"," ",110],["T_VARIABLE","$select",110],")",";",["T_WHITESPACE","\n\n  ",110],["T_DOC_COMMENT","\/**\n   * Gets a complete list of all conditions in this conditional clause.\n   *\n   * This method returns by reference. That allows alter hooks to access the\n   * data structure directly and manipulate it before it gets compiled.\n   *\n   * The data structure that is returned is an indexed array of entries, where\n   * each entry looks like the following:\n   * @code\n   * array(\n   *   'field' => $field,\n   *   'value' => $value,\n   *   'operator' => $operator,\n   * );\n   * @endcode\n   *\n   * In the special case that $operator is NULL, the $field is taken as a raw\n   * SQL snippet (possibly containing a function) and $value is an associative\n   * array of placeholders for the snippet.\n   *\n   * There will also be a single array entry of #conjunction, which is the\n   * conjunction that will be applied to the array, such as AND.\n   *\/",112],["T_WHITESPACE","\n  ",134],["T_PUBLIC","public",135],["T_WHITESPACE"," ",135],["T_FUNCTION","function",135],["T_WHITESPACE"," ",135],"&",["T_STRING","conditions",135],"(",")",";",["T_WHITESPACE","\n\n  ",135],["T_DOC_COMMENT","\/**\n   * Gets a complete list of all values to insert into the prepared statement.\n   *\n   * @return\n   *   An associative array of placeholders and values.\n   *\/",137],["T_WHITESPACE","\n  ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","arguments",143],"(",")",";",["T_WHITESPACE","\n\n  ",143],["T_DOC_COMMENT","\/**\n   * Compiles the saved conditions for later retrieval.\n   *\n   * This method does not return anything, but simply prepares data to be\n   * retrieved via __toString() and arguments().\n   *\n   * @param $connection\n   *   The database connection for which to compile the conditionals.\n   * @param $queryPlaceholder\n   *   The query this condition belongs to. If not given, the current query is\n   *   used.\n   *\/",145],["T_WHITESPACE","\n  ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","compile",157],"(",["T_STRING","Connection",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$connection",157],",",["T_WHITESPACE"," ",157],["T_STRING","PlaceholderInterface",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$queryPlaceholder",157],")",";",["T_WHITESPACE","\n\n  ",157],["T_DOC_COMMENT","\/**\n   * Check whether a condition has been previously compiled.\n   *\n   * @return\n   *   TRUE if the condition has been previously compiled.\n   *\/",159],["T_WHITESPACE","\n  ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","compiled",165],"(",")",";",["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Creates an object holding a group of conditions.\n   *\n   * See andConditionGroup() and orConditionGroup() for more.\n   *\n   * @param $conjunction\n   *   - AND (default): this is the equivalent of andConditionGroup().\n   *   - OR: this is the equivalent of andConditionGroup().\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *   An object holding a group of conditions.\n   *\/",167],["T_WHITESPACE","\n  ",178],["T_PUBLIC","public",179],["T_WHITESPACE"," ",179],["T_FUNCTION","function",179],["T_WHITESPACE"," ",179],["T_STRING","conditionGroupFactory",179],"(",["T_VARIABLE","$conjunction",179],["T_WHITESPACE"," ",179],"=",["T_WHITESPACE"," ",179],["T_CONSTANT_ENCAPSED_STRING","'AND'",179],")",";",["T_WHITESPACE","\n\n  ",179],["T_DOC_COMMENT","\/**\n   * Creates a new group of conditions ANDed together.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *\/",181],["T_WHITESPACE","\n  ",185],["T_PUBLIC","public",186],["T_WHITESPACE"," ",186],["T_FUNCTION","function",186],["T_WHITESPACE"," ",186],["T_STRING","andConditionGroup",186],"(",")",";",["T_WHITESPACE","\n\n  ",186],["T_DOC_COMMENT","\/**\n   * Creates a new group of conditions ORed together.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ConditionInterface\n   *\/",188],["T_WHITESPACE","\n  ",192],["T_PUBLIC","public",193],["T_WHITESPACE"," ",193],["T_FUNCTION","function",193],["T_WHITESPACE"," ",193],["T_STRING","orConditionGroup",193],"(",")",";",["T_WHITESPACE","\n\n",193],"}",["T_WHITESPACE","\n",195]]