[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Hooks related to the Database system and the Schema API.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @defgroup database Database abstraction layer\n * @{\n * Allow the use of different database servers using the same code base.\n *\n * @section sec_intro Overview\n * Drupal's database abstraction layer provides a unified database query API\n * that can query different underlying databases. It is built upon PHP's\n * PDO (PHP Data Objects) database API, and inherits much of its syntax and\n * semantics. Besides providing a unified API for database queries, the\n * database abstraction layer also provides a structured way to construct\n * complex queries, and it protects the database by using good security\n * practices.\n *\n * For more detailed information on the database abstraction layer, see\n * https:\/\/www.drupal.org\/developing\/api\/database.\n *\n * @section sec_entity Querying entities\n * Any query on Drupal entities or fields should use the Entity Query API. See\n * the @link entity_api entity API topic @endlink for more information.\n *\n * @section sec_simple Simple SELECT database queries\n * For simple SELECT queries that do not involve entities, the Drupal database\n * abstraction layer provides the functions db_query() and db_query_range(),\n * which execute SELECT queries (optionally with range limits) and return result\n * sets that you can iterate over using foreach loops. (The result sets are\n * objects implementing the \\Drupal\\Core\\Database\\StatementInterface interface.)\n * You can use the simple query functions for query strings that are not\n * dynamic (except for placeholders, see below), and that you are certain will\n * work in any database engine. See @ref sec_dynamic below if you have a more\n * complex query, or a query whose syntax would be different in some databases.\n *\n * As a note, db_query() and similar functions are wrappers on connection object\n * methods. In most classes, you should use dependency injection and the\n * database connection object instead of these wrappers; See @ref sec_connection\n * below for details.\n *\n * To use the simple database query functions, you will need to make a couple of\n * modifications to your bare SQL query:\n * - Enclose your table name in {}. Drupal allows site builders to use\n *   database table name prefixes, so you cannot be sure what the actual\n *   name of the table will be. So, use the name that is in the hook_schema(),\n *   enclosed in {}, and Drupal will calculate the right name.\n * - Instead of putting values for conditions into the query, use placeholders.\n *   The placeholders are named and start with :, and they take the place of\n *   putting variables directly into the query, to protect against SQL\n *   injection attacks.\n * - LIMIT syntax differs between databases, so if you have a ranged query,\n *   use db_query_range() instead of db_query().\n *\n * For example, if the query you want to run is:\n * @code\n * SELECT e.id, e.title, e.created FROM example e WHERE e.uid = $uid\n *   ORDER BY e.created DESC LIMIT 0, 10;\n * @endcode\n * you would do it like this:\n * @code\n * $result = db_query_range('SELECT e.id, e.title, e.created\n *   FROM {example} e\n *   WHERE e.uid = :uid\n *   ORDER BY e.created DESC',\n *   0, 10, array(':uid' => $uid));\n * foreach ($result as $record) {\n *   \/\/ Perform operations on $record->title, etc. here.\n * }\n * @endcode\n *\n * Note that if your query has a string condition, like:\n * @code\n * WHERE e.my_field = 'foo'\n * @endcode\n * when you convert it to placeholders, omit the quotes:\n * @code\n * WHERE e.my_field = :my_field\n * ... array(':my_field' => 'foo') ...\n * @endcode\n *\n * @section sec_dynamic Dynamic SELECT queries\n * For SELECT queries where the simple query API described in @ref sec_simple\n * will not work well, you need to use the dynamic query API. However, you\n * should still use the Entity Query API if your query involves entities or\n * fields (see the @link entity_api Entity API topic @endlink for more on\n * entity queries).\n *\n * As a note, db_select() and similar functions are wrappers on connection\n * object methods. In most classes, you should use dependency injection and the\n * database connection object instead of these wrappers; See @ref sec_connection\n * below for details.\n *\n * The dynamic query API lets you build up a query dynamically using method\n * calls. As an illustration, the query example from @ref sec_simple above\n * would be:\n * @code\n * $result = db_select('example', 'e')\n *   ->fields('e', array('id', 'title', 'created'))\n *   ->condition('e.uid', $uid)\n *   ->orderBy('e.created', 'DESC')\n *   ->range(0, 10)\n *   ->execute();\n * @endcode\n *\n * There are also methods to join to other tables, add fields with aliases,\n * isNull() to have a @code WHERE e.foo IS NULL @endcode condition, etc. See\n * https:\/\/www.drupal.org\/developing\/api\/database for many more details.\n *\n * One note on chaining: It is common in the dynamic database API to chain\n * method calls (as illustrated here), because most of the query methods modify\n * the query object and then return the modified query as their return\n * value. However, there are some important exceptions; these methods (and some\n * others) do not support chaining:\n * - join(), innerJoin(), etc.: These methods return the joined table alias.\n * - addField(): This method returns the field alias.\n * Check the documentation for the query method you are using to see if it\n * returns the query or something else, and only chain methods that return the\n * query.\n *\n * @section_insert INSERT, UPDATE, and DELETE queries\n * INSERT, UPDATE, and DELETE queries need special care in order to behave\n * consistently across databases; you should never use db_query() to run\n * an INSERT, UPDATE, or DELETE query. Instead, use functions db_insert(),\n * db_update(), and db_delete() to obtain a base query on your table, and then\n * add dynamic conditions (as illustrated in @ref sec_dynamic above).\n *\n * As a note, db_insert() and similar functions are wrappers on connection\n * object methods. In most classes, you should use dependency injection and the\n * database connection object instead of these wrappers; See @ref sec_connection\n * below for details.\n *\n * For example, if your query is:\n * @code\n * INSERT INTO example (id, uid, path, name) VALUES (1, 2, 'path', 'Name');\n * @endcode\n * You can execute it via:\n * @code\n * $fields = array('id' => 1, 'uid' => 2, 'path' => 'path', 'name' => 'Name');\n * db_insert('example')\n *   ->fields($fields)\n *   ->execute();\n * @endcode\n *\n * @section sec_transaction Transactions\n * Drupal supports transactions, including a transparent fallback for\n * databases that do not support transactions. To start a new transaction,\n * call @code $txn = db_transaction(); @endcode The transaction will\n * remain open for as long as the variable $txn remains in scope; when $txn is\n * destroyed, the transaction will be committed. If your transaction is nested\n * inside of another then Drupal will track each transaction and only commit\n * the outer-most transaction when the last transaction object goes out out of\n * scope (when all relevant queries have completed successfully).\n *\n * Example:\n * @code\n * function my_transaction_function() {\n *   \/\/ The transaction opens here.\n *   $txn = db_transaction();\n *\n *   try {\n *     $id = db_insert('example')\n *       ->fields(array(\n *         'field1' => 'mystring',\n *         'field2' => 5,\n *       ))\n *       ->execute();\n *\n *     my_other_function($id);\n *\n *     return $id;\n *   }\n *   catch (Exception $e) {\n *     \/\/ Something went wrong somewhere, so roll back now.\n *     $txn->rollback();\n *     \/\/ Log the exception to watchdog.\n *     watchdog_exception('type', $e);\n *   }\n *\n *   \/\/ $txn goes out of scope here.  Unless the transaction was rolled back, it\n *   \/\/ gets automatically committed here.\n * }\n *\n * function my_other_function($id) {\n *   \/\/ The transaction is still open here.\n *\n *   if ($id % 2 == 0) {\n *     db_update('example')\n *       ->condition('id', $id)\n *       ->fields(array('field2' => 10))\n *       ->execute();\n *   }\n * }\n * @endcode\n *\n * @section sec_connection Database connection objects\n * The examples here all use functions like db_select() and db_query(), which\n * can be called from any Drupal method or function code. In some classes, you\n * may already have a database connection object in a member variable, or it may\n * be passed into a class constructor via dependency injection. If that is the\n * case, you can look at the code for db_select() and the other functions to see\n * how to get a query object from your connection variable. For example:\n * @code\n * $query = $connection->select('example', 'e');\n * @endcode\n * would be the equivalent of\n * @code\n * $query = db_select('example', 'e');\n * @endcode\n * if you had a connection object variable $connection available to use. See\n * also the @link container Services and Dependency Injection topic. @endlink\n *\n * @see https:\/\/www.drupal.org\/developing\/api\/database\n * @see entity_api\n * @see schemaapi\n *\n * @}\n *\/",8],["T_WHITESPACE","\n\n",221],["T_DOC_COMMENT","\/**\n * @defgroup schemaapi Schema API\n * @{\n * API to handle database schemas.\n *\n * A Drupal schema definition is an array structure representing one or\n * more tables and their related keys and indexes. A schema is defined by\n * hook_schema(), which usually lives in a modulename.install file.\n *\n * By implementing hook_schema() and specifying the tables your module\n * declares, you can easily create and drop these tables on all\n * supported database engines. You don't have to deal with the\n * different SQL dialects for table creation and alteration of the\n * supported database engines.\n *\n * hook_schema() should return an array with a key for each table that\n * the module defines.\n *\n * The following keys are defined:\n *   - 'description': A string in non-markup plain text describing this table\n *     and its purpose. References to other tables should be enclosed in\n *     curly-brackets. For example, the node_field_revision table\n *     description field might contain \"Stores per-revision title and\n *     body data for each {node}.\"\n *   - 'fields': An associative array ('fieldname' => specification)\n *     that describes the table's database columns. The specification\n *     is also an array. The following specification parameters are defined:\n *     - 'description': A string in non-markup plain text describing this field\n *       and its purpose. References to other tables should be enclosed in\n *       curly-brackets. For example, the node table vid field\n *       description might contain \"Always holds the largest (most\n *       recent) {node_field_revision}.vid value for this nid.\"\n *     - 'type': The generic datatype: 'char', 'varchar', 'text', 'blob', 'int',\n *       'float', 'numeric', or 'serial'. Most types just map to the according\n *       database engine specific datatypes. Use 'serial' for auto incrementing\n *       fields. This will expand to 'INT auto_increment' on MySQL.\n *       A special 'varchar_ascii' type is also available for limiting machine\n *       name field to US ASCII characters.\n *     - 'mysql_type', 'pgsql_type', 'sqlite_type', etc.: If you need to\n *       use a record type not included in the officially supported list\n *       of types above, you can specify a type for each database\n *       backend. In this case, you can leave out the type parameter,\n *       but be advised that your schema will fail to load on backends that\n *       do not have a type specified. A possible solution can be to\n *       use the \"text\" type as a fallback.\n *     - 'serialize': A boolean indicating whether the field will be stored as\n *       a serialized string.\n *     - 'size': The data size: 'tiny', 'small', 'medium', 'normal',\n *       'big'. This is a hint about the largest value the field will\n *       store and determines which of the database engine specific\n *       datatypes will be used (e.g. on MySQL, TINYINT vs. INT vs. BIGINT).\n *       'normal', the default, selects the base type (e.g. on MySQL,\n *       INT, VARCHAR, BLOB, etc.).\n *       Not all sizes are available for all data types. See\n *       DatabaseSchema::getFieldTypeMap() for possible combinations.\n *     - 'not null': If true, no NULL values will be allowed in this\n *       database column. Defaults to false.\n *     - 'default': The field's default value. The PHP type of the\n *       value matters: '', '0', and 0 are all different. If you\n *       specify '0' as the default value for a type 'int' field it\n *       will not work because '0' is a string containing the\n *       character \"zero\", not an integer.\n *     - 'length': The maximal length of a type 'char', 'varchar' or 'text'\n *       field. Ignored for other field types.\n *     - 'unsigned': A boolean indicating whether a type 'int', 'float'\n *       and 'numeric' only is signed or unsigned. Defaults to\n *       FALSE. Ignored for other field types.\n *     - 'precision', 'scale': For type 'numeric' fields, indicates\n *       the precision (total number of significant digits) and scale\n *       (decimal digits right of the decimal point). Both values are\n *       mandatory. Ignored for other field types.\n *     - 'binary': A boolean indicating that MySQL should force 'char',\n *       'varchar' or 'text' fields to use case-sensitive binary collation.\n *       This has no effect on other database types for which case sensitivity\n *       is already the default behavior.\n *     All parameters apart from 'type' are optional except that type\n *     'numeric' columns must specify 'precision' and 'scale', and type\n *     'varchar' must specify the 'length' parameter.\n *  - 'primary key': An array of one or more key column specifiers (see below)\n *    that form the primary key.\n *  - 'unique keys': An associative array of unique keys ('keyname' =>\n *    specification). Each specification is an array of one or more\n *    key column specifiers (see below) that form a unique key on the table.\n *  - 'foreign keys': An associative array of relations ('my_relation' =>\n *    specification). Each specification is an array containing the name of\n *    the referenced table ('table'), and an array of column mappings\n *    ('columns'). Column mappings are defined by key pairs ('source_column' =>\n *    'referenced_column'). This key is for documentation purposes only; foreign\n *    keys are not created in the database, nor are they enforced by Drupal.\n *  - 'indexes':  An associative array of indexes ('indexname' =>\n *    specification). Each specification is an array of one or more\n *    key column specifiers (see below) that form an index on the\n *    table.\n *\n * A key column specifier is either a string naming a column or an\n * array of two elements, column name and length, specifying a prefix\n * of the named column.\n *\n * As an example, here is a SUBSET of the schema definition for\n * Drupal's 'node' table. It show four fields (nid, vid, type, and\n * title), the primary key on field 'nid', a unique key named 'vid' on\n * field 'vid', and two indexes, one named 'nid' on field 'nid' and\n * one named 'node_title_type' on the field 'title' and the first four\n * bytes of the field 'type':\n *\n * @code\n * $schema['node'] = array(\n *   'description' => 'The base table for nodes.',\n *   'fields' => array(\n *     'nid'       => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),\n *     'vid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,'default' => 0),\n *     'type'      => array('type' => 'varchar','length' => 32,'not null' => TRUE, 'default' => ''),\n *     'language'  => array('type' => 'varchar','length' => 12,'not null' => TRUE,'default' => ''),\n *     'title'     => array('type' => 'varchar','length' => 255,'not null' => TRUE, 'default' => ''),\n *     'uid'       => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'status'    => array('type' => 'int', 'not null' => TRUE, 'default' => 1),\n *     'created'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'changed'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'comment'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'promote'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'moderate'  => array('type' => 'int', 'not null' => TRUE,'default' => 0),\n *     'sticky'    => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *     'translate' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),\n *   ),\n *   'indexes' => array(\n *     'node_changed'        => array('changed'),\n *     'node_created'        => array('created'),\n *     'node_moderate'       => array('moderate'),\n *     'node_frontpage'      => array('promote', 'status', 'sticky', 'created'),\n *     'node_status_type'    => array('status', 'type', 'nid'),\n *     'node_title_type'     => array('title', array('type', 4)),\n *     'node_type'           => array(array('type', 4)),\n *     'uid'                 => array('uid'),\n *     'translate'           => array('translate'),\n *   ),\n *   'unique keys' => array(\n *     'vid' => array('vid'),\n *   ),\n *   \/\/ For documentation purposes only; foreign keys are not created in the\n *   \/\/ database.\n *   'foreign keys' => array(\n *     'node_revision' => array(\n *       'table' => 'node_field_revision',\n *       'columns' => array('vid' => 'vid'),\n *      ),\n *     'node_author' => array(\n *       'table' => 'users',\n *       'columns' => array('uid' => 'uid'),\n *      ),\n *    ),\n *   'primary key' => array('nid'),\n * );\n * @endcode\n *\n * @see drupal_install_schema()\n *\n * @}\n *\/",223],["T_WHITESPACE","\n\n",380],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",382],["T_WHITESPACE","\n\n",385],["T_DOC_COMMENT","\/**\n * Perform alterations to a structured query.\n *\n * Structured (aka dynamic) queries that have tags associated may be altered by any module\n * before the query is executed.\n *\n * @param $query\n *   A Query object describing the composite parts of a SQL query.\n *\n * @see hook_query_TAG_alter()\n * @see node_query_node_access_alter()\n * @see AlterableInterface\n * @see SelectInterface\n *\n * @ingroup database\n *\/",387],["T_WHITESPACE","\n",402],["T_FUNCTION","function",403],["T_WHITESPACE"," ",403],["T_STRING","hook_query_alter",403],"(",["T_STRING","Drupal",403],["T_NS_SEPARATOR","\\",403],["T_STRING","Core",403],["T_NS_SEPARATOR","\\",403],["T_STRING","Database",403],["T_NS_SEPARATOR","\\",403],["T_STRING","Query",403],["T_NS_SEPARATOR","\\",403],["T_STRING","AlterableInterface",403],["T_WHITESPACE"," ",403],["T_VARIABLE","$query",403],")",["T_WHITESPACE"," ",403],"{",["T_WHITESPACE","\n  ",403],["T_IF","if",404],["T_WHITESPACE"," ",404],"(",["T_VARIABLE","$query",404],["T_OBJECT_OPERATOR","->",404],["T_STRING","hasTag",404],"(",["T_CONSTANT_ENCAPSED_STRING","'micro_limit'",404],")",")",["T_WHITESPACE"," ",404],"{",["T_WHITESPACE","\n    ",404],["T_VARIABLE","$query",405],["T_OBJECT_OPERATOR","->",405],["T_STRING","range",405],"(",["T_LNUMBER","0",405],",",["T_WHITESPACE"," ",405],["T_LNUMBER","2",405],")",";",["T_WHITESPACE","\n  ",405],"}",["T_WHITESPACE","\n",406],"}",["T_WHITESPACE","\n\n",407],["T_DOC_COMMENT","\/**\n * Perform alterations to a structured query for a given tag.\n *\n * @param $query\n *   An Query object describing the composite parts of a SQL query.\n *\n * @see hook_query_alter()\n * @see node_query_node_access_alter()\n * @see AlterableInterface\n * @see SelectInterface\n *\n * @ingroup database\n *\/",409],["T_WHITESPACE","\n",421],["T_FUNCTION","function",422],["T_WHITESPACE"," ",422],["T_STRING","hook_query_TAG_alter",422],"(",["T_STRING","Drupal",422],["T_NS_SEPARATOR","\\",422],["T_STRING","Core",422],["T_NS_SEPARATOR","\\",422],["T_STRING","Database",422],["T_NS_SEPARATOR","\\",422],["T_STRING","Query",422],["T_NS_SEPARATOR","\\",422],["T_STRING","AlterableInterface",422],["T_WHITESPACE"," ",422],["T_VARIABLE","$query",422],")",["T_WHITESPACE"," ",422],"{",["T_WHITESPACE","\n  ",422],["T_COMMENT","\/\/ Skip the extra expensive alterations if site has no node access control modules.\n",423],["T_WHITESPACE","  ",424],["T_IF","if",424],["T_WHITESPACE"," ",424],"(","!",["T_STRING","node_access_view_all_nodes",424],"(",")",")",["T_WHITESPACE"," ",424],"{",["T_WHITESPACE","\n    ",424],["T_COMMENT","\/\/ Prevent duplicates records.\n",425],["T_WHITESPACE","    ",426],["T_VARIABLE","$query",426],["T_OBJECT_OPERATOR","->",426],["T_STRING","distinct",426],"(",")",";",["T_WHITESPACE","\n    ",426],["T_COMMENT","\/\/ The recognized operations are 'view', 'update', 'delete'.\n",427],["T_WHITESPACE","    ",428],["T_IF","if",428],["T_WHITESPACE"," ",428],"(","!",["T_VARIABLE","$op",428],["T_WHITESPACE"," ",428],"=",["T_WHITESPACE"," ",428],["T_VARIABLE","$query",428],["T_OBJECT_OPERATOR","->",428],["T_STRING","getMetaData",428],"(",["T_CONSTANT_ENCAPSED_STRING","'op'",428],")",")",["T_WHITESPACE"," ",428],"{",["T_WHITESPACE","\n      ",428],["T_VARIABLE","$op",429],["T_WHITESPACE"," ",429],"=",["T_WHITESPACE"," ",429],["T_CONSTANT_ENCAPSED_STRING","'view'",429],";",["T_WHITESPACE","\n    ",429],"}",["T_WHITESPACE","\n    ",430],["T_COMMENT","\/\/ Skip the extra joins and conditions for node admins.\n",431],["T_WHITESPACE","    ",432],["T_IF","if",432],["T_WHITESPACE"," ",432],"(","!",["T_NS_SEPARATOR","\\",432],["T_STRING","Drupal",432],["T_DOUBLE_COLON","::",432],["T_STRING","currentUser",432],"(",")",["T_OBJECT_OPERATOR","->",432],["T_STRING","hasPermission",432],"(",["T_CONSTANT_ENCAPSED_STRING","'bypass node access'",432],")",")",["T_WHITESPACE"," ",432],"{",["T_WHITESPACE","\n      ",432],["T_COMMENT","\/\/ The node_access table has the access grants for any given node.\n",433],["T_WHITESPACE","      ",434],["T_VARIABLE","$access_alias",434],["T_WHITESPACE"," ",434],"=",["T_WHITESPACE"," ",434],["T_VARIABLE","$query",434],["T_OBJECT_OPERATOR","->",434],["T_STRING","join",434],"(",["T_CONSTANT_ENCAPSED_STRING","'node_access'",434],",",["T_WHITESPACE"," ",434],["T_CONSTANT_ENCAPSED_STRING","'na'",434],",",["T_WHITESPACE"," ",434],["T_CONSTANT_ENCAPSED_STRING","'%alias.nid = n.nid'",434],")",";",["T_WHITESPACE","\n      ",434],["T_VARIABLE","$or",435],["T_WHITESPACE"," ",435],"=",["T_WHITESPACE"," ",435],["T_STRING","db_or",435],"(",")",";",["T_WHITESPACE","\n      ",435],["T_COMMENT","\/\/ If any grant exists for the specified user, then user has access to the node for the specified operation.\n",436],["T_WHITESPACE","      ",437],["T_FOREACH","foreach",437],["T_WHITESPACE"," ",437],"(",["T_STRING","node_access_grants",437],"(",["T_VARIABLE","$op",437],",",["T_WHITESPACE"," ",437],["T_VARIABLE","$query",437],["T_OBJECT_OPERATOR","->",437],["T_STRING","getMetaData",437],"(",["T_CONSTANT_ENCAPSED_STRING","'account'",437],")",")",["T_WHITESPACE"," ",437],["T_AS","as",437],["T_WHITESPACE"," ",437],["T_VARIABLE","$realm",437],["T_WHITESPACE"," ",437],["T_DOUBLE_ARROW","=>",437],["T_WHITESPACE"," ",437],["T_VARIABLE","$gids",437],")",["T_WHITESPACE"," ",437],"{",["T_WHITESPACE","\n        ",437],["T_FOREACH","foreach",438],["T_WHITESPACE"," ",438],"(",["T_VARIABLE","$gids",438],["T_WHITESPACE"," ",438],["T_AS","as",438],["T_WHITESPACE"," ",438],["T_VARIABLE","$gid",438],")",["T_WHITESPACE"," ",438],"{",["T_WHITESPACE","\n          ",438],["T_VARIABLE","$or",439],["T_OBJECT_OPERATOR","->",439],["T_STRING","condition",439],"(",["T_STRING","db_and",439],"(",")",["T_WHITESPACE","\n            ",439],["T_OBJECT_OPERATOR","->",440],["T_STRING","condition",440],"(",["T_VARIABLE","$access_alias",440],["T_WHITESPACE"," ",440],".",["T_WHITESPACE"," ",440],["T_CONSTANT_ENCAPSED_STRING","'.gid'",440],",",["T_WHITESPACE"," ",440],["T_VARIABLE","$gid",440],")",["T_WHITESPACE","\n            ",440],["T_OBJECT_OPERATOR","->",441],["T_STRING","condition",441],"(",["T_VARIABLE","$access_alias",441],["T_WHITESPACE"," ",441],".",["T_WHITESPACE"," ",441],["T_CONSTANT_ENCAPSED_STRING","'.realm'",441],",",["T_WHITESPACE"," ",441],["T_VARIABLE","$realm",441],")",["T_WHITESPACE","\n          ",441],")",";",["T_WHITESPACE","\n        ",442],"}",["T_WHITESPACE","\n      ",443],"}",["T_WHITESPACE","\n\n      ",444],["T_IF","if",446],["T_WHITESPACE"," ",446],"(",["T_STRING","count",446],"(",["T_VARIABLE","$or",446],["T_OBJECT_OPERATOR","->",446],["T_STRING","conditions",446],"(",")",")",")",["T_WHITESPACE"," ",446],"{",["T_WHITESPACE","\n        ",446],["T_VARIABLE","$query",447],["T_OBJECT_OPERATOR","->",447],["T_STRING","condition",447],"(",["T_VARIABLE","$or",447],")",";",["T_WHITESPACE","\n      ",447],"}",["T_WHITESPACE","\n\n      ",448],["T_VARIABLE","$query",450],["T_OBJECT_OPERATOR","->",450],["T_STRING","condition",450],"(",["T_VARIABLE","$access_alias",450],["T_WHITESPACE"," ",450],".",["T_WHITESPACE"," ",450],["T_CONSTANT_ENCAPSED_STRING","'grant_'",450],["T_WHITESPACE"," ",450],".",["T_WHITESPACE"," ",450],["T_VARIABLE","$op",450],",",["T_WHITESPACE"," ",450],["T_LNUMBER","1",450],",",["T_WHITESPACE"," ",450],["T_CONSTANT_ENCAPSED_STRING","'>='",450],")",";",["T_WHITESPACE","\n    ",450],"}",["T_WHITESPACE","\n  ",451],"}",["T_WHITESPACE","\n",452],"}",["T_WHITESPACE","\n\n",453],["T_DOC_COMMENT","\/**\n * Define the current version of the database schema.\n *\n * A Drupal schema definition is an array structure representing one or more\n * tables and their related keys and indexes. A schema is defined by\n * hook_schema() which must live in your module's .install file.\n *\n * The tables declared by this hook will be automatically created when the\n * module is installed, and removed when the module is uninstalled. This happens\n * before hook_install() is invoked, and after hook_uninstall() is invoked,\n * respectively.\n *\n * By declaring the tables used by your module via an implementation of\n * hook_schema(), these tables will be available on all supported database\n * engines. You don't have to deal with the different SQL dialects for table\n * creation and alteration of the supported database engines.\n *\n * See the Schema API Handbook at https:\/\/www.drupal.org\/node\/146843 for details\n * on schema definition structures. Note that foreign key definitions are for\n * documentation purposes only; foreign keys are not created in the database,\n * nor are they enforced by Drupal.\n *\n * @return array\n *   A schema definition structure array. For each element of the\n *   array, the key is a table name and the value is a table structure\n *   definition.\n *\n * @ingroup schemaapi\n *\/",455],["T_WHITESPACE","\n",483],["T_FUNCTION","function",484],["T_WHITESPACE"," ",484],["T_STRING","hook_schema",484],"(",")",["T_WHITESPACE"," ",484],"{",["T_WHITESPACE","\n  ",484],["T_VARIABLE","$schema",485],"[",["T_CONSTANT_ENCAPSED_STRING","'node'",485],"]",["T_WHITESPACE"," ",485],"=",["T_WHITESPACE"," ",485],["T_ARRAY","array",485],"(",["T_WHITESPACE","\n    ",485],["T_COMMENT","\/\/ Example (partial) specification for table \"node\".\n",486],["T_WHITESPACE","    ",487],["T_CONSTANT_ENCAPSED_STRING","'description'",487],["T_WHITESPACE"," ",487],["T_DOUBLE_ARROW","=>",487],["T_WHITESPACE"," ",487],["T_CONSTANT_ENCAPSED_STRING","'The base table for nodes.'",487],",",["T_WHITESPACE","\n    ",487],["T_CONSTANT_ENCAPSED_STRING","'fields'",488],["T_WHITESPACE"," ",488],["T_DOUBLE_ARROW","=>",488],["T_WHITESPACE"," ",488],["T_ARRAY","array",488],"(",["T_WHITESPACE","\n      ",488],["T_CONSTANT_ENCAPSED_STRING","'nid'",489],["T_WHITESPACE"," ",489],["T_DOUBLE_ARROW","=>",489],["T_WHITESPACE"," ",489],["T_ARRAY","array",489],"(",["T_WHITESPACE","\n        ",489],["T_CONSTANT_ENCAPSED_STRING","'description'",490],["T_WHITESPACE"," ",490],["T_DOUBLE_ARROW","=>",490],["T_WHITESPACE"," ",490],["T_CONSTANT_ENCAPSED_STRING","'The primary identifier for a node.'",490],",",["T_WHITESPACE","\n        ",490],["T_CONSTANT_ENCAPSED_STRING","'type'",491],["T_WHITESPACE"," ",491],["T_DOUBLE_ARROW","=>",491],["T_WHITESPACE"," ",491],["T_CONSTANT_ENCAPSED_STRING","'serial'",491],",",["T_WHITESPACE","\n        ",491],["T_CONSTANT_ENCAPSED_STRING","'unsigned'",492],["T_WHITESPACE"," ",492],["T_DOUBLE_ARROW","=>",492],["T_WHITESPACE"," ",492],["T_STRING","TRUE",492],",",["T_WHITESPACE","\n        ",492],["T_CONSTANT_ENCAPSED_STRING","'not null'",493],["T_WHITESPACE"," ",493],["T_DOUBLE_ARROW","=>",493],["T_WHITESPACE"," ",493],["T_STRING","TRUE",493],",",["T_WHITESPACE","\n      ",493],")",",",["T_WHITESPACE","\n      ",494],["T_CONSTANT_ENCAPSED_STRING","'vid'",495],["T_WHITESPACE"," ",495],["T_DOUBLE_ARROW","=>",495],["T_WHITESPACE"," ",495],["T_ARRAY","array",495],"(",["T_WHITESPACE","\n        ",495],["T_CONSTANT_ENCAPSED_STRING","'description'",496],["T_WHITESPACE"," ",496],["T_DOUBLE_ARROW","=>",496],["T_WHITESPACE"," ",496],["T_CONSTANT_ENCAPSED_STRING","'The current {node_field_revision}.vid version identifier.'",496],",",["T_WHITESPACE","\n        ",496],["T_CONSTANT_ENCAPSED_STRING","'type'",497],["T_WHITESPACE"," ",497],["T_DOUBLE_ARROW","=>",497],["T_WHITESPACE"," ",497],["T_CONSTANT_ENCAPSED_STRING","'int'",497],",",["T_WHITESPACE","\n        ",497],["T_CONSTANT_ENCAPSED_STRING","'unsigned'",498],["T_WHITESPACE"," ",498],["T_DOUBLE_ARROW","=>",498],["T_WHITESPACE"," ",498],["T_STRING","TRUE",498],",",["T_WHITESPACE","\n        ",498],["T_CONSTANT_ENCAPSED_STRING","'not null'",499],["T_WHITESPACE"," ",499],["T_DOUBLE_ARROW","=>",499],["T_WHITESPACE"," ",499],["T_STRING","TRUE",499],",",["T_WHITESPACE","\n        ",499],["T_CONSTANT_ENCAPSED_STRING","'default'",500],["T_WHITESPACE"," ",500],["T_DOUBLE_ARROW","=>",500],["T_WHITESPACE"," ",500],["T_LNUMBER","0",500],",",["T_WHITESPACE","\n      ",500],")",",",["T_WHITESPACE","\n      ",501],["T_CONSTANT_ENCAPSED_STRING","'type'",502],["T_WHITESPACE"," ",502],["T_DOUBLE_ARROW","=>",502],["T_WHITESPACE"," ",502],["T_ARRAY","array",502],"(",["T_WHITESPACE","\n        ",502],["T_CONSTANT_ENCAPSED_STRING","'description'",503],["T_WHITESPACE"," ",503],["T_DOUBLE_ARROW","=>",503],["T_WHITESPACE"," ",503],["T_CONSTANT_ENCAPSED_STRING","'The type of this node.'",503],",",["T_WHITESPACE","\n        ",503],["T_CONSTANT_ENCAPSED_STRING","'type'",504],["T_WHITESPACE"," ",504],["T_DOUBLE_ARROW","=>",504],["T_WHITESPACE"," ",504],["T_CONSTANT_ENCAPSED_STRING","'varchar'",504],",",["T_WHITESPACE","\n        ",504],["T_CONSTANT_ENCAPSED_STRING","'length'",505],["T_WHITESPACE"," ",505],["T_DOUBLE_ARROW","=>",505],["T_WHITESPACE"," ",505],["T_LNUMBER","32",505],",",["T_WHITESPACE","\n        ",505],["T_CONSTANT_ENCAPSED_STRING","'not null'",506],["T_WHITESPACE"," ",506],["T_DOUBLE_ARROW","=>",506],["T_WHITESPACE"," ",506],["T_STRING","TRUE",506],",",["T_WHITESPACE","\n        ",506],["T_CONSTANT_ENCAPSED_STRING","'default'",507],["T_WHITESPACE"," ",507],["T_DOUBLE_ARROW","=>",507],["T_WHITESPACE"," ",507],["T_CONSTANT_ENCAPSED_STRING","''",507],",",["T_WHITESPACE","\n      ",507],")",",",["T_WHITESPACE","\n      ",508],["T_CONSTANT_ENCAPSED_STRING","'title'",509],["T_WHITESPACE"," ",509],["T_DOUBLE_ARROW","=>",509],["T_WHITESPACE"," ",509],["T_ARRAY","array",509],"(",["T_WHITESPACE","\n        ",509],["T_CONSTANT_ENCAPSED_STRING","'description'",510],["T_WHITESPACE"," ",510],["T_DOUBLE_ARROW","=>",510],["T_WHITESPACE"," ",510],["T_CONSTANT_ENCAPSED_STRING","'The node title.'",510],",",["T_WHITESPACE","\n        ",510],["T_CONSTANT_ENCAPSED_STRING","'type'",511],["T_WHITESPACE"," ",511],["T_DOUBLE_ARROW","=>",511],["T_WHITESPACE"," ",511],["T_CONSTANT_ENCAPSED_STRING","'varchar'",511],",",["T_WHITESPACE","\n        ",511],["T_CONSTANT_ENCAPSED_STRING","'length'",512],["T_WHITESPACE"," ",512],["T_DOUBLE_ARROW","=>",512],["T_WHITESPACE"," ",512],["T_LNUMBER","255",512],",",["T_WHITESPACE","\n        ",512],["T_CONSTANT_ENCAPSED_STRING","'not null'",513],["T_WHITESPACE"," ",513],["T_DOUBLE_ARROW","=>",513],["T_WHITESPACE"," ",513],["T_STRING","TRUE",513],",",["T_WHITESPACE","\n        ",513],["T_CONSTANT_ENCAPSED_STRING","'default'",514],["T_WHITESPACE"," ",514],["T_DOUBLE_ARROW","=>",514],["T_WHITESPACE"," ",514],["T_CONSTANT_ENCAPSED_STRING","''",514],",",["T_WHITESPACE","\n      ",514],")",",",["T_WHITESPACE","\n    ",515],")",",",["T_WHITESPACE","\n    ",516],["T_CONSTANT_ENCAPSED_STRING","'indexes'",517],["T_WHITESPACE"," ",517],["T_DOUBLE_ARROW","=>",517],["T_WHITESPACE"," ",517],["T_ARRAY","array",517],"(",["T_WHITESPACE","\n      ",517],["T_CONSTANT_ENCAPSED_STRING","'node_changed'",518],["T_WHITESPACE","        ",518],["T_DOUBLE_ARROW","=>",518],["T_WHITESPACE"," ",518],["T_ARRAY","array",518],"(",["T_CONSTANT_ENCAPSED_STRING","'changed'",518],")",",",["T_WHITESPACE","\n      ",518],["T_CONSTANT_ENCAPSED_STRING","'node_created'",519],["T_WHITESPACE","        ",519],["T_DOUBLE_ARROW","=>",519],["T_WHITESPACE"," ",519],["T_ARRAY","array",519],"(",["T_CONSTANT_ENCAPSED_STRING","'created'",519],")",",",["T_WHITESPACE","\n    ",519],")",",",["T_WHITESPACE","\n    ",520],["T_CONSTANT_ENCAPSED_STRING","'unique keys'",521],["T_WHITESPACE"," ",521],["T_DOUBLE_ARROW","=>",521],["T_WHITESPACE"," ",521],["T_ARRAY","array",521],"(",["T_WHITESPACE","\n      ",521],["T_CONSTANT_ENCAPSED_STRING","'nid_vid'",522],["T_WHITESPACE"," ",522],["T_DOUBLE_ARROW","=>",522],["T_WHITESPACE"," ",522],["T_ARRAY","array",522],"(",["T_CONSTANT_ENCAPSED_STRING","'nid'",522],",",["T_WHITESPACE"," ",522],["T_CONSTANT_ENCAPSED_STRING","'vid'",522],")",",",["T_WHITESPACE","\n      ",522],["T_CONSTANT_ENCAPSED_STRING","'vid'",523],["T_WHITESPACE","     ",523],["T_DOUBLE_ARROW","=>",523],["T_WHITESPACE"," ",523],["T_ARRAY","array",523],"(",["T_CONSTANT_ENCAPSED_STRING","'vid'",523],")",",",["T_WHITESPACE","\n    ",523],")",",",["T_WHITESPACE","\n    ",524],["T_COMMENT","\/\/ For documentation purposes only; foreign keys are not created in the\n",525],["T_WHITESPACE","    ",526],["T_COMMENT","\/\/ database.\n",526],["T_WHITESPACE","    ",527],["T_CONSTANT_ENCAPSED_STRING","'foreign keys'",527],["T_WHITESPACE"," ",527],["T_DOUBLE_ARROW","=>",527],["T_WHITESPACE"," ",527],["T_ARRAY","array",527],"(",["T_WHITESPACE","\n      ",527],["T_CONSTANT_ENCAPSED_STRING","'node_revision'",528],["T_WHITESPACE"," ",528],["T_DOUBLE_ARROW","=>",528],["T_WHITESPACE"," ",528],["T_ARRAY","array",528],"(",["T_WHITESPACE","\n        ",528],["T_CONSTANT_ENCAPSED_STRING","'table'",529],["T_WHITESPACE"," ",529],["T_DOUBLE_ARROW","=>",529],["T_WHITESPACE"," ",529],["T_CONSTANT_ENCAPSED_STRING","'node_field_revision'",529],",",["T_WHITESPACE","\n        ",529],["T_CONSTANT_ENCAPSED_STRING","'columns'",530],["T_WHITESPACE"," ",530],["T_DOUBLE_ARROW","=>",530],["T_WHITESPACE"," ",530],["T_ARRAY","array",530],"(",["T_CONSTANT_ENCAPSED_STRING","'vid'",530],["T_WHITESPACE"," ",530],["T_DOUBLE_ARROW","=>",530],["T_WHITESPACE"," ",530],["T_CONSTANT_ENCAPSED_STRING","'vid'",530],")",",",["T_WHITESPACE","\n      ",530],")",",",["T_WHITESPACE","\n      ",531],["T_CONSTANT_ENCAPSED_STRING","'node_author'",532],["T_WHITESPACE"," ",532],["T_DOUBLE_ARROW","=>",532],["T_WHITESPACE"," ",532],["T_ARRAY","array",532],"(",["T_WHITESPACE","\n        ",532],["T_CONSTANT_ENCAPSED_STRING","'table'",533],["T_WHITESPACE"," ",533],["T_DOUBLE_ARROW","=>",533],["T_WHITESPACE"," ",533],["T_CONSTANT_ENCAPSED_STRING","'users'",533],",",["T_WHITESPACE","\n        ",533],["T_CONSTANT_ENCAPSED_STRING","'columns'",534],["T_WHITESPACE"," ",534],["T_DOUBLE_ARROW","=>",534],["T_WHITESPACE"," ",534],["T_ARRAY","array",534],"(",["T_CONSTANT_ENCAPSED_STRING","'uid'",534],["T_WHITESPACE"," ",534],["T_DOUBLE_ARROW","=>",534],["T_WHITESPACE"," ",534],["T_CONSTANT_ENCAPSED_STRING","'uid'",534],")",",",["T_WHITESPACE","\n      ",534],")",",",["T_WHITESPACE","\n    ",535],")",",",["T_WHITESPACE","\n    ",536],["T_CONSTANT_ENCAPSED_STRING","'primary key'",537],["T_WHITESPACE"," ",537],["T_DOUBLE_ARROW","=>",537],["T_WHITESPACE"," ",537],["T_ARRAY","array",537],"(",["T_CONSTANT_ENCAPSED_STRING","'nid'",537],")",",",["T_WHITESPACE","\n  ",537],")",";",["T_WHITESPACE","\n  ",538],["T_RETURN","return",539],["T_WHITESPACE"," ",539],["T_VARIABLE","$schema",539],";",["T_WHITESPACE","\n",539],"}",["T_WHITESPACE","\n\n",540],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",542],["T_WHITESPACE","\n",544]]