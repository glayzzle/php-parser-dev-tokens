[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Database",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Connection",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Database",7],["T_NS_SEPARATOR","\\",7],["T_STRING","IntegrityConstraintViolationException",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * General class for an abstracted MERGE query operation.\n *\n * An ANSI SQL:2003 compatible database would run the following query:\n *\n * @code\n * MERGE INTO table_name_1 USING table_name_2 ON (condition)\n *   WHEN MATCHED THEN\n *   UPDATE SET column1 = value1 [, column2 = value2 ...]\n *   WHEN NOT MATCHED THEN\n *   INSERT (column1 [, column2 ...]) VALUES (value1 [, value2 ...\n * @endcode\n *\n * Other databases (most notably MySQL, PostgreSQL and SQLite) will emulate\n * this statement by running a SELECT and then INSERT or UPDATE.\n *\n * By default, the two table names are identical and they are passed into the\n * the constructor. table_name_2 can be specified by the\n * MergeQuery::conditionTable() method. It can be either a string or a\n * subquery.\n *\n * The condition is built exactly like SelectQuery or UpdateQuery conditions,\n * the UPDATE query part is built similarly like an UpdateQuery and finally the\n * INSERT query part is built similarly like an InsertQuery. However, both\n * UpdateQuery and InsertQuery has a fields method so\n * MergeQuery::updateFields() and MergeQuery::insertFields() needs to be called\n * instead. MergeQuery::fields() can also be called which calls both of these\n * methods as the common case is to use the same column-value pairs for both\n * INSERT and UPDATE. However, this is not mandatory. Another convenient\n * wrapper is MergeQuery::key() which adds the same column-value pairs to the\n * condition and the INSERT query part.\n *\n * Several methods (key(), fields(), insertFields()) can be called to set a\n * key-value pair for the INSERT query part. Subsequent calls for the same\n * fields override the earlier ones. The same is true for UPDATE and key(),\n * fields() and updateFields().\n *\/",9],["T_WHITESPACE","\n",45],["T_CLASS","class",46],["T_WHITESPACE"," ",46],["T_STRING","Merge",46],["T_WHITESPACE"," ",46],["T_EXTENDS","extends",46],["T_WHITESPACE"," ",46],["T_STRING","Query",46],["T_WHITESPACE"," ",46],["T_IMPLEMENTS","implements",46],["T_WHITESPACE"," ",46],["T_STRING","ConditionInterface",46],["T_WHITESPACE"," ",46],"{",["T_WHITESPACE","\n\n  ",46],["T_USE","use",48],["T_WHITESPACE"," ",48],["T_STRING","QueryConditionTrait",48],";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Returned by execute() if an INSERT query has been executed.\n   *\/",50],["T_WHITESPACE","\n  ",52],["T_CONST","const",53],["T_WHITESPACE"," ",53],["T_STRING","STATUS_INSERT",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_LNUMBER","1",53],";",["T_WHITESPACE","\n\n  ",53],["T_DOC_COMMENT","\/**\n   * Returned by execute() if an UPDATE query has been executed.\n   *\/",55],["T_WHITESPACE","\n  ",57],["T_CONST","const",58],["T_WHITESPACE"," ",58],["T_STRING","STATUS_UPDATE",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_LNUMBER","2",58],";",["T_WHITESPACE","\n\n  ",58],["T_DOC_COMMENT","\/**\n   * The table to be used for INSERT and UPDATE.\n   *\n   * @var string\n   *\/",60],["T_WHITESPACE","\n  ",64],["T_PROTECTED","protected",65],["T_WHITESPACE"," ",65],["T_VARIABLE","$table",65],";",["T_WHITESPACE","\n\n  ",65],["T_DOC_COMMENT","\/**\n   * The table or subquery to be used for the condition.\n   *\/",67],["T_WHITESPACE","\n  ",69],["T_PROTECTED","protected",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$conditionTable",70],";",["T_WHITESPACE","\n\n  ",70],["T_DOC_COMMENT","\/**\n   * An array of fields on which to insert.\n   *\n   * @var array\n   *\/",72],["T_WHITESPACE","\n  ",76],["T_PROTECTED","protected",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$insertFields",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_ARRAY","array",77],"(",")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * An array of fields which should be set to their database-defined defaults.\n   *\n   * Used on INSERT.\n   *\n   * @var array\n   *\/",79],["T_WHITESPACE","\n  ",85],["T_PROTECTED","protected",86],["T_WHITESPACE"," ",86],["T_VARIABLE","$defaultFields",86],["T_WHITESPACE"," ",86],"=",["T_WHITESPACE"," ",86],["T_ARRAY","array",86],"(",")",";",["T_WHITESPACE","\n\n  ",86],["T_DOC_COMMENT","\/**\n   * An array of values to be inserted.\n   *\n   * @var string\n   *\/",88],["T_WHITESPACE","\n  ",92],["T_PROTECTED","protected",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$insertValues",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_ARRAY","array",93],"(",")",";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * An array of fields that will be updated.\n   *\n   * @var array\n   *\/",95],["T_WHITESPACE","\n  ",99],["T_PROTECTED","protected",100],["T_WHITESPACE"," ",100],["T_VARIABLE","$updateFields",100],["T_WHITESPACE"," ",100],"=",["T_WHITESPACE"," ",100],["T_ARRAY","array",100],"(",")",";",["T_WHITESPACE","\n\n  ",100],["T_DOC_COMMENT","\/**\n   * Array of fields to update to an expression in case of a duplicate record.\n   *\n   * This variable is a nested array in the following format:\n   * @code\n   * <some field> => array(\n   *  'condition' => <condition to execute, as a string>,\n   *  'arguments' => <array of arguments for condition, or NULL for none>,\n   * );\n   * @endcode\n   *\n   * @var array\n   *\/",102],["T_WHITESPACE","\n  ",114],["T_PROTECTED","protected",115],["T_WHITESPACE"," ",115],["T_VARIABLE","$expressionFields",115],["T_WHITESPACE"," ",115],"=",["T_WHITESPACE"," ",115],["T_ARRAY","array",115],"(",")",";",["T_WHITESPACE","\n\n  ",115],["T_DOC_COMMENT","\/**\n   * Flag indicating whether an UPDATE is necessary.\n   *\n   * @var bool\n   *\/",117],["T_WHITESPACE","\n  ",121],["T_PROTECTED","protected",122],["T_WHITESPACE"," ",122],["T_VARIABLE","$needsUpdate",122],["T_WHITESPACE"," ",122],"=",["T_WHITESPACE"," ",122],["T_STRING","FALSE",122],";",["T_WHITESPACE","\n\n  ",122],["T_DOC_COMMENT","\/**\n   * Constructs a Merge object.\n   *\n   * @param \\Drupal\\Core\\Database\\Connection $connection\n   *   A Connection object.\n   * @param string $table\n   *   Name of the table to associate with this query.\n   * @param array $options\n   *   Array of database options.\n   *\/",124],["T_WHITESPACE","\n  ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","__construct",134],"(",["T_STRING","Connection",134],["T_WHITESPACE"," ",134],["T_VARIABLE","$connection",134],",",["T_WHITESPACE"," ",134],["T_VARIABLE","$table",134],",",["T_WHITESPACE"," ",134],["T_ARRAY","array",134],["T_WHITESPACE"," ",134],["T_VARIABLE","$options",134],["T_WHITESPACE"," ",134],"=",["T_WHITESPACE"," ",134],["T_ARRAY","array",134],"(",")",")",["T_WHITESPACE"," ",134],"{",["T_WHITESPACE","\n    ",134],["T_VARIABLE","$options",135],"[",["T_CONSTANT_ENCAPSED_STRING","'return'",135],"]",["T_WHITESPACE"," ",135],"=",["T_WHITESPACE"," ",135],["T_STRING","Database",135],["T_DOUBLE_COLON","::",135],["T_STRING","RETURN_AFFECTED",135],";",["T_WHITESPACE","\n    ",135],["T_STRING","parent",136],["T_DOUBLE_COLON","::",136],["T_STRING","__construct",136],"(",["T_VARIABLE","$connection",136],",",["T_WHITESPACE"," ",136],["T_VARIABLE","$options",136],")",";",["T_WHITESPACE","\n    ",136],["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","table",137],["T_WHITESPACE"," ",137],"=",["T_WHITESPACE"," ",137],["T_VARIABLE","$table",137],";",["T_WHITESPACE","\n    ",137],["T_VARIABLE","$this",138],["T_OBJECT_OPERATOR","->",138],["T_STRING","conditionTable",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_VARIABLE","$table",138],";",["T_WHITESPACE","\n    ",138],["T_VARIABLE","$this",139],["T_OBJECT_OPERATOR","->",139],["T_STRING","condition",139],["T_WHITESPACE"," ",139],"=",["T_WHITESPACE"," ",139],["T_NEW","new",139],["T_WHITESPACE"," ",139],["T_STRING","Condition",139],"(",["T_CONSTANT_ENCAPSED_STRING","'AND'",139],")",";",["T_WHITESPACE","\n  ",139],"}",["T_WHITESPACE","\n\n  ",140],["T_DOC_COMMENT","\/**\n   * Sets the table or subquery to be used for the condition.\n   *\n   * @param $table\n   *   The table name or the subquery to be used. Use a Select query object to\n   *   pass in a subquery.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",142],["T_WHITESPACE","\n  ",151],["T_PROTECTED","protected",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","conditionTable",152],"(",["T_VARIABLE","$table",152],")",["T_WHITESPACE"," ",152],"{",["T_WHITESPACE","\n    ",152],["T_VARIABLE","$this",153],["T_OBJECT_OPERATOR","->",153],["T_STRING","conditionTable",153],["T_WHITESPACE"," ",153],"=",["T_WHITESPACE"," ",153],["T_VARIABLE","$table",153],";",["T_WHITESPACE","\n    ",153],["T_RETURN","return",154],["T_WHITESPACE"," ",154],["T_VARIABLE","$this",154],";",["T_WHITESPACE","\n  ",154],"}",["T_WHITESPACE","\n\n  ",155],["T_DOC_COMMENT","\/**\n   * Adds a set of field->value pairs to be updated.\n   *\n   * @param $fields\n   *   An associative array of fields to write into the database. The array keys\n   *   are the field names and the values are the values to which to set them.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",157],["T_WHITESPACE","\n  ",166],["T_PUBLIC","public",167],["T_WHITESPACE"," ",167],["T_FUNCTION","function",167],["T_WHITESPACE"," ",167],["T_STRING","updateFields",167],"(",["T_ARRAY","array",167],["T_WHITESPACE"," ",167],["T_VARIABLE","$fields",167],")",["T_WHITESPACE"," ",167],"{",["T_WHITESPACE","\n    ",167],["T_VARIABLE","$this",168],["T_OBJECT_OPERATOR","->",168],["T_STRING","updateFields",168],["T_WHITESPACE"," ",168],"=",["T_WHITESPACE"," ",168],["T_VARIABLE","$fields",168],";",["T_WHITESPACE","\n    ",168],["T_VARIABLE","$this",169],["T_OBJECT_OPERATOR","->",169],["T_STRING","needsUpdate",169],["T_WHITESPACE"," ",169],"=",["T_WHITESPACE"," ",169],["T_STRING","TRUE",169],";",["T_WHITESPACE","\n    ",169],["T_RETURN","return",170],["T_WHITESPACE"," ",170],["T_VARIABLE","$this",170],";",["T_WHITESPACE","\n  ",170],"}",["T_WHITESPACE","\n\n  ",171],["T_DOC_COMMENT","\/**\n   * Specifies fields to be updated as an expression.\n   *\n   * Expression fields are cases such as counter = counter + 1. This method\n   * takes precedence over MergeQuery::updateFields() and it's wrappers,\n   * MergeQuery::key() and MergeQuery::fields().\n   *\n   * @param $field\n   *   The field to set.\n   * @param $expression\n   *   The field will be set to the value of this expression. This parameter\n   *   may include named placeholders.\n   * @param $arguments\n   *   If specified, this is an array of key\/value pairs for named placeholders\n   *   corresponding to the expression.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",173],["T_WHITESPACE","\n  ",191],["T_PUBLIC","public",192],["T_WHITESPACE"," ",192],["T_FUNCTION","function",192],["T_WHITESPACE"," ",192],["T_STRING","expression",192],"(",["T_VARIABLE","$field",192],",",["T_WHITESPACE"," ",192],["T_VARIABLE","$expression",192],",",["T_WHITESPACE"," ",192],["T_ARRAY","array",192],["T_WHITESPACE"," ",192],["T_VARIABLE","$arguments",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_STRING","NULL",192],")",["T_WHITESPACE"," ",192],"{",["T_WHITESPACE","\n    ",192],["T_VARIABLE","$this",193],["T_OBJECT_OPERATOR","->",193],["T_STRING","expressionFields",193],"[",["T_VARIABLE","$field",193],"]",["T_WHITESPACE"," ",193],"=",["T_WHITESPACE"," ",193],["T_ARRAY","array",193],"(",["T_WHITESPACE","\n      ",193],["T_CONSTANT_ENCAPSED_STRING","'expression'",194],["T_WHITESPACE"," ",194],["T_DOUBLE_ARROW","=>",194],["T_WHITESPACE"," ",194],["T_VARIABLE","$expression",194],",",["T_WHITESPACE","\n      ",194],["T_CONSTANT_ENCAPSED_STRING","'arguments'",195],["T_WHITESPACE"," ",195],["T_DOUBLE_ARROW","=>",195],["T_WHITESPACE"," ",195],["T_VARIABLE","$arguments",195],",",["T_WHITESPACE","\n    ",195],")",";",["T_WHITESPACE","\n    ",196],["T_VARIABLE","$this",197],["T_OBJECT_OPERATOR","->",197],["T_STRING","needsUpdate",197],["T_WHITESPACE"," ",197],"=",["T_WHITESPACE"," ",197],["T_STRING","TRUE",197],";",["T_WHITESPACE","\n    ",197],["T_RETURN","return",198],["T_WHITESPACE"," ",198],["T_VARIABLE","$this",198],";",["T_WHITESPACE","\n  ",198],"}",["T_WHITESPACE","\n\n  ",199],["T_DOC_COMMENT","\/**\n   * Adds a set of field->value pairs to be inserted.\n   *\n   * @param $fields\n   *   An array of fields on which to insert. This array may be indexed or\n   *   associative. If indexed, the array is taken to be the list of fields.\n   *   If associative, the keys of the array are taken to be the fields and\n   *   the values are taken to be corresponding values to insert. If a\n   *   $values argument is provided, $fields must be indexed.\n   * @param $values\n   *   An array of fields to insert into the database. The values must be\n   *   specified in the same order as the $fields array.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",201],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","insertFields",217],"(",["T_ARRAY","array",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$fields",217],",",["T_WHITESPACE"," ",217],["T_ARRAY","array",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$values",217],["T_WHITESPACE"," ",217],"=",["T_WHITESPACE"," ",217],["T_ARRAY","array",217],"(",")",")",["T_WHITESPACE"," ",217],"{",["T_WHITESPACE","\n    ",217],["T_IF","if",218],["T_WHITESPACE"," ",218],"(",["T_VARIABLE","$values",218],")",["T_WHITESPACE"," ",218],"{",["T_WHITESPACE","\n      ",218],["T_VARIABLE","$fields",219],["T_WHITESPACE"," ",219],"=",["T_WHITESPACE"," ",219],["T_STRING","array_combine",219],"(",["T_VARIABLE","$fields",219],",",["T_WHITESPACE"," ",219],["T_VARIABLE","$values",219],")",";",["T_WHITESPACE","\n    ",219],"}",["T_WHITESPACE","\n    ",220],["T_VARIABLE","$this",221],["T_OBJECT_OPERATOR","->",221],["T_STRING","insertFields",221],["T_WHITESPACE"," ",221],"=",["T_WHITESPACE"," ",221],["T_VARIABLE","$fields",221],";",["T_WHITESPACE","\n    ",221],["T_RETURN","return",222],["T_WHITESPACE"," ",222],["T_VARIABLE","$this",222],";",["T_WHITESPACE","\n  ",222],"}",["T_WHITESPACE","\n\n  ",223],["T_DOC_COMMENT","\/**\n   * Specifies fields for which the database-defaults should be used.\n   *\n   * If you want to force a given field to use the database-defined default,\n   * not NULL or undefined, use this method to instruct the database to use\n   * default values explicitly. In most cases this will not be necessary\n   * unless you are inserting a row that is all default values, as you cannot\n   * specify no values in an INSERT query.\n   *\n   * Specifying a field both in fields() and in useDefaults() is an error\n   * and will not execute.\n   *\n   * @param $fields\n   *   An array of values for which to use the default values\n   *   specified in the table definition.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",225],["T_WHITESPACE","\n  ",243],["T_PUBLIC","public",244],["T_WHITESPACE"," ",244],["T_FUNCTION","function",244],["T_WHITESPACE"," ",244],["T_STRING","useDefaults",244],"(",["T_ARRAY","array",244],["T_WHITESPACE"," ",244],["T_VARIABLE","$fields",244],")",["T_WHITESPACE"," ",244],"{",["T_WHITESPACE","\n    ",244],["T_VARIABLE","$this",245],["T_OBJECT_OPERATOR","->",245],["T_STRING","defaultFields",245],["T_WHITESPACE"," ",245],"=",["T_WHITESPACE"," ",245],["T_VARIABLE","$fields",245],";",["T_WHITESPACE","\n    ",245],["T_RETURN","return",246],["T_WHITESPACE"," ",246],["T_VARIABLE","$this",246],";",["T_WHITESPACE","\n  ",246],"}",["T_WHITESPACE","\n\n  ",247],["T_DOC_COMMENT","\/**\n   * Sets common field-value pairs in the INSERT and UPDATE query parts.\n   *\n   * This method should only be called once. It may be called either\n   * with a single associative array or two indexed arrays. If called\n   * with an associative array, the keys are taken to be the fields\n   * and the values are taken to be the corresponding values to set.\n   * If called with two arrays, the first array is taken as the fields\n   * and the second array is taken as the corresponding values.\n   *\n   * @param $fields\n   *   An array of fields to insert, or an associative array of fields and\n   *   values. The keys of the array are taken to be the fields and the values\n   *   are taken to be corresponding values to insert.\n   * @param $values\n   *   An array of values to set into the database. The values must be\n   *   specified in the same order as the $fields array.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\Merge\n   *   The called object.\n   *\/",249],["T_WHITESPACE","\n  ",269],["T_PUBLIC","public",270],["T_WHITESPACE"," ",270],["T_FUNCTION","function",270],["T_WHITESPACE"," ",270],["T_STRING","fields",270],"(",["T_ARRAY","array",270],["T_WHITESPACE"," ",270],["T_VARIABLE","$fields",270],",",["T_WHITESPACE"," ",270],["T_ARRAY","array",270],["T_WHITESPACE"," ",270],["T_VARIABLE","$values",270],["T_WHITESPACE"," ",270],"=",["T_WHITESPACE"," ",270],["T_ARRAY","array",270],"(",")",")",["T_WHITESPACE"," ",270],"{",["T_WHITESPACE","\n    ",270],["T_IF","if",271],["T_WHITESPACE"," ",271],"(",["T_VARIABLE","$values",271],")",["T_WHITESPACE"," ",271],"{",["T_WHITESPACE","\n      ",271],["T_VARIABLE","$fields",272],["T_WHITESPACE"," ",272],"=",["T_WHITESPACE"," ",272],["T_STRING","array_combine",272],"(",["T_VARIABLE","$fields",272],",",["T_WHITESPACE"," ",272],["T_VARIABLE","$values",272],")",";",["T_WHITESPACE","\n    ",272],"}",["T_WHITESPACE","\n    ",273],["T_FOREACH","foreach",274],["T_WHITESPACE"," ",274],"(",["T_VARIABLE","$fields",274],["T_WHITESPACE"," ",274],["T_AS","as",274],["T_WHITESPACE"," ",274],["T_VARIABLE","$key",274],["T_WHITESPACE"," ",274],["T_DOUBLE_ARROW","=>",274],["T_WHITESPACE"," ",274],["T_VARIABLE","$value",274],")",["T_WHITESPACE"," ",274],"{",["T_WHITESPACE","\n      ",274],["T_VARIABLE","$this",275],["T_OBJECT_OPERATOR","->",275],["T_STRING","insertFields",275],"[",["T_VARIABLE","$key",275],"]",["T_WHITESPACE"," ",275],"=",["T_WHITESPACE"," ",275],["T_VARIABLE","$value",275],";",["T_WHITESPACE","\n      ",275],["T_VARIABLE","$this",276],["T_OBJECT_OPERATOR","->",276],["T_STRING","updateFields",276],"[",["T_VARIABLE","$key",276],"]",["T_WHITESPACE"," ",276],"=",["T_WHITESPACE"," ",276],["T_VARIABLE","$value",276],";",["T_WHITESPACE","\n    ",276],"}",["T_WHITESPACE","\n    ",277],["T_VARIABLE","$this",278],["T_OBJECT_OPERATOR","->",278],["T_STRING","needsUpdate",278],["T_WHITESPACE"," ",278],"=",["T_WHITESPACE"," ",278],["T_STRING","TRUE",278],";",["T_WHITESPACE","\n    ",278],["T_RETURN","return",279],["T_WHITESPACE"," ",279],["T_VARIABLE","$this",279],";",["T_WHITESPACE","\n  ",279],"}",["T_WHITESPACE","\n\n  ",280],["T_DOC_COMMENT","\/**\n   * Sets the key fields to be used as conditions for this query.\n   *\n   * This method should only be called once. It may be called either\n   * with a single associative array or two indexed arrays. If called\n   * with an associative array, the keys are taken to be the fields\n   * and the values are taken to be the corresponding values to set.\n   * If called with two arrays, the first array is taken as the fields\n   * and the second array is taken as the corresponding values.\n   *\n   * The fields are copied to the condition of the query and the INSERT part.\n   * If no other method is called, the UPDATE will become a no-op.\n   *\n   * @param $fields\n   *   An array of fields to set, or an associative array of fields and values.\n   * @param $values\n   *   An array of values to set into the database. The values must be\n   *   specified in the same order as the $fields array.\n   *\n   * @return $this\n   *\/",282],["T_WHITESPACE","\n  ",302],["T_PUBLIC","public",303],["T_WHITESPACE"," ",303],["T_FUNCTION","function",303],["T_WHITESPACE"," ",303],["T_STRING","keys",303],"(",["T_ARRAY","array",303],["T_WHITESPACE"," ",303],["T_VARIABLE","$fields",303],",",["T_WHITESPACE"," ",303],["T_ARRAY","array",303],["T_WHITESPACE"," ",303],["T_VARIABLE","$values",303],["T_WHITESPACE"," ",303],"=",["T_WHITESPACE"," ",303],["T_ARRAY","array",303],"(",")",")",["T_WHITESPACE"," ",303],"{",["T_WHITESPACE","\n    ",303],["T_IF","if",304],["T_WHITESPACE"," ",304],"(",["T_VARIABLE","$values",304],")",["T_WHITESPACE"," ",304],"{",["T_WHITESPACE","\n      ",304],["T_VARIABLE","$fields",305],["T_WHITESPACE"," ",305],"=",["T_WHITESPACE"," ",305],["T_STRING","array_combine",305],"(",["T_VARIABLE","$fields",305],",",["T_WHITESPACE"," ",305],["T_VARIABLE","$values",305],")",";",["T_WHITESPACE","\n    ",305],"}",["T_WHITESPACE","\n    ",306],["T_FOREACH","foreach",307],["T_WHITESPACE"," ",307],"(",["T_VARIABLE","$fields",307],["T_WHITESPACE"," ",307],["T_AS","as",307],["T_WHITESPACE"," ",307],["T_VARIABLE","$key",307],["T_WHITESPACE"," ",307],["T_DOUBLE_ARROW","=>",307],["T_WHITESPACE"," ",307],["T_VARIABLE","$value",307],")",["T_WHITESPACE"," ",307],"{",["T_WHITESPACE","\n      ",307],["T_VARIABLE","$this",308],["T_OBJECT_OPERATOR","->",308],["T_STRING","insertFields",308],"[",["T_VARIABLE","$key",308],"]",["T_WHITESPACE"," ",308],"=",["T_WHITESPACE"," ",308],["T_VARIABLE","$value",308],";",["T_WHITESPACE","\n      ",308],["T_VARIABLE","$this",309],["T_OBJECT_OPERATOR","->",309],["T_STRING","condition",309],"(",["T_VARIABLE","$key",309],",",["T_WHITESPACE"," ",309],["T_VARIABLE","$value",309],")",";",["T_WHITESPACE","\n    ",309],"}",["T_WHITESPACE","\n    ",310],["T_RETURN","return",311],["T_WHITESPACE"," ",311],["T_VARIABLE","$this",311],";",["T_WHITESPACE","\n  ",311],"}",["T_WHITESPACE","\n\n  ",312],["T_DOC_COMMENT","\/**\n   * Sets a single key field to be used as condition for this query.\n   *\n   * Same as \\Drupal\\Core\\Database\\Query\\Merge::keys() but offering a signature\n   * that is more natural for the case of a single key.\n   *\n   * @param string $field\n   *   The name of the field to set.\n   * @param mixed $value\n   *   The value to set into the database.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Database\\Query\\Merge::keys()\n   *\/",314],["T_WHITESPACE","\n  ",328],["T_PUBLIC","public",329],["T_WHITESPACE"," ",329],["T_FUNCTION","function",329],["T_WHITESPACE"," ",329],["T_STRING","key",329],"(",["T_VARIABLE","$field",329],",",["T_WHITESPACE"," ",329],["T_VARIABLE","$value",329],["T_WHITESPACE"," ",329],"=",["T_WHITESPACE"," ",329],["T_STRING","NULL",329],")",["T_WHITESPACE"," ",329],"{",["T_WHITESPACE","\n    ",329],["T_COMMENT","\/\/ @todo D9: Remove this backwards-compatibility shim.\n",330],["T_WHITESPACE","    ",331],["T_IF","if",331],["T_WHITESPACE"," ",331],"(",["T_STRING","is_array",331],"(",["T_VARIABLE","$field",331],")",")",["T_WHITESPACE"," ",331],"{",["T_WHITESPACE","\n      ",331],["T_VARIABLE","$this",332],["T_OBJECT_OPERATOR","->",332],["T_STRING","keys",332],"(",["T_VARIABLE","$field",332],",",["T_WHITESPACE"," ",332],["T_ISSET","isset",332],"(",["T_VARIABLE","$value",332],")",["T_WHITESPACE"," ",332],"?",["T_WHITESPACE"," ",332],["T_VARIABLE","$value",332],["T_WHITESPACE"," ",332],":",["T_WHITESPACE"," ",332],["T_ARRAY","array",332],"(",")",")",";",["T_WHITESPACE","\n    ",332],"}",["T_WHITESPACE","\n    ",333],["T_ELSE","else",334],["T_WHITESPACE"," ",334],"{",["T_WHITESPACE","\n      ",334],["T_VARIABLE","$this",335],["T_OBJECT_OPERATOR","->",335],["T_STRING","keys",335],"(",["T_ARRAY","array",335],"(",["T_VARIABLE","$field",335],["T_WHITESPACE"," ",335],["T_DOUBLE_ARROW","=>",335],["T_WHITESPACE"," ",335],["T_VARIABLE","$value",335],")",")",";",["T_WHITESPACE","\n    ",335],"}",["T_WHITESPACE","\n    ",336],["T_RETURN","return",337],["T_WHITESPACE"," ",337],["T_VARIABLE","$this",337],";",["T_WHITESPACE","\n  ",337],"}",["T_WHITESPACE","\n\n  ",338],["T_DOC_COMMENT","\/**\n   * Implements PHP magic __toString method to convert the query to a string.\n   *\n   * In the degenerate case, there is no string-able query as this operation\n   * is potentially two queries.\n   *\n   * @return string\n   *   The prepared query statement.\n   *\/",340],["T_WHITESPACE","\n  ",348],["T_PUBLIC","public",349],["T_WHITESPACE"," ",349],["T_FUNCTION","function",349],["T_WHITESPACE"," ",349],["T_STRING","__toString",349],"(",")",["T_WHITESPACE"," ",349],"{",["T_WHITESPACE","\n  ",349],"}",["T_WHITESPACE","\n\n  ",350],["T_PUBLIC","public",352],["T_WHITESPACE"," ",352],["T_FUNCTION","function",352],["T_WHITESPACE"," ",352],["T_STRING","execute",352],"(",")",["T_WHITESPACE"," ",352],"{",["T_WHITESPACE","\n    ",352],["T_COMMENT","\/\/ Default options for merge queries.\n",353],["T_WHITESPACE","    ",354],["T_VARIABLE","$this",354],["T_OBJECT_OPERATOR","->",354],["T_STRING","queryOptions",354],["T_WHITESPACE"," ",354],["T_PLUS_EQUAL","+=",354],["T_WHITESPACE"," ",354],["T_ARRAY","array",354],"(",["T_WHITESPACE","\n      ",354],["T_CONSTANT_ENCAPSED_STRING","'throw_exception'",355],["T_WHITESPACE"," ",355],["T_DOUBLE_ARROW","=>",355],["T_WHITESPACE"," ",355],["T_STRING","TRUE",355],",",["T_WHITESPACE","\n    ",355],")",";",["T_WHITESPACE","\n\n    ",356],["T_TRY","try",358],["T_WHITESPACE"," ",358],"{",["T_WHITESPACE","\n      ",358],["T_IF","if",359],["T_WHITESPACE"," ",359],"(","!",["T_STRING","count",359],"(",["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","condition",359],")",")",["T_WHITESPACE"," ",359],"{",["T_WHITESPACE","\n        ",359],["T_THROW","throw",360],["T_WHITESPACE"," ",360],["T_NEW","new",360],["T_WHITESPACE"," ",360],["T_STRING","InvalidMergeQueryException",360],"(",["T_STRING","t",360],"(",["T_CONSTANT_ENCAPSED_STRING","'Invalid merge query: no conditions'",360],")",")",";",["T_WHITESPACE","\n      ",360],"}",["T_WHITESPACE","\n      ",361],["T_VARIABLE","$select",362],["T_WHITESPACE"," ",362],"=",["T_WHITESPACE"," ",362],["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","connection",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","select",362],"(",["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","conditionTable",362],")",["T_WHITESPACE","\n        ",362],["T_OBJECT_OPERATOR","->",363],["T_STRING","condition",363],"(",["T_VARIABLE","$this",363],["T_OBJECT_OPERATOR","->",363],["T_STRING","condition",363],")",";",["T_WHITESPACE","\n      ",363],["T_VARIABLE","$select",364],["T_OBJECT_OPERATOR","->",364],["T_STRING","addExpression",364],"(",["T_CONSTANT_ENCAPSED_STRING","'1'",364],")",";",["T_WHITESPACE","\n      ",364],["T_IF","if",365],["T_WHITESPACE"," ",365],"(","!",["T_VARIABLE","$select",365],["T_OBJECT_OPERATOR","->",365],["T_STRING","execute",365],"(",")",["T_OBJECT_OPERATOR","->",365],["T_STRING","fetchField",365],"(",")",")",["T_WHITESPACE"," ",365],"{",["T_WHITESPACE","\n        ",365],["T_TRY","try",366],["T_WHITESPACE"," ",366],"{",["T_WHITESPACE","\n          ",366],["T_VARIABLE","$insert",367],["T_WHITESPACE"," ",367],"=",["T_WHITESPACE"," ",367],["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","connection",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","insert",367],"(",["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","table",367],")",["T_OBJECT_OPERATOR","->",367],["T_STRING","fields",367],"(",["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","insertFields",367],")",";",["T_WHITESPACE","\n          ",367],["T_IF","if",368],["T_WHITESPACE"," ",368],"(",["T_VARIABLE","$this",368],["T_OBJECT_OPERATOR","->",368],["T_STRING","defaultFields",368],")",["T_WHITESPACE"," ",368],"{",["T_WHITESPACE","\n            ",368],["T_VARIABLE","$insert",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","useDefaults",369],"(",["T_VARIABLE","$this",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","defaultFields",369],")",";",["T_WHITESPACE","\n          ",369],"}",["T_WHITESPACE","\n          ",370],["T_VARIABLE","$insert",371],["T_OBJECT_OPERATOR","->",371],["T_STRING","execute",371],"(",")",";",["T_WHITESPACE","\n          ",371],["T_RETURN","return",372],["T_WHITESPACE"," ",372],["T_STRING","self",372],["T_DOUBLE_COLON","::",372],["T_STRING","STATUS_INSERT",372],";",["T_WHITESPACE","\n        ",372],"}",["T_WHITESPACE","\n        ",373],["T_CATCH","catch",374],["T_WHITESPACE"," ",374],"(",["T_STRING","IntegrityConstraintViolationException",374],["T_WHITESPACE"," ",374],["T_VARIABLE","$e",374],")",["T_WHITESPACE"," ",374],"{",["T_WHITESPACE","\n          ",374],["T_COMMENT","\/\/ The insert query failed, maybe it's because a racing insert query\n",375],["T_WHITESPACE","          ",376],["T_COMMENT","\/\/ beat us in inserting the same row. Retry the select query, if it\n",376],["T_WHITESPACE","          ",377],["T_COMMENT","\/\/ returns a row, ignore the error and continue with the update\n",377],["T_WHITESPACE","          ",378],["T_COMMENT","\/\/ query below.\n",378],["T_WHITESPACE","          ",379],["T_IF","if",379],["T_WHITESPACE"," ",379],"(","!",["T_VARIABLE","$select",379],["T_OBJECT_OPERATOR","->",379],["T_STRING","execute",379],"(",")",["T_OBJECT_OPERATOR","->",379],["T_STRING","fetchField",379],"(",")",")",["T_WHITESPACE"," ",379],"{",["T_WHITESPACE","\n            ",379],["T_THROW","throw",380],["T_WHITESPACE"," ",380],["T_VARIABLE","$e",380],";",["T_WHITESPACE","\n          ",380],"}",["T_WHITESPACE","\n        ",381],"}",["T_WHITESPACE","\n      ",382],"}",["T_WHITESPACE","\n      ",383],["T_IF","if",384],["T_WHITESPACE"," ",384],"(",["T_VARIABLE","$this",384],["T_OBJECT_OPERATOR","->",384],["T_STRING","needsUpdate",384],")",["T_WHITESPACE"," ",384],"{",["T_WHITESPACE","\n        ",384],["T_VARIABLE","$update",385],["T_WHITESPACE"," ",385],"=",["T_WHITESPACE"," ",385],["T_VARIABLE","$this",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","connection",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","update",385],"(",["T_VARIABLE","$this",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","table",385],")",["T_WHITESPACE","\n          ",385],["T_OBJECT_OPERATOR","->",386],["T_STRING","fields",386],"(",["T_VARIABLE","$this",386],["T_OBJECT_OPERATOR","->",386],["T_STRING","updateFields",386],")",["T_WHITESPACE","\n          ",386],["T_OBJECT_OPERATOR","->",387],["T_STRING","condition",387],"(",["T_VARIABLE","$this",387],["T_OBJECT_OPERATOR","->",387],["T_STRING","condition",387],")",";",["T_WHITESPACE","\n        ",387],["T_IF","if",388],["T_WHITESPACE"," ",388],"(",["T_VARIABLE","$this",388],["T_OBJECT_OPERATOR","->",388],["T_STRING","expressionFields",388],")",["T_WHITESPACE"," ",388],"{",["T_WHITESPACE","\n          ",388],["T_FOREACH","foreach",389],["T_WHITESPACE"," ",389],"(",["T_VARIABLE","$this",389],["T_OBJECT_OPERATOR","->",389],["T_STRING","expressionFields",389],["T_WHITESPACE"," ",389],["T_AS","as",389],["T_WHITESPACE"," ",389],["T_VARIABLE","$field",389],["T_WHITESPACE"," ",389],["T_DOUBLE_ARROW","=>",389],["T_WHITESPACE"," ",389],["T_VARIABLE","$data",389],")",["T_WHITESPACE"," ",389],"{",["T_WHITESPACE","\n            ",389],["T_VARIABLE","$update",390],["T_OBJECT_OPERATOR","->",390],["T_STRING","expression",390],"(",["T_VARIABLE","$field",390],",",["T_WHITESPACE"," ",390],["T_VARIABLE","$data",390],"[",["T_CONSTANT_ENCAPSED_STRING","'expression'",390],"]",",",["T_WHITESPACE"," ",390],["T_VARIABLE","$data",390],"[",["T_CONSTANT_ENCAPSED_STRING","'arguments'",390],"]",")",";",["T_WHITESPACE","\n          ",390],"}",["T_WHITESPACE","\n        ",391],"}",["T_WHITESPACE","\n        ",392],["T_VARIABLE","$update",393],["T_OBJECT_OPERATOR","->",393],["T_STRING","execute",393],"(",")",";",["T_WHITESPACE","\n        ",393],["T_RETURN","return",394],["T_WHITESPACE"," ",394],["T_STRING","self",394],["T_DOUBLE_COLON","::",394],["T_STRING","STATUS_UPDATE",394],";",["T_WHITESPACE","\n      ",394],"}",["T_WHITESPACE","\n    ",395],"}",["T_WHITESPACE","\n    ",396],["T_CATCH","catch",397],["T_WHITESPACE"," ",397],"(",["T_NS_SEPARATOR","\\",397],["T_STRING","Exception",397],["T_WHITESPACE"," ",397],["T_VARIABLE","$e",397],")",["T_WHITESPACE"," ",397],"{",["T_WHITESPACE","\n      ",397],["T_IF","if",398],["T_WHITESPACE"," ",398],"(",["T_VARIABLE","$this",398],["T_OBJECT_OPERATOR","->",398],["T_STRING","queryOptions",398],"[",["T_CONSTANT_ENCAPSED_STRING","'throw_exception'",398],"]",")",["T_WHITESPACE"," ",398],"{",["T_WHITESPACE","\n        ",398],["T_THROW","throw",399],["T_WHITESPACE"," ",399],["T_VARIABLE","$e",399],";",["T_WHITESPACE","\n      ",399],"}",["T_WHITESPACE","\n      ",400],["T_ELSE","else",401],["T_WHITESPACE"," ",401],"{",["T_WHITESPACE","\n        ",401],["T_RETURN","return",402],["T_WHITESPACE"," ",402],["T_STRING","NULL",402],";",["T_WHITESPACE","\n      ",402],"}",["T_WHITESPACE","\n    ",403],"}",["T_WHITESPACE","\n  ",404],"}",["T_WHITESPACE","\n\n",405],"}",["T_WHITESPACE","\n",407]]