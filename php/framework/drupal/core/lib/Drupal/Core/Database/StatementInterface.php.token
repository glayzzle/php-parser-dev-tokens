[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Represents a prepared statement.\n *\n * Child implementations should either extend PDOStatement:\n * @code\n * class Drupal\\Core\\Database\\Driver\\oracle\\Statement extends PDOStatement implements Drupal\\Core\\Database\\StatementInterface {}\n * @endcode\n * or define their own class. If defining their own class, they will also have\n * to implement either the Iterator or IteratorAggregate interface before\n * Drupal\\Core\\Database\\StatementInterface:\n * @code\n * class Drupal\\Core\\Database\\Driver\\oracle\\Statement implements Iterator, Drupal\\Core\\Database\\StatementInterface {}\n * @endcode\n *\n * @ingroup database\n *\/",5],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","StatementInterface",21],["T_WHITESPACE"," ",21],["T_EXTENDS","extends",21],["T_WHITESPACE"," ",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Traversable",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Constructs a new PDOStatement object.\n   *\n   * The PDO manual does not document this constructor, but when overriding the\n   * PDOStatement class with a custom without this constructor, PDO will throw\n   * the internal exception\/warning:\n   *\n   * \"PDO::query(): SQLSTATE[HY000]: General error: user-supplied statement does\n   *  not accept constructor arguments\"\n   *\n   * PDO enforces that the access type of this constructor must be protected,\n   * and lastly, it also enforces that a custom PDOStatement interface (like\n   * this) omits the constructor (declaring it results in fatal errors\n   * complaining about \"the access type must not be public\" if it is public, and\n   * \"the access type must be omitted\" if it is protected; i.e., conflicting\n   * statements). The access type has to be protected.\n   *\/",23],["T_WHITESPACE","\n  ",39],["T_COMMENT","\/\/protected function __construct(Connection $dbh);\n",40],["T_WHITESPACE","\n  ",41],["T_DOC_COMMENT","\/**\n   * Executes a prepared statement\n   *\n   * @param $args\n   *   An array of values with as many elements as there are bound parameters in\n   *   the SQL statement being executed.\n   * @param $options\n   *   An array of options for this query.\n   *\n   * @return\n   *   TRUE on success, or FALSE on failure.\n   *\/",42],["T_WHITESPACE","\n  ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","execute",54],"(",["T_VARIABLE","$args",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],["T_ARRAY","array",54],"(",")",",",["T_WHITESPACE"," ",54],["T_VARIABLE","$options",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],["T_ARRAY","array",54],"(",")",")",";",["T_WHITESPACE","\n\n  ",54],["T_DOC_COMMENT","\/**\n   * Gets the query string of this statement.\n   *\n   * @return\n   *   The query string, in its form with placeholders.\n   *\/",56],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getQueryString",62],"(",")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Returns the number of rows affected by the last SQL statement.\n   *\n   * @return\n   *   The number of rows affected by the last DELETE, INSERT, or UPDATE\n   *   statement executed or throws \\Drupal\\Core\\Database\\RowCountException\n   *   if the last executed statement was SELECT.\n   *\n   * @throws \\Drupal\\Core\\Database\\RowCountException\n   *\/",64],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","rowCount",74],"(",")",";",["T_WHITESPACE","\n\n  ",74],["T_DOC_COMMENT","\/**\n   * Sets the default fetch mode for this statement.\n   *\n   * See http:\/\/php.net\/manual\/pdo.constants.php for the definition of the\n   * constants used.\n   *\n   * @param $mode\n   *   One of the PDO::FETCH_* constants.\n   * @param $a1\n   *   An option depending of the fetch mode specified by $mode:\n   *   - for PDO::FETCH_COLUMN, the index of the column to fetch\n   *   - for PDO::FETCH_CLASS, the name of the class to create\n   *   - for PDO::FETCH_INTO, the object to add the data to\n   * @param $a2\n   *   If $mode is PDO::FETCH_CLASS, the optional arguments to pass to the\n   *   constructor.\n   *\/",76],["T_WHITESPACE","\n  ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","setFetchMode",93],"(",["T_VARIABLE","$mode",93],",",["T_WHITESPACE"," ",93],["T_VARIABLE","$a1",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_STRING","NULL",93],",",["T_WHITESPACE"," ",93],["T_VARIABLE","$a2",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_ARRAY","array",93],"(",")",")",";",["T_WHITESPACE","\n\n  ",93],["T_DOC_COMMENT","\/**\n   * Fetches the next row from a result set.\n   *\n   * See http:\/\/php.net\/manual\/pdo.constants.php for the definition of the\n   * constants used.\n   *\n   * @param $mode\n   *   One of the PDO::FETCH_* constants.\n   *   Default to what was specified by setFetchMode().\n   * @param $cursor_orientation\n   *   Not implemented in all database drivers, don't use.\n   * @param $cursor_offset\n   *   Not implemented in all database drivers, don't use.\n   *\n   * @return\n   *   A result, formatted according to $mode.\n   *\/",95],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","fetch",112],"(",["T_VARIABLE","$mode",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_STRING","NULL",112],",",["T_WHITESPACE"," ",112],["T_VARIABLE","$cursor_orientation",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_STRING","NULL",112],",",["T_WHITESPACE"," ",112],["T_VARIABLE","$cursor_offset",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_STRING","NULL",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Returns a single field from the next record of a result set.\n   *\n   * @param $index\n   *   The numeric index of the field to return. Defaults to the first field.\n   *\n   * @return\n   *   A single field from the next record, or FALSE if there is no next record.\n   *\/",114],["T_WHITESPACE","\n  ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","fetchField",123],"(",["T_VARIABLE","$index",123],["T_WHITESPACE"," ",123],"=",["T_WHITESPACE"," ",123],["T_LNUMBER","0",123],")",";",["T_WHITESPACE","\n\n  ",123],["T_DOC_COMMENT","\/**\n   * Fetches the next row and returns it as an object.\n   *\n   * The object will be of the class specified by StatementInterface::setFetchMode()\n   * or stdClass if not specified.\n   *\/",125],["T_WHITESPACE","\n  ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","fetchObject",131],"(",")",";",["T_WHITESPACE","\n\n  ",131],["T_DOC_COMMENT","\/**\n   * Fetches the next row and returns it as an associative array.\n   *\n   * This method corresponds to PDOStatement::fetchObject(), but for associative\n   * arrays. For some reason PDOStatement does not have a corresponding array\n   * helper method, so one is added.\n   *\n   * @return\n   *   An associative array, or FALSE if there is no next row.\n   *\/",133],["T_WHITESPACE","\n  ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","fetchAssoc",143],"(",")",";",["T_WHITESPACE","\n\n  ",143],["T_DOC_COMMENT","\/**\n   * Returns an array containing all of the result set rows.\n   *\n   * @param $mode\n   *   One of the PDO::FETCH_* constants.\n   * @param $column_index\n   *   If $mode is PDO::FETCH_COLUMN, the index of the column to fetch.\n   * @param $constructor_arguments\n   *   If $mode is PDO::FETCH_CLASS, the arguments to pass to the constructor.\n   *\n   * @return\n   *   An array of results.\n   *\/",145],["T_WHITESPACE","\n  ",157],["T_FUNCTION","function",158],["T_WHITESPACE"," ",158],["T_STRING","fetchAll",158],"(",["T_VARIABLE","$mode",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_STRING","NULL",158],",",["T_WHITESPACE"," ",158],["T_VARIABLE","$column_index",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_STRING","NULL",158],",",["T_WHITESPACE"," ",158],["T_VARIABLE","$constructor_arguments",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_STRING","NULL",158],")",";",["T_WHITESPACE","\n\n  ",158],["T_DOC_COMMENT","\/**\n   * Returns an entire single column of a result set as an indexed array.\n   *\n   * Note that this method will run the result set to the end.\n   *\n   * @param $index\n   *   The index of the column number to fetch.\n   *\n   * @return\n   *   An indexed array, or an empty array if there is no result set.\n   *\/",160],["T_WHITESPACE","\n  ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","fetchCol",171],"(",["T_VARIABLE","$index",171],["T_WHITESPACE"," ",171],"=",["T_WHITESPACE"," ",171],["T_LNUMBER","0",171],")",";",["T_WHITESPACE","\n\n  ",171],["T_DOC_COMMENT","\/**\n   * Returns the entire result set as a single associative array.\n   *\n   * This method is only useful for two-column result sets. It will return an\n   * associative array where the key is one column from the result set and the\n   * value is another field. In most cases, the default of the first two columns\n   * is appropriate.\n   *\n   * Note that this method will run the result set to the end.\n   *\n   * @param $key_index\n   *   The numeric index of the field to use as the array key.\n   * @param $value_index\n   *   The numeric index of the field to use as the array value.\n   *\n   * @return\n   *   An associative array, or an empty array if there is no result set.\n   *\/",173],["T_WHITESPACE","\n  ",190],["T_PUBLIC","public",191],["T_WHITESPACE"," ",191],["T_FUNCTION","function",191],["T_WHITESPACE"," ",191],["T_STRING","fetchAllKeyed",191],"(",["T_VARIABLE","$key_index",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_LNUMBER","0",191],",",["T_WHITESPACE"," ",191],["T_VARIABLE","$value_index",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_LNUMBER","1",191],")",";",["T_WHITESPACE","\n\n  ",191],["T_DOC_COMMENT","\/**\n   * Returns the result set as an associative array keyed by the given field.\n   *\n   * If the given key appears multiple times, later records will overwrite\n   * earlier ones.\n   *\n   * @param $key\n   *   The name of the field on which to index the array.\n   * @param $fetch\n   *   The fetchmode to use. If set to PDO::FETCH_ASSOC, PDO::FETCH_NUM, or\n   *   PDO::FETCH_BOTH the returned value with be an array of arrays. For any\n   *   other value it will be an array of objects. By default, the fetch mode\n   *   set for the query will be used.\n   *\n   * @return\n   *   An associative array, or an empty array if there is no result set.\n   *\/",193],["T_WHITESPACE","\n  ",209],["T_PUBLIC","public",210],["T_WHITESPACE"," ",210],["T_FUNCTION","function",210],["T_WHITESPACE"," ",210],["T_STRING","fetchAllAssoc",210],"(",["T_VARIABLE","$key",210],",",["T_WHITESPACE"," ",210],["T_VARIABLE","$fetch",210],["T_WHITESPACE"," ",210],"=",["T_WHITESPACE"," ",210],["T_STRING","NULL",210],")",";",["T_WHITESPACE","\n\n",210],"}",["T_WHITESPACE","\n",212]]