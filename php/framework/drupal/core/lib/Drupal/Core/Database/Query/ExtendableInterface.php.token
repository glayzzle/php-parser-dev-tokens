[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for extendable query objects.\n *\n * \"Extenders\" follow the \"Decorator\" OOP design pattern.  That is, they wrap\n * and \"decorate\" another object. In our case, they implement the same\n * interface as select queries and wrap a select query, to which they delegate\n * almost all operations. Subclasses of this class may implement additional\n * methods or override existing methods as appropriate. Extenders may also wrap\n * other extender objects, allowing for arbitrarily complex \"enhanced\" queries.\n *\/",5],["T_WHITESPACE","\n",14],["T_INTERFACE","interface",15],["T_WHITESPACE"," ",15],["T_STRING","ExtendableInterface",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * Enhance this object by wrapping it in an extender object.\n   *\n   * @param $extender_name\n   *   The fully-qualified name of the extender class, without the leading '\\'\n   *   (for example, Drupal\\my_module\\myExtenderClass). The extender name will\n   *   be checked against the current database connection to allow\n   *   driver-specific subclasses as well, using the same logic as the query\n   *   objects themselves.\n   *\n   * @return \\Drupal\\Core\\Database\\Query\\ExtendableInterface\n   *   The extender object, which now contains a reference to this object.\n   *\/",17],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","extend",30],"(",["T_VARIABLE","$extender_name",30],")",";",["T_WHITESPACE","\n\n",30],"}",["T_WHITESPACE","\n",32]]