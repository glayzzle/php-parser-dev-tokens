[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Annotation",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Annotation",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Declare a worker class for processing a queue item.\n *\n * Worker plugins are used by some queues for processing the individual items\n * in the queue. In that case, the ID of the worker plugin needs to match the\n * machine name of a queue, so that you can retrieve the queue back end by\n * calling \\Drupal\\Core\\Queue\\QueueFactory::get($plugin_id).\n *\n * \\Drupal\\Core\\Cron::processQueues() processes queues that use workers; they\n * can also be processed outside of the cron process.\n *\n * Some queues do not use worker plugins: you can create queues, add items to\n * them, claim them, etc. without using a QueueWorker plugin. However, you will\n * need to take care of processing the items in the queue in that case. You can\n * look at \\Drupal\\Core\\Cron::processQueues() for an example of how to process\n * a queue that uses workers, and adapt it to your queue.\n *\n * Plugin Namespace: Plugin\\QueueWorker\n *\n * For a working example, see\n * \\Drupal\\aggregator\\Plugin\\QueueWorker\\AggregatorRefresh.\n *\n * @see \\Drupal\\Core\\Queue\\QueueWorkerInterface\n * @see \\Drupal\\Core\\Queue\\QueueWorkerBase\n * @see \\Drupal\\Core\\Queue\\QueueWorkerManager\n * @see plugin_api\n *\n * @Annotation\n *\/",7],["T_WHITESPACE","\n",35],["T_CLASS","class",36],["T_WHITESPACE"," ",36],["T_STRING","QueueWorker",36],["T_WHITESPACE"," ",36],["T_EXTENDS","extends",36],["T_WHITESPACE"," ",36],["T_STRING","Plugin",36],["T_WHITESPACE"," ",36],"{",["T_WHITESPACE","\n\n  ",36],["T_DOC_COMMENT","\/**\n   * The plugin ID.\n   *\n   * @var string\n   *\/",38],["T_WHITESPACE","\n  ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_VARIABLE","$id",43],";",["T_WHITESPACE","\n\n  ",43],["T_DOC_COMMENT","\/**\n   * The human-readable title of the plugin.\n   *\n   * @ingroup plugin_translatable\n   *\n   * @var \\Drupal\\Core\\Annotation\\Translation\n   *\/",45],["T_WHITESPACE","\n  ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_VARIABLE","$title",52],";",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * An associative array containing the optional key:\n   *   - time: (optional) How much time Drupal cron should spend on calling\n   *     this worker in seconds. Defaults to 15.\n   *\n   * @var array (optional)\n   *\/",54],["T_WHITESPACE","\n  ",60],["T_PUBLIC","public",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$cron",61],";",["T_WHITESPACE","\n\n",61],"}",["T_WHITESPACE","\n",63]]