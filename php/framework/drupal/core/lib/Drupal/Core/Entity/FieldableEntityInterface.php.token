[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for entities having fields.\n *\n * This interface builds upon the general interfaces provided by the typed data\n * API, while extending them with entity-specific additions. I.e., fieldable\n * entities implement the ComplexDataInterface among others, thus it is complex\n * data containing fields as its data properties. The contained fields have to\n * implement \\Drupal\\Core\\Field\\FieldItemListInterface, which builds upon typed\n * data interfaces as well.\n *\n * When implementing this interface which extends Traversable, make sure to list\n * IteratorAggregate or Iterator before this interface in the implements clause.\n *\n * @see \\Drupal\\Core\\TypedData\\TypedDataManager\n * @see \\Drupal\\Core\\Field\\FieldItemListInterface\n *\n * @ingroup entity_api\n *\/",5],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","FieldableEntityInterface",23],["T_WHITESPACE"," ",23],["T_EXTENDS","extends",23],["T_WHITESPACE"," ",23],["T_STRING","EntityInterface",23],["T_WHITESPACE"," ",23],"{",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Provides base field definitions for an entity type.\n   *\n   * Implementations typically use the class\n   * \\Drupal\\Core\\Field\\BaseFieldDefinition for creating the field definitions;\n   * for example a 'name' field could be defined as the following:\n   * @code\n   * $fields['name'] = BaseFieldDefinition::create('string')\n   *   ->setLabel(t('Name'));\n   * @endcode\n   *\n   * By definition, base fields are fields that exist for every bundle. To\n   * provide definitions for fields that should only exist on some bundles, use\n   * \\Drupal\\Core\\Entity\\FieldableEntityInterface::bundleFieldDefinitions().\n   *\n   * The definitions returned by this function can be overridden for all\n   * bundles by hook_entity_base_field_info_alter() or overridden on a\n   * per-bundle basis via 'base_field_override' configuration entities.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type\n   *   The entity type definition. Useful when a single class is used for multiple,\n   *   possibly dynamic entity types.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]\n   *   An array of base field definitions for the entity type, keyed by field\n   *   name.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityManagerInterface::getFieldDefinitions()\n   * @see \\Drupal\\Core\\Entity\\FieldableEntityInterface::bundleFieldDefinitions()\n   *\/",25],["T_WHITESPACE","\n  ",54],["T_PUBLIC","public",55],["T_WHITESPACE"," ",55],["T_STATIC","static",55],["T_WHITESPACE"," ",55],["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],["T_STRING","baseFieldDefinitions",55],"(",["T_STRING","EntityTypeInterface",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$entity_type",55],")",";",["T_WHITESPACE","\n\n  ",55],["T_DOC_COMMENT","\/**\n   * Provides field definitions for a specific bundle.\n   *\n   * This function can return definitions both for bundle fields (fields that\n   * are not defined in $base_field_definitions, and therefore might not exist\n   * on some bundles) as well as bundle-specific overrides of base fields\n   * (fields that are defined in $base_field_definitions, and therefore exist\n   * for all bundles). However, bundle-specific base field overrides can also\n   * be provided by 'base_field_override' configuration entities, and that is\n   * the recommended approach except in cases where an entity type needs to\n   * provide a bundle-specific base field override that is decoupled from\n   * configuration. Note that for most entity types, the bundles themselves are\n   * derived from configuration (e.g., 'node' bundles are managed via\n   * 'node_type' configuration entities), so decoupling bundle-specific base\n   * field overrides from configuration only makes sense for entity types that\n   * also decouple their bundles from configuration. In cases where both this\n   * function returns a bundle-specific override of a base field and a\n   * 'base_field_override' configuration entity exists, the latter takes\n   * precedence.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type\n   *   The entity type definition. Useful when a single class is used for multiple,\n   *   possibly dynamic entity types.\n   * @param string $bundle\n   *   The bundle.\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface[] $base_field_definitions\n   *   The list of base field definitions.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]\n   *   An array of bundle field definitions, keyed by field name.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityManagerInterface::getFieldDefinitions()\n   * @see \\Drupal\\Core\\Entity\\FieldableEntityInterface::baseFieldDefinitions()\n   *\n   * @todo WARNING: This method will be changed in\n   *   https:\/\/www.drupal.org\/node\/2346347.\n   *\/",57],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_STATIC","static",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","bundleFieldDefinitions",94],"(",["T_STRING","EntityTypeInterface",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$entity_type",94],",",["T_WHITESPACE"," ",94],["T_VARIABLE","$bundle",94],",",["T_WHITESPACE"," ",94],["T_ARRAY","array",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$base_field_definitions",94],")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Determines whether the entity has a field with the given name.\n   *\n   * @param string $field_name\n   *   The field name.\n   *\n   * @return bool\n   *   TRUE if the entity has a field with the given name. FALSE otherwise.\n   *\/",96],["T_WHITESPACE","\n  ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","hasField",105],"(",["T_VARIABLE","$field_name",105],")",";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * Gets the definition of a contained field.\n   *\n   * @param string $name\n   *   The name of the field.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface|null\n   *   The definition of the field or null if the field does not exist.\n   *\/",107],["T_WHITESPACE","\n  ",115],["T_PUBLIC","public",116],["T_WHITESPACE"," ",116],["T_FUNCTION","function",116],["T_WHITESPACE"," ",116],["T_STRING","getFieldDefinition",116],"(",["T_VARIABLE","$name",116],")",";",["T_WHITESPACE","\n\n  ",116],["T_DOC_COMMENT","\/**\n   * Gets an array of field definitions of all contained fields.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]\n   *   An array of field definitions, keyed by field name.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityManagerInterface::getFieldDefinitions()\n   *\/",118],["T_WHITESPACE","\n  ",125],["T_PUBLIC","public",126],["T_WHITESPACE"," ",126],["T_FUNCTION","function",126],["T_WHITESPACE"," ",126],["T_STRING","getFieldDefinitions",126],"(",")",";",["T_WHITESPACE","\n\n  ",126],["T_DOC_COMMENT","\/**\n   * Gets an array of all field values.\n   *\n   * Gets an array of plain field values, including only non-computed values.\n   * Note that the structure varies by entity type and bundle.\n   *\n   * @return array\n   *   An array of field values, keyed by field name.\n   *\/",128],["T_WHITESPACE","\n  ",136],["T_PUBLIC","public",137],["T_WHITESPACE"," ",137],["T_FUNCTION","function",137],["T_WHITESPACE"," ",137],["T_STRING","toArray",137],"(",")",";",["T_WHITESPACE","\n\n  ",137],["T_DOC_COMMENT","\/**\n   * Gets a field item list.\n   *\n   * @param string $field_name\n   *   The name of the field to get; e.g., 'title' or 'name'.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldItemListInterface\n   *   The field item list, containing the field items.\n   *\n   * @throws \\InvalidArgumentException\n   *   If an invalid field name is given.\n   *\/",139],["T_WHITESPACE","\n  ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","get",151],"(",["T_VARIABLE","$field_name",151],")",";",["T_WHITESPACE","\n\n  ",151],["T_DOC_COMMENT","\/**\n   * Sets a field value.\n   *\n   * @param string $field_name\n   *   The name of the field to set; e.g., 'title' or 'name'.\n   * @param mixed $value\n   *   The value to set, or NULL to unset the field.\n   * @param bool $notify\n   *   (optional) Whether to notify the entity of the change. Defaults to\n   *   TRUE. If the update stems from the entity, set it to FALSE to avoid\n   *   being notified again.\n   *\n   * @return $this\n   *\n   * @throws \\InvalidArgumentException\n   *   If the specified field does not exist.\n   *\/",153],["T_WHITESPACE","\n  ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","set",170],"(",["T_VARIABLE","$field_name",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$value",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$notify",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","TRUE",170],")",";",["T_WHITESPACE","\n\n  ",170],["T_DOC_COMMENT","\/**\n   * Gets an array of all field item lists.\n   *\n   * @param bool $include_computed\n   *   If set to TRUE, computed fields are included. Defaults to TRUE.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldItemListInterface[]\n   *   An array of field item lists implementing, keyed by field name.\n   *\/",172],["T_WHITESPACE","\n  ",180],["T_PUBLIC","public",181],["T_WHITESPACE"," ",181],["T_FUNCTION","function",181],["T_WHITESPACE"," ",181],["T_STRING","getFields",181],"(",["T_VARIABLE","$include_computed",181],["T_WHITESPACE"," ",181],"=",["T_WHITESPACE"," ",181],["T_STRING","TRUE",181],")",";",["T_WHITESPACE","\n\n  ",181],["T_DOC_COMMENT","\/**\n   * Gets an array of field item lists for translatable fields.\n   *\n   * @param bool $include_computed\n   *   If set to TRUE, computed fields are included. Defaults to TRUE.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldItemListInterface[]\n   *   An array of field item lists implementing, keyed by field name.\n   *\/",183],["T_WHITESPACE","\n  ",191],["T_PUBLIC","public",192],["T_WHITESPACE"," ",192],["T_FUNCTION","function",192],["T_WHITESPACE"," ",192],["T_STRING","getTranslatableFields",192],"(",["T_VARIABLE","$include_computed",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_STRING","TRUE",192],")",";",["T_WHITESPACE","\n\n  ",192],["T_DOC_COMMENT","\/**\n   * Reacts to changes to a field.\n   *\n   * Note that this is invoked after any changes have been applied.\n   *\n   * @param string $field_name\n   *   The name of the field which is changed.\n   *\n   * @throws \\InvalidArgumentException\n   *   When trying to assign a value to the language field that matches an\n   *   existing translation.\n   * @throws \\LogicException\n   *   When trying to change:\n   *   - The language of a translation.\n   *   - The value of the flag identifying the default translation object.\n   *\/",194],["T_WHITESPACE","\n  ",209],["T_PUBLIC","public",210],["T_WHITESPACE"," ",210],["T_FUNCTION","function",210],["T_WHITESPACE"," ",210],["T_STRING","onChange",210],"(",["T_VARIABLE","$field_name",210],")",";",["T_WHITESPACE","\n\n  ",210],["T_DOC_COMMENT","\/**\n   * Validates the currently set values.\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityConstraintViolationListInterface\n   *   A list of constraint violations. If the list is empty, validation\n   *   succeeded.\n   *\/",212],["T_WHITESPACE","\n  ",218],["T_PUBLIC","public",219],["T_WHITESPACE"," ",219],["T_FUNCTION","function",219],["T_WHITESPACE"," ",219],["T_STRING","validate",219],"(",")",";",["T_WHITESPACE","\n\n  ",219],["T_DOC_COMMENT","\/**\n   * Checks whether entity validation is required before saving the entity.\n   *\n   * @return bool\n   *   TRUE if validation is required, FALSE if not.\n   *\/",221],["T_WHITESPACE","\n  ",226],["T_PUBLIC","public",227],["T_WHITESPACE"," ",227],["T_FUNCTION","function",227],["T_WHITESPACE"," ",227],["T_STRING","isValidationRequired",227],"(",")",";",["T_WHITESPACE","\n\n  ",227],["T_DOC_COMMENT","\/**\n   * Sets whether entity validation is required before saving the entity.\n   *\n   * @param bool $required\n   *   TRUE if validation is required, FALSE otherwise.\n   *\n   * @return $this\n   *\/",229],["T_WHITESPACE","\n  ",236],["T_PUBLIC","public",237],["T_WHITESPACE"," ",237],["T_FUNCTION","function",237],["T_WHITESPACE"," ",237],["T_STRING","setValidationRequired",237],"(",["T_VARIABLE","$required",237],")",";",["T_WHITESPACE","\n\n",237],"}",["T_WHITESPACE","\n",239]]