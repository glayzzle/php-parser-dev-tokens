[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Builds entity forms.\n *\n * This is like \\Drupal\\Core\\Form\\FormBuilderInterface but instead of looking\n * up the form class by class name, it looks up the form class based on the\n * entity type and operation.\n *\/",5],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","EntityFormBuilderInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Gets the built and processed entity form for the given entity.\n   *\n   * The form may also be retrieved from the cache if the form was built in a\n   * previous page load. The form is then passed on for processing, validation,\n   * and submission if there is proper input.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityInterface $entity\n   *   The entity to be created or edited.\n   * @param string $operation\n   *   (optional) The operation identifying the form variation to be returned.\n   *   Defaults to 'default'. This is typically used in routing:\n   *   @code\n   *   _entity_form: node.book_outline\n   *   @endcode\n   *   where \"book_outline\" is the value of $operation. The class name for the\n   *   form for each operation (edit, delete, etc.) can be found in the form\n   *   section of the handlers entity annotation. For example:\n   *   @code\n   *   handlers = {\n   *     \"form\" = {\n   *       \"delete\" = \"Drupal\\node\\Form\\NodeDeleteForm\",\n   *   @endcode\n   *   Alternatively, the form class can be set from hook_entity_type_build().\n   * @param array $form_state_additions\n   *   (optional) An associative array used to build the current state of the\n   *   form. Use this to pass additional information to the form, such as the\n   *   langcode. Defaults to an empty array.\n   *\n   * @code\n   *   $form_state_additions['langcode'] = $langcode;\n   *   $form = \\Drupal::service('entity.form_builder')->getForm($entity, 'default', $form_state_additions);\n   * @endcode\n   *\n   * @return array\n   *   The processed form for the given entity and operation.\n   *\n   * @see \\Drupal\\Core\\Form\\FormBuilderInterface::getForm()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::getFormClass()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::setFormClass()\n   * @see system_entity_type_build()\n   *\/",14],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","getForm",56],"(",["T_STRING","EntityInterface",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$entity",56],",",["T_WHITESPACE"," ",56],["T_VARIABLE","$operation",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_CONSTANT_ENCAPSED_STRING","'default'",56],",",["T_WHITESPACE"," ",56],["T_ARRAY","array",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$form_state_additions",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_ARRAY","array",56],"(",")",")",";",["T_WHITESPACE","\n\n",56],"}",["T_WHITESPACE","\n",58]]