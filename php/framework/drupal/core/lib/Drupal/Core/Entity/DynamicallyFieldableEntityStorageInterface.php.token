[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Field",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FieldDefinitionInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Field",6],["T_NS_SEPARATOR","\\",6],["T_STRING","FieldDefinitionListenerInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Field",7],["T_NS_SEPARATOR","\\",7],["T_STRING","FieldStorageDefinitionInterface",7],";",["T_WHITESPACE","\n",7],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Core",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Field",8],["T_NS_SEPARATOR","\\",8],["T_STRING","FieldStorageDefinitionListenerInterface",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * A storage that supports entity types with dynamic field definitions.\n *\n * A storage that implements this interface can react to the entity type's field\n * definitions changing, due to modules being installed or uninstalled, or via\n * field UI, or via code changes to the entity class.\n *\n * For example, configurable fields defined and exposed by field.module.\n *\/",10],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","DynamicallyFieldableEntityStorageInterface",19],["T_WHITESPACE"," ",19],["T_EXTENDS","extends",19],["T_WHITESPACE"," ",19],["T_STRING","FieldableEntityStorageInterface",19],",",["T_WHITESPACE"," ",19],["T_STRING","FieldStorageDefinitionListenerInterface",19],",",["T_WHITESPACE"," ",19],["T_STRING","FieldDefinitionListenerInterface",19],["T_WHITESPACE"," ",19],"{",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Determines if the storage contains any data.\n   *\n   * @return bool\n   *   TRUE if the storage contains data, FALSE if not.\n   *\/",21],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","hasData",27],"(",")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Purges a batch of field data.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition\n   *   The deleted field whose data is being purged.\n   * @param $batch_size\n   *   The maximum number of field data records to purge before returning,\n   *   relating to the count of field data records returned by\n   *   \\Drupal\\Core\\Entity\\FieldableEntityStorageInterface::countFieldData().\n   *\n   * @return int\n   *   The number of field data records that have been purged.\n   *\/",29],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","purgeFieldData",42],"(",["T_STRING","FieldDefinitionInterface",42],["T_WHITESPACE"," ",42],["T_VARIABLE","$field_definition",42],",",["T_WHITESPACE"," ",42],["T_VARIABLE","$batch_size",42],")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Performs final cleanup after all data of a field has been purged.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $storage_definition\n   *   The field being purged.\n   *\/",44],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","finalizePurge",50],"(",["T_STRING","FieldStorageDefinitionInterface",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$storage_definition",50],")",";",["T_WHITESPACE","\n\n",50],"}",["T_WHITESPACE","\n",52]]