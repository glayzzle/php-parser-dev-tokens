[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for an entity field manager.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","EntityFieldManagerInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Gets the base field definitions for a content entity type.\n   *\n   * Only fields that are not specific to a given bundle or set of bundles are\n   * returned. This excludes configurable fields, as they are always attached\n   * to a specific bundle.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID. Only entity types that implement\n   *   \\Drupal\\Core\\Entity\\FieldableEntityInterface are supported.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]\n   *   The array of base field definitions for the entity type, keyed by field\n   *   name.\n   *\n   * @throws \\LogicException\n   *   Thrown if one of the entity keys is flagged as translatable.\n   *\/",10],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","getBaseFieldDefinitions",28],"(",["T_VARIABLE","$entity_type_id",28],")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Gets the field definitions for a specific bundle.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID. Only entity types that implement\n   *   \\Drupal\\Core\\Entity\\FieldableEntityInterface are supported.\n   * @param string $bundle\n   *   The bundle.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]\n   *   The array of field definitions for the bundle, keyed by field name.\n   *\/",30],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","getFieldDefinitions",42],"(",["T_VARIABLE","$entity_type_id",42],",",["T_WHITESPACE"," ",42],["T_VARIABLE","$bundle",42],")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Gets the field storage definitions for a content entity type.\n   *\n   * This returns all field storage definitions for base fields and bundle\n   * fields of an entity type. Note that field storage definitions of a base\n   * field equal the full base field definition (i.e. they implement\n   * FieldDefinitionInterface), while the storage definitions for bundle fields\n   * may implement FieldStorageDefinitionInterface only.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID. Only content entities are supported.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface[]\n   *   The array of field storage definitions for the entity type, keyed by\n   *   field name.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface\n   *\/",44],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getFieldStorageDefinitions",62],"(",["T_VARIABLE","$entity_type_id",62],")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Gets a lightweight map of fields across bundles.\n   *\n   * @return array\n   *   An array keyed by entity type. Each value is an array which keys are\n   *   field names and value is an array with two entries:\n   *   - type: The field type.\n   *   - bundles: An associative array of the bundles in which the field\n   *     appears, where the keys and values are both the bundle's machine name.\n   *\/",64],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","getFieldMap",74],"(",")",";",["T_WHITESPACE","\n\n  ",74],["T_DOC_COMMENT","\/**\n   * Sets a lightweight map of fields across bundles.\n   *\n   * @param array[] $field_map\n   *   See the return value of self::getFieldMap().\n   *\n   * @return $this\n   *\/",76],["T_WHITESPACE","\n  ",83],["T_PUBLIC","public",84],["T_WHITESPACE"," ",84],["T_FUNCTION","function",84],["T_WHITESPACE"," ",84],["T_STRING","setFieldMap",84],"(",["T_ARRAY","array",84],["T_WHITESPACE"," ",84],["T_VARIABLE","$field_map",84],")",";",["T_WHITESPACE","\n\n  ",84],["T_DOC_COMMENT","\/**\n   * Gets a lightweight map of fields across bundles filtered by field type.\n   *\n   * @param string $field_type\n   *   The field type to filter by.\n   *\n   * @return array\n   *   An array keyed by entity type. Each value is an array which keys are\n   *   field names and value is an array with two entries:\n   *   - type: The field type.\n   *   - bundles: An associative array of the bundles in which the field\n   *     appears, where the keys and values are both the bundle's machine name.\n   *\/",86],["T_WHITESPACE","\n  ",98],["T_PUBLIC","public",99],["T_WHITESPACE"," ",99],["T_FUNCTION","function",99],["T_WHITESPACE"," ",99],["T_STRING","getFieldMapByFieldType",99],"(",["T_VARIABLE","$field_type",99],")",";",["T_WHITESPACE","\n\n  ",99],["T_DOC_COMMENT","\/**\n   * Clears static and persistent field definition caches.\n   *\/",101],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","clearCachedFieldDefinitions",104],"(",")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Disable the use of caches.\n   *\n   * @param bool $use_caches\n   *   FALSE to not use any caches.\n   *\n   * @deprecated in Drupal 8.0.0, will be removed before Drupal 9.0.0.\n   *\n   * @todo Remove in https:\/\/www.drupal.org\/node\/2549143.\n   *\/",106],["T_WHITESPACE","\n  ",115],["T_PUBLIC","public",116],["T_WHITESPACE"," ",116],["T_FUNCTION","function",116],["T_WHITESPACE"," ",116],["T_STRING","useCaches",116],"(",["T_VARIABLE","$use_caches",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],["T_STRING","FALSE",116],")",";",["T_WHITESPACE","\n\n  ",116],["T_DOC_COMMENT","\/**\n   * Gets the \"extra fields\" for a bundle.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID.\n   * @param string $bundle\n   *   The bundle name.\n   *\n   * @return array\n   *   A nested array of 'pseudo-field' elements. Each list is nested within the\n   *   following keys: entity type, bundle name, context (either 'form' or\n   *   'display'). The keys are the name of the elements as appearing in the\n   *   renderable array (either the entity form or the displayed entity). The\n   *   value is an associative array:\n   *   - label: The human readable name of the element. Make sure you sanitize\n   *     this appropriately.\n   *   - description: A short description of the element contents.\n   *   - weight: The default weight of the element.\n   *   - visible: (optional) The default visibility of the element. Defaults to\n   *     TRUE.\n   *   - edit: (optional) String containing markup (normally a link) used as the\n   *     element's 'edit' operation in the administration interface. Only for\n   *     'form' context.\n   *   - delete: (optional) String containing markup (normally a link) used as the\n   *     element's 'delete' operation in the administration interface. Only for\n   *     'form' context.\n   *\/",118],["T_WHITESPACE","\n  ",144],["T_PUBLIC","public",145],["T_WHITESPACE"," ",145],["T_FUNCTION","function",145],["T_WHITESPACE"," ",145],["T_STRING","getExtraFields",145],"(",["T_VARIABLE","$entity_type_id",145],",",["T_WHITESPACE"," ",145],["T_VARIABLE","$bundle",145],")",";",["T_WHITESPACE","\n\n",145],"}",["T_WHITESPACE","\n",147]]