[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for an entity repository.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","EntityRepositoryInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Loads an entity by UUID.\n   *\n   * Note that some entity types may not support UUIDs.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID to load from.\n   * @param string $uuid\n   *   The UUID of the entity to load.\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityInterface|null\n   *   The entity object, or NULL if there is no entity with the given UUID.\n   *\n   * @throws \\Drupal\\Core\\Entity\\EntityStorageException\n   *   Thrown in case the requested entity type does not support UUIDs.\n   *\/",10],["T_WHITESPACE","\n  ",25],["T_PUBLIC","public",26],["T_WHITESPACE"," ",26],["T_FUNCTION","function",26],["T_WHITESPACE"," ",26],["T_STRING","loadEntityByUuid",26],"(",["T_VARIABLE","$entity_type_id",26],",",["T_WHITESPACE"," ",26],["T_VARIABLE","$uuid",26],")",";",["T_WHITESPACE","\n\n  ",26],["T_DOC_COMMENT","\/**\n   * Loads an entity by the config target identifier.\n   *\n   * @param string $entity_type_id\n   *   The entity type ID to load from.\n   * @param string $target\n   *   The configuration target to load, as returned from\n   *   \\Drupal\\Core\\Entity\\EntityInterface::getConfigTarget().\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityInterface|null\n   *   The entity object, or NULL if there is no entity with the given config\n   *   target identifier.\n   *\n   * @throws \\Drupal\\Core\\Entity\\EntityStorageException\n   *   Thrown if the target identifier is a UUID but the entity type does not\n   *   support UUIDs.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityInterface::getConfigTarget()\n   *\/",28],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","loadEntityByConfigTarget",47],"(",["T_VARIABLE","$entity_type_id",47],",",["T_WHITESPACE"," ",47],["T_VARIABLE","$target",47],")",";",["T_WHITESPACE","\n\n  ",47],["T_DOC_COMMENT","\/**\n   * Gets the entity translation to be used in the given context.\n   *\n   * This will check whether a translation for the desired language is available\n   * and if not, it will fall back to the most appropriate translation based on\n   * the provided context.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityInterface $entity\n   *   The entity whose translation will be returned.\n   * @param string $langcode\n   *   (optional) The language of the current context. Defaults to the current\n   *   content language.\n   * @param array $context\n   *   (optional) An associative array of arbitrary data that can be useful to\n   *   determine the proper fallback sequence.\n   *\n   * @return \\Drupal\\Core\\Entity\\EntityInterface\n   *   An entity object for the translated data.\n   *\n   * @see \\Drupal\\Core\\Language\\LanguageManagerInterface::getFallbackCandidates()\n   *\/",49],["T_WHITESPACE","\n  ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","getTranslationFromContext",70],"(",["T_STRING","EntityInterface",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$entity",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$langcode",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_STRING","NULL",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$context",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_ARRAY","array",70],"(",")",")",";",["T_WHITESPACE","\n\n",70],"}",["T_WHITESPACE","\n",72]]