[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Sql",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Field",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FieldStorageDefinitionInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides a common interface for mapping field columns to SQL tables.\n *\n * Warning: using methods provided here should be done only when writing code\n * that is explicitly targeting a SQL-based entity storage. Typically this API\n * is used by SQL storage classes, or other SQL-specific code like the Views\n * integration code for the Entity SQL storage. Another example of legal usage\n * of this API is when needing to write a query that \\Drupal::entityQuery() does\n * not support. Always retrieve entity identifiers and use them to load entities\n * instead of accessing data stored in the database directly. Any other usage\n * circumvents the entity system and is strongly discouraged, at least when\n * writing contributed code.\n *\/",7],["T_WHITESPACE","\n",19],["T_INTERFACE","interface",20],["T_WHITESPACE"," ",20],["T_STRING","TableMappingInterface",20],["T_WHITESPACE"," ",20],"{",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * A property that represents delta used in entity query conditions.\n   *\/",22],["T_WHITESPACE","\n  ",24],["T_CONST","const",25],["T_WHITESPACE"," ",25],["T_STRING","DELTA",25],["T_WHITESPACE"," ",25],"=",["T_WHITESPACE"," ",25],["T_CONSTANT_ENCAPSED_STRING","'%delta'",25],";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Gets a list of table names for this mapping.\n   *\n   * @return string[]\n   *   An array of table names.\n   *\/",27],["T_WHITESPACE","\n  ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","getTableNames",33],"(",")",";",["T_WHITESPACE","\n\n  ",33],["T_DOC_COMMENT","\/**\n   * Gets a list of all database columns for a given table.\n   *\n   * @param string $table_name\n   *   The name of the table to return the columns for.\n   *\n   * @return string[]\n   *   An array of database column names for this table. Both field columns and\n   *   extra columns are returned.\n   *\/",35],["T_WHITESPACE","\n  ",44],["T_PUBLIC","public",45],["T_WHITESPACE"," ",45],["T_FUNCTION","function",45],["T_WHITESPACE"," ",45],["T_STRING","getAllColumns",45],"(",["T_VARIABLE","$table_name",45],")",";",["T_WHITESPACE","\n\n  ",45],["T_DOC_COMMENT","\/**\n   * Gets a list of names for entity fields stored in the specified table.\n   *\n   * The return list is contains the entity field names, not database field\n   * (i.e. column) names. To get the mapping of specific entity field to\n   * database columns use ::getColumnNames().\n   *\n   * @param string $table_name\n   *   The name of the table to return the field names for.\n   *\n   * @return string[]\n   *   An array of field names for the given table.\n   *\/",47],["T_WHITESPACE","\n  ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","getFieldNames",60],"(",["T_VARIABLE","$table_name",60],")",";",["T_WHITESPACE","\n\n  ",60],["T_DOC_COMMENT","\/**\n   * Gets a mapping of field columns to database columns for a given field.\n   *\n   * @param string $field_name\n   *   The name of the entity field to return the column mapping for.\n   *\n   * @return string[]\n   *   The keys of this array are the keys of the array returned by\n   *   FieldStorageDefinitionInterface::getColumns() while the respective values\n   *   are the names of the database columns for this table mapping.\n   *\/",62],["T_WHITESPACE","\n  ",72],["T_PUBLIC","public",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","getColumnNames",73],"(",["T_VARIABLE","$field_name",73],")",";",["T_WHITESPACE","\n\n  ",73],["T_DOC_COMMENT","\/**\n   * Gets a list of extra database columns, which store denormalized data.\n   *\n   * These database columns do not belong to any entity fields. Any normalized\n   * data that is stored should be associated with an entity field.\n   *\n   * @param string $table_name\n   *   The name of the table to return the columns for.\n   *\n   * @return string[]\n   *   An array of column names for the given table.\n   *\/",75],["T_WHITESPACE","\n  ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","getExtraColumns",87],"(",["T_VARIABLE","$table_name",87],")",";",["T_WHITESPACE","\n\n  ",87],["T_DOC_COMMENT","\/**\n   * Gets the list of columns that can not be used as field type columns.\n   *\n   * @return array\n   *\/",89],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","getReservedColumns",94],"(",")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Generates a column name for a field property.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $storage_definition\n   *   The field storage definition.\n   * @param string $property_name\n   *   The name of the property.\n   *\n   * @return string\n   *   A string containing a generated column name for a field data table that is\n   *   unique among all other fields.\n   *\/",96],["T_WHITESPACE","\n  ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","getFieldColumnName",108],"(",["T_STRING","FieldStorageDefinitionInterface",108],["T_WHITESPACE"," ",108],["T_VARIABLE","$storage_definition",108],",",["T_WHITESPACE"," ",108],["T_VARIABLE","$property_name",108],")",";",["T_WHITESPACE","\n\n  ",108],["T_DOC_COMMENT","\/**\n   * Gets the table name for a given column.\n   *\n   * @param string $field_name\n   *   The name of the entity field to return the column mapping for.\n   *\n   * @return string\n   *   Table name for the given field.\n   *\n   * @throws \\Drupal\\Core\\Entity\\Sql\\SqlContentEntityStorageException\n   *\/",110],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","getFieldTableName",121],"(",["T_VARIABLE","$field_name",121],")",";",["T_WHITESPACE","\n\n",121],"}",["T_WHITESPACE","\n",123]]