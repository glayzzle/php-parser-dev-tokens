[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Schema",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityTypeInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","EntityTypeListenerInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines the interface for entity storage schema handler classes.\n *\n * An entity type's storage schema handler is responsible for creating the\n * storage backend's schema that the entity type's storage handler needs for\n * storing its entities. For example, if the storage handler is for a SQL\n * backend, then the storage schema handler is responsible for creating the\n * needed tables. During the application lifetime, an entity type's definition\n * can change in a way that requires changes to the storage schema, so this\n * interface defines methods for that as well.\n *\n * @see \\Drupal\\Core\\Entity\\EntityStorageInterface\n *\/",8],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","EntityStorageSchemaInterface",21],["T_WHITESPACE"," ",21],["T_EXTENDS","extends",21],["T_WHITESPACE"," ",21],["T_STRING","EntityTypeListenerInterface",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Checks if the changes to the entity type requires storage schema changes.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type\n   *   The updated entity type definition.\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $original\n   *   The original entity type definition.\n   *\n   * @return bool\n   *   TRUE if storage schema changes are required, FALSE otherwise.\n   *\/",23],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","requiresEntityStorageSchemaChanges",34],"(",["T_STRING","EntityTypeInterface",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$entity_type",34],",",["T_WHITESPACE"," ",34],["T_STRING","EntityTypeInterface",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$original",34],")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Checks if existing data would be lost if the schema changes were applied.\n   *\n   * If there are no schema changes needed, then no data needs to be migrated,\n   * but it is not the responsibility of this function to recheck what\n   * requiresEntityStorageSchemaChanges() checks. Rather, the meaning of what\n   * this function returns when requiresEntityStorageSchemaChanges() returns\n   * FALSE is undefined. Callers are expected to only call this function when\n   * requiresEntityStorageSchemaChanges() is TRUE.\n   *\n   * This function can return FALSE if any of these conditions apply:\n   * - There are no existing entities for the entity type.\n   * - There are existing entities, but the schema changes can be applied\n   *   without losing their data (e.g., if the schema changes can be performed\n   *   by altering tables rather than dropping and recreating them).\n   * - The only entity data that would be lost are ones that are not valid for\n   *   the new definition (e.g., if changing an entity type from revisionable\n   *   to non-revisionable, then it's okay to drop data for the non-default\n   *   revision).\n   *\n   * When this function returns FALSE, site administrators will be unable to\n   * perform an automated update, and will instead need to perform a site\n   * migration or invoke some custom update process.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type\n   *   The updated entity type definition.\n   * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $original\n   *   The original entity type definition.\n   *\n   * @return bool\n   *   TRUE if data migration is required, FALSE otherwise.\n   *\n   * @see self::requiresEntityStorageSchemaChanges()\n   *\/",36],["T_WHITESPACE","\n  ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","requiresEntityDataMigration",70],"(",["T_STRING","EntityTypeInterface",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$entity_type",70],",",["T_WHITESPACE"," ",70],["T_STRING","EntityTypeInterface",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$original",70],")",";",["T_WHITESPACE","\n\n",70],"}",["T_WHITESPACE","\n",72]]