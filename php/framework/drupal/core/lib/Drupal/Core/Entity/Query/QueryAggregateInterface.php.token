[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines a interface for aggregated entity queries.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","QueryAggregateInterface",8],["T_WHITESPACE"," ",8],["T_EXTENDS","extends",8],["T_WHITESPACE"," ",8],["T_STRING","QueryInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Specifies a field and a function to aggregate on.\n   *\n   * Available functions: SUM, AVG, MIN, MAX and COUNT.\n   *\n   * @todo What about GROUP_CONCAT support?\n   *\n   * @param string $field\n   *   The name of the field to aggregate by.\n   * @param string $function\n   *   The aggregation function, for example COUNT or MIN.\n   * @param string $langcode\n   *   (optional) The language code.\n   * @param string $alias\n   *   (optional) The key that will be used on the resultset.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\/",10],["T_WHITESPACE","\n  ",28],["T_PUBLIC","public",29],["T_WHITESPACE"," ",29],["T_FUNCTION","function",29],["T_WHITESPACE"," ",29],["T_STRING","aggregate",29],"(",["T_VARIABLE","$field",29],",",["T_WHITESPACE"," ",29],["T_VARIABLE","$function",29],",",["T_WHITESPACE"," ",29],["T_VARIABLE","$langcode",29],["T_WHITESPACE"," ",29],"=",["T_WHITESPACE"," ",29],["T_STRING","NULL",29],",",["T_WHITESPACE"," ",29],"&",["T_VARIABLE","$alias",29],["T_WHITESPACE"," ",29],"=",["T_WHITESPACE"," ",29],["T_STRING","NULL",29],")",";",["T_WHITESPACE","\n\n  ",29],["T_DOC_COMMENT","\/**\n   * Specifies the field to group on.\n   *\n   * @param string $field\n   *   The name of the field to group by.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\/",31],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","groupBy",40],"(",["T_VARIABLE","$field",40],")",";",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Sets a condition for an aggregated value.\n   *\n   * @param string $field\n   *   The name of the field to aggregate by.\n   * @param string $function\n   *   The aggregation function, for example COUNT or MIN.\n   * @param mixed $value\n   *   The actual value of the field.\n   * @param $operator\n   *   Possible values:\n   *   - '=', '<>', '>', '>=', '<', '<=', 'STARTS_WITH', 'CONTAINS',\n   *     'ENDS_WITH': These operators expect $value to be a literal of the\n   *     same type as the column.\n   *   - 'IN', 'NOT IN': These operators expect $value to be an array of\n   *     literals of the same type as the column.\n   *   - 'BETWEEN': This operator expects $value to be an array of two literals\n   *     of the same type as the column.\n   * @param string $langcode\n   *   (optional) The language code.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\n   * @see \\Drupal\\Core\\Entity\\Query\\QueryInterface::condition()\n   *\/",42],["T_WHITESPACE","\n  ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","conditionAggregate",68],"(",["T_VARIABLE","$field",68],",",["T_WHITESPACE"," ",68],["T_VARIABLE","$function",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING","NULL",68],",",["T_WHITESPACE"," ",68],["T_VARIABLE","$value",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING","NULL",68],",",["T_WHITESPACE"," ",68],["T_VARIABLE","$operator",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_CONSTANT_ENCAPSED_STRING","'='",68],",",["T_WHITESPACE"," ",68],["T_VARIABLE","$langcode",68],["T_WHITESPACE"," ",68],"=",["T_WHITESPACE"," ",68],["T_STRING","NULL",68],")",";",["T_WHITESPACE","\n\n  ",68],["T_DOC_COMMENT","\/**\n   * Queries for the existence of a field.\n   *\n   * @param string $field\n   *   The name of the field.\n   * @param string $function\n   *   The aggregate function.\n   * @param $langcode\n   *   (optional) The language code.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\/",70],["T_WHITESPACE","\n  ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_FUNCTION","function",83],["T_WHITESPACE"," ",83],["T_STRING","existsAggregate",83],"(",["T_VARIABLE","$field",83],",",["T_WHITESPACE"," ",83],["T_VARIABLE","$function",83],",",["T_WHITESPACE"," ",83],["T_VARIABLE","$langcode",83],["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_STRING","NULL",83],")",";",["T_WHITESPACE","\n\n  ",83],["T_DOC_COMMENT","\/**\n   * Queries for the nonexistence of a field.\n   *\n   * @param string $field.\n   *   The name of a field.\n   * @param string $function\n   *   The aggregate function.\n   * @param string $langcode\n   *   (optional) The language code.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\/",85],["T_WHITESPACE","\n  ",97],["T_PUBLIC","public",98],["T_WHITESPACE"," ",98],["T_FUNCTION","function",98],["T_WHITESPACE"," ",98],["T_STRING","notExistsAggregate",98],"(",["T_VARIABLE","$field",98],",",["T_WHITESPACE"," ",98],["T_VARIABLE","$function",98],",",["T_WHITESPACE"," ",98],["T_VARIABLE","$langcode",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_STRING","NULL",98],")",";",["T_WHITESPACE","\n\n  ",98],["T_DOC_COMMENT","\/**\n   * Creates an object holding a group of conditions.\n   *\n   * See andConditionAggregateGroup() and orConditionAggregateGroup() for more.\n   *\n   * @param string $conjunction\n   *   - AND (default): this is the equivalent of andConditionAggregateGroup().\n   *   - OR: this is the equivalent of andConditionAggregateGroup().\n   *\n   * @return ConditionInterface\n   *   An object holding a group of conditions.\n   *\/",100],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","conditionAggregateGroupFactory",112],"(",["T_VARIABLE","$conjunction",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_CONSTANT_ENCAPSED_STRING","'AND'",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Sorts by an aggregated value.\n   *\n   * @param string $field\n   *   The name of a field.\n   * @param string $function\n   *   The aggregate function. This is only marked optional for interface\n   *   compatibility, it is illegal to leave it out.\n   * @param string $direction\n   *   The order of sorting, either DESC for descending of ASC for ascending.\n   * @param string $langcode\n   *   (optional) The language code.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryAggregateInterface\n   *   The called object.\n   *\/",114],["T_WHITESPACE","\n  ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","sortAggregate",130],"(",["T_VARIABLE","$field",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$function",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$direction",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_CONSTANT_ENCAPSED_STRING","'ASC'",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$langcode",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_STRING","NULL",130],")",";",["T_WHITESPACE","\n\n  ",130],["T_DOC_COMMENT","\/**\n   * Executes the aggregate query.\n   *\n   * @return array\n   *   A list of result row arrays. Each result row contains the aggregate\n   *   results as keys and also the groupBy columns as keys:\n   * @code\n   * $result = $query\n   *   ->aggregate('nid', 'count')\n   *   ->condition('status', 1)\n   *   ->groupby('type')\n   *   ->executeAggregate();\n   * @endcode\n   * Will return:\n   * @code\n   * $result[0] = array('count_nid' => 3, 'type' => 'page');\n   * $result[1] = array('count_nid' => 1, 'type' => 'poll');\n   * $result[2] = array('count_nid' => 4, 'type' => 'story');\n   * @endcode\n   *\/",132],["T_WHITESPACE","\n  ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","execute",152],"(",")",";",["T_WHITESPACE","\n\n",152],"}",["T_WHITESPACE","\n",154]]