[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Query",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Query",5],["T_NS_SEPARATOR","\\",5],["T_STRING","AlterableInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Interface for entity queries.\n *\n * Never instantiate classes implementing this interface directly. Always use\n * the QueryFactory class.\n *\n * @ingroup database\n *\/",7],["T_WHITESPACE","\n",14],["T_INTERFACE","interface",15],["T_WHITESPACE"," ",15],["T_STRING","QueryInterface",15],["T_WHITESPACE"," ",15],["T_EXTENDS","extends",15],["T_WHITESPACE"," ",15],["T_STRING","AlterableInterface",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * Gets the ID of the entity type for this query.\n   *\n   * @return string\n   *\/",17],["T_WHITESPACE","\n  ",21],["T_PUBLIC","public",22],["T_WHITESPACE"," ",22],["T_FUNCTION","function",22],["T_WHITESPACE"," ",22],["T_STRING","getEntityTypeId",22],"(",")",";",["T_WHITESPACE","\n\n  ",22],["T_DOC_COMMENT","\/**\n   * Add a condition to the query or a condition group.\n   *\n   * For example, to find all entities containing both the Turkish 'merhaba'\n   * and the Polish 'siema' within a 'greetings' text field:\n   * @code\n   *   $entity_ids = \\Drupal::entityQuery($entity_type)\n   *     ->condition('greetings', 'merhaba', '=', 'tr')\n   *     ->condition('greetings.value', 'siema', '=', 'pl')\n   *     ->execute();\n   * @endcode\n   *\n   * @param $field\n   *   Name of the field being queried. It must contain a field name, optionally\n   *   followed by a column name. The column can be the reference property,\n   *   usually \"entity\", for reference fields and that can be followed\n   *   similarly by a field name and so on. Additionally, the target entity type\n   *   can be specified by appending the \":target_entity_type_id\" to \"entity\".\n   *   Some examples:\n   *   - nid\n   *   - tags.value\n   *   - tags\n   *   - tags.entity.name\n   *   - tags.entity:taxonomy_term.name\n   *   - uid.entity.name\n   *   - uid.entity:user.name\n   *   \"tags\" \"is the same as \"tags.value\" as value is the default column.\n   *   If two or more conditions have the same field names they apply to the\n   *   same delta within that field. In order to limit the condition to a\n   *   specific item a numeric delta should be added between the field name and\n   *   the column name.\n   *   @code\n   *   ->condition('tags.5.value', 'news')\n   *   @endcode\n   *   This will require condition to be satisfied on a specific delta of the\n   *   field. The condition above will require the 6th value of the field to\n   *   match the provided value. Further, it's possible to create a condition on\n   *   the delta itself by using '%delta'. For example,\n   *   @code\n   *   ->condition('tags.%delta', 5)\n   *   @endcode\n   *   will find only entities which have at least six tags. Finally, the\n   *   condition on the delta itself accompanied with a condition on the value\n   *   will require the value to appear in the specific delta range. For\n   *   example,\n   *   @code\n   *   ->condition('tags.%delta', 0, '>'))\n   *   ->condition('tags.%delta.value', 'news'))\n   *   @endcode\n   *   will only find the \"news\" tag if it is not the first value. It should be\n   *   noted that conditions on specific deltas and delta ranges are only\n   *   supported when querying content entities.\n   * @param $value\n   *   The value for $field. In most cases, this is a scalar and it's treated as\n   *   case-insensitive. For more complex operators, it is an array. The meaning\n   *   of each element in the array is dependent on $operator.\n   * @param $operator\n   *   Possible values:\n   *   - '=', '<>', '>', '>=', '<', '<=', 'STARTS_WITH', 'CONTAINS',\n   *     'ENDS_WITH': These operators expect $value to be a literal of the\n   *     same type as the column.\n   *   - 'IN', 'NOT IN': These operators expect $value to be an array of\n   *     literals of the same type as the column.\n   *   - 'BETWEEN': This operator expects $value to be an array of two literals\n   *     of the same type as the column.\n   * @param $langcode\n   *   Language code (optional). If omitted, any translation satisfies the\n   *   condition. However, if two or more conditions omit the langcode within\n   *   one condition group then they are presumed to apply to the same\n   *   translation. If within one condition group one condition has a langcode\n   *   and another does not they are not presumed to apply to the same\n   *   translation.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   * @see \\Drupal\\Core\\Entity\\Query\\andConditionGroup\n   * @see \\Drupal\\Core\\Entity\\Query\\orConditionGroup\n   *\/",24],["T_WHITESPACE","\n  ",100],["T_PUBLIC","public",101],["T_WHITESPACE"," ",101],["T_FUNCTION","function",101],["T_WHITESPACE"," ",101],["T_STRING","condition",101],"(",["T_VARIABLE","$field",101],",",["T_WHITESPACE"," ",101],["T_VARIABLE","$value",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_STRING","NULL",101],",",["T_WHITESPACE"," ",101],["T_VARIABLE","$operator",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_STRING","NULL",101],",",["T_WHITESPACE"," ",101],["T_VARIABLE","$langcode",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_STRING","NULL",101],")",";",["T_WHITESPACE","\n\n  ",101],["T_DOC_COMMENT","\/**\n   * Queries for a non-empty value on a field.\n   *\n   * @param $field\n   *   Name of a field.\n   * @param $langcode\n   *   Language code (optional).\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *\/",103],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","exists",112],"(",["T_VARIABLE","$field",112],",",["T_WHITESPACE"," ",112],["T_VARIABLE","$langcode",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_STRING","NULL",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Queries for an empty field.\n   *\n   * @param $field.\n   *   Name of a field.\n   * @param $langcode\n   *   Language code (optional).\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *\/",114],["T_WHITESPACE","\n  ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","notExists",123],"(",["T_VARIABLE","$field",123],",",["T_WHITESPACE"," ",123],["T_VARIABLE","$langcode",123],["T_WHITESPACE"," ",123],"=",["T_WHITESPACE"," ",123],["T_STRING","NULL",123],")",";",["T_WHITESPACE","\n\n  ",123],["T_DOC_COMMENT","\/**\n   * Enables a pager for the query.\n   *\n   * @param $limit\n   *   An integer specifying the number of elements per page.  If passed a false\n   *   value (FALSE, 0, NULL), the pager is disabled.\n   * @param $element\n   *   An optional integer to distinguish between multiple pagers on one page.\n   *   If not provided, one is automatically calculated.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",125],["T_WHITESPACE","\n  ",137],["T_PUBLIC","public",138],["T_WHITESPACE"," ",138],["T_FUNCTION","function",138],["T_WHITESPACE"," ",138],["T_STRING","pager",138],"(",["T_VARIABLE","$limit",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_LNUMBER","10",138],",",["T_WHITESPACE"," ",138],["T_VARIABLE","$element",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_STRING","NULL",138],")",";",["T_WHITESPACE","\n\n  ",138],["T_DOC_COMMENT","\/**\n   * @param null $start\n   * @param null $length\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",140],["T_WHITESPACE","\n  ",145],["T_PUBLIC","public",146],["T_WHITESPACE"," ",146],["T_FUNCTION","function",146],["T_WHITESPACE"," ",146],["T_STRING","range",146],"(",["T_VARIABLE","$start",146],["T_WHITESPACE"," ",146],"=",["T_WHITESPACE"," ",146],["T_STRING","NULL",146],",",["T_WHITESPACE"," ",146],["T_VARIABLE","$length",146],["T_WHITESPACE"," ",146],"=",["T_WHITESPACE"," ",146],["T_STRING","NULL",146],")",";",["T_WHITESPACE","\n\n  ",146],["T_DOC_COMMENT","\/**\n   * @param $field\n   *   Name of a field.\n   * @param string $direction\n   * @param $langcode\n   *   Language code (optional).\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",148],["T_WHITESPACE","\n  ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","sort",157],"(",["T_VARIABLE","$field",157],",",["T_WHITESPACE"," ",157],["T_VARIABLE","$direction",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_CONSTANT_ENCAPSED_STRING","'ASC'",157],",",["T_WHITESPACE"," ",157],["T_VARIABLE","$langcode",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_STRING","NULL",157],")",";",["T_WHITESPACE","\n\n  ",157],["T_DOC_COMMENT","\/**\n   * Makes this a count query.\n   *\n   * For count queries, execute() returns the number entities found.\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",159],["T_WHITESPACE","\n  ",166],["T_PUBLIC","public",167],["T_WHITESPACE"," ",167],["T_FUNCTION","function",167],["T_WHITESPACE"," ",167],["T_STRING","count",167],"(",")",";",["T_WHITESPACE","\n\n  ",167],["T_DOC_COMMENT","\/**\n   * Enables sortable tables for this query.\n   *\n   * @param $headers\n   *   An array of headers of the same structure as described in\n   *   template_preprocess_table(). Use a 'specifier' in place of a 'field' to\n   *   specify what to sort on. This can be an entity or a field as described\n   *   in condition().\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",169],["T_WHITESPACE","\n  ",180],["T_PUBLIC","public",181],["T_WHITESPACE"," ",181],["T_FUNCTION","function",181],["T_WHITESPACE"," ",181],["T_STRING","tableSort",181],"(","&",["T_VARIABLE","$headers",181],")",";",["T_WHITESPACE","\n\n  ",181],["T_DOC_COMMENT","\/**\n   * @return \\Drupal\\Core\\Entity\\Query\\QueryInterface\n   *   The called object.\n   *\/",183],["T_WHITESPACE","\n  ",186],["T_PUBLIC","public",187],["T_WHITESPACE"," ",187],["T_FUNCTION","function",187],["T_WHITESPACE"," ",187],["T_STRING","accessCheck",187],"(",["T_VARIABLE","$access_check",187],["T_WHITESPACE"," ",187],"=",["T_WHITESPACE"," ",187],["T_STRING","TRUE",187],")",";",["T_WHITESPACE","\n\n  ",187],["T_DOC_COMMENT","\/**\n   * Execute the query.\n   *\n   * @return int|array\n   *   Returns an integer for count queries or an array of ids. The values of\n   *   the array are always entity ids. The keys will be revision ids if the\n   *   entity supports revision and entity ids if not.\n   *\/",189],["T_WHITESPACE","\n  ",196],["T_PUBLIC","public",197],["T_WHITESPACE"," ",197],["T_FUNCTION","function",197],["T_WHITESPACE"," ",197],["T_STRING","execute",197],"(",")",";",["T_WHITESPACE","\n\n  ",197],["T_DOC_COMMENT","\/**\n   * Creates a new group of conditions ANDed together.\n   *\n   * For example, consider a drawing entity type with a 'figures' multi-value\n   * field containing 'shape' and 'color' columns. To find all drawings\n   * containing both a red triangle and a blue circle:\n   * @code\n   *   $query = \\Drupal::entityQuery('drawing');\n   *   $group = $query->andConditionGroup()\n   *     ->condition('figures.color', 'red')\n   *     ->condition('figures.shape', 'triangle');\n   *   $query->condition($group);\n   *   $group = $query->andConditionGroup()\n   *     ->condition('figures.color', 'blue')\n   *     ->condition('figures.shape', 'circle');\n   *   $query->condition($group);\n   *   $entity_ids = $query->execute();\n   * @endcode\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\ConditionInterface\n   *\/",199],["T_WHITESPACE","\n  ",219],["T_PUBLIC","public",220],["T_WHITESPACE"," ",220],["T_FUNCTION","function",220],["T_WHITESPACE"," ",220],["T_STRING","andConditionGroup",220],"(",")",";",["T_WHITESPACE","\n\n  ",220],["T_DOC_COMMENT","\/**\n   * Creates a new group of conditions ORed together.\n   *\n   * For example, consider a map entity with an 'attributes' field\n   * containing 'building_type' and 'color' columns.  To find all green and\n   * red bikesheds:\n   * @code\n   *   $query = \\Drupal::entityQuery('map');\n   *   $group = $query->orConditionGroup()\n   *     ->condition('attributes.color', 'red')\n   *     ->condition('attributes.color', 'green');\n   *   $entity_ids = $query\n   *     ->condition('attributes.building_type', 'bikeshed')\n   *     ->condition($group)\n   *     ->execute();\n   * @endcode\n   * Note that this particular example can be simplified:\n   * @code\n   *   $entity_ids = $query\n   *     ->condition('attributes.color', array('red', 'green'))\n   *     ->condition('attributes.building_type', 'bikeshed')\n   *     ->execute();\n   * @endcode\n   *\n   * @return \\Drupal\\Core\\Entity\\Query\\ConditionInterface\n   *\/",222],["T_WHITESPACE","\n  ",247],["T_PUBLIC","public",248],["T_WHITESPACE"," ",248],["T_FUNCTION","function",248],["T_WHITESPACE"," ",248],["T_STRING","orConditionGroup",248],"(",")",";",["T_WHITESPACE","\n\n  ",248],["T_DOC_COMMENT","\/**\n   * Queries the current revision.\n   *\n   * @return $this\n   *\/",250],["T_WHITESPACE","\n  ",254],["T_PUBLIC","public",255],["T_WHITESPACE"," ",255],["T_FUNCTION","function",255],["T_WHITESPACE"," ",255],["T_STRING","currentRevision",255],"(",")",";",["T_WHITESPACE","\n\n  ",255],["T_DOC_COMMENT","\/**\n   * Queries all the revisions.\n   *\n   * @return $this\n   *\/",257],["T_WHITESPACE","\n  ",261],["T_PUBLIC","public",262],["T_WHITESPACE"," ",262],["T_FUNCTION","function",262],["T_WHITESPACE"," ",262],["T_STRING","allRevisions",262],"(",")",";",["T_WHITESPACE","\n\n",262],"}",["T_WHITESPACE","\n",264]]