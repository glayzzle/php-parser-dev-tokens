[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Contains all events thrown while handling entity types.\n *\/",5],["T_WHITESPACE","\n",7],["T_FINAL","final",8],["T_WHITESPACE"," ",8],["T_CLASS","class",8],["T_WHITESPACE"," ",8],["T_STRING","EntityTypeEvents",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * The name of the event triggered when a new entity type is created.\n   *\n   * This event allows modules to react to a new entity type being created. The\n   * event listener method receives a \\Drupal\\Core\\Entity\\EntityTypeEvent\n   * instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEvent\n   * @see \\Drupal\\Core\\Entity\\EntityManager::onEntityTypeCreate()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEventSubscriberTrait\n   * @see \\Drupal\\views\\EventSubscriber\\ViewsEntitySchemaSubscriber::onEntityTypeCreate()\n   *\n   * @var string\n   *\/",10],["T_WHITESPACE","\n  ",25],["T_CONST","const",26],["T_WHITESPACE"," ",26],["T_STRING","CREATE",26],["T_WHITESPACE"," ",26],"=",["T_WHITESPACE"," ",26],["T_CONSTANT_ENCAPSED_STRING","'entity_type.definition.create'",26],";",["T_WHITESPACE","\n\n  ",26],["T_DOC_COMMENT","\/**\n   * The name of the event triggered when an existing entity type is updated.\n   *\n   * This event allows modules to react whenever an existing entity type is\n   * updated. The event listener method receives a\n   * \\Drupal\\Core\\Entity\\EntityTypeEvent instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEvent\n   * @see \\Drupal\\Core\\Entity\\EntityManager::onEntityTypeUpdate()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEventSubscriberTrait\n   * @see \\Drupal\\views\\EventSubscriber\\ViewsEntitySchemaSubscriber::onEntityTypeUpdate()\n   *\n   * @var string\n   *\/",28],["T_WHITESPACE","\n  ",43],["T_CONST","const",44],["T_WHITESPACE"," ",44],["T_STRING","UPDATE",44],["T_WHITESPACE"," ",44],"=",["T_WHITESPACE"," ",44],["T_CONSTANT_ENCAPSED_STRING","'entity_type.definition.update'",44],";",["T_WHITESPACE","\n\n  ",44],["T_DOC_COMMENT","\/**\n   * The name of the event triggered when an existing entity type is deleted.\n   *\n   * This event allows modules to react whenever an existing entity type is\n   * deleted.  The event listener method receives a\n   * \\Drupal\\Core\\Entity\\EntityTypeEvent instance.\n   *\n   * @Event\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEvent\n   * @see \\Drupal\\Core\\Entity\\EntityManager::onEntityTypeDelete()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeEventSubscriberTrait\n   * @see \\Drupal\\views\\EventSubscriber\\ViewsEntitySchemaSubscriber::onEntityTypeDelete()\n   *\n   * @var string\n   *\/",46],["T_WHITESPACE","\n  ",61],["T_CONST","const",62],["T_WHITESPACE"," ",62],["T_STRING","DELETE",62],["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],["T_CONSTANT_ENCAPSED_STRING","'entity_type.definition.delete'",62],";",["T_WHITESPACE","\n\n",62],"}",["T_WHITESPACE","\n",64]]