[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Display",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","EntityConstraintViolationListInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","FieldableEntityInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Form",7],["T_NS_SEPARATOR","\\",7],["T_STRING","FormStateInterface",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Provides a common interface for entity form displays.\n *\/",9],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","EntityFormDisplayInterface",12],["T_WHITESPACE"," ",12],["T_EXTENDS","extends",12],["T_WHITESPACE"," ",12],["T_STRING","EntityDisplayInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Adds field widgets to an entity form.\n   *\n   * The form elements for the entity's fields are added by reference as direct\n   * children in the $form parameter. This parameter can be a full form\n   * structure (most common case for entity edit forms), or a sub-element of a\n   * larger form.\n   *\n   * By default, submitted field values appear at the top-level of\n   * $form_state->getValues(). A different location within\n   * $form_state->getValues() can be specified by setting the '#parents'\n   * property on the incoming $form parameter. Because of name clashes, two\n   * instances of the same field cannot appear within the same $form element, or\n   * within the same '#parents' space.\n   *\n   * Sample resulting structure in $form:\n   * @code\n   *   '#parents' => The location of field values in $form_state->getValues(),\n   *   '#entity_type' => The name of the entity type,\n   *   '#bundle' => The name of the bundle,\n   *   \/\/ One sub-array per field appearing in the entity, keyed by field name.\n   *   \/\/ The structure of the array differs slightly depending on whether the\n   *   \/\/ widget is 'single-value' (provides the input for one field value,\n   *   \/\/ most common case), and will therefore be repeated as many times as\n   *   \/\/ needed, or 'multiple-values' (one single widget allows the input of\n   *   \/\/ several values; e.g., checkboxes, select box, etc.).\n   *   'field_foo' => array(\n   *     '#access' => TRUE if the current user has 'edit' grants for the field,\n   *       FALSE if not.\n   *     'widget' => array(\n   *       '#field_name' => The name of the field,\n   *       '#title' => The label of the field,\n   *       '#description' => The description text for the field,\n   *       '#required' => Whether or not the field is required,\n   *       '#field_parents' => The 'parents' space for the field in the form,\n   *          equal to the #parents property of the $form parameter received by\n   *          this method,\n   *\n   *       \/\/ For 'multiple-value' widgets, the remaining elements in the\n   *       \/\/ sub-array depend on the widget.\n   *\n   *       \/\/ For 'single-value' widgets:\n   *       '#theme' => 'field_multiple_value_form',\n   *       '#cardinality' => The field cardinality,\n   *       '#cardinality_multiple' => TRUE if the field can contain multiple\n   *         items, FALSE otherwise.\n   *       \/\/ One sub-array per copy of the widget, keyed by delta.\n   *       0 => array(\n   *         '#title' => The title to be displayed by the widget,\n   *         '#description' => The description text for the field,\n   *         '#required' => Whether the widget should be marked required,\n   *         '#delta' => 0,\n   *         '#weight' => 0,\n   *         '#field_parents' => Same as above,\n   *         \/\/ The remaining elements in the sub-array depend on the widget.\n   *         ...\n   *       ),\n   *       1 => array(\n   *         ...\n   *       ),\n   *       ...\n   *     ),\n   *     ...\n   *   ),\n   * )\n   * @endcode\n   *\n   * Additionally, some processing data is placed in $form_state, and can be\n   * accessed by \\Drupal\\Core\\Field\\WidgetBaseInterface::getWidgetState() and\n   * \\Drupal\\Core\\Field\\WidgetBaseInterface::setWidgetState().\n   *\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity.\n   * @param array $form\n   *   The form structure to fill in. This can be a full form structure, or a\n   *   sub-element of a larger form. The #parents property can be set to\n   *   control the location of submitted field values within\n   *   $form_state->getValues(). If not specified, $form['#parents'] is set to\n   *   an empty array, which results in field values located at the top-level of\n   *   $form_state->getValues().\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\/",14],["T_WHITESPACE","\n  ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","buildForm",97],"(",["T_STRING","FieldableEntityInterface",97],["T_WHITESPACE"," ",97],["T_VARIABLE","$entity",97],",",["T_WHITESPACE"," ",97],["T_ARRAY","array",97],["T_WHITESPACE"," ",97],"&",["T_VARIABLE","$form",97],",",["T_WHITESPACE"," ",97],["T_STRING","FormStateInterface",97],["T_WHITESPACE"," ",97],["T_VARIABLE","$form_state",97],")",";",["T_WHITESPACE","\n\n  ",97],["T_DOC_COMMENT","\/**\n   * Extracts field values from the submitted widget values into the entity.\n   *\n   * This accounts for drag-and-drop reordering of field values, and filtering\n   * of empty values.\n   *\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\n   * @return array\n   *   An array whose keys and values are the keys of the top-level entries in\n   *   $form_state->getValues() that have been processed. The remaining entries,\n   *   if any, do not correspond to widgets and should be extracted manually by\n   *   the caller if needed.\n   *\/",99],["T_WHITESPACE","\n  ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","extractFormValues",119],"(",["T_STRING","FieldableEntityInterface",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$entity",119],",",["T_WHITESPACE"," ",119],["T_ARRAY","array",119],["T_WHITESPACE"," ",119],"&",["T_VARIABLE","$form",119],",",["T_WHITESPACE"," ",119],["T_STRING","FormStateInterface",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$form_state",119],")",";",["T_WHITESPACE","\n\n  ",119],["T_DOC_COMMENT","\/**\n   * Validates submitted widget values and sets the corresponding form errors.\n   *\n   * This method invokes entity validation and takes care of flagging them on\n   * the form. This is particularly useful when all elements on the form are\n   * managed by the form display.\n   *\n   * As an alternative, entity validation can be invoked separately such that\n   * some violations can be flagged manually. In that case\n   * \\Drupal\\Core\\Entity\\Display\\EntityFormDisplayInterface::flagViolations()\n   * must be used for flagging violations related to the form display.\n   *\n   * Note that there are two levels of validation for fields in forms: widget\n   * validation and field validation:\n   * - Widget validation steps are specific to a given widget's own form\n   *   structure and UI metaphors. They are executed during normal form\n   *   validation, usually through Form API's #element_validate property.\n   *   Errors reported at this level are typically those that prevent the\n   *   extraction of proper field values from the submitted form input.\n   * - If no form \/ widget errors were reported for the field, field validation\n   *   steps are performed according to the \"constraints\" specified by the\n   *   field definition as part of the entity validation. That validation is\n   *   independent of the specific widget being used in a given form, and is\n   *   also performed on REST entity submissions.\n   *\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\/",121],["T_WHITESPACE","\n  ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","validateFormValues",154],"(",["T_STRING","FieldableEntityInterface",154],["T_WHITESPACE"," ",154],["T_VARIABLE","$entity",154],",",["T_WHITESPACE"," ",154],["T_ARRAY","array",154],["T_WHITESPACE"," ",154],"&",["T_VARIABLE","$form",154],",",["T_WHITESPACE"," ",154],["T_STRING","FormStateInterface",154],["T_WHITESPACE"," ",154],["T_VARIABLE","$form_state",154],")",";",["T_WHITESPACE","\n\n  ",154],["T_DOC_COMMENT","\/**\n   * Flags entity validation violations as form errors.\n   *\n   * This method processes all violations passed, thus any violations not\n   * related to fields of the form display must be processed before this method\n   * is invoked.\n   *\n   * The method flags constraint violations related to fields shown on the\n   * form as form errors on the correct form elements. Possibly pre-existing\n   * violations of hidden fields (so fields not appearing in the display) are\n   * ignored. Other, non-field related violations are passed through and set as\n   * form errors according to the property path of the violations.\n   *\n   * @param \\Drupal\\Core\\Entity\\EntityConstraintViolationListInterface $violations\n   *   The violations to flag.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\/",156],["T_WHITESPACE","\n  ",176],["T_PUBLIC","public",177],["T_WHITESPACE"," ",177],["T_FUNCTION","function",177],["T_WHITESPACE"," ",177],["T_STRING","flagWidgetsErrorsFromViolations",177],"(",["T_STRING","EntityConstraintViolationListInterface",177],["T_WHITESPACE"," ",177],["T_VARIABLE","$violations",177],",",["T_WHITESPACE"," ",177],["T_ARRAY","array",177],["T_WHITESPACE"," ",177],"&",["T_VARIABLE","$form",177],",",["T_WHITESPACE"," ",177],["T_STRING","FormStateInterface",177],["T_WHITESPACE"," ",177],["T_VARIABLE","$form_state",177],")",";",["T_WHITESPACE","\n\n",177],"}",["T_WHITESPACE","\n",179]]