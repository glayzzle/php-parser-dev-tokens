[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Entity",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Definition",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginDefinitionInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides an interface for an entity type and its metadata.\n *\n * Additional information can be provided by modules: hook_entity_type_build() can be\n * implemented to define new properties, while hook_entity_type_alter() can be\n * implemented to alter existing data and fill-in defaults. Module-specific\n * properties should be documented in the hook implementations defining them.\n *\/",7],["T_WHITESPACE","\n",14],["T_INTERFACE","interface",15],["T_WHITESPACE"," ",15],["T_STRING","EntityTypeInterface",15],["T_WHITESPACE"," ",15],["T_EXTENDS","extends",15],["T_WHITESPACE"," ",15],["T_STRING","PluginDefinitionInterface",15],["T_WHITESPACE"," ",15],"{",["T_WHITESPACE","\n\n  ",15],["T_DOC_COMMENT","\/**\n   * The maximum length of ID, in characters.\n   *\/",17],["T_WHITESPACE","\n  ",19],["T_CONST","const",20],["T_WHITESPACE"," ",20],["T_STRING","ID_MAX_LENGTH",20],["T_WHITESPACE"," ",20],"=",["T_WHITESPACE"," ",20],["T_LNUMBER","32",20],";",["T_WHITESPACE","\n\n  ",20],["T_DOC_COMMENT","\/**\n   * The maximum length of bundle name, in characters.\n   *\/",22],["T_WHITESPACE","\n  ",24],["T_CONST","const",25],["T_WHITESPACE"," ",25],["T_STRING","BUNDLE_MAX_LENGTH",25],["T_WHITESPACE"," ",25],"=",["T_WHITESPACE"," ",25],["T_LNUMBER","32",25],";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * Gets any arbitrary property.\n   *\n   * @param string $property\n   *   The property to retrieve.\n   *\n   * @return mixed\n   *   The value for that property, or NULL if the property does not exist.\n   *\/",27],["T_WHITESPACE","\n  ",35],["T_PUBLIC","public",36],["T_WHITESPACE"," ",36],["T_FUNCTION","function",36],["T_WHITESPACE"," ",36],["T_STRING","get",36],"(",["T_VARIABLE","$property",36],")",";",["T_WHITESPACE","\n\n  ",36],["T_DOC_COMMENT","\/**\n   * Sets a value to an arbitrary property.\n   *\n   * @param string $property\n   *   The property to use for the value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",38],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","set",48],"(",["T_VARIABLE","$property",48],",",["T_WHITESPACE"," ",48],["T_VARIABLE","$value",48],")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Gets the unique identifier of the entity type.\n   *\n   * @return string\n   *   The unique identifier of the entity type.\n   *\/",50],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","id",56],"(",")",";",["T_WHITESPACE","\n\n  ",56],["T_DOC_COMMENT","\/**\n   * Gets the name of the provider of this entity type.\n   *\n   * @return string\n   *   The name of the provider of this entity type.\n   *\/",58],["T_WHITESPACE","\n  ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","getProvider",64],"(",")",";",["T_WHITESPACE","\n\n  ",64],["T_DOC_COMMENT","\/**\n   * Gets the name of the original entity type class.\n   *\n   * In case the class name was changed with setClass(), this will return\n   * the initial value. Useful when trying to identify the entity type ID based\n   * on the class.\n   *\n   * @return string\n   *   The name of the original entity type class.\n   *\/",66],["T_WHITESPACE","\n  ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","getOriginalClass",76],"(",")",";",["T_WHITESPACE","\n\n  ",76],["T_DOC_COMMENT","\/**\n   * Gets an array of entity keys.\n   *\n   * @return array\n   *   An array describing how the Field API can extract certain information\n   *   from objects of this entity type:\n   *   - id: The name of the property that contains the primary ID of the\n   *     entity. Every entity object passed to the Field API must have this\n   *     property and its value must be numeric.\n   *   - revision: (optional) The name of the property that contains the\n   *     revision ID of the entity. The Field API assumes that all revision IDs\n   *     are unique across all entities of a type. If this entry is omitted\n   *     the entities of this type are not revisionable.\n   *   - bundle: (optional) The name of the property that contains the bundle\n   *     name for the entity. The bundle name defines which set of fields are\n   *     attached to the entity (e.g. what nodes call \"content type\"). This\n   *     entry can be omitted if this entity type exposes a single bundle (such\n   *     that all entities have the same collection of fields). The name of this\n   *     single bundle will be the same as the entity type.\n   *   - label: (optional) The name of the property that contains the entity\n   *     label. For example, if the entity's label is located in\n   *     $entity->subject, then 'subject' should be specified here. If complex\n   *     logic is required to build the label,\n   *     \\Drupal\\Core\\Entity\\EntityInterface::label() should be used.\n   *   - langcode: (optional) The name of the property that contains the\n   *     language code. For instance, if the entity's language is located in\n   *     $entity->langcode, then 'langcode' should be specified here.\n   *   - uuid: (optional) The name of the property that contains the universally\n   *     unique identifier of the entity, which is used to distinctly identify\n   *     an entity across different systems.\n   *\/",78],["T_WHITESPACE","\n  ",108],["T_PUBLIC","public",109],["T_WHITESPACE"," ",109],["T_FUNCTION","function",109],["T_WHITESPACE"," ",109],["T_STRING","getKeys",109],"(",")",";",["T_WHITESPACE","\n\n  ",109],["T_DOC_COMMENT","\/**\n   * Gets a specific entity key.\n   *\n   * @param string $key\n   *   The name of the entity key to return.\n   *\n   * @return string|bool\n   *   The entity key, or FALSE if it does not exist.\n   *\n   * @see self::getKeys()\n   *\/",111],["T_WHITESPACE","\n  ",121],["T_PUBLIC","public",122],["T_WHITESPACE"," ",122],["T_FUNCTION","function",122],["T_WHITESPACE"," ",122],["T_STRING","getKey",122],"(",["T_VARIABLE","$key",122],")",";",["T_WHITESPACE","\n\n  ",122],["T_DOC_COMMENT","\/**\n   * Indicates if a given entity key exists.\n   *\n   * @param string $key\n   *   The name of the entity key to check.\n   *\n   * @return bool\n   *   TRUE if a given entity key exists, FALSE otherwise.\n   *\/",124],["T_WHITESPACE","\n  ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","hasKey",133],"(",["T_VARIABLE","$key",133],")",";",["T_WHITESPACE","\n\n  ",133],["T_DOC_COMMENT","\/**\n   * Indicates whether entities should be statically cached.\n   *\n   * @return bool\n   *   TRUE if static caching should be used; FALSE otherwise.\n   *\/",135],["T_WHITESPACE","\n  ",140],["T_PUBLIC","public",141],["T_WHITESPACE"," ",141],["T_FUNCTION","function",141],["T_WHITESPACE"," ",141],["T_STRING","isStaticallyCacheable",141],"(",")",";",["T_WHITESPACE","\n\n  ",141],["T_DOC_COMMENT","\/**\n   * Indicates whether the rendered output of entities should be cached.\n   *\n   * @return bool\n   *\/",143],["T_WHITESPACE","\n  ",147],["T_PUBLIC","public",148],["T_WHITESPACE"," ",148],["T_FUNCTION","function",148],["T_WHITESPACE"," ",148],["T_STRING","isRenderCacheable",148],"(",")",";",["T_WHITESPACE","\n\n  ",148],["T_DOC_COMMENT","\/**\n   * Indicates if the persistent cache of field data should be used.\n   *\n   * @todo Used by ContentEntityStorageBase only.\n   *\n   * The persistent cache should usually only be disabled if a higher level\n   * persistent cache is available for the entity type.\n   *\n   * @return bool\n   *\/",150],["T_WHITESPACE","\n  ",159],["T_PUBLIC","public",160],["T_WHITESPACE"," ",160],["T_FUNCTION","function",160],["T_WHITESPACE"," ",160],["T_STRING","isPersistentlyCacheable",160],"(",")",";",["T_WHITESPACE","\n\n  ",160],["T_DOC_COMMENT","\/**\n   * Determines if there is a handler for a given type.\n   *\n   * @param string $handler_type\n   *   The type of handler to check.\n   * @param bool $nested\n   *   (optional) If this handler has a nested definition. Defaults to FALSE.\n   *\n   * @return bool\n   *   TRUE if a handler of this type exists, FALSE otherwise.\n   *\/",162],["T_WHITESPACE","\n  ",172],["T_PUBLIC","public",173],["T_WHITESPACE"," ",173],["T_FUNCTION","function",173],["T_WHITESPACE"," ",173],["T_STRING","hasHandlerClass",173],"(",["T_VARIABLE","$handler_type",173],",",["T_WHITESPACE"," ",173],["T_VARIABLE","$nested",173],["T_WHITESPACE"," ",173],"=",["T_WHITESPACE"," ",173],["T_STRING","FALSE",173],")",";",["T_WHITESPACE","\n\n  ",173],["T_DOC_COMMENT","\/**\n   * @param string $handler_type\n   *   The handler type to get.\n   *\n   * @return array|string|null\n   *   The handlers for a given type, or NULL if none exist.\n   *\/",175],["T_WHITESPACE","\n  ",181],["T_PUBLIC","public",182],["T_WHITESPACE"," ",182],["T_FUNCTION","function",182],["T_WHITESPACE"," ",182],["T_STRING","getHandlerClass",182],"(",["T_VARIABLE","$handler_type",182],")",";",["T_WHITESPACE","\n\n  ",182],["T_DOC_COMMENT","\/**\n   * Gets an array of handlers.\n   *\n   * @return array\n   *   An associative array where the keys are the names of different handler\n   *   types (listed below) and the values are the names of the classes that\n   *   implement that handler:\n   *   - storage: The name of the class used to load the objects. The class must\n   *     implement \\Drupal\\Core\\Entity\\EntityStorageInterface.\n   *   - form: An associative array where the keys are the names of the\n   *     different form operations (such as 'create', 'edit', or 'delete') and\n   *     the values are the names of the handler classes for those\n   *     operations. The name of the operation is passed also to the form\n   *     handler's constructor, so that one class can be used for multiple\n   *     entity forms when the forms are similar. The classes must implement\n   *     \\Drupal\\Core\\Entity\\EntityFormInterface.\n   *   - list: The name of the class that provides listings of the entities. The\n   *     class must implement \\Drupal\\Core\\Entity\\EntityListBuilderInterface.\n   *   - render: The name of the class that is used to render the entities. The\n   *     class must implement \\Drupal\\Core\\Entity\\EntityViewBuilderInterface.\n   *   - access: The name of the class that is used for access checks. The class\n   *     must implement \\Drupal\\Core\\Entity\\EntityAccessControlHandlerInterface.\n   *     Defaults to \\Drupal\\Core\\Entity\\EntityAccessControlHandler.\n   *   - route_provider: (optional) A list of class names, keyed by a group\n   *     string, which will be used to define routes related to this entity\n   *     type. These classes must implement\n   *     \\Drupal\\Core\\Entity\\Routing\\EntityRouteProviderInterface.\n   *\/",184],["T_WHITESPACE","\n  ",211],["T_PUBLIC","public",212],["T_WHITESPACE"," ",212],["T_FUNCTION","function",212],["T_WHITESPACE"," ",212],["T_STRING","getHandlerClasses",212],"(",")",";",["T_WHITESPACE","\n\n  ",212],["T_DOC_COMMENT","\/**\n   * Gets the storage class.\n   *\n   * @return string\n   *   The class for this entity type's storage.\n   *\/",214],["T_WHITESPACE","\n  ",219],["T_PUBLIC","public",220],["T_WHITESPACE"," ",220],["T_FUNCTION","function",220],["T_WHITESPACE"," ",220],["T_STRING","getStorageClass",220],"(",")",";",["T_WHITESPACE","\n\n  ",220],["T_DOC_COMMENT","\/**\n   * Sets the storage class.\n   *\n   * @param string $class\n   *   The class for this entity type's storage.\n   *\n   * @return $this\n   *\/",222],["T_WHITESPACE","\n  ",229],["T_PUBLIC","public",230],["T_WHITESPACE"," ",230],["T_FUNCTION","function",230],["T_WHITESPACE"," ",230],["T_STRING","setStorageClass",230],"(",["T_VARIABLE","$class",230],")",";",["T_WHITESPACE","\n\n  ",230],["T_DOC_COMMENT","\/**\n   * Gets the form class for a specific operation.\n   *\n   * @param string $operation\n   *   The name of the operation to use, e.g., 'default'.\n   *\n   * @return string\n   *   The class for this operation's form for this entity type.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityFormBuilderInterface\n   *\/",232],["T_WHITESPACE","\n  ",242],["T_PUBLIC","public",243],["T_WHITESPACE"," ",243],["T_FUNCTION","function",243],["T_WHITESPACE"," ",243],["T_STRING","getFormClass",243],"(",["T_VARIABLE","$operation",243],")",";",["T_WHITESPACE","\n\n  ",243],["T_DOC_COMMENT","\/**\n   * Sets a form class for a specific operation.\n   *\n   * @param string $operation\n   *   The operation to use this form class for.\n   * @param string $class\n   *   The form class implementing\n   *   \\Drupal\\Core\\Entity\\EntityFormInterface.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityFormBuilderInterface\n   *\/",245],["T_WHITESPACE","\n  ",257],["T_PUBLIC","public",258],["T_WHITESPACE"," ",258],["T_FUNCTION","function",258],["T_WHITESPACE"," ",258],["T_STRING","setFormClass",258],"(",["T_VARIABLE","$operation",258],",",["T_WHITESPACE"," ",258],["T_VARIABLE","$class",258],")",";",["T_WHITESPACE","\n\n  ",258],["T_DOC_COMMENT","\/**\n   * Indicates if this entity type has any forms.\n   *\n   * @return bool\n   *   TRUE if there are any forms for this entity type, FALSE otherwise.\n   *\/",260],["T_WHITESPACE","\n  ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","hasFormClasses",266],"(",")",";",["T_WHITESPACE","\n\n  ",266],["T_DOC_COMMENT","\/**\n   * Indicates if this entity type has any route provider.\n   *\n   * @return bool\n   *\/",268],["T_WHITESPACE","\n  ",272],["T_PUBLIC","public",273],["T_WHITESPACE"," ",273],["T_FUNCTION","function",273],["T_WHITESPACE"," ",273],["T_STRING","hasRouteProviders",273],"(",")",";",["T_WHITESPACE","\n\n  ",273],["T_DOC_COMMENT","\/**\n   * Gets all the route provide handlers.\n   *\n   * Much like forms you can define multiple route provider handlers.\n   *\n   * @return string[]\n   *\/",275],["T_WHITESPACE","\n  ",281],["T_PUBLIC","public",282],["T_WHITESPACE"," ",282],["T_FUNCTION","function",282],["T_WHITESPACE"," ",282],["T_STRING","getRouteProviderClasses",282],"(",")",";",["T_WHITESPACE","\n\n  ",282],["T_DOC_COMMENT","\/**\n   * Gets the list class.\n   *\n   * @return string\n   *   The class for this entity type's list.\n   *\/",284],["T_WHITESPACE","\n  ",289],["T_PUBLIC","public",290],["T_WHITESPACE"," ",290],["T_FUNCTION","function",290],["T_WHITESPACE"," ",290],["T_STRING","getListBuilderClass",290],"(",")",";",["T_WHITESPACE","\n\n  ",290],["T_DOC_COMMENT","\/**\n   * Sets the list class.\n   *\n   * @param string $class\n   *   The list class to use for the operation.\n   *\n   * @return $this\n   *\/",292],["T_WHITESPACE","\n  ",299],["T_PUBLIC","public",300],["T_WHITESPACE"," ",300],["T_FUNCTION","function",300],["T_WHITESPACE"," ",300],["T_STRING","setListBuilderClass",300],"(",["T_VARIABLE","$class",300],")",";",["T_WHITESPACE","\n\n  ",300],["T_DOC_COMMENT","\/**\n   * Indicates if this entity type has a list class.\n   *\n   * @return bool\n   *   TRUE if there is a list for this entity type, FALSE otherwise.\n   *\/",302],["T_WHITESPACE","\n  ",307],["T_PUBLIC","public",308],["T_WHITESPACE"," ",308],["T_FUNCTION","function",308],["T_WHITESPACE"," ",308],["T_STRING","hasListBuilderClass",308],"(",")",";",["T_WHITESPACE","\n\n  ",308],["T_DOC_COMMENT","\/**\n   * Gets the view builder class.\n   *\n   * @return string\n   *   The class for this entity type's view builder.\n   *\/",310],["T_WHITESPACE","\n  ",315],["T_PUBLIC","public",316],["T_WHITESPACE"," ",316],["T_FUNCTION","function",316],["T_WHITESPACE"," ",316],["T_STRING","getViewBuilderClass",316],"(",")",";",["T_WHITESPACE","\n\n  ",316],["T_DOC_COMMENT","\/**\n   * Gets the view builder class.\n   *\n   * @param string $class\n   *   The class for this entity type's view builder.\n   *\n   * @return $this\n   *\/",318],["T_WHITESPACE","\n  ",325],["T_PUBLIC","public",326],["T_WHITESPACE"," ",326],["T_FUNCTION","function",326],["T_WHITESPACE"," ",326],["T_STRING","setViewBuilderClass",326],"(",["T_VARIABLE","$class",326],")",";",["T_WHITESPACE","\n\n  ",326],["T_DOC_COMMENT","\/**\n   * Indicates if this entity type has a view builder.\n   *\n   * @return bool\n   *   TRUE if there is a view builder for this entity type, FALSE otherwise.\n   *\/",328],["T_WHITESPACE","\n  ",333],["T_PUBLIC","public",334],["T_WHITESPACE"," ",334],["T_FUNCTION","function",334],["T_WHITESPACE"," ",334],["T_STRING","hasViewBuilderClass",334],"(",")",";",["T_WHITESPACE","\n\n  ",334],["T_DOC_COMMENT","\/**\n   * Gets the access control class.\n   *\n   * @return string\n   *   The class for this entity type's access control.\n   *\/",336],["T_WHITESPACE","\n  ",341],["T_PUBLIC","public",342],["T_WHITESPACE"," ",342],["T_FUNCTION","function",342],["T_WHITESPACE"," ",342],["T_STRING","getAccessControlClass",342],"(",")",";",["T_WHITESPACE","\n\n  ",342],["T_DOC_COMMENT","\/**\n   * Gets the access class.\n   *\n   * @param string $class\n   *   The class for this entity type's access.\n   *\n   * @return $this\n   *\/",344],["T_WHITESPACE","\n  ",351],["T_PUBLIC","public",352],["T_WHITESPACE"," ",352],["T_FUNCTION","function",352],["T_WHITESPACE"," ",352],["T_STRING","setAccessClass",352],"(",["T_VARIABLE","$class",352],")",";",["T_WHITESPACE","\n\n  ",352],["T_DOC_COMMENT","\/**\n   * Indicates if the entity type is a subclass of the given class or interface.\n   *\n   * @param string $class\n   *   The class or interface to check.\n   *\n   * @return bool\n   *   TRUE if the entity type is a subclass of the class or interface.\n   *\/",354],["T_WHITESPACE","\n  ",362],["T_PUBLIC","public",363],["T_WHITESPACE"," ",363],["T_FUNCTION","function",363],["T_WHITESPACE"," ",363],["T_STRING","isSubclassOf",363],"(",["T_VARIABLE","$class",363],")",";",["T_WHITESPACE","\n\n  ",363],["T_DOC_COMMENT","\/**\n   * Sets the handlers for a given type.\n   *\n   * @param string $handler_type\n   *   The type of handler to set.\n   * @param array|string $value\n   *   The value for a handler type.\n   *\n   * @return $this\n   *\/",365],["T_WHITESPACE","\n  ",374],["T_PUBLIC","public",375],["T_WHITESPACE"," ",375],["T_FUNCTION","function",375],["T_WHITESPACE"," ",375],["T_STRING","setHandlerClass",375],"(",["T_VARIABLE","$handler_type",375],",",["T_WHITESPACE"," ",375],["T_VARIABLE","$value",375],")",";",["T_WHITESPACE","\n\n  ",375],["T_DOC_COMMENT","\/**\n   * Gets the name of the default administrative permission.\n   *\n   * The default \\Drupal\\Core\\Entity\\EntityAccessControlHandler class checks this\n   * permission for all operations in its checkAccess() method. Entities with\n   * more complex permissions can extend this class to do their own access\n   * checks.\n   *\n   * @return string|bool\n   *\/",377],["T_WHITESPACE","\n  ",386],["T_PUBLIC","public",387],["T_WHITESPACE"," ",387],["T_FUNCTION","function",387],["T_WHITESPACE"," ",387],["T_STRING","getAdminPermission",387],"(",")",";",["T_WHITESPACE","\n\n  ",387],["T_DOC_COMMENT","\/**\n   * Gets the permission granularity level.\n   *\n   * The allowed values are respectively \"entity_type\" or \"bundle\".\n   *\n   * @return string\n   *   Whether a module exposing permissions for the current entity type\n   *   should use entity-type level granularity or bundle level granularity.\n   *\/",389],["T_WHITESPACE","\n  ",397],["T_PUBLIC","public",398],["T_WHITESPACE"," ",398],["T_FUNCTION","function",398],["T_WHITESPACE"," ",398],["T_STRING","getPermissionGranularity",398],"(",")",";",["T_WHITESPACE","\n\n  ",398],["T_DOC_COMMENT","\/**\n   * Gets the link templates using the URI template syntax.\n   *\n   * Links are an array of standard link relations to the URI template that\n   * should be used for them. Where possible, link relationships should use\n   * established IANA relationships rather than custom relationships.\n   *\n   * Every entity type should, at minimum, define \"canonical\", which is the\n   * pattern for URIs to that entity. Even if the entity will have no HTML page\n   * exposed to users it should still have a canonical URI in order to be\n   * compatible with web services. Entities that will be user-editable via an\n   * HTML page must also define an \"edit-form\" relationship.\n   *\n   * By default, the following placeholders are supported:\n   * - [entityType]: The entity type itself will also be a valid token for the\n   *   ID of the entity. For instance, a placeholder of {node} used on the Node\n   *   class.\n   * - [bundleEntityType]: The bundle machine name itself. For instance, a\n   *   placeholder of {node_type} used on the Node class.\n   *\n   * Specific entity types may also expand upon this list by overriding the\n   * Entity::urlRouteParameters() method.\n   *\n   * @link http:\/\/www.iana.org\/assignments\/link-relations\/link-relations.xml @endlink\n   * @link http:\/\/tools.ietf.org\/html\/rfc6570 @endlink\n   *\n   * @return array\n   *\/",400],["T_WHITESPACE","\n  ",427],["T_PUBLIC","public",428],["T_WHITESPACE"," ",428],["T_FUNCTION","function",428],["T_WHITESPACE"," ",428],["T_STRING","getLinkTemplates",428],"(",")",";",["T_WHITESPACE","\n\n  ",428],["T_DOC_COMMENT","\/**\n   * Gets the link template for a given key.\n   *\n   * @param string $key\n   *   The link type.\n   *\n   * @return string|bool\n   *   The path for this link, or FALSE if it doesn't exist.\n   *\/",430],["T_WHITESPACE","\n  ",438],["T_PUBLIC","public",439],["T_WHITESPACE"," ",439],["T_FUNCTION","function",439],["T_WHITESPACE"," ",439],["T_STRING","getLinkTemplate",439],"(",["T_VARIABLE","$key",439],")",";",["T_WHITESPACE","\n\n  ",439],["T_DOC_COMMENT","\/**\n   * Indicates if a link template exists for a given key.\n   *\n   * @param string $key\n   *   The link type.\n   *\n   * @return bool\n   *   TRUE if the link template exists, FALSE otherwise.\n   *\/",441],["T_WHITESPACE","\n  ",449],["T_PUBLIC","public",450],["T_WHITESPACE"," ",450],["T_FUNCTION","function",450],["T_WHITESPACE"," ",450],["T_STRING","hasLinkTemplate",450],"(",["T_VARIABLE","$key",450],")",";",["T_WHITESPACE","\n\n  ",450],["T_DOC_COMMENT","\/**\n   * Sets a single link template.\n   *\n   * @param string $key\n   *   The name of a link.\n   * @param string $path\n   *   The route path to use for the link.\n   *\n   * @return $this\n   *\n   * @throws \\InvalidArgumentException\n   *   Thrown when the path does not start with a leading slash.\n   *\/",452],["T_WHITESPACE","\n  ",464],["T_PUBLIC","public",465],["T_WHITESPACE"," ",465],["T_FUNCTION","function",465],["T_WHITESPACE"," ",465],["T_STRING","setLinkTemplate",465],"(",["T_VARIABLE","$key",465],",",["T_WHITESPACE"," ",465],["T_VARIABLE","$path",465],")",";",["T_WHITESPACE","\n\n  ",465],["T_DOC_COMMENT","\/**\n   * Gets the callback for the label of the entity.\n   *\n   * The function takes an entity and returns the label of the entity. Use\n   * language() on the entity to get information on the requested language. The\n   * entity label is the main string associated with an entity; for example, the\n   * title of a node or the subject of a comment. If there is an entity object\n   * property that defines the label, use the 'label' element of the\n   * 'entity_keys' return value component to provide this information. If more\n   * complex logic is needed to determine the label of an entity, you can\n   * instead specify a callback function here, which will be called to determine\n   * the entity label.\n   *\n   * @return callable|null\n   *   The callback, or NULL if none exists.\n   *\n   * @deprecated in Drupal 8.0.x-dev and will be removed before Drupal 9.0.0.\n   *   Use Drupal\\Core\\Entity\\EntityInterface::label() for complex label\n   *   generation as needed.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityInterface::label()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::setLabelCallback()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::hasLabelCallback()\n   *\n   * @todo Remove usages of label_callback https:\/\/www.drupal.org\/node\/2450793.\n   *\/",467],["T_WHITESPACE","\n  ",492],["T_PUBLIC","public",493],["T_WHITESPACE"," ",493],["T_FUNCTION","function",493],["T_WHITESPACE"," ",493],["T_STRING","getLabelCallback",493],"(",")",";",["T_WHITESPACE","\n\n  ",493],["T_DOC_COMMENT","\/**\n   * Sets the label callback.\n   *\n   * @param callable $callback\n   *   A callable that returns the label of the entity.\n   *\n   * @return $this\n   *\n   * @deprecated in Drupal 8.0.x-dev and will be removed before Drupal 9.0.0.\n   *   Use EntityInterface::label() for complex label generation as needed.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityInterface::label()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::getLabelCallback()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::hasLabelCallback()\n   *\/",495],["T_WHITESPACE","\n  ",509],["T_PUBLIC","public",510],["T_WHITESPACE"," ",510],["T_FUNCTION","function",510],["T_WHITESPACE"," ",510],["T_STRING","setLabelCallback",510],"(",["T_VARIABLE","$callback",510],")",";",["T_WHITESPACE","\n\n  ",510],["T_DOC_COMMENT","\/**\n   * Indicates if a label callback exists.\n   *\n   * @return bool\n   *\n   * @deprecated in Drupal 8.0.x-dev and will be removed before Drupal 9.0.0.\n   *   Use EntityInterface::label() for complex label generation as needed.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityInterface::label()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::getLabelCallback()\n   * @see \\Drupal\\Core\\Entity\\EntityTypeInterface::setLabelCallback()\n   *\/",512],["T_WHITESPACE","\n  ",523],["T_PUBLIC","public",524],["T_WHITESPACE"," ",524],["T_FUNCTION","function",524],["T_WHITESPACE"," ",524],["T_STRING","hasLabelCallback",524],"(",")",";",["T_WHITESPACE","\n\n  ",524],["T_DOC_COMMENT","\/**\n   * Gets the name of the entity type which provides bundles.\n   *\n   * @return string|null\n   *   The name of the entity type which provides bundles, or NULL if the entity\n   *   type does not have a bundle entity type.\n   *\/",526],["T_WHITESPACE","\n  ",532],["T_PUBLIC","public",533],["T_WHITESPACE"," ",533],["T_FUNCTION","function",533],["T_WHITESPACE"," ",533],["T_STRING","getBundleEntityType",533],"(",")",";",["T_WHITESPACE","\n\n  ",533],["T_DOC_COMMENT","\/**\n   * Gets the entity type for which this entity provides bundles.\n   *\n   * It can be used by other modules to act accordingly; for example,\n   * the Field UI module uses it to add operation links to manage fields and\n   * displays.\n   *\n   * @return string|null\n   *   The entity type for which this entity provides bundles, or NULL if does\n   *   not provide bundles for another entity type.\n   *\/",535],["T_WHITESPACE","\n  ",545],["T_PUBLIC","public",546],["T_WHITESPACE"," ",546],["T_FUNCTION","function",546],["T_WHITESPACE"," ",546],["T_STRING","getBundleOf",546],"(",")",";",["T_WHITESPACE","\n\n  ",546],["T_DOC_COMMENT","\/**\n   * Gets the label for the bundle.\n   *\n   * @return string|null\n   *   The bundle label, or NULL if none exists.\n   *\/",548],["T_WHITESPACE","\n  ",553],["T_PUBLIC","public",554],["T_WHITESPACE"," ",554],["T_FUNCTION","function",554],["T_WHITESPACE"," ",554],["T_STRING","getBundleLabel",554],"(",")",";",["T_WHITESPACE","\n\n  ",554],["T_DOC_COMMENT","\/**\n   * Gets the name of the entity's base table.\n   *\n   * @todo Used by SqlContentEntityStorage only.\n   *\n   * @return string|null\n   *   The name of the entity's base table, or NULL if none exists.\n   *\/",556],["T_WHITESPACE","\n  ",563],["T_PUBLIC","public",564],["T_WHITESPACE"," ",564],["T_FUNCTION","function",564],["T_WHITESPACE"," ",564],["T_STRING","getBaseTable",564],"(",")",";",["T_WHITESPACE","\n\n  ",564],["T_DOC_COMMENT","\/**\n   * Indicates whether entities of this type have multilingual support.\n   *\n   * At an entity level, this indicates language support and at a bundle level\n   * this indicates translation support.\n   *\n   * @return bool\n   *\/",566],["T_WHITESPACE","\n  ",573],["T_PUBLIC","public",574],["T_WHITESPACE"," ",574],["T_FUNCTION","function",574],["T_WHITESPACE"," ",574],["T_STRING","isTranslatable",574],"(",")",";",["T_WHITESPACE","\n\n  ",574],["T_DOC_COMMENT","\/**\n   * Indicates whether entities of this type have revision support.\n   *\n   * @return bool\n   *\/",576],["T_WHITESPACE","\n  ",580],["T_PUBLIC","public",581],["T_WHITESPACE"," ",581],["T_FUNCTION","function",581],["T_WHITESPACE"," ",581],["T_STRING","isRevisionable",581],"(",")",";",["T_WHITESPACE","\n\n  ",581],["T_DOC_COMMENT","\/**\n   * Gets the name of the entity's revision data table.\n   *\n   * @todo Used by SqlContentEntityStorage only.\n   *\n   * @return string|null\n   *   The name of the entity type's revision data table, or NULL if none\n   *   exists.\n   *\/",583],["T_WHITESPACE","\n  ",591],["T_PUBLIC","public",592],["T_WHITESPACE"," ",592],["T_FUNCTION","function",592],["T_WHITESPACE"," ",592],["T_STRING","getRevisionDataTable",592],"(",")",";",["T_WHITESPACE","\n\n  ",592],["T_DOC_COMMENT","\/**\n   * Gets the name of the entity's revision table.\n   *\n   * @todo Used by SqlContentEntityStorage only.\n   *\n   * @return string|null\n   *   The name of the entity type's revision table, or NULL if none exists.\n   *\/",594],["T_WHITESPACE","\n  ",601],["T_PUBLIC","public",602],["T_WHITESPACE"," ",602],["T_FUNCTION","function",602],["T_WHITESPACE"," ",602],["T_STRING","getRevisionTable",602],"(",")",";",["T_WHITESPACE","\n\n  ",602],["T_DOC_COMMENT","\/**\n   * Gets the name of the entity's data table.\n   *\n   * @todo Used by SqlContentEntityStorage only.\n   *\n   * @return string|null\n   *   The name of the entity type's data table, or NULL if none exists.\n   *\/",604],["T_WHITESPACE","\n  ",611],["T_PUBLIC","public",612],["T_WHITESPACE"," ",612],["T_FUNCTION","function",612],["T_WHITESPACE"," ",612],["T_STRING","getDataTable",612],"(",")",";",["T_WHITESPACE","\n\n  ",612],["T_DOC_COMMENT","\/**\n   * Gets the human-readable name of the entity type.\n   *\n   * @return string\n   *   The human-readable name of the entity type.\n   *\/",614],["T_WHITESPACE","\n  ",619],["T_PUBLIC","public",620],["T_WHITESPACE"," ",620],["T_FUNCTION","function",620],["T_WHITESPACE"," ",620],["T_STRING","getLabel",620],"(",")",";",["T_WHITESPACE","\n\n  ",620],["T_DOC_COMMENT","\/**\n   * Gets the lowercase form of the human-readable entity type name.\n   *\n   * @return string\n   *   The lowercase form of the human-readable entity type name.\n   *\/",622],["T_WHITESPACE","\n  ",627],["T_PUBLIC","public",628],["T_WHITESPACE"," ",628],["T_FUNCTION","function",628],["T_WHITESPACE"," ",628],["T_STRING","getLowercaseLabel",628],"(",")",";",["T_WHITESPACE","\n\n  ",628],["T_DOC_COMMENT","\/**\n   * Gets the singular label of the entity type.\n   *\n   * @return string\n   *   The singular label.\n   *\/",630],["T_WHITESPACE","\n  ",635],["T_PUBLIC","public",636],["T_WHITESPACE"," ",636],["T_FUNCTION","function",636],["T_WHITESPACE"," ",636],["T_STRING","getSingularLabel",636],"(",")",";",["T_WHITESPACE","\n\n  ",636],["T_DOC_COMMENT","\/**\n   * Gets the plural label of the entity type.\n   *\n   * @return string\n   *   The plural label.\n   *\/",638],["T_WHITESPACE","\n  ",643],["T_PUBLIC","public",644],["T_WHITESPACE"," ",644],["T_FUNCTION","function",644],["T_WHITESPACE"," ",644],["T_STRING","getPluralLabel",644],"(",")",";",["T_WHITESPACE","\n\n  ",644],["T_DOC_COMMENT","\/**\n   * Gets the count label of the entity type\n   *\n   * @param int $count\n   *   The item count to display if the plural form was requested.\n   *\n   * @return string\n   *   The count label.\n   *\/",646],["T_WHITESPACE","\n  ",654],["T_PUBLIC","public",655],["T_WHITESPACE"," ",655],["T_FUNCTION","function",655],["T_WHITESPACE"," ",655],["T_STRING","getCountLabel",655],"(",["T_VARIABLE","$count",655],")",";",["T_WHITESPACE","\n\n  ",655],["T_DOC_COMMENT","\/**\n   * Gets a callable that can be used to provide the entity URI.\n   *\n   * This is only called if there is no matching link template for the link\n   * relationship type, and there is no bundle-specific callback provided.\n   *\n   * @return callable|null\n   *   A valid callback that is passed the entity or NULL if none is specified.\n   *\/",657],["T_WHITESPACE","\n  ",665],["T_PUBLIC","public",666],["T_WHITESPACE"," ",666],["T_FUNCTION","function",666],["T_WHITESPACE"," ",666],["T_STRING","getUriCallback",666],"(",")",";",["T_WHITESPACE","\n\n  ",666],["T_DOC_COMMENT","\/**\n   * Sets a callable to use to provide the entity URI.\n   *\n   * @param callable $callback\n   *   A callback to use to provide a URI for the entity.\n   *\n   * @return $this\n   *\/",668],["T_WHITESPACE","\n  ",675],["T_PUBLIC","public",676],["T_WHITESPACE"," ",676],["T_FUNCTION","function",676],["T_WHITESPACE"," ",676],["T_STRING","setUriCallback",676],"(",["T_VARIABLE","$callback",676],")",";",["T_WHITESPACE","\n\n  ",676],["T_DOC_COMMENT","\/**\n   * Gets the machine name of the entity type group.\n   *\n   * @return string\n   *\/",678],["T_WHITESPACE","\n  ",682],["T_PUBLIC","public",683],["T_WHITESPACE"," ",683],["T_FUNCTION","function",683],["T_WHITESPACE"," ",683],["T_STRING","getGroup",683],"(",")",";",["T_WHITESPACE","\n\n  ",683],["T_DOC_COMMENT","\/**\n   * Gets the human-readable name of the entity type group.\n   *\n   * @return string\n   *\/",685],["T_WHITESPACE","\n  ",689],["T_PUBLIC","public",690],["T_WHITESPACE"," ",690],["T_FUNCTION","function",690],["T_WHITESPACE"," ",690],["T_STRING","getGroupLabel",690],"(",")",";",["T_WHITESPACE","\n\n  ",690],["T_DOC_COMMENT","\/**\n   * The list cache contexts associated with this entity type.\n   *\n   * Enables code listing entities of this type to ensure that rendered listings\n   * are varied as necessary, typically to ensure users of role A see other\n   * entities listed than users of role B.\n   *\n   * @return string[]\n   *\/",692],["T_WHITESPACE","\n  ",700],["T_PUBLIC","public",701],["T_WHITESPACE"," ",701],["T_FUNCTION","function",701],["T_WHITESPACE"," ",701],["T_STRING","getListCacheContexts",701],"(",")",";",["T_WHITESPACE","\n\n  ",701],["T_DOC_COMMENT","\/**\n   * The list cache tags associated with this entity type.\n   *\n   * Enables code listing entities of this type to ensure that newly created\n   * entities show up immediately.\n   *\n   * @return string[]\n   *\/",703],["T_WHITESPACE","\n  ",710],["T_PUBLIC","public",711],["T_WHITESPACE"," ",711],["T_FUNCTION","function",711],["T_WHITESPACE"," ",711],["T_STRING","getListCacheTags",711],"(",")",";",["T_WHITESPACE","\n\n  ",711],["T_DOC_COMMENT","\/**\n   * Gets the key that is used to store configuration dependencies.\n   *\n   * @return string\n   *   The key to be used in configuration dependencies when storing\n   *   dependencies on entities of this type.\n   *\/",713],["T_WHITESPACE","\n  ",719],["T_PUBLIC","public",720],["T_WHITESPACE"," ",720],["T_FUNCTION","function",720],["T_WHITESPACE"," ",720],["T_STRING","getConfigDependencyKey",720],"(",")",";",["T_WHITESPACE","\n\n  ",720],["T_DOC_COMMENT","\/**\n   * Indicates whether this entity type is commonly used as a reference target.\n   *\n   * @return bool\n   *   TRUE if the entity type is a common reference; FALSE otherwise.\n   *\/",722],["T_WHITESPACE","\n  ",727],["T_PUBLIC","public",728],["T_WHITESPACE"," ",728],["T_FUNCTION","function",728],["T_WHITESPACE"," ",728],["T_STRING","isCommonReferenceTarget",728],"(",")",";",["T_WHITESPACE","\n\n  ",728],["T_DOC_COMMENT","\/**\n   * Gets an array of validation constraints.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details on how constraints are defined.\n   *\n   * @return array[]\n   *   An array of validation constraint definitions, keyed by constraint name.\n   *   Each constraint definition can be used for instantiating\n   *   \\Symfony\\Component\\Validator\\Constraint objects.\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",730],["T_WHITESPACE","\n  ",742],["T_PUBLIC","public",743],["T_WHITESPACE"," ",743],["T_FUNCTION","function",743],["T_WHITESPACE"," ",743],["T_STRING","getConstraints",743],"(",")",";",["T_WHITESPACE","\n\n  ",743],["T_DOC_COMMENT","\/**\n   * Sets the array of validation constraints for the FieldItemList.\n   *\n   * NOTE: This will overwrite any previously set constraints. In most cases\n   * ContentEntityTypeInterface::addConstraint() should be used instead.\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details on how constraints are defined.\n   *\n   * @param array $constraints\n   *   An array of validation constraint definitions, keyed by constraint name.\n   *   Each constraint definition can be used for instantiating\n   *   \\Symfony\\Component\\Validator\\Constraint objects.\n   *\n   * @return $this\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",745],["T_WHITESPACE","\n  ",761],["T_PUBLIC","public",762],["T_WHITESPACE"," ",762],["T_FUNCTION","function",762],["T_WHITESPACE"," ",762],["T_STRING","setConstraints",762],"(",["T_ARRAY","array",762],["T_WHITESPACE"," ",762],["T_VARIABLE","$constraints",762],")",";",["T_WHITESPACE","\n\n  ",762],["T_DOC_COMMENT","\/**\n   * Adds a validation constraint.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details on how constraints are defined.\n   *\n   * @param string $constraint_name\n   *   The name of the constraint to add, i.e. its plugin id.\n   * @param array|null $options\n   *   The constraint options as required by the constraint plugin, or NULL.\n   *\n   * @return $this\n   *\/",764],["T_WHITESPACE","\n  ",776],["T_PUBLIC","public",777],["T_WHITESPACE"," ",777],["T_FUNCTION","function",777],["T_WHITESPACE"," ",777],["T_STRING","addConstraint",777],"(",["T_VARIABLE","$constraint_name",777],",",["T_WHITESPACE"," ",777],["T_VARIABLE","$options",777],["T_WHITESPACE"," ",777],"=",["T_WHITESPACE"," ",777],["T_STRING","NULL",777],")",";",["T_WHITESPACE","\n\n  ",777],["T_DOC_COMMENT","\/**\n   * Gets the config dependency info for this entity, if any exists.\n   *\n   * @param string $bundle\n   *   The bundle name.\n   *\n   * @return array\n   *   An associative array containing the following keys:\n   *   - 'type': The config dependency type (e.g. 'module', 'config').\n   *   - 'name': The name of the config dependency.\n   *\/",779],["T_WHITESPACE","\n  ",789],["T_PUBLIC","public",790],["T_WHITESPACE"," ",790],["T_FUNCTION","function",790],["T_WHITESPACE"," ",790],["T_STRING","getBundleConfigDependency",790],"(",["T_VARIABLE","$bundle",790],")",";",["T_WHITESPACE","\n\n",790],"}",["T_WHITESPACE","\n",792]]