[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Utility",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Render",5],["T_NS_SEPARATOR","\\",5],["T_STRING","HtmlEscapedText",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Render",6],["T_NS_SEPARATOR","\\",6],["T_STRING","MarkupInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Cache",7],["T_NS_SEPARATOR","\\",7],["T_STRING","CacheableDependencyInterface",7],";",["T_WHITESPACE","\n",7],["T_USE","use",8],["T_WHITESPACE"," ",8],["T_STRING","Drupal",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Core",8],["T_NS_SEPARATOR","\\",8],["T_STRING","Cache",8],["T_NS_SEPARATOR","\\",8],["T_STRING","CacheBackendInterface",8],";",["T_WHITESPACE","\n",8],["T_USE","use",9],["T_WHITESPACE"," ",9],["T_STRING","Drupal",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Core",9],["T_NS_SEPARATOR","\\",9],["T_STRING","Cache",9],["T_NS_SEPARATOR","\\",9],["T_STRING","CacheTagsInvalidatorInterface",9],";",["T_WHITESPACE","\n",9],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Drupal",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Core",10],["T_NS_SEPARATOR","\\",10],["T_STRING","Extension",10],["T_NS_SEPARATOR","\\",10],["T_STRING","ModuleHandlerInterface",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","Drupal",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Core",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Language",11],["T_NS_SEPARATOR","\\",11],["T_STRING","LanguageInterface",11],";",["T_WHITESPACE","\n",11],["T_USE","use",12],["T_WHITESPACE"," ",12],["T_STRING","Drupal",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Core",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Language",12],["T_NS_SEPARATOR","\\",12],["T_STRING","LanguageManagerInterface",12],";",["T_WHITESPACE","\n",12],["T_USE","use",13],["T_WHITESPACE"," ",13],["T_STRING","Drupal",13],["T_NS_SEPARATOR","\\",13],["T_STRING","Core",13],["T_NS_SEPARATOR","\\",13],["T_STRING","Render",13],["T_NS_SEPARATOR","\\",13],["T_STRING","AttachmentsInterface",13],";",["T_WHITESPACE","\n",13],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","Drupal",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Core",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Render",14],["T_NS_SEPARATOR","\\",14],["T_STRING","BubbleableMetadata",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","Drupal",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Core",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Render",15],["T_NS_SEPARATOR","\\",15],["T_STRING","RendererInterface",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Drupal placeholder\/token replacement system.\n *\n * API functions for replacing placeholders in text with meaningful values.\n *\n * For example: When configuring automated emails, an administrator enters\n * standard text for the email. Variables like the title of a node and the date\n * the email was sent can be entered as placeholders like [node:title] and\n * [date:short]. When a Drupal module prepares to send the email, it can call\n * the Token::replace() function, passing in the text. The token system will\n * scan the text for placeholder tokens, give other modules an opportunity to\n * replace them with meaningful text, then return the final product to the\n * original module.\n *\n * Tokens follow the form: [$type:$name], where $type is a general class of\n * tokens like 'node', 'user', or 'comment' and $name is the name of a given\n * placeholder. For example, [node:title] or [node:created:since].\n *\n * In addition to raw text containing placeholders, modules may pass in an array\n * of objects to be used when performing the replacement. The objects should be\n * keyed by the token type they correspond to. For example:\n *\n * @code\n * \/\/ Load a node and a user, then replace tokens in the text.\n * $text = 'On [date:short], [user:name] read [node:title].';\n * $node = Node::load(1);\n * $user = User::load(1);\n *\n * \/\/ [date:...] tokens use the current date automatically.\n * $data = array('node' => $node, 'user' => $user);\n * return Token::replace($text, $data);\n * @endcode\n *\n * Some tokens may be chained in the form of [$type:$pointer:$name], where $type\n * is a normal token type, $pointer is a reference to another token type, and\n * $name is the name of a given placeholder. For example, [node:author:mail]. In\n * that example, 'author' is a pointer to the 'user' account that created the\n * node, and 'mail' is a placeholder available for any 'user'.\n *\n * @see Token::replace()\n * @see hook_tokens()\n * @see hook_token_info()\n *\/",17],["T_WHITESPACE","\n",59],["T_CLASS","class",60],["T_WHITESPACE"," ",60],["T_STRING","Token",60],["T_WHITESPACE"," ",60],"{",["T_WHITESPACE","\n\n  ",60],["T_DOC_COMMENT","\/**\n   * The tag to cache token info with.\n   *\/",62],["T_WHITESPACE","\n  ",64],["T_CONST","const",65],["T_WHITESPACE"," ",65],["T_STRING","TOKEN_INFO_CACHE_TAG",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],["T_CONSTANT_ENCAPSED_STRING","'token_info'",65],";",["T_WHITESPACE","\n\n  ",65],["T_DOC_COMMENT","\/**\n   * The token cache.\n   *\n   * @var \\Drupal\\Core\\Cache\\CacheBackendInterface\n   *\/",67],["T_WHITESPACE","\n  ",71],["T_PROTECTED","protected",72],["T_WHITESPACE"," ",72],["T_VARIABLE","$cache",72],";",["T_WHITESPACE","\n\n  ",72],["T_DOC_COMMENT","\/**\n   * The language manager.\n   *\n   * @var \\Drupal\\Core\\Language\\LanguageManagerInterface\n   *\/",74],["T_WHITESPACE","\n  ",78],["T_PROTECTED","protected",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$languageManager",79],";",["T_WHITESPACE","\n\n  ",79],["T_DOC_COMMENT","\/**\n   * Token definitions.\n   *\n   * @var array[]|null\n   *   An array of token definitions, or NULL when the definitions are not set.\n   *\n   * @see self::setInfo()\n   * @see self::getInfo()\n   * @see self::resetInfo()\n   *\/",81],["T_WHITESPACE","\n  ",90],["T_PROTECTED","protected",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$tokenInfo",91],";",["T_WHITESPACE","\n\n  ",91],["T_DOC_COMMENT","\/**\n   * The module handler service.\n   *\n   * @var \\Drupal\\Core\\Extension\\ModuleHandlerInterface\n   *\/",93],["T_WHITESPACE","\n  ",97],["T_PROTECTED","protected",98],["T_WHITESPACE"," ",98],["T_VARIABLE","$moduleHandler",98],";",["T_WHITESPACE","\n\n  ",98],["T_DOC_COMMENT","\/**\n   * The cache tags invalidator.\n   *\n   * @var \\Drupal\\Core\\Cache\\CacheTagsInvalidatorInterface\n   *\/",100],["T_WHITESPACE","\n  ",104],["T_PROTECTED","protected",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$cacheTagsInvalidator",105],";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * The renderer.\n   *\n   * @var \\Drupal\\Core\\Render\\RendererInterface\n   *\/",107],["T_WHITESPACE","\n  ",111],["T_PROTECTED","protected",112],["T_WHITESPACE"," ",112],["T_VARIABLE","$renderer",112],";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Constructs a new class instance.\n   *\n   * @param \\Drupal\\Core\\Extension\\ModuleHandlerInterface $module_handler\n   *   The module handler.\n   * @param \\Drupal\\Core\\Cache\\CacheBackendInterface $cache\n   *   The token cache.\n   * @param \\Drupal\\Core\\Language\\LanguageManagerInterface $language_manager\n   *   The language manager.\n   * @param \\Drupal\\Core\\Cache\\CacheTagsInvalidatorInterface $cache_tags_invalidator\n   *   The cache tags invalidator.\n   * @param \\Drupal\\Core\\Render\\RendererInterface $renderer\n   *   The renderer.\n   *\/",114],["T_WHITESPACE","\n  ",127],["T_PUBLIC","public",128],["T_WHITESPACE"," ",128],["T_FUNCTION","function",128],["T_WHITESPACE"," ",128],["T_STRING","__construct",128],"(",["T_STRING","ModuleHandlerInterface",128],["T_WHITESPACE"," ",128],["T_VARIABLE","$module_handler",128],",",["T_WHITESPACE"," ",128],["T_STRING","CacheBackendInterface",128],["T_WHITESPACE"," ",128],["T_VARIABLE","$cache",128],",",["T_WHITESPACE"," ",128],["T_STRING","LanguageManagerInterface",128],["T_WHITESPACE"," ",128],["T_VARIABLE","$language_manager",128],",",["T_WHITESPACE"," ",128],["T_STRING","CacheTagsInvalidatorInterface",128],["T_WHITESPACE"," ",128],["T_VARIABLE","$cache_tags_invalidator",128],",",["T_WHITESPACE"," ",128],["T_STRING","RendererInterface",128],["T_WHITESPACE"," ",128],["T_VARIABLE","$renderer",128],")",["T_WHITESPACE"," ",128],"{",["T_WHITESPACE","\n    ",128],["T_VARIABLE","$this",129],["T_OBJECT_OPERATOR","->",129],["T_STRING","cache",129],["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_VARIABLE","$cache",129],";",["T_WHITESPACE","\n    ",129],["T_VARIABLE","$this",130],["T_OBJECT_OPERATOR","->",130],["T_STRING","languageManager",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_VARIABLE","$language_manager",130],";",["T_WHITESPACE","\n    ",130],["T_VARIABLE","$this",131],["T_OBJECT_OPERATOR","->",131],["T_STRING","moduleHandler",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_VARIABLE","$module_handler",131],";",["T_WHITESPACE","\n    ",131],["T_VARIABLE","$this",132],["T_OBJECT_OPERATOR","->",132],["T_STRING","cacheTagsInvalidator",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_VARIABLE","$cache_tags_invalidator",132],";",["T_WHITESPACE","\n    ",132],["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","renderer",133],["T_WHITESPACE"," ",133],"=",["T_WHITESPACE"," ",133],["T_VARIABLE","$renderer",133],";",["T_WHITESPACE","\n  ",133],"}",["T_WHITESPACE","\n\n  ",134],["T_DOC_COMMENT","\/**\n   * Replaces all tokens in a given string with appropriate values.\n   *\n   * @param string $text\n   *   An HTML string containing replaceable tokens. The caller is responsible\n   *   for calling \\Drupal\\Component\\Utility\\Html::escape() in case the $text\n   *   was plain text.\n   * @param array $data\n   *   (optional) An array of keyed objects. For simple replacement scenarios\n   *   'node', 'user', and others are common keys, with an accompanying node or\n   *   user object being the value. Some token types, like 'site', do not require\n   *   any explicit information from $data and can be replaced even if it is\n   *   empty.\n   * @param array $options\n   *   (optional) A keyed array of settings and flags to control the token\n   *   replacement process. Supported options are:\n   *   - langcode: A language code to be used when generating locale-sensitive\n   *     tokens.\n   *   - callback: A callback function that will be used to post-process the\n   *     array of token replacements after they are generated.\n   *   - clear: A boolean flag indicating that tokens should be removed from the\n   *     final text if no replacement value can be generated.\n   * @param \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata|null\n   *   (optional) An object to which static::generate() and the hooks and\n   *   functions that it invokes will add their required bubbleable metadata.\n   *\n   *   To ensure that the metadata associated with the token replacements gets\n   *   attached to the same render array that contains the token-replaced text,\n   *   callers of this method are encouraged to pass in a BubbleableMetadata\n   *   object and apply it to the corresponding render array. For example:\n   *   @code\n   *     $bubbleable_metadata = new BubbleableMetadata();\n   *     $build['#markup'] = $token_service->replace('Tokens: [node:nid] [current-user:uid]', ['node' => $node], [], $bubbleable_metadata);\n   *     $bubbleable_metadata->applyTo($build);\n   *   @endcode\n   *\n   *   When the caller does not pass in a BubbleableMetadata object, this\n   *   method creates a local one, and applies the collected metadata to the\n   *   Renderer's currently active render context.\n   *\n   * @return string\n   *   The token result is the entered HTML text with tokens replaced. The\n   *   caller is responsible for choosing the right escaping \/ sanitization. If\n   *   the result is intended to be used as plain text, using\n   *   PlainTextOutput::renderFromHtml() is recommended. If the result is just\n   *   printed as part of a template relying on Twig autoescaping is possible,\n   *   otherwise for example the result can be put into #markup, in which case\n   *   it would be sanitized by Xss::filterAdmin().\n   *\/",136],["T_WHITESPACE","\n  ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","replace",185],"(",["T_VARIABLE","$text",185],",",["T_WHITESPACE"," ",185],["T_ARRAY","array",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$data",185],["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],["T_ARRAY","array",185],"(",")",",",["T_WHITESPACE"," ",185],["T_ARRAY","array",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$options",185],["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],["T_ARRAY","array",185],"(",")",",",["T_WHITESPACE"," ",185],["T_STRING","BubbleableMetadata",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$bubbleable_metadata",185],["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],["T_STRING","NULL",185],")",["T_WHITESPACE"," ",185],"{",["T_WHITESPACE","\n    ",185],["T_VARIABLE","$text_tokens",186],["T_WHITESPACE"," ",186],"=",["T_WHITESPACE"," ",186],["T_VARIABLE","$this",186],["T_OBJECT_OPERATOR","->",186],["T_STRING","scan",186],"(",["T_VARIABLE","$text",186],")",";",["T_WHITESPACE","\n    ",186],["T_IF","if",187],["T_WHITESPACE"," ",187],"(",["T_EMPTY","empty",187],"(",["T_VARIABLE","$text_tokens",187],")",")",["T_WHITESPACE"," ",187],"{",["T_WHITESPACE","\n      ",187],["T_RETURN","return",188],["T_WHITESPACE"," ",188],["T_VARIABLE","$text",188],";",["T_WHITESPACE","\n    ",188],"}",["T_WHITESPACE","\n\n    ",189],["T_VARIABLE","$bubbleable_metadata_is_passed_in",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_BOOL_CAST","(bool)",191],["T_WHITESPACE"," ",191],["T_VARIABLE","$bubbleable_metadata",191],";",["T_WHITESPACE","\n    ",191],["T_VARIABLE","$bubbleable_metadata",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_VARIABLE","$bubbleable_metadata",192],["T_WHITESPACE"," ",192],"?",":",["T_WHITESPACE"," ",192],["T_NEW","new",192],["T_WHITESPACE"," ",192],["T_STRING","BubbleableMetadata",192],"(",")",";",["T_WHITESPACE","\n\n    ",192],["T_VARIABLE","$replacements",194],["T_WHITESPACE"," ",194],"=",["T_WHITESPACE"," ",194],["T_ARRAY","array",194],"(",")",";",["T_WHITESPACE","\n    ",194],["T_FOREACH","foreach",195],["T_WHITESPACE"," ",195],"(",["T_VARIABLE","$text_tokens",195],["T_WHITESPACE"," ",195],["T_AS","as",195],["T_WHITESPACE"," ",195],["T_VARIABLE","$type",195],["T_WHITESPACE"," ",195],["T_DOUBLE_ARROW","=>",195],["T_WHITESPACE"," ",195],["T_VARIABLE","$tokens",195],")",["T_WHITESPACE"," ",195],"{",["T_WHITESPACE","\n      ",195],["T_VARIABLE","$replacements",196],["T_WHITESPACE"," ",196],["T_PLUS_EQUAL","+=",196],["T_WHITESPACE"," ",196],["T_VARIABLE","$this",196],["T_OBJECT_OPERATOR","->",196],["T_STRING","generate",196],"(",["T_VARIABLE","$type",196],",",["T_WHITESPACE"," ",196],["T_VARIABLE","$tokens",196],",",["T_WHITESPACE"," ",196],["T_VARIABLE","$data",196],",",["T_WHITESPACE"," ",196],["T_VARIABLE","$options",196],",",["T_WHITESPACE"," ",196],["T_VARIABLE","$bubbleable_metadata",196],")",";",["T_WHITESPACE","\n      ",196],["T_IF","if",197],["T_WHITESPACE"," ",197],"(","!",["T_EMPTY","empty",197],"(",["T_VARIABLE","$options",197],"[",["T_CONSTANT_ENCAPSED_STRING","'clear'",197],"]",")",")",["T_WHITESPACE"," ",197],"{",["T_WHITESPACE","\n        ",197],["T_VARIABLE","$replacements",198],["T_WHITESPACE"," ",198],["T_PLUS_EQUAL","+=",198],["T_WHITESPACE"," ",198],["T_STRING","array_fill_keys",198],"(",["T_VARIABLE","$tokens",198],",",["T_WHITESPACE"," ",198],["T_CONSTANT_ENCAPSED_STRING","''",198],")",";",["T_WHITESPACE","\n      ",198],"}",["T_WHITESPACE","\n    ",199],"}",["T_WHITESPACE","\n\n    ",200],["T_COMMENT","\/\/ Escape the tokens, unless they are explicitly markup.\n",202],["T_WHITESPACE","    ",203],["T_FOREACH","foreach",203],["T_WHITESPACE"," ",203],"(",["T_VARIABLE","$replacements",203],["T_WHITESPACE"," ",203],["T_AS","as",203],["T_WHITESPACE"," ",203],["T_VARIABLE","$token",203],["T_WHITESPACE"," ",203],["T_DOUBLE_ARROW","=>",203],["T_WHITESPACE"," ",203],["T_VARIABLE","$value",203],")",["T_WHITESPACE"," ",203],"{",["T_WHITESPACE","\n      ",203],["T_VARIABLE","$replacements",204],"[",["T_VARIABLE","$token",204],"]",["T_WHITESPACE"," ",204],"=",["T_WHITESPACE"," ",204],["T_VARIABLE","$value",204],["T_WHITESPACE"," ",204],["T_INSTANCEOF","instanceof",204],["T_WHITESPACE"," ",204],["T_STRING","MarkupInterface",204],["T_WHITESPACE"," ",204],"?",["T_WHITESPACE"," ",204],["T_VARIABLE","$value",204],["T_WHITESPACE"," ",204],":",["T_WHITESPACE"," ",204],["T_NEW","new",204],["T_WHITESPACE"," ",204],["T_STRING","HtmlEscapedText",204],"(",["T_VARIABLE","$value",204],")",";",["T_WHITESPACE","\n    ",204],"}",["T_WHITESPACE","\n\n    ",205],["T_COMMENT","\/\/ Optionally alter the list of replacement values.\n",207],["T_WHITESPACE","    ",208],["T_IF","if",208],["T_WHITESPACE"," ",208],"(","!",["T_EMPTY","empty",208],"(",["T_VARIABLE","$options",208],"[",["T_CONSTANT_ENCAPSED_STRING","'callback'",208],"]",")",")",["T_WHITESPACE"," ",208],"{",["T_WHITESPACE","\n      ",208],["T_VARIABLE","$function",209],["T_WHITESPACE"," ",209],"=",["T_WHITESPACE"," ",209],["T_VARIABLE","$options",209],"[",["T_CONSTANT_ENCAPSED_STRING","'callback'",209],"]",";",["T_WHITESPACE","\n      ",209],["T_VARIABLE","$function",210],"(",["T_VARIABLE","$replacements",210],",",["T_WHITESPACE"," ",210],["T_VARIABLE","$data",210],",",["T_WHITESPACE"," ",210],["T_VARIABLE","$options",210],",",["T_WHITESPACE"," ",210],["T_VARIABLE","$bubbleable_metadata",210],")",";",["T_WHITESPACE","\n    ",210],"}",["T_WHITESPACE","\n\n    ",211],["T_VARIABLE","$tokens",213],["T_WHITESPACE"," ",213],"=",["T_WHITESPACE"," ",213],["T_STRING","array_keys",213],"(",["T_VARIABLE","$replacements",213],")",";",["T_WHITESPACE","\n    ",213],["T_VARIABLE","$values",214],["T_WHITESPACE"," ",214],"=",["T_WHITESPACE"," ",214],["T_STRING","array_values",214],"(",["T_VARIABLE","$replacements",214],")",";",["T_WHITESPACE","\n\n    ",214],["T_COMMENT","\/\/ If a local $bubbleable_metadata object was created, apply the metadata\n",216],["T_WHITESPACE","    ",217],["T_COMMENT","\/\/ it collected to the renderer's currently active render context.\n",217],["T_WHITESPACE","    ",218],["T_IF","if",218],["T_WHITESPACE"," ",218],"(","!",["T_VARIABLE","$bubbleable_metadata_is_passed_in",218],["T_WHITESPACE"," ",218],["T_BOOLEAN_AND","&&",218],["T_WHITESPACE"," ",218],["T_VARIABLE","$this",218],["T_OBJECT_OPERATOR","->",218],["T_STRING","renderer",218],["T_OBJECT_OPERATOR","->",218],["T_STRING","hasRenderContext",218],"(",")",")",["T_WHITESPACE"," ",218],"{",["T_WHITESPACE","\n      ",218],["T_VARIABLE","$build",219],["T_WHITESPACE"," ",219],"=",["T_WHITESPACE"," ",219],"[","]",";",["T_WHITESPACE","\n      ",219],["T_VARIABLE","$bubbleable_metadata",220],["T_OBJECT_OPERATOR","->",220],["T_STRING","applyTo",220],"(",["T_VARIABLE","$build",220],")",";",["T_WHITESPACE","\n      ",220],["T_VARIABLE","$this",221],["T_OBJECT_OPERATOR","->",221],["T_STRING","renderer",221],["T_OBJECT_OPERATOR","->",221],["T_STRING","render",221],"(",["T_VARIABLE","$build",221],")",";",["T_WHITESPACE","\n    ",221],"}",["T_WHITESPACE","\n\n    ",222],["T_RETURN","return",224],["T_WHITESPACE"," ",224],["T_STRING","str_replace",224],"(",["T_VARIABLE","$tokens",224],",",["T_WHITESPACE"," ",224],["T_VARIABLE","$values",224],",",["T_WHITESPACE"," ",224],["T_VARIABLE","$text",224],")",";",["T_WHITESPACE","\n  ",224],"}",["T_WHITESPACE","\n\n  ",225],["T_DOC_COMMENT","\/**\n   * Builds a list of all token-like patterns that appear in the text.\n   *\n   * @param string $text\n   *   The text to be scanned for possible tokens.\n   *\n   * @return array\n   *   An associative array of discovered tokens, grouped by type.\n   *\/",227],["T_WHITESPACE","\n  ",235],["T_PUBLIC","public",236],["T_WHITESPACE"," ",236],["T_FUNCTION","function",236],["T_WHITESPACE"," ",236],["T_STRING","scan",236],"(",["T_VARIABLE","$text",236],")",["T_WHITESPACE"," ",236],"{",["T_WHITESPACE","\n    ",236],["T_COMMENT","\/\/ Matches tokens with the following pattern: [$type:$name]\n",237],["T_WHITESPACE","    ",238],["T_COMMENT","\/\/ $type and $name may not contain [ ] characters.\n",238],["T_WHITESPACE","    ",239],["T_COMMENT","\/\/ $type may not contain : or whitespace characters, but $name may.\n",239],["T_WHITESPACE","    ",240],["T_STRING","preg_match_all",240],"(",["T_CONSTANT_ENCAPSED_STRING","'\/\n      \\[             # [ - pattern start\n      ([^\\s\\[\\]:]+)  # match $type not containing whitespace : [ or ]\n      :              # : - separator\n      ([^\\[\\]]+)     # match $name not containing [ or ]\n      \\]             # ] - pattern end\n      \/x'",240],",",["T_WHITESPACE"," ",246],["T_VARIABLE","$text",246],",",["T_WHITESPACE"," ",246],["T_VARIABLE","$matches",246],")",";",["T_WHITESPACE","\n\n    ",246],["T_VARIABLE","$types",248],["T_WHITESPACE"," ",248],"=",["T_WHITESPACE"," ",248],["T_VARIABLE","$matches",248],"[",["T_LNUMBER","1",248],"]",";",["T_WHITESPACE","\n    ",248],["T_VARIABLE","$tokens",249],["T_WHITESPACE"," ",249],"=",["T_WHITESPACE"," ",249],["T_VARIABLE","$matches",249],"[",["T_LNUMBER","2",249],"]",";",["T_WHITESPACE","\n\n    ",249],["T_COMMENT","\/\/ Iterate through the matches, building an associative array containing\n",251],["T_WHITESPACE","    ",252],["T_COMMENT","\/\/ $tokens grouped by $types, pointing to the version of the token found in\n",252],["T_WHITESPACE","    ",253],["T_COMMENT","\/\/ the source text. For example, $results['node']['title'] = '[node:title]';\n",253],["T_WHITESPACE","    ",254],["T_VARIABLE","$results",254],["T_WHITESPACE"," ",254],"=",["T_WHITESPACE"," ",254],["T_ARRAY","array",254],"(",")",";",["T_WHITESPACE","\n    ",254],["T_FOR","for",255],["T_WHITESPACE"," ",255],"(",["T_VARIABLE","$i",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_LNUMBER","0",255],";",["T_WHITESPACE"," ",255],["T_VARIABLE","$i",255],["T_WHITESPACE"," ",255],"<",["T_WHITESPACE"," ",255],["T_STRING","count",255],"(",["T_VARIABLE","$tokens",255],")",";",["T_WHITESPACE"," ",255],["T_VARIABLE","$i",255],["T_INC","++",255],")",["T_WHITESPACE"," ",255],"{",["T_WHITESPACE","\n      ",255],["T_VARIABLE","$results",256],"[",["T_VARIABLE","$types",256],"[",["T_VARIABLE","$i",256],"]","]","[",["T_VARIABLE","$tokens",256],"[",["T_VARIABLE","$i",256],"]","]",["T_WHITESPACE"," ",256],"=",["T_WHITESPACE"," ",256],["T_VARIABLE","$matches",256],"[",["T_LNUMBER","0",256],"]","[",["T_VARIABLE","$i",256],"]",";",["T_WHITESPACE","\n    ",256],"}",["T_WHITESPACE","\n\n    ",257],["T_RETURN","return",259],["T_WHITESPACE"," ",259],["T_VARIABLE","$results",259],";",["T_WHITESPACE","\n  ",259],"}",["T_WHITESPACE","\n\n  ",260],["T_DOC_COMMENT","\/**\n   * Generates replacement values for a list of tokens.\n   *\n   * @param string $type\n   *   The type of token being replaced. 'node', 'user', and 'date' are common.\n   * @param array $tokens\n   *   An array of tokens to be replaced, keyed by the literal text of the token\n   *   as it appeared in the source text.\n   * @param array $data\n   *   An array of keyed objects. For simple replacement scenarios: 'node',\n   *   'user', and others are common keys, with an accompanying node or user\n   *   object being the value. Some token types, like 'site', do not require\n   *   any explicit information from $data and can be replaced even if it is\n   *   empty.\n   * @param array $options\n   *   A keyed array of settings and flags to control the token replacement\n   *   process. Supported options are:\n   *   - langcode: A language code to be used when generating locale-sensitive\n   *     tokens.\n   *   - callback: A callback function that will be used to post-process the\n   *     array of token replacements after they are generated. Can be used when\n   *     modules require special formatting of token text, for example URL\n   *     encoding or truncation to a specific length.\n   * @param \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata\n   *    The bubbleable metadata. This is passed to the token replacement\n   *    implementations so that they can attach their metadata.\n   *\n   * @return array\n   *   An associative array of replacement values, keyed by the original 'raw'\n   *   tokens that were found in the source text. For example:\n   *   $results['[node:title]'] = 'My new node';\n   *\n   * @see hook_tokens()\n   * @see hook_tokens_alter()\n   *\/",262],["T_WHITESPACE","\n  ",296],["T_PUBLIC","public",297],["T_WHITESPACE"," ",297],["T_FUNCTION","function",297],["T_WHITESPACE"," ",297],["T_STRING","generate",297],"(",["T_VARIABLE","$type",297],",",["T_WHITESPACE"," ",297],["T_ARRAY","array",297],["T_WHITESPACE"," ",297],["T_VARIABLE","$tokens",297],",",["T_WHITESPACE"," ",297],["T_ARRAY","array",297],["T_WHITESPACE"," ",297],["T_VARIABLE","$data",297],",",["T_WHITESPACE"," ",297],["T_ARRAY","array",297],["T_WHITESPACE"," ",297],["T_VARIABLE","$options",297],",",["T_WHITESPACE"," ",297],["T_STRING","BubbleableMetadata",297],["T_WHITESPACE"," ",297],["T_VARIABLE","$bubbleable_metadata",297],")",["T_WHITESPACE"," ",297],"{",["T_WHITESPACE","\n    ",297],["T_FOREACH","foreach",298],["T_WHITESPACE"," ",298],"(",["T_VARIABLE","$data",298],["T_WHITESPACE"," ",298],["T_AS","as",298],["T_WHITESPACE"," ",298],["T_VARIABLE","$object",298],")",["T_WHITESPACE"," ",298],"{",["T_WHITESPACE","\n      ",298],["T_IF","if",299],["T_WHITESPACE"," ",299],"(",["T_VARIABLE","$object",299],["T_WHITESPACE"," ",299],["T_INSTANCEOF","instanceof",299],["T_WHITESPACE"," ",299],["T_STRING","CacheableDependencyInterface",299],["T_WHITESPACE"," ",299],["T_BOOLEAN_OR","||",299],["T_WHITESPACE"," ",299],["T_VARIABLE","$object",299],["T_WHITESPACE"," ",299],["T_INSTANCEOF","instanceof",299],["T_WHITESPACE"," ",299],["T_STRING","AttachmentsInterface",299],")",["T_WHITESPACE"," ",299],"{",["T_WHITESPACE","\n        ",299],["T_VARIABLE","$bubbleable_metadata",300],["T_OBJECT_OPERATOR","->",300],["T_STRING","addCacheableDependency",300],"(",["T_VARIABLE","$object",300],")",";",["T_WHITESPACE","\n      ",300],"}",["T_WHITESPACE","\n    ",301],"}",["T_WHITESPACE","\n\n    ",302],["T_VARIABLE","$replacements",304],["T_WHITESPACE"," ",304],"=",["T_WHITESPACE"," ",304],["T_VARIABLE","$this",304],["T_OBJECT_OPERATOR","->",304],["T_STRING","moduleHandler",304],["T_OBJECT_OPERATOR","->",304],["T_STRING","invokeAll",304],"(",["T_CONSTANT_ENCAPSED_STRING","'tokens'",304],",",["T_WHITESPACE"," ",304],"[",["T_VARIABLE","$type",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$tokens",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$data",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$options",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$bubbleable_metadata",304],"]",")",";",["T_WHITESPACE","\n\n    ",304],["T_COMMENT","\/\/ Allow other modules to alter the replacements.\n",306],["T_WHITESPACE","    ",307],["T_VARIABLE","$context",307],["T_WHITESPACE"," ",307],"=",["T_WHITESPACE"," ",307],["T_ARRAY","array",307],"(",["T_WHITESPACE","\n      ",307],["T_CONSTANT_ENCAPSED_STRING","'type'",308],["T_WHITESPACE"," ",308],["T_DOUBLE_ARROW","=>",308],["T_WHITESPACE"," ",308],["T_VARIABLE","$type",308],",",["T_WHITESPACE","\n      ",308],["T_CONSTANT_ENCAPSED_STRING","'tokens'",309],["T_WHITESPACE"," ",309],["T_DOUBLE_ARROW","=>",309],["T_WHITESPACE"," ",309],["T_VARIABLE","$tokens",309],",",["T_WHITESPACE","\n      ",309],["T_CONSTANT_ENCAPSED_STRING","'data'",310],["T_WHITESPACE"," ",310],["T_DOUBLE_ARROW","=>",310],["T_WHITESPACE"," ",310],["T_VARIABLE","$data",310],",",["T_WHITESPACE","\n      ",310],["T_CONSTANT_ENCAPSED_STRING","'options'",311],["T_WHITESPACE"," ",311],["T_DOUBLE_ARROW","=>",311],["T_WHITESPACE"," ",311],["T_VARIABLE","$options",311],",",["T_WHITESPACE","\n    ",311],")",";",["T_WHITESPACE","\n    ",312],["T_VARIABLE","$this",313],["T_OBJECT_OPERATOR","->",313],["T_STRING","moduleHandler",313],["T_OBJECT_OPERATOR","->",313],["T_STRING","alter",313],"(",["T_CONSTANT_ENCAPSED_STRING","'tokens'",313],",",["T_WHITESPACE"," ",313],["T_VARIABLE","$replacements",313],",",["T_WHITESPACE"," ",313],["T_VARIABLE","$context",313],",",["T_WHITESPACE"," ",313],["T_VARIABLE","$bubbleable_metadata",313],")",";",["T_WHITESPACE","\n\n    ",313],["T_RETURN","return",315],["T_WHITESPACE"," ",315],["T_VARIABLE","$replacements",315],";",["T_WHITESPACE","\n  ",315],"}",["T_WHITESPACE","\n\n  ",316],["T_DOC_COMMENT","\/**\n   * Returns a list of tokens that begin with a specific prefix.\n   *\n   * Used to extract a group of 'chained' tokens (such as [node:author:name])\n   * from the full list of tokens found in text. For example:\n   * @code\n   *   $data = array(\n   *     'author:name' => '[node:author:name]',\n   *     'title'       => '[node:title]',\n   *     'created'     => '[node:created]',\n   *   );\n   *   $results = Token::findWithPrefix($data, 'author');\n   *   $results == array('name' => '[node:author:name]');\n   * @endcode\n   *\n   * @param array $tokens\n   *   A keyed array of tokens, and their original raw form in the source text.\n   * @param string $prefix\n   *   A textual string to be matched at the beginning of the token.\n   * @param string $delimiter\n   *   (optional) A string containing the character that separates the prefix from\n   *   the rest of the token. Defaults to ':'.\n   *\n   * @return array\n   *   An associative array of discovered tokens, with the prefix and delimiter\n   *   stripped from the key.\n   *\/",318],["T_WHITESPACE","\n  ",344],["T_PUBLIC","public",345],["T_WHITESPACE"," ",345],["T_FUNCTION","function",345],["T_WHITESPACE"," ",345],["T_STRING","findWithPrefix",345],"(",["T_ARRAY","array",345],["T_WHITESPACE"," ",345],["T_VARIABLE","$tokens",345],",",["T_WHITESPACE"," ",345],["T_VARIABLE","$prefix",345],",",["T_WHITESPACE"," ",345],["T_VARIABLE","$delimiter",345],["T_WHITESPACE"," ",345],"=",["T_WHITESPACE"," ",345],["T_CONSTANT_ENCAPSED_STRING","':'",345],")",["T_WHITESPACE"," ",345],"{",["T_WHITESPACE","\n    ",345],["T_VARIABLE","$results",346],["T_WHITESPACE"," ",346],"=",["T_WHITESPACE"," ",346],["T_ARRAY","array",346],"(",")",";",["T_WHITESPACE","\n    ",346],["T_FOREACH","foreach",347],["T_WHITESPACE"," ",347],"(",["T_VARIABLE","$tokens",347],["T_WHITESPACE"," ",347],["T_AS","as",347],["T_WHITESPACE"," ",347],["T_VARIABLE","$token",347],["T_WHITESPACE"," ",347],["T_DOUBLE_ARROW","=>",347],["T_WHITESPACE"," ",347],["T_VARIABLE","$raw",347],")",["T_WHITESPACE"," ",347],"{",["T_WHITESPACE","\n      ",347],["T_VARIABLE","$parts",348],["T_WHITESPACE"," ",348],"=",["T_WHITESPACE"," ",348],["T_STRING","explode",348],"(",["T_VARIABLE","$delimiter",348],",",["T_WHITESPACE"," ",348],["T_VARIABLE","$token",348],",",["T_WHITESPACE"," ",348],["T_LNUMBER","2",348],")",";",["T_WHITESPACE","\n      ",348],["T_IF","if",349],["T_WHITESPACE"," ",349],"(",["T_STRING","count",349],"(",["T_VARIABLE","$parts",349],")",["T_WHITESPACE"," ",349],["T_IS_EQUAL","==",349],["T_WHITESPACE"," ",349],["T_LNUMBER","2",349],["T_WHITESPACE"," ",349],["T_BOOLEAN_AND","&&",349],["T_WHITESPACE"," ",349],["T_VARIABLE","$parts",349],"[",["T_LNUMBER","0",349],"]",["T_WHITESPACE"," ",349],["T_IS_EQUAL","==",349],["T_WHITESPACE"," ",349],["T_VARIABLE","$prefix",349],")",["T_WHITESPACE"," ",349],"{",["T_WHITESPACE","\n        ",349],["T_VARIABLE","$results",350],"[",["T_VARIABLE","$parts",350],"[",["T_LNUMBER","1",350],"]","]",["T_WHITESPACE"," ",350],"=",["T_WHITESPACE"," ",350],["T_VARIABLE","$raw",350],";",["T_WHITESPACE","\n      ",350],"}",["T_WHITESPACE","\n    ",351],"}",["T_WHITESPACE","\n    ",352],["T_RETURN","return",353],["T_WHITESPACE"," ",353],["T_VARIABLE","$results",353],";",["T_WHITESPACE","\n  ",353],"}",["T_WHITESPACE","\n\n  ",354],["T_DOC_COMMENT","\/**\n   * Returns metadata describing supported tokens.\n   *\n   * The metadata array contains token type, name, and description data as well\n   * as an optional pointer indicating that the token chains to another set of\n   * tokens.\n   *\n   * @return array\n   *   An associative array of token information, grouped by token type. The\n   *   array structure is identical to that of hook_token_info().\n   *\n   * @see hook_token_info()\n   *\/",356],["T_WHITESPACE","\n  ",368],["T_PUBLIC","public",369],["T_WHITESPACE"," ",369],["T_FUNCTION","function",369],["T_WHITESPACE"," ",369],["T_STRING","getInfo",369],"(",")",["T_WHITESPACE"," ",369],"{",["T_WHITESPACE","\n    ",369],["T_IF","if",370],["T_WHITESPACE"," ",370],"(",["T_STRING","is_null",370],"(",["T_VARIABLE","$this",370],["T_OBJECT_OPERATOR","->",370],["T_STRING","tokenInfo",370],")",")",["T_WHITESPACE"," ",370],"{",["T_WHITESPACE","\n      ",370],["T_VARIABLE","$cache_id",371],["T_WHITESPACE"," ",371],"=",["T_WHITESPACE"," ",371],["T_CONSTANT_ENCAPSED_STRING","'token_info:'",371],["T_WHITESPACE"," ",371],".",["T_WHITESPACE"," ",371],["T_VARIABLE","$this",371],["T_OBJECT_OPERATOR","->",371],["T_STRING","languageManager",371],["T_OBJECT_OPERATOR","->",371],["T_STRING","getCurrentLanguage",371],"(",["T_STRING","LanguageInterface",371],["T_DOUBLE_COLON","::",371],["T_STRING","TYPE_CONTENT",371],")",["T_OBJECT_OPERATOR","->",371],["T_STRING","getId",371],"(",")",";",["T_WHITESPACE","\n      ",371],["T_VARIABLE","$cache",372],["T_WHITESPACE"," ",372],"=",["T_WHITESPACE"," ",372],["T_VARIABLE","$this",372],["T_OBJECT_OPERATOR","->",372],["T_STRING","cache",372],["T_OBJECT_OPERATOR","->",372],["T_STRING","get",372],"(",["T_VARIABLE","$cache_id",372],")",";",["T_WHITESPACE","\n      ",372],["T_IF","if",373],["T_WHITESPACE"," ",373],"(",["T_VARIABLE","$cache",373],")",["T_WHITESPACE"," ",373],"{",["T_WHITESPACE","\n        ",373],["T_VARIABLE","$this",374],["T_OBJECT_OPERATOR","->",374],["T_STRING","tokenInfo",374],["T_WHITESPACE"," ",374],"=",["T_WHITESPACE"," ",374],["T_VARIABLE","$cache",374],["T_OBJECT_OPERATOR","->",374],["T_STRING","data",374],";",["T_WHITESPACE","\n      ",374],"}",["T_WHITESPACE","\n      ",375],["T_ELSE","else",376],["T_WHITESPACE"," ",376],"{",["T_WHITESPACE","\n        ",376],["T_VARIABLE","$this",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","tokenInfo",377],["T_WHITESPACE"," ",377],"=",["T_WHITESPACE"," ",377],["T_VARIABLE","$this",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","moduleHandler",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","invokeAll",377],"(",["T_CONSTANT_ENCAPSED_STRING","'token_info'",377],")",";",["T_WHITESPACE","\n        ",377],["T_VARIABLE","$this",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","moduleHandler",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","alter",378],"(",["T_CONSTANT_ENCAPSED_STRING","'token_info'",378],",",["T_WHITESPACE"," ",378],["T_VARIABLE","$this",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","tokenInfo",378],")",";",["T_WHITESPACE","\n        ",378],["T_VARIABLE","$this",379],["T_OBJECT_OPERATOR","->",379],["T_STRING","cache",379],["T_OBJECT_OPERATOR","->",379],["T_STRING","set",379],"(",["T_VARIABLE","$cache_id",379],",",["T_WHITESPACE"," ",379],["T_VARIABLE","$this",379],["T_OBJECT_OPERATOR","->",379],["T_STRING","tokenInfo",379],",",["T_WHITESPACE"," ",379],["T_STRING","CacheBackendInterface",379],["T_DOUBLE_COLON","::",379],["T_STRING","CACHE_PERMANENT",379],",",["T_WHITESPACE"," ",379],["T_ARRAY","array",379],"(",["T_WHITESPACE","\n          ",379],["T_STATIC","static",380],["T_DOUBLE_COLON","::",380],["T_STRING","TOKEN_INFO_CACHE_TAG",380],",",["T_WHITESPACE","\n        ",380],")",")",";",["T_WHITESPACE","\n      ",381],"}",["T_WHITESPACE","\n    ",382],"}",["T_WHITESPACE","\n\n    ",383],["T_RETURN","return",385],["T_WHITESPACE"," ",385],["T_VARIABLE","$this",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","tokenInfo",385],";",["T_WHITESPACE","\n  ",385],"}",["T_WHITESPACE","\n\n  ",386],["T_DOC_COMMENT","\/**\n   * Sets metadata describing supported tokens.\n   *\n   * @param array $tokens\n   *   Token metadata that has an identical structure to the return value of\n   *   hook_token_info().\n   *\n   * @see hook_token_info()\n   *\/",388],["T_WHITESPACE","\n  ",396],["T_PUBLIC","public",397],["T_WHITESPACE"," ",397],["T_FUNCTION","function",397],["T_WHITESPACE"," ",397],["T_STRING","setInfo",397],"(",["T_ARRAY","array",397],["T_WHITESPACE"," ",397],["T_VARIABLE","$tokens",397],")",["T_WHITESPACE"," ",397],"{",["T_WHITESPACE","\n    ",397],["T_VARIABLE","$this",398],["T_OBJECT_OPERATOR","->",398],["T_STRING","tokenInfo",398],["T_WHITESPACE"," ",398],"=",["T_WHITESPACE"," ",398],["T_VARIABLE","$tokens",398],";",["T_WHITESPACE","\n  ",398],"}",["T_WHITESPACE","\n\n  ",399],["T_DOC_COMMENT","\/**\n   * Resets metadata describing supported tokens.\n   *\/",401],["T_WHITESPACE","\n  ",403],["T_PUBLIC","public",404],["T_WHITESPACE"," ",404],["T_FUNCTION","function",404],["T_WHITESPACE"," ",404],["T_STRING","resetInfo",404],"(",")",["T_WHITESPACE"," ",404],"{",["T_WHITESPACE","\n    ",404],["T_VARIABLE","$this",405],["T_OBJECT_OPERATOR","->",405],["T_STRING","tokenInfo",405],["T_WHITESPACE"," ",405],"=",["T_WHITESPACE"," ",405],["T_STRING","NULL",405],";",["T_WHITESPACE","\n    ",405],["T_VARIABLE","$this",406],["T_OBJECT_OPERATOR","->",406],["T_STRING","cacheTagsInvalidator",406],["T_OBJECT_OPERATOR","->",406],["T_STRING","invalidateTags",406],"(","[",["T_STATIC","static",406],["T_DOUBLE_COLON","::",406],["T_STRING","TOKEN_INFO_CACHE_TAG",406],"]",")",";",["T_WHITESPACE","\n  ",406],"}",["T_WHITESPACE","\n\n",407],"}",["T_WHITESPACE","\n",409]]