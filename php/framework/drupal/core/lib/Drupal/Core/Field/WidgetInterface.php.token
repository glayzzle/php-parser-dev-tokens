[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Form",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FormStateInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Symfony",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Validator",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ConstraintViolationInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Interface definition for field widget plugins.\n *\n * This interface details the methods that most plugin implementations will want\n * to override. See Drupal\\Core\\Field\\WidgetBaseInterface for base\n * wrapping methods that should most likely be inherited directly from\n * Drupal\\Core\\Field\\WidgetBase..\n *\n * @ingroup field_widget\n *\/",8],["T_WHITESPACE","\n",17],["T_INTERFACE","interface",18],["T_WHITESPACE"," ",18],["T_STRING","WidgetInterface",18],["T_WHITESPACE"," ",18],["T_EXTENDS","extends",18],["T_WHITESPACE"," ",18],["T_STRING","WidgetBaseInterface",18],["T_WHITESPACE"," ",18],"{",["T_WHITESPACE","\n\n  ",18],["T_DOC_COMMENT","\/**\n   * Returns a form to configure settings for the widget.\n   *\n   * Invoked from \\Drupal\\field_ui\\Form\\EntityDisplayFormBase to allow\n   * administrators to configure the widget. The field_ui module takes care of\n   * handling submitted form values.\n   *\n   * @param array $form\n   *   The form where the settings form is being included in.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return array\n   *   The form definition for the widget settings.\n   *\/",20],["T_WHITESPACE","\n  ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","settingsForm",35],"(",["T_ARRAY","array",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$form",35],",",["T_WHITESPACE"," ",35],["T_STRING","FormStateInterface",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$form_state",35],")",";",["T_WHITESPACE","\n\n  ",35],["T_DOC_COMMENT","\/**\n   * Returns a short summary for the current widget settings.\n   *\n   * If an empty result is returned, a UI can still be provided to display\n   * a settings form in case the widget has configurable settings.\n   *\n   * @return array\n   *   A short summary of the widget settings.\n   *\/",37],["T_WHITESPACE","\n  ",45],["T_PUBLIC","public",46],["T_WHITESPACE"," ",46],["T_FUNCTION","function",46],["T_WHITESPACE"," ",46],["T_STRING","settingsSummary",46],"(",")",";",["T_WHITESPACE","\n\n  ",46],["T_DOC_COMMENT","\/**\n   * Returns the form for a single field widget.\n   *\n   * Field widget form elements should be based on the passed-in $element, which\n   * contains the base form element properties derived from the field\n   * configuration.\n   *\n   * The BaseWidget methods will set the weight, field name and delta values for\n   * each form element. If there are multiple values for this field, the\n   * formElement() method will be called as many times as needed.\n   *\n   * Other modules may alter the form element provided by this function using\n   * hook_field_widget_form_alter() or\n   * hook_field_widget_WIDGET_TYPE_form_alter().\n   *\n   * The FAPI element callbacks (such as #process, #element_validate,\n   * #value_callback, etc.) used by the widget do not have access to the\n   * original $field_definition passed to the widget's constructor. Therefore,\n   * if any information is needed from that definition by those callbacks, the\n   * widget implementing this method, or a\n   * hook_field_widget[_WIDGET_TYPE]_form_alter() implementation, must extract\n   * the needed properties from the field definition and set them as ad-hoc\n   * $element['#custom'] properties, for later use by its element callbacks.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items\n   *   Array of default values for this field.\n   * @param int $delta\n   *   The order of this item in the array of sub-elements (0, 1, 2, etc.).\n   * @param array $element\n   *   A form element array containing basic properties for the widget:\n   *   - #field_parents: The 'parents' space for the field in the form. Most\n   *       widgets can simply overlook this property. This identifies the\n   *       location where the field values are placed within\n   *       $form_state->getValues(), and is used to access processing\n   *       information for the field through the getWidgetState() and\n   *       setWidgetState() methods.\n   *   - #title: The sanitized element label for the field, ready for output.\n   *   - #description: The sanitized element description for the field, ready\n   *     for output.\n   *   - #required: A Boolean indicating whether the element value is required;\n   *     for required multiple value fields, only the first widget's values are\n   *     required.\n   *   - #delta: The order of this item in the array of sub-elements; see $delta\n   *     above.\n   * @param array $form\n   *   The form structure where widgets are being attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return array\n   *   The form elements for a single widget for this field.\n   *\n   * @see hook_field_widget_form_alter()\n   * @see hook_field_widget_WIDGET_TYPE_form_alter()\n   *\/",48],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","formElement",104],"(",["T_STRING","FieldItemListInterface",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$items",104],",",["T_WHITESPACE"," ",104],["T_VARIABLE","$delta",104],",",["T_WHITESPACE"," ",104],["T_ARRAY","array",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$element",104],",",["T_WHITESPACE"," ",104],["T_ARRAY","array",104],["T_WHITESPACE"," ",104],"&",["T_VARIABLE","$form",104],",",["T_WHITESPACE"," ",104],["T_STRING","FormStateInterface",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$form_state",104],")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Assigns a field-level validation error to the right widget sub-element.\n   *\n   * Depending on the widget's internal structure, a field-level validation\n   * error needs to be flagged on the right sub-element.\n   *\n   * @param array $element\n   *   An array containing the form element for the widget, as generated by\n   *   formElement().\n   * @param \\Symfony\\Component\\Validator\\ConstraintViolationInterface $violation\n   *   A constraint violation reported during the validation phase.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return array|bool\n   *   The element on which the error should be flagged, or FALSE to completely\n   *   ignore the violation (use with care!).\n   *\/",106],["T_WHITESPACE","\n  ",126],["T_PUBLIC","public",127],["T_WHITESPACE"," ",127],["T_FUNCTION","function",127],["T_WHITESPACE"," ",127],["T_STRING","errorElement",127],"(",["T_ARRAY","array",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$element",127],",",["T_WHITESPACE"," ",127],["T_STRING","ConstraintViolationInterface",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$violation",127],",",["T_WHITESPACE"," ",127],["T_ARRAY","array",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$form",127],",",["T_WHITESPACE"," ",127],["T_STRING","FormStateInterface",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$form_state",127],")",";",["T_WHITESPACE","\n\n  ",127],["T_DOC_COMMENT","\/**\n   * Massages the form values into the format expected for field values.\n   *\n   * @param array $values\n   *   The submitted form values produced by the widget.\n   *   - If the widget does not manage multiple values itself, the array holds\n   *     the values generated by the multiple copies of the $element generated\n   *     by the formElement() method, keyed by delta.\n   *   - If the widget manages multiple values, the array holds the values\n   *     of the form element generated by the formElement() method.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\n   * @return array\n   *   An array of field values, keyed by delta.\n   *\/",129],["T_WHITESPACE","\n  ",147],["T_PUBLIC","public",148],["T_WHITESPACE"," ",148],["T_FUNCTION","function",148],["T_WHITESPACE"," ",148],["T_STRING","massageFormValues",148],"(",["T_ARRAY","array",148],["T_WHITESPACE"," ",148],["T_VARIABLE","$values",148],",",["T_WHITESPACE"," ",148],["T_ARRAY","array",148],["T_WHITESPACE"," ",148],["T_VARIABLE","$form",148],",",["T_WHITESPACE"," ",148],["T_STRING","FormStateInterface",148],["T_WHITESPACE"," ",148],["T_VARIABLE","$form_state",148],")",";",["T_WHITESPACE","\n\n  ",148],["T_DOC_COMMENT","\/**\n   * Returns if the widget can be used for the provided field.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition\n   *   The field definition that should be checked.\n   *\n   * @return bool\n   *   TRUE if the widget can be used, FALSE otherwise.\n   *\/",150],["T_WHITESPACE","\n  ",158],["T_PUBLIC","public",159],["T_WHITESPACE"," ",159],["T_STATIC","static",159],["T_WHITESPACE"," ",159],["T_FUNCTION","function",159],["T_WHITESPACE"," ",159],["T_STRING","isApplicable",159],"(",["T_STRING","FieldDefinitionInterface",159],["T_WHITESPACE"," ",159],["T_VARIABLE","$field_definition",159],")",";",["T_WHITESPACE","\n\n",159],"}",["T_WHITESPACE","\n",161]]