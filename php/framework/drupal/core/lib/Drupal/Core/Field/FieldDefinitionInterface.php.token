[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Cache",5],["T_NS_SEPARATOR","\\",5],["T_STRING","CacheableDependencyInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","FieldableEntityInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","TypedData",7],["T_NS_SEPARATOR","\\",7],["T_STRING","ListDataDefinitionInterface",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Defines an interface for entity field definitions.\n *\n * An entity field is a data object that holds the values of a particular field\n * for a particular entity (see \\Drupal\\Core\\Field\\FieldItemListInterface). For\n * example, $node_1->body and $node_2->body contain different data and therefore\n * are different field objects.\n *\n * In contrast, an entity field *definition* is an object that returns\n * information *about* a field (e.g., its type and settings) rather than its\n * values. As such, if all the information about $node_1->body and $node_2->body\n * is the same, then the same field definition object can be used to describe\n * both.\n *\n * It is up to the class implementing this interface to manage where the\n * information comes from. For example, field.module provides an implementation\n * based on two levels of configuration. It allows the site administrator to add\n * custom fields to any entity type and bundle via the \"field_storage_config\"\n * and \"field_config\" configuration entities. The former for storing\n * configuration that is independent of which entity type and bundle the field\n * is added to, and the latter for storing configuration that is specific to the\n * entity type and bundle. The class that implements \"field_config\"\n * configuration entities also implements this interface, returning information\n * from either itself, or from the corresponding \"field_storage_config\"\n * configuration, as appropriate.\n *\n * However, entity base fields, such as $node->title, are not managed by\n * field.module and its \"field_storage_config\"\/\"field_config\"\n * configuration entities. Therefore, their definitions are provided by\n * different objects based on the class \\Drupal\\Core\\Field\\BaseFieldDefinition,\n * which implements this interface as well.\n *\n * Field definitions may fully define a concrete data object (e.g.,\n * $node_1->body), or may provide a best-guess definition for a data object that\n * might come into existence later. For example, $node_1->body and $node_2->body\n * may have different definitions (e.g., if the node types are different). When\n * adding the \"body\" field to a View that can return nodes of different types,\n * the View can get a field definition that represents the \"body\" field\n * abstractly, and present Views configuration options to the administrator\n * based on that abstract definition, even though that abstract definition can\n * differ from the concrete definition of any particular node's body field.\n *\/",9],["T_WHITESPACE","\n",50],["T_INTERFACE","interface",51],["T_WHITESPACE"," ",51],["T_STRING","FieldDefinitionInterface",51],["T_WHITESPACE"," ",51],["T_EXTENDS","extends",51],["T_WHITESPACE"," ",51],["T_STRING","ListDataDefinitionInterface",51],",",["T_WHITESPACE"," ",51],["T_STRING","CacheableDependencyInterface",51],["T_WHITESPACE"," ",51],"{",["T_WHITESPACE","\n\n  ",51],["T_DOC_COMMENT","\/**\n   * Returns the machine name of the field.\n   *\n   * This defines how the field data is accessed from the entity. For example,\n   * if the field name is \"foo\", then $entity->foo returns its data.\n   *\n   * @return string\n   *   The field name.\n   *\/",53],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getName",62],"(",")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Returns the field type.\n   *\n   * @return string\n   *   The field type, i.e. the id of a field type plugin. For example 'text'.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldTypePluginManagerInterface\n   *\/",64],["T_WHITESPACE","\n  ",71],["T_PUBLIC","public",72],["T_WHITESPACE"," ",72],["T_FUNCTION","function",72],["T_WHITESPACE"," ",72],["T_STRING","getType",72],"(",")",";",["T_WHITESPACE","\n\n  ",72],["T_DOC_COMMENT","\/**\n   * Returns the ID of the entity type the field is attached to.\n   *\n   * This method should not be confused with EntityInterface::getEntityTypeId()\n   * (configurable fields are config entities, and thus implement both\n   * interfaces):\n   *   - FieldDefinitionInterface::getTargetEntityTypeId() answers \"as a field,\n   *     which entity type are you attached to?\".\n   *   - EntityInterface::getEntityTypeId() answers \"as a (config) entity, what\n   *     is your own entity type?\".\n   *\n   * @return string\n   *   The entity type ID.\n   *\/",74],["T_WHITESPACE","\n  ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","getTargetEntityTypeId",88],"(",")",";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Gets the bundle the field is attached to.\n   *\n   * This method should not be confused with EntityInterface::bundle()\n   * (configurable fields are config entities, and thus implement both\n   * interfaces):\n   *   - FieldDefinitionInterface::getTargetBundle() answers \"as a field,\n   *     which bundle are you attached to?\".\n   *   - EntityInterface::bundle() answers \"as a (config) entity, what\n   *     is your own bundle?\" (not relevant in our case, the config entity types\n   *     used to store the definitions of configurable fields do not have\n   *     bundles).\n   *\n   * @return string|null\n   *   The bundle the field is defined for, or NULL if it is a base field; i.e.,\n   *   it is not bundle-specific.\n   *\/",90],["T_WHITESPACE","\n  ",106],["T_PUBLIC","public",107],["T_WHITESPACE"," ",107],["T_FUNCTION","function",107],["T_WHITESPACE"," ",107],["T_STRING","getTargetBundle",107],"(",")",";",["T_WHITESPACE","\n\n  ",107],["T_DOC_COMMENT","\/**\n   * Returns whether the display for the field can be configured.\n   *\n   * @param string $display_context\n   *   The display context. Either 'view' or 'form'.\n   *\n   * @return bool\n   *   TRUE if the display for this field is configurable in the given context.\n   *   If TRUE, the display options returned by getDisplayOptions() may be\n   *   overridden via the respective entity display.\n   *\n   * @see \\Drupal\\Core\\Entity\\Display\\EntityDisplayInterface\n   *\/",109],["T_WHITESPACE","\n  ",121],["T_PUBLIC","public",122],["T_WHITESPACE"," ",122],["T_FUNCTION","function",122],["T_WHITESPACE"," ",122],["T_STRING","isDisplayConfigurable",122],"(",["T_VARIABLE","$display_context",122],")",";",["T_WHITESPACE","\n\n  ",122],["T_DOC_COMMENT","\/**\n   * Returns the default display options for the field.\n   *\n   * If the field's display is configurable, the returned display options act\n   * as default values and may be overridden via the respective entity display.\n   * Otherwise, the display options will be applied to entity displays as is.\n   *\n   * @param string $display_context\n   *   The display context. Either 'view' or 'form'.\n   *\n   * @return array|null\n   *   The array of display options for the field, or NULL if the field is not\n   *   displayed. The following key\/value pairs may be present:\n   *   - label: (string) Position of the field label. The default 'field' theme\n   *     implementation supports the values 'inline', 'above' and 'hidden'.\n   *     Defaults to 'above'. Only applies to 'view' context.\n   *   - type: (string) The plugin (widget or formatter depending on\n   *     $display_context) to use, or 'hidden'. If not specified or if the\n   *     requested plugin is unknown, the 'default_widget' \/ 'default_formatter'\n   *     for the field type will be used.\n   *   - settings: (array) Settings for the plugin specified above. The default\n   *     settings for the plugin will be used for settings left unspecified.\n   *   - third_party_settings: (array) Settings provided by other extensions\n   *     through hook_field_formatter_third_party_settings_form().\n   *   - weight: (float) The weight of the element. Not needed if 'type' is\n   *     'hidden'.\n   *   The defaults of the various display options above get applied by the used\n   *   entity display.\n   *\n   * @see \\Drupal\\Core\\Entity\\Display\\EntityDisplayInterface\n   *\/",124],["T_WHITESPACE","\n  ",154],["T_PUBLIC","public",155],["T_WHITESPACE"," ",155],["T_FUNCTION","function",155],["T_WHITESPACE"," ",155],["T_STRING","getDisplayOptions",155],"(",["T_VARIABLE","$display_context",155],")",";",["T_WHITESPACE","\n\n  ",155],["T_DOC_COMMENT","\/**\n   * Returns whether the field can be empty.\n   *\n   * If a field is required, an entity needs to have at least a valid,\n   * non-empty item in that field's FieldItemList in order to pass validation.\n   *\n   * An item is considered empty if its isEmpty() method returns TRUE.\n   * Typically, that is if at least one of its required properties is empty.\n   *\n   * @return bool\n   *   TRUE if the field is required.\n   *\n   * @see \\Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList::isEmpty()\n   * @see \\Drupal\\Core\\Field\\FieldItemInterface::isEmpty()\n   * @see \\Drupal\\Core\\TypedData\\DataDefinitionInterface:isRequired()\n   * @see \\Drupal\\Core\\TypedData\\TypedDataManager::getDefaultConstraints()\n   *\/",157],["T_WHITESPACE","\n  ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","isRequired",174],"(",")",";",["T_WHITESPACE","\n\n  ",174],["T_DOC_COMMENT","\/**\n   * Returns the default value literal for the field.\n   *\n   * This method retrieves the raw property assigned to the field definition.\n   * When computing the runtime default value for a field in a given entity,\n   * ::getDefaultValue() should be used instead.\n   *\n   * @return array\n   *   The default value for the field, as a numerically indexed array of items,\n   *   each item being a property\/value array (array() for no default value).\n   *\n   * @see FieldDefinitionInterface::getDefaultValue()\n   * @see FieldDefinitionInterface::getDefaultValueCallback()\n   *\/",176],["T_WHITESPACE","\n  ",189],["T_PUBLIC","public",190],["T_WHITESPACE"," ",190],["T_FUNCTION","function",190],["T_WHITESPACE"," ",190],["T_STRING","getDefaultValueLiteral",190],"(",")",";",["T_WHITESPACE","\n\n  ",190],["T_DOC_COMMENT","\/**\n   * Returns the default value callback for the field.\n   *\n   * This method retrieves the raw property assigned to the field definition.\n   * When computing the runtime default value for a field in a given entity,\n   * ::getDefaultValue() should be used instead.\n   *\n   * @return string|null\n   *   The default value callback for the field.\n   *\n   * @see FieldDefinitionInterface::getDefaultValue()\n   * @see FieldDefinitionInterface::getDefaultValueLiteral()\n   *\/",192],["T_WHITESPACE","\n  ",204],["T_PUBLIC","public",205],["T_WHITESPACE"," ",205],["T_FUNCTION","function",205],["T_WHITESPACE"," ",205],["T_STRING","getDefaultValueCallback",205],"(",")",";",["T_WHITESPACE","\n\n  ",205],["T_DOC_COMMENT","\/**\n   * Returns the default value for the field in a newly created entity.\n   *\n   * This method computes the runtime default value for a field in a given\n   * entity. To access the raw properties assigned to the field definition,\n   * ::getDefaultValueLiteral() or ::getDefaultValueCallback() should be used\n   * instead.\n   *\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity for which the default value is generated.\n   *\n   * @return array\n   *   The default value for the field, as a numerically indexed array of items,\n   *   each item being a property\/value array (array() for no default value).\n   *\n   * @see FieldDefinitionInterface::getDefaultValueLiteral()\n   * @see FieldDefinitionInterface::getDefaultValueCallback()\n   *\/",207],["T_WHITESPACE","\n  ",224],["T_PUBLIC","public",225],["T_WHITESPACE"," ",225],["T_FUNCTION","function",225],["T_WHITESPACE"," ",225],["T_STRING","getDefaultValue",225],"(",["T_STRING","FieldableEntityInterface",225],["T_WHITESPACE"," ",225],["T_VARIABLE","$entity",225],")",";",["T_WHITESPACE","\n\n  ",225],["T_DOC_COMMENT","\/**\n   * Returns whether the field is translatable.\n   *\n   * @return bool\n   *   TRUE if the field is translatable.\n   *\/",227],["T_WHITESPACE","\n  ",232],["T_PUBLIC","public",233],["T_WHITESPACE"," ",233],["T_FUNCTION","function",233],["T_WHITESPACE"," ",233],["T_STRING","isTranslatable",233],"(",")",";",["T_WHITESPACE","\n\n  ",233],["T_DOC_COMMENT","\/**\n   * Returns the field storage definition.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface\n   *   The field storage definition.\n   *\/",235],["T_WHITESPACE","\n  ",240],["T_PUBLIC","public",241],["T_WHITESPACE"," ",241],["T_FUNCTION","function",241],["T_WHITESPACE"," ",241],["T_STRING","getFieldStorageDefinition",241],"(",")",";",["T_WHITESPACE","\n\n  ",241],["T_DOC_COMMENT","\/**\n   * Gets an object that can be saved in configuration.\n   *\n   * Base fields are defined in code. In order to configure field definition\n   * properties per bundle use this method to create an override that can be\n   * saved in configuration.\n   *\n   * @see \\Drupal\\Core\\Field\\Entity\\BaseFieldBundleOverride\n   *\n   * @param string $bundle\n   *   The bundle to get the configurable field for.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldConfigInterface\n   *\/",243],["T_WHITESPACE","\n  ",256],["T_PUBLIC","public",257],["T_WHITESPACE"," ",257],["T_FUNCTION","function",257],["T_WHITESPACE"," ",257],["T_STRING","getConfig",257],"(",["T_VARIABLE","$bundle",257],")",";",["T_WHITESPACE","\n\n",257],"}",["T_WHITESPACE","\n",259]]