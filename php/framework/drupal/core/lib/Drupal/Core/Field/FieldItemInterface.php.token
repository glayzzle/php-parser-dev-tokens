[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Form",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FormStateInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","TypedData",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ComplexDataInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Interface for entity field items.\n *\n * Entity field items are typed data objects containing the field values, i.e.\n * implementing the ComplexDataInterface.\n *\n * When implementing this interface which extends Traversable, make sure to list\n * IteratorAggregate or Iterator before this interface in the implements clause.\n *\n * @see \\Drupal\\Core\\Field\\FieldItemListInterface\n * @see \\Drupal\\Core\\Field\\FieldItemBase\n * @ingroup field_types\n *\/",8],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","FieldItemInterface",21],["T_WHITESPACE"," ",21],["T_EXTENDS","extends",21],["T_WHITESPACE"," ",21],["T_STRING","ComplexDataInterface",21],["T_WHITESPACE"," ",21],"{",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Defines field item properties.\n   *\n   * Properties that are required to constitute a valid, non-empty item should\n   * be denoted with \\Drupal\\Core\\TypedData\\DataDefinition::setRequired().\n   *\n   * @return \\Drupal\\Core\\TypedData\\DataDefinitionInterface[]\n   *   An array of property definitions of contained properties, keyed by\n   *   property name.\n   *\n   * @see \\Drupal\\Core\\Field\\BaseFieldDefinition\n   *\/",23],["T_WHITESPACE","\n  ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_STATIC","static",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","propertyDefinitions",35],"(",["T_STRING","FieldStorageDefinitionInterface",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$field_definition",35],")",";",["T_WHITESPACE","\n\n  ",35],["T_DOC_COMMENT","\/**\n   * Returns the name of the main property, if any.\n   *\n   * Some field items consist mainly of one main property, e.g. the value of a\n   * text field or the @code target_id @endcode of an entity reference. If the\n   * field item has no main property, the method returns NULL.\n   *\n   * @return string|null\n   *   The name of the value property, or NULL if there is none.\n   *\n   * @see \\Drupal\\Core\\Field\\BaseFieldDefinition\n   *\/",37],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_STATIC","static",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","mainPropertyName",49],"(",")",";",["T_WHITESPACE","\n\n  ",49],["T_DOC_COMMENT","\/**\n   * Returns the schema for the field.\n   *\n   * This method is static because the field schema information is needed on\n   * creation of the field. FieldItemInterface objects instantiated at that\n   * time are not reliable as field settings might be missing.\n   *\n   * Computed fields having no schema should return an empty array.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $field_definition\n   *   The field definition.\n   *\n   * @return array\n   *   An empty array if there is no schema, or an associative array with the\n   *   following key\/value pairs:\n   *   - columns: An array of Schema API column specifications, keyed by column\n   *     name. The columns need to be a subset of the properties defined in\n   *     propertyDefinitions(). The 'not null' property is ignored if present,\n   *     as it is determined automatically by the storage controller depending\n   *     on the table layout and the property definitions. It is recommended to\n   *     avoid having the column definitions depend on field settings when\n   *     possible. No assumptions should be made on how storage engines\n   *     internally use the original column name to structure their storage.\n   *   - unique keys: (optional) An array of Schema API unique key definitions.\n   *     Only columns that appear in the 'columns' array are allowed.\n   *   - indexes: (optional) An array of Schema API index definitions. Only\n   *     columns that appear in the 'columns' array are allowed. Those indexes\n   *     will be used as default indexes. Field definitions can specify\n   *     additional indexes or, at their own risk, modify the default indexes\n   *     specified by the field-type module. Some storage engines might not\n   *     support indexes.\n   *   - foreign keys: (optional) An array of Schema API foreign key\n   *     definitions. Note, however, that the field data is not necessarily\n   *     stored in SQL. Also, the possible usage is limited, as you cannot\n   *     specify another field as related, only existing SQL tables,\n   *     such as {taxonomy_term_data}.\n   *\/",51],["T_WHITESPACE","\n  ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_STATIC","static",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","schema",88],"(",["T_STRING","FieldStorageDefinitionInterface",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$field_definition",88],")",";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Gets the entity that field belongs to.\n   *\n   * @return \\Drupal\\Core\\Entity\\FieldableEntityInterface\n   *   The entity object.\n   *\/",90],["T_WHITESPACE","\n  ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","getEntity",96],"(",")",";",["T_WHITESPACE","\n\n  ",96],["T_DOC_COMMENT","\/**\n   * Gets the langcode of the field values held in the object.\n   *\n   * @return string\n   *   The langcode.\n   *\/",98],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","getLangcode",104],"(",")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Gets the field definition.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldDefinitionInterface\n   *   The field definition.\n   *\/",106],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","getFieldDefinition",112],"(",")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Magic method: Gets a property value.\n   *\n   * @param $property_name\n   *   The name of the property to get; e.g., 'title' or 'name'.\n   *\n   * @return \\Drupal\\Core\\TypedData\\TypedDataInterface\n   *   The property object.\n   *\n   * @throws \\InvalidArgumentException\n   *   If a not existing property is accessed.\n   *\/",114],["T_WHITESPACE","\n  ",125],["T_PUBLIC","public",126],["T_WHITESPACE"," ",126],["T_FUNCTION","function",126],["T_WHITESPACE"," ",126],["T_STRING","__get",126],"(",["T_VARIABLE","$property_name",126],")",";",["T_WHITESPACE","\n\n  ",126],["T_DOC_COMMENT","\/**\n   * Magic method: Sets a property value.\n   *\n   * @param $property_name\n   *   The name of the property to set; e.g., 'title' or 'name'.\n   * @param $value\n   *   The value to set, or NULL to unset the property. Optionally, a typed\n   *   data object implementing Drupal\\Core\\TypedData\\TypedDataInterface may be\n   *   passed instead of a plain value.\n   *\n   * @throws \\InvalidArgumentException\n   *   If a not existing property is set.\n   *\/",128],["T_WHITESPACE","\n  ",140],["T_PUBLIC","public",141],["T_WHITESPACE"," ",141],["T_FUNCTION","function",141],["T_WHITESPACE"," ",141],["T_STRING","__set",141],"(",["T_VARIABLE","$property_name",141],",",["T_WHITESPACE"," ",141],["T_VARIABLE","$value",141],")",";",["T_WHITESPACE","\n\n  ",141],["T_DOC_COMMENT","\/**\n   * Magic method: Determines whether a property is set.\n   *\n   * @param $property_name\n   *   The name of the property to get; e.g., 'title' or 'name'.\n   *\n   * @return bool\n   *   Returns TRUE if the property exists and is set, FALSE otherwise.\n   *\/",143],["T_WHITESPACE","\n  ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","__isset",152],"(",["T_VARIABLE","$property_name",152],")",";",["T_WHITESPACE","\n\n  ",152],["T_DOC_COMMENT","\/**\n   * Magic method: Unsets a property.\n   *\n   * @param $property_name\n   *   The name of the property to get; e.g., 'title' or 'name'.\n   *\/",154],["T_WHITESPACE","\n  ",159],["T_PUBLIC","public",160],["T_WHITESPACE"," ",160],["T_FUNCTION","function",160],["T_WHITESPACE"," ",160],["T_STRING","__unset",160],"(",["T_VARIABLE","$property_name",160],")",";",["T_WHITESPACE","\n\n  ",160],["T_DOC_COMMENT","\/**\n   * Returns a renderable array for a single field item.\n   *\n   * @param array $display_options\n   *   Can be either the name of a view mode, or an array of display settings.\n   *   See EntityViewBuilderInterface::viewField() for more information.\n   *\n   * @return array\n   *   A renderable array for the field item.\n   *\n   * @see \\Drupal\\Core\\Entity\\EntityViewBuilderInterface::viewField()\n   * @see \\Drupal\\Core\\Entity\\EntityViewBuilderInterface::viewFieldItem()\n   * @see \\Drupal\\Core\\Field\\FieldItemListInterface::view()\n   *\/",162],["T_WHITESPACE","\n  ",175],["T_PUBLIC","public",176],["T_WHITESPACE"," ",176],["T_FUNCTION","function",176],["T_WHITESPACE"," ",176],["T_STRING","view",176],"(",["T_VARIABLE","$display_options",176],["T_WHITESPACE"," ",176],"=",["T_WHITESPACE"," ",176],["T_ARRAY","array",176],"(",")",")",";",["T_WHITESPACE","\n\n  ",176],["T_DOC_COMMENT","\/**\n   * Defines custom presave behavior for field values.\n   *\n   * This method is called during the process of saving an entity, just before\n   * values are written into storage. When storing a new entity, its identifier\n   * will not be available yet. This should be used to massage item property\n   * values or perform any other operation that needs to happen before values\n   * are stored. For instance this is the proper phase to auto-create a new\n   * entity for an entity reference field item, because this way it will be\n   * possible to store the referenced entity identifier.\n   *\/",178],["T_WHITESPACE","\n  ",188],["T_PUBLIC","public",189],["T_WHITESPACE"," ",189],["T_FUNCTION","function",189],["T_WHITESPACE"," ",189],["T_STRING","preSave",189],"(",")",";",["T_WHITESPACE","\n\n  ",189],["T_DOC_COMMENT","\/**\n   * Defines custom post-save behavior for field values.\n   *\n   * This method is called during the process of saving an entity, just after\n   * values are written into storage. This is useful mostly when the business\n   * logic to be implemented always requires the entity identifier, even when\n   * storing a new entity. For instance, when implementing circular entity\n   * references, the referenced entity will be created on pre-save with a dummy\n   * value for the referring entity identifier, which will be updated with the\n   * actual one on post-save.\n   *\n   * In the rare cases where item properties depend on the entity identifier,\n   * massaging logic will have to be implemented on post-save and returning TRUE\n   * will allow them to be rewritten to the storage with the updated values.\n   *\n   * @param bool $update\n   *   Specifies whether the entity is being updated or created.\n   *\n   * @return bool\n   *   Whether field items should be rewritten to the storage as a consequence\n   *   of the logic implemented by the custom behavior.\n   *\/",191],["T_WHITESPACE","\n  ",212],["T_PUBLIC","public",213],["T_WHITESPACE"," ",213],["T_FUNCTION","function",213],["T_WHITESPACE"," ",213],["T_STRING","postSave",213],"(",["T_VARIABLE","$update",213],")",";",["T_WHITESPACE","\n\n  ",213],["T_DOC_COMMENT","\/**\n   * Defines custom delete behavior for field values.\n   *\n   * This method is called during the process of deleting an entity, just before\n   * values are deleted from storage.\n   *\/",215],["T_WHITESPACE","\n  ",220],["T_PUBLIC","public",221],["T_WHITESPACE"," ",221],["T_FUNCTION","function",221],["T_WHITESPACE"," ",221],["T_STRING","delete",221],"(",")",";",["T_WHITESPACE","\n\n  ",221],["T_DOC_COMMENT","\/**\n   * Defines custom revision delete behavior for field values.\n   *\n   * This method is called from during the process of deleting an entity\n   * revision, just before the field values are deleted from storage. It is only\n   * called for entity types that support revisioning.\n   *\/",223],["T_WHITESPACE","\n  ",229],["T_PUBLIC","public",230],["T_WHITESPACE"," ",230],["T_FUNCTION","function",230],["T_WHITESPACE"," ",230],["T_STRING","deleteRevision",230],"(",")",";",["T_WHITESPACE","\n\n  ",230],["T_DOC_COMMENT","\/**\n   * Generates placeholder field values.\n   *\n   * Useful when populating site with placeholder content during site building\n   * or profiling.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition\n   *   The field definition.\n   *\n   * @return array\n   *   An associative array of values.\n   *\/",232],["T_WHITESPACE","\n  ",243],["T_PUBLIC","public",244],["T_WHITESPACE"," ",244],["T_STATIC","static",244],["T_WHITESPACE"," ",244],["T_FUNCTION","function",244],["T_WHITESPACE"," ",244],["T_STRING","generateSampleValue",244],"(",["T_STRING","FieldDefinitionInterface",244],["T_WHITESPACE"," ",244],["T_VARIABLE","$field_definition",244],")",";",["T_WHITESPACE","\n\n  ",244],["T_DOC_COMMENT","\/**\n   * Defines the storage-level settings for this plugin.\n   *\n   * @return array\n   *   A list of default settings, keyed by the setting name.\n   *\/",246],["T_WHITESPACE","\n  ",251],["T_PUBLIC","public",252],["T_WHITESPACE"," ",252],["T_STATIC","static",252],["T_WHITESPACE"," ",252],["T_FUNCTION","function",252],["T_WHITESPACE"," ",252],["T_STRING","defaultStorageSettings",252],"(",")",";",["T_WHITESPACE","\n\n  ",252],["T_DOC_COMMENT","\/**\n   * Defines the field-level settings for this plugin.\n   *\n   * @return array\n   *   A list of default settings, keyed by the setting name.\n   *\/",254],["T_WHITESPACE","\n  ",259],["T_PUBLIC","public",260],["T_WHITESPACE"," ",260],["T_STATIC","static",260],["T_WHITESPACE"," ",260],["T_FUNCTION","function",260],["T_WHITESPACE"," ",260],["T_STRING","defaultFieldSettings",260],"(",")",";",["T_WHITESPACE","\n\n  ",260],["T_DOC_COMMENT","\/**\n   * Returns a settings array that can be stored as a configuration value.\n   *\n   * For all use cases where field settings are stored and managed as\n   * configuration, this method is used to map from the field type's\n   * representation of its settings to a representation compatible with\n   * deployable configuration. This includes:\n   * - Array keys at any depth must not contain a \".\".\n   * - Ideally, array keys at any depth are either numeric or can be enumerated\n   *   as a \"mapping\" within the configuration schema. While not strictly\n   *   required, this simplifies configuration translation UIs, configuration\n   *   migrations between Drupal versions, and other use cases.\n   * - To support configuration deployments, references to content entities\n   *   must use UUIDs rather than local IDs.\n   *\n   * An example of a conversion between representations might be an\n   * \"allowed_values\" setting that's structured by the field type as a\n   * \\Drupal\\Core\\TypedData\\OptionsProviderInterface::getPossibleOptions()\n   * result (i.e., values as keys and labels as values). For such a use case,\n   * in order to comply with the above, this method could convert that\n   * representation to a numerically indexed array whose values are sub-arrays\n   * with the schema definable keys of \"value\" and \"label\".\n   *\n   * @param array $settings\n   *   The field's settings in the field type's canonical representation.\n   *\n   * @return array\n   *   An array (either the unmodified $settings or a modified representation)\n   *   that is suitable for storing as a deployable configuration value.\n   *\n   * @see \\Drupal\\Core\\Config\\Config::set()\n   *\/",262],["T_WHITESPACE","\n  ",293],["T_PUBLIC","public",294],["T_WHITESPACE"," ",294],["T_STATIC","static",294],["T_WHITESPACE"," ",294],["T_FUNCTION","function",294],["T_WHITESPACE"," ",294],["T_STRING","storageSettingsToConfigData",294],"(",["T_ARRAY","array",294],["T_WHITESPACE"," ",294],["T_VARIABLE","$settings",294],")",";",["T_WHITESPACE","\n\n  ",294],["T_DOC_COMMENT","\/**\n   * Returns a settings array in the field type's canonical representation.\n   *\n   * This function does the inverse of static::storageSettingsToConfigData(). It's\n   * called when loading a field's settings from a configuration object.\n   *\n   * @param array $settings\n   *   The field's settings, as it is stored within a configuration object.\n   *\n   * @return array\n   *   The settings, in the representation expected by the field type and code\n   *   that interacts with it.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldItemInterface::storageSettingsToConfigData()\n   *\/",296],["T_WHITESPACE","\n  ",310],["T_PUBLIC","public",311],["T_WHITESPACE"," ",311],["T_STATIC","static",311],["T_WHITESPACE"," ",311],["T_FUNCTION","function",311],["T_WHITESPACE"," ",311],["T_STRING","storageSettingsFromConfigData",311],"(",["T_ARRAY","array",311],["T_WHITESPACE"," ",311],["T_VARIABLE","$settings",311],")",";",["T_WHITESPACE","\n\n  ",311],["T_DOC_COMMENT","\/**\n   * Returns a settings array that can be stored as a configuration value.\n   *\n   * Same as static::storageSettingsToConfigData(), but for the field's settings.\n   *\n   * @param array $settings\n   *   The field's settings in the field type's canonical representation.\n   *\n   * @return array\n   *   An array (either the unmodified $settings or a modified representation)\n   *   that is suitable for storing as a deployable configuration value.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldItemInterface::storageSettingsToConfigData()\n   *\/",313],["T_WHITESPACE","\n  ",326],["T_PUBLIC","public",327],["T_WHITESPACE"," ",327],["T_STATIC","static",327],["T_WHITESPACE"," ",327],["T_FUNCTION","function",327],["T_WHITESPACE"," ",327],["T_STRING","fieldSettingsToConfigData",327],"(",["T_ARRAY","array",327],["T_WHITESPACE"," ",327],["T_VARIABLE","$settings",327],")",";",["T_WHITESPACE","\n\n  ",327],["T_DOC_COMMENT","\/**\n   * Returns a settings array in the field type's canonical representation.\n   *\n   * This function does the inverse of static::fieldSettingsToConfigData().\n   * It's called when loading a field's settings from a configuration\n   * object.\n   *\n   * @param array $settings\n   *   The field's settings, as it is stored within a configuration\n   *   object.\n   *\n   * @return array\n   *   The field settings, in the representation expected by the field type\n   *   and code that interacts with it.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldItemInterface::fieldSettingsToConfigData()\n   *\/",329],["T_WHITESPACE","\n  ",345],["T_PUBLIC","public",346],["T_WHITESPACE"," ",346],["T_STATIC","static",346],["T_WHITESPACE"," ",346],["T_FUNCTION","function",346],["T_WHITESPACE"," ",346],["T_STRING","fieldSettingsFromConfigData",346],"(",["T_ARRAY","array",346],["T_WHITESPACE"," ",346],["T_VARIABLE","$settings",346],")",";",["T_WHITESPACE","\n\n  ",346],["T_DOC_COMMENT","\/**\n   * Returns a form for the storage-level settings.\n   *\n   * Invoked from \\Drupal\\field_ui\\Form\\FieldStorageConfigEditForm to allow\n   * administrators to configure storage-level settings.\n   *\n   * Field storage might reject settings changes that affect the field\n   * storage schema if the storage already has data. When the $has_data\n   * parameter is TRUE, the form should not allow changing the settings that\n   * take part in the schema() method. It is recommended to set #access to\n   * FALSE on the corresponding elements.\n   *\n   * @param array $form\n   *   The form where the settings form is being included in.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state of the (entire) configuration form.\n   * @param bool $has_data\n   *   TRUE if the field already has data, FALSE if not.\n   *\n   * @return\n   *   The form definition for the field settings.\n   *\/",348],["T_WHITESPACE","\n  ",369],["T_PUBLIC","public",370],["T_WHITESPACE"," ",370],["T_FUNCTION","function",370],["T_WHITESPACE"," ",370],["T_STRING","storageSettingsForm",370],"(",["T_ARRAY","array",370],["T_WHITESPACE"," ",370],"&",["T_VARIABLE","$form",370],",",["T_WHITESPACE"," ",370],["T_STRING","FormStateInterface",370],["T_WHITESPACE"," ",370],["T_VARIABLE","$form_state",370],",",["T_WHITESPACE"," ",370],["T_VARIABLE","$has_data",370],")",";",["T_WHITESPACE","\n\n  ",370],["T_DOC_COMMENT","\/**\n   * Returns a form for the field-level settings.\n   *\n   * Invoked from \\Drupal\\field_ui\\Form\\FieldConfigEditForm to allow\n   * administrators to configure field-level settings.\n   *\n   * @param array $form\n   *   The form where the settings form is being included in.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state of the (entire) configuration form.\n   *\n   * @return array\n   *   The form definition for the field settings.\n   *\/",372],["T_WHITESPACE","\n  ",385],["T_PUBLIC","public",386],["T_WHITESPACE"," ",386],["T_FUNCTION","function",386],["T_WHITESPACE"," ",386],["T_STRING","fieldSettingsForm",386],"(",["T_ARRAY","array",386],["T_WHITESPACE"," ",386],["T_VARIABLE","$form",386],",",["T_WHITESPACE"," ",386],["T_STRING","FormStateInterface",386],["T_WHITESPACE"," ",386],["T_VARIABLE","$form_state",386],")",";",["T_WHITESPACE","\n\n  ",386],["T_DOC_COMMENT","\/**\n   * Calculates dependencies for field items.\n   *\n   * Dependencies are saved in the field configuration entity and are used to\n   * determine configuration synchronization order. For example, if the field\n   * type's default value is a content entity, this method should return an\n   * array of dependencies listing the content entities.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition\n   *   The field definition.\n   *\n   * @return array\n   *   An array of dependencies grouped by type (config, content, module,\n   *   theme). For example:\n   *   @code\n   *   array(\n   *     'config' => array('user.role.anonymous', 'user.role.authenticated'),\n   *     'content' => array('node:article:f0a189e6-55fb-47fb-8005-5bef81c44d6d'),\n   *     'module' => array('node', 'user'),\n   *     'theme' => array('seven'),\n   *   );\n   *   @endcode\n   *\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigEntityInterface::getConfigDependencyName()\n   *\/",388],["T_WHITESPACE","\n  ",413],["T_PUBLIC","public",414],["T_WHITESPACE"," ",414],["T_STATIC","static",414],["T_WHITESPACE"," ",414],["T_FUNCTION","function",414],["T_WHITESPACE"," ",414],["T_STRING","calculateDependencies",414],"(",["T_STRING","FieldDefinitionInterface",414],["T_WHITESPACE"," ",414],["T_VARIABLE","$field_definition",414],")",";",["T_WHITESPACE","\n\n  ",414],["T_DOC_COMMENT","\/**\n   * Calculates dependencies for field items on the storage level.\n   *\n   * Dependencies are saved in the field storage configuration entity and are\n   * used to determine configuration synchronization order. For example, if the\n   * field type storage depends on a particular entity type, this method should\n   * return an array of dependencies listing the module that provides the entity\n   * type.\n   *\n   * Dependencies returned from this method are stored in field storage\n   * configuration and are always considered hard dependencies. If the\n   * dependency is removed the field storage configuration must be deleted.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $field_storage_definition\n   *   The field storage definition.\n   *\n   * @return array\n   *   An array of dependencies grouped by type (config, content, module,\n   *   theme). For example:\n   *   @code\n   *   [\n   *     'config' => ['user.role.anonymous', 'user.role.authenticated'],\n   *     'content' => ['node:article:f0a189e6-55fb-47fb-8005-5bef81c44d6d'],\n   *     'module' => ['node', 'user'],\n   *     'theme' => ['seven'],\n   *   ];\n   *   @endcode\n   *\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigDependencyManager\n   * @see \\Drupal\\Core\\Config\\Entity\\ConfigEntityInterface::getConfigDependencyName()\n   *\/",416],["T_WHITESPACE","\n  ",446],["T_PUBLIC","public",447],["T_WHITESPACE"," ",447],["T_STATIC","static",447],["T_WHITESPACE"," ",447],["T_FUNCTION","function",447],["T_WHITESPACE"," ",447],["T_STRING","calculateStorageDependencies",447],"(",["T_STRING","FieldStorageDefinitionInterface",447],["T_WHITESPACE"," ",447],["T_VARIABLE","$field_storage_definition",447],")",";",["T_WHITESPACE","\n\n  ",447],["T_DOC_COMMENT","\/**\n   * Informs the plugin that a dependency of the field will be deleted.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition\n   *   The field definition.\n   * @param array $dependencies\n   *   An array of dependencies that will be deleted keyed by dependency type.\n   *   Dependency types are, for example, entity, module and theme.\n   *\n   * @return bool\n   *   TRUE if the field definition has been changed as a result, FALSE if not.\n   *\n   * @see \\Drupal\\Core\\Config\\ConfigEntityInterface::onDependencyRemoval()\n   *\/",449],["T_WHITESPACE","\n  ",462],["T_PUBLIC","public",463],["T_WHITESPACE"," ",463],["T_STATIC","static",463],["T_WHITESPACE"," ",463],["T_FUNCTION","function",463],["T_WHITESPACE"," ",463],["T_STRING","onDependencyRemoval",463],"(",["T_STRING","FieldDefinitionInterface",463],["T_WHITESPACE"," ",463],["T_VARIABLE","$field_definition",463],",",["T_WHITESPACE"," ",463],["T_ARRAY","array",463],["T_WHITESPACE"," ",463],["T_VARIABLE","$dependencies",463],")",";",["T_WHITESPACE","\n\n",463],"}",["T_WHITESPACE","\n",465]]