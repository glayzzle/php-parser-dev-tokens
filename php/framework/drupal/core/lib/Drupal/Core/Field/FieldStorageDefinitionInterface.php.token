[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Cache",5],["T_NS_SEPARATOR","\\",5],["T_STRING","CacheableDependencyInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Core",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Entity",6],["T_NS_SEPARATOR","\\",6],["T_STRING","FieldableEntityInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Defines an interface for entity field storage definitions.\n *\n * Field storage definitions represent the part of full field definitions (see\n * FieldDefinitionInterface) that is responsible for defining how the field is\n * stored. While field definitions may differ by entity bundle, all of those\n * bundle fields have to share the same common field storage definition. Thus,\n * the storage definitions can be defined by entity type only.\n * The bundle fields corresponding to a field storage definition may provide\n * additional information; e.g., they may provide bundle-specific settings or\n * constraints that are not present in the storage definition. However bundle\n * fields may not override or alter any information provided by the storage\n * definition except for the label and the description; e.g., any constraints\n * and settings on the storage definition must be present on the bundle field as\n * well.\n *\n * @see hook_entity_field_storage_info()\n *\/",8],["T_WHITESPACE","\n",25],["T_INTERFACE","interface",26],["T_WHITESPACE"," ",26],["T_STRING","FieldStorageDefinitionInterface",26],["T_WHITESPACE"," ",26],["T_EXTENDS","extends",26],["T_WHITESPACE"," ",26],["T_STRING","CacheableDependencyInterface",26],["T_WHITESPACE"," ",26],"{",["T_WHITESPACE","\n\n  ",26],["T_DOC_COMMENT","\/**\n   * Value indicating a field accepts an unlimited number of values.\n   *\/",28],["T_WHITESPACE","\n  ",30],["T_CONST","const",31],["T_WHITESPACE"," ",31],["T_STRING","CARDINALITY_UNLIMITED",31],["T_WHITESPACE"," ",31],"=",["T_WHITESPACE"," ",31],"-",["T_LNUMBER","1",31],";",["T_WHITESPACE","\n\n  ",31],["T_DOC_COMMENT","\/**\n   * Returns the machine name of the field.\n   *\n   * This defines how the field data is accessed from the entity. For example,\n   * if the field name is \"foo\", then $entity->foo returns its data.\n   *\n   * @return string\n   *   The field name.\n   *\/",33],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","getName",42],"(",")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Returns the field type.\n   *\n   * @return string\n   *   The field type, i.e. the id of a field type plugin. For example 'text'.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldTypePluginManagerInterface\n   *\/",44],["T_WHITESPACE","\n  ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","getType",52],"(",")",";",["T_WHITESPACE","\n\n  ",52],["T_DOC_COMMENT","\/**\n   * Returns the storage settings.\n   *\n   * Each field type defines the settings that are meaningful for that type.\n   * For example, a text field can define a 'max_length' setting, and an image\n   * field can define a 'alt_field_required' setting.\n   *\n   * The method always returns an array of all available settings for this field\n   * type, possibly with the default values merged in if values have not been\n   * provided for all available settings.\n   *\n   * @return mixed[]\n   *   An array of key\/value pairs.\n   *\/",54],["T_WHITESPACE","\n  ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","getSettings",68],"(",")",";",["T_WHITESPACE","\n\n  ",68],["T_DOC_COMMENT","\/**\n   * Returns the value of a given storage setting.\n   *\n   * @param string $setting_name\n   *   The setting name.\n   *\n   * @return mixed\n   *   The setting value.\n   *\/",70],["T_WHITESPACE","\n  ",78],["T_PUBLIC","public",79],["T_WHITESPACE"," ",79],["T_FUNCTION","function",79],["T_WHITESPACE"," ",79],["T_STRING","getSetting",79],"(",["T_VARIABLE","$setting_name",79],")",";",["T_WHITESPACE","\n\n  ",79],["T_DOC_COMMENT","\/**\n   * Returns whether the field supports translation.\n   *\n   * @return bool\n   *   TRUE if the field supports translation.\n   *\/",81],["T_WHITESPACE","\n  ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","isTranslatable",87],"(",")",";",["T_WHITESPACE","\n\n  ",87],["T_DOC_COMMENT","\/**\n   * Sets whether the field supports translation.\n   *\n   * @param bool $translatable\n   *   Whether the field supports translation.\n   *\n   * @return $this\n   *\/",89],["T_WHITESPACE","\n  ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","setTranslatable",97],"(",["T_VARIABLE","$translatable",97],")",";",["T_WHITESPACE","\n\n  ",97],["T_DOC_COMMENT","\/**\n   * Returns whether the field is revisionable.\n   *\n   * @return bool\n   *   TRUE if the field is revisionable.\n   *\/",99],["T_WHITESPACE","\n  ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","isRevisionable",105],"(",")",";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * Determines whether the field is queryable via QueryInterface.\n   *\n   * @return bool\n   *   TRUE if the field is queryable.\n   *\/",107],["T_WHITESPACE","\n  ",112],["T_PUBLIC","public",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","isQueryable",113],"(",")",";",["T_WHITESPACE","\n\n  ",113],["T_DOC_COMMENT","\/**\n   * Returns the human-readable label for the field.\n   *\n   * @return string\n   *   The field label.\n   *\/",115],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","getLabel",121],"(",")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Returns the human-readable description for the field.\n   *\n   * This is displayed in addition to the label in places where additional\n   * descriptive information is helpful. For example, as help text below the\n   * form element in entity edit forms.\n   *\n   * @return string|null\n   *   The field description, or NULL if no description is available.\n   *\/",123],["T_WHITESPACE","\n  ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","getDescription",133],"(",")",";",["T_WHITESPACE","\n\n  ",133],["T_DOC_COMMENT","\/**\n   * Gets an options provider for the given field item property.\n   *\n   * @param string $property_name\n   *   The name of the property to get options for; e.g., 'value'.\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity for which the options should be provided.\n   *\n   * @return \\Drupal\\Core\\TypedData\\OptionsProviderInterface|null\n   *   An options provider, or NULL if no options are defined.\n   *\/",135],["T_WHITESPACE","\n  ",145],["T_PUBLIC","public",146],["T_WHITESPACE"," ",146],["T_FUNCTION","function",146],["T_WHITESPACE"," ",146],["T_STRING","getOptionsProvider",146],"(",["T_VARIABLE","$property_name",146],",",["T_WHITESPACE"," ",146],["T_STRING","FieldableEntityInterface",146],["T_WHITESPACE"," ",146],["T_VARIABLE","$entity",146],")",";",["T_WHITESPACE","\n\n  ",146],["T_DOC_COMMENT","\/**\n   * Returns whether the field can contain multiple items.\n   *\n   * @return bool\n   *   TRUE if the field can contain multiple items, FALSE otherwise.\n   *\/",148],["T_WHITESPACE","\n  ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","isMultiple",154],"(",")",";",["T_WHITESPACE","\n\n  ",154],["T_DOC_COMMENT","\/**\n   * Returns the maximum number of items allowed for the field.\n   *\n   * Possible values are positive integers or\n   * FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED.\n   *\n   * @return int\n   *   The field cardinality.\n   *\/",156],["T_WHITESPACE","\n  ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","getCardinality",165],"(",")",";",["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Gets the definition of a contained property.\n   *\n   * @param string $name\n   *   The name of property.\n   *\n   * @return \\Drupal\\Core\\TypedData\\DataDefinitionInterface|null\n   *   The definition of the property or NULL if the property does not exist.\n   *\/",167],["T_WHITESPACE","\n  ",175],["T_PUBLIC","public",176],["T_WHITESPACE"," ",176],["T_FUNCTION","function",176],["T_WHITESPACE"," ",176],["T_STRING","getPropertyDefinition",176],"(",["T_VARIABLE","$name",176],")",";",["T_WHITESPACE","\n\n  ",176],["T_DOC_COMMENT","\/**\n   * Gets an array of property definitions of contained properties.\n   *\n   * @return \\Drupal\\Core\\TypedData\\DataDefinitionInterface[]\n   *   An array of property definitions of contained properties, keyed by\n   *   property name.\n   *\/",178],["T_WHITESPACE","\n  ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","getPropertyDefinitions",185],"(",")",";",["T_WHITESPACE","\n\n  ",185],["T_DOC_COMMENT","\/**\n   * Returns the names of the field's subproperties.\n   *\n   * A field is a list of items, and each item can contain one or more\n   * properties. All items for a given field contain the same property names,\n   * but the values can be different for each item.\n   *\n   * For example, an email field might just contain a single 'value' property,\n   * while a link field might contain 'title' and 'url' properties, and a text\n   * field might contain 'value', 'summary', and 'format' properties.\n   *\n   * @return string[]\n   *   The property names.\n   *\/",187],["T_WHITESPACE","\n  ",200],["T_PUBLIC","public",201],["T_WHITESPACE"," ",201],["T_FUNCTION","function",201],["T_WHITESPACE"," ",201],["T_STRING","getPropertyNames",201],"(",")",";",["T_WHITESPACE","\n\n  ",201],["T_DOC_COMMENT","\/**\n   * Returns the name of the main property, if any.\n   *\n   * Some field items consist mainly of one main property, e.g. the value of a\n   * text field or the @code target_id @endcode of an entity reference. If the\n   * field item has no main property, the method returns NULL.\n   *\n   * @return string|null\n   *   The name of the value property, or NULL if there is none.\n   *\/",203],["T_WHITESPACE","\n  ",212],["T_PUBLIC","public",213],["T_WHITESPACE"," ",213],["T_FUNCTION","function",213],["T_WHITESPACE"," ",213],["T_STRING","getMainPropertyName",213],"(",")",";",["T_WHITESPACE","\n\n  ",213],["T_DOC_COMMENT","\/**\n   * Returns the ID of the entity type the field is attached to.\n   *\n   * This method should not be confused with EntityInterface::getEntityTypeId()\n   * (configurable fields are config entities, and thus implement both\n   * interfaces):\n   *   - FieldStorageDefinitionInterface::getTargetEntityTypeId() answers \"as a\n   *     field storage, which entity type are you attached to?\".\n   *   - EntityInterface::getEntityTypeId() answers \"as a (config) entity, what\n   *     is your own entity type?\".\n   *\n   * @return string\n   *   The entity type ID.\n   *\/",215],["T_WHITESPACE","\n  ",228],["T_PUBLIC","public",229],["T_WHITESPACE"," ",229],["T_FUNCTION","function",229],["T_WHITESPACE"," ",229],["T_STRING","getTargetEntityTypeId",229],"(",")",";",["T_WHITESPACE","\n\n  ",229],["T_DOC_COMMENT","\/**\n   * Returns the field schema.\n   *\n   * Note that this method returns an empty array for computed fields which have\n   * no schema.\n   *\n   * @return array[]\n   *   The field schema, as an array of key\/value pairs in the format returned\n   *   by \\Drupal\\Core\\Field\\FieldItemInterface::schema():\n   *   - columns: An array of Schema API column specifications, keyed by column\n   *     name. This specifies what comprises a single value for a given field.\n   *     No assumptions should be made on how storage backends internally use\n   *     the original column name to structure their storage.\n   *   - indexes: An array of Schema API index definitions. Some storage\n   *     backends might not support indexes.\n   *   - unique keys: An array of Schema API unique key definitions.  Some\n   *     storage backends might not support unique keys.\n   *   - foreign keys: An array of Schema API foreign key definitions. Note,\n   *     however, that depending on the storage backend specified for the field,\n   *     the field data is not necessarily stored in SQL.\n   *\/",231],["T_WHITESPACE","\n  ",251],["T_PUBLIC","public",252],["T_WHITESPACE"," ",252],["T_FUNCTION","function",252],["T_WHITESPACE"," ",252],["T_STRING","getSchema",252],"(",")",";",["T_WHITESPACE","\n\n  ",252],["T_DOC_COMMENT","\/**\n   * Returns the field columns, as defined in the field schema.\n   *\n   * @return array[]\n   *   The array of field columns, keyed by column name, in the same format\n   *   returned by getSchema().\n   *\n   * @see \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface::getSchema()\n   *\/",254],["T_WHITESPACE","\n  ",262],["T_PUBLIC","public",263],["T_WHITESPACE"," ",263],["T_FUNCTION","function",263],["T_WHITESPACE"," ",263],["T_STRING","getColumns",263],"(",")",";",["T_WHITESPACE","\n\n  ",263],["T_DOC_COMMENT","\/**\n   * Returns an array of validation constraints.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details.\n   *\n   * @return array[]\n   *   An array of validation constraint definitions, keyed by constraint name.\n   *   Each constraint definition can be used for instantiating\n   *   \\Symfony\\Component\\Validator\\Constraint objects.\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",265],["T_WHITESPACE","\n  ",277],["T_PUBLIC","public",278],["T_WHITESPACE"," ",278],["T_FUNCTION","function",278],["T_WHITESPACE"," ",278],["T_STRING","getConstraints",278],"(",")",";",["T_WHITESPACE","\n\n  ",278],["T_DOC_COMMENT","\/**\n   * Returns a validation constraint.\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details.\n   *\n   * @param string $constraint_name\n   *   The name of the constraint, i.e. its plugin id.\n   *\n   * @return array\n   *   A validation constraint definition which can be used for instantiating a\n   *   \\Symfony\\Component\\Validator\\Constraint object.\n   *\n   * @see \\Symfony\\Component\\Validator\\Constraint\n   *\/",280],["T_WHITESPACE","\n  ",294],["T_PUBLIC","public",295],["T_WHITESPACE"," ",295],["T_FUNCTION","function",295],["T_WHITESPACE"," ",295],["T_STRING","getConstraint",295],"(",["T_VARIABLE","$constraint_name",295],")",";",["T_WHITESPACE","\n\n  ",295],["T_DOC_COMMENT","\/**\n   * Returns the name of the provider of this field.\n   *\n   * @return string\n   *   The provider name; e.g., the module name.\n   *\/",297],["T_WHITESPACE","\n  ",302],["T_PUBLIC","public",303],["T_WHITESPACE"," ",303],["T_FUNCTION","function",303],["T_WHITESPACE"," ",303],["T_STRING","getProvider",303],"(",")",";",["T_WHITESPACE","\n\n  ",303],["T_DOC_COMMENT","\/**\n   * Returns the storage behavior for this field.\n   *\n   * Indicates whether the entity type's storage should take care of storing the\n   * field values or whether it is handled separately; e.g. by the\n   * module providing the field.\n   *\n   * @return bool\n   *   FALSE if the storage takes care of storing the field, TRUE otherwise.\n   *\/",305],["T_WHITESPACE","\n  ",314],["T_PUBLIC","public",315],["T_WHITESPACE"," ",315],["T_FUNCTION","function",315],["T_WHITESPACE"," ",315],["T_STRING","hasCustomStorage",315],"(",")",";",["T_WHITESPACE","\n\n  ",315],["T_DOC_COMMENT","\/**\n   * Determines whether the field is a base field.\n   *\n   * Base fields are not specific to a given bundle or a set of bundles. This\n   * excludes configurable fields, as they are always attached to a specific\n   * bundle.\n   *\n   * @return bool\n   *   Whether the field is a base field.\n   *\/",317],["T_WHITESPACE","\n  ",326],["T_PUBLIC","public",327],["T_WHITESPACE"," ",327],["T_FUNCTION","function",327],["T_WHITESPACE"," ",327],["T_STRING","isBaseField",327],"(",")",";",["T_WHITESPACE","\n\n  ",327],["T_DOC_COMMENT","\/**\n   * Returns a unique identifier for the field.\n   *\n   * @return string\n   *\/",329],["T_WHITESPACE","\n  ",333],["T_PUBLIC","public",334],["T_WHITESPACE"," ",334],["T_FUNCTION","function",334],["T_WHITESPACE"," ",334],["T_STRING","getUniqueStorageIdentifier",334],"(",")",";",["T_WHITESPACE","\n\n",334],"}",["T_WHITESPACE","\n",336]]