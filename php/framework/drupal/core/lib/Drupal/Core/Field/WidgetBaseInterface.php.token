[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Form",5],["T_NS_SEPARATOR","\\",5],["T_STRING","FormStateInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Symfony",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Validator",6],["T_NS_SEPARATOR","\\",6],["T_STRING","ConstraintViolationListInterface",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Base interface definition for \"Field widget\" plugins.\n *\n * This interface details base wrapping methods that most widget implementations\n * will want to directly inherit from Drupal\\Core\\Field\\WidgetBase. See\n * Drupal\\Core\\Field\\WidgetInterface for methods that will more likely be\n * overridden in actual widget implementations.\n *\/",8],["T_WHITESPACE","\n",15],["T_INTERFACE","interface",16],["T_WHITESPACE"," ",16],["T_STRING","WidgetBaseInterface",16],["T_WHITESPACE"," ",16],["T_EXTENDS","extends",16],["T_WHITESPACE"," ",16],["T_STRING","PluginSettingsInterface",16],["T_WHITESPACE"," ",16],"{",["T_WHITESPACE","\n\n  ",16],["T_DOC_COMMENT","\/**\n   * Creates a form element for a field.\n   *\n   * If the entity associated with the form is new (i.e., $entity->isNew() is\n   * TRUE), the 'default value', if any, is pre-populated. Also allows other\n   * modules to alter the form element by implementing their own hooks.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items\n   *   An array of the field values. When creating a new entity this may be NULL\n   *   or an empty array to use default values.\n   * @param array $form\n   *   An array representing the form that the editing element will be attached\n   *   to.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   * @param int $get_delta\n   *   Used to get only a specific delta value of a multiple value field.\n   *\n   * @return array\n   *   The form element array created for this field.\n   *\/",18],["T_WHITESPACE","\n  ",38],["T_PUBLIC","public",39],["T_WHITESPACE"," ",39],["T_FUNCTION","function",39],["T_WHITESPACE"," ",39],["T_STRING","form",39],"(",["T_STRING","FieldItemListInterface",39],["T_WHITESPACE"," ",39],["T_VARIABLE","$items",39],",",["T_WHITESPACE"," ",39],["T_ARRAY","array",39],["T_WHITESPACE"," ",39],"&",["T_VARIABLE","$form",39],",",["T_WHITESPACE"," ",39],["T_STRING","FormStateInterface",39],["T_WHITESPACE"," ",39],["T_VARIABLE","$form_state",39],",",["T_WHITESPACE"," ",39],["T_VARIABLE","$get_delta",39],["T_WHITESPACE"," ",39],"=",["T_WHITESPACE"," ",39],["T_STRING","NULL",39],")",";",["T_WHITESPACE","\n\n  ",39],["T_DOC_COMMENT","\/**\n   * Extracts field values from submitted form values.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items\n   *   The field values. This parameter is altered by reference to receive the\n   *   incoming form values.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\/",41],["T_WHITESPACE","\n  ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","extractFormValues",53],"(",["T_STRING","FieldItemListInterface",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$items",53],",",["T_WHITESPACE"," ",53],["T_ARRAY","array",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$form",53],",",["T_WHITESPACE"," ",53],["T_STRING","FormStateInterface",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$form_state",53],")",";",["T_WHITESPACE","\n\n  ",53],["T_DOC_COMMENT","\/**\n   * Reports field-level validation errors against actual form elements.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items\n   *   The field values.\n   * @param \\Symfony\\Component\\Validator\\ConstraintViolationListInterface $violations\n   *   A list of constraint violations to flag.\n   * @param array $form\n   *   The form structure where field elements are attached to. This might be a\n   *   full form structure, or a sub-element of a larger form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\/",55],["T_WHITESPACE","\n  ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","flagErrors",68],"(",["T_STRING","FieldItemListInterface",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$items",68],",",["T_WHITESPACE"," ",68],["T_STRING","ConstraintViolationListInterface",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$violations",68],",",["T_WHITESPACE"," ",68],["T_ARRAY","array",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$form",68],",",["T_WHITESPACE"," ",68],["T_STRING","FormStateInterface",68],["T_WHITESPACE"," ",68],["T_VARIABLE","$form_state",68],")",";",["T_WHITESPACE","\n\n  ",68],["T_DOC_COMMENT","\/**\n   * Retrieves processing information about the widget from $form_state.\n   *\n   * This method is static so that it can be used in static Form API callbacks.\n   *\n   * @param array $parents\n   *   The array of #parents where the field lives in the form.\n   * @param string $field_name\n   *   The field name.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   *\n   * @return array\n   *   An array with the following key\/value pairs:\n   *   - items_count: The number of widgets to display for the field.\n   *   - array_parents: The location of the field's widgets within the $form\n   *     structure. This entry is populated at '#after_build' time.\n   *\/",70],["T_WHITESPACE","\n  ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_STATIC","static",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","getWidgetState",88],"(",["T_ARRAY","array",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$parents",88],",",["T_WHITESPACE"," ",88],["T_VARIABLE","$field_name",88],",",["T_WHITESPACE"," ",88],["T_STRING","FormStateInterface",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$form_state",88],")",";",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Stores processing information about the widget in $form_state.\n   *\n   * This method is static so that it can be used in static Form API #callbacks.\n   *\n   * @param array $parents\n   *   The array of #parents where the widget lives in the form.\n   * @param string $field_name\n   *   The field name.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The form state.\n   * @param array $field_state\n   *   The array of data to store. See getWidgetState() for the structure and\n   *   content of the array.\n   *\/",90],["T_WHITESPACE","\n  ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_STATIC","static",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","setWidgetState",105],"(",["T_ARRAY","array",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$parents",105],",",["T_WHITESPACE"," ",105],["T_VARIABLE","$field_name",105],",",["T_WHITESPACE"," ",105],["T_STRING","FormStateInterface",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$form_state",105],",",["T_WHITESPACE"," ",105],["T_ARRAY","array",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$field_state",105],")",";",["T_WHITESPACE","\n\n",105],"}",["T_WHITESPACE","\n",107]]