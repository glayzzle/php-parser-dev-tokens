[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","CategorizingPluginManagerInterface",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Plugin",6],["T_NS_SEPARATOR","\\",6],["T_STRING","PluginManagerInterface",6],";",["T_WHITESPACE","\n",6],["T_USE","use",7],["T_WHITESPACE"," ",7],["T_STRING","Drupal",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Core",7],["T_NS_SEPARATOR","\\",7],["T_STRING","Entity",7],["T_NS_SEPARATOR","\\",7],["T_STRING","FieldableEntityInterface",7],";",["T_WHITESPACE","\n\n",7],["T_DOC_COMMENT","\/**\n * Defines an interface for the field type plugin manager.\n *\n * @ingroup field_types\n *\/",9],["T_WHITESPACE","\n",13],["T_INTERFACE","interface",14],["T_WHITESPACE"," ",14],["T_STRING","FieldTypePluginManagerInterface",14],["T_WHITESPACE"," ",14],["T_EXTENDS","extends",14],["T_WHITESPACE"," ",14],["T_STRING","PluginManagerInterface",14],",",["T_WHITESPACE"," ",14],["T_STRING","CategorizingPluginManagerInterface",14],["T_WHITESPACE"," ",14],"{",["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Creates a new field item list.\n   *\n   * The provided entity is assigned as the parent of the created item list.\n   * However, it is the responsibility of the caller (usually the parent entity\n   * itself) to make the parent aware of the field as a new child.\n   *\n   * @param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *   The entity this field item list will be part of.\n   * @param string $field_name\n   *   The name of the field.\n   * @param mixed $values\n   *   (optional) The data value. If set, it has to match one of the supported\n   *   data type format as documented for the data type classes.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldItemListInterface\n   *   The instantiated object.\n   *\/",16],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","createFieldItemList",34],"(",["T_STRING","FieldableEntityInterface",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$entity",34],",",["T_WHITESPACE"," ",34],["T_VARIABLE","$field_name",34],",",["T_WHITESPACE"," ",34],["T_VARIABLE","$values",34],["T_WHITESPACE"," ",34],"=",["T_WHITESPACE"," ",34],["T_STRING","NULL",34],")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Creates a new field item as part of a field item list.\n   *\n   * The provided item list is assigned as the parent of the created item. It\n   * However, it is the responsibility of the caller (usually the parent list\n   * itself) to have the parent aware of the item as a new child.\n   *\n   * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items\n   *   The field item list, for which to create a new item.\n   * @param int $index\n   *   The list index at which the item is created.\n   * @param array|null $values\n   *   (optional) The values to assign to the field item properties.\n   *\n   * @return \\Drupal\\Core\\Field\\FieldItemInterface\n   *   The instantiated object.\n   *\/",36],["T_WHITESPACE","\n  ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","createFieldItem",53],"(",["T_STRING","FieldItemListInterface",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$items",53],",",["T_WHITESPACE"," ",53],["T_VARIABLE","$index",53],",",["T_WHITESPACE"," ",53],["T_VARIABLE","$values",53],["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_STRING","NULL",53],")",";",["T_WHITESPACE","\n\n  ",53],["T_DOC_COMMENT","\/**\n   * Returns the default field-level settings for a field type.\n   *\n   * @param string $type\n   *   A field type name.\n   *\n   * @return array\n   *   The field's default settings, as provided by the plugin definition, or\n   *   an empty array if type or settings are undefined.\n   *\/",55],["T_WHITESPACE","\n  ",64],["T_PUBLIC","public",65],["T_WHITESPACE"," ",65],["T_FUNCTION","function",65],["T_WHITESPACE"," ",65],["T_STRING","getDefaultFieldSettings",65],"(",["T_VARIABLE","$type",65],")",";",["T_WHITESPACE","\n\n  ",65],["T_DOC_COMMENT","\/**\n   * Returns the default storage-level settings for a field type.\n   *\n   * @param string $type\n   *   A field type name.\n   *\n   * @return array\n   *   The type's default settings, as provided by the plugin definition, or an\n   *   empty array if type or settings are undefined.\n   *\/",67],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","getDefaultStorageSettings",77],"(",["T_VARIABLE","$type",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Gets the definition of all field types that can be added via UI.\n   *\n   * @return array\n   *   An array of field type definitions.\n   *\/",79],["T_WHITESPACE","\n  ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","getUiDefinitions",85],"(",")",";",["T_WHITESPACE","\n\n  ",85],["T_DOC_COMMENT","\/**\n   * Returns the PHP class that implements the field type plugin.\n   *\n   * @param string $type\n   *   A field type name.\n   *\n   * @return string\n   *   Field type plugin class name.\n   *\/",87],["T_WHITESPACE","\n  ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","getPluginClass",96],"(",["T_VARIABLE","$type",96],")",";",["T_WHITESPACE","\n\n",96],"}",["T_WHITESPACE","\n",98]]