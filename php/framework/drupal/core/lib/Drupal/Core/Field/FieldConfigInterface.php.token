[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Field",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Config",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Entity",5],["T_NS_SEPARATOR","\\",5],["T_STRING","ConfigEntityInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines an interface for configurable field definitions.\n *\n * This interface allows both configurable fields and overridden base fields to\n * share a common interface. The interface also extends ConfigEntityInterface\n * to ensure that implementations have the expected save() method.\n *\n * @see \\Drupal\\Core\\Field\\Entity\\BaseFieldOverride\n * @see \\Drupal\\field\\Entity\\FieldConfig\n *\/",7],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","FieldConfigInterface",17],["T_WHITESPACE"," ",17],["T_EXTENDS","extends",17],["T_WHITESPACE"," ",17],["T_STRING","FieldDefinitionInterface",17],",",["T_WHITESPACE"," ",17],["T_STRING","ConfigEntityInterface",17],["T_WHITESPACE"," ",17],"{",["T_WHITESPACE","\n\n  ",17],["T_DOC_COMMENT","\/**\n   * Sets the field definition label.\n   *\n   * @param string $label\n   *   The label to set.\n   *\n   * @return $this\n   *\/",19],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","setLabel",27],"(",["T_VARIABLE","$label",27],")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Sets a human readable description.\n   *\n   * Descriptions are usually used on user interfaces where the data is edited\n   * or displayed.\n   *\n   * @param string $description\n   *   The description for this field.\n   *\n   * @return $this\n   *\/",29],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","setDescription",40],"(",["T_VARIABLE","$description",40],")",";",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Sets whether the field is translatable.\n   *\n   * @param bool $translatable\n   *   Whether the field is translatable.\n   *\n   * @return $this\n   *\/",42],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","setTranslatable",50],"(",["T_VARIABLE","$translatable",50],")",";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * Sets field settings.\n   *\n   * Note that the method does not unset existing settings not specified in the\n   * incoming $settings array.\n   *\n   * For example:\n   * @code\n   *   \/\/ Given these are the default settings.\n   *   $field_definition->getSettings() === [\n   *     'fruit' => 'apple',\n   *     'season' => 'summer',\n   *   ];\n   *   \/\/ Change only the 'fruit' setting.\n   *   $field_definition->setSettings(['fruit' => 'banana']);\n   *   \/\/ The 'season' setting persists unchanged.\n   *   $field_definition->getSettings() === [\n   *     'fruit' => 'banana',\n   *     'season' => 'summer',\n   *   ];\n   * @endcode\n   *\n   * For clarity, it is preferred to use setSetting() if not all available\n   * settings are supplied.\n   *\n   * @param array $settings\n   *   The array of field settings.\n   *\n   * @return $this\n   *\/",52],["T_WHITESPACE","\n  ",81],["T_PUBLIC","public",82],["T_WHITESPACE"," ",82],["T_FUNCTION","function",82],["T_WHITESPACE"," ",82],["T_STRING","setSettings",82],"(",["T_ARRAY","array",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$settings",82],")",";",["T_WHITESPACE","\n\n  ",82],["T_DOC_COMMENT","\/**\n   * Sets the value for a field setting by name.\n   *\n   * @param string $setting_name\n   *   The name of the setting.\n   * @param mixed $value\n   *   The value of the setting.\n   *\n   * @return $this\n   *\/",84],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","setSetting",94],"(",["T_VARIABLE","$setting_name",94],",",["T_WHITESPACE"," ",94],["T_VARIABLE","$value",94],")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Sets whether the field can be empty.\n   *\n   * If a field is required, an entity needs to have at least a valid,\n   * non-empty item in that field's FieldItemList in order to pass validation.\n   *\n   * An item is considered empty if its isEmpty() method returns TRUE.\n   * Typically, that is if at least one of its required properties is empty.\n   *\n   * @param bool $required\n   *   TRUE if the field is required. FALSE otherwise.\n   *\n   * @return $this\n   *   The current object, for a fluent interface.\n   *\/",96],["T_WHITESPACE","\n  ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","setRequired",111],"(",["T_VARIABLE","$required",111],")",";",["T_WHITESPACE","\n\n  ",111],["T_DOC_COMMENT","\/**\n   * Sets a default value.\n   *\n   * Note that if a default value callback is set, it will take precedence over\n   * any value set here.\n   *\n   * @param mixed $value\n   *   The default value for the field. This can be either:\n   *   - a literal, in which case it will be assigned to the first property of\n   *     the first item.\n   *   - a numerically indexed array of items, each item being a property\/value\n   *     array.\n   *   - a non-numerically indexed array, in which case the array is assumed to\n   *     be a property\/value array and used as the first item\n   *   - NULL or array() for no default value.\n   *\n   * @return $this\n   *\/",113],["T_WHITESPACE","\n  ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","setDefaultValue",131],"(",["T_VARIABLE","$value",131],")",";",["T_WHITESPACE","\n\n  ",131],["T_DOC_COMMENT","\/**\n   * Sets a custom default value callback.\n   *\n   * If set, the callback overrides any set default value.\n   *\n   * @param string|null $callback\n   *   The callback to invoke for getting the default value (pass NULL to unset\n   *   a previously set callback). The callback will be invoked with the\n   *   following arguments:\n   *   - \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity\n   *     The entity being created.\n   *   - \\Drupal\\Core\\Field\\FieldDefinitionInterface $definition\n   *     The field definition.\n   *   It should return the default value in the format accepted by the\n   *   setDefaultValue() method.\n   *\n   * @return $this\n   *\/",133],["T_WHITESPACE","\n  ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","setDefaultValueCallback",151],"(",["T_VARIABLE","$callback",151],")",";",["T_WHITESPACE","\n\n  ",151],["T_DOC_COMMENT","\/**\n   * Sets constraints for a given field item property.\n   *\n   * Note: this overwrites any existing property constraints. If you need to\n   * add to the existing constraints, use\n   * \\Drupal\\Core\\Field\\FieldConfigInterface::addPropertyConstraints()\n   *\n   * Note that constraints added via this method are not stored in configuration\n   * and as such need to be added at runtime using\n   * hook_entity_bundle_field_info_alter().\n   *\n   * @param string $name\n   *   The name of the property to set constraints for.\n   * @param array $constraints\n   *   The constraints to set.\n   *\n   * @return static\n   *   The object itself for chaining.\n   *\n   * @see hook_entity_bundle_field_info_alter()\n   *\/",153],["T_WHITESPACE","\n  ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","setPropertyConstraints",174],"(",["T_VARIABLE","$name",174],",",["T_WHITESPACE"," ",174],["T_ARRAY","array",174],["T_WHITESPACE"," ",174],["T_VARIABLE","$constraints",174],")",";",["T_WHITESPACE","\n\n  ",174],["T_DOC_COMMENT","\/**\n   * Adds constraints for a given field item property.\n   *\n   * Adds a constraint to a property of a field item. e.g.\n   * @code\n   * \/\/ Limit the field item's value property to the range 0 through 10.\n   * \/\/ e.g. $node->field_how_many->value.\n   * $field->addPropertyConstraints('value', [\n   *   'Range' => [\n   *     'min' => 0,\n   *     'max' => 10,\n   *   ]\n   * ]);\n   * @endcode\n   *\n   * If you want to add a validation constraint that applies to the\n   * \\Drupal\\Core\\Field\\FieldItemList, use FieldConfigInterface::addConstraint()\n   * instead.\n   *\n   * Note: passing a new set of options for an existing property constraint will\n   * overwrite with the new options.\n   *\n   * Note that constraints added via this method are not stored in configuration\n   * and as such need to be added at runtime using\n   * hook_entity_bundle_field_info_alter().\n   *\n   * @param string $name\n   *   The name of the property to set constraints for.\n   * @param array $constraints\n   *   The constraints to set.\n   *\n   * @return static\n   *   The object itself for chaining.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldConfigInterface::addConstraint()\n   * @see hook_entity_bundle_field_info_alter()\n   *\/",176],["T_WHITESPACE","\n  ",212],["T_PUBLIC","public",213],["T_WHITESPACE"," ",213],["T_FUNCTION","function",213],["T_WHITESPACE"," ",213],["T_STRING","addPropertyConstraints",213],"(",["T_VARIABLE","$name",213],",",["T_WHITESPACE"," ",213],["T_ARRAY","array",213],["T_WHITESPACE"," ",213],["T_VARIABLE","$constraints",213],")",";",["T_WHITESPACE","\n\n  ",213],["T_DOC_COMMENT","\/**\n   * Adds a validation constraint to the FieldItemList.\n   *\n   * Note: If you wish to apply a constraint to just a property of a FieldItem\n   * use \\Drupal\\Core\\Field\\FieldConfigInterface::addPropertyConstraints()\n   * instead.\n   * @code\n   *   \/\/ Add a constraint to the 'field_username' FieldItemList.\n   *   \/\/ e.g. $node->field_username\n   *   $fields['field_username']->addConstraint('UniqueField');\n   * @endcode\n   *\n   * If you wish to apply a constraint to a \\Drupal\\Core\\Field\\FieldItem instead\n   * of a property or FieldItemList, you can use the\n   * \\Drupal\\Core\\Field\\FieldConfigBase::getItemDefinition() method.\n   * @code\n   *   \/\/ Add a constraint to the 'field_entity_reference' FieldItem (entity\n   *   \/\/ reference item).\n   *   $fields['field_entity_reference']->getItemDefinition()->addConstraint('MyCustomFieldItemValidationPlugin', []);\n   * @endcode\n   *\n   * See \\Drupal\\Core\\TypedData\\DataDefinitionInterface::getConstraints() for\n   * details.\n   *\n   * Note that constraints added via this method are not stored in configuration\n   * and as such need to be added at runtime using\n   * hook_entity_bundle_field_info_alter().\n   *\n   * @param string $constraint_name\n   *   The name of the constraint to add, i.e. its plugin id.\n   * @param array|null $options\n   *   The constraint options as required by the constraint plugin, or NULL.\n   *\n   * @return static\n   *   The object itself for chaining.\n   *\n   * @see \\Drupal\\Core\\Field\\FieldItemList\n   * @see \\Drupal\\Core\\Field\\FieldConfigInterface::addPropertyConstraints()\n   * @see hook_entity_bundle_field_info_alter()\n   *\/",215],["T_WHITESPACE","\n  ",254],["T_PUBLIC","public",255],["T_WHITESPACE"," ",255],["T_FUNCTION","function",255],["T_WHITESPACE"," ",255],["T_STRING","addConstraint",255],"(",["T_VARIABLE","$constraint_name",255],",",["T_WHITESPACE"," ",255],["T_VARIABLE","$options",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_STRING","NULL",255],")",";",["T_WHITESPACE","\n\n  ",255],["T_DOC_COMMENT","\/**\n   * Sets the array of validation constraints for the FieldItemList.\n   *\n   * NOTE: This will overwrite any previously set constraints. In most cases\n   * FieldConfigInterface::addConstraint() should be used instead.\n   *\n   * Note that constraints added via this method are not stored in configuration\n   * and as such need to be added at runtime using\n   * hook_entity_bundle_field_info_alter().\n   *\n   * @param array $constraints\n   *   The array of constraints. See\n   *   \\Drupal\\Core\\TypedData\\TypedDataManager::getConstraints() for details.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\TypedData\\DataDefinition::addConstraint()\n   * @see \\Drupal\\Core\\TypedData\\DataDefinition::getConstraints()\n   * @see \\Drupal\\Core\\Field\\FieldItemList\n   * @see hook_entity_bundle_field_info_alter()\n   *\/",257],["T_WHITESPACE","\n  ",277],["T_PUBLIC","public",278],["T_WHITESPACE"," ",278],["T_FUNCTION","function",278],["T_WHITESPACE"," ",278],["T_STRING","setConstraints",278],"(",["T_ARRAY","array",278],["T_WHITESPACE"," ",278],["T_VARIABLE","$constraints",278],")",";",["T_WHITESPACE","\n\n",278],"}",["T_WHITESPACE","\n",280]]