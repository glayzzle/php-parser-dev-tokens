[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","StreamWrapper",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides a StreamWrapper manager.\n *\n * @see \\Drupal\\Core\\StreamWrapper\\StreamWrapperInterface\n *\/",5],["T_WHITESPACE","\n",9],["T_INTERFACE","interface",10],["T_WHITESPACE"," ",10],["T_STRING","StreamWrapperManagerInterface",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Provides Drupal stream wrapper registry.\n   *\n   * A stream wrapper is an abstraction of a file system that allows Drupal to\n   * use the same set of methods to access both local files and remote\n   * resources.\n   *\n   * Provide a facility for managing and querying user-defined stream wrappers\n   * in PHP. PHP's internal stream_get_wrappers() doesn't return the class\n   * registered to handle a stream, which we need to be able to find the\n   * handler\n   * for class instantiation.\n   *\n   * If a module registers a scheme that is already registered with PHP, the\n   * existing scheme will be unregistered and replaced with the specified\n   * class.\n   *\n   * A stream is referenced as \"scheme:\/\/target\".\n   *\n   * The optional $filter parameter can be used to retrieve only the stream\n   * wrappers that are appropriate for particular usage. For example, this\n   * returns only stream wrappers that use local file storage:\n   *\n   * @code\n   *   $stream_wrapper_manager = \\Drupal::service('stream_wrapper_manager');\n   *   $local_stream_wrappers = $stream_wrapper_manager->getWrappers(StreamWrapperInterface::LOCAL);\n   * @endcode\n   *\n   * The $filter parameter can only filter to types containing a particular\n   * flag. In some cases, you may want to filter to types that do not contain a\n   * particular flag. For example, you may want to retrieve all stream wrappers\n   * that are not writable, or all stream wrappers that are not local. PHP's\n   * array_diff_key() function can be used to help with this. For example, this\n   * returns only stream wrappers that do not use local file storage:\n   * @code\n   *   $stream_wrapper_manager = \\Drupal::service('stream_wrapper_manager');\n   *   $remote_stream_wrappers = array_diff_key(\n   *     $stream_wrapper_manager->getWrappers(StreamWrapperInterface::ALL),\n   *     $stream_wrapper_manager->getWrappers(StreamWrapperInterface::LOCAL)\n   *   );\n   * @endcode\n   *\n   * @param int $filter\n   *   (Optional) Filters out all types except those with an on bit for each on\n   *   bit in $filter. For example, if $filter is\n   *   StreamWrapperInterface::WRITE_VISIBLE, which is equal to\n   *   (StreamWrapperInterface::READ | StreamWrapperInterface::WRITE |\n   *   StreamWrapperInterface::VISIBLE), then only stream wrappers with all\n   *   three of these bits set are returned. Defaults to\n   *   StreamWrapperInterface::ALL, which returns all registered stream\n   *   wrappers.\n   *\n   * @return array\n   *   An array keyed by scheme, with values containing an array of information\n   *   about the stream wrapper, as returned by hook_stream_wrappers(). If\n   *   $filter is omitted or set to StreamWrapperInterface::ALL, the entire\n   *   Drupal stream wrapper registry is returned. Otherwise only the stream\n   *   wrappers whose 'type' bitmask has an on bit for each bit specified in\n   *   $filter are returned.\n   *\/",12],["T_WHITESPACE","\n  ",71],["T_PUBLIC","public",72],["T_WHITESPACE"," ",72],["T_FUNCTION","function",72],["T_WHITESPACE"," ",72],["T_STRING","getWrappers",72],"(",["T_VARIABLE","$filter",72],["T_WHITESPACE"," ",72],"=",["T_WHITESPACE"," ",72],["T_STRING","StreamWrapperInterface",72],["T_DOUBLE_COLON","::",72],["T_STRING","ALL",72],")",";",["T_WHITESPACE","\n\n  ",72],["T_DOC_COMMENT","\/**\n   * Returns registered stream wrapper names.\n   *\n   * @param int $filter\n   *   (Optional) Filters out all types except those with an on bit for each on\n   *   bit in $filter. For example, if $filter is\n   *   StreamWrapperInterface::WRITE_VISIBLE, which is equal to\n   *   (StreamWrapperInterface::READ | StreamWrapperInterface::WRITE |\n   *   StreamWrapperInterface::VISIBLE), then only stream wrappers with all\n   *   three of these bits set are returned. Defaults to\n   *   StreamWrapperInterface::ALL, which returns all registered stream\n   *   wrappers.\n   *\n   * @return array\n   *   Stream wrapper names, keyed by scheme.\n   *\/",74],["T_WHITESPACE","\n  ",89],["T_PUBLIC","public",90],["T_WHITESPACE"," ",90],["T_FUNCTION","function",90],["T_WHITESPACE"," ",90],["T_STRING","getNames",90],"(",["T_VARIABLE","$filter",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_STRING","StreamWrapperInterface",90],["T_DOUBLE_COLON","::",90],["T_STRING","ALL",90],")",";",["T_WHITESPACE","\n\n  ",90],["T_DOC_COMMENT","\/**\n   * Returns registered stream wrapper descriptions.\n   *\n   * @param int $filter\n   *   (Optional) Filters out all types except those with an on bit for each on\n   *   bit in $filter. For example, if $filter is\n   *   StreamWrapperInterface::WRITE_VISIBLE, which is equal to\n   *   (StreamWrapperInterface::READ | StreamWrapperInterface::WRITE |\n   *   StreamWrapperInterface::VISIBLE), then only stream wrappers with all\n   *   three of these bits set are returned. Defaults to\n   *   StreamWrapperInterface::ALL, which returns all registered stream\n   *   wrappers.\n   *\n   * @return array\n   *   Stream wrapper descriptions, keyed by scheme.\n   *\/",92],["T_WHITESPACE","\n  ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","getDescriptions",108],"(",["T_VARIABLE","$filter",108],["T_WHITESPACE"," ",108],"=",["T_WHITESPACE"," ",108],["T_STRING","StreamWrapperInterface",108],["T_DOUBLE_COLON","::",108],["T_STRING","ALL",108],")",";",["T_WHITESPACE","\n\n  ",108],["T_DOC_COMMENT","\/**\n   * Returns a reference to the stream wrapper class responsible for a scheme.\n   *\n   * This helper method returns a stream instance using a scheme. That is, the\n   * passed string does not contain a \":\/\/\". For example, \"public\" is a scheme\n   * but \"public:\/\/\" is a URI (stream). This is because the later contains both\n   * a scheme and target despite target being empty.\n   *\n   * Note: the instance URI will be initialized to \"scheme:\/\/\" so that you can\n   * make the customary method calls as if you had retrieved an instance by URI.\n   *\n   * @param string $scheme\n   *   If the stream was \"public:\/\/target\", \"public\" would be the scheme.\n   *\n   * @return \\Drupal\\Core\\StreamWrapper\\StreamWrapperInterface|bool\n   *   Returns a new stream wrapper object appropriate for the given $scheme.\n   *   For example, for the public scheme a stream wrapper object\n   *   (Drupal\\Core\\StreamWrapper\\PublicStream).\n   *   FALSE is returned if no registered handler could be found.\n   *\/",110],["T_WHITESPACE","\n  ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","getViaScheme",130],"(",["T_VARIABLE","$scheme",130],")",";",["T_WHITESPACE","\n\n  ",130],["T_DOC_COMMENT","\/**\n   * Returns a reference to the stream wrapper class responsible for a URI.\n   *\n   * The scheme determines the stream wrapper class that should be\n   * used by consulting the stream wrapper registry.\n   *\n   * @param string $uri\n   *   A stream, referenced as \"scheme:\/\/target\".\n   *\n   * @return \\Drupal\\Core\\StreamWrapper\\StreamWrapperInterface|bool\n   *   Returns a new stream wrapper object appropriate for the given URI or\n   *   FALSE if no registered handler could be found. For example, a URI of\n   *   \"private:\/\/example.txt\" would return a new private stream wrapper object\n   *   (Drupal\\Core\\StreamWrapper\\PrivateStream).\n   *\/",132],["T_WHITESPACE","\n  ",146],["T_PUBLIC","public",147],["T_WHITESPACE"," ",147],["T_FUNCTION","function",147],["T_WHITESPACE"," ",147],["T_STRING","getViaUri",147],"(",["T_VARIABLE","$uri",147],")",";",["T_WHITESPACE","\n\n  ",147],["T_DOC_COMMENT","\/**\n   * Returns the stream wrapper class name for a given scheme.\n   *\n   * @param string $scheme\n   *   Stream scheme.\n   *\n   * @return string|bool\n   *   Return string if a scheme has a registered handler, or FALSE.\n   *\/",149],["T_WHITESPACE","\n  ",157],["T_PUBLIC","public",158],["T_WHITESPACE"," ",158],["T_FUNCTION","function",158],["T_WHITESPACE"," ",158],["T_STRING","getClass",158],"(",["T_VARIABLE","$scheme",158],")",";",["T_WHITESPACE","\n\n  ",158],["T_DOC_COMMENT","\/**\n   * Registers stream wrapper with PHP.\n   *\n   * @param string $scheme\n   *   The scheme of the stream wrapper.\n   * @param string $class\n   *   The class of the stream wrapper.\n   * @param int $type\n   *   The type of the stream wrapper.\n   *\/",160],["T_WHITESPACE","\n  ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","registerWrapper",170],"(",["T_VARIABLE","$scheme",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$class",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$type",170],")",";",["T_WHITESPACE","\n\n",170],"}",["T_WHITESPACE","\n",172]]