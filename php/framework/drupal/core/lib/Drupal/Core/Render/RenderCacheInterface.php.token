[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Render",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for caching rendered render arrays.\n *\n * @internal\n *\n * @see sec_caching\n * @see \\Drupal\\Core\\Render\\RendererInterface\n *\/",5],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","RenderCacheInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Gets a cacheable render array for a render array and its rendered output.\n   *\n   * Given a render array and its rendered output (HTML string), return an array\n   * data structure that allows the render array and its associated metadata to\n   * be cached reliably (and is serialization-safe).\n   *\n   * If Drupal needs additional rendering metadata to be cached at some point,\n   * consumers of this method will continue to work. Those who only cache\n   * certain parts of a render array will cease to work.\n   *\n   * @param array $elements\n   *   A render array, on which \\Drupal\\Core\\Render\\RendererInterface::render()\n   *   has already been invoked.\n   *\n   * @return array\n   *   An array representing the cacheable data for this render array.\n   *\/",15],["T_WHITESPACE","\n  ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","getCacheableRenderArray",33],"(",["T_ARRAY","array",33],["T_WHITESPACE"," ",33],["T_VARIABLE","$elements",33],")",";",["T_WHITESPACE","\n\n  ",33],["T_DOC_COMMENT","\/**\n   * Gets the cached, pre-rendered element of a renderable element from cache.\n   *\n   * @param array $elements\n   *   A renderable array.\n   *\n   * @return array|false\n   *   A renderable array, with the original element and all its children pre-\n   *   rendered, or FALSE if no cached copy of the element is available.\n   *\n   * @see \\Drupal\\Core\\Render\\RendererInterface::render()\n   * @see ::set()\n   *\/",35],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","get",48],"(",["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$elements",48],")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Caches the rendered output of a renderable array.\n   *\n   * May be called by an implementation of \\Drupal\\Core\\Render\\RendererInterface\n   * while rendering, if the #cache property is set.\n   *\n   * @param array $elements\n   *   A renderable array.\n   * @param array $pre_bubbling_elements\n   *   A renderable array corresponding to the state (in particular, the\n   *   cacheability metadata) of $elements prior to the beginning of its\n   *   rendering process, and therefore before any bubbling of child\n   *   information has taken place. Only the #cache property is used by this\n   *   function, so the caller may omit all other properties and children from\n   *   this array.\n   *\n   * @return bool|null\n   *   Returns FALSE if no cache item could be created, NULL otherwise.\n   *\n   * @see ::get()\n   *\/",50],["T_WHITESPACE","\n  ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","set",71],"(",["T_ARRAY","array",71],["T_WHITESPACE"," ",71],"&",["T_VARIABLE","$elements",71],",",["T_WHITESPACE"," ",71],["T_ARRAY","array",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$pre_bubbling_elements",71],")",";",["T_WHITESPACE","\n\n",71],"}",["T_WHITESPACE","\n",73]]