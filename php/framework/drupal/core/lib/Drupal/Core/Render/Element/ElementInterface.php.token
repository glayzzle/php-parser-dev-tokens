[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Render",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Element",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginInspectionInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Provides an interface for render element plugins.\n *\n * Render element plugins allow modules to declare their own Render API element\n * types and specify the default values for the properties. The values returned\n * by the getInfo() method of the element plugin will be merged with the\n * properties specified in render arrays. Thus, you can specify defaults for any\n * Render API keys, in addition to those explicitly documented by\n * \\Drupal\\Core\\Render\\ElementInfoManagerInterface::getInfo().\n *\n * Some render elements are specifically form input elements; see\n * \\Drupal\\Core\\Render\\Element\\FormElementInterface for more information.\n *\n * @see \\Drupal\\Core\\Render\\ElementInfoManager\n * @see \\Drupal\\Core\\Render\\Annotation\\RenderElement\n * @see \\Drupal\\Core\\Render\\Element\\RenderElement\n * @see plugin_api\n *\n * @ingroup theme_render\n *\/",7],["T_WHITESPACE","\n",26],["T_INTERFACE","interface",27],["T_WHITESPACE"," ",27],["T_STRING","ElementInterface",27],["T_WHITESPACE"," ",27],["T_EXTENDS","extends",27],["T_WHITESPACE"," ",27],["T_STRING","PluginInspectionInterface",27],["T_WHITESPACE"," ",27],"{",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Returns the element properties for this element.\n   *\n   * @return array\n   *   An array of element properties. See\n   *   \\Drupal\\Core\\Render\\ElementInfoManagerInterface::getInfo() for\n   *   documentation of the standard properties of all elements, and the\n   *   return value format.\n   *\/",29],["T_WHITESPACE","\n  ",37],["T_PUBLIC","public",38],["T_WHITESPACE"," ",38],["T_FUNCTION","function",38],["T_WHITESPACE"," ",38],["T_STRING","getInfo",38],"(",")",";",["T_WHITESPACE","\n\n  ",38],["T_DOC_COMMENT","\/**\n   * Sets a form element's class attribute.\n   *\n   * Adds 'required' and 'error' classes as needed.\n   *\n   * @param array $element\n   *   The form element.\n   * @param array $class\n   *   Array of new class names to be added.\n   *\/",40],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_STATIC","static",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","setAttributes",50],"(","&",["T_VARIABLE","$element",50],",",["T_WHITESPACE"," ",50],["T_VARIABLE","$class",50],["T_WHITESPACE"," ",50],"=",["T_WHITESPACE"," ",50],["T_ARRAY","array",50],"(",")",")",";",["T_WHITESPACE","\n\n",50],"}",["T_WHITESPACE","\n",52]]