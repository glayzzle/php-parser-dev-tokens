[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Render",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for turning a render array into a placeholder.\n *\n * This encapsulates logic related to generating placeholders.\n *\n * Makes it possible to determine whether a render array can be placeholdered\n * (it can be reconstructed independently of the request context), whether a\n * render array should be placeholdered (its cacheability meets the conditions),\n * and to create a placeholder.\n *\n * @see \\Drupal\\Core\\Render\\RendererInterface\n *\/",5],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","PlaceholderGeneratorInterface",17],["T_WHITESPACE"," ",17],"{",["T_WHITESPACE","\n\n  ",17],["T_DOC_COMMENT","\/**\n   * Analyzes whether the given render array can be placeholdered.\n   *\n   * @param array $element\n   *   A render array. Its #lazy_builder and #create_placeholder properties are\n   *   analyzed.\n   *\n   * @return bool\n   *\/",19],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","canCreatePlaceholder",28],"(",["T_ARRAY","array",28],["T_WHITESPACE"," ",28],["T_VARIABLE","$element",28],")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Whether the given render array should be automatically placeholdered.\n   *\n   * The render array should be placeholdered if its cacheability either has a\n   * cache context with too high cardinality, a cache tag with a too high\n   * invalidation rate, or a max-age that is too low. Either of these would make\n   * caching ineffective, and thus we choose to placeholder instead.\n   *\n   * @param array $element\n   *   The render array whose cacheability to analyze.\n   *\n   * @return bool\n   *   Whether the given render array's cacheability meets the placeholdering\n   *   conditions.\n   *\/",30],["T_WHITESPACE","\n  ",44],["T_PUBLIC","public",45],["T_WHITESPACE"," ",45],["T_FUNCTION","function",45],["T_WHITESPACE"," ",45],["T_STRING","shouldAutomaticallyPlaceholder",45],"(",["T_ARRAY","array",45],["T_WHITESPACE"," ",45],["T_VARIABLE","$element",45],")",";",["T_WHITESPACE","\n\n  ",45],["T_DOC_COMMENT","\/**\n   * Turns the given element into a placeholder.\n   *\n   * Placeholdering allows us to avoid \"poor cacheability contamination\": this\n   * maps the current render array to one that only has #markup and #attached,\n   * and #attached contains a placeholder with this element's prior cacheability\n   * metadata. In other words: this placeholder is perfectly cacheable, the\n   * placeholder replacement logic effectively cordons off poor cacheability.\n   *\n   * @param array $element\n   *   The render array to create a placeholder for.\n   *\n   * @return array\n   *   Render array with placeholder markup and the attached placeholder\n   *   replacement metadata.\n   *\/",47],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","createPlaceholder",63],"(",["T_ARRAY","array",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$element",63],")",";",["T_WHITESPACE","\n\n",63],"}",["T_WHITESPACE","\n",65]]