[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines required methods for classes wanting to handle cache tag changes.\n *\n * Services that implement this interface must add the cache_tags_invalidator\n * tag to be notified. Cache backends may implement this interface as well, they\n * will be notified automatically.\n *\n * @ingroup cache\n *\/",5],["T_WHITESPACE","\n",13],["T_INTERFACE","interface",14],["T_WHITESPACE"," ",14],["T_STRING","CacheTagsInvalidatorInterface",14],["T_WHITESPACE"," ",14],"{",["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Marks cache items with any of the specified tags as invalid.\n   *\n   * @param string[] $tags\n   *   The list of tags for which to invalidate cache items.\n   *\/",16],["T_WHITESPACE","\n  ",21],["T_PUBLIC","public",22],["T_WHITESPACE"," ",22],["T_FUNCTION","function",22],["T_WHITESPACE"," ",22],["T_STRING","invalidateTags",22],"(",["T_ARRAY","array",22],["T_WHITESPACE"," ",22],["T_VARIABLE","$tags",22],")",";",["T_WHITESPACE","\n\n",22],"}",["T_WHITESPACE","\n",24]]