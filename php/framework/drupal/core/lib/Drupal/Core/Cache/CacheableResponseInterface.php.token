[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for responses that can expose cacheability metadata.\n *\n * @see \\Drupal\\Core\\Cache\\CacheableResponseTrait\n *\/",5],["T_WHITESPACE","\n",9],["T_INTERFACE","interface",10],["T_WHITESPACE"," ",10],["T_STRING","CacheableResponseInterface",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Adds a dependency on an object: merges its cacheability metadata.\n   *\n   * For instance, when a response depends on some configuration, an entity, or\n   * an access result, we must make sure their cacheability metadata is present\n   * on the response. This method makes doing that simple.\n   *\n   * @param \\Drupal\\Core\\Cache\\CacheableDependencyInterface|mixed $dependency\n   *   The dependency. If the object implements CacheableDependencyInterface,\n   *   then its cacheability metadata will be used. Otherwise, the passed in\n   *   object must be assumed to be uncacheable, so max-age 0 is set.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheableMetadata::createFromObject()\n   *\/",12],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","addCacheableDependency",28],"(",["T_VARIABLE","$dependency",28],")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Returns the cacheability metadata for this response.\n   *\n   * @return \\Drupal\\Core\\Cache\\CacheableMetadata\n   *\/",30],["T_WHITESPACE","\n  ",34],["T_PUBLIC","public",35],["T_WHITESPACE"," ",35],["T_FUNCTION","function",35],["T_WHITESPACE"," ",35],["T_STRING","getCacheableMetadata",35],"(",")",";",["T_WHITESPACE","\n\n",35],"}",["T_WHITESPACE","\n",37]]