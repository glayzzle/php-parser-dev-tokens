[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for cache implementations.\n *\n * All cache implementations have to implement this interface.\n * Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which\n * can be consulted as an example.\n *\n * The cache indentifiers are case sensitive.\n *\n * @ingroup cache\n *\/",5],["T_WHITESPACE","\n",15],["T_INTERFACE","interface",16],["T_WHITESPACE"," ",16],["T_STRING","CacheBackendInterface",16],["T_WHITESPACE"," ",16],"{",["T_WHITESPACE","\n\n  ",16],["T_DOC_COMMENT","\/**\n   * Indicates that the item should never be removed unless explicitly deleted.\n   *\/",18],["T_WHITESPACE","\n  ",20],["T_CONST","const",21],["T_WHITESPACE"," ",21],["T_STRING","CACHE_PERMANENT",21],["T_WHITESPACE"," ",21],"=",["T_WHITESPACE"," ",21],"-",["T_LNUMBER","1",21],";",["T_WHITESPACE","\n\n  ",21],["T_DOC_COMMENT","\/**\n   * Returns data from the persistent cache.\n   *\n   * @param string $cid\n   *   The cache ID of the data to retrieve.\n   * @param bool $allow_invalid\n   *   (optional) If TRUE, a cache item may be returned even if it is expired or\n   *   has been invalidated. Such items may sometimes be preferred, if the\n   *   alternative is recalculating the value stored in the cache, especially\n   *   if another concurrent request is already recalculating the same value.\n   *   The \"valid\" property of the returned object indicates whether the item is\n   *   valid or not. Defaults to FALSE.\n   *\n   * @return object|false\n   *   The cache item or FALSE on failure.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::getMultiple()\n   *\/",23],["T_WHITESPACE","\n  ",40],["T_PUBLIC","public",41],["T_WHITESPACE"," ",41],["T_FUNCTION","function",41],["T_WHITESPACE"," ",41],["T_STRING","get",41],"(",["T_VARIABLE","$cid",41],",",["T_WHITESPACE"," ",41],["T_VARIABLE","$allow_invalid",41],["T_WHITESPACE"," ",41],"=",["T_WHITESPACE"," ",41],["T_STRING","FALSE",41],")",";",["T_WHITESPACE","\n\n  ",41],["T_DOC_COMMENT","\/**\n   * Returns data from the persistent cache when given an array of cache IDs.\n   *\n   * @param array $cids\n   *   An array of cache IDs for the data to retrieve. This is passed by\n   *   reference, and will have the IDs successfully returned from cache\n   *   removed.\n   * @param bool $allow_invalid\n   *   (optional) If TRUE, cache items may be returned even if they have expired\n   *   or been invalidated. Such items may sometimes be preferred, if the\n   *   alternative is recalculating the value stored in the cache, especially\n   *   if another concurrent thread is already recalculating the same value. The\n   *   \"valid\" property of the returned objects indicates whether the items are\n   *   valid or not. Defaults to FALSE.\n   *\n   * @return array\n   *   An array of cache item objects indexed by cache ID.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::get()\n   *\/",43],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","getMultiple",63],"(","&",["T_VARIABLE","$cids",63],",",["T_WHITESPACE"," ",63],["T_VARIABLE","$allow_invalid",63],["T_WHITESPACE"," ",63],"=",["T_WHITESPACE"," ",63],["T_STRING","FALSE",63],")",";",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * Stores data in the persistent cache.\n   *\n   * Core cache implementations set the created time on cache item with\n   * microtime(TRUE) rather than REQUEST_TIME_FLOAT, because the created time\n   * of cache items should match when they are created, not when the request\n   * started. Apart from being more accurate, this increases the chance an\n   * item will legitimately be considered valid.\n   *\n   * @param string $cid\n   *   The cache ID of the data to store.\n   * @param mixed $data\n   *   The data to store in the cache.\n   *   Some storage engines only allow objects up to a maximum of 1MB in size to\n   *   be stored by default. When caching large arrays or similar, take care to\n   *   ensure $data does not exceed this size.\n   * @param int $expire\n   *   One of the following values:\n   *   - CacheBackendInterface::CACHE_PERMANENT: Indicates that the item should\n   *     not be removed unless it is deleted explicitly.\n   *   - A Unix timestamp: Indicates that the item will be considered invalid\n   *     after this time, i.e. it will not be returned by get() unless\n   *     $allow_invalid has been set to TRUE. When the item has expired, it may\n   *     be permanently deleted by the garbage collector at any time.\n   * @param array $tags\n   *   An array of tags to be stored with the cache item. These should normally\n   *   identify objects used to build the cache item, which should trigger\n   *   cache invalidation when updated. For example if a cached item represents\n   *   a node, both the node ID and the author's user ID might be passed in as\n   *   tags. For example array('node' => array(123), 'user' => array(92)).\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::get()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::getMultiple()\n   *\/",65],["T_WHITESPACE","\n  ",98],["T_PUBLIC","public",99],["T_WHITESPACE"," ",99],["T_FUNCTION","function",99],["T_WHITESPACE"," ",99],["T_STRING","set",99],"(",["T_VARIABLE","$cid",99],",",["T_WHITESPACE"," ",99],["T_VARIABLE","$data",99],",",["T_WHITESPACE"," ",99],["T_VARIABLE","$expire",99],["T_WHITESPACE"," ",99],"=",["T_WHITESPACE"," ",99],["T_STRING","Cache",99],["T_DOUBLE_COLON","::",99],["T_STRING","PERMANENT",99],",",["T_WHITESPACE"," ",99],["T_ARRAY","array",99],["T_WHITESPACE"," ",99],["T_VARIABLE","$tags",99],["T_WHITESPACE"," ",99],"=",["T_WHITESPACE"," ",99],["T_ARRAY","array",99],"(",")",")",";",["T_WHITESPACE","\n\n  ",99],["T_DOC_COMMENT","\/**\n   * Store multiple items in the persistent cache.\n   *\n   * @param array $items\n   *   An array of cache items, keyed by cid. In the form:\n   *   @code\n   *   $items = array(\n   *     $cid => array(\n   *       \/\/ Required, will be automatically serialized if not a string.\n   *       'data' => $data,\n   *       \/\/ Optional, defaults to CacheBackendInterface::CACHE_PERMANENT.\n   *       'expire' => CacheBackendInterface::CACHE_PERMANENT,\n   *       \/\/ (optional) The cache tags for this item, see CacheBackendInterface::set().\n   *       'tags' => array(),\n   *     ),\n   *   );\n   *   @endcode\n   *\/",101],["T_WHITESPACE","\n  ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","setMultiple",119],"(",["T_ARRAY","array",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$items",119],")",";",["T_WHITESPACE","\n\n  ",119],["T_DOC_COMMENT","\/**\n   * Deletes an item from the cache.\n   *\n   * If the cache item is being deleted because it is no longer \"fresh\", you may\n   * consider using invalidate() instead. This allows callers to retrieve the\n   * invalid item by calling get() with $allow_invalid set to TRUE. In some cases\n   * an invalid item may be acceptable rather than having to rebuild the cache.\n   *\n   * @param string $cid\n   *   The cache ID to delete.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidate()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteMultiple()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteAll()\n   *\/",121],["T_WHITESPACE","\n  ",135],["T_PUBLIC","public",136],["T_WHITESPACE"," ",136],["T_FUNCTION","function",136],["T_WHITESPACE"," ",136],["T_STRING","delete",136],"(",["T_VARIABLE","$cid",136],")",";",["T_WHITESPACE","\n\n  ",136],["T_DOC_COMMENT","\/**\n   * Deletes multiple items from the cache.\n   *\n   * If the cache items are being deleted because they are no longer \"fresh\",\n   * you may consider using invalidateMultiple() instead. This allows callers to\n   * retrieve the invalid items by calling get() with $allow_invalid set to TRUE.\n   * In some cases an invalid item may be acceptable rather than having to\n   * rebuild the cache.\n   *\n   * @param array $cids\n   *   An array of cache IDs to delete.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateMultiple()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::delete()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteAll()\n   *\/",138],["T_WHITESPACE","\n  ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","deleteMultiple",154],"(",["T_ARRAY","array",154],["T_WHITESPACE"," ",154],["T_VARIABLE","$cids",154],")",";",["T_WHITESPACE","\n\n  ",154],["T_DOC_COMMENT","\/**\n   * Deletes all cache items in a bin.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateAll()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::delete()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteMultiple()\n   *\/",156],["T_WHITESPACE","\n  ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","deleteAll",163],"(",")",";",["T_WHITESPACE","\n\n  ",163],["T_DOC_COMMENT","\/**\n   * Marks a cache item as invalid.\n   *\n   * Invalid items may be returned in later calls to get(), if the $allow_invalid\n   * argument is TRUE.\n   *\n   * @param string $cid\n   *   The cache ID to invalidate.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::delete()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateMultiple()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateAll()\n   *\/",165],["T_WHITESPACE","\n  ",177],["T_PUBLIC","public",178],["T_WHITESPACE"," ",178],["T_FUNCTION","function",178],["T_WHITESPACE"," ",178],["T_STRING","invalidate",178],"(",["T_VARIABLE","$cid",178],")",";",["T_WHITESPACE","\n\n  ",178],["T_DOC_COMMENT","\/**\n   * Marks cache items as invalid.\n   *\n   * Invalid items may be returned in later calls to get(), if the $allow_invalid\n   * argument is TRUE.\n   *\n   * @param string[] $cids\n   *   An array of cache IDs to invalidate.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteMultiple()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidate()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateAll()\n   *\/",180],["T_WHITESPACE","\n  ",192],["T_PUBLIC","public",193],["T_WHITESPACE"," ",193],["T_FUNCTION","function",193],["T_WHITESPACE"," ",193],["T_STRING","invalidateMultiple",193],"(",["T_ARRAY","array",193],["T_WHITESPACE"," ",193],["T_VARIABLE","$cids",193],")",";",["T_WHITESPACE","\n\n  ",193],["T_DOC_COMMENT","\/**\n   * Marks all cache items as invalid.\n   *\n   * Invalid items may be returned in later calls to get(), if the $allow_invalid\n   * argument is TRUE.\n   *\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::deleteAll()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidate()\n   * @see \\Drupal\\Core\\Cache\\CacheBackendInterface::invalidateMultiple()\n   *\/",195],["T_WHITESPACE","\n  ",204],["T_PUBLIC","public",205],["T_WHITESPACE"," ",205],["T_FUNCTION","function",205],["T_WHITESPACE"," ",205],["T_STRING","invalidateAll",205],"(",")",";",["T_WHITESPACE","\n\n  ",205],["T_DOC_COMMENT","\/**\n   * Performs garbage collection on a cache bin.\n   *\n   * The backend may choose to delete expired or invalidated items.\n   *\/",207],["T_WHITESPACE","\n  ",211],["T_PUBLIC","public",212],["T_WHITESPACE"," ",212],["T_FUNCTION","function",212],["T_WHITESPACE"," ",212],["T_STRING","garbageCollection",212],"(",")",";",["T_WHITESPACE","\n\n  ",212],["T_DOC_COMMENT","\/**\n   * Remove a cache bin.\n   *\/",214],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","removeBin",217],"(",")",";",["T_WHITESPACE","\n\n",217],"}",["T_WHITESPACE","\n",219]]