[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides a caching wrapper to be used in place of large structures.\n *\n * This should be extended by systems that need to cache large amounts of data\n * to calling functions. These structures can become very large, so this\n * class is used to allow different strategies to be used for caching internally\n * (lazy loading, building caches over time etc.). This can dramatically reduce\n * the amount of data that needs to be loaded from cache backends on each\n * request, and memory usage from static caches of that same data.\n *\n * The default implementation is \\Drupal\\Core\\Cache\\CacheCollector.\n *\n * @ingroup cache\n *\/",5],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","CacheCollectorInterface",19],["T_WHITESPACE"," ",19],"{",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Gets value from the cache.\n   *\n   * @param string $key\n   *   Key that identifies the data.\n   *\n   * @return mixed\n   *   The corresponding cache data.\n   *\/",21],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","get",30],"(",["T_VARIABLE","$key",30],")",";",["T_WHITESPACE","\n\n  ",30],["T_DOC_COMMENT","\/**\n   * Sets cache data.\n   *\n   * It depends on the specific case and implementation whether this has a\n   * permanent effect or if it just affects the current request.\n   *\n   * @param string $key\n   *   Key that identifies the data.\n   * @param mixed $value\n   *   The data to be set.\n   *\/",32],["T_WHITESPACE","\n  ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","set",43],"(",["T_VARIABLE","$key",43],",",["T_WHITESPACE"," ",43],["T_VARIABLE","$value",43],")",";",["T_WHITESPACE","\n\n  ",43],["T_DOC_COMMENT","\/**\n   * Deletes the element.\n   *\n   * It depends on the specific case and implementation whether this has a\n   * permanent effect or if it just affects the current request.\n   *\n   * @param string $key\n   *   Key that identifies the data.\n   *\/",45],["T_WHITESPACE","\n  ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_FUNCTION","function",54],["T_WHITESPACE"," ",54],["T_STRING","delete",54],"(",["T_VARIABLE","$key",54],")",";",["T_WHITESPACE","\n\n  ",54],["T_DOC_COMMENT","\/**\n   * Returns whether data exists for this key.\n   *\n   * @param string $key\n   *   Key that identifies the data.\n   *\/",56],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","has",62],"(",["T_VARIABLE","$key",62],")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Resets the local cache.\n   *\n   * Does not clear the persistent cache.\n   *\/",64],["T_WHITESPACE","\n  ",68],["T_PUBLIC","public",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","reset",69],"(",")",";",["T_WHITESPACE","\n\n  ",69],["T_DOC_COMMENT","\/**\n   * Clears the collected cache entry.\n   *\/",71],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","clear",74],"(",")",";",["T_WHITESPACE","\n\n",74],"}",["T_WHITESPACE","\n",76]]