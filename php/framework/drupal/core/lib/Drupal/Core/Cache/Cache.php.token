[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Database",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Query",5],["T_NS_SEPARATOR","\\",5],["T_STRING","SelectInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Helper methods for cache.\n *\n * @ingroup cache\n *\/",7],["T_WHITESPACE","\n",11],["T_CLASS","class",12],["T_WHITESPACE"," ",12],["T_STRING","Cache",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Indicates that the item should never be removed unless explicitly deleted.\n   *\/",14],["T_WHITESPACE","\n  ",16],["T_CONST","const",17],["T_WHITESPACE"," ",17],["T_STRING","PERMANENT",17],["T_WHITESPACE"," ",17],"=",["T_WHITESPACE"," ",17],["T_STRING","CacheBackendInterface",17],["T_DOUBLE_COLON","::",17],["T_STRING","CACHE_PERMANENT",17],";",["T_WHITESPACE","\n\n  ",17],["T_DOC_COMMENT","\/**\n   * Merges arrays of cache contexts and removes duplicates.\n   *\n   * @param array $a\n   *    Cache contexts array to merge.\n   * @param array $b\n   *    Cache contexts array to merge.\n   *\n   * @return string[]\n   *   The merged array of cache contexts.\n   *\/",19],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_STATIC","static",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","mergeContexts",30],"(",["T_ARRAY","array",30],["T_WHITESPACE"," ",30],["T_VARIABLE","$a",30],["T_WHITESPACE"," ",30],"=",["T_WHITESPACE"," ",30],"[","]",",",["T_WHITESPACE"," ",30],["T_ARRAY","array",30],["T_WHITESPACE"," ",30],["T_VARIABLE","$b",30],["T_WHITESPACE"," ",30],"=",["T_WHITESPACE"," ",30],"[","]",")",["T_WHITESPACE"," ",30],"{",["T_WHITESPACE","\n    ",30],["T_VARIABLE","$cache_contexts",31],["T_WHITESPACE"," ",31],"=",["T_WHITESPACE"," ",31],["T_STRING","array_unique",31],"(",["T_STRING","array_merge",31],"(",["T_VARIABLE","$a",31],",",["T_WHITESPACE"," ",31],["T_VARIABLE","$b",31],")",")",";",["T_WHITESPACE","\n    ",31],["T_STRING","assert",32],"(",["T_CONSTANT_ENCAPSED_STRING","'\\Drupal::service(\\'cache_contexts_manager\\')->assertValidTokens($cache_contexts)'",32],")",";",["T_WHITESPACE","\n    ",32],["T_STRING","sort",33],"(",["T_VARIABLE","$cache_contexts",33],")",";",["T_WHITESPACE","\n    ",33],["T_RETURN","return",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$cache_contexts",34],";",["T_WHITESPACE","\n  ",34],"}",["T_WHITESPACE","\n\n  ",35],["T_DOC_COMMENT","\/**\n   * Merges arrays of cache tags and removes duplicates.\n   *\n   * The cache tags array is returned in a format that is valid for\n   * \\Drupal\\Core\\Cache\\CacheBackendInterface::set().\n   *\n   * When caching elements, it is necessary to collect all cache tags into a\n   * single array, from both the element itself and all child elements. This\n   * allows items to be invalidated based on all tags attached to the content\n   * they're constituted from.\n   *\n   * @param array $a\n   *    Cache tags array to merge.\n   * @param array $b\n   *    Cache tags array to merge.\n   *\n   * @return string[]\n   *   The merged array of cache tags.\n   *\/",37],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_STATIC","static",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","mergeTags",56],"(",["T_ARRAY","array",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$a",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],"[","]",",",["T_WHITESPACE"," ",56],["T_ARRAY","array",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$b",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],"[","]",")",["T_WHITESPACE"," ",56],"{",["T_WHITESPACE","\n    ",56],["T_STRING","assert",57],"(",["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\Component\\Assertion\\Inspector::assertAllStrings($a) && \\Drupal\\Component\\Assertion\\Inspector::assertAllStrings($b)'",57],",",["T_WHITESPACE"," ",57],["T_CONSTANT_ENCAPSED_STRING","'Cache tags must be valid strings'",57],")",";",["T_WHITESPACE","\n\n    ",57],["T_VARIABLE","$cache_tags",59],["T_WHITESPACE"," ",59],"=",["T_WHITESPACE"," ",59],["T_STRING","array_unique",59],"(",["T_STRING","array_merge",59],"(",["T_VARIABLE","$a",59],",",["T_WHITESPACE"," ",59],["T_VARIABLE","$b",59],")",")",";",["T_WHITESPACE","\n    ",59],["T_STRING","sort",60],"(",["T_VARIABLE","$cache_tags",60],")",";",["T_WHITESPACE","\n    ",60],["T_RETURN","return",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$cache_tags",61],";",["T_WHITESPACE","\n  ",61],"}",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Merges max-age values (expressed in seconds), finds the lowest max-age.\n   *\n   * Ensures infinite max-age (Cache::PERMANENT) is taken into account.\n   *\n   * @param int $a\n   *    Max age value to merge.\n   * @param int $b\n   *    Max age value to merge.\n   *\n   * @return int\n   *   The minimum max-age value.\n   *\/",64],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_STATIC","static",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","mergeMaxAges",77],"(",["T_VARIABLE","$a",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","Cache",77],["T_DOUBLE_COLON","::",77],["T_STRING","PERMANENT",77],",",["T_WHITESPACE"," ",77],["T_VARIABLE","$b",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","Cache",77],["T_DOUBLE_COLON","::",77],["T_STRING","PERMANENT",77],")",["T_WHITESPACE"," ",77],"{",["T_WHITESPACE","\n    ",77],["T_COMMENT","\/\/ If one of the values is Cache::PERMANENT, return the other value.\n",78],["T_WHITESPACE","    ",79],["T_IF","if",79],["T_WHITESPACE"," ",79],"(",["T_VARIABLE","$a",79],["T_WHITESPACE"," ",79],["T_IS_IDENTICAL","===",79],["T_WHITESPACE"," ",79],["T_STRING","Cache",79],["T_DOUBLE_COLON","::",79],["T_STRING","PERMANENT",79],")",["T_WHITESPACE"," ",79],"{",["T_WHITESPACE","\n      ",79],["T_RETURN","return",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$b",80],";",["T_WHITESPACE","\n    ",80],"}",["T_WHITESPACE","\n    ",81],["T_IF","if",82],["T_WHITESPACE"," ",82],"(",["T_VARIABLE","$b",82],["T_WHITESPACE"," ",82],["T_IS_IDENTICAL","===",82],["T_WHITESPACE"," ",82],["T_STRING","Cache",82],["T_DOUBLE_COLON","::",82],["T_STRING","PERMANENT",82],")",["T_WHITESPACE"," ",82],"{",["T_WHITESPACE","\n      ",82],["T_RETURN","return",83],["T_WHITESPACE"," ",83],["T_VARIABLE","$a",83],";",["T_WHITESPACE","\n    ",83],"}",["T_WHITESPACE","\n\n    ",84],["T_COMMENT","\/\/ If none or the values are Cache::PERMANENT, return the minimum value.\n",86],["T_WHITESPACE","    ",87],["T_RETURN","return",87],["T_WHITESPACE"," ",87],["T_STRING","min",87],"(",["T_VARIABLE","$a",87],",",["T_WHITESPACE"," ",87],["T_VARIABLE","$b",87],")",";",["T_WHITESPACE","\n  ",87],"}",["T_WHITESPACE","\n\n  ",88],["T_DOC_COMMENT","\/**\n   * Validates an array of cache tags.\n   *\n   * Can be called before using cache tags in operations, to ensure validity.\n   *\n   * @param string[] $tags\n   *   An array of cache tags.\n   *\n   * @deprecated\n   *   Use assert('\\Drupal\\Component\\Assertion\\Inspector::assertAllStrings($tags)');\n   *\n   * @throws \\LogicException\n   *\/",90],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_STATIC","static",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","validateTags",103],"(",["T_ARRAY","array",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$tags",103],")",["T_WHITESPACE"," ",103],"{",["T_WHITESPACE","\n    ",103],["T_IF","if",104],["T_WHITESPACE"," ",104],"(",["T_EMPTY","empty",104],"(",["T_VARIABLE","$tags",104],")",")",["T_WHITESPACE"," ",104],"{",["T_WHITESPACE","\n      ",104],["T_RETURN","return",105],";",["T_WHITESPACE","\n    ",105],"}",["T_WHITESPACE","\n    ",106],["T_FOREACH","foreach",107],["T_WHITESPACE"," ",107],"(",["T_VARIABLE","$tags",107],["T_WHITESPACE"," ",107],["T_AS","as",107],["T_WHITESPACE"," ",107],["T_VARIABLE","$value",107],")",["T_WHITESPACE"," ",107],"{",["T_WHITESPACE","\n      ",107],["T_IF","if",108],["T_WHITESPACE"," ",108],"(","!",["T_STRING","is_string",108],"(",["T_VARIABLE","$value",108],")",")",["T_WHITESPACE"," ",108],"{",["T_WHITESPACE","\n        ",108],["T_THROW","throw",109],["T_WHITESPACE"," ",109],["T_NEW","new",109],["T_WHITESPACE"," ",109],["T_NS_SEPARATOR","\\",109],["T_STRING","LogicException",109],"(",["T_CONSTANT_ENCAPSED_STRING","'Cache tags must be strings, '",109],["T_WHITESPACE"," ",109],".",["T_WHITESPACE"," ",109],["T_STRING","gettype",109],"(",["T_VARIABLE","$value",109],")",["T_WHITESPACE"," ",109],".",["T_WHITESPACE"," ",109],["T_CONSTANT_ENCAPSED_STRING","' given.'",109],")",";",["T_WHITESPACE","\n      ",109],"}",["T_WHITESPACE","\n    ",110],"}",["T_WHITESPACE","\n  ",111],"}",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Build an array of cache tags from a given prefix and an array of suffixes.\n   *\n   * Each suffix will be converted to a cache tag by appending it to the prefix,\n   * with a colon between them.\n   *\n   * @param string $prefix\n   *   A prefix string.\n   * @param array $suffixes\n   *   An array of suffixes. Will be cast to strings.\n   * @param string $glue\n   *   A string to be used as glue for concatenation. Defaults to a colon.\n   *\n   * @return string[]\n   *   An array of cache tags.\n   *\/",114],["T_WHITESPACE","\n  ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_STATIC","static",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","buildTags",130],"(",["T_VARIABLE","$prefix",130],",",["T_WHITESPACE"," ",130],["T_ARRAY","array",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$suffixes",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$glue",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_CONSTANT_ENCAPSED_STRING","':'",130],")",["T_WHITESPACE"," ",130],"{",["T_WHITESPACE","\n    ",130],["T_VARIABLE","$tags",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],"[","]",";",["T_WHITESPACE","\n    ",131],["T_FOREACH","foreach",132],["T_WHITESPACE"," ",132],"(",["T_VARIABLE","$suffixes",132],["T_WHITESPACE"," ",132],["T_AS","as",132],["T_WHITESPACE"," ",132],["T_VARIABLE","$suffix",132],")",["T_WHITESPACE"," ",132],"{",["T_WHITESPACE","\n      ",132],["T_VARIABLE","$tags",133],"[","]",["T_WHITESPACE"," ",133],"=",["T_WHITESPACE"," ",133],["T_VARIABLE","$prefix",133],["T_WHITESPACE"," ",133],".",["T_WHITESPACE"," ",133],["T_VARIABLE","$glue",133],["T_WHITESPACE"," ",133],".",["T_WHITESPACE"," ",133],["T_VARIABLE","$suffix",133],";",["T_WHITESPACE","\n    ",133],"}",["T_WHITESPACE","\n    ",134],["T_RETURN","return",135],["T_WHITESPACE"," ",135],["T_VARIABLE","$tags",135],";",["T_WHITESPACE","\n  ",135],"}",["T_WHITESPACE","\n\n  ",136],["T_DOC_COMMENT","\/**\n   * Marks cache items from all bins with any of the specified tags as invalid.\n   *\n   * @param string[] $tags\n   *   The list of tags to invalidate cache items for.\n   *\/",138],["T_WHITESPACE","\n  ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_STATIC","static",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","invalidateTags",144],"(",["T_ARRAY","array",144],["T_WHITESPACE"," ",144],["T_VARIABLE","$tags",144],")",["T_WHITESPACE"," ",144],"{",["T_WHITESPACE","\n    ",144],["T_NS_SEPARATOR","\\",145],["T_STRING","Drupal",145],["T_DOUBLE_COLON","::",145],["T_STRING","service",145],"(",["T_CONSTANT_ENCAPSED_STRING","'cache_tags.invalidator'",145],")",["T_OBJECT_OPERATOR","->",145],["T_STRING","invalidateTags",145],"(",["T_VARIABLE","$tags",145],")",";",["T_WHITESPACE","\n  ",145],"}",["T_WHITESPACE","\n\n  ",146],["T_DOC_COMMENT","\/**\n   * Gets all cache bin services.\n   *\n   * @return \\Drupal\\Core\\Cache\\CacheBackendInterface[]\n   *   An array of cache backend objects keyed by cache bins.\n   *\/",148],["T_WHITESPACE","\n  ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_STATIC","static",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","getBins",154],"(",")",["T_WHITESPACE"," ",154],"{",["T_WHITESPACE","\n    ",154],["T_VARIABLE","$bins",155],["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_ARRAY","array",155],"(",")",";",["T_WHITESPACE","\n    ",155],["T_VARIABLE","$container",156],["T_WHITESPACE"," ",156],"=",["T_WHITESPACE"," ",156],["T_NS_SEPARATOR","\\",156],["T_STRING","Drupal",156],["T_DOUBLE_COLON","::",156],["T_STRING","getContainer",156],"(",")",";",["T_WHITESPACE","\n    ",156],["T_FOREACH","foreach",157],["T_WHITESPACE"," ",157],"(",["T_VARIABLE","$container",157],["T_OBJECT_OPERATOR","->",157],["T_STRING","getParameter",157],"(",["T_CONSTANT_ENCAPSED_STRING","'cache_bins'",157],")",["T_WHITESPACE"," ",157],["T_AS","as",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$service_id",157],["T_WHITESPACE"," ",157],["T_DOUBLE_ARROW","=>",157],["T_WHITESPACE"," ",157],["T_VARIABLE","$bin",157],")",["T_WHITESPACE"," ",157],"{",["T_WHITESPACE","\n      ",157],["T_VARIABLE","$bins",158],"[",["T_VARIABLE","$bin",158],"]",["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_VARIABLE","$container",158],["T_OBJECT_OPERATOR","->",158],["T_STRING","get",158],"(",["T_VARIABLE","$service_id",158],")",";",["T_WHITESPACE","\n    ",158],"}",["T_WHITESPACE","\n    ",159],["T_RETURN","return",160],["T_WHITESPACE"," ",160],["T_VARIABLE","$bins",160],";",["T_WHITESPACE","\n  ",160],"}",["T_WHITESPACE","\n\n  ",161],["T_DOC_COMMENT","\/**\n   * Generates a hash from a query object, to be used as part of the cache key.\n   *\n   * This smart caching strategy saves Drupal from querying and rendering to\n   * HTML when the underlying query is unchanged.\n   *\n   * Expensive queries should use the query builder to create the query and then\n   * call this function. Executing the query and formatting results should\n   * happen in a #pre_render callback.\n   *\n   * @param \\Drupal\\Core\\Database\\Query\\SelectInterface $query\n   *   A select query object.\n   *\n   * @return string\n   *   A hash of the query arguments.\n   *\/",163],["T_WHITESPACE","\n  ",178],["T_PUBLIC","public",179],["T_WHITESPACE"," ",179],["T_STATIC","static",179],["T_WHITESPACE"," ",179],["T_FUNCTION","function",179],["T_WHITESPACE"," ",179],["T_STRING","keyFromQuery",179],"(",["T_STRING","SelectInterface",179],["T_WHITESPACE"," ",179],["T_VARIABLE","$query",179],")",["T_WHITESPACE"," ",179],"{",["T_WHITESPACE","\n    ",179],["T_VARIABLE","$query",180],["T_OBJECT_OPERATOR","->",180],["T_STRING","preExecute",180],"(",")",";",["T_WHITESPACE","\n    ",180],["T_VARIABLE","$keys",181],["T_WHITESPACE"," ",181],"=",["T_WHITESPACE"," ",181],["T_ARRAY","array",181],"(",["T_STRING_CAST","(string)",181],["T_WHITESPACE"," ",181],["T_VARIABLE","$query",181],",",["T_WHITESPACE"," ",181],["T_VARIABLE","$query",181],["T_OBJECT_OPERATOR","->",181],["T_STRING","getArguments",181],"(",")",")",";",["T_WHITESPACE","\n    ",181],["T_RETURN","return",182],["T_WHITESPACE"," ",182],["T_STRING","hash",182],"(",["T_CONSTANT_ENCAPSED_STRING","'sha256'",182],",",["T_WHITESPACE"," ",182],["T_STRING","serialize",182],"(",["T_VARIABLE","$keys",182],")",")",";",["T_WHITESPACE","\n  ",182],"}",["T_WHITESPACE","\n\n",183],"}",["T_WHITESPACE","\n",185]]