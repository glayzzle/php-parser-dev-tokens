[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Cache",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides checksums for cache tag invalidations.\n *\n * Cache backends can use this to check if any cache tag invalidations happened\n * for a stored cache item.\n *\n * To do so, they can inject the cache_tags.invalidator.checksum service, and\n * when a cache item is written, store cache tags together with the current\n * checksum, calculated by getCurrentChecksum(). When a cache item is fetched,\n * the checksum can be validated with isValid(). The service will return FALSE\n * if any of those cache tags were invalidated in the meantime.\n *\n * @ingroup cache\n *\/",5],["T_WHITESPACE","\n",18],["T_INTERFACE","interface",19],["T_WHITESPACE"," ",19],["T_STRING","CacheTagsChecksumInterface",19],["T_WHITESPACE"," ",19],"{",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Returns the sum total of validations for a given set of tags.\n   *\n   * Called by a backend when storing a cache item.\n   *\n   * @param string[] $tags\n   *   Array of cache tags.\n   *\n   * @return string\n   *   Cache tag invalidations checksum.\n   *\/",21],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],["T_STRING","getCurrentChecksum",32],"(",["T_ARRAY","array",32],["T_WHITESPACE"," ",32],["T_VARIABLE","$tags",32],")",";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Returns whether the checksum is valid for the given cache tags.\n   *\n   * Used when retrieving a cache item in a cache backend, to verify that no\n   * cache tag based invalidation happened.\n   *\n   * @param int $checksum\n   *   The checksum that was stored together with the cache item.\n   * @param string[] $tags\n   *   The cache tags that were stored together with the cache item.\n   *\n   * @return bool\n   *   FALSE if cache tag invalidations happened for the passed in tags since\n   *   the cache item was stored, TRUE otherwise.\n   *\/",34],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","isValid",49],"(",["T_VARIABLE","$checksum",49],",",["T_WHITESPACE"," ",49],["T_ARRAY","array",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$tags",49],")",";",["T_WHITESPACE","\n\n  ",49],["T_DOC_COMMENT","\/**\n   * Reset statically cached tags.\n   *\n   * This is only used by tests.\n   *\/",51],["T_WHITESPACE","\n  ",55],["T_PUBLIC","public",56],["T_WHITESPACE"," ",56],["T_FUNCTION","function",56],["T_WHITESPACE"," ",56],["T_STRING","reset",56],"(",")",";",["T_WHITESPACE","\n\n",56],"}",["T_WHITESPACE","\n",58]]