[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Queue",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for a queue.\n *\n * Classes implementing this interface will do a best effort to preserve order\n * in messages and to execute them at least once.\n *\n * @ingroup queue\n *\/",5],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","QueueInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Adds a queue item and store it directly to the queue.\n   *\n   * @param $data\n   *   Arbitrary data to be associated with the new task in the queue.\n   *\n   * @return\n   *   A unique ID if the item was successfully created and was (best effort)\n   *   added to the queue, otherwise FALSE. We don't guarantee the item was\n   *   committed to disk etc, but as far as we know, the item is now in the\n   *   queue.\n   *\/",15],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","createItem",27],"(",["T_VARIABLE","$data",27],")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Retrieves the number of items in the queue.\n   *\n   * This is intended to provide a \"best guess\" count of the number of items in\n   * the queue. Depending on the implementation and the setup, the accuracy of\n   * the results of this function may vary.\n   *\n   * e.g. On a busy system with a large number of consumers and items, the\n   * result might only be valid for a fraction of a second and not provide an\n   * accurate representation.\n   *\n   * @return\n   *   An integer estimate of the number of items in the queue.\n   *\/",29],["T_WHITESPACE","\n  ",42],["T_PUBLIC","public",43],["T_WHITESPACE"," ",43],["T_FUNCTION","function",43],["T_WHITESPACE"," ",43],["T_STRING","numberOfItems",43],"(",")",";",["T_WHITESPACE","\n\n  ",43],["T_DOC_COMMENT","\/**\n   * Claims an item in the queue for processing.\n   *\n   * @param $lease_time\n   *   How long the processing is expected to take in seconds, defaults to an\n   *   hour. After this lease expires, the item will be reset and another\n   *   consumer can claim the item. For idempotent tasks (which can be run\n   *   multiple times without side effects), shorter lease times would result\n   *   in lower latency in case a consumer fails. For tasks that should not be\n   *   run more than once (non-idempotent), a larger lease time will make it\n   *   more rare for a given task to run multiple times in cases of failure,\n   *   at the cost of higher latency.\n   *\n   * @return\n   *   On success we return an item object. If the queue is unable to claim an\n   *   item it returns false. This implies a best effort to retrieve an item\n   *   and either the queue is empty or there is some other non-recoverable\n   *   problem.\n   *\n   *   If returned, the object will have at least the following properties:\n   *   - data: the same as what what passed into createItem().\n   *   - item_id: the unique ID returned from createItem().\n   *   - created: timestamp when the item was put into the queue.\n   *\/",45],["T_WHITESPACE","\n  ",68],["T_PUBLIC","public",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","claimItem",69],"(",["T_VARIABLE","$lease_time",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_LNUMBER","3600",69],")",";",["T_WHITESPACE","\n\n  ",69],["T_DOC_COMMENT","\/**\n   * Deletes a finished item from the queue.\n   *\n   * @param $item\n   *   The item returned by \\Drupal\\Core\\Queue\\QueueInterface::claimItem().\n   *\/",71],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","deleteItem",77],"(",["T_VARIABLE","$item",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Releases an item that the worker could not process.\n   *\n   * Another worker can come in and process it before the timeout expires.\n   *\n   * @param $item\n   *   The item returned by \\Drupal\\Core\\Queue\\QueueInterface::claimItem().\n   *\n   * @return bool\n   *   TRUE if the item has been released, FALSE otherwise.\n   *\/",79],["T_WHITESPACE","\n  ",89],["T_PUBLIC","public",90],["T_WHITESPACE"," ",90],["T_FUNCTION","function",90],["T_WHITESPACE"," ",90],["T_STRING","releaseItem",90],"(",["T_VARIABLE","$item",90],")",";",["T_WHITESPACE","\n\n  ",90],["T_DOC_COMMENT","\/**\n   * Creates a queue.\n   *\n   * Called during installation and should be used to perform any necessary\n   * initialization operations. This should not be confused with the\n   * constructor for these objects, which is called every time an object is\n   * instantiated to operate on a queue. This operation is only needed the\n   * first time a given queue is going to be initialized (for example, to make\n   * a new database table or directory to hold tasks for the queue -- it\n   * depends on the queue implementation if this is necessary at all).\n   *\/",92],["T_WHITESPACE","\n  ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","createQueue",103],"(",")",";",["T_WHITESPACE","\n\n  ",103],["T_DOC_COMMENT","\/**\n   * Deletes a queue and every item in the queue.\n   *\/",105],["T_WHITESPACE","\n  ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","deleteQueue",108],"(",")",";",["T_WHITESPACE","\n\n",108],"}",["T_WHITESPACE","\n",110]]