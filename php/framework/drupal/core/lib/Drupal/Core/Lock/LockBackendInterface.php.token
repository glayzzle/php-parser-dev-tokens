[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Lock",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * @defgroup lock Locking mechanisms\n * @{\n * Functions to coordinate long-running operations across requests.\n *\n * In most environments, multiple Drupal page requests (a.k.a. threads or\n * processes) will execute in parallel. This leads to potential conflicts or\n * race conditions when two requests execute the same code at the same time. For\n * instance, some implementations of hook_cron() implicitly assume they are\n * running only once, rather than having multiple calls in parallel. To prevent\n * problems with such code, the cron system uses a locking process to ensure\n * that cron is not started again if it is already running.\n *\n * This is a cooperative, advisory lock system. Any long-running operation\n * that could potentially be attempted in parallel by multiple requests should\n * try to acquire a lock before proceeding. By obtaining a lock, one request\n * notifies any other requests that a specific operation is in progress which\n * must not be executed in parallel.\n *\n * To use this API, pick a unique name for the lock. A sensible choice is the\n * name of the function performing the operation. A very simple example use of\n * this API:\n * @code\n * function mymodule_long_operation() {\n *   $lock = \\Drupal::lock();\n *   if ($lock->acquire('mymodule_long_operation')) {\n *     \/\/ Do the long operation here.\n *     \/\/ ...\n *     $lock->release('mymodule_long_operation');\n *   }\n * }\n * @endcode\n *\n * If a function acquires a lock it should always release it when the operation\n * is complete by calling $lock->release(), as in the example.\n *\n * A function that has acquired a lock may attempt to renew a lock (extend the\n * duration of the lock) by calling $lock->acquire() again during the operation.\n * Failure to renew a lock is indicative that another request has acquired the\n * lock, and that the current operation may need to be aborted.\n *\n * If a function fails to acquire a lock it may either immediately return, or\n * it may call $lock->wait() if the rest of the current page request requires\n * that the operation in question be complete. After $lock->wait() returns, the\n * function may again attempt to acquire the lock, or may simply allow the page\n * request to proceed on the assumption that a parallel request completed the\n * operation.\n *\n * $lock->acquire() and $lock->wait() will automatically break (delete) a lock\n * whose duration has exceeded the timeout specified when it was acquired.\n *\n * @} End of \"defgroup lock\".\n *\/",5],["T_WHITESPACE","\n\n",57],["T_DOC_COMMENT","\/**\n * Lock backend interface.\n *\n * @ingroup lock\n *\/",59],["T_WHITESPACE","\n",63],["T_INTERFACE","interface",64],["T_WHITESPACE"," ",64],["T_STRING","LockBackendInterface",64],["T_WHITESPACE"," ",64],"{",["T_WHITESPACE","\n\n  ",64],["T_DOC_COMMENT","\/**\n   * Acquires a lock.\n   *\n   * @param string $name\n   *   Lock name. Limit of name's length is 255 characters.\n   * @param float $timeout\n   *   (optional) Lock lifetime in seconds. Defaults to 30.0.\n   *\n   * @return bool\n   *\/",66],["T_WHITESPACE","\n  ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","acquire",76],"(",["T_VARIABLE","$name",76],",",["T_WHITESPACE"," ",76],["T_VARIABLE","$timeout",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_DNUMBER","30.0",76],")",";",["T_WHITESPACE","\n\n  ",76],["T_DOC_COMMENT","\/**\n   * Checks if a lock is available for acquiring.\n   *\n   * @param string $name\n   *   Lock to acquire.\n   *\n   * @return bool\n   *\/",78],["T_WHITESPACE","\n  ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","lockMayBeAvailable",86],"(",["T_VARIABLE","$name",86],")",";",["T_WHITESPACE","\n\n  ",86],["T_DOC_COMMENT","\/**\n   * Waits a short amount of time before a second lock acquire attempt.\n   *\n   * While this method is subject to have a generic implementation in abstract\n   * backend implementation, some backends may provide non blocking or less I\/O\n   * intensive wait mechanism: this is why this method remains on the backend\n   * interface.\n   *\n   * @param string $name\n   *   Lock name currently being locked.\n   * @param int $delay\n   *   Milliseconds to wait for. Defaults to 30.\n   *\n   * @return bool\n   *   TRUE if the lock holds, FALSE if it may be available. You still need to\n   *   acquire the lock manually and it may fail again.\n   *\/",88],["T_WHITESPACE","\n  ",104],["T_PUBLIC","public",105],["T_WHITESPACE"," ",105],["T_FUNCTION","function",105],["T_WHITESPACE"," ",105],["T_STRING","wait",105],"(",["T_VARIABLE","$name",105],",",["T_WHITESPACE"," ",105],["T_VARIABLE","$delay",105],["T_WHITESPACE"," ",105],"=",["T_WHITESPACE"," ",105],["T_LNUMBER","30",105],")",";",["T_WHITESPACE","\n\n  ",105],["T_DOC_COMMENT","\/**\n   * Releases the given lock.\n   *\n   * @param string $name\n   *\/",107],["T_WHITESPACE","\n  ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","release",112],"(",["T_VARIABLE","$name",112],")",";",["T_WHITESPACE","\n\n  ",112],["T_DOC_COMMENT","\/**\n   * Releases all locks for the given lock token identifier.\n   *\n   * @param string $lockId\n   *   (optional) If none given, remove all locks from the current page.\n   *   Defaults to NULL.\n   *\/",114],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","releaseAll",121],"(",["T_VARIABLE","$lockId",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_STRING","NULL",121],")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Gets the unique page token for locks.\n   *\n   * Locks will be wiped out at the end of each page request on a token basis.\n   *\n   * @return string\n   *\/",123],["T_WHITESPACE","\n  ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","getLockId",130],"(",")",";",["T_WHITESPACE","\n\n",130],"}",["T_WHITESPACE","\n",132]]