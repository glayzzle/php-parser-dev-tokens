[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Menu",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for loading, transforming and rendering menu link trees.\n *\n * The main purposes of this interface are:\n * - Load a list of menu links, given a menu name, using\n *   MenuLinkTreeInterface::load(). Loaded menu links are returned as a\n *   tree by looking at the links' tree meta-data.\n * - Which links are loaded can be specified in the menu link tree parameters\n *   that are passed to the load() method. You can build your own set of\n *   parameters, or you can start from typical defaults by calling the\n *   MenuLinkTreeInterface::getCurrentRouteMenuTreeParameters() method. See\n *   \\Drupal\\Core\\Menu\\MenuTreeParameters for more on menu tree parameters.\n * - Transform a menu link tree, by calling MenuLinkTreeInterface::transform().\n *   Examples include access checking, adding custom classes, extracting a\n *   subtree depending on the active trail, etc. Note that translation is not\n *   a tree transformation, because menu links themselves are responsible\n *   for translation. Transformations are performed by \"menu link tree\n *   manipulators\", which are functions or methods; see\n *   \\Drupal\\Core\\Menu\\DefaultMenuLinkTreeManipulators for examples.\n * - Create a render array using MenuLinkTreeInterface::build().\n *\/",5],["T_WHITESPACE","\n",25],["T_INTERFACE","interface",26],["T_WHITESPACE"," ",26],["T_STRING","MenuLinkTreeInterface",26],["T_WHITESPACE"," ",26],"{",["T_WHITESPACE","\n\n  ",26],["T_DOC_COMMENT","\/**\n   * Gets the link tree parameters for rendering a specific menu.\n   *\n   * Builds menu link tree parameters that:\n   * - Expand all links in the active trail based on route being viewed.\n   * - Expand the descendents of the links in the active trail whose\n   *   'expanded' flag is enabled.\n   *\n   * This only sets the (relatively complex) parameters to achieve the two above\n   * goals, but you can still further customize these parameters.\n   *\n   * @param string $menu_name\n   *   The menu name, needed for retrieving the active trail and links with the\n   *   'expanded' flag enabled.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuTreeParameters\n   *   The parameters to determine which menu links to be loaded into a tree.\n   *\n   * @see \\Drupal\\Core\\Menu\\MenuTreeParameters\n   *\/",28],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","getCurrentRouteMenuTreeParameters",48],"(",["T_VARIABLE","$menu_name",48],")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Loads a menu tree with a menu link plugin instance at each element.\n   *\n   * @param string $menu_name\n   *   The name of the menu.\n   * @param \\Drupal\\Core\\Menu\\MenuTreeParameters $parameters\n   *   The parameters to determine which menu links to be loaded into a tree.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkTreeElement[]\n   *   A menu link tree.\n   *\/",50],["T_WHITESPACE","\n  ",60],["T_PUBLIC","public",61],["T_WHITESPACE"," ",61],["T_FUNCTION","function",61],["T_WHITESPACE"," ",61],["T_STRING","load",61],"(",["T_VARIABLE","$menu_name",61],",",["T_WHITESPACE"," ",61],["T_STRING","MenuTreeParameters",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$parameters",61],")",";",["T_WHITESPACE","\n\n  ",61],["T_DOC_COMMENT","\/**\n   * Applies menu link tree manipulators to transform the given tree.\n   *\n   * @param \\Drupal\\Core\\Menu\\MenuLinkTreeElement[] $tree\n   *   The menu tree to manipulate.\n   * @param array $manipulators\n   *   The menu link tree manipulators to apply. Each is an array with keys:\n   *   - callable: a callable or a string that can be resolved to a callable\n   *     by \\Drupal\\Core\\Controller\\ControllerResolverInterface::getControllerFromDefinition()\n   *   - args: optional array of arguments to pass to the callable after $tree.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkTreeElement[]\n   *   The manipulated menu link tree.\n   *\/",63],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","transform",77],"(",["T_ARRAY","array",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$tree",77],",",["T_WHITESPACE"," ",77],["T_ARRAY","array",77],["T_WHITESPACE"," ",77],["T_VARIABLE","$manipulators",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Builds a renderable array from a menu tree.\n   *\n   * The menu item's LI element is given one of the following classes:\n   * - expanded: The menu item is showing its submenu.\n   * - collapsed: The menu item has a submenu that is not shown.\n   * - leaf: The menu item has no submenu.\n   *\n   * @param \\Drupal\\Core\\Menu\\MenuLinkTreeElement[] $tree\n   *   A data structure representing the tree, as returned from\n   *   MenuLinkTreeInterface::load().\n   *\n   * @return array\n   *   A renderable array.\n   *\/",79],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","build",94],"(",["T_ARRAY","array",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$tree",94],")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Returns the maximum depth of tree that is supported.\n   *\n   * @return int\n   *   The maximum depth.\n   *\/",96],["T_WHITESPACE","\n  ",101],["T_PUBLIC","public",102],["T_WHITESPACE"," ",102],["T_FUNCTION","function",102],["T_WHITESPACE"," ",102],["T_STRING","maxDepth",102],"(",")",";",["T_WHITESPACE","\n\n  ",102],["T_DOC_COMMENT","\/**\n   * Finds the height of a subtree rooted by of the given ID.\n   *\n   * @param string $id\n   *   The ID of an item in the storage.\n   *\n   * @return int\n   *   Returns the height of the subtree. This will be at least 1 if the ID\n   *   exists, or 0 if the ID does not exist in the storage.\n   *\/",104],["T_WHITESPACE","\n  ",113],["T_PUBLIC","public",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","getSubtreeHeight",114],"(",["T_VARIABLE","$id",114],")",";",["T_WHITESPACE","\n\n  ",114],["T_DOC_COMMENT","\/**\n   * Finds expanded links in a menu given a set of possible parents.\n   *\n   * @param string $menu_name\n   *   The menu name.\n   * @param array $parents\n   *   One or more parent IDs to match.\n   *\n   * @return array\n   *   The menu link IDs that are flagged as expanded in this menu.\n   *\/",116],["T_WHITESPACE","\n  ",126],["T_PUBLIC","public",127],["T_WHITESPACE"," ",127],["T_FUNCTION","function",127],["T_WHITESPACE"," ",127],["T_STRING","getExpanded",127],"(",["T_VARIABLE","$menu_name",127],",",["T_WHITESPACE"," ",127],["T_ARRAY","array",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$parents",127],")",";",["T_WHITESPACE","\n\n",127],"}",["T_WHITESPACE","\n",129]]