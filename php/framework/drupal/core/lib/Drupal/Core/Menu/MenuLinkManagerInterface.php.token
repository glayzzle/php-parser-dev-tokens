[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Menu",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Plugin",5],["T_NS_SEPARATOR","\\",5],["T_STRING","PluginManagerInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines an interface for managing menu links and storing their definitions.\n *\n * Menu link managers support both automatic plugin definition discovery and\n * manually maintaining plugin definitions.\n *\n * MenuLinkManagerInterface::updateDefinition() can be used to update a single\n * menu link's definition and pass this onto the menu storage without requiring\n * a full MenuLinkManagerInterface::rebuild().\n *\n * Implementations that do not use automatic discovery should call\n * MenuLinkManagerInterface::addDefinition() or\n * MenuLinkManagerInterface::removeDefinition() when they add or remove links,\n * and MenuLinkManagerInterface::updateDefinition() to update links they have\n * already defined.\n *\/",7],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","MenuLinkManagerInterface",23],["T_WHITESPACE"," ",23],["T_EXTENDS","extends",23],["T_WHITESPACE"," ",23],["T_STRING","PluginManagerInterface",23],["T_WHITESPACE"," ",23],"{",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Triggers discovery, save, and cleanup of discovered links.\n   *\/",25],["T_WHITESPACE","\n  ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","rebuild",28],"(",")",";",["T_WHITESPACE","\n\n  ",28],["T_DOC_COMMENT","\/**\n   * Deletes all links having a certain menu name.\n   *\n   * If a link is not deletable but is resettable, the link will be reset to have\n   * its original menu name, under the assumption that the original menu is not\n   * the one we are deleting it from. Note that when resetting, if the original\n   * menu name is the same as the menu name passed to this method, the link will\n   * not be moved or deleted.\n   *\n   * @param string $menu_name\n   *   The name of the menu whose links will be deleted or reset.\n   *\/",30],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","deleteLinksInMenu",42],"(",["T_VARIABLE","$menu_name",42],")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Removes a single link definition from the menu tree storage.\n   *\n   * This is used for plugins not found through discovery to remove definitions.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   * @param bool $persist\n   *   If TRUE, this method will attempt to persist the deletion from any\n   *   external storage by invoking MenuLinkInterface::deleteLink() on the\n   *   plugin that is being deleted.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   Thrown if the $id is not a valid, existing, plugin ID or if the link\n   *   cannot be deleted.\n   *\/",44],["T_WHITESPACE","\n  ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","removeDefinition",60],"(",["T_VARIABLE","$id",60],",",["T_WHITESPACE"," ",60],["T_VARIABLE","$persist",60],["T_WHITESPACE"," ",60],"=",["T_WHITESPACE"," ",60],["T_STRING","TRUE",60],")",";",["T_WHITESPACE","\n\n  ",60],["T_DOC_COMMENT","\/**\n   * Loads multiple plugin instances based on route.\n   *\n   * @param string $route_name\n   *   The route name.\n   * @param array $route_parameters\n   *   (optional) The route parameters. Defaults to an empty array.\n   * @param string $menu_name\n   *   (optional) Restricts the found links to just those in the named menu.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkInterface[]\n   *   An array of instances keyed by plugin ID.\n   *\/",62],["T_WHITESPACE","\n  ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","loadLinksByRoute",75],"(",["T_VARIABLE","$route_name",75],",",["T_WHITESPACE"," ",75],["T_ARRAY","array",75],["T_WHITESPACE"," ",75],["T_VARIABLE","$route_parameters",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_ARRAY","array",75],"(",")",",",["T_WHITESPACE"," ",75],["T_VARIABLE","$menu_name",75],["T_WHITESPACE"," ",75],"=",["T_WHITESPACE"," ",75],["T_STRING","NULL",75],")",";",["T_WHITESPACE","\n\n  ",75],["T_DOC_COMMENT","\/**\n   * Adds a new menu link definition to the menu tree storage.\n   *\n   * Use this function when you know there is no entry in the tree. This is\n   * used for plugins not found through discovery to add new definitions.\n   *\n   * @param string $id\n   *   The plugin ID for the new menu link definition that is being added.\n   * @param array $definition\n   *   The values of the link definition.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkInterface\n   *   A plugin instance created using the newly added definition.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   Thrown when the $id is not valid or is an already existing plugin ID.\n   *\/",77],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","addDefinition",94],"(",["T_VARIABLE","$id",94],",",["T_WHITESPACE"," ",94],["T_ARRAY","array",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$definition",94],")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Updates the values for a menu link definition in the menu tree storage.\n   *\n   * This will update the definition for a discovered menu link without the\n   * need for a full rebuild. It is also used for plugins not found through\n   * discovery to update definitions.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   * @param array $new_definition_values\n   *   The new values for the link definition. This will usually be just a\n   *   subset of the plugin definition.\n   * @param bool $persist\n   *   TRUE to also have the link instance itself persist the changed values to\n   *   any additional storage by invoking MenuLinkInterface::updateDefinition()\n   *   on the plugin that is being updated.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkInterface\n   *   A plugin instance created using the updated definition.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   Thrown if the $id is not a valid, existing, plugin ID.\n   *\/",96],["T_WHITESPACE","\n  ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","updateDefinition",119],"(",["T_VARIABLE","$id",119],",",["T_WHITESPACE"," ",119],["T_ARRAY","array",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$new_definition_values",119],",",["T_WHITESPACE"," ",119],["T_VARIABLE","$persist",119],["T_WHITESPACE"," ",119],"=",["T_WHITESPACE"," ",119],["T_STRING","TRUE",119],")",";",["T_WHITESPACE","\n\n  ",119],["T_DOC_COMMENT","\/**\n   * Resets the values for a menu link based on the values found by discovery.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   *\n   * @return \\Drupal\\Core\\Menu\\MenuLinkInterface\n   *   The menu link instance after being reset.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   Thrown if the $id is not a valid, existing, plugin ID or if the link\n   *   cannot be reset.\n   *\/",121],["T_WHITESPACE","\n  ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","resetLink",134],"(",["T_VARIABLE","$id",134],")",";",["T_WHITESPACE","\n\n  ",134],["T_DOC_COMMENT","\/**\n   * Counts the total number of menu links.\n   *\n   * @param string $menu_name\n   *   (optional) The menu name to count by. Defaults to all menus.\n   *\n   * @return int\n   *   The number of menu links in the named menu, or in all menus if the\n   *   menu name is NULL.\n   *\/",136],["T_WHITESPACE","\n  ",145],["T_PUBLIC","public",146],["T_WHITESPACE"," ",146],["T_FUNCTION","function",146],["T_WHITESPACE"," ",146],["T_STRING","countMenuLinks",146],"(",["T_VARIABLE","$menu_name",146],["T_WHITESPACE"," ",146],"=",["T_WHITESPACE"," ",146],["T_STRING","NULL",146],")",";",["T_WHITESPACE","\n\n  ",146],["T_DOC_COMMENT","\/**\n   * Loads all parent link IDs of a given menu link.\n   *\n   * This method is very similar to getActiveTrailIds() but allows the link to\n   * be specified rather than being discovered based on the menu name and\n   * request. This method is mostly useful for testing.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   *\n   * @return array\n   *   An ordered array of IDs representing the path to the root of the tree.\n   *   The first element of the array will be equal to $id, unless $id is not\n   *   valid, in which case the return value will be NULL.\n   *\/",148],["T_WHITESPACE","\n  ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","getParentIds",163],"(",["T_VARIABLE","$id",163],")",";",["T_WHITESPACE","\n\n  ",163],["T_DOC_COMMENT","\/**\n   * Loads all child link IDs of a given menu link, regardless of visibility.\n   *\n   * This method is mostly useful for testing.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   *\n   * @return array\n   *   An unordered array of IDs representing the IDs of all children, or NULL\n   *   if the ID is invalid.\n   *\/",165],["T_WHITESPACE","\n  ",176],["T_PUBLIC","public",177],["T_WHITESPACE"," ",177],["T_FUNCTION","function",177],["T_WHITESPACE"," ",177],["T_STRING","getChildIds",177],"(",["T_VARIABLE","$id",177],")",";",["T_WHITESPACE","\n\n  ",177],["T_DOC_COMMENT","\/**\n   * Determines if any links use a given menu name.\n   *\n   * @param string $menu_name\n   *   The menu name.\n   *\n   * @return bool\n   *   TRUE if any links are present in the named menu, FALSE otherwise.\n   *\/",179],["T_WHITESPACE","\n  ",187],["T_PUBLIC","public",188],["T_WHITESPACE"," ",188],["T_FUNCTION","function",188],["T_WHITESPACE"," ",188],["T_STRING","menuNameInUse",188],"(",["T_VARIABLE","$menu_name",188],")",";",["T_WHITESPACE","\n\n  ",188],["T_DOC_COMMENT","\/**\n   * Resets any local definition cache. Used for testing.\n   *\/",190],["T_WHITESPACE","\n  ",192],["T_PUBLIC","public",193],["T_WHITESPACE"," ",193],["T_FUNCTION","function",193],["T_WHITESPACE"," ",193],["T_STRING","resetDefinitions",193],"(",")",";",["T_WHITESPACE","\n\n",193],"}",["T_WHITESPACE","\n",195]]