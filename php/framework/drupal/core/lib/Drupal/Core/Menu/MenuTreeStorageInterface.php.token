[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Menu",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for storing a menu tree containing menu link IDs.\n *\n * The tree contains a hierarchy of menu links which have an ID as well as a\n * route name or external URL.\n *\/",5],["T_WHITESPACE","\n",10],["T_INTERFACE","interface",11],["T_WHITESPACE"," ",11],["T_STRING","MenuTreeStorageInterface",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * The maximum depth of tree the storage implementation supports.\n   *\n   * @return int\n   *   The maximum depth.\n   *\/",13],["T_WHITESPACE","\n  ",18],["T_PUBLIC","public",19],["T_WHITESPACE"," ",19],["T_FUNCTION","function",19],["T_WHITESPACE"," ",19],["T_STRING","maxDepth",19],"(",")",";",["T_WHITESPACE","\n\n  ",19],["T_DOC_COMMENT","\/**\n   * Clears all definitions cached in memory.\n   *\/",21],["T_WHITESPACE","\n  ",23],["T_PUBLIC","public",24],["T_WHITESPACE"," ",24],["T_FUNCTION","function",24],["T_WHITESPACE"," ",24],["T_STRING","resetDefinitions",24],"(",")",";",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Rebuilds the stored menu link definitions.\n   *\n   * Links that saved by passing definitions into this method must be included\n   * on all future calls, or they will be purged. This allows for automatic\n   * cleanup e.g. when modules are uninstalled.\n   *\n   * @param array $definitions\n   *   The new menu link definitions.\n   *\/",26],["T_WHITESPACE","\n  ",35],["T_PUBLIC","public",36],["T_WHITESPACE"," ",36],["T_FUNCTION","function",36],["T_WHITESPACE"," ",36],["T_STRING","rebuild",36],"(",["T_ARRAY","array",36],["T_WHITESPACE"," ",36],["T_VARIABLE","$definitions",36],")",";",["T_WHITESPACE","\n\n  ",36],["T_DOC_COMMENT","\/**\n   * Loads a menu link plugin definition from the storage.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   *\n   * @return array|false\n   *   The plugin definition, or FALSE if no definition was found for the ID.\n   *\/",38],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","load",47],"(",["T_VARIABLE","$id",47],")",";",["T_WHITESPACE","\n\n  ",47],["T_DOC_COMMENT","\/**\n   * Loads multiple plugin definitions from the storage.\n   *\n   * @param array $ids\n   *   An array of plugin IDs.\n   *\n   * @return array\n   *   An array of plugin definition arrays keyed by plugin ID, which are the\n   *   actual definitions after the loadMultiple() including all those plugins\n   *   from $ids.\n   *\/",49],["T_WHITESPACE","\n  ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","loadMultiple",60],"(",["T_ARRAY","array",60],["T_WHITESPACE"," ",60],["T_VARIABLE","$ids",60],")",";",["T_WHITESPACE","\n\n  ",60],["T_DOC_COMMENT","\/**\n   * Loads multiple plugin definitions from the storage based on properties.\n   *\n   * @param array $properties\n   *   The properties to filter by.\n   *\n   * @return array\n   *   An array of menu link definition arrays.\n   *\n   * @throws \\InvalidArgumentException\n   *   Thrown if an invalid property name is specified in $properties.\n   *\/",62],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","loadByProperties",74],"(",["T_ARRAY","array",74],["T_WHITESPACE"," ",74],["T_VARIABLE","$properties",74],")",";",["T_WHITESPACE","\n\n  ",74],["T_DOC_COMMENT","\/**\n   * Loads multiple plugin definitions from the storage based on route.\n   *\n   * @param string $route_name\n   *   The route name.\n   * @param array $route_parameters\n   *   (optional) The route parameters. Defaults to an empty array.\n   * @param string $menu_name\n   *   (optional) Restricts the found links to just those in the named menu.\n   *\n   * @return array\n   *   An array of menu link definitions keyed by ID and ordered by depth.\n   *\/",76],["T_WHITESPACE","\n  ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","loadByRoute",89],"(",["T_VARIABLE","$route_name",89],",",["T_WHITESPACE"," ",89],["T_ARRAY","array",89],["T_WHITESPACE"," ",89],["T_VARIABLE","$route_parameters",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_ARRAY","array",89],"(",")",",",["T_WHITESPACE"," ",89],["T_VARIABLE","$menu_name",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_STRING","NULL",89],")",";",["T_WHITESPACE","\n\n  ",89],["T_DOC_COMMENT","\/**\n   * Saves a plugin definition to the storage.\n   *\n   * @param array $definition\n   *   A definition for a \\Drupal\\Core\\Menu\\MenuLinkInterface plugin.\n   *\n   * @return array\n   *   The menu names affected by the save operation. This will be one menu\n   *   name if the link is saved to the sane menu, or two if it is saved to a\n   *   new menu.\n   *\n   * @throws \\Exception\n   *   Thrown if the storage back-end does not exist and could not be created.\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginException\n   *   Thrown if the definition is invalid - for example, if the specified\n   *   parent would cause the links children to be moved to greater than the\n   *   maximum depth.\n   *\/",91],["T_WHITESPACE","\n  ",108],["T_PUBLIC","public",109],["T_WHITESPACE"," ",109],["T_FUNCTION","function",109],["T_WHITESPACE"," ",109],["T_STRING","save",109],"(",["T_ARRAY","array",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$definition",109],")",";",["T_WHITESPACE","\n\n  ",109],["T_DOC_COMMENT","\/**\n   * Deletes a menu link definition from the storage.\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   *\/",111],["T_WHITESPACE","\n  ",116],["T_PUBLIC","public",117],["T_WHITESPACE"," ",117],["T_FUNCTION","function",117],["T_WHITESPACE"," ",117],["T_STRING","delete",117],"(",["T_VARIABLE","$id",117],")",";",["T_WHITESPACE","\n\n  ",117],["T_DOC_COMMENT","\/**\n   * Loads a menu link tree from the storage.\n   *\n   * This function may be used build the data for a menu tree only, for example\n   * to further massage the data manually before further processing happens.\n   * MenuLinkTree::checkAccess() needs to be invoked afterwards.\n   *\n   * The tree order is maintained using an optimized algorithm, for example by\n   * storing each parent in an individual field, see\n   * https:\/\/www.drupal.org\/node\/141866 for more details. However, any details\n   * of the storage should not be relied upon since it may be swapped with a\n   * different implementation.\n   *\n   * @param string $menu_name\n   *   The name of the menu.\n   * @param \\Drupal\\Core\\Menu\\MenuTreeParameters $parameters\n   *   The parameters to determine which menu links to be loaded into a tree.\n   *\n   * @return array\n   *   An array with 2 elements:\n   *   - tree: A fully built menu tree containing an array.\n   *     @see static::treeDataRecursive()\n   *   - route_names: An array of all route names used in the tree.\n   *\/",119],["T_WHITESPACE","\n  ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","loadTreeData",143],"(",["T_VARIABLE","$menu_name",143],",",["T_WHITESPACE"," ",143],["T_STRING","MenuTreeParameters",143],["T_WHITESPACE"," ",143],["T_VARIABLE","$parameters",143],")",";",["T_WHITESPACE","\n\n  ",143],["T_DOC_COMMENT","\/**\n   * Loads all the enabled menu links that are below the given ID.\n   *\n   * The returned links are not ordered, and visible children will be included\n   * even if they have parent that is not enabled or ancestor so would not\n   * normally appear in a rendered tree.\n   *\n   * @param string $id\n   *   The parent menu link ID.\n   * @param int $max_relative_depth\n   *   The maximum relative depth of the children relative to the passed parent.\n   *\n   * @return array\n   *   An array of enabled link definitions, keyed by ID.\n   *\/",145],["T_WHITESPACE","\n  ",159],["T_PUBLIC","public",160],["T_WHITESPACE"," ",160],["T_FUNCTION","function",160],["T_WHITESPACE"," ",160],["T_STRING","loadAllChildren",160],"(",["T_VARIABLE","$id",160],",",["T_WHITESPACE"," ",160],["T_VARIABLE","$max_relative_depth",160],["T_WHITESPACE"," ",160],"=",["T_WHITESPACE"," ",160],["T_STRING","NULL",160],")",";",["T_WHITESPACE","\n\n  ",160],["T_DOC_COMMENT","\/**\n   * Loads all the IDs for menu links that are below the given ID.\n   *\n   * @param string $id\n   *   The parent menu link ID.\n   *\n   * @return array\n   *   An unordered array of plugin IDs corresponding to all children.\n   *\/",162],["T_WHITESPACE","\n  ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","getAllChildIds",171],"(",["T_VARIABLE","$id",171],")",";",["T_WHITESPACE","\n\n  ",171],["T_DOC_COMMENT","\/**\n   * Loads a subtree rooted by the given ID.\n   *\n   * The returned links are structured like those from loadTreeData().\n   *\n   * @param string $id\n   *   The menu link plugin ID.\n   * @param int $max_relative_depth\n   *   (optional) The maximum depth of child menu links relative to the passed\n   *   in. Defaults to NULL, in which case the full subtree will be returned.\n   *\n   * @return array\n   *   An array with 2 elements:\n   *   - subtree: A fully built menu tree element or FALSE.\n   *   - route_names: An array of all route names used in the subtree.\n   *\/",173],["T_WHITESPACE","\n  ",188],["T_PUBLIC","public",189],["T_WHITESPACE"," ",189],["T_FUNCTION","function",189],["T_WHITESPACE"," ",189],["T_STRING","loadSubtreeData",189],"(",["T_VARIABLE","$id",189],",",["T_WHITESPACE"," ",189],["T_VARIABLE","$max_relative_depth",189],["T_WHITESPACE"," ",189],"=",["T_WHITESPACE"," ",189],["T_STRING","NULL",189],")",";",["T_WHITESPACE","\n\n  ",189],["T_DOC_COMMENT","\/**\n   * Returns all the IDs that represent the path to the root of the tree.\n   *\n   * @param string $id\n   *   A menu link ID.\n   *\n   * @return array\n   *   An associative array of IDs with keys equal to values that represents the\n   *   path from the given ID to the root of the tree. If $id is an ID that\n   *   exists, the returned array will at least include it.  An empty array is\n   *   returned if the ID does not exist in the storage. An example $id (8) with\n   *   two parents (1, 6) looks like the following:\n   * @code\n   *   array(\n   *     'p1' => 1,\n   *     'p2' => 6,\n   *     'p3' => 8,\n   *     'p4' => 0,\n   *     'p5' => 0,\n   *     'p6' => 0,\n   *     'p7' => 0,\n   *     'p8' => 0,\n   *     'p9' => 0\n   *   )\n   * @endcode\n   *\/",191],["T_WHITESPACE","\n  ",216],["T_PUBLIC","public",217],["T_WHITESPACE"," ",217],["T_FUNCTION","function",217],["T_WHITESPACE"," ",217],["T_STRING","getRootPathIds",217],"(",["T_VARIABLE","$id",217],")",";",["T_WHITESPACE","\n\n  ",217],["T_DOC_COMMENT","\/**\n   * Finds expanded links in a menu given a set of possible parents.\n   *\n   * @param string $menu_name\n   *   The menu name.\n   * @param array $parents\n   *   One or more parent IDs to match.\n   *\n   * @return array\n   *   The menu link IDs that are flagged as expanded in this menu.\n   *\/",219],["T_WHITESPACE","\n  ",229],["T_PUBLIC","public",230],["T_WHITESPACE"," ",230],["T_FUNCTION","function",230],["T_WHITESPACE"," ",230],["T_STRING","getExpanded",230],"(",["T_VARIABLE","$menu_name",230],",",["T_WHITESPACE"," ",230],["T_ARRAY","array",230],["T_WHITESPACE"," ",230],["T_VARIABLE","$parents",230],")",";",["T_WHITESPACE","\n\n  ",230],["T_DOC_COMMENT","\/**\n   * Finds the height of a subtree rooted by the given ID.\n   *\n   * @param string $id\n   *   The ID of an item in the storage.\n   *\n   * @return int\n   *   Returns the height of the subtree. This will be at least 1 if the ID\n   *   exists, or 0 if the ID does not exist in the storage.\n   *\/",232],["T_WHITESPACE","\n  ",241],["T_PUBLIC","public",242],["T_WHITESPACE"," ",242],["T_FUNCTION","function",242],["T_WHITESPACE"," ",242],["T_STRING","getSubtreeHeight",242],"(",["T_VARIABLE","$id",242],")",";",["T_WHITESPACE","\n\n  ",242],["T_DOC_COMMENT","\/**\n   * Determines whether a specific menu name is used in the tree.\n   *\n   * @param string $menu_name\n   *   The menu name.\n   *\n   * @return bool\n   *   Returns TRUE if the given menu name is used, otherwise FALSE.\n   *\/",244],["T_WHITESPACE","\n  ",252],["T_PUBLIC","public",253],["T_WHITESPACE"," ",253],["T_FUNCTION","function",253],["T_WHITESPACE"," ",253],["T_STRING","menuNameInUse",253],"(",["T_VARIABLE","$menu_name",253],")",";",["T_WHITESPACE","\n\n  ",253],["T_DOC_COMMENT","\/**\n   * Returns the used menu names in the tree storage.\n   *\n   * @return array\n   *   The menu names.\n   *\/",255],["T_WHITESPACE","\n  ",260],["T_PUBLIC","public",261],["T_WHITESPACE"," ",261],["T_FUNCTION","function",261],["T_WHITESPACE"," ",261],["T_STRING","getMenuNames",261],"(",")",";",["T_WHITESPACE","\n\n  ",261],["T_DOC_COMMENT","\/**\n   * Counts the total number of menu links in one menu or all menus.\n   *\n   * @param string $menu_name\n   *   (optional) The menu name to count by. Defaults to all menus.\n   *\n   * @return int\n   *   The number of menu links in the named menu, or in all menus if the menu\n   *   name is NULL.\n   *\/",263],["T_WHITESPACE","\n  ",272],["T_PUBLIC","public",273],["T_WHITESPACE"," ",273],["T_FUNCTION","function",273],["T_WHITESPACE"," ",273],["T_STRING","countMenuLinks",273],"(",["T_VARIABLE","$menu_name",273],["T_WHITESPACE"," ",273],"=",["T_WHITESPACE"," ",273],["T_STRING","NULL",273],")",";",["T_WHITESPACE","\n\n",273],"}",["T_WHITESPACE","\n",275]]