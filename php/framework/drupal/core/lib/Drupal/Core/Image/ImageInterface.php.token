[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Image",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for image objects.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","ImageInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Checks if the image is valid.\n   *\n   * @return bool\n   *   TRUE if the image object contains a valid image, FALSE otherwise.\n   *\/",10],["T_WHITESPACE","\n  ",15],["T_PUBLIC","public",16],["T_WHITESPACE"," ",16],["T_FUNCTION","function",16],["T_WHITESPACE"," ",16],["T_STRING","isValid",16],"(",")",";",["T_WHITESPACE","\n\n  ",16],["T_DOC_COMMENT","\/**\n   * Returns the height of the image.\n   *\n   * @return int|null\n   *   The height of the image, or NULL if the image is invalid.\n   *\/",18],["T_WHITESPACE","\n  ",23],["T_PUBLIC","public",24],["T_WHITESPACE"," ",24],["T_FUNCTION","function",24],["T_WHITESPACE"," ",24],["T_STRING","getHeight",24],"(",")",";",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Returns the width of the image.\n   *\n   * @return int|null\n   *   The width of the image, or NULL if the image is invalid.\n   *\/",26],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],["T_STRING","getWidth",32],"(",")",";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Returns the size of the image file.\n   *\n   * @return int|null\n   *   The size of the file in bytes, or NULL if the image is invalid.\n   *\/",34],["T_WHITESPACE","\n  ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","getFileSize",40],"(",")",";",["T_WHITESPACE","\n\n  ",40],["T_DOC_COMMENT","\/**\n   * Returns the MIME type of the image file.\n   *\n   * @return string\n   *   The MIME type of the image file, or an empty string if the image is\n   *   invalid.\n   *\/",42],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","getMimeType",49],"(",")",";",["T_WHITESPACE","\n\n  ",49],["T_DOC_COMMENT","\/**\n   * Retrieves the source path of the image file.\n   *\n   * @return string\n   *   The source path of the image file. An empty string if the source is\n   *   not set.\n   *\/",51],["T_WHITESPACE","\n  ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","getSource",58],"(",")",";",["T_WHITESPACE","\n\n  ",58],["T_DOC_COMMENT","\/**\n   * Returns the image toolkit used for this image file.\n   *\n   * @return \\Drupal\\Core\\ImageToolkit\\ImageToolkitInterface\n   *   The image toolkit.\n   *\/",60],["T_WHITESPACE","\n  ",65],["T_PUBLIC","public",66],["T_WHITESPACE"," ",66],["T_FUNCTION","function",66],["T_WHITESPACE"," ",66],["T_STRING","getToolkit",66],"(",")",";",["T_WHITESPACE","\n\n  ",66],["T_DOC_COMMENT","\/**\n   * Returns the ID of the image toolkit used for this image file.\n   *\n   * @return string\n   *   The ID of the image toolkit.\n   *\/",68],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","getToolkitId",74],"(",")",";",["T_WHITESPACE","\n\n  ",74],["T_DOC_COMMENT","\/**\n   * Applies a toolkit operation to the image.\n   *\n   * The operation is deferred to the active toolkit.\n   *\n   * @param string $operation\n   *   The operation to be performed against the image.\n   * @param array $arguments\n   *   (optional) An associative array of arguments to be passed to the toolkit\n   *   operation; for instance,\n   *   @code\n   *     ['width' => 50, 'height' => 100, 'upscale' => TRUE]\n   *   @endcode\n   *   Defaults to an empty array.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",76],["T_WHITESPACE","\n  ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","apply",94],"(",["T_VARIABLE","$operation",94],",",["T_WHITESPACE"," ",94],["T_ARRAY","array",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$arguments",94],["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_ARRAY","array",94],"(",")",")",";",["T_WHITESPACE","\n\n  ",94],["T_DOC_COMMENT","\/**\n   * Closes the image and saves the changes to a file.\n   *\n   * @param string|null $destination\n   *   (optional) Destination path where the image should be saved. If it is empty\n   *   the original image file will be overwritten.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\n   * @see \\Drupal\\Core\\ImageToolkit\\ImageToolkitInterface::save()\n   *\/",96],["T_WHITESPACE","\n  ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","save",108],"(",["T_VARIABLE","$destination",108],["T_WHITESPACE"," ",108],"=",["T_WHITESPACE"," ",108],["T_STRING","NULL",108],")",";",["T_WHITESPACE","\n\n  ",108],["T_DOC_COMMENT","\/**\n   * Prepares a new image, without loading it from a file.\n   *\n   * For a working example, see\n   * \\Drupal\\system\\Plugin\\ImageToolkit\\Operation\\gd\\CreateNew.\n   *\n   * @param int $width\n   *   The width of the new image, in pixels.\n   * @param int $height\n   *   The height of the new image, in pixels.\n   * @param string $extension\n   *   (optional) The extension of the image file (for instance, 'png', 'gif',\n   *   etc.). Allowed values depend on the implementation of the image toolkit.\n   *   Defaults to 'png'.\n   * @param string $transparent_color\n   *   (optional) The hexadecimal string representing the color to be used\n   *   for transparency, needed for GIF images. Defaults to '#ffffff' (white).\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",110],["T_WHITESPACE","\n  ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","createNew",131],"(",["T_VARIABLE","$width",131],",",["T_WHITESPACE"," ",131],["T_VARIABLE","$height",131],",",["T_WHITESPACE"," ",131],["T_VARIABLE","$extension",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_CONSTANT_ENCAPSED_STRING","'png'",131],",",["T_WHITESPACE"," ",131],["T_VARIABLE","$transparent_color",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_CONSTANT_ENCAPSED_STRING","'#ffffff'",131],")",";",["T_WHITESPACE","\n\n  ",131],["T_DOC_COMMENT","\/**\n   * Scales an image while maintaining aspect ratio.\n   *\n   * The resulting image can be smaller for one or both target dimensions.\n   *\n   * @param int|null $width\n   *   The target width, in pixels. If this value is null then the scaling will\n   *   be based only on the height value.\n   * @param int|null $height\n   *   (optional) The target height, in pixels. If this value is null then the\n   *   scaling will be based only on the width value.\n   * @param bool $upscale\n   *   (optional) Boolean indicating that files smaller than the dimensions will\n   *   be scaled up. This generally results in a low quality image.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",133],["T_WHITESPACE","\n  ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","scale",151],"(",["T_VARIABLE","$width",151],",",["T_WHITESPACE"," ",151],["T_VARIABLE","$height",151],["T_WHITESPACE"," ",151],"=",["T_WHITESPACE"," ",151],["T_STRING","NULL",151],",",["T_WHITESPACE"," ",151],["T_VARIABLE","$upscale",151],["T_WHITESPACE"," ",151],"=",["T_WHITESPACE"," ",151],["T_STRING","FALSE",151],")",";",["T_WHITESPACE","\n\n  ",151],["T_DOC_COMMENT","\/**\n   * Scales an image to the exact width and height given.\n   *\n   * This function achieves the target aspect ratio by cropping the original\n   * image equally on both sides, or equally on the top and bottom. This\n   * function is useful to create uniform sized avatars from larger images.\n   *\n   * The resulting image always has the exact target dimensions.\n   *\n   * @param int $width\n   *   The target width, in pixels.\n   * @param int $height\n   *   The target height, in pixels.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",153],["T_WHITESPACE","\n  ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","scaleAndCrop",170],"(",["T_VARIABLE","$width",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$height",170],")",";",["T_WHITESPACE","\n\n  ",170],["T_DOC_COMMENT","\/**\n   * Instructs the toolkit to save the image in the format specified by the\n   * extension.\n   *\n   * @param string $extension\n   *   The extension to convert to (for instance, 'jpeg' or 'png'). Allowed\n   *   values depend on the current image toolkit.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\n   * @see \\Drupal\\Core\\ImageToolkit\\ImageToolkitInterface::getSupportedExtensions()\n   *\/",172],["T_WHITESPACE","\n  ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","convert",185],"(",["T_VARIABLE","$extension",185],")",";",["T_WHITESPACE","\n\n  ",185],["T_DOC_COMMENT","\/**\n   * Crops an image to a rectangle specified by the given dimensions.\n   *\n   * @param int $x\n   *   The top left coordinate, in pixels, of the crop area (x axis value).\n   * @param int $y\n   *   The top left coordinate, in pixels, of the crop area (y axis value).\n   * @param int $width\n   *   The target width, in pixels.\n   * @param int $height\n   *   The target height, in pixels.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",187],["T_WHITESPACE","\n  ",201],["T_PUBLIC","public",202],["T_WHITESPACE"," ",202],["T_FUNCTION","function",202],["T_WHITESPACE"," ",202],["T_STRING","crop",202],"(",["T_VARIABLE","$x",202],",",["T_WHITESPACE"," ",202],["T_VARIABLE","$y",202],",",["T_WHITESPACE"," ",202],["T_VARIABLE","$width",202],",",["T_WHITESPACE"," ",202],["T_VARIABLE","$height",202],["T_WHITESPACE"," ",202],"=",["T_WHITESPACE"," ",202],["T_STRING","NULL",202],")",";",["T_WHITESPACE","\n\n  ",202],["T_DOC_COMMENT","\/**\n   * Resizes an image to the given dimensions (ignoring aspect ratio).\n   *\n   * @param int $width\n   *   The target width, in pixels.\n   * @param int $height\n   *   The target height, in pixels.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",204],["T_WHITESPACE","\n  ",214],["T_PUBLIC","public",215],["T_WHITESPACE"," ",215],["T_FUNCTION","function",215],["T_WHITESPACE"," ",215],["T_STRING","resize",215],"(",["T_VARIABLE","$width",215],",",["T_WHITESPACE"," ",215],["T_VARIABLE","$height",215],")",";",["T_WHITESPACE","\n\n  ",215],["T_DOC_COMMENT","\/**\n   * Converts an image to grayscale.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",217],["T_WHITESPACE","\n  ",222],["T_PUBLIC","public",223],["T_WHITESPACE"," ",223],["T_FUNCTION","function",223],["T_WHITESPACE"," ",223],["T_STRING","desaturate",223],"(",")",";",["T_WHITESPACE","\n\n  ",223],["T_DOC_COMMENT","\/**\n   * Rotates an image by the given number of degrees.\n   *\n   * @param float $degrees\n   *   The number of (clockwise) degrees to rotate the image.\n   * @param string|null $background\n   *   (optional) An hexadecimal integer specifying the background color to use\n   *   for the uncovered area of the image after the rotation; for example,\n   *   0x000000 for black, 0xff00ff for magenta, and 0xffffff for white. When\n   *   NULL (the default) is specified, for images that support transparency,\n   *   this will default to transparent; otherwise, it will default to white.\n   *\n   * @return bool\n   *   TRUE on success, FALSE on failure.\n   *\/",225],["T_WHITESPACE","\n  ",239],["T_PUBLIC","public",240],["T_WHITESPACE"," ",240],["T_FUNCTION","function",240],["T_WHITESPACE"," ",240],["T_STRING","rotate",240],"(",["T_VARIABLE","$degrees",240],",",["T_WHITESPACE"," ",240],["T_VARIABLE","$background",240],["T_WHITESPACE"," ",240],"=",["T_WHITESPACE"," ",240],["T_STRING","NULL",240],")",";",["T_WHITESPACE","\n\n",240],"}",["T_WHITESPACE","\n",242]]