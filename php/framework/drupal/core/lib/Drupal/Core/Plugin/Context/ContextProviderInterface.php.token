[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Context",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for providing plugin contexts.\n *\n * Implementations only need to deal with unqualified context IDs so they only\n * need to be unique in the context of a given service provider.\n *\n * The fully qualified context ID then includes the service ID:\n * @{service_id}:{unqualified_context_id}.\n *\n * @see \\Drupal\\Core\\Plugin\\Context\\ContextRepositoryInterface\n *\/",5],["T_WHITESPACE","\n",15],["T_INTERFACE","interface",16],["T_WHITESPACE"," ",16],["T_STRING","ContextProviderInterface",16],["T_WHITESPACE"," ",16],"{",["T_WHITESPACE","\n\n  ",16],["T_DOC_COMMENT","\/**\n   * Gets runtime context values for the given context IDs.\n   *\n   * For context-aware plugins to function correctly, all of the contexts that\n   * they require must be populated with values. So this method should set a\n   * value for each context that it adds. For example:\n   *\n   * @code\n   *   \/\/ Determine a specific node to pass as context to a block.\n   *   $node = ...\n   *\n   *   \/\/ Set that specific node as the value of the 'node' context.\n   *   $context = new Context(new ContextDefinition('entity:node'), $node);\n   *   return ['node' => $context];\n   * @endcode\n   *\n   * On the other hand, there are cases, on which providers no longer are\n   * possible to provide context objects, even without the value, so the caller\n   * should not expect it.\n   *\n   * @param string[] $unqualified_context_ids\n   *   The requested context IDs. The context provider must only return contexts\n   *   for those IDs.\n   *\n   * @return \\Drupal\\Core\\Plugin\\Context\\ContextInterface[]\n   *   The determined available contexts, keyed by the unqualified context_id.\n   *\n   * @see \\Drupal\\Core\\Plugin\\Context\\ContextProviderInterface:getAvailableContexts()\n   *\/",18],["T_WHITESPACE","\n  ",46],["T_PUBLIC","public",47],["T_WHITESPACE"," ",47],["T_FUNCTION","function",47],["T_WHITESPACE"," ",47],["T_STRING","getRuntimeContexts",47],"(",["T_ARRAY","array",47],["T_WHITESPACE"," ",47],["T_VARIABLE","$unqualified_context_ids",47],")",";",["T_WHITESPACE","\n\n  ",47],["T_DOC_COMMENT","\/**\n   * Gets all available contexts for the purposes of configuration.\n   *\n   * When a context aware plugin is being configured, the configuration UI must\n   * know which named contexts are potentially available, but does not care\n   * about the value, since the value can be different for each request, and\n   * might not be available at all during the configuration UI's request.\n   *\n   * For example:\n   * @code\n   *   \/\/ During configuration, there is no specific node to pass as context.\n   *   \/\/ However, inform the system that a context named 'node' is\n   *   \/\/ available, and provide its definition, so that context aware plugins\n   *   \/\/ can be configured to use it. When the plugin, for example a block,\n   *   \/\/ needs to evaluate the context, the value of this context will be\n   *   \/\/ supplied by getRuntimeContexts().\n   *   $context = new Context(new ContextDefinition('entity:node'));\n   *   return ['node' => $context];\n   * @endcode\n   *\n   * @return \\Drupal\\Core\\Plugin\\Context\\ContextInterface[]\n   *   All available contexts keyed by the unqualified context ID.\n   *\n   * @see \\Drupal\\Core\\Plugin\\Context\\ContextProviderInterface::getRuntimeContext()\n   *\/",49],["T_WHITESPACE","\n  ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","getAvailableContexts",74],"(",")",";",["T_WHITESPACE","\n\n",74],"}",["T_WHITESPACE","\n",76]]