[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for retrieving form objects for plugins.\n *\n * This allows a plugin to define multiple forms, in addition to the plugin\n * itself providing a form. All forms, decoupled or self-contained, must\n * implement \\Drupal\\Core\\Plugin\\PluginFormInterface. Decoupled forms can\n * implement \\Drupal\\Component\\Plugin\\PluginAwareInterface in order to gain\n * access to the plugin.\n *\/",5],["T_WHITESPACE","\n",13],["T_INTERFACE","interface",14],["T_WHITESPACE"," ",14],["T_STRING","PluginFormFactoryInterface",14],["T_WHITESPACE"," ",14],"{",["T_WHITESPACE","\n\n  ",14],["T_DOC_COMMENT","\/**\n   * Creates a new form instance.\n   *\n   * @param \\Drupal\\Core\\Plugin\\PluginWithFormsInterface $plugin\n   *   The plugin the form is for.\n   * @param string $operation\n   *   The name of the operation to use, e.g., 'add' or 'edit'.\n   * @param string $fallback_operation\n   *   (optional) The name of the fallback operation to use.\n   *\n   * @return \\Drupal\\Core\\Plugin\\PluginFormInterface\n   *   A plugin form instance.\n   *\n   * @throws \\Drupal\\Component\\Plugin\\Exception\\InvalidPluginDefinitionException\n   *\/",16],["T_WHITESPACE","\n  ",30],["T_PUBLIC","public",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","createInstance",31],"(",["T_STRING","PluginWithFormsInterface",31],["T_WHITESPACE"," ",31],["T_VARIABLE","$plugin",31],",",["T_WHITESPACE"," ",31],["T_VARIABLE","$operation",31],",",["T_WHITESPACE"," ",31],["T_VARIABLE","$fallback_operation",31],["T_WHITESPACE"," ",31],"=",["T_WHITESPACE"," ",31],["T_STRING","NULL",31],")",";",["T_WHITESPACE","\n\n",31],"}",["T_WHITESPACE","\n",33]]