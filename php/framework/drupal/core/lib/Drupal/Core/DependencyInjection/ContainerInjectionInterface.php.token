[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","DependencyInjection",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Symfony",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Component",5],["T_NS_SEPARATOR","\\",5],["T_STRING","DependencyInjection",5],["T_NS_SEPARATOR","\\",5],["T_STRING","ContainerInterface",5],";",["T_WHITESPACE","\n\n",5],["T_DOC_COMMENT","\/**\n * Defines a common interface for dependency container injection.\n *\n * This interface gives classes who need services a factory method for\n * instantiation rather than defining a new service.\n *\/",7],["T_WHITESPACE","\n",12],["T_INTERFACE","interface",13],["T_WHITESPACE"," ",13],["T_STRING","ContainerInjectionInterface",13],["T_WHITESPACE"," ",13],"{",["T_WHITESPACE","\n\n  ",13],["T_DOC_COMMENT","\/**\n   * Instantiates a new instance of this class.\n   *\n   * This is a factory method that returns a new instance of this class. The\n   * factory should pass any needed dependencies into the constructor of this\n   * class, but not the container itself. Every call to this method must return\n   * a new instance of this class; that is, it may not implement a singleton.\n   *\n   * @param \\Symfony\\Component\\DependencyInjection\\ContainerInterface $container\n   *   The service container this instance should use.\n   *\/",15],["T_WHITESPACE","\n  ",25],["T_PUBLIC","public",26],["T_WHITESPACE"," ",26],["T_STATIC","static",26],["T_WHITESPACE"," ",26],["T_FUNCTION","function",26],["T_WHITESPACE"," ",26],["T_STRING","create",26],"(",["T_STRING","ContainerInterface",26],["T_WHITESPACE"," ",26],["T_VARIABLE","$container",26],")",";",["T_WHITESPACE","\n\n",26],"}",["T_WHITESPACE","\n",28]]