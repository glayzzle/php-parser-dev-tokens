[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Callbacks and hooks related to form system.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @addtogroup callbacks\n * @{\n *\/",8],["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * Perform a single batch operation.\n *\n * Callback for batch_set().\n *\n * @param $MULTIPLE_PARAMS\n *   Additional parameters specific to the batch. These are specified in the\n *   array passed to batch_set().\n * @param array|\\ArrayAccess $context.\n *   The batch context array, passed by reference. This contains the following\n *   properties:\n *   - 'finished': A float number between 0 and 1 informing the processing\n *     engine of the completion level for the operation. 1 (or no value\n *     explicitly set) means the operation is finished: the operation will not\n *     be called again, and execution passes to the next operation or the\n *     callback_batch_finished() implementation. Any other value causes this\n *     operation to be called again; however it should be noted that the value\n *     set here does not persist between executions of this callback: each time\n *     it is set to 1 by default by the batch system.\n *   - 'sandbox': This may be used by operations to persist data between\n *     successive calls to the current operation. Any values set in\n *     $context['sandbox'] will be there the next time this function is called\n *     for the current operation. For example, an operation may wish to store a\n *     pointer in a file or an offset for a large query. The 'sandbox' array key\n *     is not initially set when this callback is first called, which makes it\n *     useful for determining whether it is the first call of the callback or\n *     not:\n *     @code\n *       if (empty($context['sandbox'])) {\n *         \/\/ Perform set-up steps here.\n *       }\n *     @endcode\n *     The values in the sandbox are stored and updated in the database between\n *     http requests until the batch finishes processing. This avoids problems\n *     if the user navigates away from the page before the batch finishes.\n *   - 'message': A text message displayed in the progress page.\n *   - 'results': The array of results gathered so far by the batch processing.\n *     This array is highly useful for passing data between operations. After\n *     all operations have finished, this is passed to callback_batch_finished()\n *     where results may be referenced to display information to the end-user,\n *     such as how many total items were processed.\n *   It is discouraged to typehint this parameter as an array, to allow an\n *   object implement \\ArrayAccess to be passed.\n *\/",13],["T_WHITESPACE","\n",56],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","callback_batch_operation",57],"(",["T_VARIABLE","$MULTIPLE_PARAMS",57],",",["T_WHITESPACE"," ",57],"&",["T_VARIABLE","$context",57],")",["T_WHITESPACE"," ",57],"{",["T_WHITESPACE","\n  ",57],["T_VARIABLE","$node_storage",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_NS_SEPARATOR","\\",58],["T_STRING","Drupal",58],["T_DOUBLE_COLON","::",58],["T_STRING","entityTypeManager",58],"(",")",["T_OBJECT_OPERATOR","->",58],["T_STRING","getStorage",58],"(",["T_CONSTANT_ENCAPSED_STRING","'node'",58],")",";",["T_WHITESPACE","\n  ",58],["T_VARIABLE","$database",59],["T_WHITESPACE"," ",59],"=",["T_WHITESPACE"," ",59],["T_NS_SEPARATOR","\\",59],["T_STRING","Drupal",59],["T_DOUBLE_COLON","::",59],["T_STRING","database",59],"(",")",";",["T_WHITESPACE","\n\n  ",59],["T_IF","if",61],["T_WHITESPACE"," ",61],"(","!",["T_ISSET","isset",61],"(",["T_VARIABLE","$context",61],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",61],"]","[",["T_CONSTANT_ENCAPSED_STRING","'progress'",61],"]",")",")",["T_WHITESPACE"," ",61],"{",["T_WHITESPACE","\n    ",61],["T_VARIABLE","$context",62],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",62],"]","[",["T_CONSTANT_ENCAPSED_STRING","'progress'",62],"]",["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],["T_LNUMBER","0",62],";",["T_WHITESPACE","\n    ",62],["T_VARIABLE","$context",63],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",63],"]","[",["T_CONSTANT_ENCAPSED_STRING","'current_node'",63],"]",["T_WHITESPACE"," ",63],"=",["T_WHITESPACE"," ",63],["T_LNUMBER","0",63],";",["T_WHITESPACE","\n    ",63],["T_VARIABLE","$context",64],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",64],"]","[",["T_CONSTANT_ENCAPSED_STRING","'max'",64],"]",["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_VARIABLE","$database",64],["T_OBJECT_OPERATOR","->",64],["T_STRING","query",64],"(",["T_CONSTANT_ENCAPSED_STRING","'SELECT COUNT(DISTINCT nid) FROM {node}'",64],")",["T_OBJECT_OPERATOR","->",64],["T_STRING","fetchField",64],"(",")",";",["T_WHITESPACE","\n  ",64],"}",["T_WHITESPACE","\n\n  ",65],["T_COMMENT","\/\/ For this example, we decide that we can safely process\n",67],["T_WHITESPACE","  ",68],["T_COMMENT","\/\/ 5 nodes at a time without a timeout.\n",68],["T_WHITESPACE","  ",69],["T_VARIABLE","$limit",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_LNUMBER","5",69],";",["T_WHITESPACE","\n\n  ",69],["T_COMMENT","\/\/ With each pass through the callback, retrieve the next group of nids.\n",71],["T_WHITESPACE","  ",72],["T_VARIABLE","$result",72],["T_WHITESPACE"," ",72],"=",["T_WHITESPACE"," ",72],["T_VARIABLE","$database",72],["T_OBJECT_OPERATOR","->",72],["T_STRING","queryRange",72],"(",["T_CONSTANT_ENCAPSED_STRING","\"SELECT nid FROM {node} WHERE nid > :nid ORDER BY nid ASC\"",72],",",["T_WHITESPACE"," ",72],["T_LNUMBER","0",72],",",["T_WHITESPACE"," ",72],["T_VARIABLE","$limit",72],",",["T_WHITESPACE"," ",72],"[",["T_CONSTANT_ENCAPSED_STRING","':nid'",72],["T_WHITESPACE"," ",72],["T_DOUBLE_ARROW","=>",72],["T_WHITESPACE"," ",72],["T_VARIABLE","$context",72],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",72],"]","[",["T_CONSTANT_ENCAPSED_STRING","'current_node'",72],"]","]",")",";",["T_WHITESPACE","\n  ",72],["T_FOREACH","foreach",73],["T_WHITESPACE"," ",73],"(",["T_VARIABLE","$result",73],["T_WHITESPACE"," ",73],["T_AS","as",73],["T_WHITESPACE"," ",73],["T_VARIABLE","$row",73],")",["T_WHITESPACE"," ",73],"{",["T_WHITESPACE","\n\n    ",73],["T_COMMENT","\/\/ Here we actually perform our processing on the current node.\n",75],["T_WHITESPACE","    ",76],["T_VARIABLE","$node_storage",76],["T_OBJECT_OPERATOR","->",76],["T_STRING","resetCache",76],"(",["T_ARRAY","array",76],"(",["T_VARIABLE","$row",76],"[",["T_CONSTANT_ENCAPSED_STRING","'nid'",76],"]",")",")",";",["T_WHITESPACE","\n    ",76],["T_VARIABLE","$node",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_VARIABLE","$node_storage",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","load",77],"(",["T_VARIABLE","$row",77],"[",["T_CONSTANT_ENCAPSED_STRING","'nid'",77],"]",")",";",["T_WHITESPACE","\n    ",77],["T_VARIABLE","$node",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","value1",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_VARIABLE","$options1",78],";",["T_WHITESPACE","\n    ",78],["T_VARIABLE","$node",79],["T_OBJECT_OPERATOR","->",79],["T_STRING","value2",79],["T_WHITESPACE"," ",79],"=",["T_WHITESPACE"," ",79],["T_VARIABLE","$options2",79],";",["T_WHITESPACE","\n    ",79],["T_STRING","node_save",80],"(",["T_VARIABLE","$node",80],")",";",["T_WHITESPACE","\n\n    ",80],["T_COMMENT","\/\/ Store some result for post-processing in the finished callback.\n",82],["T_WHITESPACE","    ",83],["T_VARIABLE","$context",83],"[",["T_CONSTANT_ENCAPSED_STRING","'results'",83],"]","[","]",["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_VARIABLE","$node",83],["T_OBJECT_OPERATOR","->",83],["T_STRING","title",83],";",["T_WHITESPACE","\n\n    ",83],["T_COMMENT","\/\/ Update our progress information.\n",85],["T_WHITESPACE","    ",86],["T_VARIABLE","$context",86],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",86],"]","[",["T_CONSTANT_ENCAPSED_STRING","'progress'",86],"]",["T_INC","++",86],";",["T_WHITESPACE","\n    ",86],["T_VARIABLE","$context",87],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",87],"]","[",["T_CONSTANT_ENCAPSED_STRING","'current_node'",87],"]",["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],["T_VARIABLE","$node",87],["T_OBJECT_OPERATOR","->",87],["T_STRING","nid",87],";",["T_WHITESPACE","\n    ",87],["T_VARIABLE","$context",88],"[",["T_CONSTANT_ENCAPSED_STRING","'message'",88],"]",["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_STRING","t",88],"(",["T_CONSTANT_ENCAPSED_STRING","'Now processing %node'",88],",",["T_WHITESPACE"," ",88],["T_ARRAY","array",88],"(",["T_CONSTANT_ENCAPSED_STRING","'%node'",88],["T_WHITESPACE"," ",88],["T_DOUBLE_ARROW","=>",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$node",88],["T_OBJECT_OPERATOR","->",88],["T_STRING","title",88],")",")",";",["T_WHITESPACE","\n  ",88],"}",["T_WHITESPACE","\n\n  ",89],["T_COMMENT","\/\/ Inform the batch engine that we are not finished,\n",91],["T_WHITESPACE","  ",92],["T_COMMENT","\/\/ and provide an estimation of the completion level we reached.\n",92],["T_WHITESPACE","  ",93],["T_IF","if",93],["T_WHITESPACE"," ",93],"(",["T_VARIABLE","$context",93],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",93],"]","[",["T_CONSTANT_ENCAPSED_STRING","'progress'",93],"]",["T_WHITESPACE"," ",93],["T_IS_NOT_EQUAL","!=",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$context",93],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",93],"]","[",["T_CONSTANT_ENCAPSED_STRING","'max'",93],"]",")",["T_WHITESPACE"," ",93],"{",["T_WHITESPACE","\n    ",93],["T_VARIABLE","$context",94],"[",["T_CONSTANT_ENCAPSED_STRING","'finished'",94],"]",["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_VARIABLE","$context",94],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",94],"]","[",["T_CONSTANT_ENCAPSED_STRING","'progress'",94],"]",["T_WHITESPACE"," ",94],"\/",["T_WHITESPACE"," ",94],["T_VARIABLE","$context",94],"[",["T_CONSTANT_ENCAPSED_STRING","'sandbox'",94],"]","[",["T_CONSTANT_ENCAPSED_STRING","'max'",94],"]",";",["T_WHITESPACE","\n  ",94],"}",["T_WHITESPACE","\n",95],"}",["T_WHITESPACE","\n\n",96],["T_DOC_COMMENT","\/**\n * Complete a batch process.\n *\n * Callback for batch_set().\n *\n * This callback may be specified in a batch to perform clean-up operations, or\n * to analyze the results of the batch operations.\n *\n * @param $success\n *   A boolean indicating whether the batch has completed successfully.\n * @param $results\n *   The value set in $context['results'] by callback_batch_operation().\n * @param $operations\n *   If $success is FALSE, contains the operations that remained unprocessed.\n *\/",98],["T_WHITESPACE","\n",112],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","callback_batch_finished",113],"(",["T_VARIABLE","$success",113],",",["T_WHITESPACE"," ",113],["T_VARIABLE","$results",113],",",["T_WHITESPACE"," ",113],["T_VARIABLE","$operations",113],")",["T_WHITESPACE"," ",113],"{",["T_WHITESPACE","\n  ",113],["T_IF","if",114],["T_WHITESPACE"," ",114],"(",["T_VARIABLE","$success",114],")",["T_WHITESPACE"," ",114],"{",["T_WHITESPACE","\n    ",114],["T_COMMENT","\/\/ Here we do something meaningful with the results.\n",115],["T_WHITESPACE","    ",116],["T_VARIABLE","$message",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],["T_STRING","t",116],"(",["T_CONSTANT_ENCAPSED_STRING","\"@count items were processed.\"",116],",",["T_WHITESPACE"," ",116],["T_ARRAY","array",116],"(",["T_WHITESPACE","\n      ",116],["T_CONSTANT_ENCAPSED_STRING","'@count'",117],["T_WHITESPACE"," ",117],["T_DOUBLE_ARROW","=>",117],["T_WHITESPACE"," ",117],["T_STRING","count",117],"(",["T_VARIABLE","$results",117],")",",",["T_WHITESPACE","\n      ",117],")",")",";",["T_WHITESPACE","\n    ",118],["T_VARIABLE","$list",119],["T_WHITESPACE"," ",119],"=",["T_WHITESPACE"," ",119],["T_ARRAY","array",119],"(",["T_WHITESPACE","\n      ",119],["T_CONSTANT_ENCAPSED_STRING","'#theme'",120],["T_WHITESPACE"," ",120],["T_DOUBLE_ARROW","=>",120],["T_WHITESPACE"," ",120],["T_CONSTANT_ENCAPSED_STRING","'item_list'",120],",",["T_WHITESPACE","\n      ",120],["T_CONSTANT_ENCAPSED_STRING","'#items'",121],["T_WHITESPACE"," ",121],["T_DOUBLE_ARROW","=>",121],["T_WHITESPACE"," ",121],["T_VARIABLE","$results",121],",",["T_WHITESPACE","\n    ",121],")",";",["T_WHITESPACE","\n    ",122],["T_VARIABLE","$message",123],["T_WHITESPACE"," ",123],["T_CONCAT_EQUAL",".=",123],["T_WHITESPACE"," ",123],["T_STRING","drupal_render",123],"(",["T_VARIABLE","$list",123],")",";",["T_WHITESPACE","\n    ",123],["T_STRING","drupal_set_message",124],"(",["T_VARIABLE","$message",124],")",";",["T_WHITESPACE","\n  ",124],"}",["T_WHITESPACE","\n  ",125],["T_ELSE","else",126],["T_WHITESPACE"," ",126],"{",["T_WHITESPACE","\n    ",126],["T_COMMENT","\/\/ An error occurred.\n",127],["T_WHITESPACE","    ",128],["T_COMMENT","\/\/ $operations contains the operations that remained unprocessed.\n",128],["T_WHITESPACE","    ",129],["T_VARIABLE","$error_operation",129],["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_STRING","reset",129],"(",["T_VARIABLE","$operations",129],")",";",["T_WHITESPACE","\n    ",129],["T_VARIABLE","$message",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_STRING","t",130],"(",["T_CONSTANT_ENCAPSED_STRING","'An error occurred while processing %error_operation with arguments: @arguments'",130],",",["T_WHITESPACE"," ",130],["T_ARRAY","array",130],"(",["T_WHITESPACE","\n      ",130],["T_CONSTANT_ENCAPSED_STRING","'%error_operation'",131],["T_WHITESPACE"," ",131],["T_DOUBLE_ARROW","=>",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$error_operation",131],"[",["T_LNUMBER","0",131],"]",",",["T_WHITESPACE","\n      ",131],["T_CONSTANT_ENCAPSED_STRING","'@arguments'",132],["T_WHITESPACE"," ",132],["T_DOUBLE_ARROW","=>",132],["T_WHITESPACE"," ",132],["T_STRING","print_r",132],"(",["T_VARIABLE","$error_operation",132],"[",["T_LNUMBER","1",132],"]",",",["T_WHITESPACE"," ",132],["T_STRING","TRUE",132],")",["T_WHITESPACE","\n    ",132],")",")",";",["T_WHITESPACE","\n    ",133],["T_STRING","drupal_set_message",134],"(",["T_VARIABLE","$message",134],",",["T_WHITESPACE"," ",134],["T_CONSTANT_ENCAPSED_STRING","'error'",134],")",";",["T_WHITESPACE","\n  ",134],"}",["T_WHITESPACE","\n",135],"}",["T_WHITESPACE","\n\n",136],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup callbacks\".\n *\/",138],["T_WHITESPACE","\n\n",140],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",142],["T_WHITESPACE","\n\n",145],["T_DOC_COMMENT","\/**\n * Alter the Ajax command data that is sent to the client.\n *\n * @param \\Drupal\\Core\\Ajax\\CommandInterface[] $data\n *   An array of all the rendered commands that will be sent to the client.\n *\/",147],["T_WHITESPACE","\n",152],["T_FUNCTION","function",153],["T_WHITESPACE"," ",153],["T_STRING","hook_ajax_render_alter",153],"(",["T_ARRAY","array",153],["T_WHITESPACE"," ",153],"&",["T_VARIABLE","$data",153],")",["T_WHITESPACE"," ",153],"{",["T_WHITESPACE","\n  ",153],["T_COMMENT","\/\/ Inject any new status messages into the content area.\n",154],["T_WHITESPACE","  ",155],["T_VARIABLE","$status_messages",155],["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_ARRAY","array",155],"(",["T_CONSTANT_ENCAPSED_STRING","'#type'",155],["T_WHITESPACE"," ",155],["T_DOUBLE_ARROW","=>",155],["T_WHITESPACE"," ",155],["T_CONSTANT_ENCAPSED_STRING","'status_messages'",155],")",";",["T_WHITESPACE","\n  ",155],["T_VARIABLE","$command",156],["T_WHITESPACE"," ",156],"=",["T_WHITESPACE"," ",156],["T_NEW","new",156],["T_WHITESPACE"," ",156],["T_NS_SEPARATOR","\\",156],["T_STRING","Drupal",156],["T_NS_SEPARATOR","\\",156],["T_STRING","Core",156],["T_NS_SEPARATOR","\\",156],["T_STRING","Ajax",156],["T_NS_SEPARATOR","\\",156],["T_STRING","PrependCommand",156],"(",["T_CONSTANT_ENCAPSED_STRING","'#block-system-main .content'",156],",",["T_WHITESPACE"," ",156],["T_NS_SEPARATOR","\\",156],["T_STRING","Drupal",156],["T_DOUBLE_COLON","::",156],["T_STRING","service",156],"(",["T_CONSTANT_ENCAPSED_STRING","'renderer'",156],")",["T_OBJECT_OPERATOR","->",156],["T_STRING","renderRoot",156],"(",["T_VARIABLE","$status_messages",156],")",")",";",["T_WHITESPACE","\n  ",156],["T_VARIABLE","$data",157],"[","]",["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_VARIABLE","$command",157],["T_OBJECT_OPERATOR","->",157],["T_STRING","render",157],"(",")",";",["T_WHITESPACE","\n",157],"}",["T_WHITESPACE","\n\n",158],["T_DOC_COMMENT","\/**\n * Perform alterations before a form is rendered.\n *\n * One popular use of this hook is to add form elements to the node form. When\n * altering a node form, the node entity can be retrieved by invoking\n * $form_state->getFormObject()->getEntity().\n *\n * Implementations are responsible for adding cache contexts\/tags\/max-age as\n * needed. See https:\/\/www.drupal.org\/developing\/api\/8\/cache.\n *\n * In addition to hook_form_alter(), which is called for all forms, there are\n * two more specific form hooks available. The first,\n * hook_form_BASE_FORM_ID_alter(), allows targeting of a form\/forms via a base\n * form (if one exists). The second, hook_form_FORM_ID_alter(), can be used to\n * target a specific form directly.\n *\n * The call order is as follows: all existing form alter functions are called\n * for module A, then all for module B, etc., followed by all for any base\n * theme(s), and finally for the theme itself. The module order is determined\n * by system weight, then by module name.\n *\n * Within each module, form alter hooks are called in the following order:\n * first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,\n * hook_form_FORM_ID_alter(). So, for each module, the more general hooks are\n * called first followed by the more specific.\n *\n * @param $form\n *   Nested array of form elements that comprise the form.\n * @param $form_state\n *   The current state of the form. The arguments that\n *   \\Drupal::formBuilder()->getForm() was originally called with are available\n *   in the array $form_state->getBuildInfo()['args'].\n * @param $form_id\n *   String representing the name of the form itself. Typically this is the\n *   name of the function that generated the form.\n *\n * @see hook_form_BASE_FORM_ID_alter()\n * @see hook_form_FORM_ID_alter()\n *\n * @ingroup form_api\n *\/",160],["T_WHITESPACE","\n",200],["T_FUNCTION","function",201],["T_WHITESPACE"," ",201],["T_STRING","hook_form_alter",201],"(","&",["T_VARIABLE","$form",201],",",["T_WHITESPACE"," ",201],["T_NS_SEPARATOR","\\",201],["T_STRING","Drupal",201],["T_NS_SEPARATOR","\\",201],["T_STRING","Core",201],["T_NS_SEPARATOR","\\",201],["T_STRING","Form",201],["T_NS_SEPARATOR","\\",201],["T_STRING","FormStateInterface",201],["T_WHITESPACE"," ",201],["T_VARIABLE","$form_state",201],",",["T_WHITESPACE"," ",201],["T_VARIABLE","$form_id",201],")",["T_WHITESPACE"," ",201],"{",["T_WHITESPACE","\n  ",201],["T_IF","if",202],["T_WHITESPACE"," ",202],"(",["T_ISSET","isset",202],"(",["T_VARIABLE","$form",202],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",202],"]",")",["T_WHITESPACE"," ",202],["T_BOOLEAN_AND","&&",202],["T_WHITESPACE"," ",202],["T_VARIABLE","$form",202],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",202],"]","[",["T_CONSTANT_ENCAPSED_STRING","'#value'",202],"]",["T_WHITESPACE"," ",202],".",["T_WHITESPACE"," ",202],["T_CONSTANT_ENCAPSED_STRING","'_node_settings'",202],["T_WHITESPACE"," ",202],["T_IS_EQUAL","==",202],["T_WHITESPACE"," ",202],["T_VARIABLE","$form_id",202],")",["T_WHITESPACE"," ",202],"{",["T_WHITESPACE","\n    ",202],["T_VARIABLE","$upload_enabled_types",203],["T_WHITESPACE"," ",203],"=",["T_WHITESPACE"," ",203],["T_NS_SEPARATOR","\\",203],["T_STRING","Drupal",203],["T_DOUBLE_COLON","::",203],["T_STRING","config",203],"(",["T_CONSTANT_ENCAPSED_STRING","'mymodule.settings'",203],")",["T_OBJECT_OPERATOR","->",203],["T_STRING","get",203],"(",["T_CONSTANT_ENCAPSED_STRING","'upload_enabled_types'",203],")",";",["T_WHITESPACE","\n    ",203],["T_VARIABLE","$form",204],"[",["T_CONSTANT_ENCAPSED_STRING","'workflow'",204],"]","[",["T_CONSTANT_ENCAPSED_STRING","'upload_'",204],["T_WHITESPACE"," ",204],".",["T_WHITESPACE"," ",204],["T_VARIABLE","$form",204],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",204],"]","[",["T_CONSTANT_ENCAPSED_STRING","'#value'",204],"]","]",["T_WHITESPACE"," ",204],"=",["T_WHITESPACE"," ",204],["T_ARRAY","array",204],"(",["T_WHITESPACE","\n      ",204],["T_CONSTANT_ENCAPSED_STRING","'#type'",205],["T_WHITESPACE"," ",205],["T_DOUBLE_ARROW","=>",205],["T_WHITESPACE"," ",205],["T_CONSTANT_ENCAPSED_STRING","'radios'",205],",",["T_WHITESPACE","\n      ",205],["T_CONSTANT_ENCAPSED_STRING","'#title'",206],["T_WHITESPACE"," ",206],["T_DOUBLE_ARROW","=>",206],["T_WHITESPACE"," ",206],["T_STRING","t",206],"(",["T_CONSTANT_ENCAPSED_STRING","'Attachments'",206],")",",",["T_WHITESPACE","\n      ",206],["T_CONSTANT_ENCAPSED_STRING","'#default_value'",207],["T_WHITESPACE"," ",207],["T_DOUBLE_ARROW","=>",207],["T_WHITESPACE"," ",207],["T_STRING","in_array",207],"(",["T_VARIABLE","$form",207],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",207],"]","[",["T_CONSTANT_ENCAPSED_STRING","'#value'",207],"]",",",["T_WHITESPACE"," ",207],["T_VARIABLE","$upload_enabled_types",207],")",["T_WHITESPACE"," ",207],"?",["T_WHITESPACE"," ",207],["T_LNUMBER","1",207],["T_WHITESPACE"," ",207],":",["T_WHITESPACE"," ",207],["T_LNUMBER","0",207],",",["T_WHITESPACE","\n      ",207],["T_CONSTANT_ENCAPSED_STRING","'#options'",208],["T_WHITESPACE"," ",208],["T_DOUBLE_ARROW","=>",208],["T_WHITESPACE"," ",208],["T_ARRAY","array",208],"(",["T_STRING","t",208],"(",["T_CONSTANT_ENCAPSED_STRING","'Disabled'",208],")",",",["T_WHITESPACE"," ",208],["T_STRING","t",208],"(",["T_CONSTANT_ENCAPSED_STRING","'Enabled'",208],")",")",",",["T_WHITESPACE","\n    ",208],")",";",["T_WHITESPACE","\n    ",209],["T_COMMENT","\/\/ Add a custom submit handler to save the array of types back to the config file.\n",210],["T_WHITESPACE","    ",211],["T_VARIABLE","$form",211],"[",["T_CONSTANT_ENCAPSED_STRING","'actions'",211],"]","[",["T_CONSTANT_ENCAPSED_STRING","'submit'",211],"]","[",["T_CONSTANT_ENCAPSED_STRING","'#submit'",211],"]","[","]",["T_WHITESPACE"," ",211],"=",["T_WHITESPACE"," ",211],["T_CONSTANT_ENCAPSED_STRING","'mymodule_upload_enabled_types_submit'",211],";",["T_WHITESPACE","\n  ",211],"}",["T_WHITESPACE","\n",212],"}",["T_WHITESPACE","\n\n",213],["T_DOC_COMMENT","\/**\n * Provide a form-specific alteration instead of the global hook_form_alter().\n *\n * Implementations are responsible for adding cache contexts\/tags\/max-age as\n * needed. See https:\/\/www.drupal.org\/developing\/api\/8\/cache.\n *\n * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,\n * rather than implementing hook_form_alter() and checking the form ID, or\n * using long switch statements to alter multiple forms.\n *\n * Form alter hooks are called in the following order: hook_form_alter(),\n * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See\n * hook_form_alter() for more details.\n *\n * @param $form\n *   Nested array of form elements that comprise the form.\n * @param $form_state\n *   The current state of the form. The arguments that\n *   \\Drupal::formBuilder()->getForm() was originally called with are available\n *   in the array $form_state->getBuildInfo()['args'].\n * @param $form_id\n *   String representing the name of the form itself. Typically this is the\n *   name of the function that generated the form.\n *\n * @see hook_form_alter()\n * @see hook_form_BASE_FORM_ID_alter()\n * @see \\Drupal\\Core\\Form\\FormBuilderInterface::prepareForm()\n *\n * @ingroup form_api\n *\/",215],["T_WHITESPACE","\n",244],["T_FUNCTION","function",245],["T_WHITESPACE"," ",245],["T_STRING","hook_form_FORM_ID_alter",245],"(","&",["T_VARIABLE","$form",245],",",["T_WHITESPACE"," ",245],["T_NS_SEPARATOR","\\",245],["T_STRING","Drupal",245],["T_NS_SEPARATOR","\\",245],["T_STRING","Core",245],["T_NS_SEPARATOR","\\",245],["T_STRING","Form",245],["T_NS_SEPARATOR","\\",245],["T_STRING","FormStateInterface",245],["T_WHITESPACE"," ",245],["T_VARIABLE","$form_state",245],",",["T_WHITESPACE"," ",245],["T_VARIABLE","$form_id",245],")",["T_WHITESPACE"," ",245],"{",["T_WHITESPACE","\n  ",245],["T_COMMENT","\/\/ Modification for the form with the given form ID goes here. For example, if\n",246],["T_WHITESPACE","  ",247],["T_COMMENT","\/\/ FORM_ID is \"user_register_form\" this code would run only on the user\n",247],["T_WHITESPACE","  ",248],["T_COMMENT","\/\/ registration form.\n",248],["T_WHITESPACE","\n  ",249],["T_COMMENT","\/\/ Add a checkbox to registration form about agreeing to terms of use.\n",250],["T_WHITESPACE","  ",251],["T_VARIABLE","$form",251],"[",["T_CONSTANT_ENCAPSED_STRING","'terms_of_use'",251],"]",["T_WHITESPACE"," ",251],"=",["T_WHITESPACE"," ",251],["T_ARRAY","array",251],"(",["T_WHITESPACE","\n    ",251],["T_CONSTANT_ENCAPSED_STRING","'#type'",252],["T_WHITESPACE"," ",252],["T_DOUBLE_ARROW","=>",252],["T_WHITESPACE"," ",252],["T_CONSTANT_ENCAPSED_STRING","'checkbox'",252],",",["T_WHITESPACE","\n    ",252],["T_CONSTANT_ENCAPSED_STRING","'#title'",253],["T_WHITESPACE"," ",253],["T_DOUBLE_ARROW","=>",253],["T_WHITESPACE"," ",253],["T_STRING","t",253],"(",["T_CONSTANT_ENCAPSED_STRING","\"I agree with the website's terms and conditions.\"",253],")",",",["T_WHITESPACE","\n    ",253],["T_CONSTANT_ENCAPSED_STRING","'#required'",254],["T_WHITESPACE"," ",254],["T_DOUBLE_ARROW","=>",254],["T_WHITESPACE"," ",254],["T_STRING","TRUE",254],",",["T_WHITESPACE","\n  ",254],")",";",["T_WHITESPACE","\n",255],"}",["T_WHITESPACE","\n\n",256],["T_DOC_COMMENT","\/**\n * Provide a form-specific alteration for shared ('base') forms.\n *\n * Implementations are responsible for adding cache contexts\/tags\/max-age as\n * needed. See https:\/\/www.drupal.org\/developing\/api\/8\/cache.\n *\n * By default, when \\Drupal::formBuilder()->getForm() is called, Drupal looks\n * for a function with the same name as the form ID, and uses that function to\n * build the form. In contrast, base forms allow multiple form IDs to be mapped\n * to a single base (also called 'factory') form function.\n *\n * Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific\n * base form, rather than implementing hook_form_alter() and checking for\n * conditions that would identify the shared form constructor.\n *\n * To identify the base form ID for a particular form (or to determine whether\n * one exists) check the $form_state. The base form ID is stored under\n * $form_state->getBuildInfo()['base_form_id'].\n *\n * Form alter hooks are called in the following order: hook_form_alter(),\n * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See\n * hook_form_alter() for more details.\n *\n * @param $form\n *   Nested array of form elements that comprise the form.\n * @param $form_state\n *   The current state of the form.\n * @param $form_id\n *   String representing the name of the form itself. Typically this is the\n *   name of the function that generated the form.\n *\n * @see hook_form_alter()\n * @see hook_form_FORM_ID_alter()\n * @see \\Drupal\\Core\\Form\\FormBuilderInterface::prepareForm()\n *\n * @ingroup form_api\n *\/",258],["T_WHITESPACE","\n",294],["T_FUNCTION","function",295],["T_WHITESPACE"," ",295],["T_STRING","hook_form_BASE_FORM_ID_alter",295],"(","&",["T_VARIABLE","$form",295],",",["T_WHITESPACE"," ",295],["T_NS_SEPARATOR","\\",295],["T_STRING","Drupal",295],["T_NS_SEPARATOR","\\",295],["T_STRING","Core",295],["T_NS_SEPARATOR","\\",295],["T_STRING","Form",295],["T_NS_SEPARATOR","\\",295],["T_STRING","FormStateInterface",295],["T_WHITESPACE"," ",295],["T_VARIABLE","$form_state",295],",",["T_WHITESPACE"," ",295],["T_VARIABLE","$form_id",295],")",["T_WHITESPACE"," ",295],"{",["T_WHITESPACE","\n  ",295],["T_COMMENT","\/\/ Modification for the form with the given BASE_FORM_ID goes here. For\n",296],["T_WHITESPACE","  ",297],["T_COMMENT","\/\/ example, if BASE_FORM_ID is \"node_form\", this code would run on every\n",297],["T_WHITESPACE","  ",298],["T_COMMENT","\/\/ node form, regardless of node type.\n",298],["T_WHITESPACE","\n  ",299],["T_COMMENT","\/\/ Add a checkbox to the node form about agreeing to terms of use.\n",300],["T_WHITESPACE","  ",301],["T_VARIABLE","$form",301],"[",["T_CONSTANT_ENCAPSED_STRING","'terms_of_use'",301],"]",["T_WHITESPACE"," ",301],"=",["T_WHITESPACE"," ",301],["T_ARRAY","array",301],"(",["T_WHITESPACE","\n    ",301],["T_CONSTANT_ENCAPSED_STRING","'#type'",302],["T_WHITESPACE"," ",302],["T_DOUBLE_ARROW","=>",302],["T_WHITESPACE"," ",302],["T_CONSTANT_ENCAPSED_STRING","'checkbox'",302],",",["T_WHITESPACE","\n    ",302],["T_CONSTANT_ENCAPSED_STRING","'#title'",303],["T_WHITESPACE"," ",303],["T_DOUBLE_ARROW","=>",303],["T_WHITESPACE"," ",303],["T_STRING","t",303],"(",["T_CONSTANT_ENCAPSED_STRING","\"I agree with the website's terms and conditions.\"",303],")",",",["T_WHITESPACE","\n    ",303],["T_CONSTANT_ENCAPSED_STRING","'#required'",304],["T_WHITESPACE"," ",304],["T_DOUBLE_ARROW","=>",304],["T_WHITESPACE"," ",304],["T_STRING","TRUE",304],",",["T_WHITESPACE","\n  ",304],")",";",["T_WHITESPACE","\n",305],"}",["T_WHITESPACE","\n\n",306],["T_DOC_COMMENT","\/**\n * Alter batch information before a batch is processed.\n *\n * Called by batch_process() to allow modules to alter a batch before it is\n * processed.\n *\n * @param $batch\n *   The associative array of batch information. See batch_set() for details on\n *   what this could contain.\n *\n * @see batch_set()\n * @see batch_process()\n *\n * @ingroup batch\n *\/",308],["T_WHITESPACE","\n",322],["T_FUNCTION","function",323],["T_WHITESPACE"," ",323],["T_STRING","hook_batch_alter",323],"(","&",["T_VARIABLE","$batch",323],")",["T_WHITESPACE"," ",323],"{",["T_WHITESPACE","\n",323],"}",["T_WHITESPACE","\n\n",324],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",326],["T_WHITESPACE","\n",328]]