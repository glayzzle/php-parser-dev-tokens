[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Form",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for validating form submissions.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","FormValidatorInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Executes custom validation handlers for a given form.\n   *\n   * Button-specific handlers are checked first. If none exist, the function\n   * falls back to form-level handlers.\n   *\n   * @param $form\n   *   An associative array containing the structure of the form.\n   * @param $form_state\n   *   The current state of the form. If the user submitted the form by clicking\n   *   a button with custom handler functions defined, those handlers will be\n   *   stored here.\n   *\/",10],["T_WHITESPACE","\n  ",22],["T_PUBLIC","public",23],["T_WHITESPACE"," ",23],["T_FUNCTION","function",23],["T_WHITESPACE"," ",23],["T_STRING","executeValidateHandlers",23],"(","&",["T_VARIABLE","$form",23],",",["T_WHITESPACE"," ",23],["T_STRING","FormStateInterface",23],["T_WHITESPACE"," ",23],"&",["T_VARIABLE","$form_state",23],")",";",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Validates user-submitted form data in the $form_state.\n   *\n   * @param $form_id\n   *   A unique string identifying the form for validation, submission,\n   *   theming, and hook_form_alter functions.\n   * @param $form\n   *   An associative array containing the structure of the form, which is\n   *   passed by reference. Form validation handlers are able to alter the form\n   *   structure (like #process and #after_build callbacks during form building)\n   *   in case of a validation error. If a validation handler alters the form\n   *   structure, it is responsible for validating the values of changed form\n   *   elements in $form_state->getValues() to prevent form submit handlers from\n   *   receiving unvalidated values.\n   * @param $form_state\n   *   The current state of the form. The current user-submitted data is stored\n   *   in $form_state->getValues(), though form validation functions are passed\n   *   an explicit copy of the values for the sake of simplicity. Validation\n   *   handlers can also use $form_state to pass information on to submit\n   *   handlers. For example:\n   *     $form_state->set('data_for_submission', $data);\n   *   This technique is useful when validation requires file parsing,\n   *   web service requests, or other expensive requests that should\n   *   not be repeated in the submission step.\n   *\/",25],["T_WHITESPACE","\n  ",49],["T_PUBLIC","public",50],["T_WHITESPACE"," ",50],["T_FUNCTION","function",50],["T_WHITESPACE"," ",50],["T_STRING","validateForm",50],"(",["T_VARIABLE","$form_id",50],",",["T_WHITESPACE"," ",50],"&",["T_VARIABLE","$form",50],",",["T_WHITESPACE"," ",50],["T_STRING","FormStateInterface",50],["T_WHITESPACE"," ",50],"&",["T_VARIABLE","$form_state",50],")",";",["T_WHITESPACE","\n\n  ",50],["T_DOC_COMMENT","\/**\n   * Sets a form_token error on the given form state.\n   *\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return $this\n   *\/",52],["T_WHITESPACE","\n  ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","setInvalidTokenError",60],"(",["T_STRING","FormStateInterface",60],["T_WHITESPACE"," ",60],["T_VARIABLE","$form_state",60],")",";",["T_WHITESPACE","\n\n",60],"}",["T_WHITESPACE","\n",62]]