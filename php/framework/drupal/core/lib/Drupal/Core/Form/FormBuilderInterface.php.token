[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Form",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for form building and processing.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","FormBuilderInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Request key for AJAX forms that submit to the form's original route.\n   *\n   * This constant is distinct from a \"drupal_ajax\" value for\n   * \\Drupal\\Core\\EventSubscriber\\MainContentViewSubscriber::WRAPPER_FORMAT,\n   * because that one is set for all AJAX submissions, including ones with\n   * dedicated routes for which self::buildForm() should not exit early via a\n   * \\Drupal\\Core\\Form\\FormAjaxException.\n   *\n   * @todo Re-evaluate the need for this constant after\n   *   https:\/\/www.drupal.org\/node\/2502785 and\n   *   https:\/\/www.drupal.org\/node\/2503429.\n   *\/",10],["T_WHITESPACE","\n  ",22],["T_CONST","const",23],["T_WHITESPACE"," ",23],["T_STRING","AJAX_FORM_REQUEST",23],["T_WHITESPACE"," ",23],"=",["T_WHITESPACE"," ",23],["T_CONSTANT_ENCAPSED_STRING","'ajax_form'",23],";",["T_WHITESPACE","\n\n  ",23],["T_DOC_COMMENT","\/**\n   * Determines the ID of a form.\n   *\n   * @param \\Drupal\\Core\\Form\\FormInterface|string $form_arg\n   *   The value is identical to that of self::getForm()'s $form_arg argument.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return string\n   *   The unique string identifying the desired form.\n   *\/",25],["T_WHITESPACE","\n  ",35],["T_PUBLIC","public",36],["T_WHITESPACE"," ",36],["T_FUNCTION","function",36],["T_WHITESPACE"," ",36],["T_STRING","getFormId",36],"(",["T_VARIABLE","$form_arg",36],",",["T_WHITESPACE"," ",36],["T_STRING","FormStateInterface",36],["T_WHITESPACE"," ",36],"&",["T_VARIABLE","$form_state",36],")",";",["T_WHITESPACE","\n\n  ",36],["T_DOC_COMMENT","\/**\n   * Gets a renderable form array.\n   *\n   * This function should be used instead of self::buildForm() when $form_state\n   * is not needed (i.e., when initially rendering the form) and is often\n   * used as a menu callback.\n   *\n   * @param \\Drupal\\Core\\Form\\FormInterface|string $form_arg\n   *   The value must be one of the following:\n   *   - The name of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   *   - An instance of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   * @param ...\n   *   Any additional arguments are passed on to the functions called by\n   *   \\Drupal::formBuilder()->getForm(), including the unique form constructor\n   *   function. For example, the node_edit form requires that a node object is\n   *   passed in here when it is called. These are available to implementations\n   *   of hook_form_alter() and hook_form_FORM_ID_alter() as the array\n   *   $form_state->getBuildInfo()['args'].\n   *\n   * @return array\n   *   The form array.\n   *\n   * @see \\Drupal\\Core\\Form\\FormBuilderInterface::buildForm()\n   *\/",38],["T_WHITESPACE","\n  ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","getForm",62],"(",["T_VARIABLE","$form_arg",62],")",";",["T_WHITESPACE","\n\n  ",62],["T_DOC_COMMENT","\/**\n   * Builds and processes a form for a given form ID.\n   *\n   * The form may also be retrieved from the cache if the form was built in a\n   * previous page load. The form is then passed on for processing, validation,\n   * and submission if there is proper input.\n   *\n   * @param \\Drupal\\Core\\Form\\FormInterface|string $form_id\n   *   The value must be one of the following:\n   *   - The name of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   *   - An instance of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return array\n   *   The rendered form. This function may also perform a redirect and hence\n   *   may not return at all depending upon the $form_state flags that were set.\n   *\n   * @throws \\Drupal\\Core\\Form\\FormAjaxException\n   *   Thrown when a form is triggered via an AJAX submission. It will be\n   *   handled by \\Drupal\\Core\\Form\\EventSubscriber\\FormAjaxSubscriber.\n   * @throws \\Drupal\\Core\\Form\\EnforcedResponseException\n   *   Thrown when a form builder returns a response directly, usually a\n   *   \\Symfony\\Component\\HttpFoundation\\RedirectResponse. It will be handled by\n   *   \\Drupal\\Core\\EventSubscriber\\EnforcedFormResponseSubscriber.\n   *\n   * @see self::redirectForm()\n   *\/",64],["T_WHITESPACE","\n  ",91],["T_PUBLIC","public",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","buildForm",92],"(",["T_VARIABLE","$form_id",92],",",["T_WHITESPACE"," ",92],["T_STRING","FormStateInterface",92],["T_WHITESPACE"," ",92],"&",["T_VARIABLE","$form_state",92],")",";",["T_WHITESPACE","\n\n  ",92],["T_DOC_COMMENT","\/**\n   * Constructs a new $form from the information in $form_state.\n   *\n   * This is the key function for making multi-step forms advance from step to\n   * step. It is called by self::processForm() when all user input processing,\n   * including calling validation and submission handlers, for the request is\n   * finished. If a validate or submit handler set $form_state->isRebuilding()\n   * to TRUE, and if other conditions don't preempt a rebuild from happening,\n   * then this function is called to generate a new $form, the next step in the\n   * form workflow, to be returned for rendering.\n   *\n   * Ajax form submissions are almost always multi-step workflows, so that is\n   * one common use-case during which form rebuilding occurs.\n   *\n   * @param string $form_id\n   *   The unique string identifying the desired form. If a function with that\n   *   name exists, it is called to build the form array.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   * @param array|null $old_form\n   *   (optional) A previously built $form. Used to retain the #build_id and\n   *   #action properties in Ajax callbacks and similar partial form rebuilds.\n   *   The only properties copied from $old_form are the ones which both exist\n   *   in $old_form and for which $form_state->getRebuildInfo()['copy'][PROPERTY]\n   *   is TRUE. If $old_form is not passed, the entire $form is rebuilt freshly.\n   *   'rebuild_info' needs to be a separate top-level property next to\n   *   'build_info', since the contained data must not be cached.\n   *\n   * @return array\n   *   The newly built form.\n   *\n   * @see self::processForm()\n   *\/",94],["T_WHITESPACE","\n  ",126],["T_PUBLIC","public",127],["T_WHITESPACE"," ",127],["T_FUNCTION","function",127],["T_WHITESPACE"," ",127],["T_STRING","rebuildForm",127],"(",["T_VARIABLE","$form_id",127],",",["T_WHITESPACE"," ",127],["T_STRING","FormStateInterface",127],["T_WHITESPACE"," ",127],"&",["T_VARIABLE","$form_state",127],",",["T_WHITESPACE"," ",127],["T_VARIABLE","$old_form",127],["T_WHITESPACE"," ",127],"=",["T_WHITESPACE"," ",127],["T_STRING","NULL",127],")",";",["T_WHITESPACE","\n\n  ",127],["T_DOC_COMMENT","\/**\n   * Retrieves, populates, and processes a form.\n   *\n   * This function allows you to supply values for form elements and submit a\n   * form for processing. Compare to self::getForm(), which also builds and\n   * processes a form, but does not allow you to supply values.\n   *\n   * There is no return value, but you can check to see if there are errors\n   * by calling $form_state->getErrors().\n   *\n   * @param \\Drupal\\Core\\Form\\FormInterface|string $form_arg\n   *   The value must be one of the following:\n   *   - The name of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   *   - An instance of a class that implements \\Drupal\\Core\\Form\\FormInterface.\n   * @param $form_state\n   *   The current state of the form. Most important is the\n   *   $form_state->getValues() collection, a tree of data used to simulate the\n   *   incoming \\Drupal::request()->request information from a user's form\n   *   submission. If a key is not filled in $form_state->getValues(), then the\n   *   default value of the respective element is used. To submit an unchecked\n   *   checkbox or other control that browsers submit by not having a\n   *   \\Drupal::request()->request entry, include the key, but set the value to\n   *   NULL.\n   * @param ...\n   *   Any additional arguments are passed on to the functions called by\n   *   self::submitForm(), including the unique form constructor function.\n   *   For example, the node_edit form requires that a node object be passed\n   *   in here when it is called. Arguments that need to be passed by reference\n   *   should not be included here, but rather placed directly in the\n   *   $form_state build info array so that the reference can be preserved. For\n   *   example, a form builder function with the following signature:\n   *   @code\n   *   function mymodule_form($form, FormStateInterface &$form_state, &$object) {\n   *   }\n   *   @endcode\n   *   would be called via self::submitForm() as follows:\n   *   @code\n   *   $form_state->setValues($my_form_values);\n   *   $form_state->addBuildInfo('args', [&$object]);\n   *   \\Drupal::formBuilder()->submitForm('mymodule_form', $form_state);\n   *   @endcode\n   * For example:\n   * @code\n   * \/\/ register a new user\n   * $form_state = new FormState();\n   * $values['name'] = 'robo-user';\n   * $values['mail'] = 'robouser@example.com';\n   * $values['pass']['pass1'] = 'password';\n   * $values['pass']['pass2'] = 'password';\n   * $values['op'] = t('Create new account');\n   * $form_state->setValues($values);\n   * \\Drupal::formBuilder()->submitForm('user_register_form', $form_state);\n   * @endcode\n   *\/",129],["T_WHITESPACE","\n  ",182],["T_PUBLIC","public",183],["T_WHITESPACE"," ",183],["T_FUNCTION","function",183],["T_WHITESPACE"," ",183],["T_STRING","submitForm",183],"(",["T_VARIABLE","$form_arg",183],",",["T_WHITESPACE"," ",183],["T_STRING","FormStateInterface",183],["T_WHITESPACE"," ",183],"&",["T_VARIABLE","$form_state",183],")",";",["T_WHITESPACE","\n\n  ",183],["T_DOC_COMMENT","\/**\n   * Retrieves the structured array that defines a given form.\n   *\n   * @param string $form_id\n   *   The unique string identifying the desired form. If a function\n   *   with that name exists, it is called to build the form array.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form, including the additional arguments to\n   *   self::getForm() or self::submitForm() in the 'args' component of the\n   *   array.\n   *\n   * @return mixed|\\Symfony\\Component\\HttpFoundation\\Response\n   *\/",185],["T_WHITESPACE","\n  ",197],["T_PUBLIC","public",198],["T_WHITESPACE"," ",198],["T_FUNCTION","function",198],["T_WHITESPACE"," ",198],["T_STRING","retrieveForm",198],"(",["T_VARIABLE","$form_id",198],",",["T_WHITESPACE"," ",198],["T_STRING","FormStateInterface",198],["T_WHITESPACE"," ",198],"&",["T_VARIABLE","$form_state",198],")",";",["T_WHITESPACE","\n\n  ",198],["T_DOC_COMMENT","\/**\n   * Processes a form submission.\n   *\n   * This function is the heart of form API. The form gets built, validated and\n   * in appropriate cases, submitted and rebuilt.\n   *\n   * @param string $form_id\n   *   The unique string identifying the current form.\n   * @param array $form\n   *   An associative array containing the structure of the form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form. This includes the current persistent\n   *   storage data for the form, and any data passed along by earlier steps\n   *   when displaying a multi-step form. Additional information, like the\n   *   sanitized \\Drupal::request()->request data, is also accumulated here.\n   *\n   * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse|null\n   *\/",200],["T_WHITESPACE","\n  ",217],["T_PUBLIC","public",218],["T_WHITESPACE"," ",218],["T_FUNCTION","function",218],["T_WHITESPACE"," ",218],["T_STRING","processForm",218],"(",["T_VARIABLE","$form_id",218],",",["T_WHITESPACE"," ",218],"&",["T_VARIABLE","$form",218],",",["T_WHITESPACE"," ",218],["T_STRING","FormStateInterface",218],["T_WHITESPACE"," ",218],"&",["T_VARIABLE","$form_state",218],")",";",["T_WHITESPACE","\n\n  ",218],["T_DOC_COMMENT","\/**\n   * Prepares a structured form array.\n   *\n   * Adds required elements, executes any hook_form_alter functions, and\n   * optionally inserts a validation token to prevent tampering.\n   *\n   * @param string $form_id\n   *   A unique string identifying the form for validation, submission,\n   *   theming, and hook_form_alter functions.\n   * @param array $form\n   *   An associative array containing the structure of the form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form. Passed in here so that hook_form_alter()\n   *   calls can use it, as well.\n   *\/",220],["T_WHITESPACE","\n  ",234],["T_PUBLIC","public",235],["T_WHITESPACE"," ",235],["T_FUNCTION","function",235],["T_WHITESPACE"," ",235],["T_STRING","prepareForm",235],"(",["T_VARIABLE","$form_id",235],",",["T_WHITESPACE"," ",235],"&",["T_VARIABLE","$form",235],",",["T_WHITESPACE"," ",235],["T_STRING","FormStateInterface",235],["T_WHITESPACE"," ",235],"&",["T_VARIABLE","$form_state",235],")",";",["T_WHITESPACE","\n\n  ",235],["T_DOC_COMMENT","\/**\n   * Builds and processes all elements in the structured form array.\n   *\n   * Adds any required properties to each element, maps the incoming input data\n   * to the proper elements, and executes any #process handlers attached to a\n   * specific element.\n   *\n   * This is one of the three primary functions that recursively iterates a form\n   * array. This one does it for completing the form building process. The other\n   * two are self::doValidateForm() (invoked via self::validateForm() and used\n   * to invoke validation logic for each element) and drupal_render() (for\n   * rendering each element). Each of these three pipelines provides ample\n   * opportunity for modules to customize what happens. For example, during this\n   * function's life cycle, the following functions get called for each element:\n   * - $element['#value_callback']: A callable that implements how user input is\n   *   mapped to an element's #value property. This defaults to a function named\n   *   'form_type_TYPE_value' where TYPE is $element['#type'].\n   * - $element['#process']: An array of functions called after user input has\n   *   been mapped to the element's #value property. These functions can be used\n   *   to dynamically add child elements: for example, for the 'date' element\n   *   type, one of the functions in this array is form_process_datetime(),\n   *   which adds the individual 'date', and 'time'. child elements. These\n   *   functions can also be used to set additional properties or implement\n   *   special logic other than adding child elements: for example, for the\n   *   'details' element type, one of the functions in this array is\n   *   form_process_details(), which adds the attributes and JavaScript needed\n   *   to make the details work in older browsers. The #process functions are\n   *   called in preorder traversal, meaning they are called for the parent\n   *   element first, then for the child elements.\n   * - $element['#after_build']: An array of callables called after\n   *   self::doBuildForm() is done with its processing of the element. These are\n   *   called in postorder traversal, meaning they are called for the child\n   *   elements first, then for the parent element.\n   * There are similar properties containing callback functions invoked by\n   * self::doValidateForm() and drupal_render(), appropriate for those\n   * operations.\n   *\n   * Developers are strongly encouraged to integrate the functionality needed by\n   * their form or module within one of these three pipelines, using the\n   * appropriate callback property, rather than implementing their own recursive\n   * traversal of a form array. This facilitates proper integration between\n   * multiple modules. For example, module developers are familiar with the\n   * relative order in which hook_form_alter() implementations and #process\n   * functions run. A custom traversal function that affects the building of a\n   * form is likely to not integrate with hook_form_alter() and #process in the\n   * expected way. Also, deep recursion within PHP is both slow and memory\n   * intensive, so it is best to minimize how often it's done.\n   *\n   * As stated above, each element's #process functions are executed after its\n   * #value has been set. This enables those functions to execute conditional\n   * logic based on the current value. However, all of self::doBuildForm() runs\n   * before self::validateForm() is called, so during #process function\n   * execution, the element's #value has not yet been validated, so any code\n   * that requires validated values must reside within a submit handler.\n   *\n   * As a security measure, user input is used for an element's #value only if\n   * the element exists within $form, is not disabled (as per the #disabled\n   * property), and can be accessed (as per the #access property, except that\n   * forms submitted using self::submitForm() bypass #access restrictions). When\n   * user input is ignored due to #disabled and #access restrictions, the\n   * element's default value is used.\n   *\n   * Because of the preorder traversal, where #process functions of an element\n   * run before user input for its child elements is processed, and because of\n   * the Form API security of user input processing with respect to #access and\n   * #disabled described above, this generally means that #process functions\n   * should not use an element's (unvalidated) #value to affect the #disabled or\n   * #access of child elements. Use-cases where a developer may be tempted to\n   * implement such conditional logic usually fall into one of two categories:\n   * - Where user input from the current submission must affect the structure of\n   *   a form, including properties like #access and #disabled that affect how\n   *   the next submission needs to be processed, a multi-step workflow is\n   *   needed. This is most commonly implemented with a submit handler setting\n   *   persistent data within $form_state based on *validated* values in\n   *   $form_state->getValues() and checking $form_state->isRebuilding(). The\n   *   form building functions must then be implemented to use the $form_state\n   *   to rebuild the form with the structure appropriate for the new state.\n   * - Where user input must affect the rendering of the form without affecting\n   *   its structure, the necessary conditional rendering logic should reside\n   *   within functions that run during the rendering phase (#pre_render,\n   *   #theme, #theme_wrappers, and #post_render).\n   *\n   * @param string $form_id\n   *   A unique string identifying the form for validation, submission,\n   *   theming, and hook_form_alter functions.\n   * @param array $element\n   *   An associative array containing the structure of the current element.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form. In this context, it is used to accumulate\n   *   information about which button was clicked when the form was submitted,\n   *   as well as the sanitized \\Drupal::request()->request data.\n   *\n   * @return array\n   *\/",237],["T_WHITESPACE","\n  ",330],["T_PUBLIC","public",331],["T_WHITESPACE"," ",331],["T_FUNCTION","function",331],["T_WHITESPACE"," ",331],["T_STRING","doBuildForm",331],"(",["T_VARIABLE","$form_id",331],",",["T_WHITESPACE"," ",331],"&",["T_VARIABLE","$element",331],",",["T_WHITESPACE"," ",331],["T_STRING","FormStateInterface",331],["T_WHITESPACE"," ",331],"&",["T_VARIABLE","$form_state",331],")",";",["T_WHITESPACE","\n\n",331],"}",["T_WHITESPACE","\n",333]]