[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Form",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Url",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Symfony",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Component",6],["T_NS_SEPARATOR","\\",6],["T_STRING","HttpFoundation",6],["T_NS_SEPARATOR","\\",6],["T_STRING","Response",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Provides an interface for an object containing the current state of a form.\n *\n * This is passed to all form related code so that the caller can use it to\n * examine what in the form changed when the form submission process is\n * complete. Furthermore, it may be used to store information related to the\n * processed data in the form, which will persist across page requests when the\n * 'cache' or 'rebuild' flag is set. See\n * \\Drupal\\Core\\Form\\FormState::$internalStorage for documentation of the\n * available flags.\n *\n * @see \\Drupal\\Core\\Form\\FormBuilderInterface\n * @see \\Drupal\\Core\\Form\\FormValidatorInterface\n * @see \\Drupal\\Core\\Form\\FormSubmitterInterface\n * @ingroup form_api\n *\/",8],["T_WHITESPACE","\n",23],["T_INTERFACE","interface",24],["T_WHITESPACE"," ",24],["T_STRING","FormStateInterface",24],["T_WHITESPACE"," ",24],"{",["T_WHITESPACE","\n\n  ",24],["T_DOC_COMMENT","\/**\n   * Returns a reference to the complete form array.\n   *\n   * @return array\n   *   The complete form array.\n   *\/",26],["T_WHITESPACE","\n  ",31],["T_PUBLIC","public",32],["T_WHITESPACE"," ",32],["T_FUNCTION","function",32],["T_WHITESPACE"," ",32],"&",["T_STRING","getCompleteForm",32],"(",")",";",["T_WHITESPACE","\n\n  ",32],["T_DOC_COMMENT","\/**\n   * Stores the complete form array.\n   *\n   * @param array $complete_form\n   *   The complete form array.\n   *\n   * @return $this\n   *\/",34],["T_WHITESPACE","\n  ",41],["T_PUBLIC","public",42],["T_WHITESPACE"," ",42],["T_FUNCTION","function",42],["T_WHITESPACE"," ",42],["T_STRING","setCompleteForm",42],"(",["T_ARRAY","array",42],["T_WHITESPACE"," ",42],"&",["T_VARIABLE","$complete_form",42],")",";",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Ensures an include file is loaded whenever the form is processed.\n   *\n   * Example:\n   * @code\n   *   \/\/ Load node.admin.inc from Node module.\n   *   $form_state->loadInclude('node', 'inc', 'node.admin');\n   * @endcode\n   *\n   * Use this function instead of module_load_include() from inside a form\n   * constructor or any form processing logic as it ensures that the include file\n   * is loaded whenever the form is processed. In contrast to using\n   * module_load_include() directly, this method makes sure the include file is\n   * correctly loaded also if the form is cached.\n   *\n   * @param string $module\n   *   The module to which the include file belongs.\n   * @param string $type\n   *   The include file's type (file extension).\n   * @param string|null $name\n   *   (optional) The base file name (without the $type extension). If omitted,\n   *   $module is used; i.e., resulting in \"$module.$type\" by default.\n   *\n   * @return string|false\n   *   The filepath of the loaded include file, or FALSE if the include file was\n   *   not found or has been loaded already.\n   *\n   * @see module_load_include()\n   *\/",44],["T_WHITESPACE","\n  ",72],["T_PUBLIC","public",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","loadInclude",73],"(",["T_VARIABLE","$module",73],",",["T_WHITESPACE"," ",73],["T_VARIABLE","$type",73],",",["T_WHITESPACE"," ",73],["T_VARIABLE","$name",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_STRING","NULL",73],")",";",["T_WHITESPACE","\n\n  ",73],["T_DOC_COMMENT","\/**\n   * Returns an array representation of the cacheable portion of the form state.\n   *\n   * @return array\n   *   The cacheable portion of the form state.\n   *\/",75],["T_WHITESPACE","\n  ",80],["T_PUBLIC","public",81],["T_WHITESPACE"," ",81],["T_FUNCTION","function",81],["T_WHITESPACE"," ",81],["T_STRING","getCacheableArray",81],"(",")",";",["T_WHITESPACE","\n\n  ",81],["T_DOC_COMMENT","\/**\n   * Sets the value of the form state.\n   *\n   * @param array $form_state_additions\n   *   An array of values to add to the form state.\n   *\n   * @return $this\n   *\/",83],["T_WHITESPACE","\n  ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","setFormState",91],"(",["T_ARRAY","array",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$form_state_additions",91],")",";",["T_WHITESPACE","\n\n  ",91],["T_DOC_COMMENT","\/**\n   * Sets a response for this form.\n   *\n   * If a response is set, it will be used during processing and returned\n   * directly. The form will not be rebuilt or redirected.\n   *\n   * @param \\Symfony\\Component\\HttpFoundation\\Response $response\n   *   The response to return.\n   *\n   * @return $this\n   *\/",93],["T_WHITESPACE","\n  ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","setResponse",104],"(",["T_STRING","Response",104],["T_WHITESPACE"," ",104],["T_VARIABLE","$response",104],")",";",["T_WHITESPACE","\n\n  ",104],["T_DOC_COMMENT","\/**\n   * Gets a response for this form.\n   *\n   * If a response is set, it will be used during processing and returned\n   * directly. The form will not be rebuilt or redirected.\n   *\n   * @return \\Symfony\\Component\\HttpFoundation\\Response|null\n   *   The response to return, or NULL.\n   *\/",106],["T_WHITESPACE","\n  ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","getResponse",115],"(",")",";",["T_WHITESPACE","\n\n  ",115],["T_DOC_COMMENT","\/**\n   * Sets the redirect for the form.\n   *\n   * @param string $route_name\n   *   The name of the route\n   * @param array $route_parameters\n   *   (optional) An associative array of parameter names and values.\n   * @param array $options\n   *   (optional) An associative array of additional options. See\n   *   \\Drupal\\Core\\Url for the available keys.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormSubmitterInterface::redirectForm()\n   *\/",117],["T_WHITESPACE","\n  ",131],["T_PUBLIC","public",132],["T_WHITESPACE"," ",132],["T_FUNCTION","function",132],["T_WHITESPACE"," ",132],["T_STRING","setRedirect",132],"(",["T_VARIABLE","$route_name",132],",",["T_WHITESPACE"," ",132],["T_ARRAY","array",132],["T_WHITESPACE"," ",132],["T_VARIABLE","$route_parameters",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_ARRAY","array",132],"(",")",",",["T_WHITESPACE"," ",132],["T_ARRAY","array",132],["T_WHITESPACE"," ",132],["T_VARIABLE","$options",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_ARRAY","array",132],"(",")",")",";",["T_WHITESPACE","\n\n  ",132],["T_DOC_COMMENT","\/**\n   * Sets the redirect URL for the form.\n   *\n   * @param \\Drupal\\Core\\Url $url\n   *   The URL to redirect to.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormSubmitterInterface::redirectForm()\n   *\/",134],["T_WHITESPACE","\n  ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","setRedirectUrl",144],"(",["T_STRING","Url",144],["T_WHITESPACE"," ",144],["T_VARIABLE","$url",144],")",";",["T_WHITESPACE","\n\n  ",144],["T_DOC_COMMENT","\/**\n   * Gets the value to use for redirecting after the form has been executed.\n   *\n   * @see \\Drupal\\Core\\Form\\FormSubmitterInterface::redirectForm()\n   *\n   * @return mixed\n   *   The value will be one of the following:\n   *   - A fully prepared \\Symfony\\Component\\HttpFoundation\\RedirectResponse.\n   *   - An instance of \\Drupal\\Core\\Url to use for the redirect.\n   *   - NULL, to signify that no redirect was specified and that the current\n   *     path should be used for the redirect.\n   *   - FALSE, to signify that no redirect should take place.\n   *\/",146],["T_WHITESPACE","\n  ",158],["T_PUBLIC","public",159],["T_WHITESPACE"," ",159],["T_FUNCTION","function",159],["T_WHITESPACE"," ",159],["T_STRING","getRedirect",159],"(",")",";",["T_WHITESPACE","\n\n  ",159],["T_DOC_COMMENT","\/**\n   * Sets the entire set of arbitrary data.\n   *\n   * @param array $storage\n   *   The entire set of arbitrary data to store for this form.\n   *\n   * @return $this\n   *\/",161],["T_WHITESPACE","\n  ",168],["T_PUBLIC","public",169],["T_WHITESPACE"," ",169],["T_FUNCTION","function",169],["T_WHITESPACE"," ",169],["T_STRING","setStorage",169],"(",["T_ARRAY","array",169],["T_WHITESPACE"," ",169],["T_VARIABLE","$storage",169],")",";",["T_WHITESPACE","\n\n  ",169],["T_DOC_COMMENT","\/**\n   * Returns the entire set of arbitrary data.\n   *\n   * @return array\n   *   The entire set of arbitrary data to store for this form.\n   *\/",171],["T_WHITESPACE","\n  ",176],["T_PUBLIC","public",177],["T_WHITESPACE"," ",177],["T_FUNCTION","function",177],["T_WHITESPACE"," ",177],"&",["T_STRING","getStorage",177],"(",")",";",["T_WHITESPACE","\n\n  ",177],["T_DOC_COMMENT","\/**\n   * Gets any arbitrary property.\n   *\n   * @param string|array $property\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $property is a string, it will return $storage[$property]. If $property\n   *   is an array, each element of the array will be used as a nested key. If\n   *   $property = ['foo', 'bar'] it will return $storage['foo']['bar'].\n   *\n   * @return mixed\n   *   A reference to the value for that property, or NULL if the property does\n   *   not exist.\n   *\/",179],["T_WHITESPACE","\n  ",191],["T_PUBLIC","public",192],["T_WHITESPACE"," ",192],["T_FUNCTION","function",192],["T_WHITESPACE"," ",192],"&",["T_STRING","get",192],"(",["T_VARIABLE","$property",192],")",";",["T_WHITESPACE","\n\n  ",192],["T_DOC_COMMENT","\/**\n   * Sets a value to an arbitrary property.\n   *\n   * @param string|array $property\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $property is a string, it will use $storage[$property] = $value. If\n   *   $property is an array, each element of the array will be used as a nested\n   *   key. If $property = ['foo', 'bar'] it will use\n   *   $storage['foo']['bar'] = $value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",194],["T_WHITESPACE","\n  ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","set",208],"(",["T_VARIABLE","$property",208],",",["T_WHITESPACE"," ",208],["T_VARIABLE","$value",208],")",";",["T_WHITESPACE","\n\n  ",208],["T_DOC_COMMENT","\/**\n   * Determines if an arbitrary property is present.\n   *\n   * @param string $property\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $property is a string, it will return isset($storage[$property]). If\n   *   $property is an array, each element of the array will be used as a nested\n   *   key. If $property = ['foo', 'bar'] it will return\n   *   isset($storage['foo']['bar']).\n   *\/",210],["T_WHITESPACE","\n  ",219],["T_PUBLIC","public",220],["T_WHITESPACE"," ",220],["T_FUNCTION","function",220],["T_WHITESPACE"," ",220],["T_STRING","has",220],"(",["T_VARIABLE","$property",220],")",";",["T_WHITESPACE","\n\n  ",220],["T_DOC_COMMENT","\/**\n   * Sets the build info for the form.\n   *\n   * @param array $build_info\n   *   An array of build info.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$build_info\n   *\/",222],["T_WHITESPACE","\n  ",231],["T_PUBLIC","public",232],["T_WHITESPACE"," ",232],["T_FUNCTION","function",232],["T_WHITESPACE"," ",232],["T_STRING","setBuildInfo",232],"(",["T_ARRAY","array",232],["T_WHITESPACE"," ",232],["T_VARIABLE","$build_info",232],")",";",["T_WHITESPACE","\n\n  ",232],["T_DOC_COMMENT","\/**\n   * Returns the build info for the form.\n   *\n   * @return array\n   *   An array of build info.\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$build_info\n   *\/",234],["T_WHITESPACE","\n  ",241],["T_PUBLIC","public",242],["T_WHITESPACE"," ",242],["T_FUNCTION","function",242],["T_WHITESPACE"," ",242],["T_STRING","getBuildInfo",242],"(",")",";",["T_WHITESPACE","\n\n  ",242],["T_DOC_COMMENT","\/**\n   * Adds a value to the build info.\n   *\n   * @param string $property\n   *   The property to use for the value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",244],["T_WHITESPACE","\n  ",253],["T_PUBLIC","public",254],["T_WHITESPACE"," ",254],["T_FUNCTION","function",254],["T_WHITESPACE"," ",254],["T_STRING","addBuildInfo",254],"(",["T_VARIABLE","$property",254],",",["T_WHITESPACE"," ",254],["T_VARIABLE","$value",254],")",";",["T_WHITESPACE","\n\n  ",254],["T_DOC_COMMENT","\/**\n   * Returns the form values as they were submitted by the user.\n   *\n   * These are raw and unvalidated, so should not be used without a thorough\n   * understanding of security implications. In almost all cases, code should\n   * use self::getValues() and self::getValue() exclusively.\n   *\n   * @return array\n   *   An associative array of values submitted to the form.\n   *\/",256],["T_WHITESPACE","\n  ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],"&",["T_STRING","getUserInput",266],"(",")",";",["T_WHITESPACE","\n\n  ",266],["T_DOC_COMMENT","\/**\n   * Sets the form values as though they were submitted by a user.\n   *\n   * @param array $user_input\n   *   An associative array of raw and unvalidated values.\n   *\n   * @return $this\n   *\/",268],["T_WHITESPACE","\n  ",275],["T_PUBLIC","public",276],["T_WHITESPACE"," ",276],["T_FUNCTION","function",276],["T_WHITESPACE"," ",276],["T_STRING","setUserInput",276],"(",["T_ARRAY","array",276],["T_WHITESPACE"," ",276],["T_VARIABLE","$user_input",276],")",";",["T_WHITESPACE","\n\n  ",276],["T_DOC_COMMENT","\/**\n   * Returns the submitted and sanitized form values.\n   *\n   * @return array\n   *   An associative array of values submitted to the form.\n   *\/",278],["T_WHITESPACE","\n  ",283],["T_PUBLIC","public",284],["T_WHITESPACE"," ",284],["T_FUNCTION","function",284],["T_WHITESPACE"," ",284],"&",["T_STRING","getValues",284],"(",")",";",["T_WHITESPACE","\n\n  ",284],["T_DOC_COMMENT","\/**\n   * Returns the submitted form value for a specific key.\n   *\n   * @param string|array $key\n   *   Values are stored as a multi-dimensional associative array. If $key is a\n   *   string, it will return $values[$key]. If $key is an array, each element\n   *   of the array will be used as a nested key. If $key = array('foo', 'bar')\n   *   it will return $values['foo']['bar'].\n   * @param mixed $default\n   *   (optional) The default value if the specified key does not exist.\n   *\n   * @return mixed\n   *   The value for the given key, or NULL.\n   *\/",286],["T_WHITESPACE","\n  ",299],["T_PUBLIC","public",300],["T_WHITESPACE"," ",300],["T_FUNCTION","function",300],["T_WHITESPACE"," ",300],"&",["T_STRING","getValue",300],"(",["T_VARIABLE","$key",300],",",["T_WHITESPACE"," ",300],["T_VARIABLE","$default",300],["T_WHITESPACE"," ",300],"=",["T_WHITESPACE"," ",300],["T_STRING","NULL",300],")",";",["T_WHITESPACE","\n\n  ",300],["T_DOC_COMMENT","\/**\n   * Sets the submitted form values.\n   *\n   * This should be avoided, since these values have been validated already. Use\n   * self::setUserInput() instead.\n   *\n   * @param array $values\n   *   The multi-dimensional associative array of form values.\n   *\n   * @return $this\n   *\/",302],["T_WHITESPACE","\n  ",312],["T_PUBLIC","public",313],["T_WHITESPACE"," ",313],["T_FUNCTION","function",313],["T_WHITESPACE"," ",313],["T_STRING","setValues",313],"(",["T_ARRAY","array",313],["T_WHITESPACE"," ",313],["T_VARIABLE","$values",313],")",";",["T_WHITESPACE","\n\n  ",313],["T_DOC_COMMENT","\/**\n   * Sets the submitted form value for a specific key.\n   *\n   * @param string|array $key\n   *   Values are stored as a multi-dimensional associative array. If $key is a\n   *   string, it will use $values[$key] = $value. If $key is an array, each\n   *   element of the array will be used as a nested key. If\n   *   $key = array('foo', 'bar') it will use $values['foo']['bar'] = $value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",315],["T_WHITESPACE","\n  ",327],["T_PUBLIC","public",328],["T_WHITESPACE"," ",328],["T_FUNCTION","function",328],["T_WHITESPACE"," ",328],["T_STRING","setValue",328],"(",["T_VARIABLE","$key",328],",",["T_WHITESPACE"," ",328],["T_VARIABLE","$value",328],")",";",["T_WHITESPACE","\n\n  ",328],["T_DOC_COMMENT","\/**\n   * Removes a specific key from the submitted form values.\n   *\n   * @param string|array $key\n   *   Values are stored as a multi-dimensional associative array. If $key is a\n   *   string, it will use unset($values[$key]). If $key is an array, each\n   *   element of the array will be used as a nested key. If\n   *   $key = array('foo', 'bar') it will use unset($values['foo']['bar']).\n   *\n   * @return $this\n   *\/",330],["T_WHITESPACE","\n  ",340],["T_PUBLIC","public",341],["T_WHITESPACE"," ",341],["T_FUNCTION","function",341],["T_WHITESPACE"," ",341],["T_STRING","unsetValue",341],"(",["T_VARIABLE","$key",341],")",";",["T_WHITESPACE","\n\n  ",341],["T_DOC_COMMENT","\/**\n   * Determines if a specific key is present in the submitted form values.\n   *\n   * @param string|array $key\n   *   Values are stored as a multi-dimensional associative array. If $key is a\n   *   string, it will return isset($values[$key]). If $key is an array, each\n   *   element of the array will be used as a nested key. If\n   *   $key = array('foo', 'bar') it will return isset($values['foo']['bar']).\n   *\n   * @return bool\n   *   TRUE if the $key is set, FALSE otherwise.\n   *\/",343],["T_WHITESPACE","\n  ",354],["T_PUBLIC","public",355],["T_WHITESPACE"," ",355],["T_FUNCTION","function",355],["T_WHITESPACE"," ",355],["T_STRING","hasValue",355],"(",["T_VARIABLE","$key",355],")",";",["T_WHITESPACE","\n\n  ",355],["T_DOC_COMMENT","\/**\n   * Determines if a specific key has a value in the submitted form values.\n   *\n   * @param string|array $key\n   *   Values are stored as a multi-dimensional associative array. If $key is a\n   *   string, it will return empty($values[$key]). If $key is an array, each\n   *   element of the array will be used as a nested key. If\n   *   $key = array('foo', 'bar') it will return empty($values['foo']['bar']).\n   *\n   * @return bool\n   *   TRUE if the $key has no value, FALSE otherwise.\n   *\/",357],["T_WHITESPACE","\n  ",368],["T_PUBLIC","public",369],["T_WHITESPACE"," ",369],["T_FUNCTION","function",369],["T_WHITESPACE"," ",369],["T_STRING","isValueEmpty",369],"(",["T_VARIABLE","$key",369],")",";",["T_WHITESPACE","\n\n  ",369],["T_DOC_COMMENT","\/**\n   * Changes submitted form values during form validation.\n   *\n   * Use this function to change the submitted value of a form element in a form\n   * validation function, so that the changed value persists in $form_state\n   * through to the submission handlers.\n   *\n   * Note that form validation functions are specified in the '#validate'\n   * component of the form array (the value of $form['#validate'] is an array of\n   * validation function names). If the form does not originate in your module,\n   * you can implement hook_form_FORM_ID_alter() to add a validation function\n   * to $form['#validate'].\n   *\n   * @param array $element\n   *   The form element that should have its value updated; in most cases you\n   *   can just pass in the element from the $form array, although the only\n   *   component that is actually used is '#parents'. If constructing yourself,\n   *   set $element['#parents'] to be an array giving the path through the form\n   *   array's keys to the element whose value you want to update. For instance,\n   *   if you want to update the value of $form['elem1']['elem2'], which should\n   *   be stored in $form_state->getValue(array('elem1', 'elem2')), you would\n   *   set $element['#parents'] = array('elem1','elem2').\n   * @param mixed $value\n   *   The new value for the form element.\n   *\n   * @return $this\n   *\/",371],["T_WHITESPACE","\n  ",397],["T_PUBLIC","public",398],["T_WHITESPACE"," ",398],["T_FUNCTION","function",398],["T_WHITESPACE"," ",398],["T_STRING","setValueForElement",398],"(",["T_ARRAY","array",398],["T_WHITESPACE"," ",398],["T_VARIABLE","$element",398],",",["T_WHITESPACE"," ",398],["T_VARIABLE","$value",398],")",";",["T_WHITESPACE","\n\n  ",398],["T_DOC_COMMENT","\/**\n   * Determines if any forms have any errors.\n   *\n   * @return bool\n   *   TRUE if any form has any errors, FALSE otherwise.\n   *\/",400],["T_WHITESPACE","\n  ",405],["T_PUBLIC","public",406],["T_WHITESPACE"," ",406],["T_STATIC","static",406],["T_WHITESPACE"," ",406],["T_FUNCTION","function",406],["T_WHITESPACE"," ",406],["T_STRING","hasAnyErrors",406],"(",")",";",["T_WHITESPACE","\n\n  ",406],["T_DOC_COMMENT","\/**\n   * Files an error against a form element.\n   *\n   * When a validation error is detected, the validator calls this method to\n   * indicate which element needs to be changed and provide an error message.\n   * This causes the Form API to not execute the form submit handlers, and\n   * instead to re-display the form to the user with the corresponding elements\n   * rendered with an 'error' CSS class (shown as red by default).\n   *\n   * The standard behavior of this method can be changed if a button provides\n   * the #limit_validation_errors property. Multistep forms not wanting to\n   * validate the whole form can set #limit_validation_errors on buttons to\n   * limit validation errors to only certain elements. For example, pressing the\n   * \"Previous\" button in a multistep form should not fire validation errors\n   * just because the current step has invalid values. If\n   * #limit_validation_errors is set on a clicked button, the button must also\n   * define a #submit property (may be set to an empty array). Any #submit\n   * handlers will be executed even if there is invalid input, so extreme care\n   * should be taken with respect to any actions taken by them. This is\n   * typically not a problem with buttons like \"Previous\" or \"Add more\" that do\n   * not invoke persistent storage of the submitted form values. Do not use the\n   * #limit_validation_errors property on buttons that trigger saving of form\n   * values to the database.\n   *\n   * The #limit_validation_errors property is a list of \"sections\" within\n   * $form_state->getValues() that must contain valid values. Each \"section\" is\n   * an array with the ordered set of keys needed to reach that part of\n   * $form_state->getValues() (i.e., the #parents property of the element).\n   *\n   * Example 1: Allow the \"Previous\" button to function, regardless of whether\n   * any user input is valid.\n   *\n   * @code\n   *   $form['actions']['previous'] = array(\n   *     '#type' => 'submit',\n   *     '#value' => t('Previous'),\n   *     '#limit_validation_errors' => array(),       \/\/ No validation.\n   *     '#submit' => array('some_submit_function'),  \/\/ #submit required.\n   *   );\n   * @endcode\n   *\n   * Example 2: Require some, but not all, user input to be valid to process the\n   * submission of a \"Previous\" button.\n   *\n   * @code\n   *   $form['actions']['previous'] = array(\n   *     '#type' => 'submit',\n   *     '#value' => t('Previous'),\n   *     '#limit_validation_errors' => array(\n   *       \/\/ Validate $form_state->getValue('step1').\n   *       array('step1'),\n   *       \/\/ Validate $form_state->getValue(array('foo', 'bar')).\n   *       array('foo', 'bar'),\n   *     ),\n   *     '#submit' => array('some_submit_function'), \/\/ #submit required.\n   *   );\n   * @endcode\n   *\n   * This will require $form_state->getValue('step1') and everything within it\n   * (for example, $form_state->getValue(array('step1', 'choice'))) to be valid,\n   * so calls to self::setErrorByName('step1', $message) or\n   * self::setErrorByName('step1][choice', $message) will prevent the submit\n   * handlers from running, and result in the error message being displayed to\n   * the user. However, calls to self::setErrorByName('step2', $message) and\n   * self::setErrorByName('step2][groupX][choiceY', $message) will be\n   * suppressed, resulting in the message not being displayed to the user, and\n   * the submit handlers will run despite $form_state->getValue('step2') and\n   * $form_state->getValue(array('step2', 'groupX', 'choiceY')) containing\n   * invalid values. Errors for an invalid $form_state->getValue('foo') will be\n   * suppressed, but errors flagging invalid values for\n   * $form_state->getValue(array('foo', 'bar')) and everything within it will\n   * be flagged and submission prevented.\n   *\n   * Partial form validation is implemented by suppressing errors rather than by\n   * skipping the input processing and validation steps entirely, because some\n   * forms have button-level submit handlers that call Drupal API functions that\n   * assume that certain data exists within $form_state->getValues(), and while\n   * not doing anything with that data that requires it to be valid, PHP errors\n   * would be triggered if the input processing and validation steps were fully\n   * skipped.\n   *\n   * @param string $name\n   *   The name of the form element. If the #parents property of your form\n   *   element is array('foo', 'bar', 'baz') then you may set an error on 'foo'\n   *   or 'foo][bar][baz'. Setting an error on 'foo' sets an error for every\n   *   element where the #parents array starts with 'foo'.\n   * @param string $message\n   *   (optional) The error message to present to the user.\n   *\n   * @return $this\n   *\/",408],["T_WHITESPACE","\n  ",498],["T_PUBLIC","public",499],["T_WHITESPACE"," ",499],["T_FUNCTION","function",499],["T_WHITESPACE"," ",499],["T_STRING","setErrorByName",499],"(",["T_VARIABLE","$name",499],",",["T_WHITESPACE"," ",499],["T_VARIABLE","$message",499],["T_WHITESPACE"," ",499],"=",["T_WHITESPACE"," ",499],["T_CONSTANT_ENCAPSED_STRING","''",499],")",";",["T_WHITESPACE","\n\n  ",499],["T_DOC_COMMENT","\/**\n   * Flags an element as having an error.\n   *\n   * @param array $element\n   *   The form element.\n   * @param string $message\n   *   (optional) The error message to present to the user.\n   *\n   * @return $this\n   *\/",501],["T_WHITESPACE","\n  ",510],["T_PUBLIC","public",511],["T_WHITESPACE"," ",511],["T_FUNCTION","function",511],["T_WHITESPACE"," ",511],["T_STRING","setError",511],"(",["T_ARRAY","array",511],["T_WHITESPACE"," ",511],"&",["T_VARIABLE","$element",511],",",["T_WHITESPACE"," ",511],["T_VARIABLE","$message",511],["T_WHITESPACE"," ",511],"=",["T_WHITESPACE"," ",511],["T_CONSTANT_ENCAPSED_STRING","''",511],")",";",["T_WHITESPACE","\n\n  ",511],["T_DOC_COMMENT","\/**\n   * Clears all errors against all form elements made by self::setErrorByName().\n   *\/",513],["T_WHITESPACE","\n  ",515],["T_PUBLIC","public",516],["T_WHITESPACE"," ",516],["T_FUNCTION","function",516],["T_WHITESPACE"," ",516],["T_STRING","clearErrors",516],"(",")",";",["T_WHITESPACE","\n\n  ",516],["T_DOC_COMMENT","\/**\n   * Returns an associative array of all errors.\n   *\n   * @return array\n   *   An array of all errors, keyed by the name of the form element.\n   *\/",518],["T_WHITESPACE","\n  ",523],["T_PUBLIC","public",524],["T_WHITESPACE"," ",524],["T_FUNCTION","function",524],["T_WHITESPACE"," ",524],["T_STRING","getErrors",524],"(",")",";",["T_WHITESPACE","\n\n  ",524],["T_DOC_COMMENT","\/**\n   * Returns the error message filed against the given form element.\n   *\n   * Form errors higher up in the form structure override deeper errors as well\n   * as errors on the element itself.\n   *\n   * @param array $element\n   *   The form element to check for errors.\n   *\n   * @return string|null\n   *   Either the error message for this element or NULL if there are no errors.\n   *\/",526],["T_WHITESPACE","\n  ",537],["T_PUBLIC","public",538],["T_WHITESPACE"," ",538],["T_FUNCTION","function",538],["T_WHITESPACE"," ",538],["T_STRING","getError",538],"(",["T_ARRAY","array",538],["T_WHITESPACE"," ",538],["T_VARIABLE","$element",538],")",";",["T_WHITESPACE","\n\n  ",538],["T_DOC_COMMENT","\/**\n   * Sets the form to be rebuilt after processing.\n   *\n   * @param bool $rebuild\n   *   (optional) Whether the form should be rebuilt or not. Defaults to TRUE.\n   *\n   * @return $this\n   *\/",540],["T_WHITESPACE","\n  ",547],["T_PUBLIC","public",548],["T_WHITESPACE"," ",548],["T_FUNCTION","function",548],["T_WHITESPACE"," ",548],["T_STRING","setRebuild",548],"(",["T_VARIABLE","$rebuild",548],["T_WHITESPACE"," ",548],"=",["T_WHITESPACE"," ",548],["T_STRING","TRUE",548],")",";",["T_WHITESPACE","\n\n  ",548],["T_DOC_COMMENT","\/**\n   * Determines if the form should be rebuilt after processing.\n   *\n   * @return bool\n   *   TRUE if the form should be rebuilt, FALSE otherwise.\n   *\/",550],["T_WHITESPACE","\n  ",555],["T_PUBLIC","public",556],["T_WHITESPACE"," ",556],["T_FUNCTION","function",556],["T_WHITESPACE"," ",556],["T_STRING","isRebuilding",556],"(",")",";",["T_WHITESPACE","\n\n  ",556],["T_DOC_COMMENT","\/**\n   * Flags the form state as having or not an invalid token.\n   *\n   * @param bool $invalid_token\n   *   Whether the form has an invalid token.\n   *\n   * @return $this\n   *\/",558],["T_WHITESPACE","\n  ",565],["T_PUBLIC","public",566],["T_WHITESPACE"," ",566],["T_FUNCTION","function",566],["T_WHITESPACE"," ",566],["T_STRING","setInvalidToken",566],"(",["T_VARIABLE","$invalid_token",566],")",";",["T_WHITESPACE","\n\n  ",566],["T_DOC_COMMENT","\/**\n   * Determines if the form has an invalid token.\n   *\n   * @return bool\n   *   TRUE if the form has an invalid token, FALSE otherwise.\n   *\/",568],["T_WHITESPACE","\n  ",573],["T_PUBLIC","public",574],["T_WHITESPACE"," ",574],["T_FUNCTION","function",574],["T_WHITESPACE"," ",574],["T_STRING","hasInvalidToken",574],"(",")",";",["T_WHITESPACE","\n\n  ",574],["T_DOC_COMMENT","\/**\n   * Converts support notations for a form callback to a valid callable.\n   *\n   * Specifically, supports methods on the form\/callback object as strings when\n   * they start with ::, for example \"::submitForm()\".\n   *\n   * @param string|array $callback\n   *   The callback.\n   *\n   * @return array|string\n   *   A valid callable.\n   *\/",576],["T_WHITESPACE","\n  ",587],["T_PUBLIC","public",588],["T_WHITESPACE"," ",588],["T_FUNCTION","function",588],["T_WHITESPACE"," ",588],["T_STRING","prepareCallback",588],"(",["T_VARIABLE","$callback",588],")",";",["T_WHITESPACE","\n\n  ",588],["T_DOC_COMMENT","\/**\n   * Returns the form object that is responsible for building this form.\n   *\n   * @return \\Drupal\\Core\\Form\\FormInterface\n   *   The form object.\n   *\/",590],["T_WHITESPACE","\n  ",595],["T_PUBLIC","public",596],["T_WHITESPACE"," ",596],["T_FUNCTION","function",596],["T_WHITESPACE"," ",596],["T_STRING","getFormObject",596],"(",")",";",["T_WHITESPACE","\n\n  ",596],["T_DOC_COMMENT","\/**\n   * Sets the form object that is responsible for building this form.\n   *\n   * @param \\Drupal\\Core\\Form\\FormInterface $form_object\n   *   The form object.\n   *\n   * @return $this\n   *\/",598],["T_WHITESPACE","\n  ",605],["T_PUBLIC","public",606],["T_WHITESPACE"," ",606],["T_FUNCTION","function",606],["T_WHITESPACE"," ",606],["T_STRING","setFormObject",606],"(",["T_STRING","FormInterface",606],["T_WHITESPACE"," ",606],["T_VARIABLE","$form_object",606],")",";",["T_WHITESPACE","\n\n  ",606],["T_DOC_COMMENT","\/**\n   * Sets this form to always be processed.\n   *\n   * This should only be used on RESTful GET forms that do NOT write data, as\n   * this could lead to security issues. It is useful so that searches do not\n   * need to have a form_id in their query arguments to trigger the search.\n   *\n   * @param bool $always_process\n   *   TRUE if the form should always be processed, FALSE otherwise.\n   *\n   * @return $this\n   *\/",608],["T_WHITESPACE","\n  ",619],["T_PUBLIC","public",620],["T_WHITESPACE"," ",620],["T_FUNCTION","function",620],["T_WHITESPACE"," ",620],["T_STRING","setAlwaysProcess",620],"(",["T_VARIABLE","$always_process",620],["T_WHITESPACE"," ",620],"=",["T_WHITESPACE"," ",620],["T_STRING","TRUE",620],")",";",["T_WHITESPACE","\n\n  ",620],["T_DOC_COMMENT","\/**\n   * Determines if this form should always be processed.\n   *\n   * @return bool\n   *   TRUE if the form should always be processed, FALSE otherwise.\n   *\/",622],["T_WHITESPACE","\n  ",627],["T_PUBLIC","public",628],["T_WHITESPACE"," ",628],["T_FUNCTION","function",628],["T_WHITESPACE"," ",628],["T_STRING","getAlwaysProcess",628],"(",")",";",["T_WHITESPACE","\n\n  ",628],["T_DOC_COMMENT","\/**\n   * Stores the submit and button elements for the form.\n   *\n   * @param array $buttons\n   *   The submit and button elements.\n   *\n   * @return $this\n   *\/",630],["T_WHITESPACE","\n  ",637],["T_PUBLIC","public",638],["T_WHITESPACE"," ",638],["T_FUNCTION","function",638],["T_WHITESPACE"," ",638],["T_STRING","setButtons",638],"(",["T_ARRAY","array",638],["T_WHITESPACE"," ",638],["T_VARIABLE","$buttons",638],")",";",["T_WHITESPACE","\n\n  ",638],["T_DOC_COMMENT","\/**\n   * Returns the submit and button elements for the form.\n   *\n   * @return array\n   *   The submit and button elements.\n   *\/",640],["T_WHITESPACE","\n  ",645],["T_PUBLIC","public",646],["T_WHITESPACE"," ",646],["T_FUNCTION","function",646],["T_WHITESPACE"," ",646],["T_STRING","getButtons",646],"(",")",";",["T_WHITESPACE","\n\n  ",646],["T_DOC_COMMENT","\/**\n   * Sets this form to be cached.\n   *\n   * @param bool $cache\n   *   TRUE if the form should be cached, FALSE otherwise.\n   *\n   * @return $this\n   *\n   * @throws \\LogicException\n   *   If the current request is using an HTTP method that must not change\n   *   state (e.g., GET).\n   *\/",648],["T_WHITESPACE","\n  ",659],["T_PUBLIC","public",660],["T_WHITESPACE"," ",660],["T_FUNCTION","function",660],["T_WHITESPACE"," ",660],["T_STRING","setCached",660],"(",["T_VARIABLE","$cache",660],["T_WHITESPACE"," ",660],"=",["T_WHITESPACE"," ",660],["T_STRING","TRUE",660],")",";",["T_WHITESPACE","\n\n  ",660],["T_DOC_COMMENT","\/**\n   * Determines if the form should be cached.\n   *\n   * @return bool\n   *   TRUE if the form should be cached, FALSE otherwise.\n   *\/",662],["T_WHITESPACE","\n  ",667],["T_PUBLIC","public",668],["T_WHITESPACE"," ",668],["T_FUNCTION","function",668],["T_WHITESPACE"," ",668],["T_STRING","isCached",668],"(",")",";",["T_WHITESPACE","\n\n  ",668],["T_DOC_COMMENT","\/**\n   * Prevents the form from being cached.\n   *\n   * @return $this\n   *\/",670],["T_WHITESPACE","\n  ",674],["T_PUBLIC","public",675],["T_WHITESPACE"," ",675],["T_FUNCTION","function",675],["T_WHITESPACE"," ",675],["T_STRING","disableCache",675],"(",")",";",["T_WHITESPACE","\n\n  ",675],["T_DOC_COMMENT","\/**\n   * Sets that the form was submitted and has been processed and executed.\n   *\n   * @return $this\n   *\/",677],["T_WHITESPACE","\n  ",681],["T_PUBLIC","public",682],["T_WHITESPACE"," ",682],["T_FUNCTION","function",682],["T_WHITESPACE"," ",682],["T_STRING","setExecuted",682],"(",")",";",["T_WHITESPACE","\n\n  ",682],["T_DOC_COMMENT","\/**\n   * Determines if the form was submitted and has been processed and executed.\n   *\n   * @return bool\n   *   TRUE if the form was submitted and has been processed and executed.\n   *\/",684],["T_WHITESPACE","\n  ",689],["T_PUBLIC","public",690],["T_WHITESPACE"," ",690],["T_FUNCTION","function",690],["T_WHITESPACE"," ",690],["T_STRING","isExecuted",690],"(",")",";",["T_WHITESPACE","\n\n  ",690],["T_DOC_COMMENT","\/**\n   * Sets references to details elements to render them within vertical tabs.\n   *\n   * @param array $groups\n   *   References to details elements to render them within vertical tabs.\n   *\n   * @return $this\n   *\/",692],["T_WHITESPACE","\n  ",699],["T_PUBLIC","public",700],["T_WHITESPACE"," ",700],["T_FUNCTION","function",700],["T_WHITESPACE"," ",700],["T_STRING","setGroups",700],"(",["T_ARRAY","array",700],["T_WHITESPACE"," ",700],["T_VARIABLE","$groups",700],")",";",["T_WHITESPACE","\n\n  ",700],["T_DOC_COMMENT","\/**\n   * Returns references to details elements to render them within vertical tabs.\n   *\n   * @return array\n   *\/",702],["T_WHITESPACE","\n  ",706],["T_PUBLIC","public",707],["T_WHITESPACE"," ",707],["T_FUNCTION","function",707],["T_WHITESPACE"," ",707],"&",["T_STRING","getGroups",707],"(",")",";",["T_WHITESPACE","\n\n  ",707],["T_DOC_COMMENT","\/**\n   * Sets that this form has a file element.\n   *\n   * @param bool $has_file_element\n   *   Whether this form has a file element.\n   *\n   * @return $this\n   *\/",709],["T_WHITESPACE","\n  ",716],["T_PUBLIC","public",717],["T_WHITESPACE"," ",717],["T_FUNCTION","function",717],["T_WHITESPACE"," ",717],["T_STRING","setHasFileElement",717],"(",["T_VARIABLE","$has_file_element",717],["T_WHITESPACE"," ",717],"=",["T_WHITESPACE"," ",717],["T_STRING","TRUE",717],")",";",["T_WHITESPACE","\n\n  ",717],["T_DOC_COMMENT","\/**\n   * Returns whether this form has a file element.\n   *\n   * @return bool\n   *   Whether this form has a file element.\n   *\/",719],["T_WHITESPACE","\n  ",724],["T_PUBLIC","public",725],["T_WHITESPACE"," ",725],["T_FUNCTION","function",725],["T_WHITESPACE"," ",725],["T_STRING","hasFileElement",725],"(",")",";",["T_WHITESPACE","\n\n  ",725],["T_DOC_COMMENT","\/**\n   * Sets the limited validation error sections.\n   *\n   * @param array|null $limit_validation_errors\n   *   The limited validation error sections.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$limit_validation_errors\n   *\/",727],["T_WHITESPACE","\n  ",736],["T_PUBLIC","public",737],["T_WHITESPACE"," ",737],["T_FUNCTION","function",737],["T_WHITESPACE"," ",737],["T_STRING","setLimitValidationErrors",737],"(",["T_VARIABLE","$limit_validation_errors",737],")",";",["T_WHITESPACE","\n\n  ",737],["T_DOC_COMMENT","\/**\n   * Retrieves the limited validation error sections.\n   *\n   * @return array|null\n   *   The limited validation error sections.\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$limit_validation_errors\n   *\/",739],["T_WHITESPACE","\n  ",746],["T_PUBLIC","public",747],["T_WHITESPACE"," ",747],["T_FUNCTION","function",747],["T_WHITESPACE"," ",747],["T_STRING","getLimitValidationErrors",747],"(",")",";",["T_WHITESPACE","\n\n  ",747],["T_DOC_COMMENT","\/**\n   * Sets the HTTP method to use for the form's submission.\n   *\n   * This is what the form's \"method\" attribute should be, not necessarily what\n   * the current request's HTTP method is. For example, a form can have a\n   * method attribute of POST, but the request that initially builds it uses\n   * GET.\n   *\n   * @param string $method\n   *   Either \"GET\" or \"POST\". Other HTTP methods are not valid form submission\n   *   methods.\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$method\n   * @see \\Drupal\\Core\\Form\\FormStateInterface::setRequestMethod()\n   *\n   * @return $this\n   *\/",749],["T_WHITESPACE","\n  ",765],["T_PUBLIC","public",766],["T_WHITESPACE"," ",766],["T_FUNCTION","function",766],["T_WHITESPACE"," ",766],["T_STRING","setMethod",766],"(",["T_VARIABLE","$method",766],")",";",["T_WHITESPACE","\n\n  ",766],["T_DOC_COMMENT","\/**\n   * Sets the HTTP method used by the request that is building the form.\n   *\n   * @param string $method\n   *   Can be any valid HTTP method, such as GET, POST, HEAD, etc.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormStateInterface::setMethod()\n   *\/",768],["T_WHITESPACE","\n  ",777],["T_PUBLIC","public",778],["T_WHITESPACE"," ",778],["T_FUNCTION","function",778],["T_WHITESPACE"," ",778],["T_STRING","setRequestMethod",778],"(",["T_VARIABLE","$method",778],")",";",["T_WHITESPACE","\n\n  ",778],["T_DOC_COMMENT","\/**\n   * Returns the HTTP form method.\n   *\n   * @param string $method_type\n   *   The HTTP form method.\n   *\n   * @return bool\n   *   TRUE if the HTTP form method matches.\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$method\n   *\/",780],["T_WHITESPACE","\n  ",790],["T_PUBLIC","public",791],["T_WHITESPACE"," ",791],["T_FUNCTION","function",791],["T_WHITESPACE"," ",791],["T_STRING","isMethodType",791],"(",["T_VARIABLE","$method_type",791],")",";",["T_WHITESPACE","\n\n  ",791],["T_DOC_COMMENT","\/**\n   * Enforces that validation is run.\n   *\n   * @param bool $must_validate\n   *   If TRUE, validation will always be run.\n   *\n   * @return $this\n   *\/",793],["T_WHITESPACE","\n  ",800],["T_PUBLIC","public",801],["T_WHITESPACE"," ",801],["T_FUNCTION","function",801],["T_WHITESPACE"," ",801],["T_STRING","setValidationEnforced",801],"(",["T_VARIABLE","$must_validate",801],["T_WHITESPACE"," ",801],"=",["T_WHITESPACE"," ",801],["T_STRING","TRUE",801],")",";",["T_WHITESPACE","\n\n  ",801],["T_DOC_COMMENT","\/**\n   * Checks if validation is enforced.\n   *\n   * @return bool\n   *   If TRUE, validation will always be run.\n   *\/",803],["T_WHITESPACE","\n  ",808],["T_PUBLIC","public",809],["T_WHITESPACE"," ",809],["T_FUNCTION","function",809],["T_WHITESPACE"," ",809],["T_STRING","isValidationEnforced",809],"(",")",";",["T_WHITESPACE","\n\n  ",809],["T_DOC_COMMENT","\/**\n   * Prevents the form from redirecting.\n   *\n   * @param bool $no_redirect\n   *   If TRUE, the form will not redirect.\n   *\n   * @return $this\n   *\/",811],["T_WHITESPACE","\n  ",818],["T_PUBLIC","public",819],["T_WHITESPACE"," ",819],["T_FUNCTION","function",819],["T_WHITESPACE"," ",819],["T_STRING","disableRedirect",819],"(",["T_VARIABLE","$no_redirect",819],["T_WHITESPACE"," ",819],"=",["T_WHITESPACE"," ",819],["T_STRING","TRUE",819],")",";",["T_WHITESPACE","\n\n  ",819],["T_DOC_COMMENT","\/**\n   * Determines if redirecting has been prevented.\n   *\n   * @return bool\n   *   If TRUE, the form will not redirect.\n   *\/",821],["T_WHITESPACE","\n  ",826],["T_PUBLIC","public",827],["T_WHITESPACE"," ",827],["T_FUNCTION","function",827],["T_WHITESPACE"," ",827],["T_STRING","isRedirectDisabled",827],"(",")",";",["T_WHITESPACE","\n\n  ",827],["T_DOC_COMMENT","\/**\n   * Sets that the form should process input.\n   *\n   * @param bool $process_input\n   *   If TRUE, the form input will be processed.\n   *\n   * @return $this\n   *\/",829],["T_WHITESPACE","\n  ",836],["T_PUBLIC","public",837],["T_WHITESPACE"," ",837],["T_FUNCTION","function",837],["T_WHITESPACE"," ",837],["T_STRING","setProcessInput",837],"(",["T_VARIABLE","$process_input",837],["T_WHITESPACE"," ",837],"=",["T_WHITESPACE"," ",837],["T_STRING","TRUE",837],")",";",["T_WHITESPACE","\n\n  ",837],["T_DOC_COMMENT","\/**\n   * Determines if the form input will be processed.\n   *\n   * @return bool\n   *   If TRUE, the form input will be processed.\n   *\/",839],["T_WHITESPACE","\n  ",844],["T_PUBLIC","public",845],["T_WHITESPACE"," ",845],["T_FUNCTION","function",845],["T_WHITESPACE"," ",845],["T_STRING","isProcessingInput",845],"(",")",";",["T_WHITESPACE","\n\n  ",845],["T_DOC_COMMENT","\/**\n   * Sets that this form was submitted programmatically.\n   *\n   * @param bool $programmed\n   *   If TRUE, the form was submitted programmatically.\n   *\n   * @return $this\n   *\/",847],["T_WHITESPACE","\n  ",854],["T_PUBLIC","public",855],["T_WHITESPACE"," ",855],["T_FUNCTION","function",855],["T_WHITESPACE"," ",855],["T_STRING","setProgrammed",855],"(",["T_VARIABLE","$programmed",855],["T_WHITESPACE"," ",855],"=",["T_WHITESPACE"," ",855],["T_STRING","TRUE",855],")",";",["T_WHITESPACE","\n\n  ",855],["T_DOC_COMMENT","\/**\n   * Returns if this form was submitted programmatically.\n   *\n   * @return bool\n   *   If TRUE, the form was submitted programmatically.\n   *\/",857],["T_WHITESPACE","\n  ",862],["T_PUBLIC","public",863],["T_WHITESPACE"," ",863],["T_FUNCTION","function",863],["T_WHITESPACE"," ",863],["T_STRING","isProgrammed",863],"(",")",";",["T_WHITESPACE","\n\n  ",863],["T_DOC_COMMENT","\/**\n   * Sets if this form submission should bypass #access.\n   *\n   * @param bool $programmed_bypass_access_check\n   *   If TRUE, programmatic form submissions are processed without taking\n   *   #access into account.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$programmed_bypass_access_check\n   *\/",865],["T_WHITESPACE","\n  ",875],["T_PUBLIC","public",876],["T_WHITESPACE"," ",876],["T_FUNCTION","function",876],["T_WHITESPACE"," ",876],["T_STRING","setProgrammedBypassAccessCheck",876],"(",["T_VARIABLE","$programmed_bypass_access_check",876],["T_WHITESPACE"," ",876],"=",["T_WHITESPACE"," ",876],["T_STRING","TRUE",876],")",";",["T_WHITESPACE","\n\n  ",876],["T_DOC_COMMENT","\/**\n   * Determines if this form submission should bypass #access.\n   *\n   * @return bool\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$programmed_bypass_access_check\n   *\/",878],["T_WHITESPACE","\n  ",884],["T_PUBLIC","public",885],["T_WHITESPACE"," ",885],["T_FUNCTION","function",885],["T_WHITESPACE"," ",885],["T_STRING","isBypassingProgrammedAccessChecks",885],"(",")",";",["T_WHITESPACE","\n\n  ",885],["T_DOC_COMMENT","\/**\n   * Sets the rebuild info.\n   *\n   * @param array $rebuild_info\n   *   The rebuild info.\n   *\n   * @return $this\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$rebuild_info\n   *\/",887],["T_WHITESPACE","\n  ",896],["T_PUBLIC","public",897],["T_WHITESPACE"," ",897],["T_FUNCTION","function",897],["T_WHITESPACE"," ",897],["T_STRING","setRebuildInfo",897],"(",["T_ARRAY","array",897],["T_WHITESPACE"," ",897],["T_VARIABLE","$rebuild_info",897],")",";",["T_WHITESPACE","\n\n  ",897],["T_DOC_COMMENT","\/**\n   * Gets the rebuild info.\n   *\n   * @return array\n   *   The rebuild info.\n   *\n   * @see \\Drupal\\Core\\Form\\FormState::$rebuild_info\n   *\/",899],["T_WHITESPACE","\n  ",906],["T_PUBLIC","public",907],["T_WHITESPACE"," ",907],["T_FUNCTION","function",907],["T_WHITESPACE"," ",907],["T_STRING","getRebuildInfo",907],"(",")",";",["T_WHITESPACE","\n\n  ",907],["T_DOC_COMMENT","\/**\n   * Adds a value to the rebuild info.\n   *\n   * @param string $property\n   *   The property to use for the value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",909],["T_WHITESPACE","\n  ",918],["T_PUBLIC","public",919],["T_WHITESPACE"," ",919],["T_FUNCTION","function",919],["T_WHITESPACE"," ",919],["T_STRING","addRebuildInfo",919],"(",["T_VARIABLE","$property",919],",",["T_WHITESPACE"," ",919],["T_VARIABLE","$value",919],")",";",["T_WHITESPACE","\n\n  ",919],["T_DOC_COMMENT","\/**\n   * Sets the submit handlers.\n   *\n   * @param array $submit_handlers\n   *   An array of submit handlers.\n   *\n   * @return $this\n   *\/",921],["T_WHITESPACE","\n  ",928],["T_PUBLIC","public",929],["T_WHITESPACE"," ",929],["T_FUNCTION","function",929],["T_WHITESPACE"," ",929],["T_STRING","setSubmitHandlers",929],"(",["T_ARRAY","array",929],["T_WHITESPACE"," ",929],["T_VARIABLE","$submit_handlers",929],")",";",["T_WHITESPACE","\n\n  ",929],["T_DOC_COMMENT","\/**\n   * Gets the submit handlers.\n   *\n   * @return array\n   *   An array of submit handlers.\n   *\/",931],["T_WHITESPACE","\n  ",936],["T_PUBLIC","public",937],["T_WHITESPACE"," ",937],["T_FUNCTION","function",937],["T_WHITESPACE"," ",937],["T_STRING","getSubmitHandlers",937],"(",")",";",["T_WHITESPACE","\n\n  ",937],["T_DOC_COMMENT","\/**\n   * Sets that the form has been submitted.\n   *\n   * @return $this\n   *\/",939],["T_WHITESPACE","\n  ",943],["T_PUBLIC","public",944],["T_WHITESPACE"," ",944],["T_FUNCTION","function",944],["T_WHITESPACE"," ",944],["T_STRING","setSubmitted",944],"(",")",";",["T_WHITESPACE","\n\n  ",944],["T_DOC_COMMENT","\/**\n   * Determines if the form has been submitted.\n   *\n   * @return bool\n   *   TRUE if the form has been submitted, FALSE otherwise.\n   *\/",946],["T_WHITESPACE","\n  ",951],["T_PUBLIC","public",952],["T_WHITESPACE"," ",952],["T_FUNCTION","function",952],["T_WHITESPACE"," ",952],["T_STRING","isSubmitted",952],"(",")",";",["T_WHITESPACE","\n\n  ",952],["T_DOC_COMMENT","\/**\n   * Sets temporary data.\n   *\n   * @param array $temporary\n   *   Temporary data accessible during the current page request only.\n   *\n   * @return $this\n   *\/",954],["T_WHITESPACE","\n  ",961],["T_PUBLIC","public",962],["T_WHITESPACE"," ",962],["T_FUNCTION","function",962],["T_WHITESPACE"," ",962],["T_STRING","setTemporary",962],"(",["T_ARRAY","array",962],["T_WHITESPACE"," ",962],["T_VARIABLE","$temporary",962],")",";",["T_WHITESPACE","\n\n  ",962],["T_DOC_COMMENT","\/**\n   * Gets temporary data.\n   *\n   * @return array\n   *   Temporary data accessible during the current page request only.\n   *\/",964],["T_WHITESPACE","\n  ",969],["T_PUBLIC","public",970],["T_WHITESPACE"," ",970],["T_FUNCTION","function",970],["T_WHITESPACE"," ",970],["T_STRING","getTemporary",970],"(",")",";",["T_WHITESPACE","\n\n  ",970],["T_DOC_COMMENT","\/**\n   * Gets an arbitrary value from temporary storage.\n   *\n   * @param string|array $key\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $key is a string, it will return $temporary[$key]. If $key is an array,\n   *   each element of the array will be used as a nested key. If\n   *   $key = ['foo', 'bar'] it will return $temporary['foo']['bar'].\n   *\n   * @return mixed\n   *   A reference to the value for that key, or NULL if the property does\n   *   not exist.\n   *\/",972],["T_WHITESPACE","\n  ",984],["T_PUBLIC","public",985],["T_WHITESPACE"," ",985],["T_FUNCTION","function",985],["T_WHITESPACE"," ",985],"&",["T_STRING","getTemporaryValue",985],"(",["T_VARIABLE","$key",985],")",";",["T_WHITESPACE","\n\n  ",985],["T_DOC_COMMENT","\/**\n   * Sets an arbitrary value in temporary storage.\n   *\n   * @param string|array $key\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $key is a string, it will use $temporary[$key] = $value. If $key is an\n   *   array, each element of the array will be used as a nested key. If\n   *   $key = ['foo', 'bar'] it will use $temporary['foo']['bar'] = $value.\n   * @param mixed $value\n   *   The value to set.\n   *\n   * @return $this\n   *\/",987],["T_WHITESPACE","\n  ",999],["T_PUBLIC","public",1000],["T_WHITESPACE"," ",1000],["T_FUNCTION","function",1000],["T_WHITESPACE"," ",1000],["T_STRING","setTemporaryValue",1000],"(",["T_VARIABLE","$key",1000],",",["T_WHITESPACE"," ",1000],["T_VARIABLE","$value",1000],")",";",["T_WHITESPACE","\n\n  ",1000],["T_DOC_COMMENT","\/**\n   * Determines if a temporary value is present.\n   *\n   * @param string $key\n   *   Properties are often stored as multi-dimensional associative arrays. If\n   *   $key is a string, it will return isset($temporary[$key]). If $key is an\n   *   array, each element of the array will be used as a nested key. If\n   *   $key = ['foo', 'bar'] it will return isset($temporary['foo']['bar']).\n   *\/",1002],["T_WHITESPACE","\n  ",1010],["T_PUBLIC","public",1011],["T_WHITESPACE"," ",1011],["T_FUNCTION","function",1011],["T_WHITESPACE"," ",1011],["T_STRING","hasTemporaryValue",1011],"(",["T_VARIABLE","$key",1011],")",";",["T_WHITESPACE","\n\n  ",1011],["T_DOC_COMMENT","\/**\n   * Sets the form element that triggered submission.\n   *\n   * @param array|null $triggering_element\n   *   The form element that triggered submission, of NULL if there is none.\n   *\n   * @return $this\n   *\/",1013],["T_WHITESPACE","\n  ",1020],["T_PUBLIC","public",1021],["T_WHITESPACE"," ",1021],["T_FUNCTION","function",1021],["T_WHITESPACE"," ",1021],["T_STRING","setTriggeringElement",1021],"(",["T_VARIABLE","$triggering_element",1021],")",";",["T_WHITESPACE","\n\n  ",1021],["T_DOC_COMMENT","\/**\n   * Gets the form element that triggered submission.\n   *\n   * @return array|null\n   *   The form element that triggered submission, of NULL if there is none.\n   *\/",1023],["T_WHITESPACE","\n  ",1028],["T_PUBLIC","public",1029],["T_WHITESPACE"," ",1029],["T_FUNCTION","function",1029],["T_WHITESPACE"," ",1029],"&",["T_STRING","getTriggeringElement",1029],"(",")",";",["T_WHITESPACE","\n\n  ",1029],["T_DOC_COMMENT","\/**\n   * Sets the validate handlers.\n   *\n   * @param array $validate_handlers\n   *   An array of validate handlers.\n   *\n   * @return $this\n   *\/",1031],["T_WHITESPACE","\n  ",1038],["T_PUBLIC","public",1039],["T_WHITESPACE"," ",1039],["T_FUNCTION","function",1039],["T_WHITESPACE"," ",1039],["T_STRING","setValidateHandlers",1039],"(",["T_ARRAY","array",1039],["T_WHITESPACE"," ",1039],["T_VARIABLE","$validate_handlers",1039],")",";",["T_WHITESPACE","\n\n  ",1039],["T_DOC_COMMENT","\/**\n   * Gets the validate handlers.\n   *\n   * @return array\n   *   An array of validate handlers.\n   *\/",1041],["T_WHITESPACE","\n  ",1046],["T_PUBLIC","public",1047],["T_WHITESPACE"," ",1047],["T_FUNCTION","function",1047],["T_WHITESPACE"," ",1047],["T_STRING","getValidateHandlers",1047],"(",")",";",["T_WHITESPACE","\n\n  ",1047],["T_DOC_COMMENT","\/**\n   * Sets that validation has been completed.\n   *\n   * @param bool $validation_complete\n   *   TRUE if validation is complete, FALSE otherwise.\n   *\n   * @return $this\n   *\/",1049],["T_WHITESPACE","\n  ",1056],["T_PUBLIC","public",1057],["T_WHITESPACE"," ",1057],["T_FUNCTION","function",1057],["T_WHITESPACE"," ",1057],["T_STRING","setValidationComplete",1057],"(",["T_VARIABLE","$validation_complete",1057],["T_WHITESPACE"," ",1057],"=",["T_WHITESPACE"," ",1057],["T_STRING","TRUE",1057],")",";",["T_WHITESPACE","\n\n  ",1057],["T_DOC_COMMENT","\/**\n   * Determines if validation has been completed.\n   *\n   * @return bool\n   *   TRUE if validation is complete, FALSE otherwise.\n   *\/",1059],["T_WHITESPACE","\n  ",1064],["T_PUBLIC","public",1065],["T_WHITESPACE"," ",1065],["T_FUNCTION","function",1065],["T_WHITESPACE"," ",1065],["T_STRING","isValidationComplete",1065],"(",")",";",["T_WHITESPACE","\n\n  ",1065],["T_DOC_COMMENT","\/**\n   * Gets the keys of the form values that will be cleaned.\n   *\n   * @return array\n   *   An array of form value keys to be cleaned.\n   *\/",1067],["T_WHITESPACE","\n  ",1072],["T_PUBLIC","public",1073],["T_WHITESPACE"," ",1073],["T_FUNCTION","function",1073],["T_WHITESPACE"," ",1073],["T_STRING","getCleanValueKeys",1073],"(",")",";",["T_WHITESPACE","\n\n  ",1073],["T_DOC_COMMENT","\/**\n   * Sets the keys of the form values that will be cleaned.\n   *\n   * @param array $keys\n   *   An array of form value keys to be cleaned.\n   *\n   * @return $this\n   *\/",1075],["T_WHITESPACE","\n  ",1082],["T_PUBLIC","public",1083],["T_WHITESPACE"," ",1083],["T_FUNCTION","function",1083],["T_WHITESPACE"," ",1083],["T_STRING","setCleanValueKeys",1083],"(",["T_ARRAY","array",1083],["T_WHITESPACE"," ",1083],["T_VARIABLE","$keys",1083],")",";",["T_WHITESPACE","\n\n  ",1083],["T_DOC_COMMENT","\/**\n   * Adds a key to the array of form values that will be cleaned.\n   *\n   * @param string $key\n   *   The form value key to be cleaned.\n   *\n   * @return $this\n   *\/",1085],["T_WHITESPACE","\n  ",1092],["T_PUBLIC","public",1093],["T_WHITESPACE"," ",1093],["T_FUNCTION","function",1093],["T_WHITESPACE"," ",1093],["T_STRING","addCleanValueKey",1093],"(",["T_VARIABLE","$key",1093],")",";",["T_WHITESPACE","\n\n  ",1093],["T_DOC_COMMENT","\/**\n   * Removes internal Form API elements and buttons from submitted form values.\n   *\n   * This function can be used when a module wants to store all submitted form\n   * values, for example, by serializing them into a single database column. In\n   * such cases, all internal Form API values and all form button elements\n   * should not be contained, and this function allows their removal before the\n   * module proceeds to storage. Next to button elements, the following internal\n   * values are removed by default.\n   * - form_id\n   * - form_token\n   * - form_build_id\n   * - op\n   *\n   * @return $this\n   *\/",1095],["T_WHITESPACE","\n  ",1110],["T_PUBLIC","public",1111],["T_WHITESPACE"," ",1111],["T_FUNCTION","function",1111],["T_WHITESPACE"," ",1111],["T_STRING","cleanValues",1111],"(",")",";",["T_WHITESPACE","\n\n",1111],"}",["T_WHITESPACE","\n",1113]]