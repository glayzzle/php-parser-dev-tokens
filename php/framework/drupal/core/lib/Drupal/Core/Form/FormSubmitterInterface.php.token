[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Form",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for processing form submissions.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","FormSubmitterInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Handles the submitted form, executing callbacks and processing responses.\n   *\n   * @param array $form\n   *   An associative array containing the structure of the form.\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return null|\\Symfony\\Component\\HttpFoundation\\Response\n   *   If a response was set by a submit handler, or if the form needs to\n   *   redirect, a Response object will be returned.\n   *\/",10],["T_WHITESPACE","\n  ",21],["T_PUBLIC","public",22],["T_WHITESPACE"," ",22],["T_FUNCTION","function",22],["T_WHITESPACE"," ",22],["T_STRING","doSubmitForm",22],"(","&",["T_VARIABLE","$form",22],",",["T_WHITESPACE"," ",22],["T_STRING","FormStateInterface",22],["T_WHITESPACE"," ",22],"&",["T_VARIABLE","$form_state",22],")",";",["T_WHITESPACE","\n\n  ",22],["T_DOC_COMMENT","\/**\n   * Executes custom submission handlers for a given form.\n   *\n   * Button-specific handlers are checked first. If none exist, the function\n   * falls back to form-level handlers.\n   *\n   * @param $form\n   *   An associative array containing the structure of the form.\n   * @param $form_state\n   *   The current state of the form. If the user submitted the form by clicking\n   *   a button with custom handler functions defined, those handlers will be\n   *   stored here.\n   *\/",24],["T_WHITESPACE","\n  ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","executeSubmitHandlers",37],"(","&",["T_VARIABLE","$form",37],",",["T_WHITESPACE"," ",37],["T_STRING","FormStateInterface",37],["T_WHITESPACE"," ",37],"&",["T_VARIABLE","$form_state",37],")",";",["T_WHITESPACE","\n\n  ",37],["T_DOC_COMMENT","\/**\n   * Redirects the user to a URL after a form has been processed.\n   *\n   * After a form is submitted and processed, normally the user should be\n   * redirected to a new destination page. This function figures out what that\n   * destination should be, based on the $form_state and the 'destination'\n   * query string in the request URL, and redirects the user there.\n   *\n   * The result of \\Drupal\\Core\\Form|FormStateInterface::getRedirect()\n   * determines where to redirect the user. See the possible return values\n   * listed there. If the result is FALSE, then the user will not be redirected.\n   *\n   * Here is an example of how to set up a form to redirect to the path 'user':\n   * @code\n   * $form_state->setRedirect('user.page');\n   * @endcode\n   * And here is an example of how to redirect to 'node\/123?foo=bar#baz':\n   * @code\n   * $form_state->setRedirect('entity.node.canonical',\n   *   array('node' => 123),\n   *   array(\n   *     'query' => array(\n   *       'foo' => 'bar',\n   *     ),\n   *     'fragment' => 'baz',\n   *   ),\n   * ));\n   * @endcode\n   *\n   * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state\n   *   The current state of the form.\n   *\n   * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse|null\n   *\n   * @see \\Drupal\\Core\\Form\\FormBuilderInterface::processForm()\n   * @see \\Drupal\\Core\\Form\\FormBuilderInterface::buildForm()\n   *\/",39],["T_WHITESPACE","\n  ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","redirectForm",76],"(",["T_STRING","FormStateInterface",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$form_state",76],")",";",["T_WHITESPACE","\n\n",76],"}",["T_WHITESPACE","\n",78]]