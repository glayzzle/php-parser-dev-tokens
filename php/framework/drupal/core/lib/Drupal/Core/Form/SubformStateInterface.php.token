[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Form",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Stores information about the state of a subform.\n *\n * In the context of Drupal's Form API, a subform is a form definition array\n * that will be nested into a \"parent\" form. For instance:\n *\n * @code\n * $subform = [\n *   'method' => [\n *     '#type' => 'select',\n *     \/\/ \u00e2\u0080\u00a6\n *   ],\n * ];\n * $form = [\n *   \/\/ \u00e2\u0080\u00a6\n *   'settings' => $subform,\n * ];\n * @endcode\n *\n * All input fields nested under \"settings\" are then considered part of that\n * \"subform\". The concept is used mostly when the subform is defined by a\n * different class (potentially even in a different module) than the parent\n * form. This is often the case for plugins: a plugin's buildConfigurationForm()\n * would then be handed an instance of this interface as the second parameter.\n *\n * The benefit of doing this is that the plugin can then just define the form \u00e2\u0080\u0093\n * and use the form state \u00e2\u0080\u0093 as if it would define a \"proper\" form, not nested in\n * some other form structure. This means that it won't have to know the key(s)\n * under which its form structure will be nested \u00e2\u0080\u0093 for instance, when retrieving\n * the form values during form validation or submission.\n *\n * Contrary to \"proper\" forms, subforms don't translate to a <form> tag in the\n * HTML response. Instead, they can only be discerned in the HTML code by the\n * nesting of the input tags' names.\n *\n * @see \\Drupal\\Core\\Plugin\\PluginFormInterface::buildConfigurationForm()\n *\/",5],["T_WHITESPACE","\n",41],["T_INTERFACE","interface",42],["T_WHITESPACE"," ",42],["T_STRING","SubformStateInterface",42],["T_WHITESPACE"," ",42],["T_EXTENDS","extends",42],["T_WHITESPACE"," ",42],["T_STRING","FormStateInterface",42],["T_WHITESPACE"," ",42],"{",["T_WHITESPACE","\n\n  ",42],["T_DOC_COMMENT","\/**\n   * Gets the complete form state.\n   *\n   * @return \\Drupal\\Core\\Form\\FormStateInterface\n   *\/",44],["T_WHITESPACE","\n  ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","getCompleteFormState",49],"(",")",";",["T_WHITESPACE","\n\n",49],"}",["T_WHITESPACE","\n",51]]