[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","StringTranslation",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Interface for the translation.manager translation service.\n *\n * @ingroup i18n\n *\/",5],["T_WHITESPACE","\n",9],["T_INTERFACE","interface",10],["T_WHITESPACE"," ",10],["T_STRING","TranslationInterface",10],["T_WHITESPACE"," ",10],"{",["T_WHITESPACE","\n\n  ",10],["T_DOC_COMMENT","\/**\n   * Translates a string to the current language or to a given language.\n   *\n   * Never call this translate() method directly. In order for strings to be\n   * localized, make them available in one of the ways supported by the\n   * @link https:\/\/www.drupal.org\/node\/322729 Localization API @endlink. When\n   * possible, use the \\Drupal\\Core\\StringTranslation\\StringTranslationTrait\n   * $this->t(). Otherwise create a new\n   * \\Drupal\\Core\\StringTranslation\\TranslatableMarkup object.\n   *\n   * @param string $string\n   *   A string containing the English text to translate.\n   * @param array $args\n   *   (optional) An associative array of replacements to make after\n   *   translation. Based on the first character of the key, the value is\n   *   escaped and\/or themed. See\n   *   \\Drupal\\Component\\Render\\FormattableMarkup::placeholderFormat() for\n   *   details.\n   * @param array $options\n   *   (optional) An associative array of additional options, with the following\n   *   elements:\n   *   - 'langcode' (defaults to the current language): A language code, to\n   *     translate to a language other than what is used to display the page.\n   *   - 'context' (defaults to the empty context): The context the source\n   *     string belongs to. See the\n   *     @link i18n Internationalization topic @endlink for more information\n   *     about string contexts.\n   *\n   * @return \\Drupal\\Core\\StringTranslation\\TranslatableMarkup\n   *   An object that, when cast to a string, returns the translated string.\n   *\n   * @see \\Drupal\\Component\\Render\\FormattableMarkup::placeholderFormat()\n   * @see \\Drupal\\Core\\StringTranslation\\TranslatableMarkup::__construct()\n   *\n   * @ingroup sanitization\n   *\/",12],["T_WHITESPACE","\n  ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","translate",48],"(",["T_VARIABLE","$string",48],",",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$args",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],"(",")",",",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$options",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_ARRAY","array",48],"(",")",")",";",["T_WHITESPACE","\n\n  ",48],["T_DOC_COMMENT","\/**\n   * Translates a TranslatableMarkup object to a string.\n   *\n   * @param \\Drupal\\Core\\StringTranslation\\TranslatableMarkup $translated_string\n   *   A TranslatableMarkup object.\n   *\n   * @return string\n   *   The translated string.\n   *\/",50],["T_WHITESPACE","\n  ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","translateString",59],"(",["T_STRING","TranslatableMarkup",59],["T_WHITESPACE"," ",59],["T_VARIABLE","$translated_string",59],")",";",["T_WHITESPACE","\n\n  ",59],["T_DOC_COMMENT","\/**\n   * Formats a string containing a count of items.\n   *\n   * This function ensures that the string is pluralized correctly. Since\n   * TranslationInterface::translate() is called by this function, make sure not\n   * to pass already-localized strings to it. See\n   * PluralTranslatableMarkup::createFromTranslatedString() for that.\n   *\n   * For example:\n   * @code\n   *   $output = $string_translation->formatPlural($node->comment_count, '1 comment', '@count comments');\n   * @endcode\n   *\n   * Example with additional replacements:\n   * @code\n   *   $output = $string_translation->formatPlural($update_count,\n   *     'Changed the content type of 1 post from %old-type to %new-type.',\n   *     'Changed the content type of @count posts from %old-type to %new-type.',\n   *     array('%old-type' => $info->old_type, '%new-type' => $info->new_type));\n   * @endcode\n   *\n   * @param int $count\n   *   The item count to display.\n   * @param string $singular\n   *   The string for the singular case. Make sure it is clear this is singular,\n   *   to ease translation (e.g. use \"1 new comment\" instead of \"1 new\"). Do not\n   *   use @count in the singular string.\n   * @param string $plural\n   *   The string for the plural case. Make sure it is clear this is plural, to\n   *   ease translation. Use @count in place of the item count, as in\n   *   \"@count new comments\".\n   * @param array $args\n   *   An associative array of replacements to make after translation. Instances\n   *   of any key in this array are replaced with the corresponding value.\n   *   Based on the first character of the key, the value is escaped and\/or\n   *   themed. See \\Drupal\\Component\\Utility\\SafeMarkup::format(). Note that you do\n   *   not need to include @count in this array; this replacement is done\n   *   automatically for the plural cases.\n   * @param array $options\n   *   An associative array of additional options. See t() for allowed keys.\n   *\n   * @return \\Drupal\\Core\\StringTranslation\\PluralTranslatableMarkup\n   *   A translated string.\n   *\n   * @see \\Drupal\\Core\\StringTranslation\\TranslationInterface::translate()\n   * @see t()\n   * @see \\Drupal\\Component\\Utility\\SafeMarkup::format()\n   * @see \\Drupal\\Core\\StringTranslation\\PluralTranslatableMarkup::createFromTranslatedString()\n   *\/",61],["T_WHITESPACE","\n  ",109],["T_PUBLIC","public",110],["T_WHITESPACE"," ",110],["T_FUNCTION","function",110],["T_WHITESPACE"," ",110],["T_STRING","formatPlural",110],"(",["T_VARIABLE","$count",110],",",["T_WHITESPACE"," ",110],["T_VARIABLE","$singular",110],",",["T_WHITESPACE"," ",110],["T_VARIABLE","$plural",110],",",["T_WHITESPACE"," ",110],["T_ARRAY","array",110],["T_WHITESPACE"," ",110],["T_VARIABLE","$args",110],["T_WHITESPACE"," ",110],"=",["T_WHITESPACE"," ",110],["T_ARRAY","array",110],"(",")",",",["T_WHITESPACE"," ",110],["T_ARRAY","array",110],["T_WHITESPACE"," ",110],["T_VARIABLE","$options",110],["T_WHITESPACE"," ",110],"=",["T_WHITESPACE"," ",110],["T_ARRAY","array",110],"(",")",")",";",["T_WHITESPACE","\n\n",110],"}",["T_WHITESPACE","\n",112]]