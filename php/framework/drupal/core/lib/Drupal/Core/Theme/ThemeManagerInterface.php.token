[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Theme",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides a high level access to the active theme and methods to use it.\n *\n * Beside the active theme it provides a wrapper around _theme as well as the\n * alter functionality for themes.\n *\/",5],["T_WHITESPACE","\n",10],["T_INTERFACE","interface",11],["T_WHITESPACE"," ",11],["T_STRING","ThemeManagerInterface",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * Generates themed output.\n   *\n   * See the @link themeable Default theme implementations topic @endlink for\n   * details.\n   *\n   * @param string $hook\n   *   The name of the theme hook to call.\n   * @param array $variables\n   *   An associative array of theme variables.\n   *\n   * @return string|\\Drupal\\Component\\Render\\MarkupInterface\n   *   The rendered output, or a Markup object.\n   *\/",13],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","render",27],"(",["T_VARIABLE","$hook",27],",",["T_WHITESPACE"," ",27],["T_ARRAY","array",27],["T_WHITESPACE"," ",27],["T_VARIABLE","$variables",27],")",";",["T_WHITESPACE","\n\n  ",27],["T_DOC_COMMENT","\/**\n   * Returns the active theme object.\n   *\n   * @return \\Drupal\\Core\\Theme\\ActiveTheme\n   *\/",29],["T_WHITESPACE","\n  ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","getActiveTheme",34],"(",")",";",["T_WHITESPACE","\n\n  ",34],["T_DOC_COMMENT","\/**\n   * Determines whether there is an active theme.\n   *\n   * @return bool\n   *\/",36],["T_WHITESPACE","\n  ",40],["T_PUBLIC","public",41],["T_WHITESPACE"," ",41],["T_FUNCTION","function",41],["T_WHITESPACE"," ",41],["T_STRING","hasActiveTheme",41],"(",")",";",["T_WHITESPACE","\n\n  ",41],["T_DOC_COMMENT","\/**\n   * Resets the current active theme.\n   *\n   * Note: This method should not be used in common cases, just in special cases\n   * like tests.\n   *\n   * @return $this\n   *\/",43],["T_WHITESPACE","\n  ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","resetActiveTheme",51],"(",")",";",["T_WHITESPACE","\n\n  ",51],["T_DOC_COMMENT","\/**\n   * Sets the current active theme manually.\n   *\n   * Note: This method should not be used in common cases, just in special cases\n   * like tests.\n   *\n   * @param \\Drupal\\Core\\Theme\\ActiveTheme $active_theme\n   *   The new active theme.\n   * @return $this\n   *\/",53],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","setActiveTheme",63],"(",["T_STRING","ActiveTheme",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$active_theme",63],")",";",["T_WHITESPACE","\n\n  ",63],["T_DOC_COMMENT","\/**\n   * Passes alterable variables to specific $theme_TYPE_alter() implementations.\n   *\n   * Executes an alter hook on the current theme. It also invokes alter hooks\n   * for all base themes.\n   *\n   * $theme specifies the theme name of the active theme and all its base\n   * themes.\n   *\n   * This dispatch function hands off the passed-in variables to type-specific\n   * $theme_TYPE_alter() implementations in the active theme. It ensures a\n   * consistent interface for all altering operations.\n   *\n   * A maximum of 2 alterable arguments is supported. In case more arguments\n   * need to be passed and alterable, modules provide additional variables\n   * assigned by reference in the last $context argument:\n   * @code\n   *   $context = array(\n   *     'alterable' => &$alterable,\n   *     'unalterable' => $unalterable,\n   *     'foo' => 'bar',\n   *   );\n   *   $this->alter('mymodule_data', $alterable1, $alterable2, $context);\n   * @endcode\n   *\n   * Note that objects are always passed by reference in PHP5. If it is\n   * absolutely required that no implementation alters a passed object in\n   * $context, then an object needs to be cloned:\n   * @code\n   *   $context = array(\n   *     'unalterable_object' => clone $object,\n   *   );\n   *   $this->alter('mymodule_data', $data, $context);\n   * @endcode\n   *\n   * @param string|array $type\n   *   A string describing the type of the alterable $data. 'form', 'links',\n   *   'node_content', and so on are several examples. Alternatively can be an\n   *   array, in which case $theme_TYPE_alter() is invoked for each value in the\n   *   array. When Form API is using $this->alter() to\n   *   execute both $theme_form_alter() and $theme_form_FORM_ID_alter()\n   *   implementations, it passes array('form', 'form_' . $form_id) for $type.\n   * @param mixed $data\n   *   The variable that will be passed to $theme_TYPE_alter() implementations\n   *   to be altered. The type of this variable depends on the value of the\n   *   $type argument. For example, when altering a 'form', $data will be a\n   *   structured array. When altering a 'profile', $data will be an object.\n   * @param mixed $context1\n   *   (optional) An additional variable that is passed by reference.\n   * @param mixed $context2\n   *   (optional) An additional variable that is passed by reference. If more\n   *   context needs to be provided to implementations, then this should be an\n   *   associative array as described above.\n   *\n   * @see \\Drupal\\Core\\Extension\\ModuleHandlerInterface\n   *\/",65],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","alter",121],"(",["T_VARIABLE","$type",121],",",["T_WHITESPACE"," ",121],"&",["T_VARIABLE","$data",121],",",["T_WHITESPACE"," ",121],"&",["T_VARIABLE","$context1",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_STRING","NULL",121],",",["T_WHITESPACE"," ",121],"&",["T_VARIABLE","$context2",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_STRING","NULL",121],")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Provides an alter hook for a specific theme.\n   *\n   * Similar to ::alter, it also invokes the alter hooks for the base themes.\n   *\n   * @param \\Drupal\\Core\\Theme\\ActiveTheme $theme\n   *   A manually specified theme.\n   * @param string|array $type\n   *   A string describing the type of the alterable $data.\n   * @param mixed $data\n   *   The variable that will be passed to $theme_TYPE_alter() implementations\n   * @param mixed $context1\n   *   (optional) An additional variable that is passed by reference.\n   * @param mixed $context2\n   *   (optional) An additional variable that is passed by reference.\n   *\n   * @see ::alter\n   *\/",123],["T_WHITESPACE","\n  ",140],["T_PUBLIC","public",141],["T_WHITESPACE"," ",141],["T_FUNCTION","function",141],["T_WHITESPACE"," ",141],["T_STRING","alterForTheme",141],"(",["T_STRING","ActiveTheme",141],["T_WHITESPACE"," ",141],["T_VARIABLE","$theme",141],",",["T_WHITESPACE"," ",141],["T_VARIABLE","$type",141],",",["T_WHITESPACE"," ",141],"&",["T_VARIABLE","$data",141],",",["T_WHITESPACE"," ",141],"&",["T_VARIABLE","$context1",141],["T_WHITESPACE"," ",141],"=",["T_WHITESPACE"," ",141],["T_STRING","NULL",141],",",["T_WHITESPACE"," ",141],"&",["T_VARIABLE","$context2",141],["T_WHITESPACE"," ",141],"=",["T_WHITESPACE"," ",141],["T_STRING","NULL",141],")",";",["T_WHITESPACE","\n\n",141],"}",["T_WHITESPACE","\n",143]]