[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Mail",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Defines an interface for pluggable mail back-ends.\n *\n * @see \\Drupal\\Core\\Annotation\\Mail\n * @see \\Drupal\\Core\\Mail\\MailManager\n * @see plugin_api\n *\/",5],["T_WHITESPACE","\n",11],["T_INTERFACE","interface",12],["T_WHITESPACE"," ",12],["T_STRING","MailInterface",12],["T_WHITESPACE"," ",12],"{",["T_WHITESPACE","\n\n  ",12],["T_DOC_COMMENT","\/**\n   * Formats a message prior to sending.\n   *\n   * Allows to preprocess, format, and postprocess a mail message before it is\n   * passed to the sending system. By default, all messages may contain HTML and\n   * are converted to plain-text by the Drupal\\Core\\Mail\\Plugin\\Mail\\PhpMail\n   * implementation. For example, an alternative implementation could override\n   * the default implementation and also sanitize the HTML for usage in a MIME-\n   * encoded email, but still invoking the Drupal\\Core\\Mail\\Plugin\\Mail\\PhpMail\n   * implementation to generate an alternate plain-text version for sending.\n   *\n   * @param array $message\n   *   A message array, as described in hook_mail_alter().\n   *\n   * @return array\n   *   The formatted $message.\n   *\n   * @see \\Drupal\\Core\\Mail\\MailManagerInterface\n   *\/",14],["T_WHITESPACE","\n  ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_FUNCTION","function",33],["T_WHITESPACE"," ",33],["T_STRING","format",33],"(",["T_ARRAY","array",33],["T_WHITESPACE"," ",33],["T_VARIABLE","$message",33],")",";",["T_WHITESPACE","\n\n  ",33],["T_DOC_COMMENT","\/**\n   * Sends a message composed by \\Drupal\\Core\\Mail\\MailManagerInterface->mail().\n   *\n   * @param array $message\n   *   Message array with at least the following elements:\n   *   - id: A unique identifier of the email type. Examples: 'contact_user_copy',\n   *     'user_password_reset'.\n   *   - to: The mail address or addresses where the message will be sent to.\n   *     The formatting of this string will be validated with the\n   *     @link http:\/\/php.net\/manual\/filter.filters.validate.php PHP email validation filter. @endlink\n   *     Some examples:\n   *     - user@example.com\n   *     - user@example.com, anotheruser@example.com\n   *     - User <user@example.com>\n   *     - User <user@example.com>, Another User <anotheruser@example.com>\n   *   - subject: Subject of the email to be sent. This must not contain any\n   *     newline characters, or the mail may not be sent properly. The subject\n   *     is converted to plain text by the mail plugin manager.\n   *   - body: Message to be sent. Accepts both CRLF and LF line-endings.\n   *     Email bodies must be wrapped. For smart plain text wrapping you can use\n   *     \\Drupal\\Core\\Mail\\MailFormatHelper::wrapMail() .\n   *   - headers: Associative array containing all additional mail headers not\n   *     defined by one of the other parameters.  PHP's mail() looks for Cc and\n   *     Bcc headers and sends the mail to addresses in these headers too.\n   *\n   * @return bool\n   *   TRUE if the mail was successfully accepted for delivery, otherwise FALSE.\n   *\/",35],["T_WHITESPACE","\n  ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_FUNCTION","function",63],["T_WHITESPACE"," ",63],["T_STRING","mail",63],"(",["T_ARRAY","array",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$message",63],")",";",["T_WHITESPACE","\n\n",63],"}",["T_WHITESPACE","\n",65]]