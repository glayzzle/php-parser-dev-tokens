[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","File",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * Provides an interface for helpers that operate on files and stream wrappers.\n *\/",5],["T_WHITESPACE","\n",7],["T_INTERFACE","interface",8],["T_WHITESPACE"," ",8],["T_STRING","FileSystemInterface",8],["T_WHITESPACE"," ",8],"{",["T_WHITESPACE","\n\n  ",8],["T_DOC_COMMENT","\/**\n   * Moves an uploaded file to a new location.\n   *\n   * PHP's move_uploaded_file() does not properly support streams if\n   * open_basedir is enabled, so this function fills that gap.\n   *\n   * Compatibility: normal paths and stream wrappers.\n   *\n   * @param string $filename\n   *   The filename of the uploaded file.\n   * @param string $uri\n   *   A string containing the destination URI of the file.\n   *\n   * @return bool\n   *   TRUE on success, or FALSE on failure.\n   *\n   * @see move_uploaded_file()\n   * @see https:\/\/www.drupal.org\/node\/515192\n   * @ingroup php_wrappers\n   *\/",10],["T_WHITESPACE","\n  ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","moveUploadedFile",30],"(",["T_VARIABLE","$filename",30],",",["T_WHITESPACE"," ",30],["T_VARIABLE","$uri",30],")",";",["T_WHITESPACE","\n\n  ",30],["T_DOC_COMMENT","\/**\n   * Sets the permissions on a file or directory.\n   *\n   * This function will use the file_chmod_directory and\n   * file_chmod_file settings for the default modes for directories\n   * and uploaded\/generated files. By default these will give everyone read\n   * access so that users accessing the files with a user account without the\n   * webserver group (e.g. via FTP) can read these files, and give group write\n   * permissions so webserver group members (e.g. a vhost account) can alter\n   * files uploaded and owned by the webserver.\n   *\n   * PHP's chmod does not support stream wrappers so we use our wrapper\n   * implementation which interfaces with chmod() by default. Contrib wrappers\n   * may override this behavior in their implementations as needed.\n   *\n   * @param string $uri\n   *   A string containing a URI file, or directory path.\n   * @param int $mode\n   *   Integer value for the permissions. Consult PHP chmod() documentation for\n   *   more information.\n   *\n   * @return bool\n   *   TRUE for success, FALSE in the event of an error.\n   *\n   * @ingroup php_wrappers\n   *\/",32],["T_WHITESPACE","\n  ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","chmod",58],"(",["T_VARIABLE","$uri",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$mode",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_STRING","NULL",58],")",";",["T_WHITESPACE","\n\n  ",58],["T_DOC_COMMENT","\/**\n   * Deletes a file.\n   *\n   * PHP's unlink() is broken on Windows, as it can fail to remove a file when\n   * it has a read-only flag set.\n   *\n   * @param string $uri\n   *   A URI or pathname.\n   * @param resource $context\n   *   Refer to http:\/\/php.net\/manual\/ref.stream.php\n   *\n   * @return bool\n   *   Boolean TRUE on success, or FALSE on failure.\n   *\n   * @see unlink()\n   * @ingroup php_wrappers\n   *\/",60],["T_WHITESPACE","\n  ",76],["T_PUBLIC","public",77],["T_WHITESPACE"," ",77],["T_FUNCTION","function",77],["T_WHITESPACE"," ",77],["T_STRING","unlink",77],"(",["T_VARIABLE","$uri",77],",",["T_WHITESPACE"," ",77],["T_VARIABLE","$context",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_STRING","NULL",77],")",";",["T_WHITESPACE","\n\n  ",77],["T_DOC_COMMENT","\/**\n   * Resolves the absolute filepath of a local URI or filepath.\n   *\n   * The use of this method is discouraged, because it does not work for\n   * remote URIs. Except in rare cases, URIs should not be manually resolved.\n   *\n   * Only use this function if you know that the stream wrapper in the URI uses\n   * the local file system, and you need to pass an absolute path to a function\n   * that is incompatible with stream URIs.\n   *\n   * @param string $uri\n   *   A stream wrapper URI or a filepath, possibly including one or more\n   *   symbolic links.\n   *\n   * @return string|false\n   *   The absolute local filepath (with no symbolic links) or FALSE on failure.\n   *\n   * @see \\Drupal\\Core\\StreamWrapper\\StreamWrapperInterface::realpath()\n   * @see http:\/\/php.net\/manual\/function.realpath.php\n   * @ingroup php_wrappers\n   *\/",79],["T_WHITESPACE","\n  ",99],["T_PUBLIC","public",100],["T_WHITESPACE"," ",100],["T_FUNCTION","function",100],["T_WHITESPACE"," ",100],["T_STRING","realpath",100],"(",["T_VARIABLE","$uri",100],")",";",["T_WHITESPACE","\n\n  ",100],["T_DOC_COMMENT","\/**\n   * Gets the name of the directory from a given path.\n   *\n   * PHP's dirname() does not properly pass streams, so this function fills that\n   * gap. It is backwards compatible with normal paths and will use PHP's\n   * dirname() as a fallback.\n   *\n   * Compatibility: normal paths and stream wrappers.\n   *\n   * @param string $uri\n   *   A URI or path.\n   *\n   * @return string\n   *   A string containing the directory name.\n   *\n   * @see dirname()\n   * @see https:\/\/www.drupal.org\/node\/515192\n   * @ingroup php_wrappers\n   *\/",102],["T_WHITESPACE","\n  ",120],["T_PUBLIC","public",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","dirname",121],"(",["T_VARIABLE","$uri",121],")",";",["T_WHITESPACE","\n\n  ",121],["T_DOC_COMMENT","\/**\n   * Gets the filename from a given path.\n   *\n   * PHP's basename() does not properly support streams or filenames beginning\n   * with a non-US-ASCII character.\n   *\n   * @see http:\/\/bugs.php.net\/bug.php?id=37738\n   * @see basename()\n   *\n   * @ingroup php_wrappers\n   *\/",123],["T_WHITESPACE","\n  ",133],["T_PUBLIC","public",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","basename",134],"(",["T_VARIABLE","$uri",134],",",["T_WHITESPACE"," ",134],["T_VARIABLE","$suffix",134],["T_WHITESPACE"," ",134],"=",["T_WHITESPACE"," ",134],["T_STRING","NULL",134],")",";",["T_WHITESPACE","\n\n  ",134],["T_DOC_COMMENT","\/**\n   * Creates a directory, optionally creating missing components in the path to\n   * the directory.\n   *\n   * When PHP's mkdir() creates a directory, the requested mode is affected by\n   * the process's umask. This function overrides the umask and sets the mode\n   * explicitly for all directory components created.\n   *\n   * @param string $uri\n   *   A URI or pathname.\n   * @param int $mode\n   *   Mode given to created directories. Defaults to the directory mode\n   *   configured in the Drupal installation. It must have a leading zero.\n   * @param bool $recursive\n   *   Create directories recursively, defaults to FALSE. Cannot work with a\n   *   mode which denies writing or execution to the owner of the process.\n   * @param resource $context\n   *   Refer to http:\/\/php.net\/manual\/ref.stream.php\n   *\n   * @return bool\n   *   Boolean TRUE on success, or FALSE on failure.\n   *\n   * @see mkdir()\n   * @see https:\/\/www.drupal.org\/node\/515192\n   * @ingroup php_wrappers\n   *\n   * @todo Update with open_basedir compatible recursion logic from\n   *   \\Drupal\\Component\\PhpStorage\\FileStorage::ensureDirectory().\n   *\/",136],["T_WHITESPACE","\n  ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","mkdir",165],"(",["T_VARIABLE","$uri",165],",",["T_WHITESPACE"," ",165],["T_VARIABLE","$mode",165],["T_WHITESPACE"," ",165],"=",["T_WHITESPACE"," ",165],["T_STRING","NULL",165],",",["T_WHITESPACE"," ",165],["T_VARIABLE","$recursive",165],["T_WHITESPACE"," ",165],"=",["T_WHITESPACE"," ",165],["T_STRING","FALSE",165],",",["T_WHITESPACE"," ",165],["T_VARIABLE","$context",165],["T_WHITESPACE"," ",165],"=",["T_WHITESPACE"," ",165],["T_STRING","NULL",165],")",";",["T_WHITESPACE","\n\n  ",165],["T_DOC_COMMENT","\/**\n   * Removes a directory.\n   *\n   * PHP's rmdir() is broken on Windows, as it can fail to remove a directory\n   * when it has a read-only flag set.\n   *\n   * @param string $uri\n   *   A URI or pathname.\n   * @param resource $context\n   *   Refer to http:\/\/php.net\/manual\/ref.stream.php\n   *\n   * @return bool\n   *   Boolean TRUE on success, or FALSE on failure.\n   *\n   * @see rmdir()\n   * @ingroup php_wrappers\n   *\/",167],["T_WHITESPACE","\n  ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","rmdir",184],"(",["T_VARIABLE","$uri",184],",",["T_WHITESPACE"," ",184],["T_VARIABLE","$context",184],["T_WHITESPACE"," ",184],"=",["T_WHITESPACE"," ",184],["T_STRING","NULL",184],")",";",["T_WHITESPACE","\n\n  ",184],["T_DOC_COMMENT","\/**\n   * Creates a file with a unique filename in the specified directory.\n   *\n   * PHP's tempnam() does not return a URI like we want. This function will\n   * return a URI if given a URI, or it will return a filepath if given a\n   * filepath.\n   *\n   * Compatibility: normal paths and stream wrappers.\n   *\n   * @param string $directory\n   *   The directory where the temporary filename will be created.\n   * @param string $prefix\n   *   The prefix of the generated temporary filename.\n   *   Note: Windows uses only the first three characters of prefix.\n   *\n   * @return string|bool\n   *   The new temporary filename, or FALSE on failure.\n   *\n   * @see tempnam()\n   * @see https:\/\/www.drupal.org\/node\/515192\n   * @ingroup php_wrappers\n   *\/",186],["T_WHITESPACE","\n  ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","tempnam",208],"(",["T_VARIABLE","$directory",208],",",["T_WHITESPACE"," ",208],["T_VARIABLE","$prefix",208],")",";",["T_WHITESPACE","\n\n  ",208],["T_DOC_COMMENT","\/**\n   * Returns the scheme of a URI (e.g. a stream).\n   *\n   * @param string $uri\n   *   A stream, referenced as \"scheme:\/\/target\" or \"data:target\".\n   *\n   * @return string|bool\n   *   A string containing the name of the scheme, or FALSE if none. For\n   *   example, the URI \"public:\/\/example.txt\" would return \"public\".\n   *\n   * @see file_uri_target()\n   *\/",210],["T_WHITESPACE","\n  ",221],["T_PUBLIC","public",222],["T_WHITESPACE"," ",222],["T_FUNCTION","function",222],["T_WHITESPACE"," ",222],["T_STRING","uriScheme",222],"(",["T_VARIABLE","$uri",222],")",";",["T_WHITESPACE","\n\n  ",222],["T_DOC_COMMENT","\/**\n   * Checks that the scheme of a stream URI is valid.\n   *\n   * Confirms that there is a registered stream handler for the provided scheme\n   * and that it is callable. This is useful if you want to confirm a valid\n   * scheme without creating a new instance of the registered handler.\n   *\n   * @param string $scheme\n   *   A URI scheme, a stream is referenced as \"scheme:\/\/target\".\n   *\n   * @return bool\n   *   Returns TRUE if the string is the name of a validated stream, or FALSE if\n   *   the scheme does not have a registered handler.\n   *\/",224],["T_WHITESPACE","\n  ",237],["T_PUBLIC","public",238],["T_WHITESPACE"," ",238],["T_FUNCTION","function",238],["T_WHITESPACE"," ",238],["T_STRING","validScheme",238],"(",["T_VARIABLE","$scheme",238],")",";",["T_WHITESPACE","\n\n",238],"}",["T_WHITESPACE","\n",240]]