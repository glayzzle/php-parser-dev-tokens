[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_DOC_COMMENT","\/**\n * @file\n * Documentation landing page and topics, plus core library hooks.\n *\/",3],["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * @mainpage\n * Welcome to the Drupal API Documentation!\n *\n * This site is an API reference for Drupal, generated from comments embedded\n * in the source code. More in-depth documentation can be found at\n * https:\/\/www.drupal.org\/developing\/api.\n *\n * Here are some topics to help you get started developing with Drupal.\n *\n * @section essentials Essential background concepts\n *\n * - @link oo_conventions Object-oriented conventions used in Drupal @endlink\n * - @link extending Extending and altering Drupal @endlink\n * - @link best_practices Security and best practices @endlink\n * - @link info_types Types of information in Drupal @endlink\n *\n * @section interface User interface\n *\n * - @link menu Menu entries, local tasks, and other links @endlink\n * - @link routing Routing API and page controllers @endlink\n * - @link form_api Forms @endlink\n * - @link block_api Blocks @endlink\n * - @link ajax Ajax @endlink\n *\n * @section store_retrieve Storing and retrieving data\n *\n * - @link entity_api Entities @endlink\n * - @link field Fields @endlink\n * - @link config_api Configuration API @endlink\n * - @link state_api State API @endlink\n * - @link views_overview Views @endlink\n * - @link database Database abstraction layer @endlink\n *\n * @section other_essentials Other essential APIs\n *\n * - @link plugin_api Plugins @endlink\n * - @link container Services and the Dependency Injection Container @endlink\n * - @link events Events @endlink\n * - @link i18n Internationalization @endlink\n * - @link cache Caching @endlink\n * - @link utility Utility classes and functions @endlink\n * - @link user_api User accounts, permissions, and roles @endlink\n * - @link theme_render Render API @endlink\n * - @link themeable Theme system @endlink\n * - @link update_api Update API @endlink\n * - @link migration Migration @endlink\n *\n * @section additional Additional topics\n *\n * - @link batch Batch API @endlink\n * - @link queue Queue API @endlink\n * - @link typed_data Typed Data @endlink\n * - @link testing Automated tests @endlink\n * - @link php_assert PHP Runtime Assert Statements @endlink\n * - @link third_party Integrating third-party applications @endlink\n *\n * @section more_info Further information\n *\n * - @link https:\/\/api.drupal.org\/api\/drupal\/groups\/8 All topics @endlink\n * - @link https:\/\/www.drupal.org\/project\/examples Examples project (sample modules) @endlink\n * - @link https:\/\/www.drupal.org\/list-changes API change notices @endlink\n * - @link https:\/\/www.drupal.org\/developing\/api\/8 Drupal 8 API longer references @endlink\n *\/",8],["T_WHITESPACE","\n\n",71],["T_DOC_COMMENT","\/**\n * @defgroup third_party REST and Application Integration\n * @{\n * Integrating third-party applications using REST and related operations.\n *\n * @section sec_overview Overview of web services\n * Web services make it possible for applications and web sites to read and\n * update information from other web sites. There are several standard\n * techniques for providing web services, including:\n * - SOAP: http:\/\/wikipedia.org\/wiki\/SOAP\n * - XML-RPC: http:\/\/wikipedia.org\/wiki\/XML-RPC\n * - REST: http:\/\/wikipedia.org\/wiki\/Representational_state_transfer\n * Drupal sites can both provide web services and integrate third-party web\n * services.\n *\n * @section sec_rest_overview Overview of REST\n * The REST technique uses basic HTTP requests to obtain and update data, where\n * each web service defines a specific API (HTTP GET and\/or POST parameters and\n * returned response) for its HTTP requests. REST requests are separated into\n * several types, known as methods, including:\n * - GET: Requests to obtain data.\n * - POST: Requests to update or create data.\n * - PUT: Requests to update or create data (limited support, currently unused\n *   by entity resources).\n * - PATCH: Requests to update a subset of data, such as one field.\n * - DELETE: Requests to delete data.\n * The Drupal Core REST module provides support for GET, POST, PATCH, and DELETE\n * quests on entities, GET requests on the database log from the Database\n * Logging module, and a plugin framework for providing REST support for other\n * data and other methods.\n *\n * REST requests can be authenticated. The Drupal Core Basic Auth module\n * provides authentication using the HTTP Basic protocol; the contributed module\n * OAuth (https:\/\/www.drupal.org\/project\/oauth) implements the OAuth\n * authentication protocol. You can also use cookie-based authentication, which\n * would require users to be logged into the Drupal site while using the\n * application on the third-party site that is using the REST service.\n *\n * @section sec_rest Enabling REST for entities and the log\n * Here are the steps to take to use the REST operations provided by Drupal\n * Core:\n * - Enable the REST module, plus Basic Auth (or another authentication method)\n *   and HAL.\n * - Node entity support is configured by default. If you would like to support\n *   other types of entities, you can copy\n *   core\/modules\/rest\/config\/install\/rest.settings.yml to your sync\n *   configuration directory, appropriately modified for other entity types,\n *   and import it. Support for GET on the log from the Database Logging module\n *   can also be enabled in this way; in this case, the 'entity:node' line\n *   in the configuration would be replaced by the appropriate plugin ID,\n *   'dblog'.\n * - Set up permissions to allow the desired REST operations for a role, and set\n *   up one or more user accounts to perform the operations.\n * - To perform a REST operation, send a request to either the canonical URL\n *   for an entity (such as node\/12345 for a node), or if the entity does not\n *   have a canonical URL, a URL like entity\/(type)\/(ID). The URL for a log\n *   entry is dblog\/(ID). The request must have the following properties:\n *   - The request method must be set to the REST method you are using (POST,\n *     GET, PATCH, etc.).\n *   - The content type for the data you send, or the accept type for the\n *     data you are receiving, must be set to 'application\/hal+json'.\n *   - If you are sending data, it must be JSON-encoded.\n *   - You'll also need to make sure the authentication information is sent\n *     with the request, unless you have allowed access to anonymous users.\n *\n * For more detailed information on setting up REST, see\n * https:\/\/www.drupal.org\/documentation\/modules\/rest.\n *\n * @section sec_plugins Defining new REST plugins\n * The REST framework in the REST module has support built in for entities, but\n * it is also an extensible plugin-based system. REST plugins implement\n * interface \\Drupal\\rest\\Plugin\\ResourceInterface, and generally extend base\n * class \\Drupal\\rest\\Plugin\\ResourceBase. They are annotated with\n * \\Drupal\\rest\\Annotation\\RestResource annotation, and must be in plugin\n * namespace subdirectory Plugin\\rest\\resource. For more information on how to\n * create plugins, see the @link plugin_api Plugin API topic. @endlink\n *\n * If you create a new REST plugin, you will also need to enable it by\n * providing default configuration or configuration import, as outlined in\n * @ref sec_rest above.\n *\n * @section sec_integrate Integrating data from other sites into Drupal\n * If you want to integrate data from other web sites into Drupal, here are\n * some notes:\n * - There are contributed modules available for integrating many third-party\n *   sites into Drupal. Search on https:\/\/www.drupal.org\/project\/project_module\n * - If there is not an existing module, you will need to find documentation on\n *   the specific web services API for the site you are trying to integrate.\n * - There are several classes and functions that are useful for interacting\n *   with web services:\n *   - You should make requests using the 'http_client' service, which\n *     implements \\GuzzleHttp\\ClientInterface. See the\n *     @link container Services topic @endlink for more information on\n *     services. If you cannot use dependency injection to retrieve this\n *     service, the \\Drupal::httpClient() method is available. A good example\n *     of how to use this service can be found in\n *     \\Drupal\\aggregator\\Plugin\\aggregator\\fetcher\\DefaultFetcher\n *   - \\Drupal\\Component\\Serialization\\Json (JSON encoding and decoding).\n *   - PHP has functions and classes for parsing XML; see\n *     http:\/\/php.net\/manual\/refs.xml.php\n * @}\n *\/",73],["T_WHITESPACE","\n\n",174],["T_DOC_COMMENT","\/**\n * @defgroup state_api State API\n * @{\n * Information about the State API.\n *\n * The State API is one of several methods in Drupal for storing information.\n * See the @link info_types Information types topic @endlink for an\n * overview of the different types of information.\n *\n * The basic entry point into the State API is \\Drupal::state(), which returns\n * an object of class \\Drupal\\Core\\State\\StateInterface. This class has\n * methods for storing and retrieving state information; each piece of state\n * information is associated with a string-valued key. Example:\n * @code\n * \/\/ Get the state class.\n * $state = \\Drupal::state();\n * \/\/ Find out when cron was last run; the key is 'system.cron_last'.\n * $time = $state->get('system.cron_last');\n * \/\/ Set the cron run time to the current request time.\n * $state->set('system.cron_last', REQUEST_TIME);\n * @endcode\n *\n * For more on the State API, see https:\/\/www.drupal.org\/developing\/api\/8\/state\n * @}\n *\/",176],["T_WHITESPACE","\n\n",200],["T_DOC_COMMENT","\/**\n * @defgroup config_api Configuration API\n * @{\n * Information about the Configuration API.\n *\n * The Configuration API is one of several methods in Drupal for storing\n * information. See the @link info_types Information types topic @endlink for\n * an overview of the different types of information. The sections below have\n * more information about the configuration API; see\n * https:\/\/www.drupal.org\/developing\/api\/8\/configuration for more details.\n *\n * @section sec_storage Configuration storage\n * In Drupal, there is a concept of the \"active\" configuration, which is the\n * configuration that is currently in use for a site. The storage used for the\n * active configuration is configurable: it could be in the database, in files\n * in a particular directory, or in other storage backends; the default storage\n * is in the database. Module developers must use the configuration API to\n * access the active configuration, rather than being concerned about the\n * details of where and how it is stored.\n *\n * Configuration is divided into individual objects, each of which has a\n * unique name or key. Some modules will have only one configuration object,\n * typically called 'mymodule.settings'; some modules will have many. Within\n * a configuration object, configuration settings have data types (integer,\n * string, Boolean, etc.) and settings can also exist in a nested hierarchy,\n * known as a \"mapping\".\n *\n * Configuration can also be overridden on a global, per-language, or\n * per-module basis. See https:\/\/www.drupal.org\/node\/1928898 for more\n * information.\n *\n * @section sec_yaml Configuration YAML files\n * Whether or not configuration files are being used for the active\n * configuration storage on a particular site, configuration files are always\n * used for:\n * - Defining the default configuration for an extension (module, theme, or\n *   profile), which is imported to the active storage when the extension is\n *   enabled. These configuration items are located in the config\/install\n *   sub-directory of the extension. Note that changes to this configuration\n *   after a module or theme is already enabled have no effect; to make a\n *   configuration change after a module or theme is enabled, you would need to\n *   uninstall\/reinstall or use a hook_update_N() function.\n * - Defining optional configuration for a module or theme. Optional\n *   configuration items are located in the config\/optional sub-directory of the\n *   extension. These configuration items have dependencies that are not\n *   explicit dependencies of the extension, so they are only installed if all\n *   dependencies are met. For example, in the scenario that module A defines a\n *   dependency which requires module B, but module A is installed first and\n *   module B some time later, then module A's config\/optional directory will be\n *   scanned at that time for newly met dependencies, and the configuration will\n *   be installed then. If module B is never installed, the configuration item\n *   will not be installed either.\n * - Exporting and importing configuration.\n *\n * The file storage format for configuration information in Drupal is\n * @link http:\/\/wikipedia.org\/wiki\/YAML YAML files. @endlink Configuration is\n * divided into files, each containing one configuration object. The file name\n * for a configuration object is equal to the unique name of the configuration,\n * with a '.yml' extension. The default configuration files for each module are\n * placed in the config\/install directory under the top-level module directory,\n * so look there in most Core modules for examples.\n *\n * @section sec_schema Configuration schema and translation\n * Each configuration file has a specific structure, which is expressed as a\n * YAML-based configuration schema. The configuration schema details the\n * structure of the configuration, its data types, and which of its values need\n * to be translatable. Each module needs to define its configuration schema in\n * files in the config\/schema directory under the top-level module directory, so\n * look there in most Core modules for examples.\n *\n * Configuration can be internationalized; see the\n * @link i18n Internationalization topic @endlink for more information. Data\n * types label, text, and date_format in configuration schema are translatable;\n * string is non-translatable text (the 'translatable' property on a schema\n * data type definition indicates that it is translatable).\n *\n * @section sec_simple Simple configuration\n * The simple configuration API should be used for information that will always\n * have exactly one copy or version. For instance, if your module has a\n * setting that is either on or off, then this is only defined once, and it\n * would be a Boolean-valued simple configuration setting.\n *\n * The first task in using the simple configuration API is to define the\n * configuration file structure, file name, and schema of your settings (see\n * @ref sec_yaml above). Once you have done that, you can retrieve the active\n * configuration object that corresponds to configuration file mymodule.foo.yml\n * with a call to:\n * @code\n * $config = \\Drupal::config('mymodule.foo');\n * @endcode\n *\n * This will be an object of class \\Drupal\\Core\\Config\\Config, which has methods\n * for getting configuration information. For instance, if your YAML file\n * structure looks like this:\n * @code\n * enabled: '0'\n * bar:\n *   baz: 'string1'\n *   boo: 34\n * @endcode\n * you can make calls such as:\n * @code\n * \/\/ Get a single value.\n * $enabled = $config->get('enabled');\n * \/\/ Get an associative array.\n * $bar = $config->get('bar');\n * \/\/ Get one element of the array.\n * $bar_baz = $config->get('bar.baz');\n * @endcode\n *\n * The Config object that was obtained and used in the previous examples does\n * not allow you to change configuration. If you want to change configuration,\n * you will instead need to get the Config object by making a call to\n * getEditable() on the config factory:\n * @code\n * $config =\\Drupal::service('config.factory')->getEditable('mymodule.foo');\n * @endcode\n *\n * Individual configuration values can be changed or added using the set()\n * method and saved using the save() method:\n * @code\n * \/\/ Set a scalar value.\n * $config->set('enabled', 1);\n * \/\/ Save the configuration.\n * $config->save();\n * @endcode\n *\n * Configuration values can also be unset using the clear() method, which is\n * also chainable:\n * @code\n * $config->clear('bar.boo')->save();\n * $config_data = $config->get('bar');\n * @endcode\n * In this example $config_data would return an array with one key - 'baz' -\n * because 'boo' was unset.\n *\n * @section sec_entity Configuration entities\n * In contrast to the simple configuration settings described in the previous\n * section, if your module allows users to create zero or more items (where\n * \"items\" are things like content type definitions, view definitions, and the\n * like), then you need to define a configuration entity type to store your\n * configuration. Creating an entity type, loading entities, and querying them\n * are outlined in the @link entity_api Entity API topic. @endlink Here are a\n * few additional steps and notes specific to configuration entities:\n * - For examples, look for classes that implement\n *   \\Drupal\\Core\\Config\\Entity\\ConfigEntityInterface -- one good example is\n *   the \\Drupal\\user\\Entity\\Role entity type.\n * - In the entity type annotation, you will need to define a 'config_prefix'\n *   string. When Drupal stores a configuration item, it will be given a name\n *   composed of your module name, your chosen config prefix, and the ID of\n *   the individual item, separated by '.'. For example, in the Role entity,\n *   the config prefix is 'role', so one configuration item might be named\n *   user.role.anonymous, with configuration file user.role.anonymous.yml.\n * - You will need to define the schema for your configuration in your\n *   modulename.schema.yml file, with an entry for 'modulename.config_prefix.*'.\n *   For example, for the Role entity, the file user.schema.yml has an entry\n *   user.role.*; see @ref sec_yaml above for more information.\n * - Your module can provide default\/optional configuration entities in YAML\n *   files; see @ref sec_yaml above for more information.\n * - Some configuration entities have dependencies on other configuration\n *   entities, and module developers need to consider this so that configuration\n *   can be imported, uninstalled, and synchronized in the right order. For\n *   example, a field display configuration entity would need to depend on\n *   field configuration, which depends on field and bundle configuration.\n *   Configuration entity classes expose dependencies by overriding the\n *   \\Drupal\\Core\\Config\\Entity\\ConfigEntityInterface::calculateDependencies()\n *   method.\n * - On routes for paths starting with '\/admin' or otherwise designated as\n *   administration paths (such as node editing when it is set as an admin\n *   operation), if they have configuration entity placeholders, configuration\n *   entities are normally loaded in their original language, without\n *   translations or other overrides. This is usually desirable, because most\n *   admin paths are for editing configuration, and you need that to be in the\n *   source language and to lack possibly dynamic overrides. If for some reason\n *   you need to have your configuration entity loaded in the currently-selected\n *   language on an admin path (for instance, if you go to\n *   example.com\/es\/admin\/your_path and you need the entity to be in Spanish),\n *   then you can add a 'with_config_overrides' parameter option to your route.\n *   The same applies if you need to load the entity with overrides (or\n *   translated) on an admin path like '\/node\/add\/article' (when configured to\n *   be an admin path). Here's an example using the configurable_language config\n *   entity:\n *   @code\n *   mymodule.myroute:\n *     path: '\/admin\/mypath\/{configurable_language}'\n *     defaults:\n *       _controller: '\\Drupal\\mymodule\\MyController::myMethod'\n *     options:\n *       parameters:\n *         configurable_language:\n *           type: entity:configurable_language\n *           with_config_overrides: TRUE\n *   @endcode\n *   With the route defined this way, the $configurable_language parameter to\n *   your controller method will come in translated to the current language.\n *   Without the parameter options section, it would be in the original\n *   language, untranslated.\n *\n * @see i18n\n *\n * @}\n *\/",202],["T_WHITESPACE","\n\n",403],["T_DOC_COMMENT","\/**\n * @defgroup cache Cache API\n * @{\n * Information about the Drupal Cache API\n *\n * @section basics Basics\n *\n * Note: If not specified, all of the methods mentioned here belong to\n * \\Drupal\\Core\\Cache\\CacheBackendInterface.\n *\n * The Cache API is used to store data that takes a long time to compute.\n * Caching can either be permanent or valid only for a certain timespan, and\n * the cache can contain any type of data.\n *\n * To use the Cache API:\n * - Request a cache object through \\Drupal::cache() or by injecting a cache\n *   service.\n * - Define a Cache ID (cid) value for your data. A cid is a string, which must\n *   contain enough information to uniquely identify the data. For example, if\n *   your data contains translated strings, then your cid value must include the\n *   interface text language selected for page.\n * - Call the get() method to attempt a cache read, to see if the cache already\n *   contains your data.\n * - If your data is not already in the cache, compute it and add it to the\n *   cache using the set() method. The third argument of set() can be used to\n *   control the lifetime of your cache item.\n *\n * Example:\n * @code\n * $cid = 'mymodule_example:' . \\Drupal::languageManager()->getCurrentLanguage()->getId();\n *\n * $data = NULL;\n * if ($cache = \\Drupal::cache()->get($cid)) {\n *   $data = $cache->data;\n * }\n * else {\n *   $data = my_module_complicated_calculation();\n *   \\Drupal::cache()->set($cid, $data);\n * }\n * @endcode\n *\n * Note the use of $data and $cache->data in the above example. Calls to\n * \\Drupal::cache()->get() return a record that contains the information stored\n * by \\Drupal::cache()->set() in the data property as well as additional meta\n * information about the cached data. In order to make use of the cached data\n * you can access it via $cache->data.\n *\n * @section bins Cache bins\n *\n * Cache storage is separated into \"bins\", each containing various cache items.\n * Each bin can be configured separately; see @ref configuration.\n *\n * When you request a cache object, you can specify the bin name in your call to\n * \\Drupal::cache(). Alternatively, you can request a bin by getting service\n * \"cache.nameofbin\" from the container. The default bin is called \"default\", with\n * service name \"cache.default\", it is used to store common and frequently used\n * caches.\n *\n * Other common cache bins are the following:\n *   - bootstrap: Data needed from the beginning to the end of most requests,\n *     that has a very strict limit on variations and is invalidated rarely.\n *   - render: Contains cached HTML strings like cached pages and blocks, can\n *     grow to large size.\n *   - data: Contains data that can vary by path or similar context.\n *   - discovery: Contains cached discovery data for things such as plugins,\n *     views_data, or YAML discovered data such as library info.\n *\n * A module can define a cache bin by defining a service in its\n * modulename.services.yml file as follows (substituting the desired name for\n * \"nameofbin\"):\n * @code\n * cache.nameofbin:\n *   class: Drupal\\Core\\Cache\\CacheBackendInterface\n *   tags:\n *     - { name: cache.bin }\n *   factory: cache_factory:get\n *   arguments: [nameofbin]\n * @endcode\n * See the @link container Services topic @endlink for more on defining\n * services.\n *\n * @section delete Deletion\n *\n * There are two ways to remove an item from the cache:\n * - Deletion (using delete(), deleteMultiple() or deleteAll()) permanently\n *   removes the item from the cache.\n * - Invalidation (using invalidate(), invalidateMultiple() or invalidateAll())\n *   is a \"soft\" delete that only marks items as \"invalid\", meaning \"not fresh\"\n *   or \"not fresh enough\". Invalid items are not usually returned from the\n *   cache, so in most ways they behave as if they have been deleted. However,\n *   it is possible to retrieve invalid items, if they have not yet been\n *   permanently removed by the garbage collector, by passing TRUE as the second\n *   argument for get($cid, $allow_invalid).\n *\n * Use deletion if a cache item is no longer useful; for instance, if the item\n * contains references to data that has been deleted. Use invalidation if the\n * cached item may still be useful to some callers until it has been updated\n * with fresh data. The fact that it was fresh a short while ago may often be\n * sufficient.\n *\n * Invalidation is particularly useful to protect against stampedes. Rather than\n * having multiple concurrent requests updating the same cache item when it\n * expires or is deleted, there can be one request updating the cache, while the\n * other requests can proceed using the stale value. As soon as the cache item\n * has been updated, all future requests will use the updated value.\n *\n * @section tags Cache Tags\n *\n * The fourth argument of the set() method can be used to specify cache tags,\n * which are used to identify which data is included in each cache item. A cache\n * item can have multiple cache tags (an array of cache tags), and each cache\n * tag is a string. The convention is to generate cache tags of the form\n * [prefix]:[suffix]. Usually, you'll want to associate the cache tags of\n * entities, or entity listings. You won't have to manually construct cache tags\n * for them \u00e2\u0080\u0094 just get their cache tags via\n * \\Drupal\\Core\\Cache\\CacheableDependencyInterface::getCacheTags() and\n * \\Drupal\\Core\\Entity\\EntityTypeInterface::getListCacheTags().\n * Data that has been tagged can be invalidated as a group: no matter the Cache\n * ID (cid) of the cache item, no matter in which cache bin a cache item lives;\n * as long as it is tagged with a certain cache tag, it will be invalidated.\n *\n * Because of that, cache tags are a solution to the cache invalidation problem:\n * - For caching to be effective, each cache item must only be invalidated when\n *   absolutely necessary. (i.e. maximizing the cache hit ratio.)\n * - For caching to be correct, each cache item that depends on a certain thing\n *   must be invalidated whenever that certain thing is modified.\n *\n * A typical scenario: a user has modified a node that appears in two views,\n * three blocks and on twelve pages. Without cache tags, we couldn't possibly\n * know which cache items to invalidate, so we'd have to invalidate everything:\n * we had to sacrifice effectiveness to achieve correctness. With cache tags, we\n * can have both.\n *\n * Example:\n * @code\n * \/\/ A cache item with nodes, users, and some custom module data.\n * $tags = array(\n *   'my_custom_tag',\n *   'node:1',\n *   'node:3',\n *   'user:7',\n * );\n * \\Drupal::cache()->set($cid, $data, CacheBackendInterface::CACHE_PERMANENT, $tags);\n *\n * \/\/ Invalidate all cache items with certain tags.\n * \\Drupal\\Core\\Cache\\Cache::invalidateTags(array('user:1'));\n * @endcode\n *\n * Drupal is a content management system, so naturally you want changes to your\n * content to be reflected everywhere, immediately. That's why we made sure that\n * every entity type in Drupal 8 automatically has support for cache tags: when\n * you save an entity, you can be sure that the cache items that have the\n * corresponding cache tags will be invalidated.\n * This also is the case when you define your own entity types: you'll get the\n * exact same cache tag invalidation as any of the built-in entity types, with\n * the ability to override any of the default behavior if needed.\n * See \\Drupal\\Core\\Cache\\CacheableDepenencyInterface::getCacheTags(),\n * \\Drupal\\Core\\Entity\\EntityTypeInterface::getListCacheTags(),\n * \\Drupal\\Core\\Entity\\Entity::invalidateTagsOnSave() and\n * \\Drupal\\Core\\Entity\\Entity::invalidateTagsOnDelete().\n *\n * @section context Cache contexts\n *\n * Some computed data depends on contextual data, such as the user roles of the\n * logged-in user who is viewing a page, the language the page is being rendered\n * in, the theme being used, etc. When caching the output of such a calculation,\n * you must cache each variation separately, along with information about which\n * variation of the contextual data was used in the calculatation. The next time\n * the computed data is needed, if the context matches that for an existing\n * cached data set, the cached data can be reused; if no context matches, a new\n * data set can be calculated and cached for later use.\n *\n * Cache contexts are services tagged with 'cache.context', whose classes\n * implement \\Drupal\\Core\\Cache\\Context\\CacheContextInterface. See\n * https:\/\/www.drupal.org\/developing\/api\/8\/cache\/contexts for more information\n * on cache contexts, including a list of the contexts that exist in Drupal\n * core, and information on how to define your own contexts. See the\n * @link container Services and the Dependency Injection Container @endlink\n * topic for more information about services.\n *\n * Typically, the cache context is specified as part of the #cache property\n * of a render array; see the Caching section of the\n * @link theme_render Render API overview topic @endlink for details.\n *\n * @section configuration Configuration\n *\n * By default cached data is stored in the database. This can be configured\n * though so that all cached data, or that of an individual cache bin, uses a\n * different cache backend, such as APCu or Memcache, for storage.\n *\n * In a settings.php file, you can override the service used for a particular\n * cache bin. For example, if your service implementation of\n * \\Drupal\\Core\\Cache\\CacheBackendInterface was called cache.custom, the\n * following line would make Drupal use it for the 'cache_render' bin:\n * @code\n *  $settings['cache']['bins']['render'] = 'cache.custom';\n * @endcode\n *\n * Additionally, you can register your cache implementation to be used by\n * default for all cache bins with:\n * @code\n *  $settings['cache']['default'] = 'cache.custom';\n * @endcode\n *\n * Finally, you can chain multiple cache backends together, see\n * \\Drupal\\Core\\Cache\\ChainedFastBackend and \\Drupal\\Core\\Cache\\BackendChain.\n *\n * @see https:\/\/www.drupal.org\/node\/1884796\n * @}\n *\/",405],["T_WHITESPACE","\n\n",614],["T_DOC_COMMENT","\/**\n * @defgroup user_api User accounts, permissions, and roles\n * @{\n * API for user accounts, access checking, roles, and permissions.\n *\n * @section sec_overview Overview and terminology\n * Drupal's permission system is based on the concepts of accounts, roles,\n * and permissions.\n *\n * Users (site visitors) have accounts, which include a user name, an email\n * address, a password (or some other means of authentication), and possibly\n * other fields (if defined on the site). Anonymous users have an implicit\n * account that does not have a real user name or any account information.\n *\n * Each user account is assigned one or more roles. The anonymous user account\n * automatically has the anonymous user role; real user accounts\n * automatically have the authenticated user role, plus any roles defined on\n * the site that they have been assigned.\n *\n * Each role, including the special anonymous and authenticated user roles, is\n * granted one or more named permissions, which allow them to perform certain\n * tasks or view certain content on the site. It is possible to designate a\n * role to be the \"administrator\" role; if this is set up, this role is\n * automatically granted all available permissions whenever a module is\n * enabled that defines permissions.\n *\n * All code in Drupal that allows users to perform tasks or view content must\n * check that the current user has the correct permission before allowing the\n * action. In the standard case, access checking consists of answering the\n * question \"Does the current user have permission 'foo'?\", and allowing or\n * denying access based on the answer. Note that access checking should nearly\n * always be done at the permission level, not by checking for a particular role\n * or user ID, so that site administrators can set up user accounts and roles\n * appropriately for their particular sites.\n *\n * @section sec_define Defining permissions\n * Modules define permissions via a $module.permissions.yml file. See\n * \\Drupal\\user\\PermissionHandler for documentation of permissions.yml files.\n *\n * @section sec_access Access permission checking\n * Depending on the situation, there are several methods for ensuring that\n * access checks are done properly in Drupal:\n * - Routes: When you register a route, include a 'requirements' section that\n *   either gives the machine name of the permission that is needed to visit the\n *   URL of the route, or tells Drupal to use an access check method or service\n *   to check access. See the @link menu Routing topic @endlink for more\n *   information.\n * - Entities: Access for various entity operations is designated either with\n *   simple permissions or access control handler classes in the entity\n *   annotation. See the @link entity_api Entity API topic @endlink for more\n *   information.\n * - Other code: There is a 'current_user' service, which can be injected into\n *   classes to provide access to the current user account (see the\n *   @link container Services and Dependency Injection topic @endlink for more\n *   information on dependency injection). In code that cannot use dependency\n *   injection, you can access this service and retrieve the current user\n *   account object by calling \\Drupal::currentUser(). Once you have a user\n *   object for the current user (implementing \\Drupal\\user\\UserInterface), you\n *   can call inherited method\n *   \\Drupal\\Core\\Session\\AccountInterface::hasPermission() to check\n *   permissions, or pass this object into other functions\/methods.\n * - Forms: Each element of a form array can have a Boolean '#access' property,\n *   which determines whether that element is visible and\/or usable. This is a\n *   common need in forms, so the current user service (described above) is\n *   injected into the form base class as method\n *   \\Drupal\\Core\\Form\\FormBase::currentUser().\n *\n * @section sec_entities User and role objects\n * User objects in Drupal are entity items, implementing\n * \\Drupal\\user\\UserInterface. Role objects in Drupal are also entity items,\n * implementing \\Drupal\\user\\RoleInterface. See the\n * @link entity_api Entity API topic @endlink for more information about\n * entities in general (including how to load, create, modify, and query them).\n *\n * Roles often need to be manipulated in automated test code, such as to add\n * permissions to them. Here's an example:\n * @code\n * $role = \\Drupal\\user\\Entity\\Role::load('authenticated');\n * $role->grantPermission('access comments');\n * $role->save();\n * @endcode\n *\n * Other important interfaces:\n * - \\Drupal\\Core\\Session\\AccountInterface: The part of UserInterface that\n *   deals with access checking. In writing code that checks access, your\n *   method parameters should use this interface, not UserInterface.\n * - \\Drupal\\Core\\Session\\AccountProxyInterface: The interface for the\n *   current_user service (described above).\n * @}\n *\/",616],["T_WHITESPACE","\n\n",705],["T_DOC_COMMENT","\/**\n * @defgroup container Services and Dependency Injection Container\n * @{\n * Overview of the Dependency Injection Container and Services.\n *\n * @section sec_overview Overview of container, injection, and services\n * The Services and Dependency Injection Container concepts have been adopted by\n * Drupal from the @link http:\/\/symfony.com\/ Symfony framework. @endlink A\n * \"service\" (such as accessing the database, sending email, or translating user\n * interface text) is defined (given a name and an interface or at least a\n * class that defines the methods that may be called), and a default class is\n * designated to provide the service. These two steps must be done together, and\n * can be done by Drupal Core or a module. Other modules can then define\n * alternative classes to provide the same services, overriding the default\n * classes. Classes and functions that need to use the service should always\n * instantiate the class via the dependency injection container (also known\n * simply as the \"container\"), rather than instantiating a particular service\n * provider class directly, so that they get the correct class (default or\n * overridden).\n *\n * See https:\/\/www.drupal.org\/node\/2133171 for more detailed information on\n * services and the dependency injection container.\n *\n * @section sec_discover Discovering existing services\n * Drupal core defines many core services in the core.services.yml file (in the\n * top-level core directory). Some Drupal Core modules and contributed modules\n * also define services in modulename.services.yml files. API reference sites\n * (such as https:\/\/api.drupal.org) generate lists of all existing services from\n * these files. Look for the Services link in the API Navigation block.\n * Alternatively you can look through the individual files manually.\n *\n * A typical service definition in a *.services.yml file looks like this:\n * @code\n * path.alias_manager:\n *   class: Drupal\\Core\\Path\\AliasManager\n *   arguments: ['@path.crud', '@path.alias_whitelist', '@language_manager']\n * @endcode\n * Some services use other services as factories; a typical service definition\n * is:\n * @code\n *   cache.entity:\n *     class: Drupal\\Core\\Cache\\CacheBackendInterface\n *     tags:\n *       - { name: cache.bin }\n *     factory: cache_factory:get\n *     arguments: [entity]\n * @endcode\n *\n * The first line of a service definition gives the unique machine name of the\n * service. This is often prefixed by the module name if provided by a module;\n * however, by convention some service names are prefixed by a group name\n * instead, such as cache.* for cache bins and plugin.manager.* for plugin\n * managers.\n *\n * The class line either gives the default class that provides the service, or\n * if the service uses a factory class, the interface for the service. If the\n * class depends on other services, the arguments line lists the machine\n * names of the dependencies (preceded by '@'); objects for each of these\n * services are instantiated from the container and passed to the class\n * constructor when the service class is instantiated. Other arguments can also\n * be passed in; see the section at https:\/\/www.drupal.org\/node\/2133171 for more\n * detailed information.\n *\n * Services using factories can be defined as shown in the above example, if the\n * factory is itself a service. The factory can also be a class; details of how\n * to use service factories can be found in the section at\n * https:\/\/www.drupal.org\/node\/2133171.\n *\n * @section sec_container Accessing a service through the container\n * As noted above, if you need to use a service in your code, you should always\n * instantiate the service class via a call to the container, using the machine\n * name of the service, so that the default class can be overridden. There are\n * several ways to make sure this happens:\n * - For service-providing classes, see other sections of this documentation\n *   describing how to pass services as arguments to the constructor.\n * - Plugin classes, controllers, and similar classes have create() or\n *   createInstance() methods that are used to create an instance of the class.\n *   These methods come from different interfaces, and have different\n *   arguments, but they all include an argument $container of type\n *   \\Symfony\\Component\\DependencyInjection\\ContainerInterface.\n *   If you are defining one of these classes, in the create() or\n *   createInstance() method, call $container->get('myservice.name') to\n *   instantiate a service. The results of these calls are generally passed to\n *   the class constructor and saved as member variables in the class.\n * - For functions and class methods that do not have access to either of\n *   the above methods of dependency injection, you can use service location to\n *   access services, via a call to the global \\Drupal class. This class has\n *   special methods for accessing commonly-used services, or you can call a\n *   generic method to access any service. Examples:\n *   @code\n *   \/\/ Retrieve the entity.manager service object (special method exists).\n *   $manager = \\Drupal::entityManager();\n *   \/\/ Retrieve the service object for machine name 'foo.bar'.\n *   $foobar = \\Drupal::service('foo.bar');\n *   @endcode\n *\n * As a note, you should always use dependency injection (via service arguments\n * or create()\/createInstance() methods) if possible to instantiate services,\n * rather than service location (via the \\Drupal class), because:\n * - Dependency injection facilitates writing unit tests, since the container\n *   argument can be mocked and the create() method can be bypassed by using\n *   the class constructor. If you use the \\Drupal class, unit tests are much\n *   harder to write and your code has more dependencies.\n * - Having the service interfaces on the class constructor and member variables\n *   is useful for IDE auto-complete and self-documentation.\n *\n * @section sec_define Defining a service\n * If your module needs to define a new service, here are the steps:\n * - Choose a unique machine name for your service. Typically, this should\n *   start with your module name. Example: mymodule.myservice.\n * - Create a PHP interface to define what your service does.\n * - Create a default class implementing your interface that provides your\n *   service. If your class needs to use existing services (such as database\n *   access), be sure to make these services arguments to your class\n *   constructor, and save them in member variables. Also, if the needed\n *   services are provided by other modules and not Drupal Core, you'll want\n *   these modules to be dependencies of your module.\n * - Add an entry to a modulename.services.yml file for the service. See\n *   @ref sec_discover above, or existing *.services.yml files in Core, for the\n *   syntax; it will start with your machine name, refer to your default class,\n *   and list the services that need to be passed into your constructor.\n *\n * Services can also be defined dynamically, as in the\n * \\Drupal\\Core\\CoreServiceProvider class, but this is less common for modules.\n *\n * @section sec_tags Service tags\n * Some services have tags, which are defined in the service definition. See\n * @link service_tag Service Tags @endlink for usage.\n *\n * @section sec_injection Overriding the default service class\n * Modules can override the default classes used for services. Here are the\n * steps:\n * - Define a class in the top-level namespace for your module\n *   (Drupal\\my_module), whose name is the camel-case version of your module's\n *   machine name followed by \"ServiceProvider\" (for example, if your module\n *   machine name is my_module, the class must be named\n *   MyModuleServiceProvider).\n * - The class needs to implement\n *   \\Drupal\\Core\\DependencyInjection\\ServiceModifierInterface, which is\n *   typically done by extending\n *   \\Drupal\\Core\\DependencyInjection\\ServiceProviderBase.\n * - The class needs to contain one method: alter(). This method does the\n *   actual work of telling Drupal to use your class instead of the default.\n *   Here's an example:\n *   @code\n *   public function alter(ContainerBuilder $container) {\n *     \/\/ Override the language_manager class with a new class.\n *     $definition = $container->getDefinition('language_manager');\n *     $definition->setClass('Drupal\\my_module\\MyLanguageManager');\n *   }\n *   @endcode\n *   Note that $container here is an instance of\n *   \\Drupal\\Core\\DependencyInjection\\ContainerBuilder.\n *\n * @see https:\/\/www.drupal.org\/node\/2133171\n * @see core.services.yml\n * @see \\Drupal\n * @see \\Symfony\\Component\\DependencyInjection\\ContainerInterface\n * @see plugin_api\n * @see menu\n * @}\n *\/",707],["T_WHITESPACE","\n\n",868],["T_DOC_COMMENT","\/**\n * @defgroup listing_page_service Page header for Services page\n * @{\n * Introduction to services\n *\n * A \"service\" (such as accessing the database, sending email, or translating\n * user interface text) can be defined by a module or Drupal core. Defining a\n * service means giving it a name and designating a default class to provide the\n * service; ideally, there should also be an interface that defines the methods\n * that may be called. Services are collected into the Dependency Injection\n * Container, and can be overridden to use different classes or different\n * instantiation by modules. See the\n * @link container Services and Dependency Injection Container topic @endlink\n * for details.\n *\n * Some services have tags, which are defined in the service definition. Tags\n * are used to define a group of related services, or to specify some aspect of\n * how the service behaves. See the\n * @link service_tag Service Tags topic @endlink for more information.\n *\n * @see container\n * @see service_tag\n *\n * @}\n *\/",870],["T_WHITESPACE","\n\n",894],["T_DOC_COMMENT","\/**\n * @defgroup typed_data Typed Data API\n * @{\n * API for describing data based on a set of available data types.\n *\n * PHP has data types, such as int, string, float, array, etc., and it is an\n * object-oriented language that lets you define classes and interfaces.\n * However, in some cases, it is useful to be able to define an abstract\n * type (as in an interface, free of implementation details), that still has\n * properties (which an interface cannot) as well as meta-data. The Typed Data\n * API provides this abstraction.\n *\n * @section sec_overview Overview\n * Each data type in the Typed Data API is a plugin class (annotation class\n * example: \\Drupal\\Core\\TypedData\\Annotation\\DataType); these plugins are\n * managed by the typed_data_manager service (by default\n * \\Drupal\\Core\\TypedData\\TypedDataManager). Each data object encapsulates a\n * single piece of data, provides access to the metadata, and provides\n * validation capability. Also, the typed data plugins have a shorthand\n * for easily accessing data values, described in @ref sec_tree.\n *\n * The metadata of a data object is defined by an object based on a class called\n * the definition class (see \\Drupal\\Core\\TypedData\\DataDefinitionInterface).\n * The class used can vary by data type and can be specified in the data type's\n * plugin definition, while the default is set in the $definition_class property\n * of the annotation class. The default class is\n * \\Drupal\\Core\\TypedData\\DataDefinition. For data types provided by a plugin\n * deriver, the plugin deriver can set the definition_class property too.\n * The metadata object provides information about the data, such as the data\n * type, whether it is translatable, the names of its properties (for complex\n * types), and who can access it.\n *\n * See https:\/\/www.drupal.org\/node\/1794140 for more information about the Typed\n * Data API.\n *\n * @section sec_varieties Varieties of typed data\n * There are three kinds of typed data: primitive, complex, and list.\n *\n * @subsection sub_primitive Primitive data types\n * Primitive data types wrap PHP data types and also serve as building blocks\n * for complex and list typed data. Each primitive data type has an interface\n * that extends \\Drupal\\Core\\TypedData\\PrimitiveInterface, with getValue()\n * and setValue() methods for accessing the data value, and a default plugin\n * implementation. Here's a list:\n * - \\Drupal\\Core\\TypedData\\Type\\IntegerInterface: Plugin ID integer,\n *   corresponds to PHP type int.\n * - \\Drupal\\Core\\TypedData\\Type\\StringInterface: Plugin ID string,\n *   corresponds to PHP type string.\n * - \\Drupal\\Core\\TypedData\\Type\\FloatInterface: Plugin ID float,\n *   corresponds to PHP type float.\n * - \\Drupal\\Core\\TypedData\\Type\\BooleanInterface: Plugin ID bool,\n *   corresponds to PHP type bool.\n * - \\Drupal\\Core\\TypedData\\Type\\BinaryInterface: Plugin ID binary,\n *   corresponds to a PHP file resource.\n * - \\Drupal\\Core\\TypedData\\Type\\UriInterface: Plugin ID uri.\n *\n * @subsection sec_complex Complex data\n * Complex data types, with interface\n * \\Drupal\\Core\\TypedData\\ComplexDataInterface, represent data with named\n * properties; the properties can be accessed with get() and set() methods.\n * The value of each property is itself a typed data object, which can be\n * primitive, complex, or list data.\n *\n * The base type for most complex data is the\n * \\Drupal\\Core\\TypedData\\Plugin\\DataType\\Map class, which represents an\n * associative array. Map provides its own definition class in the annotation,\n * \\Drupal\\Core\\TypedData\\MapDataDefinition, and most complex data classes\n * extend this class. The getValue() and setValue() methods on the Map class\n * enforce the data definition and its property structure.\n *\n * The Drupal Field API uses complex typed data for its field items, with\n * definition class \\Drupal\\Core\\Field\\TypedData\\FieldItemDataDefinition.\n *\n * @section sec_list Lists\n * List data types, with interface \\Drupal\\Core\\TypedData\\ListInterface,\n * represent data that is an ordered list of typed data, all of the same type.\n * More precisely, the plugins in the list must have the same base plugin ID;\n * however, some types (for example field items and entities) are provided by\n * plugin derivatives and the sub IDs can be different.\n *\n * @section sec_tree Tree handling\n * Typed data allows you to use shorthand to get data values nested in the\n * implicit tree structure of the data. For example, to get the value from\n * an entity field item, the Entity Field API allows you to call:\n * @code\n * $value = $entity->fieldName->propertyName;\n * @endcode\n * This is really shorthand for:\n * @code\n * $field_item_list = $entity->get('fieldName');\n * $field_item = $field_item_list->get(0);\n * $property = $field_item->get('propertyName');\n * $value = $property->getValue();\n * @endcode\n * Some notes:\n * - $property, $field_item, and $field_item_list are all typed data objects,\n *   while $value is a raw PHP value.\n * - You can call $property->getParent() to get $field_item,\n *   $field_item->getParent() to get $field_item_list, or\n *   $field_item_list->getParent() to get $typed_entity ($entity wrapped in a\n *   typed data object). $typed_entity->getParent() is NULL.\n * - For all of these ->getRoot() returns $typed_entity.\n * - The langcode property is on $field_item_list, but you can access it\n *   on $property as well, so that all items will report the same langcode.\n * - When the value of $property is changed by calling $property->setValue(),\n *   $property->onChange() will fire, which in turn calls the parent object's\n *   onChange() method and so on. This allows parent objects to react upon\n *   changes of contained properties or list items.\n *\n * @section sec_defining Defining data types\n * To define a new data type:\n * - Create a class that implements one of the Typed Data interfaces.\n *   Typically, you will want to extend one of the classes listed in the\n *   sections above as a starting point.\n * - Make your class into a DataType plugin. To do that, put it in namespace\n *   \\Drupal\\yourmodule\\Plugin\\DataType (where \"yourmodule\" is your module's\n *   short name), and add annotation of type\n *   \\Drupal\\Core\\TypedData\\Annotation\\DataType to the documentation header.\n *   See the @link plugin_api Plugin API topic @endlink and the\n *   @link annotation Annotations topic @endlink for more information.\n *\n * @section sec_using Using data types\n * The data types of the Typed Data API can be used in several ways, once they\n * have been defined:\n * - In the Field API, data types can be used as the class in the property\n *   definition of the field. See the @link field Field API topic @endlink for\n *   more information.\n * - In configuration schema files, you can use the unique ID ('id' annotation)\n *   from any DataType plugin class as the 'type' value for an entry. See the\n *   @link config_api Confuration API topic @endlink for more information.\n * - If you need to create a typed data object in code, first get the\n *   typed_data_manager service from the container or by calling\n *   \\Drupal::typedDataManager(). Then pass the plugin ID to\n *   $manager::createDataDefinition() to create an appropriate data definition\n *   object. Then pass the data definition object and the value of the data to\n *   $manager::create() to create a typed data object.\n *\n * @see plugin_api\n * @see container\n * @}\n *\/",896],["T_WHITESPACE","\n\n",1036],["T_DOC_COMMENT","\/**\n * @defgroup testing Automated tests\n * @{\n * Overview of PHPUnit tests and Simpletest tests.\n *\n * The Drupal project has embraced a philosophy of using automated tests,\n * consisting of both unit tests (which test the functionality of classes at a\n * low level) and functional tests (which test the functionality of Drupal\n * systems at a higher level, usually involving web output). The goal is to\n * have test coverage for all or most of the components and features, and to\n * run the automated tests before any code is changed or added, to make sure\n * it doesn't break any existing functionality (regression testing).\n *\n * In order to implement this philosophy, developers need to do the following:\n * - When making a patch to fix a bug, make sure that the bug fix patch includes\n *   a test that fails without the code change and passes with the code change.\n *   This helps reviewers understand what the bug is, demonstrates that the code\n *   actually fixes the bug, and ensures the bug will not reappear due to later\n *   code changes.\n * - When making a patch to implement a new feature, include new unit and\/or\n *   functional tests in the patch. This serves to both demonstrate that the\n *   code actually works, and ensure that later changes do not break the new\n *   functionality.\n *\n * @section write_unit Writing PHPUnit tests for classes\n * PHPUnit tests for classes are written using the industry-standard PHPUnit\n * framework. Use a PHPUnit test to test functionality of a class if the Drupal\n * environment (database, settings, etc.) and web browser are not needed for the\n * test, or if the Drupal environment can be replaced by a \"mock\" object. To\n * write a PHPUnit test:\n * - Define a class that extends \\Drupal\\Tests\\UnitTestCase.\n * - The class name needs to end in the word Test.\n * - The namespace must be a subspace\/subdirectory of \\Drupal\\yourmodule\\Tests,\n *   where yourmodule is your module's machine name.\n * - The test class file must be named and placed under the\n *   yourmodule\/tests\/src\/Unit directory, according to the PSR-4 standard.\n * - Your test class needs a phpDoc comment block with a description and\n *   a @group annotation, which gives information about the test.\n * - Add test cases by adding method names that start with 'test' and have no\n *   arguments, for example testYourTestCase(). Each one should test a logical\n *   subset of the functionality.\n * For more details, see:\n * - https:\/\/www.drupal.org\/phpunit for full documentation on how to write\n *   PHPUnit tests for Drupal.\n * - http:\/\/phpunit.de for general information on the PHPUnit framework.\n * - @link oo_conventions Object-oriented programming topic @endlink for more\n *   on PSR-4, namespaces, and where to place classes.\n *\n * @section write_functional Writing functional tests\n * Functional tests are written using a Drupal-specific framework that is, for\n * historical reasons, known as \"Simpletest\". Use a Simpletest test to test the\n * functionality of sub-system of Drupal, if the functionality depends on the\n * Drupal database and settings, or to test the web output of Drupal. To\n * write a Simpletest test:\n * - For functional tests of the web output of Drupal, define a class that\n *   extends \\Drupal\\simpletest\\WebTestBase, which contains an internal web\n *   browser and defines many helpful test assertion methods that you can use\n *   in your tests. You can specify modules to be enabled by defining a\n *   $modules member variable -- keep in mind that by default, WebTestBase uses\n *   a \"testing\" install profile, with a minimal set of modules enabled.\n * - For functional tests that do not test web output, define a class that\n *   extends \\Drupal\\KernelTests\\KernelTestBase. This class is much faster\n *   than WebTestBase, because instead of making a full install of Drupal, it\n *   uses an in-memory pseudo-installation (similar to what the installer and\n *   update scripts use). To use this test class, you will need to create the\n *   database tables you need and install needed modules manually.\n * - The namespace must be a subspace\/subdirectory of \\Drupal\\yourmodule\\Tests,\n *   where yourmodule is your module's machine name.\n * - The test class file must be named and placed under the yourmodule\/src\/Tests\n *   directory, according to the PSR-4 standard.\n * - Your test class needs a phpDoc comment block with a description and\n *   a @group annotation, which gives information about the test.\n * - You may also override the default setUp() method, which can set be used to\n *   set up content types and similar procedures.\n * - In some cases, you may need to write a test module to support your test;\n *   put such modules under the yourmodule\/tests\/modules directory.\n * - Add test cases by adding method names that start with 'test' and have no\n *   arguments, for example testYourTestCase(). Each one should test a logical\n *   subset of the functionality. Each method runs in a new, isolated test\n *   environment, so it can only rely on the setUp() method, not what has\n *   been set up by other test methods.\n * For more details, see:\n * - https:\/\/www.drupal.org\/simpletest for full documentation on how to write\n *   functional tests for Drupal.\n * - @link oo_conventions Object-oriented programming topic @endlink for more\n *   on PSR-4, namespaces, and where to place classes.\n *\n * @section write_functional_phpunit Write functional PHP tests (phpunit)\n * Functional tests extend the BrowserTestBase base class, and use PHPUnit as\n * their underlying framework. They use a simulated browser, in which the test\n * can click links, visit URLs, post to forms, etc. To write a functional test:\n * - Extend \\Drupal\\Tests\\BrowserTestBase.\n * - Place the test in the yourmodule\/tests\/src\/Functional\/ directory and use\n *   the \\Drupal\\Tests\\yourmodule\\Functional namespace.\n * - Add a @group annotation. For example, if the test is for a Drupal 6\n *   migration process, the group core uses is migrate_drupal_6. Use yourmodule\n *   as the group name if the test does not belong to another larger group.\n * - You may also override the default setUp() method, which can be used to set\n *   up content types and similar procedures. Don't forget to call the parent\n *   method.\n * - In some cases, you may need to write a test module to support your test;\n *   put such modules under the yourmodule\/tests\/modules directory.\n * - Add test cases by adding method names that start with 'test' and have no\n *   arguments, for example testYourTestCase(). Each one should test a logical\n *   subset of the functionality. Each method runs in a new, isolated test\n *   environment, so it can only rely on the setUp() method, not what has\n *   been set up by other test methods.\n * For more details, see:\n * - https:\/\/www.drupal.org\/docs\/8\/phpunit\/phpunit-browser-test-tutorial for\n *   a full tutorial on how to write functional PHPUnit tests for Drupal.\n * - https:\/\/www.drupal.org\/phpunit for the full documentation on how to write\n *   PHPUnit tests for Drupal.\n *\n * @section write_jsfunctional_phpunit Write functional JavaScript tests (phpunit)\n * To write a functional test that relies on JavaScript:\n * - Extend \\Drupal\\FunctionalJavaScriptTests\\JavascriptTestBase.\n * - Place the test into the yourmodule\/tests\/src\/FunctionalJavascript\/\n *   directory and use the \\Drupal\\Tests\\yourmodule\\FunctionalJavascript\n *   namespace.\n * - Add a @group annotation. Use yourmodule as the group name if the test does\n *   not belong to another larger group.\n * - Set up PhantomJS; see http:\/\/phantomjs.org\/download.html.\n * - To run tests, see core\/tests\/README.md.\n * - When clicking a link\/button with Ajax behavior attached, keep in mind that\n *   the underlying browser might take time to deliver changes to the HTML. Use\n *   $this->assertSession()->assertWaitOnAjaxRequest() to wait for the Ajax\n *   request to finish.\n * For more details, see:\n * - https:\/\/www.drupal.org\/docs\/8\/phpunit\/phpunit-javascript-testing-tutorial\n *   for a full tutorial on how to write PHPUnit JavaScript tests for Drupal.\n * - https:\/\/www.drupal.org\/phpunit for the full documentation on how to write\n *   PHPUnit tests for Drupal.\n *\n * @section running Running tests\n * You can run both Simpletest and PHPUnit tests by enabling the core Testing\n * module (core\/modules\/simpletest). Once that module is enabled, tests can be\n * run using the core\/scripts\/run-tests.sh script, using\n * @link https:\/\/www.drupal.org\/project\/drush Drush @endlink, or from the\n *   Testing module user interface.\n *\n * PHPUnit tests can also be run from the command line, using the PHPUnit\n * framework. See https:\/\/www.drupal.org\/node\/2116263 for more information.\n * @}\n *\/",1038],["T_WHITESPACE","\n\n",1181],["T_DOC_COMMENT","\/**\n * @defgroup php_assert PHP Runtime Assert Statements\n * @{\n * Use of the assert() statement in Drupal.\n *\n * Unit tests also use the term \"assertion\" to refer to test conditions, so to\n * avoid confusion the term \"runtime assertion\" will be used for the assert()\n * statement throughout the documentation.\n *\n * A runtime assertion is a statement that is expected to always be true at\n * the point in the code it appears at. They are tested using PHP's internal\n * @link http:\/\/php.net\/assert assert() @endlink statement. If an\n * assertion is ever FALSE it indicates an error in the code or in module or\n * theme configuration files. User-provided configuration files should be\n * verified with standard control structures at all times, not just checked in\n * development environments with assert() statements on.\n *\n * When runtime assertions fail in PHP 7 an \\AssertionError is thrown.\n * Drupal uses an assertion callback to do the same in PHP 5.x so that unit\n * tests involving runtime assertions will work uniformly across both versions.\n *\n * The Drupal project primarily uses runtime assertions to enforce the\n * expectations of the API by failing when incorrect calls are made by code\n * under development. While PHP type hinting does this for objects and arrays,\n * runtime assertions do this for scalars (strings, integers, floats, etc.) and\n * complex data structures such as cache and render arrays. They ensure that\n * methods' return values are the documented datatypes. They also verify that\n * objects have been properly configured and set up by the service container.\n * Runtime assertions are checked throughout development. They supplement unit\n * tests by checking scenarios that do not have unit tests written for them,\n * and by testing the API calls made by all the code in the system.\n *\n * When using assert() keep the following in mind:\n * - Runtime assertions are disabled by default in production and enabled in\n *   development, so they can't be used as control structures. Use exceptions\n *   for errors that can occur in production no matter how unlikely they are.\n * - Assert() functions in a buggy manner prior to PHP 7. If you do not use a\n *   string for the first argument of the statement but instead use a function\n *   call or expression then that code will be evaluated even when runtime\n *   assertions are turned off. To avoid this you must use a string as the\n *   first argument, and assert will pass this string to the eval() statement.\n * - Since runtime assertion strings are parsed by eval() use caution when\n *   using them to work with data that may be unsanitized.\n *\n * See https:\/\/www.drupal.org\/node\/2492225 for more information on runtime\n * assertions.\n * @}\n *\/",1183],["T_WHITESPACE","\n\n",1230],["T_DOC_COMMENT","\/**\n * @defgroup info_types Information types\n * @{\n * Types of information in Drupal.\n *\n * Drupal has several distinct types of information, each with its own methods\n * for storage and retrieval:\n * - Content: Information meant to be displayed on your site: articles, basic\n *   pages, images, files, custom blocks, etc. Content is stored and accessed\n *   using @link entity_api Entities @endlink.\n * - Session: Information about individual users' interactions with the site,\n *   such as whether they are logged in. This is really \"state\" information, but\n *   it is not stored the same way so it's a separate type here. Session\n *   information is available from the Request object. The session implements\n *   \\Symfony\\Component\\HttpFoundation\\Session\\SessionInterface.\n * - State: Information of a temporary nature, generally machine-generated and\n *   not human-edited, about the current state of your site. Examples: the time\n *   when Cron was last run, whether node access permissions need rebuilding,\n *   etc. See @link state_api the State API topic @endlink for more information.\n * - Configuration: Information about your site that is generally (or at least\n *   can be) human-edited, but is not Content, and is meant to be relatively\n *   permanent. Examples: the name of your site, the content types and views\n *   you have defined, etc. See\n *   @link config_api the Configuration API topic @endlink for more information.\n *\n * @see cache\n * @see i18n\n * @}\n *\/",1232],["T_WHITESPACE","\n\n",1260],["T_DOC_COMMENT","\/**\n * @defgroup extending Extending and altering Drupal\n * @{\n * Overview of extensions and alteration methods for Drupal.\n *\n * @section sec_types Types of extensions\n * Drupal's core behavior can be extended and altered via these three basic\n * types of extensions:\n * - Themes: Themes alter the appearance of Drupal sites. They can include\n *   template files, which alter the HTML markup and other raw output of the\n *   site; CSS files, which alter the styling applied to the HTML; and\n *   JavaScript, Flash, images, and other files. For more information, see the\n *   @link theme_render Theme system and render API topic @endlink and\n *   https:\/\/www.drupal.org\/theme-guide\/8\n * - Modules: Modules add to or alter the behavior and functionality of Drupal,\n *   by using one or more of the methods listed below. For more information\n *   about creating modules, see https:\/\/www.drupal.org\/developing\/modules\/8\n * - Installation profiles: Installation profiles can be used to\n *   create distributions, which are complete specific-purpose packages of\n *   Drupal including additional modules, themes, and data. For more\n *   information, see https:\/\/www.drupal.org\/developing\/distributions.\n *\n * @section sec_alter Alteration methods for modules\n * Here is a list of the ways that modules can alter or extend Drupal's core\n * behavior, or the behavior of other modules:\n * - Hooks: Specially-named functions that a module defines, which are\n *   discovered and called at specific times, usually to alter behavior or data.\n *   See the @link hooks Hooks topic @endlink for more information.\n * - Plugins: Classes that a module defines, which are discovered and\n *   instantiated at specific times to add functionality. See the\n *   @link plugin_api Plugin API topic @endlink for more information.\n * - Entities: Special plugins that define entity types for storing new types\n *   of content or configuration in Drupal. See the\n *   @link entity_api Entity API topic @endlink for more information.\n * - Services: Classes that perform basic operations within Drupal, such as\n *   accessing the database and sending email. See the\n *   @link container Dependency Injection Container and Services topic @endlink\n *   for more information.\n * - Routing: Providing or altering \"routes\", which are URLs that Drupal\n *   responds to, or altering routing behavior with event listener classes.\n *   See the @link menu Routing and menu topic @endlink for more information.\n * - Events: Modules can register as event subscribers; when an event is\n *   dispatched, a method is called on each registered subscriber, allowing each\n *   one to react. See the @link events Events topic @endlink for more\n *   information.\n *\n * @section sec_sample *.info.yml files\n * Extensions must each be located in a directory whose name matches the short\n * name (or machine name) of the extension, and this directory must contain a\n * file named machine_name.info.yml (where machine_name is the machine name of\n * the extension). See \\Drupal\\Core\\Extension\\InfoParserInterface::parse() for\n * documentation of the format of .info.yml files.\n * @}\n *\/",1262],["T_WHITESPACE","\n\n",1315],["T_DOC_COMMENT","\/**\n * @defgroup plugin_api Plugin API\n * @{\n * Using the Plugin API\n *\n * @section sec_overview Overview and terminology\n *\n * The basic idea of plugins is to allow a particular module or subsystem of\n * Drupal to provide functionality in an extensible, object-oriented way. The\n * controlling module or subsystem defines the basic framework (interface) for\n * the functionality, and other modules can create plugins (implementing the\n * interface) with particular behaviors. The controlling module instantiates\n * existing plugins as needed, and calls methods to invoke their functionality.\n * Examples of functionality in Drupal Core that use plugins include: the block\n * system (block types are plugins), the entity\/field system (entity types,\n * field types, field formatters, and field widgets are plugins), the image\n * manipulation system (image effects and image toolkits are plugins), and the\n * search system (search page types are plugins).\n *\n * Plugins are grouped into plugin types, each generally defined by an\n * interface. Each plugin type is managed by a plugin manager service, which\n * uses a plugin discovery method to discover provided plugins of that type and\n * instantiate them using a plugin factory.\n *\n * Some plugin types make use of the following concepts or components:\n * - Plugin derivatives: Allows a single plugin class to present itself as\n *   multiple plugins. Example: the Menu module provides a block for each\n *   defined menu via a block plugin derivative.\n * - Plugin mapping: Allows a plugin class to map a configuration string to an\n *   instance, and have the plugin automatically instantiated without writing\n *   additional code.\n * - Plugin collections: Provide a way to lazily instantiate a set of plugin\n *   instances from a single plugin definition.\n *\n * There are several things a module developer may need to do with plugins:\n * - Define a completely new plugin type: see @ref sec_define below.\n * - Create a plugin of an existing plugin type: see @ref sec_create below.\n * - Perform tasks that involve plugins: see @ref sec_use below.\n *\n * See https:\/\/www.drupal.org\/developing\/api\/8\/plugins for more detailed\n * documentation on the plugin system. There are also topics for a few\n * of the many existing types of plugins:\n * - @link block_api Block API @endlink\n * - @link entity_api Entity API @endlink\n * - @link field Various types of field-related plugins @endlink\n * - @link views_plugins Views plugins @endlink (has links to topics covering\n *   various specific types of Views plugins).\n * - @link search Search page plugins @endlink\n *\n * @section sec_define Defining a new plugin type\n * To define a new plugin type:\n * - Define an interface for the plugin. This describes the common set of\n *   behavior, and the methods you will call on each plugin class that is\n *   instantiated. Usually this interface will extend one or more of the\n *   following interfaces:\n *   - \\Drupal\\Component\\Plugin\\PluginInspectionInterface\n *   - \\Drupal\\Component\\Plugin\\ConfigurablePluginInterface\n *   - \\Drupal\\Component\\Plugin\\ContextAwarePluginInterface\n *   - \\Drupal\\Core\\Plugin\\PluginFormInterface\n *   - \\Drupal\\Core\\Executable\\ExecutableInterface\n * - (optional) Create a base class that provides a partial implementation of\n *   the interface, for the convenience of developers wishing to create plugins\n *   of your type. The base class usually extends\n *   \\Drupal\\Core\\Plugin\\PluginBase, or one of the base classes that extends\n *   this class.\n * - Choose a method for plugin discovery, and define classes as necessary.\n *   See @ref sub_discovery below.\n * - Create a plugin manager\/factory class and service, which will discover and\n *   instantiate plugins. See @ref sub_manager below.\n * - Use the plugin manager to instantiate plugins. Call methods on your plugin\n *   interface to perform the tasks of your plugin type.\n * - (optional) If appropriate, define a plugin collection. See @ref\n *    sub_collection below for more information.\n *\n * @subsection sub_discovery Plugin discovery\n * Plugin discovery is the process your plugin manager uses to discover the\n * individual plugins of your type that have been defined by your module and\n * other modules. Plugin discovery methods are classes that implement\n * \\Drupal\\Component\\Plugin\\Discovery\\DiscoveryInterface. Most plugin types use\n * one of the following discovery mechanisms:\n * - Annotation: Plugin classes are annotated and placed in a defined namespace\n *   subdirectory. Most Drupal Core plugins use this method of discovery.\n * - Hook: Plugin modules need to implement a hook to tell the manager about\n *   their plugins.\n * - YAML: Plugins are listed in YAML files. Drupal Core uses this method for\n *   discovering local tasks and local actions. This is mainly useful if all\n *   plugins use the same class, so it is kind of like a global derivative.\n * - Static: Plugin classes are registered within the plugin manager class\n *   itself. Static discovery is only useful if modules cannot define new\n *   plugins of this type (if the list of available plugins is static).\n *\n * It is also possible to define your own custom discovery mechanism or mix\n * methods together. And there are many more details, such as annotation\n * decorators, that apply to some of the discovery methods. See\n * https:\/\/www.drupal.org\/developing\/api\/8\/plugins for more details.\n *\n * The remainder of this documentation will assume Annotation-based discovery,\n * since this is the most common method.\n *\n * @subsection sub_manager Defining a plugin manager class and service\n * To define an annotation-based plugin manager:\n * - Choose a namespace subdirectory for your plugin. For example, search page\n *   plugins go in directory Plugin\/Search under the module namespace.\n * - Define an annotation class for your plugin type. This class should extend\n *   \\Drupal\\Component\\Annotation\\Plugin, and for most plugin types, it should\n *   contain member variables corresponding to the annotations plugins will\n *   need to provide. All plugins have at least $id: a unique string\n *   identifier.\n * - Define an alter hook for altering the discovered plugin definitions. You\n *   should document the hook in a *.api.php file.\n * - Define a plugin manager class. This class should implement\n *   \\Drupal\\Component\\Plugin\\PluginManagerInterface; most plugin managers do\n *   this by extending \\Drupal\\Core\\Plugin\\DefaultPluginManager. If you do\n *   extend the default plugin manager, the only method you will probably need\n *   to define is the class constructor, which will need to call the parent\n *   constructor to provide information about the annotation class and plugin\n *   namespace for discovery, set up the alter hook, and possibly set up\n *   caching. See classes that extend DefaultPluginManager for examples.\n * - Define a service for your plugin manager. See the\n *   @link container Services topic for more information. @endlink Your service\n *   definition should look something like this, referencing your manager\n *   class and the parent (default) plugin manager service to inherit\n *   constructor arguments:\n *   @code\n *   plugin.manager.mymodule:\n *     class: Drupal\\mymodule\\MyPluginManager\n *     parent: default_plugin_manager\n *   @endcode\n * - If your plugin is configurable, you will also need to define the\n *   configuration schema and possibly a configuration entity type. See the\n *   @link config_api Configuration API topic @endlink for more information.\n *\n * @subsection sub_collection Defining a plugin collection\n * Some configurable plugin types allow administrators to create zero or more\n * instances of each plugin, each with its own configuration. For example,\n * a single block plugin can be configured several times, to display in\n * different regions of a theme, with different visibility settings, a\n * different title, or other plugin-specific settings. To make this possible,\n * a plugin type can make use of what's known as a plugin collection.\n *\n * A plugin collection is a class that extends\n * \\Drupal\\Component\\Plugin\\LazyPluginCollection or one of its subclasses; there\n * are several examples in Drupal Core. If your plugin type uses a plugin\n * collection, it will usually also have a configuration entity, and the entity\n * class should implement\n * \\Drupal\\Core\\Entity\\EntityWithPluginCollectionInterface. Again, there are\n * several examples in Drupal Core; see also the @link config_api Configuration\n * API topic @endlink for more information about configuration entities.\n *\n * @section sec_create Creating a plugin of an existing type\n * Assuming the plugin type uses annotation-based discovery, in order to create\n * a plugin of an existing type, you will be creating a class. This class must:\n * - Implement the plugin interface, so that it has the required methods\n *   defined. Usually, you'll want to extend the plugin base class, if one has\n *   been provided.\n * - Have the right annotation in its documentation header. See the\n *   @link annotation Annotation topic @endlink for more information about\n *   annotation.\n * - Be in the right plugin namespace, in order to be discovered.\n * Often, the easiest way to make sure this happens is to find an existing\n * example of a working plugin class of the desired type, and copy it into your\n * module as a starting point.\n *\n * You can also create a plugin derivative, which allows your plugin class\n * to present itself to the user interface as multiple plugins. To do this,\n * in addition to the plugin class, you'll need to create a separate plugin\n * derivative class implementing\n * \\Drupal\\Component\\Plugin\\Derivative\\DerivativeInterface. The classes\n * \\Drupal\\system\\Plugin\\Block\\SystemMenuBlock (plugin class) and\n * \\Drupal\\system\\Plugin\\Derivative\\SystemMenuBlock (derivative class) are a\n * good example to look at.\n *\n * @section sec_use Performing tasks involving plugins\n * Here are the steps to follow to perform a task that involves plugins:\n * - Locate the machine name of the plugin manager service, and instantiate the\n *   service. See the @link container Services topic @endlink for more\n *   information on how to do this.\n * - On the plugin manager class, use methods like getDefinition(),\n *   getDefinitions(), or other methods specific to particular plugin managers\n *   to retrieve information about either specific plugins or the entire list of\n *   defined plugins.\n * - Call the createInstance() method on the plugin manager to instantiate\n *   individual plugin objects.\n * - Call methods on the plugin objects to perform the desired tasks.\n *\n * @see annotation\n * @}\n *\/",1317],["T_WHITESPACE","\n\n",1504],["T_DOC_COMMENT","\/**\n * @defgroup oo_conventions Objected-oriented programming conventions\n * @{\n * PSR-4, namespaces, class naming, and other conventions.\n *\n * A lot of the PHP code in Drupal is object oriented (OO), making use of\n * @link http:\/\/php.net\/manual\/language.oop5.php PHP classes, interfaces, and traits @endlink\n * (which are loosely referred to as \"classes\" in the rest of this topic). The\n * following conventions and standards apply to this version of Drupal:\n * - Each class must be in its own file.\n * - Classes must be namespaced. If a module defines a class, the namespace\n *   must start with \\Drupal\\module_name. If it is defined by Drupal Core for\n *   use across many modules, the namespace should be \\Drupal\\Core or\n *   \\Drupal\\Component, with the exception of the global class \\Drupal. See\n *   https:\/\/www.drupal.org\/node\/1353118 for more about namespaces.\n * - In order for the PSR-4-based class auto-loader to find the class, it must\n *   be located in a directory corresponding to the namespace. For\n *   module-defined classes, if the namespace is \\Drupal\\module_name\\foo\\bar,\n *   then the class goes under the main module directory in directory\n *   src\/foo\/bar. For Drupal-wide classes, if the namespace is\n *   \\Drupal\\Core\\foo\\bar, then it goes in directory\n *   core\/lib\/Drupal\/Core\/foo\/bar. See https:\/\/www.drupal.org\/node\/2156625 for\n *   more information about PSR-4.\n * - Some classes have annotations added to their documentation headers. See\n *   the @link annotation Annotation topic @endlink for more information.\n * - Standard plugin discovery requires particular namespaces and annotation\n *   for most plugin classes. See the\n *   @link plugin_api Plugin API topic @endlink for more information.\n * - There are project-wide coding standards for OO code, including naming:\n *   https:\/\/www.drupal.org\/node\/608152\n * - Documentation standards for classes are covered on:\n *   https:\/\/www.drupal.org\/coding-standards\/docs#classes\n * @}\n *\/",1506],["T_WHITESPACE","\n\n",1539],["T_DOC_COMMENT","\/**\n * @defgroup listing_page_class Page header for Classes page\n * @{\n * Introduction to classes\n *\n * A lot of the PHP code in Drupal is object oriented (OO), making use of\n * @link http:\/\/php.net\/manual\/language.oop5.php PHP classes, interfaces, and traits. @endlink\n * See the\n * @link oo_conventions Objected-oriented programming conventions @endlink\n * for more information.\n *\n * @see oo_conventions\n *\n * @}\n *\/",1541],["T_WHITESPACE","\n\n",1555],["T_DOC_COMMENT","\/**\n * @defgroup listing_page_namespace Page header for Namespaces page\n * @{\n * Introduction to namespaces\n *\n * PHP classes, interfaces, and traits in Drupal are\n * @link http:\/\/php.net\/manual\/en\/language.namespaces.rationale.php namespaced. @endlink\n * See the\n * @link oo_conventions Objected-oriented programming conventions @endlink\n * for more information.\n *\n * @see oo_conventions\n *\n * @}\n *\/",1557],["T_WHITESPACE","\n\n",1571],["T_DOC_COMMENT","\/**\n * @defgroup best_practices Best practices for developers\n * @{\n * Overview of standards and best practices for developers\n *\n * Ideally, all code that is included in Drupal Core and contributed modules,\n * themes, and distributions will be secure, internationalized, maintainable,\n * and efficient. In order to facilitate this, the Drupal community has\n * developed a set of guidelines and standards for developers to follow. Most of\n * these standards can be found under\n * @link https:\/\/www.drupal.org\/developing\/best-practices Best practices on Drupal.org @endlink\n *\n * Standards and best practices that developers should be aware of include:\n * - Security: https:\/\/www.drupal.org\/writing-secure-code and the\n *   @link sanitization Sanitization functions topic @endlink\n * - Coding standards: https:\/\/www.drupal.org\/coding-standards\n *   and https:\/\/www.drupal.org\/coding-standards\/docs\n * - Accessibility: https:\/\/www.drupal.org\/node\/1637990 (modules) and\n *   https:\/\/www.drupal.org\/node\/464472 (themes)\n * - Usability: https:\/\/www.drupal.org\/ui-standards\n * - Internationalization: @link i18n Internationalization topic @endlink\n * - Automated testing: @link testing Automated tests topic @endlink\n * @}\n *\/",1573],["T_WHITESPACE","\n\n",1596],["T_DOC_COMMENT","\/**\n * @defgroup utility Utility classes and functions\n * @{\n * Overview of utility classes and functions for developers.\n *\n * Drupal provides developers with a variety of utility functions that make it\n * easier and more efficient to perform tasks that are either really common,\n * tedious, or difficult. Utility functions help to reduce code duplication and\n * should be used in place of one-off code whenever possible.\n *\n * @see common.inc\n * @see file\n * @see format\n * @see php_wrappers\n * @see sanitization\n * @see transliteration\n * @see validation\n * @}\n *\/",1598],["T_WHITESPACE","\n\n",1616],["T_DOC_COMMENT","\/**\n * @defgroup hooks Hooks\n * @{\n * Define functions that alter the behavior of Drupal core.\n *\n * One way for modules to alter the core behavior of Drupal (or another module)\n * is to use hooks. Hooks are specially-named functions that a module defines\n * (this is known as \"implementing the hook\"), which are discovered and called\n * at specific times to alter or add to the base behavior or data (this is\n * known as \"invoking the hook\"). Each hook has a name (example:\n * hook_batch_alter()), a defined set of parameters, and a defined return value.\n * Your modules can implement hooks that are defined by Drupal core or other\n * modules that they interact with. Your modules can also define their own\n * hooks, in order to let other modules interact with them.\n *\n * To implement a hook:\n * - Locate the documentation for the hook. Hooks are documented in *.api.php\n *   files, by defining functions whose name starts with \"hook_\" (these\n *   files and their functions are never loaded by Drupal -- they exist solely\n *   for documentation). The function should have a documentation header, as\n *   well as a sample function body. For example, in the core file\n *   system.api.php, you can find hooks such as hook_batch_alter(). Also, if\n *   you are viewing this documentation on an API reference site, the Core\n *   hooks will be listed in this topic.\n * - Copy the function to your module's .module file.\n * - Change the name of the function, substituting your module's short name\n *   (name of the module's directory, and .info.yml file without the extension)\n *   for the \"hook\" part of the sample function name. For instance, to implement\n *   hook_batch_alter(), you would rename it to my_module_batch_alter().\n * - Edit the documentation for the function (normally, your implementation\n *   should just have one line saying \"Implements hook_batch_alter().\").\n * - Edit the body of the function, substituting in what you need your module\n *   to do.\n *\n * To define a hook:\n * - Choose a unique name for your hook. It should start with \"hook_\", followed\n *   by your module's short name.\n * - Provide documentation in a *.api.php file in your module's main\n *   directory. See the \"implementing\" section above for details of what this\n *   should contain (parameters, return value, and sample function body).\n * - Invoke the hook in your module's code.\n *\n * To invoke a hook, use methods on\n * \\Drupal\\Core\\Extension\\ModuleHandlerInterface such as alter(), invoke(),\n * and invokeAll(). You can obtain a module handler by calling\n * \\Drupal::moduleHandler(), or getting the 'module_handler' service on an\n * injected container.\n *\n * @see extending\n * @see themeable\n * @see callbacks\n * @see \\Drupal\\Core\\Extension\\ModuleHandlerInterface\n * @see \\Drupal::moduleHandler()\n *\n * @}\n *\/",1618],["T_WHITESPACE","\n\n",1673],["T_DOC_COMMENT","\/**\n * @defgroup callbacks Callbacks\n * @{\n * Callback function signatures.\n *\n * Drupal's API sometimes uses callback functions to allow you to define how\n * some type of processing happens. A callback is a function with a defined\n * signature, which you define in a module. Then you pass the function name as\n * a parameter to a Drupal API function or return it as part of a hook\n * implementation return value, and your function is called at an appropriate\n * time. For instance, when setting up batch processing you might need to\n * provide a callback function for each processing step and\/or a callback for\n * when processing is finished; you would do that by defining these functions\n * and passing their names into the batch setup function.\n *\n * Callback function signatures, like hook definitions, are described by\n * creating and documenting dummy functions in a *.api.php file; normally, the\n * dummy callback function's name should start with \"callback_\", and you should\n * document the parameters and return value and provide a sample function body.\n * Then your API documentation can refer to this callback function in its\n * documentation. A user of your API can usually name their callback function\n * anything they want, although a standard name would be to replace \"callback_\"\n * with the module name.\n *\n * @see hooks\n * @see themeable\n *\n * @}\n *\/",1675],["T_WHITESPACE","\n\n",1703],["T_DOC_COMMENT","\/**\n * @defgroup form_api Form generation\n * @{\n * Describes how to generate and manipulate forms and process form submissions.\n *\n * Drupal provides a Form API in order to achieve consistency in its form\n * processing and presentation, while simplifying code and reducing the amount\n * of HTML that must be explicitly generated by a module.\n *\n * @section generating_forms Creating forms\n * Forms are defined as classes that implement the\n * \\Drupal\\Core\\Form\\FormInterface and are built using the\n * \\Drupal\\Core\\Form\\FormBuilder class. Drupal provides a couple of utility\n * classes that can be extended as a starting point for most basic forms, the\n * most commonly used of which is \\Drupal\\Core\\Form\\FormBase. FormBuilder\n * handles the low level processing of forms such as rendering the necessary\n * HTML, initial processing of incoming $_POST data, and delegating to your\n * implementation of FormInterface for validation and processing of submitted\n * data.\n *\n * Here is an example of a Form class:\n * @code\n * namespace Drupal\\mymodule\\Form;\n *\n * use Drupal\\Core\\Form\\FormBase;\n * use Drupal\\Core\\Form\\FormStateInterface;\n *\n * class ExampleForm extends FormBase {\n *   public function getFormId() {\n *     \/\/ Unique ID of the form.\n *     return 'example_form';\n *   }\n *\n *   public function buildForm(array $form, FormStateInterface $form_state) {\n *     \/\/ Create a $form API array.\n *     $form['phone_number'] = array(\n *       '#type' => 'tel',\n *       '#title' => $this->t('Your phone number'),\n *     );\n *     $form['save'] = array(\n *       '#type' => 'submit',\n *       '#value' => $this->t('Save'),\n *     );\n *     return $form;\n *   }\n *\n *   public function validateForm(array &$form, FormStateInterface $form_state) {\n *     \/\/ Validate submitted form data.\n *   }\n *\n *   public function submitForm(array &$form, FormStateInterface $form_state) {\n *     \/\/ Handle submitted form data.\n *   }\n * }\n * @endcode\n *\n * @section retrieving_forms Retrieving and displaying forms\n * \\Drupal::formBuilder()->getForm() should be used to handle retrieving,\n * processing, and displaying a rendered HTML form. Given the ExampleForm\n * defined above,\n * \\Drupal::formBuilder()->getForm('Drupal\\mymodule\\Form\\ExampleForm') would\n * return the rendered HTML of the form defined by ExampleForm::buildForm(), or\n * call the validateForm() and submitForm(), methods depending on the current\n * processing state.\n *\n * The argument to \\Drupal::formBuilder()->getForm() is the name of a class that\n * implements FormBuilderInterface. Any additional arguments passed to the\n * getForm() method will be passed along as additional arguments to the\n * ExampleForm::buildForm() method.\n *\n * For example:\n * @code\n * $extra = '612-123-4567';\n * $form = \\Drupal::formBuilder()->getForm('Drupal\\mymodule\\Form\\ExampleForm', $extra);\n * ...\n * public function buildForm(array $form, FormStateInterface $form_state, $extra = NULL)\n *   $form['phone_number'] = array(\n *     '#type' => 'tel',\n *     '#title' => $this->t('Your phone number'),\n *     '#value' => $extra,\n *   );\n *   return $form;\n * }\n * @endcode\n *\n * Alternatively, forms can be built directly via the routing system which will\n * take care of calling \\Drupal::formBuilder()->getForm(). The following example\n * demonstrates the use of a routing.yml file to display a form at the given\n * route.\n *\n * @code\n * example.form:\n *   path: '\/example-form'\n *   defaults:\n *     _title: 'Example form'\n *     _form: '\\Drupal\\mymodule\\Form\\ExampleForm'\n * @endcode\n *\n * The $form argument to form-related functions is a specialized render array\n * containing the elements and properties of the form. For more about render\n * arrays, see the @link theme_render Render API topic. @endlink For more\n * detailed explanations of the Form API workflow, see the\n * @link https:\/\/www.drupal.org\/node\/2117411 Form API documentation section. @endlink\n * In addition, there is a set of Form API tutorials in the\n * @link https:\/\/www.drupal.org\/project\/examples Examples for Developers project. @endlink\n *\n * In the form builder, validation, submission, and other form methods,\n * $form_state is the primary influence on the processing of the form and is\n * passed to most methods, so they can use it to communicate with the form\n * system and each other. $form_state is an object that implements\n * \\Drupal\\Core\\Form\\FormStateInterface.\n * @}\n *\/",1705],["T_WHITESPACE","\n\n",1817],["T_DOC_COMMENT","\/**\n * @defgroup queue Queue operations\n * @{\n * Queue items to allow later processing.\n *\n * The queue system allows placing items in a queue and processing them later.\n * The system tries to ensure that only one consumer can process an item.\n *\n * Before a queue can be used it needs to be created by\n * Drupal\\Core\\Queue\\QueueInterface::createQueue().\n *\n * Items can be added to the queue by passing an arbitrary data object to\n * Drupal\\Core\\Queue\\QueueInterface::createItem().\n *\n * To process an item, call Drupal\\Core\\Queue\\QueueInterface::claimItem() and\n * specify how long you want to have a lease for working on that item.\n * When finished processing, the item needs to be deleted by calling\n * Drupal\\Core\\Queue\\QueueInterface::deleteItem(). If the consumer dies, the\n * item will be made available again by the Drupal\\Core\\Queue\\QueueInterface\n * implementation once the lease expires. Another consumer will then be able to\n * receive it when calling Drupal\\Core\\Queue\\QueueInterface::claimItem().\n * Due to this, the processing code should be aware that an item might be handed\n * over for processing more than once.\n *\n * The $item object used by the Drupal\\Core\\Queue\\QueueInterface can contain\n * arbitrary metadata depending on the implementation. Systems using the\n * interface should only rely on the data property which will contain the\n * information passed to Drupal\\Core\\Queue\\QueueInterface::createItem().\n * The full queue item returned by Drupal\\Core\\Queue\\QueueInterface::claimItem()\n * needs to be passed to Drupal\\Core\\Queue\\QueueInterface::deleteItem() once\n * processing is completed.\n *\n * There are two kinds of queue backends available: reliable, which preserves\n * the order of messages and guarantees that every item will be executed at\n * least once. The non-reliable kind only does a best effort to preserve order\n * in messages and to execute them at least once but there is a small chance\n * that some items get lost. For example, some distributed back-ends like\n * Amazon SQS will be managing jobs for a large set of producers and consumers\n * where a strict FIFO ordering will likely not be preserved. Another example\n * would be an in-memory queue backend which might lose items if it crashes.\n * However, such a backend would be able to deal with significantly more writes\n * than a reliable queue and for many tasks this is more important. See\n * aggregator_cron() for an example of how to effectively use a non-reliable\n * queue. Another example is doing Twitter statistics -- the small possibility\n * of losing a few items is insignificant next to power of the queue being able\n * to keep up with writes. As described in the processing section, regardless\n * of the queue being reliable or not, the processing code should be aware that\n * an item might be handed over for processing more than once (because the\n * processing code might time out before it finishes).\n * @}\n *\/",1819],["T_WHITESPACE","\n\n",1869],["T_DOC_COMMENT","\/**\n * @defgroup annotation Annotations\n * @{\n * Annotations for class discovery and metadata description.\n *\n * The Drupal plugin system has a set of reusable components that developers\n * can use, override, and extend in their modules. Most of the plugins use\n * annotations, which let classes register themselves as plugins and describe\n * their metadata. (Annotations can also be used for other purposes, though\n * at the moment, Drupal only uses them for the plugin system.)\n *\n * To annotate a class as a plugin, add code similar to the following to the\n * end of the documentation block immediately preceding the class declaration:\n * @code\n * * @ContentEntityType(\n * *   id = \"comment\",\n * *   label = @Translation(\"Comment\"),\n * *   ...\n * *   base_table = \"comment\"\n * * )\n * @endcode\n *\n * Note that you must use double quotes; single quotes will not work in\n * annotations.\n *\n * Some annotation types, which extend the \"@ PluginID\" annotation class, have\n * only a single 'id' key in their annotation. For these, it is possible to use\n * a shorthand annotation. For example:\n * @code\n * * @ViewsArea(\"entity\")\n * @endcode\n * in place of\n * @code\n * * @ViewsArea(\n * *   id = \"entity\"\n * *)\n * @endcode\n *\n * The available annotation classes are listed in this topic, and can be\n * identified when you are looking at the Drupal source code by having\n * \"@ Annotation\" in their documentation blocks (without the space after @). To\n * find examples of annotation for a particular annotation class, such as\n * EntityType, look for class files that have an @ annotation section using the\n * annotation class.\n *\n * @see plugin_translatable\n * @see plugin_context\n *\n * @}\n *\/",1871],["T_WHITESPACE","\n\n",1920],["T_DOC_COMMENT","\/**\n * @addtogroup hooks\n * @{\n *\/",1922],["T_WHITESPACE","\n\n",1925],["T_DOC_COMMENT","\/**\n * Perform periodic actions.\n *\n * Modules that require some commands to be executed periodically can\n * implement hook_cron(). The engine will then call the hook whenever a cron\n * run happens, as defined by the administrator. Typical tasks managed by\n * hook_cron() are database maintenance, backups, recalculation of settings\n * or parameters, automated mailing, and retrieving remote data.\n *\n * Short-running or non-resource-intensive tasks can be executed directly in\n * the hook_cron() implementation.\n *\n * Long-running tasks and tasks that could time out, such as retrieving remote\n * data, sending email, and intensive file tasks, should use the queue API\n * instead of executing the tasks directly. To do this, first define one or\n * more queues via a \\Drupal\\Core\\Annotation\\QueueWorker plugin. Then, add items\n * that need to be processed to the defined queues.\n *\/",1927],["T_WHITESPACE","\n",1944],["T_FUNCTION","function",1945],["T_WHITESPACE"," ",1945],["T_STRING","hook_cron",1945],"(",")",["T_WHITESPACE"," ",1945],"{",["T_WHITESPACE","\n  ",1945],["T_COMMENT","\/\/ Short-running operation example, not using a queue:\n",1946],["T_WHITESPACE","  ",1947],["T_COMMENT","\/\/ Delete all expired records since the last cron run.\n",1947],["T_WHITESPACE","  ",1948],["T_VARIABLE","$expires",1948],["T_WHITESPACE"," ",1948],"=",["T_WHITESPACE"," ",1948],["T_NS_SEPARATOR","\\",1948],["T_STRING","Drupal",1948],["T_DOUBLE_COLON","::",1948],["T_STRING","state",1948],"(",")",["T_OBJECT_OPERATOR","->",1948],["T_STRING","get",1948],"(",["T_CONSTANT_ENCAPSED_STRING","'mymodule.last_check'",1948],",",["T_WHITESPACE"," ",1948],["T_LNUMBER","0",1948],")",";",["T_WHITESPACE","\n  ",1948],["T_NS_SEPARATOR","\\",1949],["T_STRING","Drupal",1949],["T_DOUBLE_COLON","::",1949],["T_STRING","database",1949],"(",")",["T_OBJECT_OPERATOR","->",1949],["T_STRING","delete",1949],"(",["T_CONSTANT_ENCAPSED_STRING","'mymodule_table'",1949],")",["T_WHITESPACE","\n    ",1949],["T_OBJECT_OPERATOR","->",1950],["T_STRING","condition",1950],"(",["T_CONSTANT_ENCAPSED_STRING","'expires'",1950],",",["T_WHITESPACE"," ",1950],["T_VARIABLE","$expires",1950],",",["T_WHITESPACE"," ",1950],["T_CONSTANT_ENCAPSED_STRING","'>='",1950],")",["T_WHITESPACE","\n    ",1950],["T_OBJECT_OPERATOR","->",1951],["T_STRING","execute",1951],"(",")",";",["T_WHITESPACE","\n  ",1951],["T_NS_SEPARATOR","\\",1952],["T_STRING","Drupal",1952],["T_DOUBLE_COLON","::",1952],["T_STRING","state",1952],"(",")",["T_OBJECT_OPERATOR","->",1952],["T_STRING","set",1952],"(",["T_CONSTANT_ENCAPSED_STRING","'mymodule.last_check'",1952],",",["T_WHITESPACE"," ",1952],["T_STRING","REQUEST_TIME",1952],")",";",["T_WHITESPACE","\n\n  ",1952],["T_COMMENT","\/\/ Long-running operation example, leveraging a queue:\n",1954],["T_WHITESPACE","  ",1955],["T_COMMENT","\/\/ Queue news feeds for updates once their refresh interval has elapsed.\n",1955],["T_WHITESPACE","  ",1956],["T_VARIABLE","$queue",1956],["T_WHITESPACE"," ",1956],"=",["T_WHITESPACE"," ",1956],["T_NS_SEPARATOR","\\",1956],["T_STRING","Drupal",1956],["T_DOUBLE_COLON","::",1956],["T_STRING","queue",1956],"(",["T_CONSTANT_ENCAPSED_STRING","'aggregator_feeds'",1956],")",";",["T_WHITESPACE","\n  ",1956],["T_VARIABLE","$ids",1957],["T_WHITESPACE"," ",1957],"=",["T_WHITESPACE"," ",1957],["T_NS_SEPARATOR","\\",1957],["T_STRING","Drupal",1957],["T_DOUBLE_COLON","::",1957],["T_STRING","entityManager",1957],"(",")",["T_OBJECT_OPERATOR","->",1957],["T_STRING","getStorage",1957],"(",["T_CONSTANT_ENCAPSED_STRING","'aggregator_feed'",1957],")",["T_OBJECT_OPERATOR","->",1957],["T_STRING","getFeedIdsToRefresh",1957],"(",")",";",["T_WHITESPACE","\n  ",1957],["T_FOREACH","foreach",1958],["T_WHITESPACE"," ",1958],"(",["T_STRING","Feed",1958],["T_DOUBLE_COLON","::",1958],["T_STRING","loadMultiple",1958],"(",["T_VARIABLE","$ids",1958],")",["T_WHITESPACE"," ",1958],["T_AS","as",1958],["T_WHITESPACE"," ",1958],["T_VARIABLE","$feed",1958],")",["T_WHITESPACE"," ",1958],"{",["T_WHITESPACE","\n    ",1958],["T_IF","if",1959],["T_WHITESPACE"," ",1959],"(",["T_VARIABLE","$queue",1959],["T_OBJECT_OPERATOR","->",1959],["T_STRING","createItem",1959],"(",["T_VARIABLE","$feed",1959],")",")",["T_WHITESPACE"," ",1959],"{",["T_WHITESPACE","\n      ",1959],["T_COMMENT","\/\/ Add timestamp to avoid queueing item more than once.\n",1960],["T_WHITESPACE","      ",1961],["T_VARIABLE","$feed",1961],["T_OBJECT_OPERATOR","->",1961],["T_STRING","setQueuedTime",1961],"(",["T_STRING","REQUEST_TIME",1961],")",";",["T_WHITESPACE","\n      ",1961],["T_VARIABLE","$feed",1962],["T_OBJECT_OPERATOR","->",1962],["T_STRING","save",1962],"(",")",";",["T_WHITESPACE","\n    ",1962],"}",["T_WHITESPACE","\n  ",1963],"}",["T_WHITESPACE","\n  ",1964],["T_VARIABLE","$ids",1965],["T_WHITESPACE"," ",1965],"=",["T_WHITESPACE"," ",1965],["T_NS_SEPARATOR","\\",1965],["T_STRING","Drupal",1965],["T_DOUBLE_COLON","::",1965],["T_STRING","entityQuery",1965],"(",["T_CONSTANT_ENCAPSED_STRING","'aggregator_feed'",1965],")",["T_WHITESPACE","\n    ",1965],["T_OBJECT_OPERATOR","->",1966],["T_STRING","condition",1966],"(",["T_CONSTANT_ENCAPSED_STRING","'queued'",1966],",",["T_WHITESPACE"," ",1966],["T_STRING","REQUEST_TIME",1966],["T_WHITESPACE"," ",1966],"-",["T_WHITESPACE"," ",1966],"(",["T_LNUMBER","3600",1966],["T_WHITESPACE"," ",1966],"*",["T_WHITESPACE"," ",1966],["T_LNUMBER","6",1966],")",",",["T_WHITESPACE"," ",1966],["T_CONSTANT_ENCAPSED_STRING","'<'",1966],")",["T_WHITESPACE","\n    ",1966],["T_OBJECT_OPERATOR","->",1967],["T_STRING","execute",1967],"(",")",";",["T_WHITESPACE","\n  ",1967],["T_IF","if",1968],["T_WHITESPACE"," ",1968],"(",["T_VARIABLE","$ids",1968],")",["T_WHITESPACE"," ",1968],"{",["T_WHITESPACE","\n    ",1968],["T_VARIABLE","$feeds",1969],["T_WHITESPACE"," ",1969],"=",["T_WHITESPACE"," ",1969],["T_STRING","Feed",1969],["T_DOUBLE_COLON","::",1969],["T_STRING","loadMultiple",1969],"(",["T_VARIABLE","$ids",1969],")",";",["T_WHITESPACE","\n    ",1969],["T_FOREACH","foreach",1970],["T_WHITESPACE"," ",1970],"(",["T_VARIABLE","$feeds",1970],["T_WHITESPACE"," ",1970],["T_AS","as",1970],["T_WHITESPACE"," ",1970],["T_VARIABLE","$feed",1970],")",["T_WHITESPACE"," ",1970],"{",["T_WHITESPACE","\n      ",1970],["T_VARIABLE","$feed",1971],["T_OBJECT_OPERATOR","->",1971],["T_STRING","setQueuedTime",1971],"(",["T_LNUMBER","0",1971],")",";",["T_WHITESPACE","\n      ",1971],["T_VARIABLE","$feed",1972],["T_OBJECT_OPERATOR","->",1972],["T_STRING","save",1972],"(",")",";",["T_WHITESPACE","\n    ",1972],"}",["T_WHITESPACE","\n  ",1973],"}",["T_WHITESPACE","\n",1974],"}",["T_WHITESPACE","\n\n",1975],["T_DOC_COMMENT","\/**\n * Alter available data types for typed data wrappers.\n *\n * @param array $data_types\n *   An array of data type information.\n *\n * @see hook_data_type_info()\n *\/",1977],["T_WHITESPACE","\n",1984],["T_FUNCTION","function",1985],["T_WHITESPACE"," ",1985],["T_STRING","hook_data_type_info_alter",1985],"(","&",["T_VARIABLE","$data_types",1985],")",["T_WHITESPACE"," ",1985],"{",["T_WHITESPACE","\n  ",1985],["T_VARIABLE","$data_types",1986],"[",["T_CONSTANT_ENCAPSED_STRING","'email'",1986],"]","[",["T_CONSTANT_ENCAPSED_STRING","'class'",1986],"]",["T_WHITESPACE"," ",1986],"=",["T_WHITESPACE"," ",1986],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\mymodule\\Type\\Email'",1986],";",["T_WHITESPACE","\n",1986],"}",["T_WHITESPACE","\n\n",1987],["T_DOC_COMMENT","\/**\n * Alter cron queue information before cron runs.\n *\n * Called by \\Drupal\\Core\\Cron to allow modules to alter cron queue settings\n * before any jobs are processesed.\n *\n * @param array $queues\n *   An array of cron queue information.\n *\n * @see \\Drupal\\Core\\QueueWorker\\QueueWorkerInterface\n * @see \\Drupal\\Core\\Annotation\\QueueWorker\n * @see \\Drupal\\Core\\Cron\n *\/",1989],["T_WHITESPACE","\n",2001],["T_FUNCTION","function",2002],["T_WHITESPACE"," ",2002],["T_STRING","hook_queue_info_alter",2002],"(","&",["T_VARIABLE","$queues",2002],")",["T_WHITESPACE"," ",2002],"{",["T_WHITESPACE","\n  ",2002],["T_COMMENT","\/\/ This site has many feeds so let's spend 90 seconds on each cron run\n",2003],["T_WHITESPACE","  ",2004],["T_COMMENT","\/\/ updating feeds instead of the default 60.\n",2004],["T_WHITESPACE","  ",2005],["T_VARIABLE","$queues",2005],"[",["T_CONSTANT_ENCAPSED_STRING","'aggregator_feeds'",2005],"]","[",["T_CONSTANT_ENCAPSED_STRING","'cron'",2005],"]","[",["T_CONSTANT_ENCAPSED_STRING","'time'",2005],"]",["T_WHITESPACE"," ",2005],"=",["T_WHITESPACE"," ",2005],["T_LNUMBER","90",2005],";",["T_WHITESPACE","\n",2005],"}",["T_WHITESPACE","\n\n",2006],["T_DOC_COMMENT","\/**\n * Alter an email message created with MailManagerInterface->mail().\n *\n * hook_mail_alter() allows modification of email messages created and sent\n * with MailManagerInterface->mail(). Usage examples include adding and\/or\n * changing message text, message fields, and message headers.\n *\n * Email messages sent using functions other than MailManagerInterface->mail()\n * will not invoke hook_mail_alter(). For example, a contributed module directly\n * calling the MailInterface->mail() or PHP mail() function will not invoke\n * this hook. All core modules use MailManagerInterface->mail() for messaging,\n * it is best practice but not mandatory in contributed modules.\n *\n * @param $message\n *   An array containing the message data. Keys in this array include:\n *   - 'id':\n *     The MailManagerInterface->mail() id of the message. Look at module source\n *     code or MailManagerInterface->mail() for possible id values.\n *   - 'to':\n *     The address or addresses the message will be sent to. The\n *     formatting of this string must comply with RFC 2822.\n *   - 'from':\n *     The address the message will be marked as being from, which is\n *     either a custom address or the site-wide default email address.\n *   - 'subject':\n *     Subject of the email to be sent. This must not contain any newline\n *     characters, or the email may not be sent properly.\n *   - 'body':\n *     An array of strings or objects that implement\n *     \\Drupal\\Component\\Render\\MarkupInterface containing the message text. The\n *     message body is created by concatenating the individual array strings\n *     into a single text string using \"\\n\\n\" as a separator.\n *   - 'headers':\n *     Associative array containing mail headers, such as From, Sender,\n *     MIME-Version, Content-Type, etc.\n *   - 'params':\n *     An array of optional parameters supplied by the caller of\n *     MailManagerInterface->mail() that is used to build the message before\n *     hook_mail_alter() is invoked.\n *   - 'language':\n *     The language object used to build the message before hook_mail_alter()\n *     is invoked.\n *   - 'send':\n *     Set to FALSE to abort sending this email message.\n *\n * @see \\Drupal\\Core\\Mail\\MailManagerInterface::mail()\n *\/",2008],["T_WHITESPACE","\n",2054],["T_FUNCTION","function",2055],["T_WHITESPACE"," ",2055],["T_STRING","hook_mail_alter",2055],"(","&",["T_VARIABLE","$message",2055],")",["T_WHITESPACE"," ",2055],"{",["T_WHITESPACE","\n  ",2055],["T_IF","if",2056],["T_WHITESPACE"," ",2056],"(",["T_VARIABLE","$message",2056],"[",["T_CONSTANT_ENCAPSED_STRING","'id'",2056],"]",["T_WHITESPACE"," ",2056],["T_IS_EQUAL","==",2056],["T_WHITESPACE"," ",2056],["T_CONSTANT_ENCAPSED_STRING","'modulename_messagekey'",2056],")",["T_WHITESPACE"," ",2056],"{",["T_WHITESPACE","\n    ",2056],["T_IF","if",2057],["T_WHITESPACE"," ",2057],"(","!",["T_STRING","example_notifications_optin",2057],"(",["T_VARIABLE","$message",2057],"[",["T_CONSTANT_ENCAPSED_STRING","'to'",2057],"]",",",["T_WHITESPACE"," ",2057],["T_VARIABLE","$message",2057],"[",["T_CONSTANT_ENCAPSED_STRING","'id'",2057],"]",")",")",["T_WHITESPACE"," ",2057],"{",["T_WHITESPACE","\n      ",2057],["T_COMMENT","\/\/ If the recipient has opted to not receive such messages, cancel\n",2058],["T_WHITESPACE","      ",2059],["T_COMMENT","\/\/ sending.\n",2059],["T_WHITESPACE","      ",2060],["T_VARIABLE","$message",2060],"[",["T_CONSTANT_ENCAPSED_STRING","'send'",2060],"]",["T_WHITESPACE"," ",2060],"=",["T_WHITESPACE"," ",2060],["T_STRING","FALSE",2060],";",["T_WHITESPACE","\n      ",2060],["T_RETURN","return",2061],";",["T_WHITESPACE","\n    ",2061],"}",["T_WHITESPACE","\n    ",2062],["T_VARIABLE","$message",2063],"[",["T_CONSTANT_ENCAPSED_STRING","'body'",2063],"]","[","]",["T_WHITESPACE"," ",2063],"=",["T_WHITESPACE"," ",2063],["T_CONSTANT_ENCAPSED_STRING","\"--\\nMail sent out from \"",2063],["T_WHITESPACE"," ",2063],".",["T_WHITESPACE"," ",2063],["T_NS_SEPARATOR","\\",2063],["T_STRING","Drupal",2063],["T_DOUBLE_COLON","::",2063],["T_STRING","config",2063],"(",["T_CONSTANT_ENCAPSED_STRING","'system.site'",2063],")",["T_OBJECT_OPERATOR","->",2063],["T_STRING","get",2063],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",2063],")",";",["T_WHITESPACE","\n  ",2063],"}",["T_WHITESPACE","\n",2064],"}",["T_WHITESPACE","\n\n",2065],["T_DOC_COMMENT","\/**\n * Prepares a message based on parameters;\n *\n * This hook is called from MailManagerInterface->mail(). Note that hook_mail(),\n * unlike hook_mail_alter(), is only called on the $module argument to\n * MailManagerInterface->mail(), not all modules.\n *\n * @param $key\n *   An identifier of the mail.\n * @param $message\n *   An array to be filled in. Elements in this array include:\n *   - id: An ID to identify the mail sent. Look at module source code or\n *     MailManagerInterface->mail() for possible id values.\n *   - to: The address or addresses the message will be sent to. The\n *     formatting of this string must comply with RFC 2822.\n *   - subject: Subject of the email to be sent. This must not contain any\n *     newline characters, or the mail may not be sent properly.\n *     MailManagerInterface->mail() sets this to an empty\n *     string when the hook is invoked.\n *   - body: An array of lines containing the message to be sent. Drupal will\n *     format the correct line endings for you. MailManagerInterface->mail()\n *     sets this to an empty array when the hook is invoked. The array may\n *     contain either strings or objects implementing\n *     \\Drupal\\Component\\Render\\MarkupInterface.\n *   - from: The address the message will be marked as being from, which is\n *     set by MailManagerInterface->mail() to either a custom address or the\n *     site-wide default email address when the hook is invoked.\n *   - headers: Associative array containing mail headers, such as From,\n *     Sender, MIME-Version, Content-Type, etc.\n *     MailManagerInterface->mail() pre-fills several headers in this array.\n * @param $params\n *   An array of parameters supplied by the caller of\n *   MailManagerInterface->mail().\n *\n * @see \\Drupal\\Core\\Mail\\MailManagerInterface::mail()\n *\/",2067],["T_WHITESPACE","\n",2102],["T_FUNCTION","function",2103],["T_WHITESPACE"," ",2103],["T_STRING","hook_mail",2103],"(",["T_VARIABLE","$key",2103],",",["T_WHITESPACE"," ",2103],"&",["T_VARIABLE","$message",2103],",",["T_WHITESPACE"," ",2103],["T_VARIABLE","$params",2103],")",["T_WHITESPACE"," ",2103],"{",["T_WHITESPACE","\n  ",2103],["T_VARIABLE","$account",2104],["T_WHITESPACE"," ",2104],"=",["T_WHITESPACE"," ",2104],["T_VARIABLE","$params",2104],"[",["T_CONSTANT_ENCAPSED_STRING","'account'",2104],"]",";",["T_WHITESPACE","\n  ",2104],["T_VARIABLE","$context",2105],["T_WHITESPACE"," ",2105],"=",["T_WHITESPACE"," ",2105],["T_VARIABLE","$params",2105],"[",["T_CONSTANT_ENCAPSED_STRING","'context'",2105],"]",";",["T_WHITESPACE","\n  ",2105],["T_VARIABLE","$variables",2106],["T_WHITESPACE"," ",2106],"=",["T_WHITESPACE"," ",2106],["T_ARRAY","array",2106],"(",["T_WHITESPACE","\n    ",2106],["T_CONSTANT_ENCAPSED_STRING","'%site_name'",2107],["T_WHITESPACE"," ",2107],["T_DOUBLE_ARROW","=>",2107],["T_WHITESPACE"," ",2107],["T_NS_SEPARATOR","\\",2107],["T_STRING","Drupal",2107],["T_DOUBLE_COLON","::",2107],["T_STRING","config",2107],"(",["T_CONSTANT_ENCAPSED_STRING","'system.site'",2107],")",["T_OBJECT_OPERATOR","->",2107],["T_STRING","get",2107],"(",["T_CONSTANT_ENCAPSED_STRING","'name'",2107],")",",",["T_WHITESPACE","\n    ",2107],["T_CONSTANT_ENCAPSED_STRING","'%username'",2108],["T_WHITESPACE"," ",2108],["T_DOUBLE_ARROW","=>",2108],["T_WHITESPACE"," ",2108],["T_VARIABLE","$account",2108],["T_OBJECT_OPERATOR","->",2108],["T_STRING","getDisplayName",2108],"(",")",",",["T_WHITESPACE","\n  ",2108],")",";",["T_WHITESPACE","\n  ",2109],["T_IF","if",2110],["T_WHITESPACE"," ",2110],"(",["T_VARIABLE","$context",2110],"[",["T_CONSTANT_ENCAPSED_STRING","'hook'",2110],"]",["T_WHITESPACE"," ",2110],["T_IS_EQUAL","==",2110],["T_WHITESPACE"," ",2110],["T_CONSTANT_ENCAPSED_STRING","'taxonomy'",2110],")",["T_WHITESPACE"," ",2110],"{",["T_WHITESPACE","\n    ",2110],["T_VARIABLE","$entity",2111],["T_WHITESPACE"," ",2111],"=",["T_WHITESPACE"," ",2111],["T_VARIABLE","$params",2111],"[",["T_CONSTANT_ENCAPSED_STRING","'entity'",2111],"]",";",["T_WHITESPACE","\n    ",2111],["T_VARIABLE","$vocabulary",2112],["T_WHITESPACE"," ",2112],"=",["T_WHITESPACE"," ",2112],["T_STRING","Vocabulary",2112],["T_DOUBLE_COLON","::",2112],["T_STRING","load",2112],"(",["T_VARIABLE","$entity",2112],["T_OBJECT_OPERATOR","->",2112],["T_STRING","id",2112],"(",")",")",";",["T_WHITESPACE","\n    ",2112],["T_VARIABLE","$variables",2113],["T_WHITESPACE"," ",2113],["T_PLUS_EQUAL","+=",2113],["T_WHITESPACE"," ",2113],["T_ARRAY","array",2113],"(",["T_WHITESPACE","\n      ",2113],["T_CONSTANT_ENCAPSED_STRING","'%term_name'",2114],["T_WHITESPACE"," ",2114],["T_DOUBLE_ARROW","=>",2114],["T_WHITESPACE"," ",2114],["T_VARIABLE","$entity",2114],["T_OBJECT_OPERATOR","->",2114],["T_STRING","name",2114],",",["T_WHITESPACE","\n      ",2114],["T_CONSTANT_ENCAPSED_STRING","'%term_description'",2115],["T_WHITESPACE"," ",2115],["T_DOUBLE_ARROW","=>",2115],["T_WHITESPACE"," ",2115],["T_VARIABLE","$entity",2115],["T_OBJECT_OPERATOR","->",2115],["T_STRING","description",2115],",",["T_WHITESPACE","\n      ",2115],["T_CONSTANT_ENCAPSED_STRING","'%term_id'",2116],["T_WHITESPACE"," ",2116],["T_DOUBLE_ARROW","=>",2116],["T_WHITESPACE"," ",2116],["T_VARIABLE","$entity",2116],["T_OBJECT_OPERATOR","->",2116],["T_STRING","id",2116],"(",")",",",["T_WHITESPACE","\n      ",2116],["T_CONSTANT_ENCAPSED_STRING","'%vocabulary_name'",2117],["T_WHITESPACE"," ",2117],["T_DOUBLE_ARROW","=>",2117],["T_WHITESPACE"," ",2117],["T_VARIABLE","$vocabulary",2117],["T_OBJECT_OPERATOR","->",2117],["T_STRING","label",2117],"(",")",",",["T_WHITESPACE","\n      ",2117],["T_CONSTANT_ENCAPSED_STRING","'%vocabulary_description'",2118],["T_WHITESPACE"," ",2118],["T_DOUBLE_ARROW","=>",2118],["T_WHITESPACE"," ",2118],["T_VARIABLE","$vocabulary",2118],["T_OBJECT_OPERATOR","->",2118],["T_STRING","getDescription",2118],"(",")",",",["T_WHITESPACE","\n      ",2118],["T_CONSTANT_ENCAPSED_STRING","'%vocabulary_id'",2119],["T_WHITESPACE"," ",2119],["T_DOUBLE_ARROW","=>",2119],["T_WHITESPACE"," ",2119],["T_VARIABLE","$vocabulary",2119],["T_OBJECT_OPERATOR","->",2119],["T_STRING","id",2119],"(",")",",",["T_WHITESPACE","\n    ",2119],")",";",["T_WHITESPACE","\n  ",2120],"}",["T_WHITESPACE","\n\n  ",2121],["T_COMMENT","\/\/ Node-based variable translation is only available if we have a node.\n",2123],["T_WHITESPACE","  ",2124],["T_IF","if",2124],["T_WHITESPACE"," ",2124],"(",["T_ISSET","isset",2124],"(",["T_VARIABLE","$params",2124],"[",["T_CONSTANT_ENCAPSED_STRING","'node'",2124],"]",")",")",["T_WHITESPACE"," ",2124],"{",["T_WHITESPACE","\n    ",2124],["T_DOC_COMMENT","\/** @var \\Drupal\\node\\NodeInterface $node *\/",2125],["T_WHITESPACE","\n    ",2125],["T_VARIABLE","$node",2126],["T_WHITESPACE"," ",2126],"=",["T_WHITESPACE"," ",2126],["T_VARIABLE","$params",2126],"[",["T_CONSTANT_ENCAPSED_STRING","'node'",2126],"]",";",["T_WHITESPACE","\n    ",2126],["T_VARIABLE","$variables",2127],["T_WHITESPACE"," ",2127],["T_PLUS_EQUAL","+=",2127],["T_WHITESPACE"," ",2127],["T_ARRAY","array",2127],"(",["T_WHITESPACE","\n      ",2127],["T_CONSTANT_ENCAPSED_STRING","'%uid'",2128],["T_WHITESPACE"," ",2128],["T_DOUBLE_ARROW","=>",2128],["T_WHITESPACE"," ",2128],["T_VARIABLE","$node",2128],["T_OBJECT_OPERATOR","->",2128],["T_STRING","getOwnerId",2128],"(",")",",",["T_WHITESPACE","\n      ",2128],["T_CONSTANT_ENCAPSED_STRING","'%url'",2129],["T_WHITESPACE"," ",2129],["T_DOUBLE_ARROW","=>",2129],["T_WHITESPACE"," ",2129],["T_VARIABLE","$node",2129],["T_OBJECT_OPERATOR","->",2129],["T_STRING","url",2129],"(",["T_CONSTANT_ENCAPSED_STRING","'canonical'",2129],",",["T_WHITESPACE"," ",2129],["T_ARRAY","array",2129],"(",["T_CONSTANT_ENCAPSED_STRING","'absolute'",2129],["T_WHITESPACE"," ",2129],["T_DOUBLE_ARROW","=>",2129],["T_WHITESPACE"," ",2129],["T_STRING","TRUE",2129],")",")",",",["T_WHITESPACE","\n      ",2129],["T_CONSTANT_ENCAPSED_STRING","'%node_type'",2130],["T_WHITESPACE"," ",2130],["T_DOUBLE_ARROW","=>",2130],["T_WHITESPACE"," ",2130],["T_STRING","node_get_type_label",2130],"(",["T_VARIABLE","$node",2130],")",",",["T_WHITESPACE","\n      ",2130],["T_CONSTANT_ENCAPSED_STRING","'%title'",2131],["T_WHITESPACE"," ",2131],["T_DOUBLE_ARROW","=>",2131],["T_WHITESPACE"," ",2131],["T_VARIABLE","$node",2131],["T_OBJECT_OPERATOR","->",2131],["T_STRING","getTitle",2131],"(",")",",",["T_WHITESPACE","\n      ",2131],["T_CONSTANT_ENCAPSED_STRING","'%teaser'",2132],["T_WHITESPACE"," ",2132],["T_DOUBLE_ARROW","=>",2132],["T_WHITESPACE"," ",2132],["T_VARIABLE","$node",2132],["T_OBJECT_OPERATOR","->",2132],["T_STRING","teaser",2132],",",["T_WHITESPACE","\n      ",2132],["T_CONSTANT_ENCAPSED_STRING","'%body'",2133],["T_WHITESPACE"," ",2133],["T_DOUBLE_ARROW","=>",2133],["T_WHITESPACE"," ",2133],["T_VARIABLE","$node",2133],["T_OBJECT_OPERATOR","->",2133],["T_STRING","body",2133],",",["T_WHITESPACE","\n    ",2133],")",";",["T_WHITESPACE","\n  ",2134],"}",["T_WHITESPACE","\n  ",2135],["T_VARIABLE","$subject",2136],["T_WHITESPACE"," ",2136],"=",["T_WHITESPACE"," ",2136],["T_STRING","strtr",2136],"(",["T_VARIABLE","$context",2136],"[",["T_CONSTANT_ENCAPSED_STRING","'subject'",2136],"]",",",["T_WHITESPACE"," ",2136],["T_VARIABLE","$variables",2136],")",";",["T_WHITESPACE","\n  ",2136],["T_VARIABLE","$body",2137],["T_WHITESPACE"," ",2137],"=",["T_WHITESPACE"," ",2137],["T_STRING","strtr",2137],"(",["T_VARIABLE","$context",2137],"[",["T_CONSTANT_ENCAPSED_STRING","'message'",2137],"]",",",["T_WHITESPACE"," ",2137],["T_VARIABLE","$variables",2137],")",";",["T_WHITESPACE","\n  ",2137],["T_VARIABLE","$message",2138],"[",["T_CONSTANT_ENCAPSED_STRING","'subject'",2138],"]",["T_WHITESPACE"," ",2138],["T_CONCAT_EQUAL",".=",2138],["T_WHITESPACE"," ",2138],["T_STRING","str_replace",2138],"(",["T_ARRAY","array",2138],"(",["T_CONSTANT_ENCAPSED_STRING","\"\\r\"",2138],",",["T_WHITESPACE"," ",2138],["T_CONSTANT_ENCAPSED_STRING","\"\\n\"",2138],")",",",["T_WHITESPACE"," ",2138],["T_CONSTANT_ENCAPSED_STRING","''",2138],",",["T_WHITESPACE"," ",2138],["T_VARIABLE","$subject",2138],")",";",["T_WHITESPACE","\n  ",2138],["T_VARIABLE","$message",2139],"[",["T_CONSTANT_ENCAPSED_STRING","'body'",2139],"]","[","]",["T_WHITESPACE"," ",2139],"=",["T_WHITESPACE"," ",2139],["T_STRING","MailFormatHelper",2139],["T_DOUBLE_COLON","::",2139],["T_STRING","htmlToText",2139],"(",["T_VARIABLE","$body",2139],")",";",["T_WHITESPACE","\n",2139],"}",["T_WHITESPACE","\n\n",2140],["T_DOC_COMMENT","\/**\n * Alter the list of mail backend plugin definitions.\n *\n * @param array $info\n *   The mail backend plugin definitions to be altered.\n *\n * @see \\Drupal\\Core\\Annotation\\Mail\n * @see \\Drupal\\Core\\Mail\\MailManager\n *\/",2142],["T_WHITESPACE","\n",2150],["T_FUNCTION","function",2151],["T_WHITESPACE"," ",2151],["T_STRING","hook_mail_backend_info_alter",2151],"(","&",["T_VARIABLE","$info",2151],")",["T_WHITESPACE"," ",2151],"{",["T_WHITESPACE","\n  ",2151],["T_UNSET","unset",2152],"(",["T_VARIABLE","$info",2152],"[",["T_CONSTANT_ENCAPSED_STRING","'test_mail_collector'",2152],"]",")",";",["T_WHITESPACE","\n",2152],"}",["T_WHITESPACE","\n\n",2153],["T_DOC_COMMENT","\/**\n * Alter the default country list.\n *\n * @param $countries\n *   The associative array of countries keyed by two-letter country code.\n *\n * @see \\Drupal\\Core\\Locale\\CountryManager::getList()\n *\/",2155],["T_WHITESPACE","\n",2162],["T_FUNCTION","function",2163],["T_WHITESPACE"," ",2163],["T_STRING","hook_countries_alter",2163],"(","&",["T_VARIABLE","$countries",2163],")",["T_WHITESPACE"," ",2163],"{",["T_WHITESPACE","\n  ",2163],["T_COMMENT","\/\/ Elbonia is now independent, so add it to the country list.\n",2164],["T_WHITESPACE","  ",2165],["T_VARIABLE","$countries",2165],"[",["T_CONSTANT_ENCAPSED_STRING","'EB'",2165],"]",["T_WHITESPACE"," ",2165],"=",["T_WHITESPACE"," ",2165],["T_CONSTANT_ENCAPSED_STRING","'Elbonia'",2165],";",["T_WHITESPACE","\n",2165],"}",["T_WHITESPACE","\n\n",2166],["T_DOC_COMMENT","\/**\n * Alter display variant plugin definitions.\n *\n * @param array $definitions\n *   The array of display variant definitions, keyed by plugin ID.\n *\n * @see \\Drupal\\Core\\Display\\VariantManager\n * @see \\Drupal\\Core\\Display\\Annotation\\DisplayVariant\n *\/",2168],["T_WHITESPACE","\n",2176],["T_FUNCTION","function",2177],["T_WHITESPACE"," ",2177],["T_STRING","hook_display_variant_plugin_alter",2177],"(",["T_ARRAY","array",2177],["T_WHITESPACE"," ",2177],"&",["T_VARIABLE","$definitions",2177],")",["T_WHITESPACE"," ",2177],"{",["T_WHITESPACE","\n  ",2177],["T_VARIABLE","$definitions",2178],"[",["T_CONSTANT_ENCAPSED_STRING","'full_page'",2178],"]","[",["T_CONSTANT_ENCAPSED_STRING","'admin_label'",2178],"]",["T_WHITESPACE"," ",2178],"=",["T_WHITESPACE"," ",2178],["T_STRING","t",2178],"(",["T_CONSTANT_ENCAPSED_STRING","'Block layout'",2178],")",";",["T_WHITESPACE","\n",2178],"}",["T_WHITESPACE","\n\n",2179],["T_DOC_COMMENT","\/**\n * Flush all persistent and static caches.\n *\n * This hook asks your module to clear all of its static caches,\n * in order to ensure a clean environment for subsequently\n * invoked data rebuilds.\n *\n * Do NOT use this hook for rebuilding information. Only use it to flush custom\n * caches.\n *\n * Static caches using drupal_static() do not need to be reset manually.\n * However, all other static variables that do not use drupal_static() must be\n * manually reset.\n *\n * This hook is invoked by drupal_flush_all_caches(). It runs before module data\n * is updated and before hook_rebuild().\n *\n * @see drupal_flush_all_caches()\n * @see hook_rebuild()\n *\/",2181],["T_WHITESPACE","\n",2200],["T_FUNCTION","function",2201],["T_WHITESPACE"," ",2201],["T_STRING","hook_cache_flush",2201],"(",")",["T_WHITESPACE"," ",2201],"{",["T_WHITESPACE","\n  ",2201],["T_IF","if",2202],["T_WHITESPACE"," ",2202],"(",["T_STRING","defined",2202],"(",["T_CONSTANT_ENCAPSED_STRING","'MAINTENANCE_MODE'",2202],")",["T_WHITESPACE"," ",2202],["T_BOOLEAN_AND","&&",2202],["T_WHITESPACE"," ",2202],["T_STRING","MAINTENANCE_MODE",2202],["T_WHITESPACE"," ",2202],["T_IS_EQUAL","==",2202],["T_WHITESPACE"," ",2202],["T_CONSTANT_ENCAPSED_STRING","'update'",2202],")",["T_WHITESPACE"," ",2202],"{",["T_WHITESPACE","\n    ",2202],["T_STRING","_update_cache_clear",2203],"(",")",";",["T_WHITESPACE","\n  ",2203],"}",["T_WHITESPACE","\n",2204],"}",["T_WHITESPACE","\n\n",2205],["T_DOC_COMMENT","\/**\n * Rebuild data based upon refreshed caches.\n *\n * This hook allows your module to rebuild its data based on the latest\/current\n * module data. It runs after hook_cache_flush() and after all module data has\n * been updated.\n *\n * This hook is only invoked after the system has been completely cleared;\n * i.e., all previously cached data is known to be gone and every API in the\n * system is known to return current information, so your module can safely rely\n * on all available data to rebuild its own.\n *\n * @see hook_cache_flush()\n * @see drupal_flush_all_caches()\n *\/",2207],["T_WHITESPACE","\n",2221],["T_FUNCTION","function",2222],["T_WHITESPACE"," ",2222],["T_STRING","hook_rebuild",2222],"(",")",["T_WHITESPACE"," ",2222],"{",["T_WHITESPACE","\n  ",2222],["T_VARIABLE","$themes",2223],["T_WHITESPACE"," ",2223],"=",["T_WHITESPACE"," ",2223],["T_NS_SEPARATOR","\\",2223],["T_STRING","Drupal",2223],["T_DOUBLE_COLON","::",2223],["T_STRING","service",2223],"(",["T_CONSTANT_ENCAPSED_STRING","'theme_handler'",2223],")",["T_OBJECT_OPERATOR","->",2223],["T_STRING","listInfo",2223],"(",")",";",["T_WHITESPACE","\n  ",2223],["T_FOREACH","foreach",2224],["T_WHITESPACE"," ",2224],"(",["T_VARIABLE","$themes",2224],["T_WHITESPACE"," ",2224],["T_AS","as",2224],["T_WHITESPACE"," ",2224],["T_VARIABLE","$theme",2224],")",["T_WHITESPACE"," ",2224],"{",["T_WHITESPACE","\n    ",2224],["T_STRING","_block_rehash",2225],"(",["T_VARIABLE","$theme",2225],["T_OBJECT_OPERATOR","->",2225],["T_STRING","getName",2225],"(",")",")",";",["T_WHITESPACE","\n  ",2225],"}",["T_WHITESPACE","\n",2226],"}",["T_WHITESPACE","\n\n",2227],["T_DOC_COMMENT","\/**\n * Alter the configuration synchronization steps.\n *\n * @param array $sync_steps\n *   A one-dimensional array of \\Drupal\\Core\\Config\\ConfigImporter method names\n *   or callables that are invoked to complete the import, in the order that\n *   they will be processed. Each callable item defined in $sync_steps should\n *   either be a global function or a public static method. The callable should\n *   accept a $context array by reference. For example:\n *   <code>\n *     function _additional_configuration_step(&$context) {\n *       \/\/ Do stuff.\n *       \/\/ If finished set $context['finished'] = 1.\n *     }\n *   <\/code>\n *   For more information on creating batches, see the\n *   @link batch Batch operations @endlink documentation.\n *\n * @see callback_batch_operation()\n * @see \\Drupal\\Core\\Config\\ConfigImporter::initialize()\n *\/",2229],["T_WHITESPACE","\n",2249],["T_FUNCTION","function",2250],["T_WHITESPACE"," ",2250],["T_STRING","hook_config_import_steps_alter",2250],"(","&",["T_VARIABLE","$sync_steps",2250],",",["T_WHITESPACE"," ",2250],["T_NS_SEPARATOR","\\",2250],["T_STRING","Drupal",2250],["T_NS_SEPARATOR","\\",2250],["T_STRING","Core",2250],["T_NS_SEPARATOR","\\",2250],["T_STRING","Config",2250],["T_NS_SEPARATOR","\\",2250],["T_STRING","ConfigImporter",2250],["T_WHITESPACE"," ",2250],["T_VARIABLE","$config_importer",2250],")",["T_WHITESPACE"," ",2250],"{",["T_WHITESPACE","\n  ",2250],["T_VARIABLE","$deletes",2251],["T_WHITESPACE"," ",2251],"=",["T_WHITESPACE"," ",2251],["T_VARIABLE","$config_importer",2251],["T_OBJECT_OPERATOR","->",2251],["T_STRING","getUnprocessedConfiguration",2251],"(",["T_CONSTANT_ENCAPSED_STRING","'delete'",2251],")",";",["T_WHITESPACE","\n  ",2251],["T_IF","if",2252],["T_WHITESPACE"," ",2252],"(",["T_ISSET","isset",2252],"(",["T_VARIABLE","$deletes",2252],"[",["T_CONSTANT_ENCAPSED_STRING","'field.storage.node.body'",2252],"]",")",")",["T_WHITESPACE"," ",2252],"{",["T_WHITESPACE","\n    ",2252],["T_VARIABLE","$sync_steps",2253],"[","]",["T_WHITESPACE"," ",2253],"=",["T_WHITESPACE"," ",2253],["T_CONSTANT_ENCAPSED_STRING","'_additional_configuration_step'",2253],";",["T_WHITESPACE","\n  ",2253],"}",["T_WHITESPACE","\n",2254],"}",["T_WHITESPACE","\n\n",2255],["T_DOC_COMMENT","\/**\n * Alter config typed data definitions.\n *\n * For example you can alter the typed data types representing each\n * configuration schema type to change default labels or form element renderers\n * used for configuration translation.\n *\n * If implementations of this hook add or remove configuration schema a\n * ConfigSchemaAlterException will be thrown. Keep in mind that there are tools\n * that may use the configuration schema for static analysis of configuration\n * files, like the string extractor for the localization system. Such systems\n * won't work with dynamically defined configuration schemas.\n *\n * For adding new data types use configuration schema YAML files instead.\n *\n * @param $definitions\n *   Associative array of configuration type definitions keyed by schema type\n *   names. The elements are themselves array with information about the type.\n *\n * @see \\Drupal\\Core\\Config\\TypedConfigManager\n * @see \\Drupal\\Core\\Config\\Schema\\ConfigSchemaAlterException\n *\/",2257],["T_WHITESPACE","\n",2278],["T_FUNCTION","function",2279],["T_WHITESPACE"," ",2279],["T_STRING","hook_config_schema_info_alter",2279],"(","&",["T_VARIABLE","$definitions",2279],")",["T_WHITESPACE"," ",2279],"{",["T_WHITESPACE","\n  ",2279],["T_COMMENT","\/\/ Enhance the text and date type definitions with classes to generate proper\n",2280],["T_WHITESPACE","  ",2281],["T_COMMENT","\/\/ form elements in ConfigTranslationFormBase. Other translatable types will\n",2281],["T_WHITESPACE","  ",2282],["T_COMMENT","\/\/ appear as a one line textfield.\n",2282],["T_WHITESPACE","  ",2283],["T_VARIABLE","$definitions",2283],"[",["T_CONSTANT_ENCAPSED_STRING","'text'",2283],"]","[",["T_CONSTANT_ENCAPSED_STRING","'form_element_class'",2283],"]",["T_WHITESPACE"," ",2283],"=",["T_WHITESPACE"," ",2283],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\config_translation\\FormElement\\Textarea'",2283],";",["T_WHITESPACE","\n  ",2283],["T_VARIABLE","$definitions",2284],"[",["T_CONSTANT_ENCAPSED_STRING","'date_format'",2284],"]","[",["T_CONSTANT_ENCAPSED_STRING","'form_element_class'",2284],"]",["T_WHITESPACE"," ",2284],"=",["T_WHITESPACE"," ",2284],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\config_translation\\FormElement\\DateFormat'",2284],";",["T_WHITESPACE","\n",2284],"}",["T_WHITESPACE","\n\n",2285],["T_DOC_COMMENT","\/**\n * Alter validation constraint plugin definitions.\n *\n * @param array[] $definitions\n *   The array of validation constraint definitions, keyed by plugin ID.\n *\n * @see \\Drupal\\Core\\Validation\\ConstraintManager\n * @see \\Drupal\\Core\\Validation\\Annotation\\Constraint\n *\/",2287],["T_WHITESPACE","\n",2295],["T_FUNCTION","function",2296],["T_WHITESPACE"," ",2296],["T_STRING","hook_validation_constraint_alter",2296],"(",["T_ARRAY","array",2296],["T_WHITESPACE"," ",2296],"&",["T_VARIABLE","$definitions",2296],")",["T_WHITESPACE"," ",2296],"{",["T_WHITESPACE","\n  ",2296],["T_VARIABLE","$definitions",2297],"[",["T_CONSTANT_ENCAPSED_STRING","'Null'",2297],"]","[",["T_CONSTANT_ENCAPSED_STRING","'class'",2297],"]",["T_WHITESPACE"," ",2297],"=",["T_WHITESPACE"," ",2297],["T_CONSTANT_ENCAPSED_STRING","'\\Drupal\\mymodule\\Validator\\Constraints\\MyClass'",2297],";",["T_WHITESPACE","\n",2297],"}",["T_WHITESPACE","\n\n",2298],["T_DOC_COMMENT","\/**\n * @} End of \"addtogroup hooks\".\n *\/",2300],["T_WHITESPACE","\n\n",2302],["T_DOC_COMMENT","\/**\n * @defgroup ajax Ajax API\n * @{\n * Overview for Drupal's Ajax API.\n *\n * @section sec_overview Overview of Ajax\n * Ajax is the process of dynamically updating parts of a page's HTML based on\n * data from the server. When a specified event takes place, a PHP callback is\n * triggered, which performs server-side logic and may return updated markup or\n * JavaScript commands to run. After the return, the browser runs the JavaScript\n * or updates the markup on the fly, with no full page refresh necessary.\n *\n * Many different events can trigger Ajax responses, including:\n * - Clicking a button\n * - Pressing a key\n * - Moving the mouse\n *\n * @section sec_framework Ajax responses in forms\n * Forms that use the Drupal Form API (see the\n * @link form_api Form API topic @endlink for more information about forms) can\n * trigger AJAX responses. Here is an outline of the steps:\n * - Add property '#ajax' to a form element in your form array, to trigger an\n *   Ajax response.\n * - Write an Ajax callback to process the input and respond.\n * See sections below for details on these two steps.\n *\n * @subsection sub_form Adding Ajax triggers to a form\n * As an example of adding Ajax triggers to a form, consider editing a date\n * format, where the user is provided with a sample of the generated date output\n * as they type. To accomplish this, typing in the text field should trigger an\n * Ajax response. This is done in the text field form array element\n * in \\Drupal\\config_translation\\FormElement\\DateFormat::getFormElement():\n * @code\n * '#ajax' => array(\n *   'callback' => 'Drupal\\config_translation\\FormElement\\DateFormat::ajaxSample',\n *   'event' => 'keyup',\n *   'progress' => array(\n *     'type' => 'throbber',\n *     'message' => NULL,\n *   ),\n * ),\n * @endcode\n *\n * As you can see from this example, the #ajax property for a form element is\n * an array. Here are the details of its elements, all of which are optional:\n * - callback: The callback to invoke to handle the server side of the\n *   Ajax event. More information on callbacks is below in @ref sub_callback.\n * - wrapper: The HTML 'id' attribute of the area where the content returned by\n *   the callback should be placed. Note that callbacks have a choice of\n *   returning content or JavaScript commands; 'wrapper' is used for content\n *   returns.\n * - method: The jQuery method for placing the new content (used with\n *   'wrapper'). Valid options are 'replaceWith' (default), 'append', 'prepend',\n *   'before', 'after', or 'html'. See\n *   http:\/\/api.jquery.com\/category\/manipulation\/ for more information on these\n *   methods.\n * - effect: The jQuery effect to use when placing the new HTML (used with\n *   'wrapper'). Valid options are 'none' (default), 'slide', or 'fade'.\n * - speed: The effect speed to use (used with 'effect' and 'wrapper'). Valid\n *   options are 'slow' (default), 'fast', or the number of milliseconds the\n *   effect should run.\n * - event: The JavaScript event to respond to. This is selected automatically\n *   for the type of form element; provide a value to override the default.\n * - prevent: A JavaScript event to prevent when the event is triggered. For\n *   example, if you use event 'mousedown' on a button, you might want to\n *   prevent 'click' events from also being triggered.\n * - progress: An array indicating how to show Ajax processing progress. Can\n *   contain one or more of these elements:\n *   - type: Type of indicator: 'throbber' (default) or 'bar'.\n *   - message: Translated message to display.\n *   - url: For a bar progress indicator, URL path for determining progress.\n *   - interval: For a bar progress indicator, how often to update it.\n * - url: A \\Drupal\\Core\\Url to which to submit the Ajax request. If omitted,\n *   defaults to either the same URL as the form or link destination is for\n *   someone with JavaScript disabled, or a slightly modified version (e.g.,\n *   with a query parameter added, removed, or changed) of that URL if\n *   necessary to support Drupal's content negotiation. It is recommended to\n *   omit this key and use Drupal's content negotiation rather than using\n *   substantially different URLs between Ajax and non-Ajax.\n *\n * @subsection sub_callback Setting up a callback to process Ajax\n * Once you have set up your form to trigger an Ajax response (see @ref sub_form\n * above), you need to write some PHP code to process the response. If you use\n * 'path' in your Ajax set-up, your route controller will be triggered with only\n * the information you provide in the URL. If you use 'callback', your callback\n * method is a function, which will receive the $form and $form_state from the\n * triggering form. You can use $form_state to get information about the\n * data the user has entered into the form. For instance, in the above example\n * for the date format preview,\n * \\Drupal\\config_translation\\FormElement\\DateFormat\\ajaxSample() does this to\n * get the format string entered by the user:\n * @code\n * $format_value = \\Drupal\\Component\\Utility\\NestedArray::getValue(\n *   $form_state->getValues(),\n *   $form_state->getTriggeringElement()['#array_parents']);\n * @endcode\n *\n * Once you have processed the input, you have your choice of returning HTML\n * markup or a set of Ajax commands. If you choose to return HTML markup, you\n * can return it as a string or a renderable array, and it will be placed in\n * the defined 'wrapper' element (see documentation above in @ref sub_form).\n * In addition, any messages returned by drupal_get_messages(), themed as in\n * status-messages.html.twig, will be prepended.\n *\n * To return commands, you need to set up an object of class\n * \\Drupal\\Core\\Ajax\\AjaxResponse, and then use its addCommand() method to add\n * individual commands to it. In the date format preview example, the format\n * output is calculated, and then it is returned as replacement markup for a div\n * like this:\n * @code\n * $response = new AjaxResponse();\n * $response->addCommand(new ReplaceCommand(\n *   '#edit-date-format-suffix',\n *   '<small id=\"edit-date-format-suffix\">' . $format . '<\/small>'));\n * return $response;\n * @endcode\n *\n * The individual commands that you can return implement interface\n * \\Drupal\\Core\\Ajax\\CommandInterface. Available commands provide the ability\n * to pop up alerts, manipulate text and markup in various ways, redirect\n * to a new URL, and the generic \\Drupal\\Core\\Ajax\\InvokeCommand, which\n * invokes an arbitrary jQuery command.\n *\n * As noted above, status messages are prepended automatically if you use the\n * 'wrapper' method and return HTML markup. This is not the case if you return\n * commands, but if you would like to show status messages, you can add\n * @code\n * array('#type' => 'status_messages')\n * @endcode\n * to a render array, use drupal_render() to render it, and add a command to\n * place the messages in an appropriate location.\n *\n * @section sec_other Other methods for triggering Ajax\n * Here are some additional methods you can use to trigger Ajax responses in\n * Drupal:\n * - Add class 'use-ajax' to a link. The link will be loaded using an Ajax\n *   call. When using this method, the href of the link can contain '\/nojs\/' as\n *   part of the path. When the Ajax JavaScript processes the page, it will\n *   convert this to '\/ajax\/'. The server is then able to easily tell if this\n *   request was made through an actual Ajax request or in a degraded state, and\n *   respond appropriately.\n * - Add class 'use-ajax-submit' to a submit button in a form. The form will\n *   then be submitted via Ajax to the path specified in the #action.  Like the\n *   ajax-submit class on links, this path will have '\/nojs\/' replaced with\n *   '\/ajax\/' so that the submit handler can tell if the form was submitted in a\n *   degraded state or not.\n * - Add property '#autocomplete_route_name' to a text field in a form. The\n *   route controller for this route must return an array of options for\n *   autocomplete, as a \\Symfony\\Component\\HttpFoundation\\JsonResponse object.\n *   See the @link menu Routing topic @endlink for more information about\n *   routing.\n *\/",2304],["T_WHITESPACE","\n\n",2455],["T_DOC_COMMENT","\/**\n * @} End of \"defgroup ajax\".\n *\/",2457],["T_WHITESPACE","\n\n",2459],["T_DOC_COMMENT","\/**\n * @defgroup service_tag Service Tags\n * @{\n * Service tags overview\n *\n * Some services have tags, which are defined in the service definition. Tags\n * are used to define a group of related services, or to specify some aspect of\n * how the service behaves. Typically, if you tag a service, your service class\n * must also implement a corresponding interface. Some common examples:\n * - access_check: Indicates a route access checking service; see the\n *   @link menu Menu and routing system topic @endlink for more information.\n * - cache.bin: Indicates a cache bin service; see the\n *   @link cache Cache topic @endlink for more information.\n * - event_subscriber: Indicates an event subscriber service. Event subscribers\n *   can be used for dynamic routing and route altering; see the\n *   @link menu Menu and routing system topic @endlink for more information.\n *   They can also be used for other purposes; see\n *   http:\/\/symfony.com\/doc\/current\/cookbook\/doctrine\/event_listeners_subscribers.html\n *   for more information.\n * - needs_destruction: Indicates that a destruct() method needs to be called\n *   at the end of a request to finalize operations, if this service was\n *   instantiated. Services should implement \\Drupal\\Core\\DestructableInterface\n *   in this case.\n * - context_provider: Indicates a block context provider, used for example\n *   by block conditions. It has to implement\n *   \\Drupal\\Core\\Plugin\\Context\\ContextProviderInterface.\n * - http_client_middleware: Indicates that the service provides a guzzle\n *   middleware, see\n *   https:\/\/guzzle.readthedocs.org\/en\/latest\/handlers-and-middleware.html for\n *   more information.\n *\n * Creating a tag for a service does not do anything on its own, but tags\n * can be discovered or queried in a compiler pass when the container is built,\n * and a corresponding action can be taken. See\n * \\Drupal\\Core\\Render\\MainContent\\MainContentRenderersPass for an example of\n * finding tagged services.\n *\n * See @link container Services and Dependency Injection Container @endlink for\n * information on services and the dependency injection container.\n *\n * @}\n *\/",2461],["T_WHITESPACE","\n\n",2502],["T_DOC_COMMENT","\/**\n * @defgroup events Events\n * @{\n * Overview of event dispatch and subscribing\n *\n * @section sec_intro Introduction and terminology\n * Events are part of the Symfony framework: they allow for different components\n * of the system to interact and communicate with each other. Each event has a\n * unique string name. One system component dispatches the event at an\n * appropriate time; many events are dispatched by Drupal core and the Symfony\n * framework in every request. Other system components can register as event\n * subscribers; when an event is dispatched, a method is called on each\n * registered subscriber, allowing each one to react. For more on the general\n * concept of events, see\n * http:\/\/symfony.com\/doc\/current\/components\/event_dispatcher\/introduction.html\n *\n * @section sec_dispatch Dispatching events\n * To dispatch an event, call the\n * \\Symfony\\Component\\EventDispatcher\\EventDispatchInterface::dispatch() method\n * on the 'event_dispatcher' service (see the\n * @link container Services topic @endlink for more information about how to\n * interact with services). The first argument is the unique event name, which\n * you should normally define as a constant in a separate static class (see\n * \\Symfony\\Component\\HttpKernel\\KernelEvents and\n * \\Drupal\\Core\\Config\\ConfigEvents for examples). The second argument is a\n * \\Symfony\\Component\\EventDispatcher\\Event object; normally you will need to\n * extend this class, so that your event class can provide data to the event\n * subscribers.\n *\n * @section sec_subscribe Registering event subscribers\n * Here are the steps to register an event subscriber:\n * - Define a service in your module, tagged with 'event_subscriber' (see the\n *   @link container Services topic @endlink for instructions).\n * - Define a class for your subscriber service that implements\n *   \\Symfony\\Component\\EventDispatcher\\EventSubscriberInterface\n * - In your class, the getSubscribedEvents method returns a list of the events\n *   this class is subscribed to, and which methods on the class should be\n *   called for each one. Example:\n *   @code\n *   public static function getSubscribedEvents() {\n *     \/\/ Subscribe to kernel terminate with priority 100.\n *     $events[KernelEvents::TERMINATE][] = array('onTerminate', 100);\n *     \/\/ Subscribe to kernel request with default priority of 0.\n *     $events[KernelEvents::REQUEST][] = array('onRequest');\n *     return $events;\n *   }\n *   @endcode\n * - Write the methods that respond to the events; each one receives the\n *   event object provided in the dispatch as its one argument. In the above\n *   example, you would need to write onTerminate() and onRequest() methods.\n *\n * Note that in your getSubscribedEvents() method, you can optionally set the\n * priority of your event subscriber (see terminate example above). Event\n * subscribers with higher priority numbers get executed first; the default\n * priority is zero. If two event subscribers for the same event have the same\n * priority, the one defined in a module with a lower module weight will fire\n * first. Subscribers defined in the same services file are fired in\n * definition order. If order matters defining a priority is strongly advised\n * instead of relying on these two tie breaker rules as they might change in a\n * minor release.\n * @}\n *\/",2504],["T_WHITESPACE","\n",2565]]