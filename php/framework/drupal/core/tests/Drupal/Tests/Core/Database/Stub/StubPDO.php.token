[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Tests",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Database",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Stub",3],";",["T_WHITESPACE","\n\n",3],["T_DOC_COMMENT","\/**\n * A stub of \\PDO for testing purposes.\n *\n * We override the constructor method so that PHPUnit can mock the \\PDO class.\n * \\PDO itself can't be mocked, so we have to create a subclass. This subclass\n * is being used to unit test Connection, so we don't need a functional database\n * but we do need a mock \\PDO object.\n *\n * @see Drupal\\Tests\\Core\\Database\\ConnectionTest\n * @see Drupal\\Core\\Database\\Connection\n * @see http:\/\/stackoverflow.com\/questions\/3138946\/mocking-the-pdo-object-using-phpunit\n *\/",5],["T_WHITESPACE","\n",16],["T_CLASS","class",17],["T_WHITESPACE"," ",17],["T_STRING","StubPDO",17],["T_WHITESPACE"," ",17],["T_EXTENDS","extends",17],["T_WHITESPACE"," ",17],["T_NS_SEPARATOR","\\",17],["T_STRING","PDO",17],["T_WHITESPACE"," ",17],"{",["T_WHITESPACE","\n\n  ",17],["T_DOC_COMMENT","\/**\n   * Construction method.\n   *\n   * We override this construction method with a no-op in order to mock \\PDO\n   * under unit tests.\n   *\n   * @see http:\/\/stackoverflow.com\/questions\/3138946\/mocking-the-pdo-object-using-phpunit\n   *\/",19],["T_WHITESPACE","\n  ",26],["T_PUBLIC","public",27],["T_WHITESPACE"," ",27],["T_FUNCTION","function",27],["T_WHITESPACE"," ",27],["T_STRING","__construct",27],"(",")",["T_WHITESPACE"," ",27],"{",["T_WHITESPACE","\n    ",27],["T_COMMENT","\/\/ No-op.\n",28],["T_WHITESPACE","  ",29],"}",["T_WHITESPACE","\n\n",29],"}",["T_WHITESPACE","\n",31]]