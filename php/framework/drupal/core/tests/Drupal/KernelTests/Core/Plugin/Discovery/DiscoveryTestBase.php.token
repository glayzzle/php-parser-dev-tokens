[["T_OPEN_TAG","<?php\n",1],["T_WHITESPACE","\n",2],["T_NAMESPACE","namespace",3],["T_WHITESPACE"," ",3],["T_STRING","Drupal",3],["T_NS_SEPARATOR","\\",3],["T_STRING","KernelTests",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Core",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Plugin",3],["T_NS_SEPARATOR","\\",3],["T_STRING","Discovery",3],";",["T_WHITESPACE","\n\n",3],["T_USE","use",5],["T_WHITESPACE"," ",5],["T_STRING","Drupal",5],["T_NS_SEPARATOR","\\",5],["T_STRING","Core",5],["T_NS_SEPARATOR","\\",5],["T_STRING","StringTranslation",5],["T_NS_SEPARATOR","\\",5],["T_STRING","TranslatableMarkup",5],";",["T_WHITESPACE","\n",5],["T_USE","use",6],["T_WHITESPACE"," ",6],["T_STRING","Drupal",6],["T_NS_SEPARATOR","\\",6],["T_STRING","KernelTests",6],["T_NS_SEPARATOR","\\",6],["T_STRING","KernelTestBase",6],";",["T_WHITESPACE","\n\n",6],["T_DOC_COMMENT","\/**\n * Base class for plugin discovery tests.\n *\/",8],["T_WHITESPACE","\n",10],["T_ABSTRACT","abstract",11],["T_WHITESPACE"," ",11],["T_CLASS","class",11],["T_WHITESPACE"," ",11],["T_STRING","DiscoveryTestBase",11],["T_WHITESPACE"," ",11],["T_EXTENDS","extends",11],["T_WHITESPACE"," ",11],["T_STRING","KernelTestBase",11],["T_WHITESPACE"," ",11],"{",["T_WHITESPACE","\n\n  ",11],["T_DOC_COMMENT","\/**\n   * The discovery component to test.\n   *\n   * @var \\Drupal\\Component\\Plugin\\Discovery\\DiscoveryInterface\n   *\/",13],["T_WHITESPACE","\n  ",17],["T_PROTECTED","protected",18],["T_WHITESPACE"," ",18],["T_VARIABLE","$discovery",18],";",["T_WHITESPACE","\n\n  ",18],["T_DOC_COMMENT","\/**\n   * The plugin definitions the discovery component is expected to discover.\n   *\n   * @var array\n   *\/",20],["T_WHITESPACE","\n  ",24],["T_PROTECTED","protected",25],["T_WHITESPACE"," ",25],["T_VARIABLE","$expectedDefinitions",25],";",["T_WHITESPACE","\n\n  ",25],["T_DOC_COMMENT","\/**\n   * An empty discovery component.\n   *\n   * This will be tested to ensure that the case where no plugin information is\n   * found, is handled correctly.\n   *\n   * @var \\Drupal\\Component\\Plugin\\Discovery\\DiscoveryInterface\n   *\/",27],["T_WHITESPACE","\n  ",34],["T_PROTECTED","protected",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$emptyDiscovery",35],";",["T_WHITESPACE","\n\n  ",35],["T_DOC_COMMENT","\/**\n   * Tests getDefinitions() and getDefinition().\n   *\/",37],["T_WHITESPACE","\n  ",39],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","testDiscoveryInterface",40],"(",")",["T_WHITESPACE"," ",40],"{",["T_WHITESPACE","\n    ",40],["T_COMMENT","\/\/ Ensure that getDefinitions() returns the expected definitions.\n",41],["T_WHITESPACE","    ",42],["T_COMMENT","\/\/ For the arrays to be identical (instead of only equal), they must be\n",42],["T_WHITESPACE","    ",43],["T_COMMENT","\/\/ sorted equally, which seems unnecessary here.\n",43],["T_WHITESPACE","    ",44],["T_COMMENT","\/\/ The discovered definitions may contain circular references; use a custom\n",44],["T_WHITESPACE","    ",45],["T_COMMENT","\/\/ assertion message to prevent var_export() from getting called.\n",45],["T_WHITESPACE","    ",46],["T_VARIABLE","$this",46],["T_OBJECT_OPERATOR","->",46],["T_STRING","assertEqual",46],"(",["T_VARIABLE","$this",46],["T_OBJECT_OPERATOR","->",46],["T_STRING","discovery",46],["T_OBJECT_OPERATOR","->",46],["T_STRING","getDefinitions",46],"(",")",",",["T_WHITESPACE"," ",46],["T_VARIABLE","$this",46],["T_OBJECT_OPERATOR","->",46],["T_STRING","expectedDefinitions",46],",",["T_WHITESPACE"," ",46],["T_CONSTANT_ENCAPSED_STRING","'Expected definitions found.'",46],")",";",["T_WHITESPACE","\n\n    ",46],["T_COMMENT","\/\/ Ensure that getDefinition() returns the expected definition.\n",48],["T_WHITESPACE","    ",49],["T_FOREACH","foreach",49],["T_WHITESPACE"," ",49],"(",["T_VARIABLE","$this",49],["T_OBJECT_OPERATOR","->",49],["T_STRING","expectedDefinitions",49],["T_WHITESPACE"," ",49],["T_AS","as",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$id",49],["T_WHITESPACE"," ",49],["T_DOUBLE_ARROW","=>",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$definition",49],")",["T_WHITESPACE"," ",49],"{",["T_WHITESPACE","\n      ",49],["T_VARIABLE","$this",50],["T_OBJECT_OPERATOR","->",50],["T_STRING","assertDefinitionIdentical",50],"(",["T_VARIABLE","$this",50],["T_OBJECT_OPERATOR","->",50],["T_STRING","discovery",50],["T_OBJECT_OPERATOR","->",50],["T_STRING","getDefinition",50],"(",["T_VARIABLE","$id",50],")",",",["T_WHITESPACE"," ",50],["T_VARIABLE","$definition",50],")",";",["T_WHITESPACE","\n    ",50],"}",["T_WHITESPACE","\n\n    ",51],["T_COMMENT","\/\/ Ensure that an empty array is returned if no plugin definitions are found.\n",53],["T_WHITESPACE","    ",54],["T_VARIABLE","$this",54],["T_OBJECT_OPERATOR","->",54],["T_STRING","assertIdentical",54],"(",["T_VARIABLE","$this",54],["T_OBJECT_OPERATOR","->",54],["T_STRING","emptyDiscovery",54],["T_OBJECT_OPERATOR","->",54],["T_STRING","getDefinitions",54],"(",")",",",["T_WHITESPACE"," ",54],["T_ARRAY","array",54],"(",")",",",["T_WHITESPACE"," ",54],["T_CONSTANT_ENCAPSED_STRING","'array() returned if no plugin definitions are found.'",54],")",";",["T_WHITESPACE","\n\n    ",54],["T_COMMENT","\/\/ Ensure that NULL is returned as the definition of a non-existing plugin.\n",56],["T_WHITESPACE","    ",57],["T_VARIABLE","$this",57],["T_OBJECT_OPERATOR","->",57],["T_STRING","assertIdentical",57],"(",["T_VARIABLE","$this",57],["T_OBJECT_OPERATOR","->",57],["T_STRING","emptyDiscovery",57],["T_OBJECT_OPERATOR","->",57],["T_STRING","getDefinition",57],"(",["T_CONSTANT_ENCAPSED_STRING","'non_existing'",57],",",["T_WHITESPACE"," ",57],["T_STRING","FALSE",57],")",",",["T_WHITESPACE"," ",57],["T_STRING","NULL",57],",",["T_WHITESPACE"," ",57],["T_CONSTANT_ENCAPSED_STRING","'NULL returned as the definition of a non-existing plugin.'",57],")",";",["T_WHITESPACE","\n  ",57],"}",["T_WHITESPACE","\n\n  ",58],["T_DOC_COMMENT","\/**\n   * Asserts a definition against an expected definition.\n   *\n   * Converts any instances of \\Drupal\\Core\\Annotation\\Translation to a string.\n   *\n   * @param array $definition\n   *   The definition to test.\n   * @param array $expected_definition\n   *   The expected definition to test against.\n   *\n   * @return bool\n   *   TRUE if the assertion succeeded, FALSE otherwise.\n   *\/",60],["T_WHITESPACE","\n  ",72],["T_PROTECTED","protected",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","assertDefinitionIdentical",73],"(",["T_ARRAY","array",73],["T_WHITESPACE"," ",73],["T_VARIABLE","$definition",73],",",["T_WHITESPACE"," ",73],["T_ARRAY","array",73],["T_WHITESPACE"," ",73],["T_VARIABLE","$expected_definition",73],")",["T_WHITESPACE"," ",73],"{",["T_WHITESPACE","\n    ",73],["T_VARIABLE","$func",74],["T_WHITESPACE"," ",74],"=",["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],"(","&",["T_VARIABLE","$item",74],")","{",["T_WHITESPACE","\n      ",74],["T_IF","if",75],["T_WHITESPACE"," ",75],"(",["T_VARIABLE","$item",75],["T_WHITESPACE"," ",75],["T_INSTANCEOF","instanceof",75],["T_WHITESPACE"," ",75],["T_STRING","TranslatableMarkup",75],")",["T_WHITESPACE"," ",75],"{",["T_WHITESPACE","\n        ",75],["T_VARIABLE","$item",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_STRING_CAST","(string)",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$item",76],";",["T_WHITESPACE","\n      ",76],"}",["T_WHITESPACE","\n    ",77],"}",";",["T_WHITESPACE","\n    ",78],["T_STRING","array_walk_recursive",79],"(",["T_VARIABLE","$definition",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$func",79],")",";",["T_WHITESPACE","\n    ",79],["T_STRING","array_walk_recursive",80],"(",["T_VARIABLE","$expected_definition",80],",",["T_WHITESPACE"," ",80],["T_VARIABLE","$func",80],")",";",["T_WHITESPACE","\n    ",80],["T_RETURN","return",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","assertIdentical",81],"(",["T_VARIABLE","$definition",81],",",["T_WHITESPACE"," ",81],["T_VARIABLE","$expected_definition",81],")",";",["T_WHITESPACE","\n  ",81],"}",["T_WHITESPACE","\n\n",82],"}",["T_WHITESPACE","\n",84]]