[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Random_* Compatibility Library \n * for using the new PHP 7 random_* API in PHP 5 projects\n * \n * The MIT License (MIT)\n * \n * Copyright (c) 2015 Paragon Initiative Enterprises\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\/",2],["T_WHITESPACE","\n\n",27],["T_DOC_COMMENT","\/**\n * Fetch a random integer between $min and $max inclusive\n * \n * @param int $min\n * @param int $max\n * \n * @throws Exception\n * \n * @return int\n *\/",29],["T_WHITESPACE","\n",38],["T_FUNCTION","function",39],["T_WHITESPACE"," ",39],["T_STRING","random_int",39],"(",["T_VARIABLE","$min",39],",",["T_WHITESPACE"," ",39],["T_VARIABLE","$max",39],")",["T_WHITESPACE","\n",39],"{",["T_WHITESPACE","\n    ",40],["T_DOC_COMMENT","\/**\n     * Type and input logic checks\n     * \n     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n     * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats \n     * lose precision, so the <= and => operators might accidentally let a float\n     * through.\n     *\/",41],["T_WHITESPACE","\n    \n    ",49],["T_TRY","try",51],["T_WHITESPACE"," ",51],"{",["T_WHITESPACE","\n        ",51],["T_VARIABLE","$min",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],["T_STRING","RandomCompat_intval",52],"(",["T_VARIABLE","$min",52],")",";",["T_WHITESPACE","\n    ",52],"}",["T_WHITESPACE"," ",53],["T_CATCH","catch",53],["T_WHITESPACE"," ",53],"(",["T_STRING","TypeError",53],["T_WHITESPACE"," ",53],["T_VARIABLE","$ex",53],")",["T_WHITESPACE"," ",53],"{",["T_WHITESPACE","\n        ",53],["T_THROW","throw",54],["T_WHITESPACE"," ",54],["T_NEW","new",54],["T_WHITESPACE"," ",54],["T_STRING","TypeError",54],"(",["T_WHITESPACE","\n            ",54],["T_CONSTANT_ENCAPSED_STRING","'random_int(): $min must be an integer'",55],["T_WHITESPACE","\n        ",55],")",";",["T_WHITESPACE","\n    ",56],"}",["T_WHITESPACE","\n\n    ",57],["T_TRY","try",59],["T_WHITESPACE"," ",59],"{",["T_WHITESPACE","\n        ",59],["T_VARIABLE","$max",60],["T_WHITESPACE"," ",60],"=",["T_WHITESPACE"," ",60],["T_STRING","RandomCompat_intval",60],"(",["T_VARIABLE","$max",60],")",";",["T_WHITESPACE","\n    ",60],"}",["T_WHITESPACE"," ",61],["T_CATCH","catch",61],["T_WHITESPACE"," ",61],"(",["T_STRING","TypeError",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$ex",61],")",["T_WHITESPACE"," ",61],"{",["T_WHITESPACE","\n        ",61],["T_THROW","throw",62],["T_WHITESPACE"," ",62],["T_NEW","new",62],["T_WHITESPACE"," ",62],["T_STRING","TypeError",62],"(",["T_WHITESPACE","\n            ",62],["T_CONSTANT_ENCAPSED_STRING","'random_int(): $max must be an integer'",63],["T_WHITESPACE","\n        ",63],")",";",["T_WHITESPACE","\n    ",64],"}",["T_WHITESPACE","\n    \n    ",65],["T_DOC_COMMENT","\/**\n     * Now that we've verified our weak typing system has given us an integer,\n     * let's validate the logic then we can move forward with generating random\n     * integers along a given range.\n     *\/",67],["T_WHITESPACE","\n    ",71],["T_IF","if",72],["T_WHITESPACE"," ",72],"(",["T_VARIABLE","$min",72],["T_WHITESPACE"," ",72],">",["T_WHITESPACE"," ",72],["T_VARIABLE","$max",72],")",["T_WHITESPACE"," ",72],"{",["T_WHITESPACE","\n        ",72],["T_THROW","throw",73],["T_WHITESPACE"," ",73],["T_NEW","new",73],["T_WHITESPACE"," ",73],["T_STRING","Error",73],"(",["T_WHITESPACE","\n            ",73],["T_CONSTANT_ENCAPSED_STRING","'Minimum value must be less than or equal to the maximum value'",74],["T_WHITESPACE","\n        ",74],")",";",["T_WHITESPACE","\n    ",75],"}",["T_WHITESPACE","\n\n    ",76],["T_IF","if",78],["T_WHITESPACE"," ",78],"(",["T_VARIABLE","$max",78],["T_WHITESPACE"," ",78],["T_IS_IDENTICAL","===",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$min",78],")",["T_WHITESPACE"," ",78],"{",["T_WHITESPACE","\n        ",78],["T_RETURN","return",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$min",79],";",["T_WHITESPACE","\n    ",79],"}",["T_WHITESPACE","\n\n    ",80],["T_DOC_COMMENT","\/**\n     * Initialize variables to 0\n     * \n     * We want to store:\n     * $bytes => the number of random bytes we need\n     * $mask => an integer bitmask (for use with the &) operator\n     *          so we can minimize the number of discards\n     *\/",82],["T_WHITESPACE","\n    ",89],["T_VARIABLE","$attempts",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_VARIABLE","$bits",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_VARIABLE","$bytes",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_VARIABLE","$mask",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_VARIABLE","$valueShift",90],["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],["T_LNUMBER","0",90],";",["T_WHITESPACE","\n\n    ",90],["T_DOC_COMMENT","\/**\n     * At this point, $range is a positive number greater than 0. It might\n     * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to\n     * a float and we will lose some precision.\n     *\/",92],["T_WHITESPACE","\n    ",96],["T_VARIABLE","$range",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_VARIABLE","$max",97],["T_WHITESPACE"," ",97],"-",["T_WHITESPACE"," ",97],["T_VARIABLE","$min",97],";",["T_WHITESPACE","\n\n    ",97],["T_DOC_COMMENT","\/**\n     * Test for integer overflow:\n     *\/",99],["T_WHITESPACE","\n    ",101],["T_IF","if",102],["T_WHITESPACE"," ",102],"(","!",["T_STRING","is_int",102],"(",["T_VARIABLE","$range",102],")",")",["T_WHITESPACE"," ",102],"{",["T_WHITESPACE","\n\n        ",102],["T_DOC_COMMENT","\/**\n         * Still safely calculate wider ranges.\n         * Provided by @CodesInChaos, @oittaa\n         * \n         * @ref https:\/\/gist.github.com\/CodesInChaos\/03f9ea0b58e8b2b8d435\n         * \n         * We use ~0 as a mask in this case because it generates all 1s\n         * \n         * @ref https:\/\/eval.in\/400356 (32-bit)\n         * @ref http:\/\/3v4l.org\/XX9r5  (64-bit)\n         *\/",104],["T_WHITESPACE","\n        ",114],["T_VARIABLE","$bytes",115],["T_WHITESPACE"," ",115],"=",["T_WHITESPACE"," ",115],["T_STRING","PHP_INT_SIZE",115],";",["T_WHITESPACE","\n        ",115],["T_VARIABLE","$mask",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],"~",["T_LNUMBER","0",116],";",["T_WHITESPACE","\n\n    ",116],"}",["T_WHITESPACE"," ",118],["T_ELSE","else",118],["T_WHITESPACE"," ",118],"{",["T_WHITESPACE","\n\n        ",118],["T_DOC_COMMENT","\/**\n         * $bits is effectively ceil(log($range, 2)) without dealing with \n         * type juggling\n         *\/",120],["T_WHITESPACE","\n        ",123],["T_WHILE","while",124],["T_WHITESPACE"," ",124],"(",["T_VARIABLE","$range",124],["T_WHITESPACE"," ",124],">",["T_WHITESPACE"," ",124],["T_LNUMBER","0",124],")",["T_WHITESPACE"," ",124],"{",["T_WHITESPACE","\n            ",124],["T_IF","if",125],["T_WHITESPACE"," ",125],"(",["T_VARIABLE","$bits",125],["T_WHITESPACE"," ",125],"%",["T_WHITESPACE"," ",125],["T_LNUMBER","8",125],["T_WHITESPACE"," ",125],["T_IS_IDENTICAL","===",125],["T_WHITESPACE"," ",125],["T_LNUMBER","0",125],")",["T_WHITESPACE"," ",125],"{",["T_WHITESPACE","\n               ",125],["T_INC","++",126],["T_VARIABLE","$bytes",126],";",["T_WHITESPACE","\n            ",126],"}",["T_WHITESPACE","\n            ",127],["T_INC","++",128],["T_VARIABLE","$bits",128],";",["T_WHITESPACE","\n            ",128],["T_VARIABLE","$range",129],["T_WHITESPACE"," ",129],["T_SR_EQUAL",">>=",129],["T_WHITESPACE"," ",129],["T_LNUMBER","1",129],";",["T_WHITESPACE","\n            ",129],["T_VARIABLE","$mask",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_VARIABLE","$mask",130],["T_WHITESPACE"," ",130],["T_SL","<<",130],["T_WHITESPACE"," ",130],["T_LNUMBER","1",130],["T_WHITESPACE"," ",130],"|",["T_WHITESPACE"," ",130],["T_LNUMBER","1",130],";",["T_WHITESPACE","\n        ",130],"}",["T_WHITESPACE","\n        ",131],["T_VARIABLE","$valueShift",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_VARIABLE","$min",132],";",["T_WHITESPACE","\n    ",132],"}",["T_WHITESPACE","\n\n    ",133],["T_DOC_COMMENT","\/**\n     * Now that we have our parameters set up, let's begin generating\n     * random integers until one falls between $min and $max\n     *\/",135],["T_WHITESPACE","\n    ",138],["T_DO","do",139],["T_WHITESPACE"," ",139],"{",["T_WHITESPACE","\n        ",139],["T_DOC_COMMENT","\/**\n         * The rejection probability is at most 0.5, so this corresponds\n         * to a failure probability of 2^-128 for a working RNG\n         *\/",140],["T_WHITESPACE","\n        ",143],["T_IF","if",144],["T_WHITESPACE"," ",144],"(",["T_VARIABLE","$attempts",144],["T_WHITESPACE"," ",144],">",["T_WHITESPACE"," ",144],["T_LNUMBER","128",144],")",["T_WHITESPACE"," ",144],"{",["T_WHITESPACE","\n            ",144],["T_THROW","throw",145],["T_WHITESPACE"," ",145],["T_NEW","new",145],["T_WHITESPACE"," ",145],["T_STRING","Exception",145],"(",["T_WHITESPACE","\n                ",145],["T_CONSTANT_ENCAPSED_STRING","'random_int: RNG is broken - too many rejections'",146],["T_WHITESPACE","\n            ",146],")",";",["T_WHITESPACE","\n        ",147],"}",["T_WHITESPACE","\n\n        ",148],["T_DOC_COMMENT","\/**\n         * Let's grab the necessary number of random bytes\n         *\/",150],["T_WHITESPACE","\n        ",152],["T_VARIABLE","$randomByteString",153],["T_WHITESPACE"," ",153],"=",["T_WHITESPACE"," ",153],["T_STRING","random_bytes",153],"(",["T_VARIABLE","$bytes",153],")",";",["T_WHITESPACE","\n        ",153],["T_IF","if",154],["T_WHITESPACE"," ",154],"(",["T_VARIABLE","$randomByteString",154],["T_WHITESPACE"," ",154],["T_IS_IDENTICAL","===",154],["T_WHITESPACE"," ",154],["T_STRING","false",154],")",["T_WHITESPACE"," ",154],"{",["T_WHITESPACE","\n            ",154],["T_THROW","throw",155],["T_WHITESPACE"," ",155],["T_NEW","new",155],["T_WHITESPACE"," ",155],["T_STRING","Exception",155],"(",["T_WHITESPACE","\n                ",155],["T_CONSTANT_ENCAPSED_STRING","'Random number generator failure'",156],["T_WHITESPACE","\n            ",156],")",";",["T_WHITESPACE","\n        ",157],"}",["T_WHITESPACE","\n\n        ",158],["T_DOC_COMMENT","\/**\n         * Let's turn $randomByteString into an integer\n         * \n         * This uses bitwise operators (<< and |) to build an integer\n         * out of the values extracted from ord()\n         * \n         * Example: [9F] | [6D] | [32] | [0C] =>\n         *   159 + 27904 + 3276800 + 201326592 =>\n         *   204631455\n         *\/",160],["T_WHITESPACE","\n        ",169],["T_VARIABLE","$val",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_LNUMBER","0",170],";",["T_WHITESPACE","\n        ",170],["T_FOR","for",171],["T_WHITESPACE"," ",171],"(",["T_VARIABLE","$i",171],["T_WHITESPACE"," ",171],"=",["T_WHITESPACE"," ",171],["T_LNUMBER","0",171],";",["T_WHITESPACE"," ",171],["T_VARIABLE","$i",171],["T_WHITESPACE"," ",171],"<",["T_WHITESPACE"," ",171],["T_VARIABLE","$bytes",171],";",["T_WHITESPACE"," ",171],["T_INC","++",171],["T_VARIABLE","$i",171],")",["T_WHITESPACE"," ",171],"{",["T_WHITESPACE","\n            ",171],["T_VARIABLE","$val",172],["T_WHITESPACE"," ",172],["T_OR_EQUAL","|=",172],["T_WHITESPACE"," ",172],["T_STRING","ord",172],"(",["T_VARIABLE","$randomByteString",172],"[",["T_VARIABLE","$i",172],"]",")",["T_WHITESPACE"," ",172],["T_SL","<<",172],["T_WHITESPACE"," ",172],"(",["T_VARIABLE","$i",172],["T_WHITESPACE"," ",172],"*",["T_WHITESPACE"," ",172],["T_LNUMBER","8",172],")",";",["T_WHITESPACE","\n        ",172],"}",["T_WHITESPACE","\n\n        ",173],["T_DOC_COMMENT","\/**\n         * Apply mask\n         *\/",175],["T_WHITESPACE","\n        ",177],["T_VARIABLE","$val",178],["T_WHITESPACE"," ",178],["T_AND_EQUAL","&=",178],["T_WHITESPACE"," ",178],["T_VARIABLE","$mask",178],";",["T_WHITESPACE","\n        ",178],["T_VARIABLE","$val",179],["T_WHITESPACE"," ",179],["T_PLUS_EQUAL","+=",179],["T_WHITESPACE"," ",179],["T_VARIABLE","$valueShift",179],";",["T_WHITESPACE","\n\n        ",179],["T_INC","++",181],["T_VARIABLE","$attempts",181],";",["T_WHITESPACE","\n        ",181],["T_DOC_COMMENT","\/**\n         * If $val overflows to a floating point number,\n         * ... or is larger than $max,\n         * ... or smaller than $min,\n         * then try again.\n         *\/",182],["T_WHITESPACE","\n    ",187],"}",["T_WHITESPACE"," ",188],["T_WHILE","while",188],["T_WHITESPACE"," ",188],"(","!",["T_STRING","is_int",188],"(",["T_VARIABLE","$val",188],")",["T_WHITESPACE"," ",188],["T_BOOLEAN_OR","||",188],["T_WHITESPACE"," ",188],["T_VARIABLE","$val",188],["T_WHITESPACE"," ",188],">",["T_WHITESPACE"," ",188],["T_VARIABLE","$max",188],["T_WHITESPACE"," ",188],["T_BOOLEAN_OR","||",188],["T_WHITESPACE"," ",188],["T_VARIABLE","$val",188],["T_WHITESPACE"," ",188],"<",["T_WHITESPACE"," ",188],["T_VARIABLE","$min",188],")",";",["T_WHITESPACE","\n\n    ",188],["T_RETURN","return",190],["T_WHITESPACE"," ",190],["T_INT_CAST","(int)",190],["T_WHITESPACE"," ",190],["T_VARIABLE","$val",190],";",["T_WHITESPACE","\n",190],"}",["T_WHITESPACE","\n",191]]