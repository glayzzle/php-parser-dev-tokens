[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Copyright \u00c2\u00a9 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n *\/",2],["T_WHITESPACE","\n\n",5],["T_COMMENT","\/\/ @codingStandardsIgnoreFile\n",7],["T_CLOSE_TAG","?>\n",8],["T_OPEN_TAG","<?php\n",9],["T_DOC_COMMENT","\/** @var $block \\Magento\\ImportExport\\Block\\Adminhtml\\Import\\Edit\\Before *\/",10],["T_WHITESPACE","\n",10],["T_CLOSE_TAG","?>\n",11],["T_INLINE_HTML","<script>\nrequire([\n    'jquery',\n    'Magento_Ui\/js\/modal\/alert',\n    'prototype'\n], function(jQuery, alert){\n\n\/\/<![CDATA[\n    \/\/ Temporary Class will be replaced after refactoring of import\/export functionality\n    varienImport = {\n        \/**\n         * Name and ID for iframe for data POST-ing.\n         * @type {string}\n         *\/\n        ifrElemName: 'import_post_target_frame',\n\n        \/**\n         * List of existing behavior sets\n         * @type {Array}\n         *\/\n        uniqueBehaviors: ",12],["T_OPEN_TAG","<?php ",32],["T_COMMENT","\/* @escapeNotVerified *\/",32],["T_WHITESPACE"," ",32],["T_ECHO","echo",32],["T_WHITESPACE"," ",32],["T_VARIABLE","$block",32],["T_OBJECT_OPERATOR","->",32],["T_STRING","getUniqueBehaviors",32],"(",")",["T_WHITESPACE"," ",32],["T_CLOSE_TAG","?>",32],["T_INLINE_HTML",",\n\n        \/**\n         * Behaviour codes for import entities\n         * @type {Array}\n         *\/\n        entityBehaviors: ",32],["T_OPEN_TAG","<?php ",38],["T_COMMENT","\/* @escapeNotVerified *\/",38],["T_WHITESPACE"," ",38],["T_ECHO","echo",38],["T_WHITESPACE"," ",38],["T_VARIABLE","$block",38],["T_OBJECT_OPERATOR","->",38],["T_STRING","getEntityBehaviors",38],"(",")",["T_WHITESPACE"," ",38],["T_CLOSE_TAG","?>",38],["T_INLINE_HTML",",\n\n        \/**\n         * Behaviour notes for import entities\n         * @type {Array}\n         *\/\n        entityBehaviorsNotes: ",38],["T_OPEN_TAG","<?php ",44],["T_COMMENT","\/* @escapeNotVerified *\/",44],["T_WHITESPACE"," ",44],["T_ECHO","echo",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$block",44],["T_OBJECT_OPERATOR","->",44],["T_STRING","getEntityBehaviorsNotes",44],"(",")",["T_WHITESPACE"," ",44],["T_CLOSE_TAG","?>",44],["T_INLINE_HTML",",\n\n        \/**\n         * Base url\n         * @type {string}\n         *\/\n        sampleFilesBaseUrl: '",44],["T_OPEN_TAG","<?php ",50],["T_COMMENT","\/* @escapeNotVerified *\/",50],["T_WHITESPACE"," ",50],["T_ECHO","echo",50],["T_WHITESPACE"," ",50],["T_VARIABLE","$block",50],["T_OBJECT_OPERATOR","->",50],["T_STRING","getUrl",50],"(",["T_CONSTANT_ENCAPSED_STRING","'*\/*\/download\/'",50],",",["T_WHITESPACE"," ",50],"[",["T_CONSTANT_ENCAPSED_STRING","'filename'",50],["T_WHITESPACE"," ",50],["T_DOUBLE_ARROW","=>",50],["T_WHITESPACE"," ",50],["T_CONSTANT_ENCAPSED_STRING","'entity-name'",50],"]",")",["T_WHITESPACE"," ",50],["T_CLOSE_TAG","?>",50],["T_INLINE_HTML","',\n\n        \/**\n         * Reset selected index\n         * @param {string} elementId\n         *\/\n        resetSelectIndex: function(elementId) {\n            var element = jQuery('#' + elementId);\n            if (element) {\n                element[0].selectedIndex = 0;\n            }\n        },\n\n        \/**\n         * Show behavior selector\n         * @param {string|boolean} entity If false, then hide all behavior selectors\n         *\/\n        showBehavior: function(entity) {\n            var requiredBehavior = this.entityBehaviors[entity];\n            for (i = 0; i < this.uniqueBehaviors.length; i++) {\n                var currentBehavior = this.uniqueBehaviors[i];\n                this.showBehaviorFieldset(currentBehavior, requiredBehavior == currentBehavior);\n            }\n        },\n\n        \/**\n         * Show\/hide one behavior fieldset\n         * @param {string} behaviorId\n         * @param {boolean} isShow\n         *\/\n        showBehaviorFieldset: function(behaviorId, isShow) {\n            var behaviorFieldset = jQuery('#' + behaviorId + '_fieldset'),\n                behaviorFields = jQuery('.' + behaviorId);\n            if (isShow) {\n                behaviorFieldset.show();\n            } else {\n                behaviorFieldset.hide();\n                this.resetSelectIndex(behaviorId);\n            }\n            behaviorFields.each(function(k, behaviorField){\n                behaviorField = jQuery(behaviorField);\n                if (isShow) {\n                    behaviorField.prop('disabled', false);\n                    behaviorField.addClass('required-entry');\n                } else {\n                    behaviorField.prop('disabled', 'disabled');\n                    behaviorField.removeClass('required-entry');\n                }\n            });\n        },\n\n        \/**\n         * Show upload file field\n         * @param {boolean} isShow\n         *\/\n        showUploadFile: function(isShow) {\n            if (isShow == true) {\n                jQuery('#upload_file_fieldset').show();\n            } else {\n                jQuery('#upload_file_fieldset').hide();\n            }\n        },\n\n        \/**\n         * Show\/hide sample file link\n         * @param {string} entityId\n         *\/\n        showSampleFile: function(entityId) {\n            var sampleFileSpan = jQuery('#sample-file-span');\n            if (entityId) {\n                var sampleFileLink = this.sampleFilesBaseUrl.replace('entity-name', entityId);\n                jQuery('#sample-file-link').attr('href', sampleFileLink);\n                if (sampleFileSpan.is(':hidden')) {\n                    sampleFileSpan.show();\n                }\n            } else {\n                sampleFileSpan.hide();\n            }\n        },\n\n        \/**\n         * Handle value change in entity type selector\n         *\/\n        handleEntityTypeSelector: function() {\n            var entity = jQuery('#entity');\n            if (entity && entity.val()) {\n                this.showBehavior(entity.val());\n                this.showUploadFile(true);\n                this.showSampleFile(entity.val());\n            } else {\n                this.showBehavior(false);\n                this.showUploadFile(false);\n                this.showSampleFile(false);\n            }\n            this.handleImportBehaviorSelector();\n        },\n\n        \/**\n         * Handle value change in behavior selector\n         *\/\n        handleImportBehaviorSelector: function() {\n            var entity = jQuery('#entity');\n            if (entity && entity.val()) {\n                var notes = this.entityBehaviorsNotes[entity.val()];\n                var requiredBehavior = this.entityBehaviors[entity.val()];\n                var behaviorInput = jQuery('#' + requiredBehavior);\n                var behavior = behaviorInput && behaviorInput.val();\n                if (behavior && notes[behavior]) {\n                    jQuery('#' + requiredBehavior + '-note').html(notes[behavior]);\n                } else {\n                    jQuery('#' + requiredBehavior + '-note').html('');\n                }\n            }\n        },\n\n        \/**\n         * Post form data to dynamic iframe.\n         * @param {string} newActionUrl OPTIONAL Change form action to this if specified\n         *\/\n        postToFrame: function(newActionUrl) {\n            if (!jQuery('[name=\"' + this.ifrElemName + '\"]').length) {\n                jQuery('body').append('<iframe name=\"' + this.ifrElemName + '\" id=\"' + this.ifrElemName\n                    + '\" style=\"display:none;\"\/>');\n            }\n            jQuery('body')\n                .loader({\n                    icon: jQuery('#loading_mask_loader img').attr('src')\n                })\n                .loader('show');\n            var form = jQuery('#edit_form')\n                .one('invalid-form.validate', function(e){jQuery('body').loader('hide')});\n            newActionUrl = (newActionUrl ? newActionUrl : form.attr('action')) +\n                (form.attr('action').lastIndexOf('?') != -1 ? '&' : '?')+\n                'form_key=' + encodeURIComponent(form.find('[name=\"form_key\"]').val());\n\n            form.trigger('save', [{\n                action: newActionUrl,\n                target: this.ifrElemName\n            }]);\n        },\n\n        \/**\n         * Actions after data post complete. Hide load mask, remove iframe, run response processing method.\n         * @param {Object} response\n         *\/\n        postToFrameComplete: function(response) {\n            jQuery('body').loader('hide');\n            jQuery('#' + this.ifrElemName).remove();\n            this.postToFrameProcessResponse(response);\n        },\n\n        \/**\n         * Process response JSON.\n         * @param {Object} response\n         *\/\n        postToFrameProcessResponse: function(response) {\n            if ('object' != typeof(response)) {\n                alert({\n                    content: 'Invalid response'\n                });\n\n                return false;\n            }\n            $H(response).each(function(pair) {\n                switch (pair.key) {\n                    case 'show':\n                    case 'clear':\n                    case 'hide':\n                        $H(pair.value).each(function(val) {\n                            if ($(val.value)) {\n                                $(val.value)[pair.key]();\n                            }\n                        });\n                        break;\n                    case 'innerHTML':\n                    case 'value':\n                        $H(pair.value).each(function(val) {\n                            var el = $(val.key);\n                            if (el) {\n                                el[pair.key] = val.value;\n                                \/\/ if element does not visible\n                                el.offsetWidth || el.up('div.entry-edit').show();\n                            }\n                        });\n                        break;\n                    case 'removeClassName':\n                    case 'addClassName':\n                        $H(pair.value).each(function(val) {\n                            if ($(val.key)) $(val.key)[pair.key](val.value);\n                        });\n                        break;\n                    default:\n                        alert({\n                            content: pair.key + ': ' + pair.value\n                        });\n                        break;\n                }\n            });\n        },\n\n        \/**\n         * Send form data to Start action when file is validated.\n         * @param {string} newActionUrl\n         * @param {string} sourceFileField\n         *\/\n        startImport: function(newActionUrl, sourceFileField) {\n            jQuery('#' + sourceFileField).removeClass('required-entry');\n            this.postToFrame(newActionUrl);\n            jQuery('#' + sourceFileField).addClass('required-entry');\n        }\n    };\n\/\/]]>\n\n});\n<\/script>\n",50]]