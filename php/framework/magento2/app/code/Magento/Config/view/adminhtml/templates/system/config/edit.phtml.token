[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * Copyright \u00c2\u00a9 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n *\/",2],["T_WHITESPACE","\n\n",5],["T_COMMENT","\/\/ @codingStandardsIgnoreFile\n",7],["T_WHITESPACE","\n",8],["T_CLOSE_TAG","?>\n",9],["T_OPEN_TAG","<?php\n",10],["T_DOC_COMMENT","\/**\n * @methods\n *  getTitle() - string\n *  getSaveUrl() - string\n *  getSections() - array\n *  getForm() - html\n *\/",11],["T_WHITESPACE","\n",17],["T_CLOSE_TAG","?>\n",18],["T_INLINE_HTML","<form action=\"",19],["T_OPEN_TAG","<?php ",19],["T_COMMENT","\/* @escapeNotVerified *\/",19],["T_WHITESPACE"," ",19],["T_ECHO","echo",19],["T_WHITESPACE"," ",19],["T_VARIABLE","$block",19],["T_OBJECT_OPERATOR","->",19],["T_STRING","getSaveUrl",19],"(",")",["T_WHITESPACE"," ",19],["T_CLOSE_TAG","?>",19],["T_INLINE_HTML","\" method=\"post\" id=\"config-edit-form\" enctype=\"multipart\/form-data\">\n    ",19],["T_OPEN_TAG","<?php ",20],["T_ECHO","echo",20],["T_WHITESPACE"," ",20],["T_VARIABLE","$block",20],["T_OBJECT_OPERATOR","->",20],["T_STRING","getBlockHtml",20],"(",["T_CONSTANT_ENCAPSED_STRING","'formkey'",20],")",["T_CLOSE_TAG","?>\n",20],["T_INLINE_HTML","    <div class=\"accordion\">\n        ",21],["T_OPEN_TAG","<?php ",22],["T_ECHO","echo",22],["T_WHITESPACE"," ",22],["T_VARIABLE","$block",22],["T_OBJECT_OPERATOR","->",22],["T_STRING","getChildHtml",22],"(",["T_CONSTANT_ENCAPSED_STRING","'form'",22],")",["T_WHITESPACE"," ",22],["T_CLOSE_TAG","?>\n",22],["T_INLINE_HTML","    <\/div>\n<\/form>\n<script>\nrequire([\n    \"jquery\",\n    \"uiRegistry\",\n    \"jquery\/jquery.hashchange\",\n    \"mage\/mage\",\n    \"prototype\",\n    \"mage\/adminhtml\/form\",\n    \"domReady!\"\n], function(jQuery, registry){\n\n    var adminSystemConfig = {\n        getUp: function (element, tag) {\n            var $element = Element.extend(element);\n            if (typeof $element.upTag == 'undefined') {\n                $element.upTag = {};\n            }\n            if (typeof $element.upTag[tag] == 'undefined') {\n                $element.upTag[tag] = Element.extend($element.up(tag));\n            }\n            return $element.upTag[tag];\n        },\n        getUpTd: function (element) {\n            return this.getUp(element, 'td');\n        },\n        getUpTr: function (element) {\n            return this.getUp(element, 'tr');\n        },\n        getScopeElement: function(element) {\n            var $element = Element.extend(element);\n            if (typeof $element.scopeElement == 'undefined') {\n                var scopeElementName = element.getAttribute('name').replace(\/\\[value\\]$\/, '[inherit]');\n                $element.scopeElement = this.getUpTr(element).select('input[name=\"' + scopeElementName + '\"]')[0];\n                if (typeof $element.scopeElement == 'undefined') {\n                    $element.scopeElement = false;\n                }\n            }\n            return $element.scopeElement;\n        },\n        getDeleteElement: function(element) {\n            var $element = Element.extend(element);\n            if (typeof $element.deleteElement == 'undefined') {\n                $element.deleteElement = this.getUpTd(element)\n                    .select('input[name=\"'+ element.getAttribute('name') + '[delete]\"]')[0];\n                if (typeof $element.deleteElement == 'undefined') {\n                    $element.deleteElement = false;\n                }\n            }\n            return $element.deleteElement;\n        },\n        mapClasses: function(element, full, callback, classPrefix) {\n            if (typeof classPrefix == 'undefined') {\n                classPrefix = 'shared'\n            }\n            element.classNames().each(function(className) {\n                if (className.indexOf(classPrefix + '-') == 0\n                    || (full && className.indexOf(classPrefix + '_') == 0)\n                    ) {\n                    callback(className);\n                }\n            });\n        },\n        getRegisteredEvents: function(element) {\n            var events = [];\n            var registry = Element.retrieve(Element.extend(element), 'prototype_event_registry');\n            if (!registry) {\n                return events;\n            }\n            registry.each(function(pair) {\n                var eventName = pair.key;\n                if (!eventName) {\n                    return;\n                }\n                var responders = registry.get(eventName);\n                if (!responders) {\n                    return;\n                }\n                responders.each(function(responder) {\n                    if (!responder.handler) {\n                        return;\n                    }\n                    events.push({\n                        'eventName': eventName,\n                        'handler': responder.handler\n                    });\n                });\n            });\n            return events;\n        },\n        onchangeSharedElement: function(event) {\n            var element = Element.extend(Event.element(event));\n            adminSystemConfig.mapClasses(element, true, function(className) {\n                $$('.' + className).each(function(el) {\n                    if (element == el) {\n                        return;\n                    }\n\n                    var tagName = el.tagName.toLowerCase();\n                    if (tagName == 'input' && el.getAttribute('type') == 'file') {\n                        var $el = Element.extend(el);\n                        var events = adminSystemConfig.getRegisteredEvents(el);\n                        $el.stopObserving('change');\n                        var elId = $el.id;\n                        $el.replace($el.outerHTML);\n                        events.each(function(event) {\n                            Event.observe(Element.extend(document.getElementById(elId)), event.eventName, event.handler);\n                        });\n                    } else {\n                        el.stopObserving('change', adminSystemConfig.onchangeSharedElement);\n                        if (tagName == 'input' && el.getAttribute('type') == 'checkbox') {\n                            if (el.checked != element.checked) {\n                                Element.extend(el).click();\n                            }\n                        } else if (tagName == 'select') {\n                            var $el = Element.extend(el);\n                            Element.extend(element).select('option').each(function(option) {\n                                var relatedOption = $el.select('option[value=\"' + option.value + '\"]')[0];\n                                if (typeof relatedOption != 'undefined') {\n                                    relatedOption.selected = option.selected;\n                                }\n                            });\n                        } else {\n                            el.value = element.getValue();\n                        }\n                        if (Element.extend(el).requiresObj) {\n                            Element.extend(el).requiresObj.indicateEnabled();\n                        }\n                        fireEvent(el, 'change');\n                        Event.observe(el, 'change', adminSystemConfig.onchangeSharedElement);\n                    }\n                });\n            });\n        },\n        checkRequired: function(element, callback) {\n            var tagName = this.tagName.toLowerCase();\n            if (tagName != 'fieldset') {\n                if (adminSystemConfig.getUpTr(this).visible()) {\n\n                    if (this.hasClassName('not-required')) {\n                        return;\n                    }\n\n                    var typeAttr = null;\n                    if (tagName == 'input') {\n                        typeAttr = this.getAttribute('type').toLowerCase();\n                    }\n                    var valueIsEmpty = false;\n                    var scopeElement = adminSystemConfig.getScopeElement(this);\n                    if (!scopeElement || !scopeElement.checked) {\n                        if (typeAttr == 'file') {\n                            var deleteUploadedElement = adminSystemConfig.getDeleteElement(this);\n                            valueIsEmpty = !deleteUploadedElement && this.value == ''\n                                || deleteUploadedElement && deleteUploadedElement.checked;\n                        }\n                        valueIsEmpty = valueIsEmpty\n                            || (typeAttr == 'text' || typeAttr == 'password') && this.value == ''\n                            || (tagName == 'select') && (this.getAttribute('multiple') != null)\n                            && this.getValue().length == 0\n                            || (tagName == 'select') && (this.getAttribute('multiple') == null)\n                            && this.getValue() == null;\n                    }\n\n                    if (valueIsEmpty) {\n                        if (element.value != 0) {\n                            element.value = 0;\n                            fireEvent(element, 'change');\n                        }\n                        element.disable();\n                    }\n                }\n            } else {\n                this.select('input,select').each(function(inputElement) {\n                    adminSystemConfig.checkRequired.call(Element.extend(inputElement), element, callback);\n                });\n            }\n            callback(this);\n        }\n    };\n\n    window.configForm = jQuery('#config-edit-form').mage('form').mage('validation', {\n        submitHandler: function(form)\n        {\n            $$('.requires').each(function(element) {\n                var scopeElement = adminSystemConfig.getScopeElement(element);\n                if (!scopeElement || !scopeElement.checked) {\n                    Element.extend(element).disabled = false;\n                }\n            });\n            jQuery(form).trigger('afterValidate');\n            form.submit();\n        }\n    });\n\n    $$('.shared').each(function(element){\n        Event.observe(element, 'change', adminSystemConfig.onchangeSharedElement);\n\n        \/\/ scope should be shared together with the field\n        var scopeElement = adminSystemConfig.getScopeElement(element);\n        if (scopeElement) {\n            adminSystemConfig.mapClasses(element, false, function(className) {\n                scopeElement.addClassName('shared_scope-' + className.substr(7));\n            });\n            Event.observe(scopeElement, 'change', adminSystemConfig.onchangeSharedElement);\n        }\n\n        \/\/ file fields should share deletion\n        if (element.tagName.toLowerCase() == 'input' && element.getAttribute('type') == 'file') {\n            var deleteUploadedElement = adminSystemConfig.getDeleteElement(element);\n            if (deleteUploadedElement) {\n                adminSystemConfig.mapClasses(element, false, function(className) {\n                    deleteUploadedElement.addClassName('shared_delete-' + className.substr(7));\n                });\n                Event.observe(deleteUploadedElement, 'change', adminSystemConfig.onchangeSharedElement);\n            }\n        }\n\n        \/\/ process situation, when control is complex\n        adminSystemConfig.mapClasses(element, true, function(className) {\n            var controls = adminSystemConfig.getUpTd(element).select('.' + className);\n            if (controls.length < 2) {\n                return;\n            }\n\n            var counter = 0;\n            controls.each(function(controlElement) {\n                controlElement.removeClassName(className);\n                controlElement.addClassName('shared_' + counter + className.substr(6));\n                counter++;\n            });\n        });\n    });\n\n    $$('.requires').each(function(element) {\n        var eventObj = {\n            'element': Element.extend(element),\n            'requires': [],\n            'callback': function(required) {},\n            checkRequirements: function() {\n                var scopeElement = adminSystemConfig.getScopeElement(eventObj.element);\n                if (!scopeElement || !scopeElement.checked) {\n                    eventObj.element.enable();\n                    eventObj.requires.each(function(required) {\n                        adminSystemConfig.checkRequired.call(Element.extend(required), eventObj.element, eventObj.callback);\n                    }.bind(this));\n                }\n            },\n            keydownCheckRequirements: function() {\n                window.setTimeout(eventObj.checkRequirements, 1);\n            },\n            bindCheckingObserver: function(element) {\n                if (element.tagName.toLowerCase() == 'fieldset') {\n                    Element.extend(element).select('input,select').each(function(subElement) {\n                        eventObj.bindCheckingObserver(subElement);\n                    })\n                } else {\n                    var scopeElement = adminSystemConfig.getScopeElement(element);\n                    if (scopeElement) {\n                        Event.observe(scopeElement, 'click', eventObj.checkRequirements);\n                    }\n                    Event.observe(element, 'change', eventObj.checkRequirements);\n                    Event.observe(element, 'keydown', eventObj.keydownCheckRequirements);\n                }\n            },\n            indicateEnabled: function() {\n                var labelElement = adminSystemConfig.getUpTr(eventObj.element).select('td.label label')[0];\n                if (typeof labelElement != 'undefined') {\n                    if (eventObj.element.value == 1) {\n                        labelElement.addClassName('enabled');\n                    } else {\n                        labelElement.removeClassName('enabled');\n                    }\n                }\n            }\n        };\n\n        \/\/ fill eventObj with required elements\n        adminSystemConfig.mapClasses(element, false, function(className) {\n            var requiredElement = Element.extend(document.getElementById(className.substr(9)));\n            if (requiredElement) {\n                eventObj.requires.push(requiredElement);\n            }\n        }, 'requires');\n        Element.extend(element).requiresObj = eventObj;\n\n        \/\/ replacing \"Use Default\" action with checking requirements\n        var scopeElement = adminSystemConfig.getScopeElement(element);\n        if (scopeElement) {\n            Event.stopObserving(scopeElement, 'click');\n            Event.observe(scopeElement, 'click', function(event) {\n                toggleValueElements(scopeElement, Element.previous(scopeElement.parentNode));\n                eventObj.checkRequirements();\n            });\n        }\n\n        \/\/ binding events\n        eventObj.requires.each(function(required) {\n            eventObj.bindCheckingObserver(required);\n        });\n        Event.observe(eventObj.element, 'change', eventObj.indicateEnabled);\n        eventObj.checkRequirements();\n        eventObj.indicateEnabled();\n    });\n\n    var handleHash = function () {\n        if (window.location.hash == '') {\n            return false;\n        }\n        try {\n            var hashString = window.location.hash.replace('#', ''),\n                containerId = hashString.replace('-link', ''),\n                state = jQuery('#' + containerId + '-state'),\n                head = jQuery('#' + containerId + '-head');\n            if (state.length) {\n                state.val(1);\n            }\n            if (head.length) {\n                head.collapsed = 0;\n            }\n            Fieldset.applyCollapse(containerId);\n        } catch(err) {\n        }\n        return false;\n    };\n\n    jQuery(window).hashchange(handleHash);\n    handleHash();\n\n    registry.set('adminSystemConfig', adminSystemConfig);\n});\n<\/script>\n",23]]