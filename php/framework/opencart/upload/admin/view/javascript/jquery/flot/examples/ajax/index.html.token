[["T_INLINE_HTML","<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\">\n<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text\/html; charset=utf-8\">\n\t<title>Flot Examples: AJAX<\/title>\n\t<link href=\"..\/examples.css\" rel=\"stylesheet\" type=\"text\/css\">\n\t<!--[if lte IE 8]><script language=\"javascript\" type=\"text\/javascript\" src=\"..\/..\/excanvas.min.js\"><\/script><![endif]-->\n\t<script language=\"javascript\" type=\"text\/javascript\" src=\"..\/..\/jquery.js\"><\/script>\n\t<script language=\"javascript\" type=\"text\/javascript\" src=\"..\/..\/jquery.flot.js\"><\/script>\n\t<script type=\"text\/javascript\">\n\n\t$(function() {\n\n\t\tvar options = {\n\t\t\tlines: {\n\t\t\t\tshow: true\n\t\t\t},\n\t\t\tpoints: {\n\t\t\t\tshow: true\n\t\t\t},\n\t\t\txaxis: {\n\t\t\t\ttickDecimals: 0,\n\t\t\t\ttickSize: 1\n\t\t\t}\n\t\t};\n\n\t\tvar data = [];\n\n\t\t$.plot(\"#placeholder\", data, options);\n\n\t\t\/\/ Fetch one series, adding to what we already have\n\n\t\tvar alreadyFetched = {};\n\n\t\t$(\"button.fetchSeries\").click(function () {\n\n\t\t\tvar button = $(this);\n\n\t\t\t\/\/ Find the URL in the link right next to us, then fetch the data\n\n\t\t\tvar dataurl = button.siblings(\"a\").attr(\"href\");\n\n\t\t\tfunction onDataReceived(series) {\n\n\t\t\t\t\/\/ Extract the first coordinate pair; jQuery has parsed it, so\n\t\t\t\t\/\/ the data is now just an ordinary JavaScript object\n\n\t\t\t\tvar firstcoordinate = \"(\" + series.data[0][0] + \", \" + series.data[0][1] + \")\";\n\t\t\t\tbutton.siblings(\"span\").text(\"Fetched \" + series.label + \", first point: \" + firstcoordinate);\n\n\t\t\t\t\/\/ Push the new data onto our existing data array\n\n\t\t\t\tif (!alreadyFetched[series.label]) {\n\t\t\t\t\talreadyFetched[series.label] = true;\n\t\t\t\t\tdata.push(series);\n\t\t\t\t}\n\n\t\t\t\t$.plot(\"#placeholder\", data, options);\n\t\t\t}\n\n\t\t\t$.ajax({\n\t\t\t\turl: dataurl,\n\t\t\t\ttype: \"GET\",\n\t\t\t\tdataType: \"json\",\n\t\t\t\tsuccess: onDataReceived\n\t\t\t});\n\t\t});\n\n\t\t\/\/ Initiate a recurring data update\n\n\t\t$(\"button.dataUpdate\").click(function () {\n\n\t\t\tdata = [];\n\t\t\talreadyFetched = {};\n\n\t\t\t$.plot(\"#placeholder\", data, options);\n\n\t\t\tvar iteration = 0;\n\n\t\t\tfunction fetchData() {\n\n\t\t\t\t++iteration;\n\n\t\t\t\tfunction onDataReceived(series) {\n\n\t\t\t\t\t\/\/ Load all the data in one pass; if we only got partial\n\t\t\t\t\t\/\/ data we could merge it with what we already have.\n\n\t\t\t\t\tdata = [ series ];\n\t\t\t\t\t$.plot(\"#placeholder\", data, options);\n\t\t\t\t}\n\n\t\t\t\t\/\/ Normally we call the same URL - a script connected to a\n\t\t\t\t\/\/ database - but in this case we only have static example\n\t\t\t\t\/\/ files, so we need to modify the URL.\n\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"data-eu-gdp-growth-\" + iteration + \".json\",\n\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\tdataType: \"json\",\n\t\t\t\t\tsuccess: onDataReceived\n\t\t\t\t});\n\n\t\t\t\tif (iteration < 5) {\n\t\t\t\t\tsetTimeout(fetchData, 1000);\n\t\t\t\t} else {\n\t\t\t\t\tdata = [];\n\t\t\t\t\talreadyFetched = {};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetTimeout(fetchData, 1000);\n\t\t});\n\n\t\t\/\/ Load the first series by default, so we don't have an empty plot\n\n\t\t$(\"button.fetchSeries:first\").click();\n\n\t\t\/\/ Add the Flot version string to the footer\n\n\t\t$(\"#footer\").prepend(\"Flot \" + $.plot.version + \" &ndash; \");\n\t});\n\n\t<\/script>\n<\/head>\n<body>\n\n\t<div id=\"header\">\n\t\t<h2>AJAX<\/h2>\n\t<\/div>\n\n\t<div id=\"content\">\n\n\t\t<div class=\"demo-container\">\n\t\t\t<div id=\"placeholder\" class=\"demo-placeholder\"><\/div>\n\t\t<\/div>\n\n\t\t<p>Example of loading data dynamically with AJAX. Percentage change in GDP (source: <a href=\"http:\/\/epp.eurostat.ec.europa.eu\/tgm\/table.do?tab=table&init=1&plugin=1&language=en&pcode=tsieb020\">Eurostat<\/a>). Click the buttons below:<\/p>\n\n\t\t<p>The data is fetched over HTTP, in this case directly from text files. Usually the URL would point to some web server handler (e.g. a PHP page or Java\/.NET\/Python\/Ruby on Rails handler) that extracts it from a database and serializes it to JSON.<\/p>\n\n\t\t<p>\n\t\t\t<button class=\"fetchSeries\">First dataset<\/button>\n\t\t\t[ <a href=\"data-eu-gdp-growth.json\">see data<\/a> ]\n\t\t\t<span><\/span>\n\t\t<\/p>\n\n\t\t<p>\n\t\t\t<button class=\"fetchSeries\">Second dataset<\/button>\n\t\t\t[ <a href=\"data-japan-gdp-growth.json\">see data<\/a> ]\n\t\t\t<span><\/span>\n\t\t<\/p>\n\n\t\t<p>\n\t\t\t<button class=\"fetchSeries\">Third dataset<\/button>\n\t\t\t[ <a href=\"data-usa-gdp-growth.json\">see data<\/a> ]\n\t\t\t<span><\/span>\n\t\t<\/p>\n\n\t\t<p>If you combine AJAX with setTimeout, you can poll the server for new data.<\/p>\n\n\t\t<p>\n\t\t\t<button class=\"dataUpdate\">Poll for data<\/button>\n\t\t<\/p>\n\n\t<\/div>\n\n\t<div id=\"footer\">\n\t\tCopyright &copy; 2007 - 2013 IOLA and Ole Laursen\n\t<\/div>\n\n<\/body>\n<\/html>\n",1]]