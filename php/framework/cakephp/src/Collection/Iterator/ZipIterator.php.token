[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.5\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Collection",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Iterator",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Collection",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Collection",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Collection",18],["T_NS_SEPARATOR","\\",18],["T_STRING","CollectionInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Collection",19],["T_NS_SEPARATOR","\\",19],["T_STRING","CollectionTrait",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","MultipleIterator",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Serializable",21],";",["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * Creates an iterator that returns elements grouped in pairs\n *\n * ### Example\n *\n * ```\n *  $iterator = new ZipIterator([[1, 2], [3, 4]]);\n *  $iterator->toList(); \/\/ Returns [[1, 3], [2, 4]]\n * ```\n *\n * You can also chose a custom function to zip the elements together, such\n * as doing a sum by index:\n *\n * ### Example\n *\n * ```\n *  $iterator = new ZipIterator([[1, 2], [3, 4]], function ($a, $b) {\n *    return $a + $b;\n *  });\n *  $iterator->toList(); \/\/ Returns [4, 6]\n * ```\n *\/",23],["T_WHITESPACE","\n",44],["T_CLASS","class",45],["T_WHITESPACE"," ",45],["T_STRING","ZipIterator",45],["T_WHITESPACE"," ",45],["T_EXTENDS","extends",45],["T_WHITESPACE"," ",45],["T_STRING","MultipleIterator",45],["T_WHITESPACE"," ",45],["T_IMPLEMENTS","implements",45],["T_WHITESPACE"," ",45],["T_STRING","CollectionInterface",45],",",["T_WHITESPACE"," ",45],["T_STRING","Serializable",45],["T_WHITESPACE","\n",45],"{",["T_WHITESPACE","\n\n    ",46],["T_USE","use",48],["T_WHITESPACE"," ",48],["T_STRING","CollectionTrait",48],";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * The function to use for zipping items together\n     *\n     * @var callable\n     *\/",50],["T_WHITESPACE","\n    ",54],["T_PROTECTED","protected",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$_callback",55],";",["T_WHITESPACE","\n\n    ",55],["T_DOC_COMMENT","\/**\n     * Contains the original iterator objects that were attached\n     *\n     * @var array\n     *\/",57],["T_WHITESPACE","\n    ",61],["T_PROTECTED","protected",62],["T_WHITESPACE"," ",62],["T_VARIABLE","$_iterators",62],["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],"[","]",";",["T_WHITESPACE","\n\n    ",62],["T_DOC_COMMENT","\/**\n     * Creates the iterator to merge together the values by for all the passed\n     * iterators by their corresponding index.\n     *\n     * @param array $sets The list of array or iterators to be zipped.\n     * @param callable|null $callable The function to use for zipping the elements of each iterator.\n     *\/",64],["T_WHITESPACE","\n    ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","__construct",71],"(",["T_ARRAY","array",71],["T_WHITESPACE"," ",71],["T_VARIABLE","$sets",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$callable",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","null",71],")",["T_WHITESPACE","\n    ",71],"{",["T_WHITESPACE","\n        ",72],["T_VARIABLE","$sets",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_STRING","array_map",73],"(",["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],"(",["T_VARIABLE","$items",73],")",["T_WHITESPACE"," ",73],"{",["T_WHITESPACE","\n            ",73],["T_RETURN","return",74],["T_WHITESPACE"," ",74],"(",["T_NEW","new",74],["T_WHITESPACE"," ",74],["T_STRING","Collection",74],"(",["T_VARIABLE","$items",74],")",")",["T_OBJECT_OPERATOR","->",74],["T_STRING","unwrap",74],"(",")",";",["T_WHITESPACE","\n        ",74],"}",",",["T_WHITESPACE"," ",75],["T_VARIABLE","$sets",75],")",";",["T_WHITESPACE","\n\n        ",75],["T_VARIABLE","$this",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","_callback",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_VARIABLE","$callable",77],";",["T_WHITESPACE","\n        ",77],["T_STRING","parent",78],["T_DOUBLE_COLON","::",78],["T_STRING","__construct",78],"(",["T_STRING","MultipleIterator",78],["T_DOUBLE_COLON","::",78],["T_STRING","MIT_NEED_ALL",78],["T_WHITESPACE"," ",78],"|",["T_WHITESPACE"," ",78],["T_STRING","MultipleIterator",78],["T_DOUBLE_COLON","::",78],["T_STRING","MIT_KEYS_NUMERIC",78],")",";",["T_WHITESPACE","\n\n        ",78],["T_FOREACH","foreach",80],["T_WHITESPACE"," ",80],"(",["T_VARIABLE","$sets",80],["T_WHITESPACE"," ",80],["T_AS","as",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$set",80],")",["T_WHITESPACE"," ",80],"{",["T_WHITESPACE","\n            ",80],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","_iterators",81],"[","]",["T_WHITESPACE"," ",81],"=",["T_WHITESPACE"," ",81],["T_VARIABLE","$set",81],";",["T_WHITESPACE","\n            ",81],["T_VARIABLE","$this",82],["T_OBJECT_OPERATOR","->",82],["T_STRING","attachIterator",82],"(",["T_VARIABLE","$set",82],")",";",["T_WHITESPACE","\n        ",82],"}",["T_WHITESPACE","\n    ",83],"}",["T_WHITESPACE","\n\n    ",84],["T_DOC_COMMENT","\/**\n     * Returns the value resulting out of zipping all the elements for all the\n     * iterators with the same positional index.\n     *\n     * @return mixed\n     *\/",86],["T_WHITESPACE","\n    ",91],["T_PUBLIC","public",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","current",92],"(",")",["T_WHITESPACE","\n    ",92],"{",["T_WHITESPACE","\n        ",93],["T_IF","if",94],["T_WHITESPACE"," ",94],"(",["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","_callback",94],["T_WHITESPACE"," ",94],["T_IS_IDENTICAL","===",94],["T_WHITESPACE"," ",94],["T_STRING","null",94],")",["T_WHITESPACE"," ",94],"{",["T_WHITESPACE","\n            ",94],["T_RETURN","return",95],["T_WHITESPACE"," ",95],["T_STRING","parent",95],["T_DOUBLE_COLON","::",95],["T_STRING","current",95],"(",")",";",["T_WHITESPACE","\n        ",95],"}",["T_WHITESPACE","\n\n        ",96],["T_RETURN","return",98],["T_WHITESPACE"," ",98],["T_STRING","call_user_func_array",98],"(",["T_VARIABLE","$this",98],["T_OBJECT_OPERATOR","->",98],["T_STRING","_callback",98],",",["T_WHITESPACE"," ",98],["T_STRING","parent",98],["T_DOUBLE_COLON","::",98],["T_STRING","current",98],"(",")",")",";",["T_WHITESPACE","\n    ",98],"}",["T_WHITESPACE","\n\n    ",99],["T_DOC_COMMENT","\/**\n     * Returns a string representation of this object that can be used\n     * to reconstruct it\n     *\n     * @return string\n     *\/",101],["T_WHITESPACE","\n    ",106],["T_PUBLIC","public",107],["T_WHITESPACE"," ",107],["T_FUNCTION","function",107],["T_WHITESPACE"," ",107],["T_STRING","serialize",107],"(",")",["T_WHITESPACE","\n    ",107],"{",["T_WHITESPACE","\n        ",108],["T_RETURN","return",109],["T_WHITESPACE"," ",109],["T_STRING","serialize",109],"(",["T_VARIABLE","$this",109],["T_OBJECT_OPERATOR","->",109],["T_STRING","_iterators",109],")",";",["T_WHITESPACE","\n    ",109],"}",["T_WHITESPACE","\n\n    ",110],["T_DOC_COMMENT","\/**\n     * Unserializes the passed string and rebuilds the ZipIterator instance\n     *\n     * @param string $iterators The serialized iterators\n     * @return void\n     *\/",112],["T_WHITESPACE","\n    ",117],["T_PUBLIC","public",118],["T_WHITESPACE"," ",118],["T_FUNCTION","function",118],["T_WHITESPACE"," ",118],["T_STRING","unserialize",118],"(",["T_VARIABLE","$iterators",118],")",["T_WHITESPACE","\n    ",118],"{",["T_WHITESPACE","\n        ",119],["T_STRING","parent",120],["T_DOUBLE_COLON","::",120],["T_STRING","__construct",120],"(",["T_STRING","MultipleIterator",120],["T_DOUBLE_COLON","::",120],["T_STRING","MIT_NEED_ALL",120],["T_WHITESPACE"," ",120],"|",["T_WHITESPACE"," ",120],["T_STRING","MultipleIterator",120],["T_DOUBLE_COLON","::",120],["T_STRING","MIT_KEYS_NUMERIC",120],")",";",["T_WHITESPACE","\n        ",120],["T_VARIABLE","$this",121],["T_OBJECT_OPERATOR","->",121],["T_STRING","_iterators",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_STRING","unserialize",121],"(",["T_VARIABLE","$iterators",121],")",";",["T_WHITESPACE","\n        ",121],["T_FOREACH","foreach",122],["T_WHITESPACE"," ",122],"(",["T_VARIABLE","$this",122],["T_OBJECT_OPERATOR","->",122],["T_STRING","_iterators",122],["T_WHITESPACE"," ",122],["T_AS","as",122],["T_WHITESPACE"," ",122],["T_VARIABLE","$it",122],")",["T_WHITESPACE"," ",122],"{",["T_WHITESPACE","\n            ",122],["T_VARIABLE","$this",123],["T_OBJECT_OPERATOR","->",123],["T_STRING","attachIterator",123],"(",["T_VARIABLE","$it",123],")",";",["T_WHITESPACE","\n        ",123],"}",["T_WHITESPACE","\n    ",124],"}",["T_WHITESPACE","\n",125],"}",["T_WHITESPACE","\n",126]]