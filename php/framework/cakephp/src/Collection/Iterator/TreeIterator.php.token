[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Collection",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Iterator",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Collection",17],["T_NS_SEPARATOR","\\",17],["T_STRING","CollectionTrait",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","RecursiveIterator",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","RecursiveIteratorIterator",19],";",["T_WHITESPACE","\n\n",19],["T_DOC_COMMENT","\/**\n * A Recursive iterator used to flatten nested structures and also exposes\n * all Collection methods\n *\/",21],["T_WHITESPACE","\n",24],["T_CLASS","class",25],["T_WHITESPACE"," ",25],["T_STRING","TreeIterator",25],["T_WHITESPACE"," ",25],["T_EXTENDS","extends",25],["T_WHITESPACE"," ",25],["T_STRING","RecursiveIteratorIterator",25],["T_WHITESPACE","\n",25],"{",["T_WHITESPACE","\n\n    ",26],["T_USE","use",28],["T_WHITESPACE"," ",28],["T_STRING","CollectionTrait",28],";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * The iteration mode\n     *\n     * @var int\n     *\/",30],["T_WHITESPACE","\n    ",34],["T_PROTECTED","protected",35],["T_WHITESPACE"," ",35],["T_VARIABLE","$_mode",35],";",["T_WHITESPACE","\n\n    ",35],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param \\RecursiveIterator $items The iterator to flatten.\n     * @param int $mode Iterator mode.\n     * @param int $flags Iterator flags.\n     *\/",37],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","__construct",44],"(",["T_STRING","RecursiveIterator",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$items",44],",",["T_WHITESPACE"," ",44],["T_VARIABLE","$mode",44],["T_WHITESPACE"," ",44],"=",["T_WHITESPACE"," ",44],["T_STRING","RecursiveIteratorIterator",44],["T_DOUBLE_COLON","::",44],["T_STRING","SELF_FIRST",44],",",["T_WHITESPACE"," ",44],["T_VARIABLE","$flags",44],["T_WHITESPACE"," ",44],"=",["T_WHITESPACE"," ",44],["T_LNUMBER","0",44],")",["T_WHITESPACE","\n    ",44],"{",["T_WHITESPACE","\n        ",45],["T_STRING","parent",46],["T_DOUBLE_COLON","::",46],["T_STRING","__construct",46],"(",["T_VARIABLE","$items",46],",",["T_WHITESPACE"," ",46],["T_VARIABLE","$mode",46],",",["T_WHITESPACE"," ",46],["T_VARIABLE","$flags",46],")",";",["T_WHITESPACE","\n        ",46],["T_VARIABLE","$this",47],["T_OBJECT_OPERATOR","->",47],["T_STRING","_mode",47],["T_WHITESPACE"," ",47],"=",["T_WHITESPACE"," ",47],["T_VARIABLE","$mode",47],";",["T_WHITESPACE","\n    ",47],"}",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Returns another iterator which will return the values ready to be displayed\n     * to a user. It does so by extracting one property from each of the elements\n     * and prefixing it with a spacer so that the relative position in the tree\n     * can be visualized.\n     *\n     * Both $valuePath and $keyPath can be a string with a property name to extract\n     * or a dot separated path of properties that should be followed to get the last\n     * one in the path.\n     *\n     * Alternatively, $valuePath and $keyPath can be callable functions. They will get\n     * the current element as first parameter, the current iteration key as second\n     * parameter, and the iterator instance as third argument.\n     *\n     * ### Example\n     *\n     * ```\n     *  $printer = (new Collection($treeStructure))->listNested()->printer('name');\n     * ```\n     *\n     * Using a closure:\n     *\n     * ```\n     *  $printer = (new Collection($treeStructure))\n     *      ->listNested()\n     *      ->printer(function ($item, $key, $iterator) {\n     *          return $item->name;\n     *      });\n     * ```\n     *\n     * @param string|callable $valuePath The property to extract or a callable to return\n     * the display value\n     * @param string|callable|null $keyPath The property to use as iteration key or a\n     * callable returning the key value.\n     * @param string $spacer The string to use for prefixing the values according to\n     * their depth in the tree\n     * @return \\Cake\\Collection\\Iterator\\TreePrinter\n     *\/",50],["T_WHITESPACE","\n    ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_FUNCTION","function",88],["T_WHITESPACE"," ",88],["T_STRING","printer",88],"(",["T_VARIABLE","$valuePath",88],",",["T_WHITESPACE"," ",88],["T_VARIABLE","$keyPath",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_STRING","null",88],",",["T_WHITESPACE"," ",88],["T_VARIABLE","$spacer",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_CONSTANT_ENCAPSED_STRING","'__'",88],")",["T_WHITESPACE","\n    ",88],"{",["T_WHITESPACE","\n        ",89],["T_IF","if",90],["T_WHITESPACE"," ",90],"(","!",["T_VARIABLE","$keyPath",90],")",["T_WHITESPACE"," ",90],"{",["T_WHITESPACE","\n            ",90],["T_VARIABLE","$counter",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],["T_LNUMBER","0",91],";",["T_WHITESPACE","\n            ",91],["T_VARIABLE","$keyPath",92],["T_WHITESPACE"," ",92],"=",["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],"(",")",["T_WHITESPACE"," ",92],["T_USE","use",92],["T_WHITESPACE"," ",92],"(","&",["T_VARIABLE","$counter",92],")",["T_WHITESPACE"," ",92],"{",["T_WHITESPACE","\n                ",92],["T_RETURN","return",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$counter",93],["T_INC","++",93],";",["T_WHITESPACE","\n            ",93],"}",";",["T_WHITESPACE","\n        ",94],"}",["T_WHITESPACE","\n\n        ",95],["T_RETURN","return",97],["T_WHITESPACE"," ",97],["T_NEW","new",97],["T_WHITESPACE"," ",97],["T_STRING","TreePrinter",97],"(",["T_WHITESPACE","\n            ",97],["T_VARIABLE","$this",98],["T_OBJECT_OPERATOR","->",98],["T_STRING","getInnerIterator",98],"(",")",",",["T_WHITESPACE","\n            ",98],["T_VARIABLE","$valuePath",99],",",["T_WHITESPACE","\n            ",99],["T_VARIABLE","$keyPath",100],",",["T_WHITESPACE","\n            ",100],["T_VARIABLE","$spacer",101],",",["T_WHITESPACE","\n            ",101],["T_VARIABLE","$this",102],["T_OBJECT_OPERATOR","->",102],["T_STRING","_mode",102],["T_WHITESPACE","\n        ",102],")",";",["T_WHITESPACE","\n    ",103],"}",["T_WHITESPACE","\n",104],"}",["T_WHITESPACE","\n",105]]