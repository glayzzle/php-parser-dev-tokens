[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.2.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","I18n",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Chronos",17],["T_NS_SEPARATOR","\\",17],["T_STRING","MutableDate",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","IntlDateFormatter",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","JsonSerializable",19],";",["T_WHITESPACE","\n\n",19],["T_DOC_COMMENT","\/**\n * Extends the Date class provided by Chronos.\n *\n * Adds handy methods and locale-aware formatting helpers\n *\/",21],["T_WHITESPACE","\n",25],["T_CLASS","class",26],["T_WHITESPACE"," ",26],["T_STRING","Date",26],["T_WHITESPACE"," ",26],["T_EXTENDS","extends",26],["T_WHITESPACE"," ",26],["T_STRING","MutableDate",26],["T_WHITESPACE"," ",26],["T_IMPLEMENTS","implements",26],["T_WHITESPACE"," ",26],["T_STRING","JsonSerializable",26],["T_WHITESPACE","\n",26],"{",["T_WHITESPACE","\n    ",27],["T_USE","use",28],["T_WHITESPACE"," ",28],["T_STRING","DateFormatTrait",28],";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * The format to use when formatting a time using `Cake\\I18n\\Date::i18nFormat()`\n     * and `__toString`\n     *\n     * The format should be either the formatting constants from IntlDateFormatter as\n     * described in (http:\/\/www.php.net\/manual\/en\/class.intldateformatter.php) or a pattern\n     * as specified in (http:\/\/www.icu-project.org\/apiref\/icu4c\/classSimpleDateFormat.html#details)\n     *\n     * It is possible to provide an array of 2 constants. In this case, the first position\n     * will be used for formatting the date part of the object and the second position\n     * will be used to format the time part.\n     *\n     * @var string|array|int\n     * @see \\Cake\\I18n\\DateFormatTrait::i18nFormat()\n     *\/",30],["T_WHITESPACE","\n    ",44],["T_PROTECTED","protected",45],["T_WHITESPACE"," ",45],["T_STATIC","static",45],["T_WHITESPACE"," ",45],["T_VARIABLE","$_toStringFormat",45],["T_WHITESPACE"," ",45],"=",["T_WHITESPACE"," ",45],"[",["T_STRING","IntlDateFormatter",45],["T_DOUBLE_COLON","::",45],["T_STRING","SHORT",45],",",["T_WHITESPACE"," ",45],"-",["T_LNUMBER","1",45],"]",";",["T_WHITESPACE","\n\n    ",45],["T_DOC_COMMENT","\/**\n     * The format to use when formatting a time using `Cake\\I18n\\Date::timeAgoInWords()`\n     * and the difference is more than `Cake\\I18n\\Date::$wordEnd`\n     *\n     * @var string\n     * @see \\Cake\\I18n\\DateFormatTrait::parseDate()\n     *\/",47],["T_WHITESPACE","\n    ",53],["T_PUBLIC","public",54],["T_WHITESPACE"," ",54],["T_STATIC","static",54],["T_WHITESPACE"," ",54],["T_VARIABLE","$wordFormat",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],"[",["T_STRING","IntlDateFormatter",54],["T_DOUBLE_COLON","::",54],["T_STRING","SHORT",54],",",["T_WHITESPACE"," ",54],"-",["T_LNUMBER","1",54],"]",";",["T_WHITESPACE","\n\n    ",54],["T_DOC_COMMENT","\/**\n     * The format to use when formatting a time using `Cake\\I18n\\Date::nice()`\n     *\n     * The format should be either the formatting constants from IntlDateFormatter as\n     * described in (http:\/\/www.php.net\/manual\/en\/class.intldateformatter.php) or a pattern\n     * as specified in (http:\/\/www.icu-project.org\/apiref\/icu4c\/classSimpleDateFormat.html#details)\n     *\n     * It is possible to provide an array of 2 constants. In this case, the first position\n     * will be used for formatting the date part of the object and the second position\n     * will be used to format the time part.\n     *\n     * @var string|array|int\n     * @see \\Cake\\I18n\\DateFormatTrait::nice()\n     *\/",56],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_STATIC","static",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$niceFormat",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],"[",["T_STRING","IntlDateFormatter",70],["T_DOUBLE_COLON","::",70],["T_STRING","MEDIUM",70],",",["T_WHITESPACE"," ",70],"-",["T_LNUMBER","1",70],"]",";",["T_WHITESPACE","\n\n    ",70],["T_DOC_COMMENT","\/**\n     * The format to use when formatting a time using `Date::timeAgoInWords()`\n     * and the difference is less than `Date::$wordEnd`\n     *\n     * @var array\n     * @see \\Cake\\I18n\\Date::timeAgoInWords()\n     *\/",72],["T_WHITESPACE","\n    ",78],["T_PUBLIC","public",79],["T_WHITESPACE"," ",79],["T_STATIC","static",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$wordAccuracy",79],["T_WHITESPACE"," ",79],"=",["T_WHITESPACE"," ",79],"[",["T_WHITESPACE","\n        ",79],["T_CONSTANT_ENCAPSED_STRING","'year'",80],["T_WHITESPACE"," ",80],["T_DOUBLE_ARROW","=>",80],["T_WHITESPACE"," ",80],["T_CONSTANT_ENCAPSED_STRING","\"day\"",80],",",["T_WHITESPACE","\n        ",80],["T_CONSTANT_ENCAPSED_STRING","'month'",81],["T_WHITESPACE"," ",81],["T_DOUBLE_ARROW","=>",81],["T_WHITESPACE"," ",81],["T_CONSTANT_ENCAPSED_STRING","\"day\"",81],",",["T_WHITESPACE","\n        ",81],["T_CONSTANT_ENCAPSED_STRING","'week'",82],["T_WHITESPACE"," ",82],["T_DOUBLE_ARROW","=>",82],["T_WHITESPACE"," ",82],["T_CONSTANT_ENCAPSED_STRING","\"day\"",82],",",["T_WHITESPACE","\n        ",82],["T_CONSTANT_ENCAPSED_STRING","'day'",83],["T_WHITESPACE"," ",83],["T_DOUBLE_ARROW","=>",83],["T_WHITESPACE"," ",83],["T_CONSTANT_ENCAPSED_STRING","\"day\"",83],",",["T_WHITESPACE","\n        ",83],["T_CONSTANT_ENCAPSED_STRING","'hour'",84],["T_WHITESPACE"," ",84],["T_DOUBLE_ARROW","=>",84],["T_WHITESPACE"," ",84],["T_CONSTANT_ENCAPSED_STRING","\"day\"",84],",",["T_WHITESPACE","\n        ",84],["T_CONSTANT_ENCAPSED_STRING","'minute'",85],["T_WHITESPACE"," ",85],["T_DOUBLE_ARROW","=>",85],["T_WHITESPACE"," ",85],["T_CONSTANT_ENCAPSED_STRING","\"day\"",85],",",["T_WHITESPACE","\n        ",85],["T_CONSTANT_ENCAPSED_STRING","'second'",86],["T_WHITESPACE"," ",86],["T_DOUBLE_ARROW","=>",86],["T_WHITESPACE"," ",86],["T_CONSTANT_ENCAPSED_STRING","\"day\"",86],",",["T_WHITESPACE","\n    ",86],"]",";",["T_WHITESPACE","\n\n    ",87],["T_DOC_COMMENT","\/**\n     * The end of relative time telling\n     *\n     * @var string\n     * @see \\Cake\\I18n\\Date::timeAgoInWords()\n     *\/",89],["T_WHITESPACE","\n    ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_STATIC","static",95],["T_WHITESPACE"," ",95],["T_VARIABLE","$wordEnd",95],["T_WHITESPACE"," ",95],"=",["T_WHITESPACE"," ",95],["T_CONSTANT_ENCAPSED_STRING","'+1 month'",95],";",["T_WHITESPACE","\n\n    ",95],["T_DOC_COMMENT","\/**\n     * Returns either a relative or a formatted absolute date depending\n     * on the difference between the current date and this object.\n     *\n     * ### Options:\n     *\n     * - `from` => another Date object representing the \"now\" date\n     * - `format` => a fall back format if the relative time is longer than the duration specified by end\n     * - `accuracy` => Specifies how accurate the date should be described (array)\n     *    - year =>   The format if years > 0   (default \"day\")\n     *    - month =>  The format if months > 0  (default \"day\")\n     *    - week =>   The format if weeks > 0   (default \"day\")\n     *    - day =>    The format if weeks > 0   (default \"day\")\n     * - `end` => The end of relative date telling\n     * - `relativeString` => The printf compatible string when outputting relative date\n     * - `absoluteString` => The printf compatible string when outputting absolute date\n     * - `timezone` => The user timezone the timestamp should be formatted in.\n     *\n     * Relative dates look something like this:\n     *\n     * - 3 weeks, 4 days ago\n     * - 1 day ago\n     *\n     * Default date formatting is d\/M\/YY e.g: on 18\/2\/09. Formatting is done internally using\n     * `i18nFormat`, see the method for the valid formatting strings.\n     *\n     * The returned string includes 'ago' or 'on' and assumes you'll properly add a word\n     * like 'Posted ' before the function output.\n     *\n     * NOTE: If the difference is one week or more, the lowest level of accuracy is day.\n     *\n     * @param array $options Array of options.\n     * @return string Relative time string.\n     *\/",97],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","timeAgoInWords",131],"(",["T_ARRAY","array",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$options",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],"[","]",")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_RETURN","return",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","diffFormatter",133],"(",")",["T_OBJECT_OPERATOR","->",133],["T_STRING","dateAgoInWords",133],"(",["T_VARIABLE","$this",133],",",["T_WHITESPACE"," ",133],["T_VARIABLE","$options",133],")",";",["T_WHITESPACE","\n    ",133],"}",["T_WHITESPACE","\n",134],"}",["T_WHITESPACE","\n",135]]