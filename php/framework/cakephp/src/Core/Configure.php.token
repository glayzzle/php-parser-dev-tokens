[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         1.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Core",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Cache",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Cache",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Core",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Configure",18],["T_NS_SEPARATOR","\\",18],["T_STRING","ConfigEngineInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Core",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Configure",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Engine",19],["T_NS_SEPARATOR","\\",19],["T_STRING","PhpConfig",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Cake",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Core",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Exception",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Exception",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Cake",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Utility",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Hash",21],";",["T_WHITESPACE","\n",21],["T_USE","use",22],["T_WHITESPACE"," ",22],["T_STRING","RuntimeException",22],";",["T_WHITESPACE","\n\n",22],["T_DOC_COMMENT","\/**\n * Configuration class. Used for managing runtime configuration information.\n *\n * Provides features for reading and writing to the runtime configuration, as well\n * as methods for loading additional configuration files or storing runtime configuration\n * for future use.\n *\n * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html\n *\/",24],["T_WHITESPACE","\n",32],["T_CLASS","class",33],["T_WHITESPACE"," ",33],["T_STRING","Configure",33],["T_WHITESPACE","\n",33],"{",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Array of values currently stored in Configure.\n     *\n     * @var array\n     *\/",36],["T_WHITESPACE","\n    ",40],["T_PROTECTED","protected",41],["T_WHITESPACE"," ",41],["T_STATIC","static",41],["T_WHITESPACE"," ",41],["T_VARIABLE","$_values",41],["T_WHITESPACE"," ",41],"=",["T_WHITESPACE"," ",41],"[",["T_WHITESPACE","\n        ",41],["T_CONSTANT_ENCAPSED_STRING","'debug'",42],["T_WHITESPACE"," ",42],["T_DOUBLE_ARROW","=>",42],["T_WHITESPACE"," ",42],["T_STRING","false",42],["T_WHITESPACE","\n    ",42],"]",";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * Configured engine classes, used to load config files from resources\n     *\n     * @var array\n     * @see \\Cake\\Core\\Configure::load()\n     *\/",45],["T_WHITESPACE","\n    ",50],["T_PROTECTED","protected",51],["T_WHITESPACE"," ",51],["T_STATIC","static",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$_engines",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],"[","]",";",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * Flag to track whether or not ini_set exists.\n     *\n     * @return void\n     *\/",53],["T_WHITESPACE","\n    ",57],["T_PROTECTED","protected",58],["T_WHITESPACE"," ",58],["T_STATIC","static",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$_hasIniSet",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_STRING","null",58],";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Used to store a dynamic variable in Configure.\n     *\n     * Usage:\n     * ```\n     * Configure::write('One.key1', 'value of the Configure::One[key1]');\n     * Configure::write(['One.key1' => 'value of the Configure::One[key1]']);\n     * Configure::write('One', [\n     *     'key1' => 'value of the Configure::One[key1]',\n     *     'key2' => 'value of the Configure::One[key2]'\n     * ]);\n     *\n     * Configure::write([\n     *     'One.key1' => 'value of the Configure::One[key1]',\n     *     'One.key2' => 'value of the Configure::One[key2]'\n     * ]);\n     * ```\n     *\n     * @param string|array $config The key to write, can be a dot notation value.\n     * Alternatively can be an array containing key(s) and value(s).\n     * @param mixed $value Value to set for var\n     * @return bool True if write was successful\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html#writing-configuration-data\n     *\/",60],["T_WHITESPACE","\n    ",83],["T_PUBLIC","public",84],["T_WHITESPACE"," ",84],["T_STATIC","static",84],["T_WHITESPACE"," ",84],["T_FUNCTION","function",84],["T_WHITESPACE"," ",84],["T_STRING","write",84],"(",["T_VARIABLE","$config",84],",",["T_WHITESPACE"," ",84],["T_VARIABLE","$value",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_STRING","null",84],")",["T_WHITESPACE","\n    ",84],"{",["T_WHITESPACE","\n        ",85],["T_IF","if",86],["T_WHITESPACE"," ",86],"(","!",["T_STRING","is_array",86],"(",["T_VARIABLE","$config",86],")",")",["T_WHITESPACE"," ",86],"{",["T_WHITESPACE","\n            ",86],["T_VARIABLE","$config",87],["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],"[",["T_VARIABLE","$config",87],["T_WHITESPACE"," ",87],["T_DOUBLE_ARROW","=>",87],["T_WHITESPACE"," ",87],["T_VARIABLE","$value",87],"]",";",["T_WHITESPACE","\n        ",87],"}",["T_WHITESPACE","\n\n        ",88],["T_FOREACH","foreach",90],["T_WHITESPACE"," ",90],"(",["T_VARIABLE","$config",90],["T_WHITESPACE"," ",90],["T_AS","as",90],["T_WHITESPACE"," ",90],["T_VARIABLE","$name",90],["T_WHITESPACE"," ",90],["T_DOUBLE_ARROW","=>",90],["T_WHITESPACE"," ",90],["T_VARIABLE","$value",90],")",["T_WHITESPACE"," ",90],"{",["T_WHITESPACE","\n            ",90],["T_STATIC","static",91],["T_DOUBLE_COLON","::",91],["T_VARIABLE","$_values",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],["T_STRING","Hash",91],["T_DOUBLE_COLON","::",91],["T_STRING","insert",91],"(",["T_STATIC","static",91],["T_DOUBLE_COLON","::",91],["T_VARIABLE","$_values",91],",",["T_WHITESPACE"," ",91],["T_VARIABLE","$name",91],",",["T_WHITESPACE"," ",91],["T_VARIABLE","$value",91],")",";",["T_WHITESPACE","\n        ",91],"}",["T_WHITESPACE","\n\n        ",92],["T_IF","if",94],["T_WHITESPACE"," ",94],"(",["T_ISSET","isset",94],"(",["T_VARIABLE","$config",94],"[",["T_CONSTANT_ENCAPSED_STRING","'debug'",94],"]",")",")",["T_WHITESPACE"," ",94],"{",["T_WHITESPACE","\n            ",94],["T_IF","if",95],["T_WHITESPACE"," ",95],"(",["T_STATIC","static",95],["T_DOUBLE_COLON","::",95],["T_VARIABLE","$_hasIniSet",95],["T_WHITESPACE"," ",95],["T_IS_IDENTICAL","===",95],["T_WHITESPACE"," ",95],["T_STRING","null",95],")",["T_WHITESPACE"," ",95],"{",["T_WHITESPACE","\n                ",95],["T_STATIC","static",96],["T_DOUBLE_COLON","::",96],["T_VARIABLE","$_hasIniSet",96],["T_WHITESPACE"," ",96],"=",["T_WHITESPACE"," ",96],["T_STRING","function_exists",96],"(",["T_CONSTANT_ENCAPSED_STRING","'ini_set'",96],")",";",["T_WHITESPACE","\n            ",96],"}",["T_WHITESPACE","\n            ",97],["T_IF","if",98],["T_WHITESPACE"," ",98],"(",["T_STATIC","static",98],["T_DOUBLE_COLON","::",98],["T_VARIABLE","$_hasIniSet",98],")",["T_WHITESPACE"," ",98],"{",["T_WHITESPACE","\n                ",98],["T_STRING","ini_set",99],"(",["T_CONSTANT_ENCAPSED_STRING","'display_errors'",99],",",["T_WHITESPACE"," ",99],["T_VARIABLE","$config",99],"[",["T_CONSTANT_ENCAPSED_STRING","'debug'",99],"]",["T_WHITESPACE"," ",99],"?",["T_WHITESPACE"," ",99],["T_LNUMBER","1",99],["T_WHITESPACE"," ",99],":",["T_WHITESPACE"," ",99],["T_LNUMBER","0",99],")",";",["T_WHITESPACE","\n            ",99],"}",["T_WHITESPACE","\n        ",100],"}",["T_WHITESPACE","\n\n        ",101],["T_RETURN","return",103],["T_WHITESPACE"," ",103],["T_STRING","true",103],";",["T_WHITESPACE","\n    ",103],"}",["T_WHITESPACE","\n\n    ",104],["T_DOC_COMMENT","\/**\n     * Used to read information stored in Configure. It's not\n     * possible to store `null` values in Configure.\n     *\n     * Usage:\n     * ```\n     * Configure::read('Name'); will return all values for Name\n     * Configure::read('Name.key'); will return only the value of Configure::Name[key]\n     * ```\n     *\n     * @param string|null $var Variable to obtain. Use '.' to access array elements.\n     * @return mixed Value stored in configure, or null.\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html#reading-configuration-data\n     *\/",106],["T_WHITESPACE","\n    ",119],["T_PUBLIC","public",120],["T_WHITESPACE"," ",120],["T_STATIC","static",120],["T_WHITESPACE"," ",120],["T_FUNCTION","function",120],["T_WHITESPACE"," ",120],["T_STRING","read",120],"(",["T_VARIABLE","$var",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_STRING","null",120],")",["T_WHITESPACE","\n    ",120],"{",["T_WHITESPACE","\n        ",121],["T_IF","if",122],["T_WHITESPACE"," ",122],"(",["T_VARIABLE","$var",122],["T_WHITESPACE"," ",122],["T_IS_IDENTICAL","===",122],["T_WHITESPACE"," ",122],["T_STRING","null",122],")",["T_WHITESPACE"," ",122],"{",["T_WHITESPACE","\n            ",122],["T_RETURN","return",123],["T_WHITESPACE"," ",123],["T_STATIC","static",123],["T_DOUBLE_COLON","::",123],["T_VARIABLE","$_values",123],";",["T_WHITESPACE","\n        ",123],"}",["T_WHITESPACE","\n\n        ",124],["T_RETURN","return",126],["T_WHITESPACE"," ",126],["T_STRING","Hash",126],["T_DOUBLE_COLON","::",126],["T_STRING","get",126],"(",["T_STATIC","static",126],["T_DOUBLE_COLON","::",126],["T_VARIABLE","$_values",126],",",["T_WHITESPACE"," ",126],["T_VARIABLE","$var",126],")",";",["T_WHITESPACE","\n    ",126],"}",["T_WHITESPACE","\n\n    ",127],["T_DOC_COMMENT","\/**\n     * Returns true if given variable is set in Configure.\n     *\n     * @param string $var Variable name to check for\n     * @return bool True if variable is there\n     *\/",129],["T_WHITESPACE","\n    ",134],["T_PUBLIC","public",135],["T_WHITESPACE"," ",135],["T_STATIC","static",135],["T_WHITESPACE"," ",135],["T_FUNCTION","function",135],["T_WHITESPACE"," ",135],["T_STRING","check",135],"(",["T_VARIABLE","$var",135],")",["T_WHITESPACE","\n    ",135],"{",["T_WHITESPACE","\n        ",136],["T_IF","if",137],["T_WHITESPACE"," ",137],"(",["T_EMPTY","empty",137],"(",["T_VARIABLE","$var",137],")",")",["T_WHITESPACE"," ",137],"{",["T_WHITESPACE","\n            ",137],["T_RETURN","return",138],["T_WHITESPACE"," ",138],["T_STRING","false",138],";",["T_WHITESPACE","\n        ",138],"}",["T_WHITESPACE","\n\n        ",139],["T_RETURN","return",141],["T_WHITESPACE"," ",141],["T_STATIC","static",141],["T_DOUBLE_COLON","::",141],["T_STRING","read",141],"(",["T_VARIABLE","$var",141],")",["T_WHITESPACE"," ",141],["T_IS_NOT_IDENTICAL","!==",141],["T_WHITESPACE"," ",141],["T_STRING","null",141],";",["T_WHITESPACE","\n    ",141],"}",["T_WHITESPACE","\n\n    ",142],["T_DOC_COMMENT","\/**\n     * Used to get information stored in Configure. It's not\n     * possible to store `null` values in Configure.\n     *\n     * Acts as a wrapper around Configure::read() and Configure::check().\n     * The configure key\/value pair fetched via this method is expected to exist.\n     * In case it does not an exception will be thrown.\n     *\n     * Usage:\n     * ```\n     * Configure::readOrFail('Name'); will return all values for Name\n     * Configure::readOrFail('Name.key'); will return only the value of Configure::Name[key]\n     * ```\n     *\n     * @param string $var Variable to obtain. Use '.' to access array elements.\n     * @return mixed Value stored in configure.\n     * @throws \\RuntimeException if the requested configuration is not set.\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html#reading-configuration-data\n     *\/",144],["T_WHITESPACE","\n    ",162],["T_PUBLIC","public",163],["T_WHITESPACE"," ",163],["T_STATIC","static",163],["T_WHITESPACE"," ",163],["T_FUNCTION","function",163],["T_WHITESPACE"," ",163],["T_STRING","readOrFail",163],"(",["T_VARIABLE","$var",163],")",["T_WHITESPACE","\n    ",163],"{",["T_WHITESPACE","\n        ",164],["T_IF","if",165],["T_WHITESPACE"," ",165],"(",["T_STATIC","static",165],["T_DOUBLE_COLON","::",165],["T_STRING","check",165],"(",["T_VARIABLE","$var",165],")",["T_WHITESPACE"," ",165],["T_IS_IDENTICAL","===",165],["T_WHITESPACE"," ",165],["T_STRING","false",165],")",["T_WHITESPACE"," ",165],"{",["T_WHITESPACE","\n            ",165],["T_THROW","throw",166],["T_WHITESPACE"," ",166],["T_NEW","new",166],["T_WHITESPACE"," ",166],["T_STRING","RuntimeException",166],"(",["T_STRING","sprintf",166],"(",["T_CONSTANT_ENCAPSED_STRING","'Expected configuration key \"%s\" not found.'",166],",",["T_WHITESPACE"," ",166],["T_VARIABLE","$var",166],")",")",";",["T_WHITESPACE","\n        ",166],"}",["T_WHITESPACE","\n\n        ",167],["T_RETURN","return",169],["T_WHITESPACE"," ",169],["T_STATIC","static",169],["T_DOUBLE_COLON","::",169],["T_STRING","read",169],"(",["T_VARIABLE","$var",169],")",";",["T_WHITESPACE","\n    ",169],"}",["T_WHITESPACE","\n\n    ",170],["T_DOC_COMMENT","\/**\n     * Used to delete a variable from Configure.\n     *\n     * Usage:\n     * ```\n     * Configure::delete('Name'); will delete the entire Configure::Name\n     * Configure::delete('Name.key'); will delete only the Configure::Name[key]\n     * ```\n     *\n     * @param string $var the var to be deleted\n     * @return void\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html#deleting-configuration-data\n     *\/",172],["T_WHITESPACE","\n    ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_STATIC","static",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","delete",185],"(",["T_VARIABLE","$var",185],")",["T_WHITESPACE","\n    ",185],"{",["T_WHITESPACE","\n        ",186],["T_STATIC","static",187],["T_DOUBLE_COLON","::",187],["T_VARIABLE","$_values",187],["T_WHITESPACE"," ",187],"=",["T_WHITESPACE"," ",187],["T_STRING","Hash",187],["T_DOUBLE_COLON","::",187],["T_STRING","remove",187],"(",["T_STATIC","static",187],["T_DOUBLE_COLON","::",187],["T_VARIABLE","$_values",187],",",["T_WHITESPACE"," ",187],["T_VARIABLE","$var",187],")",";",["T_WHITESPACE","\n    ",187],"}",["T_WHITESPACE","\n\n    ",188],["T_DOC_COMMENT","\/**\n     * Used to read and delete a variable from Configure.\n     *\n     * This is primarily used during bootstrapping to move configuration data\n     * out of configure into the various other classes in CakePHP.\n     *\n     * @param string $var The key to read and remove.\n     * @return array|null\n     *\/",190],["T_WHITESPACE","\n    ",198],["T_PUBLIC","public",199],["T_WHITESPACE"," ",199],["T_STATIC","static",199],["T_WHITESPACE"," ",199],["T_FUNCTION","function",199],["T_WHITESPACE"," ",199],["T_STRING","consume",199],"(",["T_VARIABLE","$var",199],")",["T_WHITESPACE","\n    ",199],"{",["T_WHITESPACE","\n        ",200],["T_IF","if",201],["T_WHITESPACE"," ",201],"(",["T_STRING","strpos",201],"(",["T_VARIABLE","$var",201],",",["T_WHITESPACE"," ",201],["T_CONSTANT_ENCAPSED_STRING","'.'",201],")",["T_WHITESPACE"," ",201],["T_IS_IDENTICAL","===",201],["T_WHITESPACE"," ",201],["T_STRING","false",201],")",["T_WHITESPACE"," ",201],"{",["T_WHITESPACE","\n            ",201],["T_IF","if",202],["T_WHITESPACE"," ",202],"(","!",["T_ISSET","isset",202],"(",["T_STATIC","static",202],["T_DOUBLE_COLON","::",202],["T_VARIABLE","$_values",202],"[",["T_VARIABLE","$var",202],"]",")",")",["T_WHITESPACE"," ",202],"{",["T_WHITESPACE","\n                ",202],["T_RETURN","return",203],["T_WHITESPACE"," ",203],["T_STRING","null",203],";",["T_WHITESPACE","\n            ",203],"}",["T_WHITESPACE","\n            ",204],["T_VARIABLE","$value",205],["T_WHITESPACE"," ",205],"=",["T_WHITESPACE"," ",205],["T_STATIC","static",205],["T_DOUBLE_COLON","::",205],["T_VARIABLE","$_values",205],"[",["T_VARIABLE","$var",205],"]",";",["T_WHITESPACE","\n            ",205],["T_UNSET","unset",206],"(",["T_STATIC","static",206],["T_DOUBLE_COLON","::",206],["T_VARIABLE","$_values",206],"[",["T_VARIABLE","$var",206],"]",")",";",["T_WHITESPACE","\n\n            ",206],["T_RETURN","return",208],["T_WHITESPACE"," ",208],["T_VARIABLE","$value",208],";",["T_WHITESPACE","\n        ",208],"}",["T_WHITESPACE","\n        ",209],["T_VARIABLE","$value",210],["T_WHITESPACE"," ",210],"=",["T_WHITESPACE"," ",210],["T_STRING","Hash",210],["T_DOUBLE_COLON","::",210],["T_STRING","get",210],"(",["T_STATIC","static",210],["T_DOUBLE_COLON","::",210],["T_VARIABLE","$_values",210],",",["T_WHITESPACE"," ",210],["T_VARIABLE","$var",210],")",";",["T_WHITESPACE","\n        ",210],["T_STATIC","static",211],["T_DOUBLE_COLON","::",211],["T_STRING","delete",211],"(",["T_VARIABLE","$var",211],")",";",["T_WHITESPACE","\n\n        ",211],["T_RETURN","return",213],["T_WHITESPACE"," ",213],["T_VARIABLE","$value",213],";",["T_WHITESPACE","\n    ",213],"}",["T_WHITESPACE","\n\n    ",214],["T_DOC_COMMENT","\/**\n     * Add a new engine to Configure. Engines allow you to read configuration\n     * files in various formats\/storage locations. CakePHP comes with two built-in engines\n     * PhpConfig and IniConfig. You can also implement your own engine classes in your application.\n     *\n     * To add a new engine to Configure:\n     *\n     * ```\n     * Configure::config('ini', new IniConfig());\n     * ```\n     *\n     * @param string $name The name of the engine being configured. This alias is used later to\n     *   read values from a specific engine.\n     * @param \\Cake\\Core\\Configure\\ConfigEngineInterface $engine The engine to append.\n     * @return void\n     *\/",216],["T_WHITESPACE","\n    ",231],["T_PUBLIC","public",232],["T_WHITESPACE"," ",232],["T_STATIC","static",232],["T_WHITESPACE"," ",232],["T_FUNCTION","function",232],["T_WHITESPACE"," ",232],["T_STRING","config",232],"(",["T_VARIABLE","$name",232],",",["T_WHITESPACE"," ",232],["T_STRING","ConfigEngineInterface",232],["T_WHITESPACE"," ",232],["T_VARIABLE","$engine",232],")",["T_WHITESPACE","\n    ",232],"{",["T_WHITESPACE","\n        ",233],["T_STATIC","static",234],["T_DOUBLE_COLON","::",234],["T_VARIABLE","$_engines",234],"[",["T_VARIABLE","$name",234],"]",["T_WHITESPACE"," ",234],"=",["T_WHITESPACE"," ",234],["T_VARIABLE","$engine",234],";",["T_WHITESPACE","\n    ",234],"}",["T_WHITESPACE","\n\n    ",235],["T_DOC_COMMENT","\/**\n     * Gets the names of the configured Engine objects.\n     *\n     * @param string|null $name Engine name.\n     * @return array Array of the configured Engine objects.\n     *\/",237],["T_WHITESPACE","\n    ",242],["T_PUBLIC","public",243],["T_WHITESPACE"," ",243],["T_STATIC","static",243],["T_WHITESPACE"," ",243],["T_FUNCTION","function",243],["T_WHITESPACE"," ",243],["T_STRING","configured",243],"(",["T_VARIABLE","$name",243],["T_WHITESPACE"," ",243],"=",["T_WHITESPACE"," ",243],["T_STRING","null",243],")",["T_WHITESPACE","\n    ",243],"{",["T_WHITESPACE","\n        ",244],["T_IF","if",245],["T_WHITESPACE"," ",245],"(",["T_VARIABLE","$name",245],["T_WHITESPACE"," ",245],["T_IS_NOT_IDENTICAL","!==",245],["T_WHITESPACE"," ",245],["T_STRING","null",245],")",["T_WHITESPACE"," ",245],"{",["T_WHITESPACE","\n            ",245],["T_RETURN","return",246],["T_WHITESPACE"," ",246],["T_ISSET","isset",246],"(",["T_STATIC","static",246],["T_DOUBLE_COLON","::",246],["T_VARIABLE","$_engines",246],"[",["T_VARIABLE","$name",246],"]",")",";",["T_WHITESPACE","\n        ",246],"}",["T_WHITESPACE","\n\n        ",247],["T_RETURN","return",249],["T_WHITESPACE"," ",249],["T_STRING","array_keys",249],"(",["T_STATIC","static",249],["T_DOUBLE_COLON","::",249],["T_VARIABLE","$_engines",249],")",";",["T_WHITESPACE","\n    ",249],"}",["T_WHITESPACE","\n\n    ",250],["T_DOC_COMMENT","\/**\n     * Remove a configured engine. This will unset the engine\n     * and make any future attempts to use it cause an Exception.\n     *\n     * @param string $name Name of the engine to drop.\n     * @return bool Success\n     *\/",252],["T_WHITESPACE","\n    ",258],["T_PUBLIC","public",259],["T_WHITESPACE"," ",259],["T_STATIC","static",259],["T_WHITESPACE"," ",259],["T_FUNCTION","function",259],["T_WHITESPACE"," ",259],["T_STRING","drop",259],"(",["T_VARIABLE","$name",259],")",["T_WHITESPACE","\n    ",259],"{",["T_WHITESPACE","\n        ",260],["T_IF","if",261],["T_WHITESPACE"," ",261],"(","!",["T_ISSET","isset",261],"(",["T_STATIC","static",261],["T_DOUBLE_COLON","::",261],["T_VARIABLE","$_engines",261],"[",["T_VARIABLE","$name",261],"]",")",")",["T_WHITESPACE"," ",261],"{",["T_WHITESPACE","\n            ",261],["T_RETURN","return",262],["T_WHITESPACE"," ",262],["T_STRING","false",262],";",["T_WHITESPACE","\n        ",262],"}",["T_WHITESPACE","\n        ",263],["T_UNSET","unset",264],"(",["T_STATIC","static",264],["T_DOUBLE_COLON","::",264],["T_VARIABLE","$_engines",264],"[",["T_VARIABLE","$name",264],"]",")",";",["T_WHITESPACE","\n\n        ",264],["T_RETURN","return",266],["T_WHITESPACE"," ",266],["T_STRING","true",266],";",["T_WHITESPACE","\n    ",266],"}",["T_WHITESPACE","\n\n    ",267],["T_DOC_COMMENT","\/**\n     * Loads stored configuration information from a resource. You can add\n     * config file resource engines with `Configure::config()`.\n     *\n     * Loaded configuration information will be merged with the current\n     * runtime configuration. You can load configuration files from plugins\n     * by preceding the filename with the plugin name.\n     *\n     * `Configure::load('Users.user', 'default')`\n     *\n     * Would load the 'user' config file using the default config engine. You can load\n     * app config files by giving the name of the resource you want loaded.\n     *\n     * ```\n     * Configure::load('setup', 'default');\n     * ```\n     *\n     * If using `default` config and no engine has been configured for it yet,\n     * one will be automatically created using PhpConfig\n     *\n     * @param string $key name of configuration resource to load.\n     * @param string $config Name of the configured engine to use to read the resource identified by $key.\n     * @param bool $merge if config files should be merged instead of simply overridden\n     * @return bool False if file not found, true if load successful.\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/development\/configuration.html#reading-and-writing-configuration-files\n     *\/",269],["T_WHITESPACE","\n    ",294],["T_PUBLIC","public",295],["T_WHITESPACE"," ",295],["T_STATIC","static",295],["T_WHITESPACE"," ",295],["T_FUNCTION","function",295],["T_WHITESPACE"," ",295],["T_STRING","load",295],"(",["T_VARIABLE","$key",295],",",["T_WHITESPACE"," ",295],["T_VARIABLE","$config",295],["T_WHITESPACE"," ",295],"=",["T_WHITESPACE"," ",295],["T_CONSTANT_ENCAPSED_STRING","'default'",295],",",["T_WHITESPACE"," ",295],["T_VARIABLE","$merge",295],["T_WHITESPACE"," ",295],"=",["T_WHITESPACE"," ",295],["T_STRING","true",295],")",["T_WHITESPACE","\n    ",295],"{",["T_WHITESPACE","\n        ",296],["T_VARIABLE","$engine",297],["T_WHITESPACE"," ",297],"=",["T_WHITESPACE"," ",297],["T_STATIC","static",297],["T_DOUBLE_COLON","::",297],["T_STRING","_getEngine",297],"(",["T_VARIABLE","$config",297],")",";",["T_WHITESPACE","\n        ",297],["T_IF","if",298],["T_WHITESPACE"," ",298],"(","!",["T_VARIABLE","$engine",298],")",["T_WHITESPACE"," ",298],"{",["T_WHITESPACE","\n            ",298],["T_RETURN","return",299],["T_WHITESPACE"," ",299],["T_STRING","false",299],";",["T_WHITESPACE","\n        ",299],"}",["T_WHITESPACE","\n        ",300],["T_VARIABLE","$values",301],["T_WHITESPACE"," ",301],"=",["T_WHITESPACE"," ",301],["T_VARIABLE","$engine",301],["T_OBJECT_OPERATOR","->",301],["T_STRING","read",301],"(",["T_VARIABLE","$key",301],")",";",["T_WHITESPACE","\n\n        ",301],["T_IF","if",303],["T_WHITESPACE"," ",303],"(",["T_VARIABLE","$merge",303],")",["T_WHITESPACE"," ",303],"{",["T_WHITESPACE","\n            ",303],["T_VARIABLE","$values",304],["T_WHITESPACE"," ",304],"=",["T_WHITESPACE"," ",304],["T_STRING","Hash",304],["T_DOUBLE_COLON","::",304],["T_STRING","merge",304],"(",["T_STATIC","static",304],["T_DOUBLE_COLON","::",304],["T_VARIABLE","$_values",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$values",304],")",";",["T_WHITESPACE","\n        ",304],"}",["T_WHITESPACE","\n\n        ",305],["T_RETURN","return",307],["T_WHITESPACE"," ",307],["T_STATIC","static",307],["T_DOUBLE_COLON","::",307],["T_STRING","write",307],"(",["T_VARIABLE","$values",307],")",";",["T_WHITESPACE","\n    ",307],"}",["T_WHITESPACE","\n\n    ",308],["T_DOC_COMMENT","\/**\n     * Dump data currently in Configure into $key. The serialization format\n     * is decided by the config engine attached as $config. For example, if the\n     * 'default' adapter is a PhpConfig, the generated file will be a PHP\n     * configuration file loadable by the PhpConfig.\n     *\n     * ### Usage\n     *\n     * Given that the 'default' engine is an instance of PhpConfig.\n     * Save all data in Configure to the file `my_config.php`:\n     *\n     * ```\n     * Configure::dump('my_config', 'default');\n     * ```\n     *\n     * Save only the error handling configuration:\n     *\n     * ```\n     * Configure::dump('error', 'default', ['Error', 'Exception'];\n     * ```\n     *\n     * @param string $key The identifier to create in the config adapter.\n     *   This could be a filename or a cache key depending on the adapter being used.\n     * @param string $config The name of the configured adapter to dump data with.\n     * @param array $keys The name of the top-level keys you want to dump.\n     *   This allows you save only some data stored in Configure.\n     * @return bool Success\n     * @throws \\Cake\\Core\\Exception\\Exception if the adapter does not implement a `dump` method.\n     *\/",310],["T_WHITESPACE","\n    ",338],["T_PUBLIC","public",339],["T_WHITESPACE"," ",339],["T_STATIC","static",339],["T_WHITESPACE"," ",339],["T_FUNCTION","function",339],["T_WHITESPACE"," ",339],["T_STRING","dump",339],"(",["T_VARIABLE","$key",339],",",["T_WHITESPACE"," ",339],["T_VARIABLE","$config",339],["T_WHITESPACE"," ",339],"=",["T_WHITESPACE"," ",339],["T_CONSTANT_ENCAPSED_STRING","'default'",339],",",["T_WHITESPACE"," ",339],["T_VARIABLE","$keys",339],["T_WHITESPACE"," ",339],"=",["T_WHITESPACE"," ",339],"[","]",")",["T_WHITESPACE","\n    ",339],"{",["T_WHITESPACE","\n        ",340],["T_VARIABLE","$engine",341],["T_WHITESPACE"," ",341],"=",["T_WHITESPACE"," ",341],["T_STATIC","static",341],["T_DOUBLE_COLON","::",341],["T_STRING","_getEngine",341],"(",["T_VARIABLE","$config",341],")",";",["T_WHITESPACE","\n        ",341],["T_IF","if",342],["T_WHITESPACE"," ",342],"(","!",["T_VARIABLE","$engine",342],")",["T_WHITESPACE"," ",342],"{",["T_WHITESPACE","\n            ",342],["T_THROW","throw",343],["T_WHITESPACE"," ",343],["T_NEW","new",343],["T_WHITESPACE"," ",343],["T_STRING","Exception",343],"(",["T_STRING","sprintf",343],"(",["T_CONSTANT_ENCAPSED_STRING","'There is no \"%s\" config engine.'",343],",",["T_WHITESPACE"," ",343],["T_VARIABLE","$config",343],")",")",";",["T_WHITESPACE","\n        ",343],"}",["T_WHITESPACE","\n        ",344],["T_VARIABLE","$values",345],["T_WHITESPACE"," ",345],"=",["T_WHITESPACE"," ",345],["T_STATIC","static",345],["T_DOUBLE_COLON","::",345],["T_VARIABLE","$_values",345],";",["T_WHITESPACE","\n        ",345],["T_IF","if",346],["T_WHITESPACE"," ",346],"(","!",["T_EMPTY","empty",346],"(",["T_VARIABLE","$keys",346],")",["T_WHITESPACE"," ",346],["T_BOOLEAN_AND","&&",346],["T_WHITESPACE"," ",346],["T_STRING","is_array",346],"(",["T_VARIABLE","$keys",346],")",")",["T_WHITESPACE"," ",346],"{",["T_WHITESPACE","\n            ",346],["T_VARIABLE","$values",347],["T_WHITESPACE"," ",347],"=",["T_WHITESPACE"," ",347],["T_STRING","array_intersect_key",347],"(",["T_VARIABLE","$values",347],",",["T_WHITESPACE"," ",347],["T_STRING","array_flip",347],"(",["T_VARIABLE","$keys",347],")",")",";",["T_WHITESPACE","\n        ",347],"}",["T_WHITESPACE","\n\n        ",348],["T_RETURN","return",350],["T_WHITESPACE"," ",350],["T_BOOL_CAST","(bool)",350],["T_VARIABLE","$engine",350],["T_OBJECT_OPERATOR","->",350],["T_STRING","dump",350],"(",["T_VARIABLE","$key",350],",",["T_WHITESPACE"," ",350],["T_VARIABLE","$values",350],")",";",["T_WHITESPACE","\n    ",350],"}",["T_WHITESPACE","\n\n    ",351],["T_DOC_COMMENT","\/**\n     * Get the configured engine. Internally used by `Configure::load()` and `Configure::dump()`\n     * Will create new PhpConfig for default if not configured yet.\n     *\n     * @param string $config The name of the configured adapter\n     * @return \\Cake\\Core\\Configure\\ConfigEngineInterface|false Engine instance or false\n     *\/",353],["T_WHITESPACE","\n    ",359],["T_PROTECTED","protected",360],["T_WHITESPACE"," ",360],["T_STATIC","static",360],["T_WHITESPACE"," ",360],["T_FUNCTION","function",360],["T_WHITESPACE"," ",360],["T_STRING","_getEngine",360],"(",["T_VARIABLE","$config",360],")",["T_WHITESPACE","\n    ",360],"{",["T_WHITESPACE","\n        ",361],["T_IF","if",362],["T_WHITESPACE"," ",362],"(","!",["T_ISSET","isset",362],"(",["T_STATIC","static",362],["T_DOUBLE_COLON","::",362],["T_VARIABLE","$_engines",362],"[",["T_VARIABLE","$config",362],"]",")",")",["T_WHITESPACE"," ",362],"{",["T_WHITESPACE","\n            ",362],["T_IF","if",363],["T_WHITESPACE"," ",363],"(",["T_VARIABLE","$config",363],["T_WHITESPACE"," ",363],["T_IS_NOT_IDENTICAL","!==",363],["T_WHITESPACE"," ",363],["T_CONSTANT_ENCAPSED_STRING","'default'",363],")",["T_WHITESPACE"," ",363],"{",["T_WHITESPACE","\n                ",363],["T_RETURN","return",364],["T_WHITESPACE"," ",364],["T_STRING","false",364],";",["T_WHITESPACE","\n            ",364],"}",["T_WHITESPACE","\n            ",365],["T_STATIC","static",366],["T_DOUBLE_COLON","::",366],["T_STRING","config",366],"(",["T_VARIABLE","$config",366],",",["T_WHITESPACE"," ",366],["T_NEW","new",366],["T_WHITESPACE"," ",366],["T_STRING","PhpConfig",366],"(",")",")",";",["T_WHITESPACE","\n        ",366],"}",["T_WHITESPACE","\n\n        ",367],["T_RETURN","return",369],["T_WHITESPACE"," ",369],["T_STATIC","static",369],["T_DOUBLE_COLON","::",369],["T_VARIABLE","$_engines",369],"[",["T_VARIABLE","$config",369],"]",";",["T_WHITESPACE","\n    ",369],"}",["T_WHITESPACE","\n\n    ",370],["T_DOC_COMMENT","\/**\n     * Used to determine the current version of CakePHP.\n     *\n     * Usage\n     * ```\n     * Configure::version();\n     * ```\n     *\n     * @return string Current version of CakePHP\n     *\/",372],["T_WHITESPACE","\n    ",381],["T_PUBLIC","public",382],["T_WHITESPACE"," ",382],["T_STATIC","static",382],["T_WHITESPACE"," ",382],["T_FUNCTION","function",382],["T_WHITESPACE"," ",382],["T_STRING","version",382],"(",")",["T_WHITESPACE","\n    ",382],"{",["T_WHITESPACE","\n        ",383],["T_IF","if",384],["T_WHITESPACE"," ",384],"(","!",["T_ISSET","isset",384],"(",["T_STATIC","static",384],["T_DOUBLE_COLON","::",384],["T_VARIABLE","$_values",384],"[",["T_CONSTANT_ENCAPSED_STRING","'Cake'",384],"]","[",["T_CONSTANT_ENCAPSED_STRING","'version'",384],"]",")",")",["T_WHITESPACE"," ",384],"{",["T_WHITESPACE","\n            ",384],["T_VARIABLE","$config",385],["T_WHITESPACE"," ",385],"=",["T_WHITESPACE"," ",385],["T_REQUIRE","require",385],["T_WHITESPACE"," ",385],["T_STRING","CORE_PATH",385],["T_WHITESPACE"," ",385],".",["T_WHITESPACE"," ",385],["T_CONSTANT_ENCAPSED_STRING","'config\/config.php'",385],";",["T_WHITESPACE","\n            ",385],["T_STATIC","static",386],["T_DOUBLE_COLON","::",386],["T_STRING","write",386],"(",["T_VARIABLE","$config",386],")",";",["T_WHITESPACE","\n        ",386],"}",["T_WHITESPACE","\n\n        ",387],["T_RETURN","return",389],["T_WHITESPACE"," ",389],["T_STATIC","static",389],["T_DOUBLE_COLON","::",389],["T_VARIABLE","$_values",389],"[",["T_CONSTANT_ENCAPSED_STRING","'Cake'",389],"]","[",["T_CONSTANT_ENCAPSED_STRING","'version'",389],"]",";",["T_WHITESPACE","\n    ",389],"}",["T_WHITESPACE","\n\n    ",390],["T_DOC_COMMENT","\/**\n     * Used to write runtime configuration into Cache. Stored runtime configuration can be\n     * restored using `Configure::restore()`. These methods can be used to enable configuration managers\n     * frontends, or other GUI type interfaces for configuration.\n     *\n     * @param string $name The storage name for the saved configuration.\n     * @param string $cacheConfig The cache configuration to save into. Defaults to 'default'\n     * @param array|null $data Either an array of data to store, or leave empty to store all values.\n     * @return bool Success\n     *\/",392],["T_WHITESPACE","\n    ",401],["T_PUBLIC","public",402],["T_WHITESPACE"," ",402],["T_STATIC","static",402],["T_WHITESPACE"," ",402],["T_FUNCTION","function",402],["T_WHITESPACE"," ",402],["T_STRING","store",402],"(",["T_VARIABLE","$name",402],",",["T_WHITESPACE"," ",402],["T_VARIABLE","$cacheConfig",402],["T_WHITESPACE"," ",402],"=",["T_WHITESPACE"," ",402],["T_CONSTANT_ENCAPSED_STRING","'default'",402],",",["T_WHITESPACE"," ",402],["T_VARIABLE","$data",402],["T_WHITESPACE"," ",402],"=",["T_WHITESPACE"," ",402],["T_STRING","null",402],")",["T_WHITESPACE","\n    ",402],"{",["T_WHITESPACE","\n        ",403],["T_IF","if",404],["T_WHITESPACE"," ",404],"(",["T_VARIABLE","$data",404],["T_WHITESPACE"," ",404],["T_IS_IDENTICAL","===",404],["T_WHITESPACE"," ",404],["T_STRING","null",404],")",["T_WHITESPACE"," ",404],"{",["T_WHITESPACE","\n            ",404],["T_VARIABLE","$data",405],["T_WHITESPACE"," ",405],"=",["T_WHITESPACE"," ",405],["T_STATIC","static",405],["T_DOUBLE_COLON","::",405],["T_VARIABLE","$_values",405],";",["T_WHITESPACE","\n        ",405],"}",["T_WHITESPACE","\n\n        ",406],["T_RETURN","return",408],["T_WHITESPACE"," ",408],["T_STRING","Cache",408],["T_DOUBLE_COLON","::",408],["T_STRING","write",408],"(",["T_VARIABLE","$name",408],",",["T_WHITESPACE"," ",408],["T_VARIABLE","$data",408],",",["T_WHITESPACE"," ",408],["T_VARIABLE","$cacheConfig",408],")",";",["T_WHITESPACE","\n    ",408],"}",["T_WHITESPACE","\n\n    ",409],["T_DOC_COMMENT","\/**\n     * Restores configuration data stored in the Cache into configure. Restored\n     * values will overwrite existing ones.\n     *\n     * @param string $name Name of the stored config file to load.\n     * @param string $cacheConfig Name of the Cache configuration to read from.\n     * @return bool Success.\n     *\/",411],["T_WHITESPACE","\n    ",418],["T_PUBLIC","public",419],["T_WHITESPACE"," ",419],["T_STATIC","static",419],["T_WHITESPACE"," ",419],["T_FUNCTION","function",419],["T_WHITESPACE"," ",419],["T_STRING","restore",419],"(",["T_VARIABLE","$name",419],",",["T_WHITESPACE"," ",419],["T_VARIABLE","$cacheConfig",419],["T_WHITESPACE"," ",419],"=",["T_WHITESPACE"," ",419],["T_CONSTANT_ENCAPSED_STRING","'default'",419],")",["T_WHITESPACE","\n    ",419],"{",["T_WHITESPACE","\n        ",420],["T_VARIABLE","$values",421],["T_WHITESPACE"," ",421],"=",["T_WHITESPACE"," ",421],["T_STRING","Cache",421],["T_DOUBLE_COLON","::",421],["T_STRING","read",421],"(",["T_VARIABLE","$name",421],",",["T_WHITESPACE"," ",421],["T_VARIABLE","$cacheConfig",421],")",";",["T_WHITESPACE","\n        ",421],["T_IF","if",422],["T_WHITESPACE"," ",422],"(",["T_VARIABLE","$values",422],")",["T_WHITESPACE"," ",422],"{",["T_WHITESPACE","\n            ",422],["T_RETURN","return",423],["T_WHITESPACE"," ",423],["T_STATIC","static",423],["T_DOUBLE_COLON","::",423],["T_STRING","write",423],"(",["T_VARIABLE","$values",423],")",";",["T_WHITESPACE","\n        ",423],"}",["T_WHITESPACE","\n\n        ",424],["T_RETURN","return",426],["T_WHITESPACE"," ",426],["T_STRING","false",426],";",["T_WHITESPACE","\n    ",426],"}",["T_WHITESPACE","\n\n    ",427],["T_DOC_COMMENT","\/**\n     * Clear all values stored in Configure.\n     *\n     * @return bool success.\n     *\/",429],["T_WHITESPACE","\n    ",433],["T_PUBLIC","public",434],["T_WHITESPACE"," ",434],["T_STATIC","static",434],["T_WHITESPACE"," ",434],["T_FUNCTION","function",434],["T_WHITESPACE"," ",434],["T_STRING","clear",434],"(",")",["T_WHITESPACE","\n    ",434],"{",["T_WHITESPACE","\n        ",435],["T_STATIC","static",436],["T_DOUBLE_COLON","::",436],["T_VARIABLE","$_values",436],["T_WHITESPACE"," ",436],"=",["T_WHITESPACE"," ",436],"[","]",";",["T_WHITESPACE","\n\n        ",436],["T_RETURN","return",438],["T_WHITESPACE"," ",438],["T_STRING","true",438],";",["T_WHITESPACE","\n    ",438],"}",["T_WHITESPACE","\n",439],"}",["T_WHITESPACE","\n",440]]