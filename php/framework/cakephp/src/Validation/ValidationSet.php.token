[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         2.2.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Validation",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","ArrayAccess",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","ArrayIterator",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Countable",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","IteratorAggregate",20],";",["T_WHITESPACE","\n\n",20],["T_DOC_COMMENT","\/**\n * ValidationSet object. Holds all validation rules for a field and exposes\n * methods to dynamically add or remove validation rules\n *\/",22],["T_WHITESPACE","\n",25],["T_CLASS","class",26],["T_WHITESPACE"," ",26],["T_STRING","ValidationSet",26],["T_WHITESPACE"," ",26],["T_IMPLEMENTS","implements",26],["T_WHITESPACE"," ",26],["T_STRING","ArrayAccess",26],",",["T_WHITESPACE"," ",26],["T_STRING","IteratorAggregate",26],",",["T_WHITESPACE"," ",26],["T_STRING","Countable",26],["T_WHITESPACE","\n",26],"{",["T_WHITESPACE","\n\n    ",27],["T_DOC_COMMENT","\/**\n     * Holds the ValidationRule objects\n     *\n     * @var array\n     *\/",29],["T_WHITESPACE","\n    ",33],["T_PROTECTED","protected",34],["T_WHITESPACE"," ",34],["T_VARIABLE","$_rules",34],["T_WHITESPACE"," ",34],"=",["T_WHITESPACE"," ",34],"[","]",";",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Denotes whether the fieldname key must be present in data array\n     *\n     * @var bool|string\n     *\/",36],["T_WHITESPACE","\n    ",40],["T_PROTECTED","protected",41],["T_WHITESPACE"," ",41],["T_VARIABLE","$_validatePresent",41],["T_WHITESPACE"," ",41],"=",["T_WHITESPACE"," ",41],["T_STRING","false",41],";",["T_WHITESPACE","\n\n    ",41],["T_DOC_COMMENT","\/**\n     * Denotes if a field is allowed to be empty\n     *\n     * @var bool|string|callable\n     *\/",43],["T_WHITESPACE","\n    ",47],["T_PROTECTED","protected",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$_allowEmpty",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],["T_STRING","false",48],";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Sets whether a field is required to be present in data array.\n     *\n     * If no argument is passed the currently set `validatePresent` value will be returned.\n     *\n     * @param bool|string|null $validatePresent Valid values are true, false, 'create', 'update'\n     * @return bool|string\n     *\/",50],["T_WHITESPACE","\n    ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","isPresenceRequired",58],"(",["T_VARIABLE","$validatePresent",58],["T_WHITESPACE"," ",58],"=",["T_WHITESPACE"," ",58],["T_STRING","null",58],")",["T_WHITESPACE","\n    ",58],"{",["T_WHITESPACE","\n        ",59],["T_IF","if",60],["T_WHITESPACE"," ",60],"(",["T_VARIABLE","$validatePresent",60],["T_WHITESPACE"," ",60],["T_IS_IDENTICAL","===",60],["T_WHITESPACE"," ",60],["T_STRING","null",60],")",["T_WHITESPACE"," ",60],"{",["T_WHITESPACE","\n            ",60],["T_RETURN","return",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$this",61],["T_OBJECT_OPERATOR","->",61],["T_STRING","_validatePresent",61],";",["T_WHITESPACE","\n        ",61],"}",["T_WHITESPACE","\n\n        ",62],["T_RETURN","return",64],["T_WHITESPACE"," ",64],["T_VARIABLE","$this",64],["T_OBJECT_OPERATOR","->",64],["T_STRING","_validatePresent",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_VARIABLE","$validatePresent",64],";",["T_WHITESPACE","\n    ",64],"}",["T_WHITESPACE","\n\n    ",65],["T_DOC_COMMENT","\/**\n     * Sets whether a field value is allowed to be empty\n     *\n     * If no argument is passed the currently set `allowEmpty` value will be returned.\n     *\n     * @param bool|string|callable|null $allowEmpty Valid values are true, false,\n     * 'create', 'update'\n     * @return bool|string|callable\n     *\/",67],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","isEmptyAllowed",76],"(",["T_VARIABLE","$allowEmpty",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_STRING","null",76],")",["T_WHITESPACE","\n    ",76],"{",["T_WHITESPACE","\n        ",77],["T_IF","if",78],["T_WHITESPACE"," ",78],"(",["T_VARIABLE","$allowEmpty",78],["T_WHITESPACE"," ",78],["T_IS_IDENTICAL","===",78],["T_WHITESPACE"," ",78],["T_STRING","null",78],")",["T_WHITESPACE"," ",78],"{",["T_WHITESPACE","\n            ",78],["T_RETURN","return",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$this",79],["T_OBJECT_OPERATOR","->",79],["T_STRING","_allowEmpty",79],";",["T_WHITESPACE","\n        ",79],"}",["T_WHITESPACE","\n\n        ",80],["T_RETURN","return",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$this",82],["T_OBJECT_OPERATOR","->",82],["T_STRING","_allowEmpty",82],["T_WHITESPACE"," ",82],"=",["T_WHITESPACE"," ",82],["T_VARIABLE","$allowEmpty",82],";",["T_WHITESPACE","\n    ",82],"}",["T_WHITESPACE","\n\n    ",83],["T_DOC_COMMENT","\/**\n     * Gets a rule for a given name if exists\n     *\n     * @param string $name The name under which the rule is set.\n     * @return \\Cake\\Validation\\ValidationRule\n     *\/",85],["T_WHITESPACE","\n    ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","rule",91],"(",["T_VARIABLE","$name",91],")",["T_WHITESPACE","\n    ",91],"{",["T_WHITESPACE","\n        ",92],["T_IF","if",93],["T_WHITESPACE"," ",93],"(","!",["T_EMPTY","empty",93],"(",["T_VARIABLE","$this",93],["T_OBJECT_OPERATOR","->",93],["T_STRING","_rules",93],"[",["T_VARIABLE","$name",93],"]",")",")",["T_WHITESPACE"," ",93],"{",["T_WHITESPACE","\n            ",93],["T_RETURN","return",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$this",94],["T_OBJECT_OPERATOR","->",94],["T_STRING","_rules",94],"[",["T_VARIABLE","$name",94],"]",";",["T_WHITESPACE","\n        ",94],"}",["T_WHITESPACE","\n    ",95],"}",["T_WHITESPACE","\n\n    ",96],["T_DOC_COMMENT","\/**\n     * Returns all rules for this validation set\n     *\n     * @return array\n     *\/",98],["T_WHITESPACE","\n    ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","rules",103],"(",")",["T_WHITESPACE","\n    ",103],"{",["T_WHITESPACE","\n        ",104],["T_RETURN","return",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$this",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","_rules",105],";",["T_WHITESPACE","\n    ",105],"}",["T_WHITESPACE","\n\n    ",106],["T_DOC_COMMENT","\/**\n     * Sets a ValidationRule $rule with a $name\n     *\n     * ### Example:\n     *\n     * ```\n     *      $set\n     *          ->add('notBlank', ['rule' => 'notBlank'])\n     *          ->add('inRange', ['rule' => ['between', 4, 10])\n     * ```\n     *\n     * @param string $name The name under which the rule should be set\n     * @param \\Cake\\Validation\\ValidationRule|array $rule The validation rule to be set\n     * @return $this\n     *\/",108],["T_WHITESPACE","\n    ",122],["T_PUBLIC","public",123],["T_WHITESPACE"," ",123],["T_FUNCTION","function",123],["T_WHITESPACE"," ",123],["T_STRING","add",123],"(",["T_VARIABLE","$name",123],",",["T_WHITESPACE"," ",123],["T_VARIABLE","$rule",123],")",["T_WHITESPACE","\n    ",123],"{",["T_WHITESPACE","\n        ",124],["T_IF","if",125],["T_WHITESPACE"," ",125],"(","!","(",["T_VARIABLE","$rule",125],["T_WHITESPACE"," ",125],["T_INSTANCEOF","instanceof",125],["T_WHITESPACE"," ",125],["T_STRING","ValidationRule",125],")",")",["T_WHITESPACE"," ",125],"{",["T_WHITESPACE","\n            ",125],["T_VARIABLE","$rule",126],["T_WHITESPACE"," ",126],"=",["T_WHITESPACE"," ",126],["T_NEW","new",126],["T_WHITESPACE"," ",126],["T_STRING","ValidationRule",126],"(",["T_VARIABLE","$rule",126],")",";",["T_WHITESPACE","\n        ",126],"}",["T_WHITESPACE","\n        ",127],["T_VARIABLE","$this",128],["T_OBJECT_OPERATOR","->",128],["T_STRING","_rules",128],"[",["T_VARIABLE","$name",128],"]",["T_WHITESPACE"," ",128],"=",["T_WHITESPACE"," ",128],["T_VARIABLE","$rule",128],";",["T_WHITESPACE","\n\n        ",128],["T_RETURN","return",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$this",130],";",["T_WHITESPACE","\n    ",130],"}",["T_WHITESPACE","\n\n    ",131],["T_DOC_COMMENT","\/**\n     * Removes a validation rule from the set\n     *\n     * ### Example:\n     *\n     * ```\n     *      $set\n     *          ->remove('notBlank')\n     *          ->remove('inRange')\n     * ```\n     *\n     * @param string $name The name under which the rule should be unset\n     * @return $this\n     *\/",133],["T_WHITESPACE","\n    ",146],["T_PUBLIC","public",147],["T_WHITESPACE"," ",147],["T_FUNCTION","function",147],["T_WHITESPACE"," ",147],["T_STRING","remove",147],"(",["T_VARIABLE","$name",147],")",["T_WHITESPACE","\n    ",147],"{",["T_WHITESPACE","\n        ",148],["T_UNSET","unset",149],"(",["T_VARIABLE","$this",149],["T_OBJECT_OPERATOR","->",149],["T_STRING","_rules",149],"[",["T_VARIABLE","$name",149],"]",")",";",["T_WHITESPACE","\n\n        ",149],["T_RETURN","return",151],["T_WHITESPACE"," ",151],["T_VARIABLE","$this",151],";",["T_WHITESPACE","\n    ",151],"}",["T_WHITESPACE","\n\n    ",152],["T_DOC_COMMENT","\/**\n     * Returns whether an index exists in the rule set\n     *\n     * @param string $index name of the rule\n     * @return bool\n     *\/",154],["T_WHITESPACE","\n    ",159],["T_PUBLIC","public",160],["T_WHITESPACE"," ",160],["T_FUNCTION","function",160],["T_WHITESPACE"," ",160],["T_STRING","offsetExists",160],"(",["T_VARIABLE","$index",160],")",["T_WHITESPACE","\n    ",160],"{",["T_WHITESPACE","\n        ",161],["T_RETURN","return",162],["T_WHITESPACE"," ",162],["T_ISSET","isset",162],"(",["T_VARIABLE","$this",162],["T_OBJECT_OPERATOR","->",162],["T_STRING","_rules",162],"[",["T_VARIABLE","$index",162],"]",")",";",["T_WHITESPACE","\n    ",162],"}",["T_WHITESPACE","\n\n    ",163],["T_DOC_COMMENT","\/**\n     * Returns a rule object by its index\n     *\n     * @param string $index name of the rule\n     * @return \\Cake\\Validation\\ValidationRule\n     *\/",165],["T_WHITESPACE","\n    ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","offsetGet",171],"(",["T_VARIABLE","$index",171],")",["T_WHITESPACE","\n    ",171],"{",["T_WHITESPACE","\n        ",172],["T_RETURN","return",173],["T_WHITESPACE"," ",173],["T_VARIABLE","$this",173],["T_OBJECT_OPERATOR","->",173],["T_STRING","_rules",173],"[",["T_VARIABLE","$index",173],"]",";",["T_WHITESPACE","\n    ",173],"}",["T_WHITESPACE","\n\n    ",174],["T_DOC_COMMENT","\/**\n     * Sets or replace a validation rule\n     *\n     * @param string $index name of the rule\n     * @param \\Cake\\Validation\\ValidationRule|array $rule Rule to add to $index\n     * @return void\n     *\/",176],["T_WHITESPACE","\n    ",182],["T_PUBLIC","public",183],["T_WHITESPACE"," ",183],["T_FUNCTION","function",183],["T_WHITESPACE"," ",183],["T_STRING","offsetSet",183],"(",["T_VARIABLE","$index",183],",",["T_WHITESPACE"," ",183],["T_VARIABLE","$rule",183],")",["T_WHITESPACE","\n    ",183],"{",["T_WHITESPACE","\n        ",184],["T_VARIABLE","$this",185],["T_OBJECT_OPERATOR","->",185],["T_STRING","add",185],"(",["T_VARIABLE","$index",185],",",["T_WHITESPACE"," ",185],["T_VARIABLE","$rule",185],")",";",["T_WHITESPACE","\n    ",185],"}",["T_WHITESPACE","\n\n    ",186],["T_DOC_COMMENT","\/**\n     * Unsets a validation rule\n     *\n     * @param string $index name of the rule\n     * @return void\n     *\/",188],["T_WHITESPACE","\n    ",193],["T_PUBLIC","public",194],["T_WHITESPACE"," ",194],["T_FUNCTION","function",194],["T_WHITESPACE"," ",194],["T_STRING","offsetUnset",194],"(",["T_VARIABLE","$index",194],")",["T_WHITESPACE","\n    ",194],"{",["T_WHITESPACE","\n        ",195],["T_UNSET","unset",196],"(",["T_VARIABLE","$this",196],["T_OBJECT_OPERATOR","->",196],["T_STRING","_rules",196],"[",["T_VARIABLE","$index",196],"]",")",";",["T_WHITESPACE","\n    ",196],"}",["T_WHITESPACE","\n\n    ",197],["T_DOC_COMMENT","\/**\n     * Returns an iterator for each of the rules to be applied\n     *\n     * @return \\ArrayIterator\n     *\/",199],["T_WHITESPACE","\n    ",203],["T_PUBLIC","public",204],["T_WHITESPACE"," ",204],["T_FUNCTION","function",204],["T_WHITESPACE"," ",204],["T_STRING","getIterator",204],"(",")",["T_WHITESPACE","\n    ",204],"{",["T_WHITESPACE","\n        ",205],["T_RETURN","return",206],["T_WHITESPACE"," ",206],["T_NEW","new",206],["T_WHITESPACE"," ",206],["T_STRING","ArrayIterator",206],"(",["T_VARIABLE","$this",206],["T_OBJECT_OPERATOR","->",206],["T_STRING","_rules",206],")",";",["T_WHITESPACE","\n    ",206],"}",["T_WHITESPACE","\n\n    ",207],["T_DOC_COMMENT","\/**\n     * Returns the number of rules in this set\n     *\n     * @return int\n     *\/",209],["T_WHITESPACE","\n    ",213],["T_PUBLIC","public",214],["T_WHITESPACE"," ",214],["T_FUNCTION","function",214],["T_WHITESPACE"," ",214],["T_STRING","count",214],"(",")",["T_WHITESPACE","\n    ",214],"{",["T_WHITESPACE","\n        ",215],["T_RETURN","return",216],["T_WHITESPACE"," ",216],["T_STRING","count",216],"(",["T_VARIABLE","$this",216],["T_OBJECT_OPERATOR","->",216],["T_STRING","_rules",216],")",";",["T_WHITESPACE","\n    ",216],"}",["T_WHITESPACE","\n",217],"}",["T_WHITESPACE","\n",218]]