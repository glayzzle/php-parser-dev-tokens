[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.3\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Validation",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Event",17],["T_NS_SEPARATOR","\\",17],["T_STRING","EventDispatcherInterface",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","RuntimeException",18],";",["T_WHITESPACE","\n\n",18],["T_DOC_COMMENT","\/**\n * A trait that provides methods for building and\n * interacting with Validators.\n *\n * This trait is useful when building ORM like features where\n * the implementing class wants to build and customize a variety\n * of validator instances.\n *\n * This trait expects that classes including it define two constants:\n *\n * - `DEFAULT_VALIDATOR` - The default validator name.\n * - `VALIDATOR_PROVIDER_NAME ` - The provider name the including class is assigned\n *   in validators.\n *\n * If the including class also implements events the `Model.buildValidator` event\n * will be triggered when validators are created.\n *\/",20],["T_WHITESPACE","\n",36],["T_TRAIT","trait",37],["T_WHITESPACE"," ",37],["T_STRING","ValidatorAwareTrait",37],["T_WHITESPACE","\n",37],"{",["T_WHITESPACE","\n\n    ",38],["T_DOC_COMMENT","\/**\n     * Validator class.\n     *\n     * @var string\n     *\/",40],["T_WHITESPACE","\n    ",44],["T_PROTECTED","protected",45],["T_WHITESPACE"," ",45],["T_VARIABLE","$_validatorClass",45],["T_WHITESPACE"," ",45],"=",["T_WHITESPACE"," ",45],["T_CONSTANT_ENCAPSED_STRING","'\\Cake\\Validation\\Validator'",45],";",["T_WHITESPACE","\n\n    ",45],["T_DOC_COMMENT","\/**\n     * A list of validation objects indexed by name\n     *\n     * @var array\n     *\/",47],["T_WHITESPACE","\n    ",51],["T_PROTECTED","protected",52],["T_WHITESPACE"," ",52],["T_VARIABLE","$_validators",52],["T_WHITESPACE"," ",52],"=",["T_WHITESPACE"," ",52],"[","]",";",["T_WHITESPACE","\n\n    ",52],["T_DOC_COMMENT","\/**\n     * Returns the validation rules tagged with $name. It is possible to have\n     * multiple different named validation sets, this is useful when you need\n     * to use varying rules when saving from different routines in your system.\n     *\n     * There are two different ways of creating and naming validation sets: by\n     * creating a new method inside your own Table subclass, or by building\n     * the validator object yourself and storing it using this method.\n     *\n     * For example, if you wish to create a validation set called 'forSubscription',\n     * you will need to create a method in your Table subclass as follows:\n     *\n     * ```\n     * public function validationForSubscription($validator)\n     * {\n     *  return $validator\n     *  ->add('email', 'valid-email', ['rule' => 'email'])\n     *  ->add('password', 'valid', ['rule' => 'notBlank'])\n     *  ->requirePresence('username');\n     * }\n     * ```\n     *\n     * Otherwise, you can build the object by yourself and store it in the Table object:\n     *\n     * ```\n     * $validator = new \\Cake\\Validation\\Validator($table);\n     * $validator\n     *  ->add('email', 'valid-email', ['rule' => 'email'])\n     *  ->add('password', 'valid', ['rule' => 'notBlank'])\n     *  ->allowEmpty('bio');\n     * $table->validator('forSubscription', $validator);\n     * ```\n     *\n     * You can implement the method in `validationDefault` in your Table subclass\n     * should you wish to have a validation set that applies in cases where no other\n     * set is specified.\n     *\n     * @param string|null $name the name of the validation set to return\n     * @param \\Cake\\Validation\\Validator|null $validator The validator instance to store,\n     *   use null to get a validator.\n     * @return \\Cake\\Validation\\Validator\n     * @throws \\RuntimeException\n     *\/",54],["T_WHITESPACE","\n    ",96],["T_PUBLIC","public",97],["T_WHITESPACE"," ",97],["T_FUNCTION","function",97],["T_WHITESPACE"," ",97],["T_STRING","validator",97],"(",["T_VARIABLE","$name",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","null",97],",",["T_WHITESPACE"," ",97],["T_STRING","Validator",97],["T_WHITESPACE"," ",97],["T_VARIABLE","$validator",97],["T_WHITESPACE"," ",97],"=",["T_WHITESPACE"," ",97],["T_STRING","null",97],")",["T_WHITESPACE","\n    ",97],"{",["T_WHITESPACE","\n        ",98],["T_IF","if",99],["T_WHITESPACE"," ",99],"(",["T_VARIABLE","$name",99],["T_WHITESPACE"," ",99],["T_IS_IDENTICAL","===",99],["T_WHITESPACE"," ",99],["T_STRING","null",99],")",["T_WHITESPACE"," ",99],"{",["T_WHITESPACE","\n            ",99],["T_VARIABLE","$name",100],["T_WHITESPACE"," ",100],"=",["T_WHITESPACE"," ",100],["T_STRING","self",100],["T_DOUBLE_COLON","::",100],["T_STRING","DEFAULT_VALIDATOR",100],";",["T_WHITESPACE","\n        ",100],"}",["T_WHITESPACE","\n        ",101],["T_IF","if",102],["T_WHITESPACE"," ",102],"(",["T_VARIABLE","$validator",102],["T_WHITESPACE"," ",102],["T_IS_IDENTICAL","===",102],["T_WHITESPACE"," ",102],["T_STRING","null",102],["T_WHITESPACE"," ",102],["T_BOOLEAN_AND","&&",102],["T_WHITESPACE"," ",102],["T_ISSET","isset",102],"(",["T_VARIABLE","$this",102],["T_OBJECT_OPERATOR","->",102],["T_STRING","_validators",102],"[",["T_VARIABLE","$name",102],"]",")",")",["T_WHITESPACE"," ",102],"{",["T_WHITESPACE","\n            ",102],["T_RETURN","return",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$this",103],["T_OBJECT_OPERATOR","->",103],["T_STRING","_validators",103],"[",["T_VARIABLE","$name",103],"]",";",["T_WHITESPACE","\n        ",103],"}",["T_WHITESPACE","\n\n        ",104],["T_IF","if",106],["T_WHITESPACE"," ",106],"(",["T_VARIABLE","$validator",106],["T_WHITESPACE"," ",106],["T_IS_IDENTICAL","===",106],["T_WHITESPACE"," ",106],["T_STRING","null",106],")",["T_WHITESPACE"," ",106],"{",["T_WHITESPACE","\n            ",106],["T_VARIABLE","$validator",107],["T_WHITESPACE"," ",107],"=",["T_WHITESPACE"," ",107],["T_NEW","new",107],["T_WHITESPACE"," ",107],["T_VARIABLE","$this",107],["T_OBJECT_OPERATOR","->",107],["T_STRING","_validatorClass",107],";",["T_WHITESPACE","\n            ",107],["T_VARIABLE","$validator",108],["T_WHITESPACE"," ",108],"=",["T_WHITESPACE"," ",108],["T_VARIABLE","$this",108],["T_OBJECT_OPERATOR","->",108],"{",["T_CONSTANT_ENCAPSED_STRING","'validation'",108],["T_WHITESPACE"," ",108],".",["T_WHITESPACE"," ",108],["T_STRING","ucfirst",108],"(",["T_VARIABLE","$name",108],")","}","(",["T_VARIABLE","$validator",108],")",";",["T_WHITESPACE","\n            ",108],["T_IF","if",109],["T_WHITESPACE"," ",109],"(",["T_VARIABLE","$this",109],["T_WHITESPACE"," ",109],["T_INSTANCEOF","instanceof",109],["T_WHITESPACE"," ",109],["T_STRING","EventDispatcherInterface",109],")",["T_WHITESPACE"," ",109],"{",["T_WHITESPACE","\n                ",109],["T_VARIABLE","$this",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","dispatchEvent",110],"(",["T_CONSTANT_ENCAPSED_STRING","'Model.buildValidator'",110],",",["T_WHITESPACE"," ",110],["T_STRING","compact",110],"(",["T_CONSTANT_ENCAPSED_STRING","'validator'",110],",",["T_WHITESPACE"," ",110],["T_CONSTANT_ENCAPSED_STRING","'name'",110],")",")",";",["T_WHITESPACE","\n            ",110],"}",["T_WHITESPACE","\n\n            ",111],["T_IF","if",113],["T_WHITESPACE"," ",113],"(","!",["T_VARIABLE","$validator",113],["T_WHITESPACE"," ",113],["T_INSTANCEOF","instanceof",113],["T_WHITESPACE"," ",113],["T_STRING","Validator",113],")",["T_WHITESPACE"," ",113],"{",["T_WHITESPACE","\n                ",113],["T_THROW","throw",114],["T_WHITESPACE"," ",114],["T_NEW","new",114],["T_WHITESPACE"," ",114],["T_STRING","RuntimeException",114],"(",["T_STRING","sprintf",114],"(",["T_CONSTANT_ENCAPSED_STRING","'The %s::%s() validation method must return an instance of %s.'",114],",",["T_WHITESPACE"," ",114],["T_CLASS_C","__CLASS__",114],",",["T_WHITESPACE"," ",114],["T_CONSTANT_ENCAPSED_STRING","'validation'",114],["T_WHITESPACE"," ",114],".",["T_WHITESPACE"," ",114],["T_STRING","ucfirst",114],"(",["T_VARIABLE","$name",114],")",",",["T_WHITESPACE"," ",114],["T_STRING","Validator",114],["T_DOUBLE_COLON","::",114],["T_CLASS","class",114],")",")",";",["T_WHITESPACE","\n            ",114],"}",["T_WHITESPACE","\n        ",115],"}",["T_WHITESPACE","\n\n        ",116],["T_VARIABLE","$validator",118],["T_OBJECT_OPERATOR","->",118],["T_STRING","provider",118],"(",["T_STRING","self",118],["T_DOUBLE_COLON","::",118],["T_STRING","VALIDATOR_PROVIDER_NAME",118],",",["T_WHITESPACE"," ",118],["T_VARIABLE","$this",118],")",";",["T_WHITESPACE","\n\n        ",118],["T_RETURN","return",120],["T_WHITESPACE"," ",120],["T_VARIABLE","$this",120],["T_OBJECT_OPERATOR","->",120],["T_STRING","_validators",120],"[",["T_VARIABLE","$name",120],"]",["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_VARIABLE","$validator",120],";",["T_WHITESPACE","\n    ",120],"}",["T_WHITESPACE","\n\n    ",121],["T_DOC_COMMENT","\/**\n     * Returns the default validator object. Subclasses can override this function\n     * to add a default validation set to the validator object.\n     *\n     * @param \\Cake\\Validation\\Validator $validator The validator that can be modified to\n     * add some rules to it.\n     * @return \\Cake\\Validation\\Validator\n     *\/",123],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","validationDefault",131],"(",["T_STRING","Validator",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$validator",131],")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_RETURN","return",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$validator",133],";",["T_WHITESPACE","\n    ",133],"}",["T_WHITESPACE","\n",134],"}",["T_WHITESPACE","\n",135]]