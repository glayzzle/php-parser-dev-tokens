[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ORM",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Core",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Exception",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Exception",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Core",18],["T_NS_SEPARATOR","\\",18],["T_STRING","InstanceConfigTrait",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Event",19],["T_NS_SEPARATOR","\\",19],["T_STRING","EventListenerInterface",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","ReflectionClass",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","ReflectionMethod",21],";",["T_WHITESPACE","\n\n",21],["T_DOC_COMMENT","\/**\n * Base class for behaviors.\n *\n * Behaviors allow you to simulate mixins, and create\n * reusable blocks of application logic, that can be reused across\n * several models. Behaviors also provide a way to hook into model\n * callbacks and augment their behavior.\n *\n * ### Mixin methods\n *\n * Behaviors can provide mixin like features by declaring public\n * methods. These methods will be accessible on the tables the\n * behavior has been added to.\n *\n * ```\n * function doSomething($arg1, $arg2) {\n *   \/\/ do something\n * }\n * ```\n *\n * Would be called like `$table->doSomething($arg1, $arg2);`.\n *\n * ### Callback methods\n *\n * Behaviors can listen to any events fired on a Table. By default\n * CakePHP provides a number of lifecycle events your behaviors can\n * listen to:\n *\n * - `beforeFind(Event $event, Query $query, ArrayObject $options, boolean $primary)`\n *   Fired before each find operation. By stopping the event and supplying a\n *   return value you can bypass the find operation entirely. Any changes done\n *   to the $query instance will be retained for the rest of the find. The\n *   $primary parameter indicates whether or not this is the root query,\n *   or an associated query.\n *\n * - `buildValidator(Event $event, Validator $validator, string $name)`\n *   Fired when the validator object identified by $name is being built. You can use this\n *   callback to add validation rules or add validation providers.\n *\n * - `buildRules(Event $event, RulesChecker $rules)`\n *   Fired when the rules checking object for the table is being built. You can use this\n *   callback to add more rules to the set.\n *\n * - `beforeRules(Event $event, EntityInterface $entity, ArrayObject $options, $operation)`\n *   Fired before an entity is validated using by a rules checker. By stopping this event,\n *   you can return the final value of the rules checking operation.\n *\n * - `afterRules(Event $event, EntityInterface $entity, ArrayObject $options, bool $result, $operation)`\n *   Fired after the rules have been checked on the entity. By stopping this event,\n *   you can return the final value of the rules checking operation.\n *\n * - `beforeSave(Event $event, EntityInterface $entity, ArrayObject $options)`\n *   Fired before each entity is saved. Stopping this event will abort the save\n *   operation. When the event is stopped the result of the event will be returned.\n *\n * - `afterSave(Event $event, EntityInterface $entity, ArrayObject $options)`\n *   Fired after an entity is saved.\n *\n * - `beforeDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\n *   Fired before an entity is deleted. By stopping this event you will abort\n *   the delete operation.\n *\n * - `afterDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\n *   Fired after an entity has been deleted.\n *\n * In addition to the core events, behaviors can respond to any\n * event fired from your Table classes including custom application\n * specific ones.\n *\n * You can set the priority of a behaviors callbacks by using the\n * `priority` setting when attaching a behavior. This will set the\n * priority for all the callbacks a behavior provides.\n *\n * ### Finder methods\n *\n * Behaviors can provide finder methods that hook into a Table's\n * find() method. Custom finders are a great way to provide preset\n * queries that relate to your behavior. For example a SluggableBehavior\n * could provide a find('slugged') finder. Behavior finders\n * are implemented the same as other finders. Any method\n * starting with `find` will be setup as a finder. Your finder\n * methods should expect the following arguments:\n *\n * ```\n * findSlugged(Query $query, array $options)\n * ```\n *\n * @see \\Cake\\ORM\\Table::addBehavior()\n * @see \\Cake\\Event\\EventManager\n *\/",23],["T_WHITESPACE","\n",112],["T_CLASS","class",113],["T_WHITESPACE"," ",113],["T_STRING","Behavior",113],["T_WHITESPACE"," ",113],["T_IMPLEMENTS","implements",113],["T_WHITESPACE"," ",113],["T_STRING","EventListenerInterface",113],["T_WHITESPACE","\n",113],"{",["T_WHITESPACE","\n\n    ",114],["T_USE","use",116],["T_WHITESPACE"," ",116],["T_STRING","InstanceConfigTrait",116],";",["T_WHITESPACE","\n\n    ",116],["T_DOC_COMMENT","\/**\n     * Table instance.\n     *\n     * @var \\Cake\\ORM\\Table\n     *\/",118],["T_WHITESPACE","\n    ",122],["T_PROTECTED","protected",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$_table",123],";",["T_WHITESPACE","\n\n    ",123],["T_DOC_COMMENT","\/**\n     * Reflection method cache for behaviors.\n     *\n     * Stores the reflected method + finder methods per class.\n     * This prevents reflecting the same class multiple times in a single process.\n     *\n     * @var array\n     *\/",125],["T_WHITESPACE","\n    ",132],["T_PROTECTED","protected",133],["T_WHITESPACE"," ",133],["T_STATIC","static",133],["T_WHITESPACE"," ",133],["T_VARIABLE","$_reflectionCache",133],["T_WHITESPACE"," ",133],"=",["T_WHITESPACE"," ",133],"[","]",";",["T_WHITESPACE","\n\n    ",133],["T_DOC_COMMENT","\/**\n     * Default configuration\n     *\n     * These are merged with user-provided configuration when the behavior is used.\n     *\n     * @var array\n     *\/",135],["T_WHITESPACE","\n    ",141],["T_PROTECTED","protected",142],["T_WHITESPACE"," ",142],["T_VARIABLE","$_defaultConfig",142],["T_WHITESPACE"," ",142],"=",["T_WHITESPACE"," ",142],"[","]",";",["T_WHITESPACE","\n\n    ",142],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * Merges config with the default and store in the config property\n     *\n     * @param \\Cake\\ORM\\Table $table The table this behavior is attached to.\n     * @param array $config The config for this behavior.\n     *\/",144],["T_WHITESPACE","\n    ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","__construct",152],"(",["T_STRING","Table",152],["T_WHITESPACE"," ",152],["T_VARIABLE","$table",152],",",["T_WHITESPACE"," ",152],["T_ARRAY","array",152],["T_WHITESPACE"," ",152],["T_VARIABLE","$config",152],["T_WHITESPACE"," ",152],"=",["T_WHITESPACE"," ",152],"[","]",")",["T_WHITESPACE","\n    ",152],"{",["T_WHITESPACE","\n        ",153],["T_VARIABLE","$config",154],["T_WHITESPACE"," ",154],"=",["T_WHITESPACE"," ",154],["T_VARIABLE","$this",154],["T_OBJECT_OPERATOR","->",154],["T_STRING","_resolveMethodAliases",154],"(",["T_WHITESPACE","\n            ",154],["T_CONSTANT_ENCAPSED_STRING","'implementedFinders'",155],",",["T_WHITESPACE","\n            ",155],["T_VARIABLE","$this",156],["T_OBJECT_OPERATOR","->",156],["T_STRING","_defaultConfig",156],",",["T_WHITESPACE","\n            ",156],["T_VARIABLE","$config",157],["T_WHITESPACE","\n        ",157],")",";",["T_WHITESPACE","\n        ",158],["T_VARIABLE","$config",159],["T_WHITESPACE"," ",159],"=",["T_WHITESPACE"," ",159],["T_VARIABLE","$this",159],["T_OBJECT_OPERATOR","->",159],["T_STRING","_resolveMethodAliases",159],"(",["T_WHITESPACE","\n            ",159],["T_CONSTANT_ENCAPSED_STRING","'implementedMethods'",160],",",["T_WHITESPACE","\n            ",160],["T_VARIABLE","$this",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","_defaultConfig",161],",",["T_WHITESPACE","\n            ",161],["T_VARIABLE","$config",162],["T_WHITESPACE","\n        ",162],")",";",["T_WHITESPACE","\n        ",163],["T_VARIABLE","$this",164],["T_OBJECT_OPERATOR","->",164],["T_STRING","_table",164],["T_WHITESPACE"," ",164],"=",["T_WHITESPACE"," ",164],["T_VARIABLE","$table",164],";",["T_WHITESPACE","\n        ",164],["T_VARIABLE","$this",165],["T_OBJECT_OPERATOR","->",165],["T_STRING","config",165],"(",["T_VARIABLE","$config",165],")",";",["T_WHITESPACE","\n        ",165],["T_VARIABLE","$this",166],["T_OBJECT_OPERATOR","->",166],["T_STRING","initialize",166],"(",["T_VARIABLE","$config",166],")",";",["T_WHITESPACE","\n    ",166],"}",["T_WHITESPACE","\n\n    ",167],["T_DOC_COMMENT","\/**\n     * Constructor hook method.\n     *\n     * Implement this method to avoid having to overwrite\n     * the constructor and call parent.\n     *\n     * @param array $config The configuration settings provided to this behavior.\n     * @return void\n     *\/",169],["T_WHITESPACE","\n    ",177],["T_PUBLIC","public",178],["T_WHITESPACE"," ",178],["T_FUNCTION","function",178],["T_WHITESPACE"," ",178],["T_STRING","initialize",178],"(",["T_ARRAY","array",178],["T_WHITESPACE"," ",178],["T_VARIABLE","$config",178],")",["T_WHITESPACE","\n    ",178],"{",["T_WHITESPACE","\n    ",179],"}",["T_WHITESPACE","\n\n    ",180],["T_DOC_COMMENT","\/**\n     * Removes aliased methods that would otherwise be duplicated by userland configuration.\n     *\n     * @param string $key The key to filter.\n     * @param array $defaults The default method mappings.\n     * @param array $config The customized method mappings.\n     * @return array A de-duped list of config data.\n     *\/",182],["T_WHITESPACE","\n    ",189],["T_PROTECTED","protected",190],["T_WHITESPACE"," ",190],["T_FUNCTION","function",190],["T_WHITESPACE"," ",190],["T_STRING","_resolveMethodAliases",190],"(",["T_VARIABLE","$key",190],",",["T_WHITESPACE"," ",190],["T_VARIABLE","$defaults",190],",",["T_WHITESPACE"," ",190],["T_VARIABLE","$config",190],")",["T_WHITESPACE","\n    ",190],"{",["T_WHITESPACE","\n        ",191],["T_IF","if",192],["T_WHITESPACE"," ",192],"(","!",["T_ISSET","isset",192],"(",["T_VARIABLE","$defaults",192],"[",["T_VARIABLE","$key",192],"]",",",["T_WHITESPACE"," ",192],["T_VARIABLE","$config",192],"[",["T_VARIABLE","$key",192],"]",")",")",["T_WHITESPACE"," ",192],"{",["T_WHITESPACE","\n            ",192],["T_RETURN","return",193],["T_WHITESPACE"," ",193],["T_VARIABLE","$config",193],";",["T_WHITESPACE","\n        ",193],"}",["T_WHITESPACE","\n        ",194],["T_IF","if",195],["T_WHITESPACE"," ",195],"(",["T_ISSET","isset",195],"(",["T_VARIABLE","$config",195],"[",["T_VARIABLE","$key",195],"]",")",["T_WHITESPACE"," ",195],["T_BOOLEAN_AND","&&",195],["T_WHITESPACE"," ",195],["T_VARIABLE","$config",195],"[",["T_VARIABLE","$key",195],"]",["T_WHITESPACE"," ",195],["T_IS_IDENTICAL","===",195],["T_WHITESPACE"," ",195],"[","]",")",["T_WHITESPACE"," ",195],"{",["T_WHITESPACE","\n            ",195],["T_VARIABLE","$this",196],["T_OBJECT_OPERATOR","->",196],["T_STRING","config",196],"(",["T_VARIABLE","$key",196],",",["T_WHITESPACE"," ",196],"[","]",",",["T_WHITESPACE"," ",196],["T_STRING","false",196],")",";",["T_WHITESPACE","\n            ",196],["T_UNSET","unset",197],"(",["T_VARIABLE","$config",197],"[",["T_VARIABLE","$key",197],"]",")",";",["T_WHITESPACE","\n\n            ",197],["T_RETURN","return",199],["T_WHITESPACE"," ",199],["T_VARIABLE","$config",199],";",["T_WHITESPACE","\n        ",199],"}",["T_WHITESPACE","\n\n        ",200],["T_VARIABLE","$indexed",202],["T_WHITESPACE"," ",202],"=",["T_WHITESPACE"," ",202],["T_STRING","array_flip",202],"(",["T_VARIABLE","$defaults",202],"[",["T_VARIABLE","$key",202],"]",")",";",["T_WHITESPACE","\n        ",202],["T_VARIABLE","$indexedCustom",203],["T_WHITESPACE"," ",203],"=",["T_WHITESPACE"," ",203],["T_STRING","array_flip",203],"(",["T_VARIABLE","$config",203],"[",["T_VARIABLE","$key",203],"]",")",";",["T_WHITESPACE","\n        ",203],["T_FOREACH","foreach",204],["T_WHITESPACE"," ",204],"(",["T_VARIABLE","$indexed",204],["T_WHITESPACE"," ",204],["T_AS","as",204],["T_WHITESPACE"," ",204],["T_VARIABLE","$method",204],["T_WHITESPACE"," ",204],["T_DOUBLE_ARROW","=>",204],["T_WHITESPACE"," ",204],["T_VARIABLE","$alias",204],")",["T_WHITESPACE"," ",204],"{",["T_WHITESPACE","\n            ",204],["T_IF","if",205],["T_WHITESPACE"," ",205],"(","!",["T_ISSET","isset",205],"(",["T_VARIABLE","$indexedCustom",205],"[",["T_VARIABLE","$method",205],"]",")",")",["T_WHITESPACE"," ",205],"{",["T_WHITESPACE","\n                ",205],["T_VARIABLE","$indexedCustom",206],"[",["T_VARIABLE","$method",206],"]",["T_WHITESPACE"," ",206],"=",["T_WHITESPACE"," ",206],["T_VARIABLE","$alias",206],";",["T_WHITESPACE","\n            ",206],"}",["T_WHITESPACE","\n        ",207],"}",["T_WHITESPACE","\n        ",208],["T_VARIABLE","$this",209],["T_OBJECT_OPERATOR","->",209],["T_STRING","config",209],"(",["T_VARIABLE","$key",209],",",["T_WHITESPACE"," ",209],["T_STRING","array_flip",209],"(",["T_VARIABLE","$indexedCustom",209],")",",",["T_WHITESPACE"," ",209],["T_STRING","false",209],")",";",["T_WHITESPACE","\n        ",209],["T_UNSET","unset",210],"(",["T_VARIABLE","$config",210],"[",["T_VARIABLE","$key",210],"]",")",";",["T_WHITESPACE","\n\n        ",210],["T_RETURN","return",212],["T_WHITESPACE"," ",212],["T_VARIABLE","$config",212],";",["T_WHITESPACE","\n    ",212],"}",["T_WHITESPACE","\n\n    ",213],["T_DOC_COMMENT","\/**\n     * verifyConfig\n     *\n     * Checks that implemented keys contain values pointing at callable.\n     *\n     * @return void\n     * @throws \\Cake\\Core\\Exception\\Exception if config are invalid\n     *\/",215],["T_WHITESPACE","\n    ",222],["T_PUBLIC","public",223],["T_WHITESPACE"," ",223],["T_FUNCTION","function",223],["T_WHITESPACE"," ",223],["T_STRING","verifyConfig",223],"(",")",["T_WHITESPACE","\n    ",223],"{",["T_WHITESPACE","\n        ",224],["T_VARIABLE","$keys",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],"[",["T_CONSTANT_ENCAPSED_STRING","'implementedFinders'",225],",",["T_WHITESPACE"," ",225],["T_CONSTANT_ENCAPSED_STRING","'implementedMethods'",225],"]",";",["T_WHITESPACE","\n        ",225],["T_FOREACH","foreach",226],["T_WHITESPACE"," ",226],"(",["T_VARIABLE","$keys",226],["T_WHITESPACE"," ",226],["T_AS","as",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$key",226],")",["T_WHITESPACE"," ",226],"{",["T_WHITESPACE","\n            ",226],["T_IF","if",227],["T_WHITESPACE"," ",227],"(","!",["T_ISSET","isset",227],"(",["T_VARIABLE","$this",227],["T_OBJECT_OPERATOR","->",227],["T_STRING","_config",227],"[",["T_VARIABLE","$key",227],"]",")",")",["T_WHITESPACE"," ",227],"{",["T_WHITESPACE","\n                ",227],["T_CONTINUE","continue",228],";",["T_WHITESPACE","\n            ",228],"}",["T_WHITESPACE","\n\n            ",229],["T_FOREACH","foreach",231],["T_WHITESPACE"," ",231],"(",["T_VARIABLE","$this",231],["T_OBJECT_OPERATOR","->",231],["T_STRING","_config",231],"[",["T_VARIABLE","$key",231],"]",["T_WHITESPACE"," ",231],["T_AS","as",231],["T_WHITESPACE"," ",231],["T_VARIABLE","$method",231],")",["T_WHITESPACE"," ",231],"{",["T_WHITESPACE","\n                ",231],["T_IF","if",232],["T_WHITESPACE"," ",232],"(","!",["T_STRING","is_callable",232],"(","[",["T_VARIABLE","$this",232],",",["T_WHITESPACE"," ",232],["T_VARIABLE","$method",232],"]",")",")",["T_WHITESPACE"," ",232],"{",["T_WHITESPACE","\n                    ",232],["T_THROW","throw",233],["T_WHITESPACE"," ",233],["T_NEW","new",233],["T_WHITESPACE"," ",233],["T_STRING","Exception",233],"(",["T_STRING","sprintf",233],"(",["T_CONSTANT_ENCAPSED_STRING","'The method %s is not callable on class %s'",233],",",["T_WHITESPACE"," ",233],["T_VARIABLE","$method",233],",",["T_WHITESPACE"," ",233],["T_STRING","get_class",233],"(",["T_VARIABLE","$this",233],")",")",")",";",["T_WHITESPACE","\n                ",233],"}",["T_WHITESPACE","\n            ",234],"}",["T_WHITESPACE","\n        ",235],"}",["T_WHITESPACE","\n    ",236],"}",["T_WHITESPACE","\n\n    ",237],["T_DOC_COMMENT","\/**\n     * Gets the Model callbacks this behavior is interested in.\n     *\n     * By defining one of the callback methods a behavior is assumed\n     * to be interested in the related event.\n     *\n     * Override this method if you need to add non-conventional event listeners.\n     * Or if you want your behavior to listen to non-standard events.\n     *\n     * @return array\n     *\/",239],["T_WHITESPACE","\n    ",249],["T_PUBLIC","public",250],["T_WHITESPACE"," ",250],["T_FUNCTION","function",250],["T_WHITESPACE"," ",250],["T_STRING","implementedEvents",250],"(",")",["T_WHITESPACE","\n    ",250],"{",["T_WHITESPACE","\n        ",251],["T_VARIABLE","$eventMap",252],["T_WHITESPACE"," ",252],"=",["T_WHITESPACE"," ",252],"[",["T_WHITESPACE","\n            ",252],["T_CONSTANT_ENCAPSED_STRING","'Model.beforeMarshal'",253],["T_WHITESPACE"," ",253],["T_DOUBLE_ARROW","=>",253],["T_WHITESPACE"," ",253],["T_CONSTANT_ENCAPSED_STRING","'beforeMarshal'",253],",",["T_WHITESPACE","\n            ",253],["T_CONSTANT_ENCAPSED_STRING","'Model.beforeFind'",254],["T_WHITESPACE"," ",254],["T_DOUBLE_ARROW","=>",254],["T_WHITESPACE"," ",254],["T_CONSTANT_ENCAPSED_STRING","'beforeFind'",254],",",["T_WHITESPACE","\n            ",254],["T_CONSTANT_ENCAPSED_STRING","'Model.beforeSave'",255],["T_WHITESPACE"," ",255],["T_DOUBLE_ARROW","=>",255],["T_WHITESPACE"," ",255],["T_CONSTANT_ENCAPSED_STRING","'beforeSave'",255],",",["T_WHITESPACE","\n            ",255],["T_CONSTANT_ENCAPSED_STRING","'Model.afterSave'",256],["T_WHITESPACE"," ",256],["T_DOUBLE_ARROW","=>",256],["T_WHITESPACE"," ",256],["T_CONSTANT_ENCAPSED_STRING","'afterSave'",256],",",["T_WHITESPACE","\n            ",256],["T_CONSTANT_ENCAPSED_STRING","'Model.afterSaveCommit'",257],["T_WHITESPACE"," ",257],["T_DOUBLE_ARROW","=>",257],["T_WHITESPACE"," ",257],["T_CONSTANT_ENCAPSED_STRING","'afterSaveCommit'",257],",",["T_WHITESPACE","\n            ",257],["T_CONSTANT_ENCAPSED_STRING","'Model.beforeDelete'",258],["T_WHITESPACE"," ",258],["T_DOUBLE_ARROW","=>",258],["T_WHITESPACE"," ",258],["T_CONSTANT_ENCAPSED_STRING","'beforeDelete'",258],",",["T_WHITESPACE","\n            ",258],["T_CONSTANT_ENCAPSED_STRING","'Model.afterDelete'",259],["T_WHITESPACE"," ",259],["T_DOUBLE_ARROW","=>",259],["T_WHITESPACE"," ",259],["T_CONSTANT_ENCAPSED_STRING","'afterDelete'",259],",",["T_WHITESPACE","\n            ",259],["T_CONSTANT_ENCAPSED_STRING","'Model.afterDeleteCommit'",260],["T_WHITESPACE"," ",260],["T_DOUBLE_ARROW","=>",260],["T_WHITESPACE"," ",260],["T_CONSTANT_ENCAPSED_STRING","'afterDeleteCommit'",260],",",["T_WHITESPACE","\n            ",260],["T_CONSTANT_ENCAPSED_STRING","'Model.buildValidator'",261],["T_WHITESPACE"," ",261],["T_DOUBLE_ARROW","=>",261],["T_WHITESPACE"," ",261],["T_CONSTANT_ENCAPSED_STRING","'buildValidator'",261],",",["T_WHITESPACE","\n            ",261],["T_CONSTANT_ENCAPSED_STRING","'Model.buildRules'",262],["T_WHITESPACE"," ",262],["T_DOUBLE_ARROW","=>",262],["T_WHITESPACE"," ",262],["T_CONSTANT_ENCAPSED_STRING","'buildRules'",262],",",["T_WHITESPACE","\n            ",262],["T_CONSTANT_ENCAPSED_STRING","'Model.beforeRules'",263],["T_WHITESPACE"," ",263],["T_DOUBLE_ARROW","=>",263],["T_WHITESPACE"," ",263],["T_CONSTANT_ENCAPSED_STRING","'beforeRules'",263],",",["T_WHITESPACE","\n            ",263],["T_CONSTANT_ENCAPSED_STRING","'Model.afterRules'",264],["T_WHITESPACE"," ",264],["T_DOUBLE_ARROW","=>",264],["T_WHITESPACE"," ",264],["T_CONSTANT_ENCAPSED_STRING","'afterRules'",264],",",["T_WHITESPACE","\n        ",264],"]",";",["T_WHITESPACE","\n        ",265],["T_VARIABLE","$config",266],["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_VARIABLE","$this",266],["T_OBJECT_OPERATOR","->",266],["T_STRING","config",266],"(",")",";",["T_WHITESPACE","\n        ",266],["T_VARIABLE","$priority",267],["T_WHITESPACE"," ",267],"=",["T_WHITESPACE"," ",267],["T_ISSET","isset",267],"(",["T_VARIABLE","$config",267],"[",["T_CONSTANT_ENCAPSED_STRING","'priority'",267],"]",")",["T_WHITESPACE"," ",267],"?",["T_WHITESPACE"," ",267],["T_VARIABLE","$config",267],"[",["T_CONSTANT_ENCAPSED_STRING","'priority'",267],"]",["T_WHITESPACE"," ",267],":",["T_WHITESPACE"," ",267],["T_STRING","null",267],";",["T_WHITESPACE","\n        ",267],["T_VARIABLE","$events",268],["T_WHITESPACE"," ",268],"=",["T_WHITESPACE"," ",268],"[","]",";",["T_WHITESPACE","\n\n        ",268],["T_FOREACH","foreach",270],["T_WHITESPACE"," ",270],"(",["T_VARIABLE","$eventMap",270],["T_WHITESPACE"," ",270],["T_AS","as",270],["T_WHITESPACE"," ",270],["T_VARIABLE","$event",270],["T_WHITESPACE"," ",270],["T_DOUBLE_ARROW","=>",270],["T_WHITESPACE"," ",270],["T_VARIABLE","$method",270],")",["T_WHITESPACE"," ",270],"{",["T_WHITESPACE","\n            ",270],["T_IF","if",271],["T_WHITESPACE"," ",271],"(","!",["T_STRING","method_exists",271],"(",["T_VARIABLE","$this",271],",",["T_WHITESPACE"," ",271],["T_VARIABLE","$method",271],")",")",["T_WHITESPACE"," ",271],"{",["T_WHITESPACE","\n                ",271],["T_CONTINUE","continue",272],";",["T_WHITESPACE","\n            ",272],"}",["T_WHITESPACE","\n            ",273],["T_IF","if",274],["T_WHITESPACE"," ",274],"(",["T_VARIABLE","$priority",274],["T_WHITESPACE"," ",274],["T_IS_IDENTICAL","===",274],["T_WHITESPACE"," ",274],["T_STRING","null",274],")",["T_WHITESPACE"," ",274],"{",["T_WHITESPACE","\n                ",274],["T_VARIABLE","$events",275],"[",["T_VARIABLE","$event",275],"]",["T_WHITESPACE"," ",275],"=",["T_WHITESPACE"," ",275],["T_VARIABLE","$method",275],";",["T_WHITESPACE","\n            ",275],"}",["T_WHITESPACE"," ",276],["T_ELSE","else",276],["T_WHITESPACE"," ",276],"{",["T_WHITESPACE","\n                ",276],["T_VARIABLE","$events",277],"[",["T_VARIABLE","$event",277],"]",["T_WHITESPACE"," ",277],"=",["T_WHITESPACE"," ",277],"[",["T_WHITESPACE","\n                    ",277],["T_CONSTANT_ENCAPSED_STRING","'callable'",278],["T_WHITESPACE"," ",278],["T_DOUBLE_ARROW","=>",278],["T_WHITESPACE"," ",278],["T_VARIABLE","$method",278],",",["T_WHITESPACE","\n                    ",278],["T_CONSTANT_ENCAPSED_STRING","'priority'",279],["T_WHITESPACE"," ",279],["T_DOUBLE_ARROW","=>",279],["T_WHITESPACE"," ",279],["T_VARIABLE","$priority",279],["T_WHITESPACE","\n                ",279],"]",";",["T_WHITESPACE","\n            ",280],"}",["T_WHITESPACE","\n        ",281],"}",["T_WHITESPACE","\n\n        ",282],["T_RETURN","return",284],["T_WHITESPACE"," ",284],["T_VARIABLE","$events",284],";",["T_WHITESPACE","\n    ",284],"}",["T_WHITESPACE","\n\n    ",285],["T_DOC_COMMENT","\/**\n     * implementedFinders\n     *\n     * Provides an alias->methodname map of which finders a behavior implements. Example:\n     *\n     * ```\n     *  [\n     *    'this' => 'findThis',\n     *    'alias' => 'findMethodName'\n     *  ]\n     * ```\n     *\n     * With the above example, a call to `$Table->find('this')` will call `$Behavior->findThis()`\n     * and a call to `$Table->find('alias')` will call `$Behavior->findMethodName()`\n     *\n     * It is recommended, though not required, to define implementedFinders in the config property\n     * of child classes such that it is not necessary to use reflections to derive the available\n     * method list. See core behaviors for examples\n     *\n     * @return array\n     *\/",287],["T_WHITESPACE","\n    ",307],["T_PUBLIC","public",308],["T_WHITESPACE"," ",308],["T_FUNCTION","function",308],["T_WHITESPACE"," ",308],["T_STRING","implementedFinders",308],"(",")",["T_WHITESPACE","\n    ",308],"{",["T_WHITESPACE","\n        ",309],["T_VARIABLE","$methods",310],["T_WHITESPACE"," ",310],"=",["T_WHITESPACE"," ",310],["T_VARIABLE","$this",310],["T_OBJECT_OPERATOR","->",310],["T_STRING","config",310],"(",["T_CONSTANT_ENCAPSED_STRING","'implementedFinders'",310],")",";",["T_WHITESPACE","\n        ",310],["T_IF","if",311],["T_WHITESPACE"," ",311],"(",["T_ISSET","isset",311],"(",["T_VARIABLE","$methods",311],")",")",["T_WHITESPACE"," ",311],"{",["T_WHITESPACE","\n            ",311],["T_RETURN","return",312],["T_WHITESPACE"," ",312],["T_VARIABLE","$methods",312],";",["T_WHITESPACE","\n        ",312],"}",["T_WHITESPACE","\n\n        ",313],["T_RETURN","return",315],["T_WHITESPACE"," ",315],["T_VARIABLE","$this",315],["T_OBJECT_OPERATOR","->",315],["T_STRING","_reflectionCache",315],"(",")","[",["T_CONSTANT_ENCAPSED_STRING","'finders'",315],"]",";",["T_WHITESPACE","\n    ",315],"}",["T_WHITESPACE","\n\n    ",316],["T_DOC_COMMENT","\/**\n     * implementedMethods\n     *\n     * Provides an alias->methodname map of which methods a behavior implements. Example:\n     *\n     * ```\n     *  [\n     *    'method' => 'method',\n     *    'aliasedmethod' => 'somethingElse'\n     *  ]\n     * ```\n     *\n     * With the above example, a call to `$Table->method()` will call `$Behavior->method()`\n     * and a call to `$Table->aliasedmethod()` will call `$Behavior->somethingElse()`\n     *\n     * It is recommended, though not required, to define implementedFinders in the config property\n     * of child classes such that it is not necessary to use reflections to derive the available\n     * method list. See core behaviors for examples\n     *\n     * @return array\n     *\/",318],["T_WHITESPACE","\n    ",338],["T_PUBLIC","public",339],["T_WHITESPACE"," ",339],["T_FUNCTION","function",339],["T_WHITESPACE"," ",339],["T_STRING","implementedMethods",339],"(",")",["T_WHITESPACE","\n    ",339],"{",["T_WHITESPACE","\n        ",340],["T_VARIABLE","$methods",341],["T_WHITESPACE"," ",341],"=",["T_WHITESPACE"," ",341],["T_VARIABLE","$this",341],["T_OBJECT_OPERATOR","->",341],["T_STRING","config",341],"(",["T_CONSTANT_ENCAPSED_STRING","'implementedMethods'",341],")",";",["T_WHITESPACE","\n        ",341],["T_IF","if",342],["T_WHITESPACE"," ",342],"(",["T_ISSET","isset",342],"(",["T_VARIABLE","$methods",342],")",")",["T_WHITESPACE"," ",342],"{",["T_WHITESPACE","\n            ",342],["T_RETURN","return",343],["T_WHITESPACE"," ",343],["T_VARIABLE","$methods",343],";",["T_WHITESPACE","\n        ",343],"}",["T_WHITESPACE","\n\n        ",344],["T_RETURN","return",346],["T_WHITESPACE"," ",346],["T_VARIABLE","$this",346],["T_OBJECT_OPERATOR","->",346],["T_STRING","_reflectionCache",346],"(",")","[",["T_CONSTANT_ENCAPSED_STRING","'methods'",346],"]",";",["T_WHITESPACE","\n    ",346],"}",["T_WHITESPACE","\n\n    ",347],["T_DOC_COMMENT","\/**\n     * Gets the methods implemented by this behavior\n     *\n     * Uses the implementedEvents() method to exclude callback methods.\n     * Methods starting with `_` will be ignored, as will methods\n     * declared on Cake\\ORM\\Behavior\n     *\n     * @return array\n     *\/",349],["T_WHITESPACE","\n    ",357],["T_PROTECTED","protected",358],["T_WHITESPACE"," ",358],["T_FUNCTION","function",358],["T_WHITESPACE"," ",358],["T_STRING","_reflectionCache",358],"(",")",["T_WHITESPACE","\n    ",358],"{",["T_WHITESPACE","\n        ",359],["T_VARIABLE","$class",360],["T_WHITESPACE"," ",360],"=",["T_WHITESPACE"," ",360],["T_STRING","get_class",360],"(",["T_VARIABLE","$this",360],")",";",["T_WHITESPACE","\n        ",360],["T_IF","if",361],["T_WHITESPACE"," ",361],"(",["T_ISSET","isset",361],"(",["T_STRING","self",361],["T_DOUBLE_COLON","::",361],["T_VARIABLE","$_reflectionCache",361],"[",["T_VARIABLE","$class",361],"]",")",")",["T_WHITESPACE"," ",361],"{",["T_WHITESPACE","\n            ",361],["T_RETURN","return",362],["T_WHITESPACE"," ",362],["T_STRING","self",362],["T_DOUBLE_COLON","::",362],["T_VARIABLE","$_reflectionCache",362],"[",["T_VARIABLE","$class",362],"]",";",["T_WHITESPACE","\n        ",362],"}",["T_WHITESPACE","\n\n        ",363],["T_VARIABLE","$events",365],["T_WHITESPACE"," ",365],"=",["T_WHITESPACE"," ",365],["T_VARIABLE","$this",365],["T_OBJECT_OPERATOR","->",365],["T_STRING","implementedEvents",365],"(",")",";",["T_WHITESPACE","\n        ",365],["T_VARIABLE","$eventMethods",366],["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],"[","]",";",["T_WHITESPACE","\n        ",366],["T_FOREACH","foreach",367],["T_WHITESPACE"," ",367],"(",["T_VARIABLE","$events",367],["T_WHITESPACE"," ",367],["T_AS","as",367],["T_WHITESPACE"," ",367],["T_VARIABLE","$e",367],["T_WHITESPACE"," ",367],["T_DOUBLE_ARROW","=>",367],["T_WHITESPACE"," ",367],["T_VARIABLE","$binding",367],")",["T_WHITESPACE"," ",367],"{",["T_WHITESPACE","\n            ",367],["T_IF","if",368],["T_WHITESPACE"," ",368],"(",["T_STRING","is_array",368],"(",["T_VARIABLE","$binding",368],")",["T_WHITESPACE"," ",368],["T_BOOLEAN_AND","&&",368],["T_WHITESPACE"," ",368],["T_ISSET","isset",368],"(",["T_VARIABLE","$binding",368],"[",["T_CONSTANT_ENCAPSED_STRING","'callable'",368],"]",")",")",["T_WHITESPACE"," ",368],"{",["T_WHITESPACE","\n                ",368],["T_COMMENT","\/* @var string $callable *\/",369],["T_WHITESPACE","\n                ",369],["T_VARIABLE","$callable",370],["T_WHITESPACE"," ",370],"=",["T_WHITESPACE"," ",370],["T_VARIABLE","$binding",370],"[",["T_CONSTANT_ENCAPSED_STRING","'callable'",370],"]",";",["T_WHITESPACE","\n                ",370],["T_VARIABLE","$binding",371],["T_WHITESPACE"," ",371],"=",["T_WHITESPACE"," ",371],["T_VARIABLE","$callable",371],";",["T_WHITESPACE","\n            ",371],"}",["T_WHITESPACE","\n            ",372],["T_VARIABLE","$eventMethods",373],"[",["T_VARIABLE","$binding",373],"]",["T_WHITESPACE"," ",373],"=",["T_WHITESPACE"," ",373],["T_STRING","true",373],";",["T_WHITESPACE","\n        ",373],"}",["T_WHITESPACE","\n\n        ",374],["T_VARIABLE","$baseClass",376],["T_WHITESPACE"," ",376],"=",["T_WHITESPACE"," ",376],["T_CONSTANT_ENCAPSED_STRING","'Cake\\ORM\\Behavior'",376],";",["T_WHITESPACE","\n        ",376],["T_IF","if",377],["T_WHITESPACE"," ",377],"(",["T_ISSET","isset",377],"(",["T_STRING","self",377],["T_DOUBLE_COLON","::",377],["T_VARIABLE","$_reflectionCache",377],"[",["T_VARIABLE","$baseClass",377],"]",")",")",["T_WHITESPACE"," ",377],"{",["T_WHITESPACE","\n            ",377],["T_VARIABLE","$baseMethods",378],["T_WHITESPACE"," ",378],"=",["T_WHITESPACE"," ",378],["T_STRING","self",378],["T_DOUBLE_COLON","::",378],["T_VARIABLE","$_reflectionCache",378],"[",["T_VARIABLE","$baseClass",378],"]",";",["T_WHITESPACE","\n        ",378],"}",["T_WHITESPACE"," ",379],["T_ELSE","else",379],["T_WHITESPACE"," ",379],"{",["T_WHITESPACE","\n            ",379],["T_VARIABLE","$baseMethods",380],["T_WHITESPACE"," ",380],"=",["T_WHITESPACE"," ",380],["T_STRING","get_class_methods",380],"(",["T_VARIABLE","$baseClass",380],")",";",["T_WHITESPACE","\n            ",380],["T_STRING","self",381],["T_DOUBLE_COLON","::",381],["T_VARIABLE","$_reflectionCache",381],"[",["T_VARIABLE","$baseClass",381],"]",["T_WHITESPACE"," ",381],"=",["T_WHITESPACE"," ",381],["T_VARIABLE","$baseMethods",381],";",["T_WHITESPACE","\n        ",381],"}",["T_WHITESPACE","\n\n        ",382],["T_VARIABLE","$return",384],["T_WHITESPACE"," ",384],"=",["T_WHITESPACE"," ",384],"[",["T_WHITESPACE","\n            ",384],["T_CONSTANT_ENCAPSED_STRING","'finders'",385],["T_WHITESPACE"," ",385],["T_DOUBLE_ARROW","=>",385],["T_WHITESPACE"," ",385],"[","]",",",["T_WHITESPACE","\n            ",385],["T_CONSTANT_ENCAPSED_STRING","'methods'",386],["T_WHITESPACE"," ",386],["T_DOUBLE_ARROW","=>",386],["T_WHITESPACE"," ",386],"[","]",["T_WHITESPACE","\n        ",386],"]",";",["T_WHITESPACE","\n\n        ",387],["T_VARIABLE","$reflection",389],["T_WHITESPACE"," ",389],"=",["T_WHITESPACE"," ",389],["T_NEW","new",389],["T_WHITESPACE"," ",389],["T_STRING","ReflectionClass",389],"(",["T_VARIABLE","$class",389],")",";",["T_WHITESPACE","\n\n        ",389],["T_FOREACH","foreach",391],["T_WHITESPACE"," ",391],"(",["T_VARIABLE","$reflection",391],["T_OBJECT_OPERATOR","->",391],["T_STRING","getMethods",391],"(",["T_STRING","ReflectionMethod",391],["T_DOUBLE_COLON","::",391],["T_STRING","IS_PUBLIC",391],")",["T_WHITESPACE"," ",391],["T_AS","as",391],["T_WHITESPACE"," ",391],["T_VARIABLE","$method",391],")",["T_WHITESPACE"," ",391],"{",["T_WHITESPACE","\n            ",391],["T_VARIABLE","$methodName",392],["T_WHITESPACE"," ",392],"=",["T_WHITESPACE"," ",392],["T_VARIABLE","$method",392],["T_OBJECT_OPERATOR","->",392],["T_STRING","getName",392],"(",")",";",["T_WHITESPACE","\n            ",392],["T_IF","if",393],["T_WHITESPACE"," ",393],"(",["T_STRING","in_array",393],"(",["T_VARIABLE","$methodName",393],",",["T_WHITESPACE"," ",393],["T_VARIABLE","$baseMethods",393],")",["T_WHITESPACE"," ",393],["T_BOOLEAN_OR","||",393],["T_WHITESPACE","\n                ",393],["T_ISSET","isset",394],"(",["T_VARIABLE","$eventMethods",394],"[",["T_VARIABLE","$methodName",394],"]",")",["T_WHITESPACE","\n            ",394],")",["T_WHITESPACE"," ",395],"{",["T_WHITESPACE","\n                ",395],["T_CONTINUE","continue",396],";",["T_WHITESPACE","\n            ",396],"}",["T_WHITESPACE","\n\n            ",397],["T_IF","if",399],["T_WHITESPACE"," ",399],"(",["T_STRING","substr",399],"(",["T_VARIABLE","$methodName",399],",",["T_WHITESPACE"," ",399],["T_LNUMBER","0",399],",",["T_WHITESPACE"," ",399],["T_LNUMBER","4",399],")",["T_WHITESPACE"," ",399],["T_IS_IDENTICAL","===",399],["T_WHITESPACE"," ",399],["T_CONSTANT_ENCAPSED_STRING","'find'",399],")",["T_WHITESPACE"," ",399],"{",["T_WHITESPACE","\n                ",399],["T_VARIABLE","$return",400],"[",["T_CONSTANT_ENCAPSED_STRING","'finders'",400],"]","[",["T_STRING","lcfirst",400],"(",["T_STRING","substr",400],"(",["T_VARIABLE","$methodName",400],",",["T_WHITESPACE"," ",400],["T_LNUMBER","4",400],")",")","]",["T_WHITESPACE"," ",400],"=",["T_WHITESPACE"," ",400],["T_VARIABLE","$methodName",400],";",["T_WHITESPACE","\n            ",400],"}",["T_WHITESPACE"," ",401],["T_ELSE","else",401],["T_WHITESPACE"," ",401],"{",["T_WHITESPACE","\n                ",401],["T_VARIABLE","$return",402],"[",["T_CONSTANT_ENCAPSED_STRING","'methods'",402],"]","[",["T_VARIABLE","$methodName",402],"]",["T_WHITESPACE"," ",402],"=",["T_WHITESPACE"," ",402],["T_VARIABLE","$methodName",402],";",["T_WHITESPACE","\n            ",402],"}",["T_WHITESPACE","\n        ",403],"}",["T_WHITESPACE","\n\n        ",404],["T_RETURN","return",406],["T_WHITESPACE"," ",406],["T_STRING","self",406],["T_DOUBLE_COLON","::",406],["T_VARIABLE","$_reflectionCache",406],"[",["T_VARIABLE","$class",406],"]",["T_WHITESPACE"," ",406],"=",["T_WHITESPACE"," ",406],["T_VARIABLE","$return",406],";",["T_WHITESPACE","\n    ",406],"}",["T_WHITESPACE","\n",407],"}",["T_WHITESPACE","\n",408]]