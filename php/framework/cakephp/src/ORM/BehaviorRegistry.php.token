[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ORM",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","BadMethodCallException",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Core",18],["T_NS_SEPARATOR","\\",18],["T_STRING","App",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Core",19],["T_NS_SEPARATOR","\\",19],["T_STRING","ObjectRegistry",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Cake",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Event",20],["T_NS_SEPARATOR","\\",20],["T_STRING","EventDispatcherInterface",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Cake",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Event",21],["T_NS_SEPARATOR","\\",21],["T_STRING","EventDispatcherTrait",21],";",["T_WHITESPACE","\n",21],["T_USE","use",22],["T_WHITESPACE"," ",22],["T_STRING","Cake",22],["T_NS_SEPARATOR","\\",22],["T_STRING","ORM",22],["T_NS_SEPARATOR","\\",22],["T_STRING","Exception",22],["T_NS_SEPARATOR","\\",22],["T_STRING","MissingBehaviorException",22],";",["T_WHITESPACE","\n",22],["T_USE","use",23],["T_WHITESPACE"," ",23],["T_STRING","LogicException",23],";",["T_WHITESPACE","\n\n",23],["T_DOC_COMMENT","\/**\n * BehaviorRegistry is used as a registry for loaded behaviors and handles loading\n * and constructing behavior objects.\n *\n * This class also provides method for checking and dispatching behavior methods.\n *\/",25],["T_WHITESPACE","\n",30],["T_CLASS","class",31],["T_WHITESPACE"," ",31],["T_STRING","BehaviorRegistry",31],["T_WHITESPACE"," ",31],["T_EXTENDS","extends",31],["T_WHITESPACE"," ",31],["T_STRING","ObjectRegistry",31],["T_WHITESPACE"," ",31],["T_IMPLEMENTS","implements",31],["T_WHITESPACE"," ",31],["T_STRING","EventDispatcherInterface",31],["T_WHITESPACE","\n",31],"{",["T_WHITESPACE","\n\n    ",32],["T_USE","use",34],["T_WHITESPACE"," ",34],["T_STRING","EventDispatcherTrait",34],";",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * The table using this registry.\n     *\n     * @var \\Cake\\ORM\\Table\n     *\/",36],["T_WHITESPACE","\n    ",40],["T_PROTECTED","protected",41],["T_WHITESPACE"," ",41],["T_VARIABLE","$_table",41],";",["T_WHITESPACE","\n\n    ",41],["T_DOC_COMMENT","\/**\n     * Method mappings.\n     *\n     * @var array\n     *\/",43],["T_WHITESPACE","\n    ",47],["T_PROTECTED","protected",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$_methodMap",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],"[","]",";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Finder method mappings.\n     *\n     * @var array\n     *\/",50],["T_WHITESPACE","\n    ",54],["T_PROTECTED","protected",55],["T_WHITESPACE"," ",55],["T_VARIABLE","$_finderMap",55],["T_WHITESPACE"," ",55],"=",["T_WHITESPACE"," ",55],"[","]",";",["T_WHITESPACE","\n\n    ",55],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param \\Cake\\ORM\\Table|null $table The table this registry is attached to.\n     *\/",57],["T_WHITESPACE","\n    ",61],["T_PUBLIC","public",62],["T_WHITESPACE"," ",62],["T_FUNCTION","function",62],["T_WHITESPACE"," ",62],["T_STRING","__construct",62],"(",["T_VARIABLE","$table",62],["T_WHITESPACE"," ",62],"=",["T_WHITESPACE"," ",62],["T_STRING","null",62],")",["T_WHITESPACE","\n    ",62],"{",["T_WHITESPACE","\n        ",63],["T_IF","if",64],["T_WHITESPACE"," ",64],"(",["T_VARIABLE","$table",64],["T_WHITESPACE"," ",64],["T_IS_NOT_IDENTICAL","!==",64],["T_WHITESPACE"," ",64],["T_STRING","null",64],")",["T_WHITESPACE"," ",64],"{",["T_WHITESPACE","\n            ",64],["T_VARIABLE","$this",65],["T_OBJECT_OPERATOR","->",65],["T_STRING","setTable",65],"(",["T_VARIABLE","$table",65],")",";",["T_WHITESPACE","\n        ",65],"}",["T_WHITESPACE","\n    ",66],"}",["T_WHITESPACE","\n\n    ",67],["T_DOC_COMMENT","\/**\n     * Attaches a table instance to this registry.\n     *\n     * @param \\Cake\\ORM\\Table $table The table this registry is attached to.\n     * @return void\n     *\/",69],["T_WHITESPACE","\n    ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","setTable",75],"(",["T_STRING","Table",75],["T_WHITESPACE"," ",75],["T_VARIABLE","$table",75],")",["T_WHITESPACE","\n    ",75],"{",["T_WHITESPACE","\n        ",76],["T_VARIABLE","$this",77],["T_OBJECT_OPERATOR","->",77],["T_STRING","_table",77],["T_WHITESPACE"," ",77],"=",["T_WHITESPACE"," ",77],["T_VARIABLE","$table",77],";",["T_WHITESPACE","\n        ",77],["T_VARIABLE","$this",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","eventManager",78],"(",["T_VARIABLE","$table",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","eventManager",78],"(",")",")",";",["T_WHITESPACE","\n    ",78],"}",["T_WHITESPACE","\n\n    ",79],["T_DOC_COMMENT","\/**\n     * Resolve a behavior classname.\n     *\n     * Part of the template method for Cake\\Core\\ObjectRegistry::load()\n     *\n     * @param string $class Partial classname to resolve.\n     * @return string|false Either the correct classname or false.\n     *\/",81],["T_WHITESPACE","\n    ",88],["T_PROTECTED","protected",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","_resolveClassName",89],"(",["T_VARIABLE","$class",89],")",["T_WHITESPACE","\n    ",89],"{",["T_WHITESPACE","\n        ",90],["T_VARIABLE","$result",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],["T_STRING","App",91],["T_DOUBLE_COLON","::",91],["T_STRING","className",91],"(",["T_VARIABLE","$class",91],",",["T_WHITESPACE"," ",91],["T_CONSTANT_ENCAPSED_STRING","'Model\/Behavior'",91],",",["T_WHITESPACE"," ",91],["T_CONSTANT_ENCAPSED_STRING","'Behavior'",91],")",";",["T_WHITESPACE","\n        ",91],["T_IF","if",92],["T_WHITESPACE"," ",92],"(","!",["T_VARIABLE","$result",92],")",["T_WHITESPACE"," ",92],"{",["T_WHITESPACE","\n            ",92],["T_VARIABLE","$result",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_STRING","App",93],["T_DOUBLE_COLON","::",93],["T_STRING","className",93],"(",["T_VARIABLE","$class",93],",",["T_WHITESPACE"," ",93],["T_CONSTANT_ENCAPSED_STRING","'ORM\/Behavior'",93],",",["T_WHITESPACE"," ",93],["T_CONSTANT_ENCAPSED_STRING","'Behavior'",93],")",";",["T_WHITESPACE","\n        ",93],"}",["T_WHITESPACE","\n\n        ",94],["T_RETURN","return",96],["T_WHITESPACE"," ",96],["T_VARIABLE","$result",96],";",["T_WHITESPACE","\n    ",96],"}",["T_WHITESPACE","\n\n    ",97],["T_DOC_COMMENT","\/**\n     * Throws an exception when a behavior is missing.\n     *\n     * Part of the template method for Cake\\Core\\ObjectRegistry::load()\n     *\n     * @param string $class The classname that is missing.\n     * @param string $plugin The plugin the behavior is missing in.\n     * @return void\n     * @throws \\Cake\\ORM\\Exception\\MissingBehaviorException\n     *\/",99],["T_WHITESPACE","\n    ",108],["T_PROTECTED","protected",109],["T_WHITESPACE"," ",109],["T_FUNCTION","function",109],["T_WHITESPACE"," ",109],["T_STRING","_throwMissingClassError",109],"(",["T_VARIABLE","$class",109],",",["T_WHITESPACE"," ",109],["T_VARIABLE","$plugin",109],")",["T_WHITESPACE","\n    ",109],"{",["T_WHITESPACE","\n        ",110],["T_THROW","throw",111],["T_WHITESPACE"," ",111],["T_NEW","new",111],["T_WHITESPACE"," ",111],["T_STRING","MissingBehaviorException",111],"(","[",["T_WHITESPACE","\n            ",111],["T_CONSTANT_ENCAPSED_STRING","'class'",112],["T_WHITESPACE"," ",112],["T_DOUBLE_ARROW","=>",112],["T_WHITESPACE"," ",112],["T_VARIABLE","$class",112],["T_WHITESPACE"," ",112],".",["T_WHITESPACE"," ",112],["T_CONSTANT_ENCAPSED_STRING","'Behavior'",112],",",["T_WHITESPACE","\n            ",112],["T_CONSTANT_ENCAPSED_STRING","'plugin'",113],["T_WHITESPACE"," ",113],["T_DOUBLE_ARROW","=>",113],["T_WHITESPACE"," ",113],["T_VARIABLE","$plugin",113],["T_WHITESPACE","\n        ",113],"]",")",";",["T_WHITESPACE","\n    ",114],"}",["T_WHITESPACE","\n\n    ",115],["T_DOC_COMMENT","\/**\n     * Create the behavior instance.\n     *\n     * Part of the template method for Cake\\Core\\ObjectRegistry::load()\n     * Enabled behaviors will be registered with the event manager.\n     *\n     * @param string $class The classname that is missing.\n     * @param string $alias The alias of the object.\n     * @param array $config An array of config to use for the behavior.\n     * @return \\Cake\\ORM\\Behavior The constructed behavior class.\n     *\/",117],["T_WHITESPACE","\n    ",127],["T_PROTECTED","protected",128],["T_WHITESPACE"," ",128],["T_FUNCTION","function",128],["T_WHITESPACE"," ",128],["T_STRING","_create",128],"(",["T_VARIABLE","$class",128],",",["T_WHITESPACE"," ",128],["T_VARIABLE","$alias",128],",",["T_WHITESPACE"," ",128],["T_VARIABLE","$config",128],")",["T_WHITESPACE","\n    ",128],"{",["T_WHITESPACE","\n        ",129],["T_VARIABLE","$instance",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_NEW","new",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$class",130],"(",["T_VARIABLE","$this",130],["T_OBJECT_OPERATOR","->",130],["T_STRING","_table",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$config",130],")",";",["T_WHITESPACE","\n        ",130],["T_VARIABLE","$enable",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_ISSET","isset",131],"(",["T_VARIABLE","$config",131],"[",["T_CONSTANT_ENCAPSED_STRING","'enabled'",131],"]",")",["T_WHITESPACE"," ",131],"?",["T_WHITESPACE"," ",131],["T_VARIABLE","$config",131],"[",["T_CONSTANT_ENCAPSED_STRING","'enabled'",131],"]",["T_WHITESPACE"," ",131],":",["T_WHITESPACE"," ",131],["T_STRING","true",131],";",["T_WHITESPACE","\n        ",131],["T_IF","if",132],["T_WHITESPACE"," ",132],"(",["T_VARIABLE","$enable",132],")",["T_WHITESPACE"," ",132],"{",["T_WHITESPACE","\n            ",132],["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","eventManager",133],"(",")",["T_OBJECT_OPERATOR","->",133],["T_STRING","on",133],"(",["T_VARIABLE","$instance",133],")",";",["T_WHITESPACE","\n        ",133],"}",["T_WHITESPACE","\n        ",134],["T_VARIABLE","$methods",135],["T_WHITESPACE"," ",135],"=",["T_WHITESPACE"," ",135],["T_VARIABLE","$this",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","_getMethods",135],"(",["T_VARIABLE","$instance",135],",",["T_WHITESPACE"," ",135],["T_VARIABLE","$class",135],",",["T_WHITESPACE"," ",135],["T_VARIABLE","$alias",135],")",";",["T_WHITESPACE","\n        ",135],["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","_methodMap",136],["T_WHITESPACE"," ",136],["T_PLUS_EQUAL","+=",136],["T_WHITESPACE"," ",136],["T_VARIABLE","$methods",136],"[",["T_CONSTANT_ENCAPSED_STRING","'methods'",136],"]",";",["T_WHITESPACE","\n        ",136],["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","_finderMap",137],["T_WHITESPACE"," ",137],["T_PLUS_EQUAL","+=",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$methods",137],"[",["T_CONSTANT_ENCAPSED_STRING","'finders'",137],"]",";",["T_WHITESPACE","\n\n        ",137],["T_RETURN","return",139],["T_WHITESPACE"," ",139],["T_VARIABLE","$instance",139],";",["T_WHITESPACE","\n    ",139],"}",["T_WHITESPACE","\n\n    ",140],["T_DOC_COMMENT","\/**\n     * Get the behavior methods and ensure there are no duplicates.\n     *\n     * Use the implementedEvents() method to exclude callback methods.\n     * Methods starting with `_` will be ignored, as will methods\n     * declared on Cake\\ORM\\Behavior\n     *\n     * @param \\Cake\\ORM\\Behavior $instance The behavior to get methods from.\n     * @param string $class The classname that is missing.\n     * @param string $alias The alias of the object.\n     * @return array A list of implemented finders and methods.\n     * @throws \\LogicException when duplicate methods are connected.\n     *\/",142],["T_WHITESPACE","\n    ",154],["T_PROTECTED","protected",155],["T_WHITESPACE"," ",155],["T_FUNCTION","function",155],["T_WHITESPACE"," ",155],["T_STRING","_getMethods",155],"(",["T_STRING","Behavior",155],["T_WHITESPACE"," ",155],["T_VARIABLE","$instance",155],",",["T_WHITESPACE"," ",155],["T_VARIABLE","$class",155],",",["T_WHITESPACE"," ",155],["T_VARIABLE","$alias",155],")",["T_WHITESPACE","\n    ",155],"{",["T_WHITESPACE","\n        ",156],["T_VARIABLE","$finders",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_STRING","array_change_key_case",157],"(",["T_VARIABLE","$instance",157],["T_OBJECT_OPERATOR","->",157],["T_STRING","implementedFinders",157],"(",")",")",";",["T_WHITESPACE","\n        ",157],["T_VARIABLE","$methods",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_STRING","array_change_key_case",158],"(",["T_VARIABLE","$instance",158],["T_OBJECT_OPERATOR","->",158],["T_STRING","implementedMethods",158],"(",")",")",";",["T_WHITESPACE","\n\n        ",158],["T_FOREACH","foreach",160],["T_WHITESPACE"," ",160],"(",["T_VARIABLE","$finders",160],["T_WHITESPACE"," ",160],["T_AS","as",160],["T_WHITESPACE"," ",160],["T_VARIABLE","$finder",160],["T_WHITESPACE"," ",160],["T_DOUBLE_ARROW","=>",160],["T_WHITESPACE"," ",160],["T_VARIABLE","$methodName",160],")",["T_WHITESPACE"," ",160],"{",["T_WHITESPACE","\n            ",160],["T_IF","if",161],["T_WHITESPACE"," ",161],"(",["T_ISSET","isset",161],"(",["T_VARIABLE","$this",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","_finderMap",161],"[",["T_VARIABLE","$finder",161],"]",")",["T_WHITESPACE"," ",161],["T_BOOLEAN_AND","&&",161],["T_WHITESPACE"," ",161],["T_VARIABLE","$this",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","has",161],"(",["T_VARIABLE","$this",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","_finderMap",161],"[",["T_VARIABLE","$finder",161],"]","[",["T_LNUMBER","0",161],"]",")",")",["T_WHITESPACE"," ",161],"{",["T_WHITESPACE","\n                ",161],["T_VARIABLE","$duplicate",162],["T_WHITESPACE"," ",162],"=",["T_WHITESPACE"," ",162],["T_VARIABLE","$this",162],["T_OBJECT_OPERATOR","->",162],["T_STRING","_finderMap",162],"[",["T_VARIABLE","$finder",162],"]",";",["T_WHITESPACE","\n                ",162],["T_VARIABLE","$error",163],["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_STRING","sprintf",163],"(",["T_WHITESPACE","\n                    ",163],["T_CONSTANT_ENCAPSED_STRING","'%s contains duplicate finder \"%s\" which is already provided by \"%s\"'",164],",",["T_WHITESPACE","\n                    ",164],["T_VARIABLE","$class",165],",",["T_WHITESPACE","\n                    ",165],["T_VARIABLE","$finder",166],",",["T_WHITESPACE","\n                    ",166],["T_VARIABLE","$duplicate",167],"[",["T_LNUMBER","0",167],"]",["T_WHITESPACE","\n                ",167],")",";",["T_WHITESPACE","\n                ",168],["T_THROW","throw",169],["T_WHITESPACE"," ",169],["T_NEW","new",169],["T_WHITESPACE"," ",169],["T_STRING","LogicException",169],"(",["T_VARIABLE","$error",169],")",";",["T_WHITESPACE","\n            ",169],"}",["T_WHITESPACE","\n            ",170],["T_VARIABLE","$finders",171],"[",["T_VARIABLE","$finder",171],"]",["T_WHITESPACE"," ",171],"=",["T_WHITESPACE"," ",171],"[",["T_VARIABLE","$alias",171],",",["T_WHITESPACE"," ",171],["T_VARIABLE","$methodName",171],"]",";",["T_WHITESPACE","\n        ",171],"}",["T_WHITESPACE","\n\n        ",172],["T_FOREACH","foreach",174],["T_WHITESPACE"," ",174],"(",["T_VARIABLE","$methods",174],["T_WHITESPACE"," ",174],["T_AS","as",174],["T_WHITESPACE"," ",174],["T_VARIABLE","$method",174],["T_WHITESPACE"," ",174],["T_DOUBLE_ARROW","=>",174],["T_WHITESPACE"," ",174],["T_VARIABLE","$methodName",174],")",["T_WHITESPACE"," ",174],"{",["T_WHITESPACE","\n            ",174],["T_IF","if",175],["T_WHITESPACE"," ",175],"(",["T_ISSET","isset",175],"(",["T_VARIABLE","$this",175],["T_OBJECT_OPERATOR","->",175],["T_STRING","_methodMap",175],"[",["T_VARIABLE","$method",175],"]",")",["T_WHITESPACE"," ",175],["T_BOOLEAN_AND","&&",175],["T_WHITESPACE"," ",175],["T_VARIABLE","$this",175],["T_OBJECT_OPERATOR","->",175],["T_STRING","has",175],"(",["T_VARIABLE","$this",175],["T_OBJECT_OPERATOR","->",175],["T_STRING","_methodMap",175],"[",["T_VARIABLE","$method",175],"]","[",["T_LNUMBER","0",175],"]",")",")",["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n                ",175],["T_VARIABLE","$duplicate",176],["T_WHITESPACE"," ",176],"=",["T_WHITESPACE"," ",176],["T_VARIABLE","$this",176],["T_OBJECT_OPERATOR","->",176],["T_STRING","_methodMap",176],"[",["T_VARIABLE","$method",176],"]",";",["T_WHITESPACE","\n                ",176],["T_VARIABLE","$error",177],["T_WHITESPACE"," ",177],"=",["T_WHITESPACE"," ",177],["T_STRING","sprintf",177],"(",["T_WHITESPACE","\n                    ",177],["T_CONSTANT_ENCAPSED_STRING","'%s contains duplicate method \"%s\" which is already provided by \"%s\"'",178],",",["T_WHITESPACE","\n                    ",178],["T_VARIABLE","$class",179],",",["T_WHITESPACE","\n                    ",179],["T_VARIABLE","$method",180],",",["T_WHITESPACE","\n                    ",180],["T_VARIABLE","$duplicate",181],"[",["T_LNUMBER","0",181],"]",["T_WHITESPACE","\n                ",181],")",";",["T_WHITESPACE","\n                ",182],["T_THROW","throw",183],["T_WHITESPACE"," ",183],["T_NEW","new",183],["T_WHITESPACE"," ",183],["T_STRING","LogicException",183],"(",["T_VARIABLE","$error",183],")",";",["T_WHITESPACE","\n            ",183],"}",["T_WHITESPACE","\n            ",184],["T_VARIABLE","$methods",185],"[",["T_VARIABLE","$method",185],"]",["T_WHITESPACE"," ",185],"=",["T_WHITESPACE"," ",185],"[",["T_VARIABLE","$alias",185],",",["T_WHITESPACE"," ",185],["T_VARIABLE","$methodName",185],"]",";",["T_WHITESPACE","\n        ",185],"}",["T_WHITESPACE","\n\n        ",186],["T_RETURN","return",188],["T_WHITESPACE"," ",188],["T_STRING","compact",188],"(",["T_CONSTANT_ENCAPSED_STRING","'methods'",188],",",["T_WHITESPACE"," ",188],["T_CONSTANT_ENCAPSED_STRING","'finders'",188],")",";",["T_WHITESPACE","\n    ",188],"}",["T_WHITESPACE","\n\n    ",189],["T_DOC_COMMENT","\/**\n     * Check if any loaded behavior implements a method.\n     *\n     * Will return true if any behavior provides a public non-finder method\n     * with the chosen name.\n     *\n     * @param string $method The method to check for.\n     * @return bool\n     *\/",191],["T_WHITESPACE","\n    ",199],["T_PUBLIC","public",200],["T_WHITESPACE"," ",200],["T_FUNCTION","function",200],["T_WHITESPACE"," ",200],["T_STRING","hasMethod",200],"(",["T_VARIABLE","$method",200],")",["T_WHITESPACE","\n    ",200],"{",["T_WHITESPACE","\n        ",201],["T_VARIABLE","$method",202],["T_WHITESPACE"," ",202],"=",["T_WHITESPACE"," ",202],["T_STRING","strtolower",202],"(",["T_VARIABLE","$method",202],")",";",["T_WHITESPACE","\n\n        ",202],["T_RETURN","return",204],["T_WHITESPACE"," ",204],["T_ISSET","isset",204],"(",["T_VARIABLE","$this",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","_methodMap",204],"[",["T_VARIABLE","$method",204],"]",")",";",["T_WHITESPACE","\n    ",204],"}",["T_WHITESPACE","\n\n    ",205],["T_DOC_COMMENT","\/**\n     * Check if any loaded behavior implements the named finder.\n     *\n     * Will return true if any behavior provides a public method with\n     * the chosen name.\n     *\n     * @param string $method The method to check for.\n     * @return bool\n     *\/",207],["T_WHITESPACE","\n    ",215],["T_PUBLIC","public",216],["T_WHITESPACE"," ",216],["T_FUNCTION","function",216],["T_WHITESPACE"," ",216],["T_STRING","hasFinder",216],"(",["T_VARIABLE","$method",216],")",["T_WHITESPACE","\n    ",216],"{",["T_WHITESPACE","\n        ",217],["T_VARIABLE","$method",218],["T_WHITESPACE"," ",218],"=",["T_WHITESPACE"," ",218],["T_STRING","strtolower",218],"(",["T_VARIABLE","$method",218],")",";",["T_WHITESPACE","\n\n        ",218],["T_RETURN","return",220],["T_WHITESPACE"," ",220],["T_ISSET","isset",220],"(",["T_VARIABLE","$this",220],["T_OBJECT_OPERATOR","->",220],["T_STRING","_finderMap",220],"[",["T_VARIABLE","$method",220],"]",")",";",["T_WHITESPACE","\n    ",220],"}",["T_WHITESPACE","\n\n    ",221],["T_DOC_COMMENT","\/**\n     * Invoke a method on a behavior.\n     *\n     * @param string $method The method to invoke.\n     * @param array $args The arguments you want to invoke the method with.\n     * @return mixed The return value depends on the underlying behavior method.\n     * @throws \\BadMethodCallException When the method is unknown.\n     *\/",223],["T_WHITESPACE","\n    ",230],["T_PUBLIC","public",231],["T_WHITESPACE"," ",231],["T_FUNCTION","function",231],["T_WHITESPACE"," ",231],["T_STRING","call",231],"(",["T_VARIABLE","$method",231],",",["T_WHITESPACE"," ",231],["T_ARRAY","array",231],["T_WHITESPACE"," ",231],["T_VARIABLE","$args",231],["T_WHITESPACE"," ",231],"=",["T_WHITESPACE"," ",231],"[","]",")",["T_WHITESPACE","\n    ",231],"{",["T_WHITESPACE","\n        ",232],["T_VARIABLE","$method",233],["T_WHITESPACE"," ",233],"=",["T_WHITESPACE"," ",233],["T_STRING","strtolower",233],"(",["T_VARIABLE","$method",233],")",";",["T_WHITESPACE","\n        ",233],["T_IF","if",234],["T_WHITESPACE"," ",234],"(",["T_VARIABLE","$this",234],["T_OBJECT_OPERATOR","->",234],["T_STRING","hasMethod",234],"(",["T_VARIABLE","$method",234],")",["T_WHITESPACE"," ",234],["T_BOOLEAN_AND","&&",234],["T_WHITESPACE"," ",234],["T_VARIABLE","$this",234],["T_OBJECT_OPERATOR","->",234],["T_STRING","has",234],"(",["T_VARIABLE","$this",234],["T_OBJECT_OPERATOR","->",234],["T_STRING","_methodMap",234],"[",["T_VARIABLE","$method",234],"]","[",["T_LNUMBER","0",234],"]",")",")",["T_WHITESPACE"," ",234],"{",["T_WHITESPACE","\n            ",234],["T_LIST","list",235],"(",["T_VARIABLE","$behavior",235],",",["T_WHITESPACE"," ",235],["T_VARIABLE","$callMethod",235],")",["T_WHITESPACE"," ",235],"=",["T_WHITESPACE"," ",235],["T_VARIABLE","$this",235],["T_OBJECT_OPERATOR","->",235],["T_STRING","_methodMap",235],"[",["T_VARIABLE","$method",235],"]",";",["T_WHITESPACE","\n\n            ",235],["T_RETURN","return",237],["T_WHITESPACE"," ",237],["T_STRING","call_user_func_array",237],"(","[",["T_VARIABLE","$this",237],["T_OBJECT_OPERATOR","->",237],["T_STRING","_loaded",237],"[",["T_VARIABLE","$behavior",237],"]",",",["T_WHITESPACE"," ",237],["T_VARIABLE","$callMethod",237],"]",",",["T_WHITESPACE"," ",237],["T_VARIABLE","$args",237],")",";",["T_WHITESPACE","\n        ",237],"}",["T_WHITESPACE","\n\n        ",238],["T_THROW","throw",240],["T_WHITESPACE"," ",240],["T_NEW","new",240],["T_WHITESPACE"," ",240],["T_STRING","BadMethodCallException",240],"(",["T_WHITESPACE","\n            ",240],["T_STRING","sprintf",241],"(",["T_CONSTANT_ENCAPSED_STRING","'Cannot call \"%s\" it does not belong to any attached behavior.'",241],",",["T_WHITESPACE"," ",241],["T_VARIABLE","$method",241],")",["T_WHITESPACE","\n        ",241],")",";",["T_WHITESPACE","\n    ",242],"}",["T_WHITESPACE","\n\n    ",243],["T_DOC_COMMENT","\/**\n     * Invoke a finder on a behavior.\n     *\n     * @param string $type The finder type to invoke.\n     * @param array $args The arguments you want to invoke the method with.\n     * @return mixed The return value depends on the underlying behavior method.\n     * @throws \\BadMethodCallException When the method is unknown.\n     *\/",245],["T_WHITESPACE","\n    ",252],["T_PUBLIC","public",253],["T_WHITESPACE"," ",253],["T_FUNCTION","function",253],["T_WHITESPACE"," ",253],["T_STRING","callFinder",253],"(",["T_VARIABLE","$type",253],",",["T_WHITESPACE"," ",253],["T_ARRAY","array",253],["T_WHITESPACE"," ",253],["T_VARIABLE","$args",253],["T_WHITESPACE"," ",253],"=",["T_WHITESPACE"," ",253],"[","]",")",["T_WHITESPACE","\n    ",253],"{",["T_WHITESPACE","\n        ",254],["T_VARIABLE","$type",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_STRING","strtolower",255],"(",["T_VARIABLE","$type",255],")",";",["T_WHITESPACE","\n\n        ",255],["T_IF","if",257],["T_WHITESPACE"," ",257],"(",["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","hasFinder",257],"(",["T_VARIABLE","$type",257],")",["T_WHITESPACE"," ",257],["T_BOOLEAN_AND","&&",257],["T_WHITESPACE"," ",257],["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","has",257],"(",["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","_finderMap",257],"[",["T_VARIABLE","$type",257],"]","[",["T_LNUMBER","0",257],"]",")",")",["T_WHITESPACE"," ",257],"{",["T_WHITESPACE","\n            ",257],["T_LIST","list",258],"(",["T_VARIABLE","$behavior",258],",",["T_WHITESPACE"," ",258],["T_VARIABLE","$callMethod",258],")",["T_WHITESPACE"," ",258],"=",["T_WHITESPACE"," ",258],["T_VARIABLE","$this",258],["T_OBJECT_OPERATOR","->",258],["T_STRING","_finderMap",258],"[",["T_VARIABLE","$type",258],"]",";",["T_WHITESPACE","\n\n            ",258],["T_RETURN","return",260],["T_WHITESPACE"," ",260],["T_STRING","call_user_func_array",260],"(","[",["T_VARIABLE","$this",260],["T_OBJECT_OPERATOR","->",260],["T_STRING","_loaded",260],"[",["T_VARIABLE","$behavior",260],"]",",",["T_WHITESPACE"," ",260],["T_VARIABLE","$callMethod",260],"]",",",["T_WHITESPACE"," ",260],["T_VARIABLE","$args",260],")",";",["T_WHITESPACE","\n        ",260],"}",["T_WHITESPACE","\n\n        ",261],["T_THROW","throw",263],["T_WHITESPACE"," ",263],["T_NEW","new",263],["T_WHITESPACE"," ",263],["T_STRING","BadMethodCallException",263],"(",["T_WHITESPACE","\n            ",263],["T_STRING","sprintf",264],"(",["T_CONSTANT_ENCAPSED_STRING","'Cannot call finder \"%s\" it does not belong to any attached behavior.'",264],",",["T_WHITESPACE"," ",264],["T_VARIABLE","$type",264],")",["T_WHITESPACE","\n        ",264],")",";",["T_WHITESPACE","\n    ",265],"}",["T_WHITESPACE","\n",266],"}",["T_WHITESPACE","\n",267]]