[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ORM",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","ArrayObject",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Database",18],["T_NS_SEPARATOR","\\",18],["T_STRING","ExpressionInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Database",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Query",19],["T_WHITESPACE"," ",19],["T_AS","as",19],["T_WHITESPACE"," ",19],["T_STRING","DatabaseQuery",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Cake",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Database",20],["T_NS_SEPARATOR","\\",20],["T_STRING","TypedResultInterface",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Cake",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Database",21],["T_NS_SEPARATOR","\\",21],["T_STRING","TypeMap",21],";",["T_WHITESPACE","\n",21],["T_USE","use",22],["T_WHITESPACE"," ",22],["T_STRING","Cake",22],["T_NS_SEPARATOR","\\",22],["T_STRING","Database",22],["T_NS_SEPARATOR","\\",22],["T_STRING","ValueBinder",22],";",["T_WHITESPACE","\n",22],["T_USE","use",23],["T_WHITESPACE"," ",23],["T_STRING","Cake",23],["T_NS_SEPARATOR","\\",23],["T_STRING","Datasource",23],["T_NS_SEPARATOR","\\",23],["T_STRING","QueryInterface",23],";",["T_WHITESPACE","\n",23],["T_USE","use",24],["T_WHITESPACE"," ",24],["T_STRING","Cake",24],["T_NS_SEPARATOR","\\",24],["T_STRING","Datasource",24],["T_NS_SEPARATOR","\\",24],["T_STRING","QueryTrait",24],";",["T_WHITESPACE","\n",24],["T_USE","use",25],["T_WHITESPACE"," ",25],["T_STRING","JsonSerializable",25],";",["T_WHITESPACE","\n",25],["T_USE","use",26],["T_WHITESPACE"," ",26],["T_STRING","RuntimeException",26],";",["T_WHITESPACE","\n\n",26],["T_DOC_COMMENT","\/**\n * Extends the base Query class to provide new methods related to association\n * loading, automatic fields selection, automatic type casting and to wrap results\n * into a specific iterator that will be responsible for hydrating results if\n * required.\n *\n * @see \\Cake\\Collection\\CollectionInterface For a full description of the collection methods supported by this class\n * @method \\Cake\\Collection\\CollectionInterface each(callable $c) Passes each of the query results to the callable\n * @method \\Cake\\Collection\\CollectionInterface filter(callable $c = null) Keeps the results using passing the callable test\n * @method \\Cake\\Collection\\CollectionInterface reject(callable $c) Removes the results passing the callable test\n * @method bool every(callable $c) Returns true if all the results pass the callable test\n * @method bool some(callable $c) Returns true if at least one of the results pass the callable test\n * @method \\Cake\\Collection\\CollectionInterface map(callable $c) Modifies each of the results using the callable\n * @method mixed reduce(callable $c, $zero = null) Folds all the results into a single value using the callable.\n * @method \\Cake\\Collection\\CollectionInterface extract($field) Extracts a single column from each row\n * @method mixed max($field, $type = SORT_NUMERIC) Returns the maximum value for a single column in all the results.\n * @method mixed min($field, $type = SORT_NUMERIC) Returns the minimum value for a single column in all the results.\n * @method \\Cake\\Collection\\CollectionInterface groupBy(string|callable $field) In-memory group all results by the value of a column.\n * @method \\Cake\\Collection\\CollectionInterface indexBy(string|callable $field) Returns the results indexed by the value of a column.\n * @method int countBy(string|callable $field) Returns the number of unique values for a column\n * @method float sumOf(string|callable $field) Returns the sum of all values for a single column\n * @method \\Cake\\Collection\\CollectionInterface shuffle() In-memory randomize the order the results are returned\n * @method \\Cake\\Collection\\CollectionInterface sample($size = 10) In-memory shuffle the results and return a subset of them.\n * @method \\Cake\\Collection\\CollectionInterface take($size = 1, $from = 0) In-memory limit and offset for the query results.\n * @method \\Cake\\Collection\\CollectionInterface skip(int $howMany) Skips some rows from the start of the query result.\n * @method mixed last() Return the last row of the query result\n * @method \\Cake\\Collection\\CollectionInterface append(array|\\Traversable $items) Appends more rows to the result of the query.\n * @method \\Cake\\Collection\\CollectionInterface combine($k, $v, $g = null) Returns the values of the column $v index by column $k,\n *   and grouped by $g.\n * @method \\Cake\\Collection\\CollectionInterface nest($k, $p, $n = 'children') Creates a tree structure by nesting the values of column $p into that\n *   with the same value for $k using $n as the nesting key.\n * @method array toArray() Returns a key-value array with the results of this query.\n * @method array toList() Returns a numerically indexed array with the results of this query.\n * @method \\Cake\\Collection\\CollectionInterface stopWhen(callable $c) Returns each row until the callable returns true.\n * @method \\Cake\\Collection\\CollectionInterface zip(array|\\Traversable $c) Returns the first result of both the query and $c in an array,\n *   then the second results and so on.\n * @method \\Cake\\Collection\\CollectionInterface zipWith($collections, callable $callable) Returns each of the results out of calling $c\n *   with the first rows of the query and each of the items, then the second rows and so on.\n * @method \\Cake\\Collection\\CollectionInterface chunk($size) Groups the results in arrays of $size rows each.\n * @method bool isEmpty() Returns true if this query found no results.\n *\/",28],["T_WHITESPACE","\n",68],["T_CLASS","class",69],["T_WHITESPACE"," ",69],["T_STRING","Query",69],["T_WHITESPACE"," ",69],["T_EXTENDS","extends",69],["T_WHITESPACE"," ",69],["T_STRING","DatabaseQuery",69],["T_WHITESPACE"," ",69],["T_IMPLEMENTS","implements",69],["T_WHITESPACE"," ",69],["T_STRING","JsonSerializable",69],",",["T_WHITESPACE"," ",69],["T_STRING","QueryInterface",69],["T_WHITESPACE","\n",69],"{",["T_WHITESPACE","\n\n    ",70],["T_USE","use",72],["T_WHITESPACE"," ",72],["T_STRING","QueryTrait",72],["T_WHITESPACE"," ",72],"{",["T_WHITESPACE","\n        ",72],["T_STRING","cache",73],["T_WHITESPACE"," ",73],["T_AS","as",73],["T_WHITESPACE"," ",73],["T_PRIVATE","private",73],["T_WHITESPACE"," ",73],["T_STRING","_cache",73],";",["T_WHITESPACE","\n        ",73],["T_STRING","all",74],["T_WHITESPACE"," ",74],["T_AS","as",74],["T_WHITESPACE"," ",74],["T_PRIVATE","private",74],["T_WHITESPACE"," ",74],["T_STRING","_all",74],";",["T_WHITESPACE","\n        ",74],["T_STRING","_decorateResults",75],["T_WHITESPACE"," ",75],["T_AS","as",75],["T_WHITESPACE"," ",75],["T_PRIVATE","private",75],["T_WHITESPACE"," ",75],["T_STRING","_applyDecorators",75],";",["T_WHITESPACE","\n        ",75],["T_STRING","__call",76],["T_WHITESPACE"," ",76],["T_AS","as",76],["T_WHITESPACE"," ",76],["T_PRIVATE","private",76],["T_WHITESPACE"," ",76],["T_STRING","_call",76],";",["T_WHITESPACE","\n    ",76],"}",["T_WHITESPACE","\n\n    ",77],["T_DOC_COMMENT","\/**\n     * Indicates that the operation should append to the list\n     *\n     * @var int\n     *\/",79],["T_WHITESPACE","\n    ",83],["T_CONST","const",84],["T_WHITESPACE"," ",84],["T_STRING","APPEND",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_LNUMBER","0",84],";",["T_WHITESPACE","\n\n    ",84],["T_DOC_COMMENT","\/**\n     * Indicates that the operation should prepend to the list\n     *\n     * @var int\n     *\/",86],["T_WHITESPACE","\n    ",90],["T_CONST","const",91],["T_WHITESPACE"," ",91],["T_STRING","PREPEND",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],["T_LNUMBER","1",91],";",["T_WHITESPACE","\n\n    ",91],["T_DOC_COMMENT","\/**\n     * Indicates that the operation should overwrite the list\n     *\n     * @var bool\n     *\/",93],["T_WHITESPACE","\n    ",97],["T_CONST","const",98],["T_WHITESPACE"," ",98],["T_STRING","OVERWRITE",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_STRING","true",98],";",["T_WHITESPACE","\n\n    ",98],["T_DOC_COMMENT","\/**\n     * Whether the user select any fields before being executed, this is used\n     * to determined if any fields should be automatically be selected.\n     *\n     * @var bool\n     *\/",100],["T_WHITESPACE","\n    ",105],["T_PROTECTED","protected",106],["T_WHITESPACE"," ",106],["T_VARIABLE","$_hasFields",106],";",["T_WHITESPACE","\n\n    ",106],["T_DOC_COMMENT","\/**\n     * Tracks whether or not the original query should include\n     * fields from the top level table.\n     *\n     * @var bool\n     *\/",108],["T_WHITESPACE","\n    ",113],["T_PROTECTED","protected",114],["T_WHITESPACE"," ",114],["T_VARIABLE","$_autoFields",114],";",["T_WHITESPACE","\n\n    ",114],["T_DOC_COMMENT","\/**\n     * Whether to hydrate results into entity objects\n     *\n     * @var bool\n     *\/",116],["T_WHITESPACE","\n    ",120],["T_PROTECTED","protected",121],["T_WHITESPACE"," ",121],["T_VARIABLE","$_hydrate",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_STRING","true",121],";",["T_WHITESPACE","\n\n    ",121],["T_DOC_COMMENT","\/**\n     * A callable function that can be used to calculate the total amount of\n     * records this query will match when not using `limit`\n     *\n     * @var callable\n     *\/",123],["T_WHITESPACE","\n    ",128],["T_PROTECTED","protected",129],["T_WHITESPACE"," ",129],["T_VARIABLE","$_counter",129],";",["T_WHITESPACE","\n\n    ",129],["T_DOC_COMMENT","\/**\n     * Instance of a class responsible for storing association containments and\n     * for eager loading them when this query is executed\n     *\n     * @var \\Cake\\ORM\\EagerLoader\n     *\/",131],["T_WHITESPACE","\n    ",136],["T_PROTECTED","protected",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$_eagerLoader",137],";",["T_WHITESPACE","\n\n    ",137],["T_DOC_COMMENT","\/**\n     * True if the beforeFind event has already been triggered for this query\n     *\n     * @var bool\n     *\/",139],["T_WHITESPACE","\n    ",143],["T_PROTECTED","protected",144],["T_WHITESPACE"," ",144],["T_VARIABLE","$_beforeFindFired",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_STRING","false",144],";",["T_WHITESPACE","\n\n    ",144],["T_DOC_COMMENT","\/**\n     * The COUNT(*) for the query.\n     *\n     * When set, count query execution will be bypassed.\n     *\n     * @var int\n     *\/",146],["T_WHITESPACE","\n    ",152],["T_PROTECTED","protected",153],["T_WHITESPACE"," ",153],["T_VARIABLE","$_resultsCount",153],";",["T_WHITESPACE","\n\n    ",153],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param \\Cake\\Datasource\\ConnectionInterface $connection The connection object\n     * @param \\Cake\\ORM\\Table $table The table this query is starting on\n     *\/",155],["T_WHITESPACE","\n    ",160],["T_PUBLIC","public",161],["T_WHITESPACE"," ",161],["T_FUNCTION","function",161],["T_WHITESPACE"," ",161],["T_STRING","__construct",161],"(",["T_VARIABLE","$connection",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$table",161],")",["T_WHITESPACE","\n    ",161],"{",["T_WHITESPACE","\n        ",162],["T_STRING","parent",163],["T_DOUBLE_COLON","::",163],["T_STRING","__construct",163],"(",["T_VARIABLE","$connection",163],")",";",["T_WHITESPACE","\n        ",163],["T_VARIABLE","$this",164],["T_OBJECT_OPERATOR","->",164],["T_STRING","repository",164],"(",["T_VARIABLE","$table",164],")",";",["T_WHITESPACE","\n\n        ",164],["T_IF","if",166],["T_WHITESPACE"," ",166],"(",["T_VARIABLE","$this",166],["T_OBJECT_OPERATOR","->",166],["T_STRING","_repository",166],")",["T_WHITESPACE"," ",166],"{",["T_WHITESPACE","\n            ",166],["T_VARIABLE","$this",167],["T_OBJECT_OPERATOR","->",167],["T_STRING","addDefaultTypes",167],"(",["T_VARIABLE","$this",167],["T_OBJECT_OPERATOR","->",167],["T_STRING","_repository",167],")",";",["T_WHITESPACE","\n        ",167],"}",["T_WHITESPACE","\n    ",168],"}",["T_WHITESPACE","\n\n    ",169],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * If you pass an instance of a `Cake\\ORM\\Table` or `Cake\\ORM\\Association` class,\n     * all the fields in the schema of the table or the association will be added to\n     * the select clause.\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string|\\Cake\\ORM\\Table|\\Cake\\ORM\\Association $fields fields\n     * to be added to the list.\n     * @param bool $overwrite whether to reset fields with passed list or not\n     * @return $this\n     *\/",171],["T_WHITESPACE","\n    ",182],["T_PUBLIC","public",183],["T_WHITESPACE"," ",183],["T_FUNCTION","function",183],["T_WHITESPACE"," ",183],["T_STRING","select",183],"(",["T_VARIABLE","$fields",183],["T_WHITESPACE"," ",183],"=",["T_WHITESPACE"," ",183],"[","]",",",["T_WHITESPACE"," ",183],["T_VARIABLE","$overwrite",183],["T_WHITESPACE"," ",183],"=",["T_WHITESPACE"," ",183],["T_STRING","false",183],")",["T_WHITESPACE","\n    ",183],"{",["T_WHITESPACE","\n        ",184],["T_IF","if",185],["T_WHITESPACE"," ",185],"(",["T_VARIABLE","$fields",185],["T_WHITESPACE"," ",185],["T_INSTANCEOF","instanceof",185],["T_WHITESPACE"," ",185],["T_STRING","Association",185],")",["T_WHITESPACE"," ",185],"{",["T_WHITESPACE","\n            ",185],["T_VARIABLE","$fields",186],["T_WHITESPACE"," ",186],"=",["T_WHITESPACE"," ",186],["T_VARIABLE","$fields",186],["T_OBJECT_OPERATOR","->",186],["T_STRING","target",186],"(",")",";",["T_WHITESPACE","\n        ",186],"}",["T_WHITESPACE","\n\n        ",187],["T_IF","if",189],["T_WHITESPACE"," ",189],"(",["T_VARIABLE","$fields",189],["T_WHITESPACE"," ",189],["T_INSTANCEOF","instanceof",189],["T_WHITESPACE"," ",189],["T_STRING","Table",189],")",["T_WHITESPACE"," ",189],"{",["T_WHITESPACE","\n            ",189],["T_VARIABLE","$fields",190],["T_WHITESPACE"," ",190],"=",["T_WHITESPACE"," ",190],["T_VARIABLE","$this",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","aliasFields",190],"(",["T_VARIABLE","$fields",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","schema",190],"(",")",["T_OBJECT_OPERATOR","->",190],["T_STRING","columns",190],"(",")",",",["T_WHITESPACE"," ",190],["T_VARIABLE","$fields",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","alias",190],"(",")",")",";",["T_WHITESPACE","\n        ",190],"}",["T_WHITESPACE","\n\n        ",191],["T_RETURN","return",193],["T_WHITESPACE"," ",193],["T_STRING","parent",193],["T_DOUBLE_COLON","::",193],["T_STRING","select",193],"(",["T_VARIABLE","$fields",193],",",["T_WHITESPACE"," ",193],["T_VARIABLE","$overwrite",193],")",";",["T_WHITESPACE","\n    ",193],"}",["T_WHITESPACE","\n\n    ",194],["T_DOC_COMMENT","\/**\n     * Hints this object to associate the correct types when casting conditions\n     * for the database. This is done by extracting the field types from the schema\n     * associated to the passed table object. This prevents the user from repeating\n     * himself when specifying conditions.\n     *\n     * This method returns the same query object for chaining.\n     *\n     * @param \\Cake\\ORM\\Table $table The table to pull types from\n     * @return $this\n     *\/",196],["T_WHITESPACE","\n    ",206],["T_PUBLIC","public",207],["T_WHITESPACE"," ",207],["T_FUNCTION","function",207],["T_WHITESPACE"," ",207],["T_STRING","addDefaultTypes",207],"(",["T_STRING","Table",207],["T_WHITESPACE"," ",207],["T_VARIABLE","$table",207],")",["T_WHITESPACE","\n    ",207],"{",["T_WHITESPACE","\n        ",208],["T_VARIABLE","$alias",209],["T_WHITESPACE"," ",209],"=",["T_WHITESPACE"," ",209],["T_VARIABLE","$table",209],["T_OBJECT_OPERATOR","->",209],["T_STRING","alias",209],"(",")",";",["T_WHITESPACE","\n        ",209],["T_VARIABLE","$map",210],["T_WHITESPACE"," ",210],"=",["T_WHITESPACE"," ",210],["T_VARIABLE","$table",210],["T_OBJECT_OPERATOR","->",210],["T_STRING","schema",210],"(",")",["T_OBJECT_OPERATOR","->",210],["T_STRING","typeMap",210],"(",")",";",["T_WHITESPACE","\n        ",210],["T_VARIABLE","$fields",211],["T_WHITESPACE"," ",211],"=",["T_WHITESPACE"," ",211],"[","]",";",["T_WHITESPACE","\n        ",211],["T_FOREACH","foreach",212],["T_WHITESPACE"," ",212],"(",["T_VARIABLE","$map",212],["T_WHITESPACE"," ",212],["T_AS","as",212],["T_WHITESPACE"," ",212],["T_VARIABLE","$f",212],["T_WHITESPACE"," ",212],["T_DOUBLE_ARROW","=>",212],["T_WHITESPACE"," ",212],["T_VARIABLE","$type",212],")",["T_WHITESPACE"," ",212],"{",["T_WHITESPACE","\n            ",212],["T_VARIABLE","$fields",213],"[",["T_VARIABLE","$f",213],"]",["T_WHITESPACE"," ",213],"=",["T_WHITESPACE"," ",213],["T_VARIABLE","$fields",213],"[",["T_VARIABLE","$alias",213],["T_WHITESPACE"," ",213],".",["T_WHITESPACE"," ",213],["T_CONSTANT_ENCAPSED_STRING","'.'",213],["T_WHITESPACE"," ",213],".",["T_WHITESPACE"," ",213],["T_VARIABLE","$f",213],"]",["T_WHITESPACE"," ",213],"=",["T_WHITESPACE"," ",213],["T_VARIABLE","$fields",213],"[",["T_VARIABLE","$alias",213],["T_WHITESPACE"," ",213],".",["T_WHITESPACE"," ",213],["T_CONSTANT_ENCAPSED_STRING","'__'",213],["T_WHITESPACE"," ",213],".",["T_WHITESPACE"," ",213],["T_VARIABLE","$f",213],"]",["T_WHITESPACE"," ",213],"=",["T_WHITESPACE"," ",213],["T_VARIABLE","$type",213],";",["T_WHITESPACE","\n        ",213],"}",["T_WHITESPACE","\n        ",214],["T_VARIABLE","$this",215],["T_OBJECT_OPERATOR","->",215],["T_STRING","typeMap",215],"(",")",["T_OBJECT_OPERATOR","->",215],["T_STRING","addDefaults",215],"(",["T_VARIABLE","$fields",215],")",";",["T_WHITESPACE","\n\n        ",215],["T_RETURN","return",217],["T_WHITESPACE"," ",217],["T_VARIABLE","$this",217],";",["T_WHITESPACE","\n    ",217],"}",["T_WHITESPACE","\n\n    ",218],["T_DOC_COMMENT","\/**\n     * Sets the instance of the eager loader class to use for loading associations\n     * and storing containments. If called with no arguments, it will return the\n     * currently configured instance.\n     *\n     * @param \\Cake\\ORM\\EagerLoader|null $instance The eager loader to use. Pass null\n     *   to get the current eagerloader.\n     * @return \\Cake\\ORM\\EagerLoader|$this\n     *\/",220],["T_WHITESPACE","\n    ",228],["T_PUBLIC","public",229],["T_WHITESPACE"," ",229],["T_FUNCTION","function",229],["T_WHITESPACE"," ",229],["T_STRING","eagerLoader",229],"(",["T_STRING","EagerLoader",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$instance",229],["T_WHITESPACE"," ",229],"=",["T_WHITESPACE"," ",229],["T_STRING","null",229],")",["T_WHITESPACE","\n    ",229],"{",["T_WHITESPACE","\n        ",230],["T_IF","if",231],["T_WHITESPACE"," ",231],"(",["T_VARIABLE","$instance",231],["T_WHITESPACE"," ",231],["T_IS_IDENTICAL","===",231],["T_WHITESPACE"," ",231],["T_STRING","null",231],")",["T_WHITESPACE"," ",231],"{",["T_WHITESPACE","\n            ",231],["T_IF","if",232],["T_WHITESPACE"," ",232],"(",["T_VARIABLE","$this",232],["T_OBJECT_OPERATOR","->",232],["T_STRING","_eagerLoader",232],["T_WHITESPACE"," ",232],["T_IS_IDENTICAL","===",232],["T_WHITESPACE"," ",232],["T_STRING","null",232],")",["T_WHITESPACE"," ",232],"{",["T_WHITESPACE","\n                ",232],["T_VARIABLE","$this",233],["T_OBJECT_OPERATOR","->",233],["T_STRING","_eagerLoader",233],["T_WHITESPACE"," ",233],"=",["T_WHITESPACE"," ",233],["T_NEW","new",233],["T_WHITESPACE"," ",233],["T_STRING","EagerLoader",233],"(",")",";",["T_WHITESPACE","\n            ",233],"}",["T_WHITESPACE","\n\n            ",234],["T_RETURN","return",236],["T_WHITESPACE"," ",236],["T_VARIABLE","$this",236],["T_OBJECT_OPERATOR","->",236],["T_STRING","_eagerLoader",236],";",["T_WHITESPACE","\n        ",236],"}",["T_WHITESPACE","\n        ",237],["T_VARIABLE","$this",238],["T_OBJECT_OPERATOR","->",238],["T_STRING","_eagerLoader",238],["T_WHITESPACE"," ",238],"=",["T_WHITESPACE"," ",238],["T_VARIABLE","$instance",238],";",["T_WHITESPACE","\n\n        ",238],["T_RETURN","return",240],["T_WHITESPACE"," ",240],["T_VARIABLE","$this",240],";",["T_WHITESPACE","\n    ",240],"}",["T_WHITESPACE","\n\n    ",241],["T_DOC_COMMENT","\/**\n     * Sets the list of associations that should be eagerly loaded along with this\n     * query. The list of associated tables passed must have been previously set as\n     * associations using the Table API.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring articles' author information\n     * $query->contain('Author');\n     *\n     * \/\/ Also bring the category and tags associated to each article\n     * $query->contain(['Category', 'Tag']);\n     * ```\n     *\n     * Associations can be arbitrarily nested using dot notation or nested arrays,\n     * this allows this object to calculate joins or any additional queries that\n     * must be executed to bring the required associated data.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Eager load the product info, and for each product load other 2 associations\n     * $query->contain(['Product' => ['Manufacturer', 'Distributor']);\n     *\n     * \/\/ Which is equivalent to calling\n     * $query->contain(['Products.Manufactures', 'Products.Distributors']);\n     *\n     * \/\/ For an author query, load his region, state and country\n     * $query->contain('Regions.States.Countries');\n     * ```\n     *\n     * It is possible to control the conditions and fields selected for each of the\n     * contained associations:\n     *\n     * ### Example:\n     *\n     * ```\n     * $query->contain(['Tags' => function ($q) {\n     *     return $q->where(['Tags.is_popular' => true]);\n     * }]);\n     *\n     * $query->contain(['Products.Manufactures' => function ($q) {\n     *     return $q->select(['name'])->where(['Manufactures.active' => true]);\n     * }]);\n     * ```\n     *\n     * Each association might define special options when eager loaded, the allowed\n     * options that can be set per association are:\n     *\n     * - `foreignKey`: Used to set a different field to match both tables, if set to false\n     *   no join conditions will be generated automatically. `false` can only be used on\n     *   joinable associations and cannot be used with hasMany or belongsToMany associations.\n     * - `fields`: An array with the fields that should be fetched from the association.\n     * - `finder`: The finder to use when loading associated records. Either the name of the\n     *   finder as a string, or an array to define options to pass to the finder.\n     * - `queryBuilder`: Equivalent to passing a callable instead of an options array.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Set options for the hasMany articles that will be eagerly loaded for an author\n     * $query->contain([\n     *     'Articles' => [\n     *         'fields' => ['title', 'author_id']\n     *     ]\n     * ]);\n     * ```\n     *\n     * Finders can be configured to use options.\n     *\n     * ```\n     * \/\/ Retrieve translations for the articles, but only those for the `en` and `es` locales\n     * $query->contain([\n     *     'Articles' => [\n     *         'finder' => [\n     *             'translations' => [\n     *                 'locales' => ['en', 'es']\n     *             ]\n     *         ]\n     *     ]\n     * ]);\n     * ```\n     *\n     * When containing associations, it is important to include foreign key columns.\n     * Failing to do so will trigger exceptions.\n     *\n     * ```\n     * \/\/ Use special join conditions for getting an Articles's belongsTo 'authors'\n     * $query->contain([\n     *     'Authors' => [\n     *         'foreignKey' => false,\n     *         'queryBuilder' => function ($q) {\n     *             return $q->where(...); \/\/ Add full filtering conditions\n     *         }\n     *     ]\n     * ]);\n     * ```\n     *\n     * If called with no arguments, this function will return an array with\n     * with the list of previously configured associations to be contained in the\n     * result.\n     *\n     * If called with an empty first argument and `$override` is set to true, the\n     * previous list will be emptied.\n     *\n     * @param array|string|null $associations List of table aliases to be queried.\n     * @param bool $override Whether override previous list with the one passed\n     * defaults to merging previous list with the new one.\n     * @return array|$this\n     *\/",243],["T_WHITESPACE","\n    ",353],["T_PUBLIC","public",354],["T_WHITESPACE"," ",354],["T_FUNCTION","function",354],["T_WHITESPACE"," ",354],["T_STRING","contain",354],"(",["T_VARIABLE","$associations",354],["T_WHITESPACE"," ",354],"=",["T_WHITESPACE"," ",354],["T_STRING","null",354],",",["T_WHITESPACE"," ",354],["T_VARIABLE","$override",354],["T_WHITESPACE"," ",354],"=",["T_WHITESPACE"," ",354],["T_STRING","false",354],")",["T_WHITESPACE","\n    ",354],"{",["T_WHITESPACE","\n        ",355],["T_VARIABLE","$loader",356],["T_WHITESPACE"," ",356],"=",["T_WHITESPACE"," ",356],["T_VARIABLE","$this",356],["T_OBJECT_OPERATOR","->",356],["T_STRING","eagerLoader",356],"(",")",";",["T_WHITESPACE","\n        ",356],["T_IF","if",357],["T_WHITESPACE"," ",357],"(",["T_VARIABLE","$override",357],["T_WHITESPACE"," ",357],["T_IS_IDENTICAL","===",357],["T_WHITESPACE"," ",357],["T_STRING","true",357],")",["T_WHITESPACE"," ",357],"{",["T_WHITESPACE","\n            ",357],["T_VARIABLE","$loader",358],["T_OBJECT_OPERATOR","->",358],["T_STRING","clearContain",358],"(",")",";",["T_WHITESPACE","\n            ",358],["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","_dirty",359],"(",")",";",["T_WHITESPACE","\n        ",359],"}",["T_WHITESPACE","\n\n        ",360],["T_IF","if",362],["T_WHITESPACE"," ",362],"(",["T_VARIABLE","$associations",362],["T_WHITESPACE"," ",362],["T_IS_IDENTICAL","===",362],["T_WHITESPACE"," ",362],["T_STRING","null",362],")",["T_WHITESPACE"," ",362],"{",["T_WHITESPACE","\n            ",362],["T_RETURN","return",363],["T_WHITESPACE"," ",363],["T_VARIABLE","$loader",363],["T_OBJECT_OPERATOR","->",363],["T_STRING","contain",363],"(",")",";",["T_WHITESPACE","\n        ",363],"}",["T_WHITESPACE","\n\n        ",364],["T_VARIABLE","$result",366],["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],["T_VARIABLE","$loader",366],["T_OBJECT_OPERATOR","->",366],["T_STRING","contain",366],"(",["T_VARIABLE","$associations",366],")",";",["T_WHITESPACE","\n        ",366],["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","_addAssociationsToTypeMap",367],"(",["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","repository",367],"(",")",",",["T_WHITESPACE"," ",367],["T_VARIABLE","$this",367],["T_OBJECT_OPERATOR","->",367],["T_STRING","typeMap",367],"(",")",",",["T_WHITESPACE"," ",367],["T_VARIABLE","$result",367],")",";",["T_WHITESPACE","\n\n        ",367],["T_RETURN","return",369],["T_WHITESPACE"," ",369],["T_VARIABLE","$this",369],";",["T_WHITESPACE","\n    ",369],"}",["T_WHITESPACE","\n\n    ",370],["T_DOC_COMMENT","\/**\n     * Used to recursively add contained association column types to\n     * the query.\n     *\n     * @param \\Cake\\ORM\\Table $table The table instance to pluck associations from.\n     * @param \\Cake\\Database\\TypeMap $typeMap The typemap to check for columns in.\n     *   This typemap is indirectly mutated via Cake\\ORM\\Query::addDefaultTypes()\n     * @param array $associations The nested tree of associations to walk.\n     * @return void\n     *\/",372],["T_WHITESPACE","\n    ",381],["T_PROTECTED","protected",382],["T_WHITESPACE"," ",382],["T_FUNCTION","function",382],["T_WHITESPACE"," ",382],["T_STRING","_addAssociationsToTypeMap",382],"(",["T_VARIABLE","$table",382],",",["T_WHITESPACE"," ",382],["T_VARIABLE","$typeMap",382],",",["T_WHITESPACE"," ",382],["T_VARIABLE","$associations",382],")",["T_WHITESPACE","\n    ",382],"{",["T_WHITESPACE","\n        ",383],["T_FOREACH","foreach",384],["T_WHITESPACE"," ",384],"(",["T_VARIABLE","$associations",384],["T_WHITESPACE"," ",384],["T_AS","as",384],["T_WHITESPACE"," ",384],["T_VARIABLE","$name",384],["T_WHITESPACE"," ",384],["T_DOUBLE_ARROW","=>",384],["T_WHITESPACE"," ",384],["T_VARIABLE","$nested",384],")",["T_WHITESPACE"," ",384],"{",["T_WHITESPACE","\n            ",384],["T_VARIABLE","$association",385],["T_WHITESPACE"," ",385],"=",["T_WHITESPACE"," ",385],["T_VARIABLE","$table",385],["T_OBJECT_OPERATOR","->",385],["T_STRING","association",385],"(",["T_VARIABLE","$name",385],")",";",["T_WHITESPACE","\n            ",385],["T_IF","if",386],["T_WHITESPACE"," ",386],"(","!",["T_VARIABLE","$association",386],")",["T_WHITESPACE"," ",386],"{",["T_WHITESPACE","\n                ",386],["T_CONTINUE","continue",387],";",["T_WHITESPACE","\n            ",387],"}",["T_WHITESPACE","\n            ",388],["T_VARIABLE","$target",389],["T_WHITESPACE"," ",389],"=",["T_WHITESPACE"," ",389],["T_VARIABLE","$association",389],["T_OBJECT_OPERATOR","->",389],["T_STRING","target",389],"(",")",";",["T_WHITESPACE","\n            ",389],["T_VARIABLE","$primary",390],["T_WHITESPACE"," ",390],"=",["T_WHITESPACE"," ",390],["T_ARRAY_CAST","(array)",390],["T_VARIABLE","$target",390],["T_OBJECT_OPERATOR","->",390],["T_STRING","primaryKey",390],"(",")",";",["T_WHITESPACE","\n            ",390],["T_IF","if",391],["T_WHITESPACE"," ",391],"(",["T_EMPTY","empty",391],"(",["T_VARIABLE","$primary",391],")",["T_WHITESPACE"," ",391],["T_BOOLEAN_OR","||",391],["T_WHITESPACE"," ",391],["T_VARIABLE","$typeMap",391],["T_OBJECT_OPERATOR","->",391],["T_STRING","type",391],"(",["T_VARIABLE","$target",391],["T_OBJECT_OPERATOR","->",391],["T_STRING","aliasField",391],"(",["T_VARIABLE","$primary",391],"[",["T_LNUMBER","0",391],"]",")",")",["T_WHITESPACE"," ",391],["T_IS_IDENTICAL","===",391],["T_WHITESPACE"," ",391],["T_STRING","null",391],")",["T_WHITESPACE"," ",391],"{",["T_WHITESPACE","\n                ",391],["T_VARIABLE","$this",392],["T_OBJECT_OPERATOR","->",392],["T_STRING","addDefaultTypes",392],"(",["T_VARIABLE","$target",392],")",";",["T_WHITESPACE","\n            ",392],"}",["T_WHITESPACE","\n            ",393],["T_IF","if",394],["T_WHITESPACE"," ",394],"(","!",["T_EMPTY","empty",394],"(",["T_VARIABLE","$nested",394],")",")",["T_WHITESPACE"," ",394],"{",["T_WHITESPACE","\n                ",394],["T_VARIABLE","$this",395],["T_OBJECT_OPERATOR","->",395],["T_STRING","_addAssociationsToTypeMap",395],"(",["T_VARIABLE","$target",395],",",["T_WHITESPACE"," ",395],["T_VARIABLE","$typeMap",395],",",["T_WHITESPACE"," ",395],["T_VARIABLE","$nested",395],")",";",["T_WHITESPACE","\n            ",395],"}",["T_WHITESPACE","\n        ",396],"}",["T_WHITESPACE","\n    ",397],"}",["T_WHITESPACE","\n\n    ",398],["T_DOC_COMMENT","\/**\n     * Adds filtering conditions to this query to only bring rows that have a relation\n     * to another from an associated table, based on conditions in the associated table.\n     *\n     * This function will add entries in the `contain` graph.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring only articles that were tagged with 'cake'\n     * $query->matching('Tags', function ($q) {\n     *     return $q->where(['name' => 'cake']);\n     * );\n     * ```\n     *\n     * It is possible to filter by deep associations by using dot notation:\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring only articles that were commented by 'markstory'\n     * $query->matching('Comments.Users', function ($q) {\n     *     return $q->where(['username' => 'markstory']);\n     * );\n     * ```\n     *\n     * As this function will create `INNER JOIN`, you might want to consider\n     * calling `distinct` on this query as you might get duplicate rows if\n     * your conditions don't filter them already. This might be the case, for example,\n     * of the same user commenting more than once in the same article.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring unique articles that were commented by 'markstory'\n     * $query->distinct(['Articles.id'])\n     * ->matching('Comments.Users', function ($q) {\n     *     return $q->where(['username' => 'markstory']);\n     * );\n     * ```\n     *\n     * Please note that the query passed to the closure will only accept calling\n     * `select`, `where`, `andWhere` and `orWhere` on it. If you wish to\n     * add more complex clauses you can do it directly in the main query.\n     *\n     * @param string $assoc The association to filter by\n     * @param callable|null $builder a function that will receive a pre-made query object\n     * that can be used to add custom conditions or selecting some fields\n     * @return $this\n     *\/",400],["T_WHITESPACE","\n    ",449],["T_PUBLIC","public",450],["T_WHITESPACE"," ",450],["T_FUNCTION","function",450],["T_WHITESPACE"," ",450],["T_STRING","matching",450],"(",["T_VARIABLE","$assoc",450],",",["T_WHITESPACE"," ",450],["T_CALLABLE","callable",450],["T_WHITESPACE"," ",450],["T_VARIABLE","$builder",450],["T_WHITESPACE"," ",450],"=",["T_WHITESPACE"," ",450],["T_STRING","null",450],")",["T_WHITESPACE","\n    ",450],"{",["T_WHITESPACE","\n        ",451],["T_VARIABLE","$result",452],["T_WHITESPACE"," ",452],"=",["T_WHITESPACE"," ",452],["T_VARIABLE","$this",452],["T_OBJECT_OPERATOR","->",452],["T_STRING","eagerLoader",452],"(",")",["T_OBJECT_OPERATOR","->",452],["T_STRING","matching",452],"(",["T_VARIABLE","$assoc",452],",",["T_WHITESPACE"," ",452],["T_VARIABLE","$builder",452],")",";",["T_WHITESPACE","\n        ",452],["T_VARIABLE","$this",453],["T_OBJECT_OPERATOR","->",453],["T_STRING","_addAssociationsToTypeMap",453],"(",["T_VARIABLE","$this",453],["T_OBJECT_OPERATOR","->",453],["T_STRING","repository",453],"(",")",",",["T_WHITESPACE"," ",453],["T_VARIABLE","$this",453],["T_OBJECT_OPERATOR","->",453],["T_STRING","typeMap",453],"(",")",",",["T_WHITESPACE"," ",453],["T_VARIABLE","$result",453],")",";",["T_WHITESPACE","\n        ",453],["T_VARIABLE","$this",454],["T_OBJECT_OPERATOR","->",454],["T_STRING","_dirty",454],"(",")",";",["T_WHITESPACE","\n\n        ",454],["T_RETURN","return",456],["T_WHITESPACE"," ",456],["T_VARIABLE","$this",456],";",["T_WHITESPACE","\n    ",456],"}",["T_WHITESPACE","\n\n    ",457],["T_DOC_COMMENT","\/**\n     * Creates a LEFT JOIN with the passed association table while preserving\n     * the foreign key matching and the custom conditions that were originally set\n     * for it.\n     *\n     * This function will add entries in the `contain` graph.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Get the count of articles per user\n     * $usersQuery\n     *     ->select(['total_articles' => $query->func()->count('Articles.id')])\n     *     ->leftJoinWith('Articles')\n     *     ->group(['Users.id'])\n     *     ->autoFields(true);\n     * ```\n     *\n     * You can also customize the conditions passed to the LEFT JOIN:\n     *\n     * ```\n     * \/\/ Get the count of articles per user with at least 5 votes\n     * $usersQuery\n     *     ->select(['total_articles' => $query->func()->count('Articles.id')])\n     *     ->leftJoinWith('Articles', function ($q) {\n     *         return $q->where(['Articles.votes >=' => 5]);\n     *     })\n     *     ->group(['Users.id'])\n     *     ->autoFields(true);\n     * ```\n     *\n     * This will create the following SQL:\n     *\n     * ```\n     * SELECT COUNT(Articles.id) AS total_articles, Users.*\n     * FROM users Users\n     * LEFT JOIN articles Articles ON Articles.user_id = Users.id AND Articles.votes >= 5\n     * GROUP BY USers.id\n     * ```\n     *\n     * It is possible to left join deep associations by using dot notation\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Total comments in articles by 'markstory'\n     * $query\n     *  ->select(['total_comments' => $query->func()->count('Comments.id')])\n     *  ->leftJoinWith('Comments.Users', function ($q) {\n     *     return $q->where(['username' => 'markstory']);\n     * )\n     * ->group(['Users.id']);\n     * ```\n     *\n     * Please note that the query passed to the closure will only accept calling\n     * `select`, `where`, `andWhere` and `orWhere` on it. If you wish to\n     * add more complex clauses you can do it directly in the main query.\n     *\n     * @param string $assoc The association to join with\n     * @param callable|null $builder a function that will receive a pre-made query object\n     * that can be used to add custom conditions or selecting some fields\n     * @return $this\n     *\/",459],["T_WHITESPACE","\n    ",521],["T_PUBLIC","public",522],["T_WHITESPACE"," ",522],["T_FUNCTION","function",522],["T_WHITESPACE"," ",522],["T_STRING","leftJoinWith",522],"(",["T_VARIABLE","$assoc",522],",",["T_WHITESPACE"," ",522],["T_CALLABLE","callable",522],["T_WHITESPACE"," ",522],["T_VARIABLE","$builder",522],["T_WHITESPACE"," ",522],"=",["T_WHITESPACE"," ",522],["T_STRING","null",522],")",["T_WHITESPACE","\n    ",522],"{",["T_WHITESPACE","\n        ",523],["T_VARIABLE","$result",524],["T_WHITESPACE"," ",524],"=",["T_WHITESPACE"," ",524],["T_VARIABLE","$this",524],["T_OBJECT_OPERATOR","->",524],["T_STRING","eagerLoader",524],"(",")",["T_OBJECT_OPERATOR","->",524],["T_STRING","matching",524],"(",["T_VARIABLE","$assoc",524],",",["T_WHITESPACE"," ",524],["T_VARIABLE","$builder",524],",",["T_WHITESPACE"," ",524],"[",["T_WHITESPACE","\n            ",524],["T_CONSTANT_ENCAPSED_STRING","'joinType'",525],["T_WHITESPACE"," ",525],["T_DOUBLE_ARROW","=>",525],["T_WHITESPACE"," ",525],["T_CONSTANT_ENCAPSED_STRING","'LEFT'",525],",",["T_WHITESPACE","\n            ",525],["T_CONSTANT_ENCAPSED_STRING","'fields'",526],["T_WHITESPACE"," ",526],["T_DOUBLE_ARROW","=>",526],["T_WHITESPACE"," ",526],["T_STRING","false",526],["T_WHITESPACE","\n        ",526],"]",")",";",["T_WHITESPACE","\n        ",527],["T_VARIABLE","$this",528],["T_OBJECT_OPERATOR","->",528],["T_STRING","_addAssociationsToTypeMap",528],"(",["T_VARIABLE","$this",528],["T_OBJECT_OPERATOR","->",528],["T_STRING","repository",528],"(",")",",",["T_WHITESPACE"," ",528],["T_VARIABLE","$this",528],["T_OBJECT_OPERATOR","->",528],["T_STRING","typeMap",528],"(",")",",",["T_WHITESPACE"," ",528],["T_VARIABLE","$result",528],")",";",["T_WHITESPACE","\n        ",528],["T_VARIABLE","$this",529],["T_OBJECT_OPERATOR","->",529],["T_STRING","_dirty",529],"(",")",";",["T_WHITESPACE","\n\n        ",529],["T_RETURN","return",531],["T_WHITESPACE"," ",531],["T_VARIABLE","$this",531],";",["T_WHITESPACE","\n    ",531],"}",["T_WHITESPACE","\n\n    ",532],["T_DOC_COMMENT","\/**\n     * Creates an INNER JOIN with the passed association table while preserving\n     * the foreign key matching and the custom conditions that were originally set\n     * for it.\n     *\n     * This function will add entries in the `contain` graph.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring only articles that were tagged with 'cake'\n     * $query->innerJoinWith('Tags', function ($q) {\n     *     return $q->where(['name' => 'cake']);\n     * );\n     * ```\n     *\n     * This will create the following SQL:\n     *\n     * ```\n     * SELECT Articles.*\n     * FROM articles Articles\n     * INNER JOIN tags Tags ON Tags.name = 'cake'\n     * INNER JOIN articles_tags ArticlesTags ON ArticlesTags.tag_id = Tags.id\n     *   AND ArticlesTags.articles_id = Articles.id\n     * ```\n     *\n     * This function works the same as `matching()` with the difference that it\n     * will select no fields from the association.\n     *\n     * @param string $assoc The association to join with\n     * @param callable|null $builder a function that will receive a pre-made query object\n     * that can be used to add custom conditions or selecting some fields\n     * @return $this\n     * @see \\Cake\\ORM\\Query::matching()\n     *\/",534],["T_WHITESPACE","\n    ",568],["T_PUBLIC","public",569],["T_WHITESPACE"," ",569],["T_FUNCTION","function",569],["T_WHITESPACE"," ",569],["T_STRING","innerJoinWith",569],"(",["T_VARIABLE","$assoc",569],",",["T_WHITESPACE"," ",569],["T_CALLABLE","callable",569],["T_WHITESPACE"," ",569],["T_VARIABLE","$builder",569],["T_WHITESPACE"," ",569],"=",["T_WHITESPACE"," ",569],["T_STRING","null",569],")",["T_WHITESPACE","\n    ",569],"{",["T_WHITESPACE","\n        ",570],["T_VARIABLE","$result",571],["T_WHITESPACE"," ",571],"=",["T_WHITESPACE"," ",571],["T_VARIABLE","$this",571],["T_OBJECT_OPERATOR","->",571],["T_STRING","eagerLoader",571],"(",")",["T_OBJECT_OPERATOR","->",571],["T_STRING","matching",571],"(",["T_VARIABLE","$assoc",571],",",["T_WHITESPACE"," ",571],["T_VARIABLE","$builder",571],",",["T_WHITESPACE"," ",571],"[",["T_WHITESPACE","\n            ",571],["T_CONSTANT_ENCAPSED_STRING","'joinType'",572],["T_WHITESPACE"," ",572],["T_DOUBLE_ARROW","=>",572],["T_WHITESPACE"," ",572],["T_CONSTANT_ENCAPSED_STRING","'INNER'",572],",",["T_WHITESPACE","\n            ",572],["T_CONSTANT_ENCAPSED_STRING","'fields'",573],["T_WHITESPACE"," ",573],["T_DOUBLE_ARROW","=>",573],["T_WHITESPACE"," ",573],["T_STRING","false",573],["T_WHITESPACE","\n        ",573],"]",")",";",["T_WHITESPACE","\n        ",574],["T_VARIABLE","$this",575],["T_OBJECT_OPERATOR","->",575],["T_STRING","_addAssociationsToTypeMap",575],"(",["T_VARIABLE","$this",575],["T_OBJECT_OPERATOR","->",575],["T_STRING","repository",575],"(",")",",",["T_WHITESPACE"," ",575],["T_VARIABLE","$this",575],["T_OBJECT_OPERATOR","->",575],["T_STRING","typeMap",575],"(",")",",",["T_WHITESPACE"," ",575],["T_VARIABLE","$result",575],")",";",["T_WHITESPACE","\n        ",575],["T_VARIABLE","$this",576],["T_OBJECT_OPERATOR","->",576],["T_STRING","_dirty",576],"(",")",";",["T_WHITESPACE","\n\n        ",576],["T_RETURN","return",578],["T_WHITESPACE"," ",578],["T_VARIABLE","$this",578],";",["T_WHITESPACE","\n    ",578],"}",["T_WHITESPACE","\n\n    ",579],["T_DOC_COMMENT","\/**\n     * Adds filtering conditions to this query to only bring rows that have no match\n     * to another from an associated table, based on conditions in the associated table.\n     *\n     * This function will add entries in the `contain` graph.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring only articles that were not tagged with 'cake'\n     * $query->notMatching('Tags', function ($q) {\n     *     return $q->where(['name' => 'cake']);\n     * );\n     * ```\n     *\n     * It is possible to filter by deep associations by using dot notation:\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring only articles that weren't commented by 'markstory'\n     * $query->notMatching('Comments.Users', function ($q) {\n     *     return $q->where(['username' => 'markstory']);\n     * );\n     * ```\n     *\n     * As this function will create a `LEFT JOIN`, you might want to consider\n     * calling `distinct` on this query as you might get duplicate rows if\n     * your conditions don't filter them already. This might be the case, for example,\n     * of the same article having multiple comments.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Bring unique articles that were commented by 'markstory'\n     * $query->distinct(['Articles.id'])\n     * ->notMatching('Comments.Users', function ($q) {\n     *     return $q->where(['username' => 'markstory']);\n     * );\n     * ```\n     *\n     * Please note that the query passed to the closure will only accept calling\n     * `select`, `where`, `andWhere` and `orWhere` on it. If you wish to\n     * add more complex clauses you can do it directly in the main query.\n     *\n     * @param string $assoc The association to filter by\n     * @param callable|null $builder a function that will receive a pre-made query object\n     * that can be used to add custom conditions or selecting some fields\n     * @return $this\n     *\/",581],["T_WHITESPACE","\n    ",630],["T_PUBLIC","public",631],["T_WHITESPACE"," ",631],["T_FUNCTION","function",631],["T_WHITESPACE"," ",631],["T_STRING","notMatching",631],"(",["T_VARIABLE","$assoc",631],",",["T_WHITESPACE"," ",631],["T_CALLABLE","callable",631],["T_WHITESPACE"," ",631],["T_VARIABLE","$builder",631],["T_WHITESPACE"," ",631],"=",["T_WHITESPACE"," ",631],["T_STRING","null",631],")",["T_WHITESPACE","\n    ",631],"{",["T_WHITESPACE","\n        ",632],["T_VARIABLE","$result",633],["T_WHITESPACE"," ",633],"=",["T_WHITESPACE"," ",633],["T_VARIABLE","$this",633],["T_OBJECT_OPERATOR","->",633],["T_STRING","eagerLoader",633],"(",")",["T_OBJECT_OPERATOR","->",633],["T_STRING","matching",633],"(",["T_VARIABLE","$assoc",633],",",["T_WHITESPACE"," ",633],["T_VARIABLE","$builder",633],",",["T_WHITESPACE"," ",633],"[",["T_WHITESPACE","\n            ",633],["T_CONSTANT_ENCAPSED_STRING","'joinType'",634],["T_WHITESPACE"," ",634],["T_DOUBLE_ARROW","=>",634],["T_WHITESPACE"," ",634],["T_CONSTANT_ENCAPSED_STRING","'LEFT'",634],",",["T_WHITESPACE","\n            ",634],["T_CONSTANT_ENCAPSED_STRING","'fields'",635],["T_WHITESPACE"," ",635],["T_DOUBLE_ARROW","=>",635],["T_WHITESPACE"," ",635],["T_STRING","false",635],",",["T_WHITESPACE","\n            ",635],["T_CONSTANT_ENCAPSED_STRING","'negateMatch'",636],["T_WHITESPACE"," ",636],["T_DOUBLE_ARROW","=>",636],["T_WHITESPACE"," ",636],["T_STRING","true",636],["T_WHITESPACE","\n        ",636],"]",")",";",["T_WHITESPACE","\n        ",637],["T_VARIABLE","$this",638],["T_OBJECT_OPERATOR","->",638],["T_STRING","_addAssociationsToTypeMap",638],"(",["T_VARIABLE","$this",638],["T_OBJECT_OPERATOR","->",638],["T_STRING","repository",638],"(",")",",",["T_WHITESPACE"," ",638],["T_VARIABLE","$this",638],["T_OBJECT_OPERATOR","->",638],["T_STRING","typeMap",638],"(",")",",",["T_WHITESPACE"," ",638],["T_VARIABLE","$result",638],")",";",["T_WHITESPACE","\n        ",638],["T_VARIABLE","$this",639],["T_OBJECT_OPERATOR","->",639],["T_STRING","_dirty",639],"(",")",";",["T_WHITESPACE","\n\n        ",639],["T_RETURN","return",641],["T_WHITESPACE"," ",641],["T_VARIABLE","$this",641],";",["T_WHITESPACE","\n    ",641],"}",["T_WHITESPACE","\n\n    ",642],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * Populates or adds parts to current query clauses using an array.\n     * This is handy for passing all query clauses at once. The option array accepts:\n     *\n     * - fields: Maps to the select method\n     * - conditions: Maps to the where method\n     * - limit: Maps to the limit method\n     * - order: Maps to the order method\n     * - offset: Maps to the offset method\n     * - group: Maps to the group method\n     * - having: Maps to the having method\n     * - contain: Maps to the contain options for eager loading\n     * - join: Maps to the join method\n     * - page: Maps to the page method\n     *\n     * ### Example:\n     *\n     * ```\n     * $query->applyOptions([\n     *   'fields' => ['id', 'name'],\n     *   'conditions' => [\n     *     'created >=' => '2013-01-01'\n     *   ],\n     *   'limit' => 10\n     * ]);\n     * ```\n     *\n     * Is equivalent to:\n     *\n     * ```\n     * $query\n     *   ->select(['id', 'name'])\n     *   ->where(['created >=' => '2013-01-01'])\n     *   ->limit(10)\n     * ```\n     *\/",644],["T_WHITESPACE","\n    ",681],["T_PUBLIC","public",682],["T_WHITESPACE"," ",682],["T_FUNCTION","function",682],["T_WHITESPACE"," ",682],["T_STRING","applyOptions",682],"(",["T_ARRAY","array",682],["T_WHITESPACE"," ",682],["T_VARIABLE","$options",682],")",["T_WHITESPACE","\n    ",682],"{",["T_WHITESPACE","\n        ",683],["T_VARIABLE","$valid",684],["T_WHITESPACE"," ",684],"=",["T_WHITESPACE"," ",684],"[",["T_WHITESPACE","\n            ",684],["T_CONSTANT_ENCAPSED_STRING","'fields'",685],["T_WHITESPACE"," ",685],["T_DOUBLE_ARROW","=>",685],["T_WHITESPACE"," ",685],["T_CONSTANT_ENCAPSED_STRING","'select'",685],",",["T_WHITESPACE","\n            ",685],["T_CONSTANT_ENCAPSED_STRING","'conditions'",686],["T_WHITESPACE"," ",686],["T_DOUBLE_ARROW","=>",686],["T_WHITESPACE"," ",686],["T_CONSTANT_ENCAPSED_STRING","'where'",686],",",["T_WHITESPACE","\n            ",686],["T_CONSTANT_ENCAPSED_STRING","'join'",687],["T_WHITESPACE"," ",687],["T_DOUBLE_ARROW","=>",687],["T_WHITESPACE"," ",687],["T_CONSTANT_ENCAPSED_STRING","'join'",687],",",["T_WHITESPACE","\n            ",687],["T_CONSTANT_ENCAPSED_STRING","'order'",688],["T_WHITESPACE"," ",688],["T_DOUBLE_ARROW","=>",688],["T_WHITESPACE"," ",688],["T_CONSTANT_ENCAPSED_STRING","'order'",688],",",["T_WHITESPACE","\n            ",688],["T_CONSTANT_ENCAPSED_STRING","'limit'",689],["T_WHITESPACE"," ",689],["T_DOUBLE_ARROW","=>",689],["T_WHITESPACE"," ",689],["T_CONSTANT_ENCAPSED_STRING","'limit'",689],",",["T_WHITESPACE","\n            ",689],["T_CONSTANT_ENCAPSED_STRING","'offset'",690],["T_WHITESPACE"," ",690],["T_DOUBLE_ARROW","=>",690],["T_WHITESPACE"," ",690],["T_CONSTANT_ENCAPSED_STRING","'offset'",690],",",["T_WHITESPACE","\n            ",690],["T_CONSTANT_ENCAPSED_STRING","'group'",691],["T_WHITESPACE"," ",691],["T_DOUBLE_ARROW","=>",691],["T_WHITESPACE"," ",691],["T_CONSTANT_ENCAPSED_STRING","'group'",691],",",["T_WHITESPACE","\n            ",691],["T_CONSTANT_ENCAPSED_STRING","'having'",692],["T_WHITESPACE"," ",692],["T_DOUBLE_ARROW","=>",692],["T_WHITESPACE"," ",692],["T_CONSTANT_ENCAPSED_STRING","'having'",692],",",["T_WHITESPACE","\n            ",692],["T_CONSTANT_ENCAPSED_STRING","'contain'",693],["T_WHITESPACE"," ",693],["T_DOUBLE_ARROW","=>",693],["T_WHITESPACE"," ",693],["T_CONSTANT_ENCAPSED_STRING","'contain'",693],",",["T_WHITESPACE","\n            ",693],["T_CONSTANT_ENCAPSED_STRING","'page'",694],["T_WHITESPACE"," ",694],["T_DOUBLE_ARROW","=>",694],["T_WHITESPACE"," ",694],["T_CONSTANT_ENCAPSED_STRING","'page'",694],",",["T_WHITESPACE","\n        ",694],"]",";",["T_WHITESPACE","\n\n        ",695],["T_STRING","ksort",697],"(",["T_VARIABLE","$options",697],")",";",["T_WHITESPACE","\n        ",697],["T_FOREACH","foreach",698],["T_WHITESPACE"," ",698],"(",["T_VARIABLE","$options",698],["T_WHITESPACE"," ",698],["T_AS","as",698],["T_WHITESPACE"," ",698],["T_VARIABLE","$option",698],["T_WHITESPACE"," ",698],["T_DOUBLE_ARROW","=>",698],["T_WHITESPACE"," ",698],["T_VARIABLE","$values",698],")",["T_WHITESPACE"," ",698],"{",["T_WHITESPACE","\n            ",698],["T_IF","if",699],["T_WHITESPACE"," ",699],"(",["T_ISSET","isset",699],"(",["T_VARIABLE","$valid",699],"[",["T_VARIABLE","$option",699],"]",",",["T_WHITESPACE"," ",699],["T_VARIABLE","$values",699],")",")",["T_WHITESPACE"," ",699],"{",["T_WHITESPACE","\n                ",699],["T_VARIABLE","$this",700],["T_OBJECT_OPERATOR","->",700],"{",["T_VARIABLE","$valid",700],"[",["T_VARIABLE","$option",700],"]","}","(",["T_VARIABLE","$values",700],")",";",["T_WHITESPACE","\n            ",700],"}",["T_WHITESPACE"," ",701],["T_ELSE","else",701],["T_WHITESPACE"," ",701],"{",["T_WHITESPACE","\n                ",701],["T_VARIABLE","$this",702],["T_OBJECT_OPERATOR","->",702],["T_STRING","_options",702],"[",["T_VARIABLE","$option",702],"]",["T_WHITESPACE"," ",702],"=",["T_WHITESPACE"," ",702],["T_VARIABLE","$values",702],";",["T_WHITESPACE","\n            ",702],"}",["T_WHITESPACE","\n        ",703],"}",["T_WHITESPACE","\n\n        ",704],["T_RETURN","return",706],["T_WHITESPACE"," ",706],["T_VARIABLE","$this",706],";",["T_WHITESPACE","\n    ",706],"}",["T_WHITESPACE","\n\n    ",707],["T_DOC_COMMENT","\/**\n     * Creates a copy of this current query, triggers beforeFind and resets some state.\n     *\n     * The following state will be cleared:\n     *\n     * - autoFields\n     * - limit\n     * - offset\n     * - map\/reduce functions\n     * - result formatters\n     * - order\n     * - containments\n     *\n     * This method creates query clones that are useful when working with subqueries.\n     *\n     * @return \\Cake\\ORM\\Query\n     *\/",709],["T_WHITESPACE","\n    ",725],["T_PUBLIC","public",726],["T_WHITESPACE"," ",726],["T_FUNCTION","function",726],["T_WHITESPACE"," ",726],["T_STRING","cleanCopy",726],"(",")",["T_WHITESPACE","\n    ",726],"{",["T_WHITESPACE","\n        ",727],["T_VARIABLE","$clone",728],["T_WHITESPACE"," ",728],"=",["T_WHITESPACE"," ",728],["T_CLONE","clone",728],["T_WHITESPACE"," ",728],["T_VARIABLE","$this",728],";",["T_WHITESPACE","\n        ",728],["T_VARIABLE","$clone",729],["T_OBJECT_OPERATOR","->",729],["T_STRING","triggerBeforeFind",729],"(",")",";",["T_WHITESPACE","\n        ",729],["T_VARIABLE","$clone",730],["T_OBJECT_OPERATOR","->",730],["T_STRING","autoFields",730],"(",["T_STRING","false",730],")",";",["T_WHITESPACE","\n        ",730],["T_VARIABLE","$clone",731],["T_OBJECT_OPERATOR","->",731],["T_STRING","limit",731],"(",["T_STRING","null",731],")",";",["T_WHITESPACE","\n        ",731],["T_VARIABLE","$clone",732],["T_OBJECT_OPERATOR","->",732],["T_STRING","order",732],"(","[","]",",",["T_WHITESPACE"," ",732],["T_STRING","true",732],")",";",["T_WHITESPACE","\n        ",732],["T_VARIABLE","$clone",733],["T_OBJECT_OPERATOR","->",733],["T_STRING","offset",733],"(",["T_STRING","null",733],")",";",["T_WHITESPACE","\n        ",733],["T_VARIABLE","$clone",734],["T_OBJECT_OPERATOR","->",734],["T_STRING","mapReduce",734],"(",["T_STRING","null",734],",",["T_WHITESPACE"," ",734],["T_STRING","null",734],",",["T_WHITESPACE"," ",734],["T_STRING","true",734],")",";",["T_WHITESPACE","\n        ",734],["T_VARIABLE","$clone",735],["T_OBJECT_OPERATOR","->",735],["T_STRING","formatResults",735],"(",["T_STRING","null",735],",",["T_WHITESPACE"," ",735],["T_STRING","true",735],")",";",["T_WHITESPACE","\n        ",735],["T_VARIABLE","$clone",736],["T_OBJECT_OPERATOR","->",736],["T_STRING","selectTypeMap",736],"(",["T_NEW","new",736],["T_WHITESPACE"," ",736],["T_STRING","TypeMap",736],"(",")",")",";",["T_WHITESPACE","\n        ",736],["T_VARIABLE","$clone",737],["T_OBJECT_OPERATOR","->",737],["T_STRING","decorateResults",737],"(",["T_STRING","null",737],",",["T_WHITESPACE"," ",737],["T_STRING","true",737],")",";",["T_WHITESPACE","\n\n        ",737],["T_RETURN","return",739],["T_WHITESPACE"," ",739],["T_VARIABLE","$clone",739],";",["T_WHITESPACE","\n    ",739],"}",["T_WHITESPACE","\n\n    ",740],["T_DOC_COMMENT","\/**\n     * Object clone hook.\n     *\n     * Destroys the clones inner iterator and clones the value binder, and eagerloader instances.\n     *\n     * @return void\n     *\/",742],["T_WHITESPACE","\n    ",748],["T_PUBLIC","public",749],["T_WHITESPACE"," ",749],["T_FUNCTION","function",749],["T_WHITESPACE"," ",749],["T_STRING","__clone",749],"(",")",["T_WHITESPACE","\n    ",749],"{",["T_WHITESPACE","\n        ",750],["T_STRING","parent",751],["T_DOUBLE_COLON","::",751],["T_STRING","__clone",751],"(",")",";",["T_WHITESPACE","\n        ",751],["T_IF","if",752],["T_WHITESPACE"," ",752],"(",["T_VARIABLE","$this",752],["T_OBJECT_OPERATOR","->",752],["T_STRING","_eagerLoader",752],")",["T_WHITESPACE"," ",752],"{",["T_WHITESPACE","\n            ",752],["T_VARIABLE","$this",753],["T_OBJECT_OPERATOR","->",753],["T_STRING","_eagerLoader",753],["T_WHITESPACE"," ",753],"=",["T_WHITESPACE"," ",753],["T_CLONE","clone",753],["T_WHITESPACE"," ",753],["T_VARIABLE","$this",753],["T_OBJECT_OPERATOR","->",753],["T_STRING","_eagerLoader",753],";",["T_WHITESPACE","\n        ",753],"}",["T_WHITESPACE","\n    ",754],"}",["T_WHITESPACE","\n\n    ",755],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * Returns the COUNT(*) for the query. If the query has not been\n     * modified, and the count has already been performed the cached\n     * value is returned\n     *\/",757],["T_WHITESPACE","\n    ",763],["T_PUBLIC","public",764],["T_WHITESPACE"," ",764],["T_FUNCTION","function",764],["T_WHITESPACE"," ",764],["T_STRING","count",764],"(",")",["T_WHITESPACE","\n    ",764],"{",["T_WHITESPACE","\n        ",765],["T_IF","if",766],["T_WHITESPACE"," ",766],"(",["T_VARIABLE","$this",766],["T_OBJECT_OPERATOR","->",766],["T_STRING","_resultsCount",766],["T_WHITESPACE"," ",766],["T_IS_IDENTICAL","===",766],["T_WHITESPACE"," ",766],["T_STRING","null",766],")",["T_WHITESPACE"," ",766],"{",["T_WHITESPACE","\n            ",766],["T_VARIABLE","$this",767],["T_OBJECT_OPERATOR","->",767],["T_STRING","_resultsCount",767],["T_WHITESPACE"," ",767],"=",["T_WHITESPACE"," ",767],["T_VARIABLE","$this",767],["T_OBJECT_OPERATOR","->",767],["T_STRING","_performCount",767],"(",")",";",["T_WHITESPACE","\n        ",767],"}",["T_WHITESPACE","\n\n        ",768],["T_RETURN","return",770],["T_WHITESPACE"," ",770],["T_VARIABLE","$this",770],["T_OBJECT_OPERATOR","->",770],["T_STRING","_resultsCount",770],";",["T_WHITESPACE","\n    ",770],"}",["T_WHITESPACE","\n\n    ",771],["T_DOC_COMMENT","\/**\n     * Performs and returns the COUNT(*) for the query.\n     *\n     * @return int\n     *\/",773],["T_WHITESPACE","\n    ",777],["T_PROTECTED","protected",778],["T_WHITESPACE"," ",778],["T_FUNCTION","function",778],["T_WHITESPACE"," ",778],["T_STRING","_performCount",778],"(",")",["T_WHITESPACE","\n    ",778],"{",["T_WHITESPACE","\n        ",779],["T_VARIABLE","$query",780],["T_WHITESPACE"," ",780],"=",["T_WHITESPACE"," ",780],["T_VARIABLE","$this",780],["T_OBJECT_OPERATOR","->",780],["T_STRING","cleanCopy",780],"(",")",";",["T_WHITESPACE","\n        ",780],["T_VARIABLE","$counter",781],["T_WHITESPACE"," ",781],"=",["T_WHITESPACE"," ",781],["T_VARIABLE","$this",781],["T_OBJECT_OPERATOR","->",781],["T_STRING","_counter",781],";",["T_WHITESPACE","\n        ",781],["T_IF","if",782],["T_WHITESPACE"," ",782],"(",["T_VARIABLE","$counter",782],")",["T_WHITESPACE"," ",782],"{",["T_WHITESPACE","\n            ",782],["T_VARIABLE","$query",783],["T_OBJECT_OPERATOR","->",783],["T_STRING","counter",783],"(",["T_STRING","null",783],")",";",["T_WHITESPACE","\n\n            ",783],["T_RETURN","return",785],["T_WHITESPACE"," ",785],["T_INT_CAST","(int)",785],["T_VARIABLE","$counter",785],"(",["T_VARIABLE","$query",785],")",";",["T_WHITESPACE","\n        ",785],"}",["T_WHITESPACE","\n\n        ",786],["T_VARIABLE","$complex",788],["T_WHITESPACE"," ",788],"=",["T_WHITESPACE"," ",788],"(",["T_WHITESPACE","\n            ",788],["T_VARIABLE","$query",789],["T_OBJECT_OPERATOR","->",789],["T_STRING","clause",789],"(",["T_CONSTANT_ENCAPSED_STRING","'distinct'",789],")",["T_WHITESPACE"," ",789],["T_BOOLEAN_OR","||",789],["T_WHITESPACE","\n            ",789],["T_STRING","count",790],"(",["T_VARIABLE","$query",790],["T_OBJECT_OPERATOR","->",790],["T_STRING","clause",790],"(",["T_CONSTANT_ENCAPSED_STRING","'group'",790],")",")",["T_WHITESPACE"," ",790],["T_BOOLEAN_OR","||",790],["T_WHITESPACE","\n            ",790],["T_STRING","count",791],"(",["T_VARIABLE","$query",791],["T_OBJECT_OPERATOR","->",791],["T_STRING","clause",791],"(",["T_CONSTANT_ENCAPSED_STRING","'union'",791],")",")",["T_WHITESPACE"," ",791],["T_BOOLEAN_OR","||",791],["T_WHITESPACE","\n            ",791],["T_VARIABLE","$query",792],["T_OBJECT_OPERATOR","->",792],["T_STRING","clause",792],"(",["T_CONSTANT_ENCAPSED_STRING","'having'",792],")",["T_WHITESPACE","\n        ",792],")",";",["T_WHITESPACE","\n\n        ",793],["T_IF","if",795],["T_WHITESPACE"," ",795],"(","!",["T_VARIABLE","$complex",795],")",["T_WHITESPACE"," ",795],"{",["T_WHITESPACE","\n            ",795],["T_COMMENT","\/\/ Expression fields could have bound parameters.\n",796],["T_WHITESPACE","            ",797],["T_FOREACH","foreach",797],["T_WHITESPACE"," ",797],"(",["T_VARIABLE","$query",797],["T_OBJECT_OPERATOR","->",797],["T_STRING","clause",797],"(",["T_CONSTANT_ENCAPSED_STRING","'select'",797],")",["T_WHITESPACE"," ",797],["T_AS","as",797],["T_WHITESPACE"," ",797],["T_VARIABLE","$field",797],")",["T_WHITESPACE"," ",797],"{",["T_WHITESPACE","\n                ",797],["T_IF","if",798],["T_WHITESPACE"," ",798],"(",["T_VARIABLE","$field",798],["T_WHITESPACE"," ",798],["T_INSTANCEOF","instanceof",798],["T_WHITESPACE"," ",798],["T_STRING","ExpressionInterface",798],")",["T_WHITESPACE"," ",798],"{",["T_WHITESPACE","\n                    ",798],["T_VARIABLE","$complex",799],["T_WHITESPACE"," ",799],"=",["T_WHITESPACE"," ",799],["T_STRING","true",799],";",["T_WHITESPACE","\n                    ",799],["T_BREAK","break",800],";",["T_WHITESPACE","\n                ",800],"}",["T_WHITESPACE","\n            ",801],"}",["T_WHITESPACE","\n        ",802],"}",["T_WHITESPACE","\n\n        ",803],["T_IF","if",805],["T_WHITESPACE"," ",805],"(","!",["T_VARIABLE","$complex",805],["T_WHITESPACE"," ",805],["T_BOOLEAN_AND","&&",805],["T_WHITESPACE"," ",805],["T_VARIABLE","$this",805],["T_OBJECT_OPERATOR","->",805],["T_STRING","_valueBinder",805],["T_WHITESPACE"," ",805],["T_IS_NOT_IDENTICAL","!==",805],["T_WHITESPACE"," ",805],["T_STRING","null",805],")",["T_WHITESPACE"," ",805],"{",["T_WHITESPACE","\n            ",805],["T_VARIABLE","$order",806],["T_WHITESPACE"," ",806],"=",["T_WHITESPACE"," ",806],["T_VARIABLE","$this",806],["T_OBJECT_OPERATOR","->",806],["T_STRING","clause",806],"(",["T_CONSTANT_ENCAPSED_STRING","'order'",806],")",";",["T_WHITESPACE","\n            ",806],["T_VARIABLE","$complex",807],["T_WHITESPACE"," ",807],"=",["T_WHITESPACE"," ",807],["T_VARIABLE","$order",807],["T_WHITESPACE"," ",807],["T_IS_IDENTICAL","===",807],["T_WHITESPACE"," ",807],["T_STRING","null",807],["T_WHITESPACE"," ",807],"?",["T_WHITESPACE"," ",807],["T_STRING","false",807],["T_WHITESPACE"," ",807],":",["T_WHITESPACE"," ",807],["T_VARIABLE","$order",807],["T_OBJECT_OPERATOR","->",807],["T_STRING","hasNestedExpression",807],"(",")",";",["T_WHITESPACE","\n        ",807],"}",["T_WHITESPACE","\n\n        ",808],["T_VARIABLE","$count",810],["T_WHITESPACE"," ",810],"=",["T_WHITESPACE"," ",810],"[",["T_CONSTANT_ENCAPSED_STRING","'count'",810],["T_WHITESPACE"," ",810],["T_DOUBLE_ARROW","=>",810],["T_WHITESPACE"," ",810],["T_VARIABLE","$query",810],["T_OBJECT_OPERATOR","->",810],["T_STRING","func",810],"(",")",["T_OBJECT_OPERATOR","->",810],["T_STRING","count",810],"(",["T_CONSTANT_ENCAPSED_STRING","'*'",810],")","]",";",["T_WHITESPACE","\n\n        ",810],["T_IF","if",812],["T_WHITESPACE"," ",812],"(","!",["T_VARIABLE","$complex",812],")",["T_WHITESPACE"," ",812],"{",["T_WHITESPACE","\n            ",812],["T_VARIABLE","$query",813],["T_OBJECT_OPERATOR","->",813],["T_STRING","eagerLoader",813],"(",")",["T_OBJECT_OPERATOR","->",813],["T_STRING","autoFields",813],"(",["T_STRING","false",813],")",";",["T_WHITESPACE","\n            ",813],["T_VARIABLE","$statement",814],["T_WHITESPACE"," ",814],"=",["T_WHITESPACE"," ",814],["T_VARIABLE","$query",814],["T_WHITESPACE","\n                ",814],["T_OBJECT_OPERATOR","->",815],["T_STRING","select",815],"(",["T_VARIABLE","$count",815],",",["T_WHITESPACE"," ",815],["T_STRING","true",815],")",["T_WHITESPACE","\n                ",815],["T_OBJECT_OPERATOR","->",816],["T_STRING","autoFields",816],"(",["T_STRING","false",816],")",["T_WHITESPACE","\n                ",816],["T_OBJECT_OPERATOR","->",817],["T_STRING","execute",817],"(",")",";",["T_WHITESPACE","\n        ",817],"}",["T_WHITESPACE"," ",818],["T_ELSE","else",818],["T_WHITESPACE"," ",818],"{",["T_WHITESPACE","\n            ",818],["T_VARIABLE","$statement",819],["T_WHITESPACE"," ",819],"=",["T_WHITESPACE"," ",819],["T_VARIABLE","$this",819],["T_OBJECT_OPERATOR","->",819],["T_STRING","connection",819],"(",")",["T_OBJECT_OPERATOR","->",819],["T_STRING","newQuery",819],"(",")",["T_WHITESPACE","\n                ",819],["T_OBJECT_OPERATOR","->",820],["T_STRING","select",820],"(",["T_VARIABLE","$count",820],")",["T_WHITESPACE","\n                ",820],["T_OBJECT_OPERATOR","->",821],["T_STRING","from",821],"(","[",["T_CONSTANT_ENCAPSED_STRING","'count_source'",821],["T_WHITESPACE"," ",821],["T_DOUBLE_ARROW","=>",821],["T_WHITESPACE"," ",821],["T_VARIABLE","$query",821],"]",")",["T_WHITESPACE","\n                ",821],["T_OBJECT_OPERATOR","->",822],["T_STRING","execute",822],"(",")",";",["T_WHITESPACE","\n        ",822],"}",["T_WHITESPACE","\n\n        ",823],["T_VARIABLE","$result",825],["T_WHITESPACE"," ",825],"=",["T_WHITESPACE"," ",825],["T_VARIABLE","$statement",825],["T_OBJECT_OPERATOR","->",825],["T_STRING","fetch",825],"(",["T_CONSTANT_ENCAPSED_STRING","'assoc'",825],")","[",["T_CONSTANT_ENCAPSED_STRING","'count'",825],"]",";",["T_WHITESPACE","\n        ",825],["T_VARIABLE","$statement",826],["T_OBJECT_OPERATOR","->",826],["T_STRING","closeCursor",826],"(",")",";",["T_WHITESPACE","\n\n        ",826],["T_RETURN","return",828],["T_WHITESPACE"," ",828],["T_INT_CAST","(int)",828],["T_VARIABLE","$result",828],";",["T_WHITESPACE","\n    ",828],"}",["T_WHITESPACE","\n\n    ",829],["T_DOC_COMMENT","\/**\n     * Registers a callable function that will be executed when the `count` method in\n     * this query is called. The return value for the function will be set as the\n     * return value of the `count` method.\n     *\n     * This is particularly useful when you need to optimize a query for returning the\n     * count, for example removing unnecessary joins, removing group by or just return\n     * an estimated number of rows.\n     *\n     * The callback will receive as first argument a clone of this query and not this\n     * query itself.\n     *\n     * If the first param is a null value, the built-in counter function will be called\n     * instead\n     *\n     * @param callable|null $counter The counter value\n     * @return $this\n     *\/",831],["T_WHITESPACE","\n    ",848],["T_PUBLIC","public",849],["T_WHITESPACE"," ",849],["T_FUNCTION","function",849],["T_WHITESPACE"," ",849],["T_STRING","counter",849],"(",["T_VARIABLE","$counter",849],")",["T_WHITESPACE","\n    ",849],"{",["T_WHITESPACE","\n        ",850],["T_VARIABLE","$this",851],["T_OBJECT_OPERATOR","->",851],["T_STRING","_counter",851],["T_WHITESPACE"," ",851],"=",["T_WHITESPACE"," ",851],["T_VARIABLE","$counter",851],";",["T_WHITESPACE","\n\n        ",851],["T_RETURN","return",853],["T_WHITESPACE"," ",853],["T_VARIABLE","$this",853],";",["T_WHITESPACE","\n    ",853],"}",["T_WHITESPACE","\n\n    ",854],["T_DOC_COMMENT","\/**\n     * Toggle hydrating entities.\n     *\n     * If set to false array results will be returned\n     *\n     * @param bool|null $enable Use a boolean to set the hydration mode.\n     *   Null will fetch the current hydration mode.\n     * @return bool|$this A boolean when reading, and $this when setting the mode.\n     *\/",856],["T_WHITESPACE","\n    ",864],["T_PUBLIC","public",865],["T_WHITESPACE"," ",865],["T_FUNCTION","function",865],["T_WHITESPACE"," ",865],["T_STRING","hydrate",865],"(",["T_VARIABLE","$enable",865],["T_WHITESPACE"," ",865],"=",["T_WHITESPACE"," ",865],["T_STRING","null",865],")",["T_WHITESPACE","\n    ",865],"{",["T_WHITESPACE","\n        ",866],["T_IF","if",867],["T_WHITESPACE"," ",867],"(",["T_VARIABLE","$enable",867],["T_WHITESPACE"," ",867],["T_IS_IDENTICAL","===",867],["T_WHITESPACE"," ",867],["T_STRING","null",867],")",["T_WHITESPACE"," ",867],"{",["T_WHITESPACE","\n            ",867],["T_RETURN","return",868],["T_WHITESPACE"," ",868],["T_VARIABLE","$this",868],["T_OBJECT_OPERATOR","->",868],["T_STRING","_hydrate",868],";",["T_WHITESPACE","\n        ",868],"}",["T_WHITESPACE","\n\n        ",869],["T_VARIABLE","$this",871],["T_OBJECT_OPERATOR","->",871],["T_STRING","_dirty",871],"(",")",";",["T_WHITESPACE","\n        ",871],["T_VARIABLE","$this",872],["T_OBJECT_OPERATOR","->",872],["T_STRING","_hydrate",872],["T_WHITESPACE"," ",872],"=",["T_WHITESPACE"," ",872],["T_BOOL_CAST","(bool)",872],["T_VARIABLE","$enable",872],";",["T_WHITESPACE","\n\n        ",872],["T_RETURN","return",874],["T_WHITESPACE"," ",874],["T_VARIABLE","$this",874],";",["T_WHITESPACE","\n    ",874],"}",["T_WHITESPACE","\n\n    ",875],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * @return $this\n     * @throws \\RuntimeException When you attempt to cache a non-select query.\n     *\/",877],["T_WHITESPACE","\n    ",882],["T_PUBLIC","public",883],["T_WHITESPACE"," ",883],["T_FUNCTION","function",883],["T_WHITESPACE"," ",883],["T_STRING","cache",883],"(",["T_VARIABLE","$key",883],",",["T_WHITESPACE"," ",883],["T_VARIABLE","$config",883],["T_WHITESPACE"," ",883],"=",["T_WHITESPACE"," ",883],["T_CONSTANT_ENCAPSED_STRING","'default'",883],")",["T_WHITESPACE","\n    ",883],"{",["T_WHITESPACE","\n        ",884],["T_IF","if",885],["T_WHITESPACE"," ",885],"(",["T_VARIABLE","$this",885],["T_OBJECT_OPERATOR","->",885],["T_STRING","_type",885],["T_WHITESPACE"," ",885],["T_IS_NOT_IDENTICAL","!==",885],["T_WHITESPACE"," ",885],["T_CONSTANT_ENCAPSED_STRING","'select'",885],["T_WHITESPACE"," ",885],["T_BOOLEAN_AND","&&",885],["T_WHITESPACE"," ",885],["T_VARIABLE","$this",885],["T_OBJECT_OPERATOR","->",885],["T_STRING","_type",885],["T_WHITESPACE"," ",885],["T_IS_NOT_IDENTICAL","!==",885],["T_WHITESPACE"," ",885],["T_STRING","null",885],")",["T_WHITESPACE"," ",885],"{",["T_WHITESPACE","\n            ",885],["T_THROW","throw",886],["T_WHITESPACE"," ",886],["T_NEW","new",886],["T_WHITESPACE"," ",886],["T_STRING","RuntimeException",886],"(",["T_CONSTANT_ENCAPSED_STRING","'You cannot cache the results of non-select queries.'",886],")",";",["T_WHITESPACE","\n        ",886],"}",["T_WHITESPACE","\n\n        ",887],["T_RETURN","return",889],["T_WHITESPACE"," ",889],["T_VARIABLE","$this",889],["T_OBJECT_OPERATOR","->",889],["T_STRING","_cache",889],"(",["T_VARIABLE","$key",889],",",["T_WHITESPACE"," ",889],["T_VARIABLE","$config",889],")",";",["T_WHITESPACE","\n    ",889],"}",["T_WHITESPACE","\n\n    ",890],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * @throws \\RuntimeException if this method is called on a non-select Query.\n     *\/",892],["T_WHITESPACE","\n    ",896],["T_PUBLIC","public",897],["T_WHITESPACE"," ",897],["T_FUNCTION","function",897],["T_WHITESPACE"," ",897],["T_STRING","all",897],"(",")",["T_WHITESPACE","\n    ",897],"{",["T_WHITESPACE","\n        ",898],["T_IF","if",899],["T_WHITESPACE"," ",899],"(",["T_VARIABLE","$this",899],["T_OBJECT_OPERATOR","->",899],["T_STRING","_type",899],["T_WHITESPACE"," ",899],["T_IS_NOT_IDENTICAL","!==",899],["T_WHITESPACE"," ",899],["T_CONSTANT_ENCAPSED_STRING","'select'",899],["T_WHITESPACE"," ",899],["T_BOOLEAN_AND","&&",899],["T_WHITESPACE"," ",899],["T_VARIABLE","$this",899],["T_OBJECT_OPERATOR","->",899],["T_STRING","_type",899],["T_WHITESPACE"," ",899],["T_IS_NOT_IDENTICAL","!==",899],["T_WHITESPACE"," ",899],["T_STRING","null",899],")",["T_WHITESPACE"," ",899],"{",["T_WHITESPACE","\n            ",899],["T_THROW","throw",900],["T_WHITESPACE"," ",900],["T_NEW","new",900],["T_WHITESPACE"," ",900],["T_STRING","RuntimeException",900],"(",["T_WHITESPACE","\n                ",900],["T_CONSTANT_ENCAPSED_STRING","'You cannot call all() on a non-select query. Use execute() instead.'",901],["T_WHITESPACE","\n            ",901],")",";",["T_WHITESPACE","\n        ",902],"}",["T_WHITESPACE","\n\n        ",903],["T_RETURN","return",905],["T_WHITESPACE"," ",905],["T_VARIABLE","$this",905],["T_OBJECT_OPERATOR","->",905],["T_STRING","_all",905],"(",")",";",["T_WHITESPACE","\n    ",905],"}",["T_WHITESPACE","\n\n    ",906],["T_DOC_COMMENT","\/**\n     * Trigger the beforeFind event on the query's repository object.\n     *\n     * Will not trigger more than once, and only for select queries.\n     *\n     * @return void\n     *\/",908],["T_WHITESPACE","\n    ",914],["T_PUBLIC","public",915],["T_WHITESPACE"," ",915],["T_FUNCTION","function",915],["T_WHITESPACE"," ",915],["T_STRING","triggerBeforeFind",915],"(",")",["T_WHITESPACE","\n    ",915],"{",["T_WHITESPACE","\n        ",916],["T_IF","if",917],["T_WHITESPACE"," ",917],"(","!",["T_VARIABLE","$this",917],["T_OBJECT_OPERATOR","->",917],["T_STRING","_beforeFindFired",917],["T_WHITESPACE"," ",917],["T_BOOLEAN_AND","&&",917],["T_WHITESPACE"," ",917],["T_VARIABLE","$this",917],["T_OBJECT_OPERATOR","->",917],["T_STRING","_type",917],["T_WHITESPACE"," ",917],["T_IS_IDENTICAL","===",917],["T_WHITESPACE"," ",917],["T_CONSTANT_ENCAPSED_STRING","'select'",917],")",["T_WHITESPACE"," ",917],"{",["T_WHITESPACE","\n            ",917],["T_VARIABLE","$table",918],["T_WHITESPACE"," ",918],"=",["T_WHITESPACE"," ",918],["T_VARIABLE","$this",918],["T_OBJECT_OPERATOR","->",918],["T_STRING","repository",918],"(",")",";",["T_WHITESPACE","\n            ",918],["T_VARIABLE","$this",919],["T_OBJECT_OPERATOR","->",919],["T_STRING","_beforeFindFired",919],["T_WHITESPACE"," ",919],"=",["T_WHITESPACE"," ",919],["T_STRING","true",919],";",["T_WHITESPACE","\n            ",919],["T_VARIABLE","$table",920],["T_OBJECT_OPERATOR","->",920],["T_STRING","dispatchEvent",920],"(",["T_CONSTANT_ENCAPSED_STRING","'Model.beforeFind'",920],",",["T_WHITESPACE"," ",920],"[",["T_WHITESPACE","\n                ",920],["T_VARIABLE","$this",921],",",["T_WHITESPACE","\n                ",921],["T_NEW","new",922],["T_WHITESPACE"," ",922],["T_STRING","ArrayObject",922],"(",["T_VARIABLE","$this",922],["T_OBJECT_OPERATOR","->",922],["T_STRING","_options",922],")",",",["T_WHITESPACE","\n                ",922],"!",["T_VARIABLE","$this",923],["T_OBJECT_OPERATOR","->",923],["T_STRING","eagerLoaded",923],"(",")",["T_WHITESPACE","\n            ",923],"]",")",";",["T_WHITESPACE","\n        ",924],"}",["T_WHITESPACE","\n    ",925],"}",["T_WHITESPACE","\n\n    ",926],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\/",928],["T_WHITESPACE","\n    ",930],["T_PUBLIC","public",931],["T_WHITESPACE"," ",931],["T_FUNCTION","function",931],["T_WHITESPACE"," ",931],["T_STRING","sql",931],"(",["T_STRING","ValueBinder",931],["T_WHITESPACE"," ",931],["T_VARIABLE","$binder",931],["T_WHITESPACE"," ",931],"=",["T_WHITESPACE"," ",931],["T_STRING","null",931],")",["T_WHITESPACE","\n    ",931],"{",["T_WHITESPACE","\n        ",932],["T_VARIABLE","$this",933],["T_OBJECT_OPERATOR","->",933],["T_STRING","triggerBeforeFind",933],"(",")",";",["T_WHITESPACE","\n\n        ",933],["T_VARIABLE","$this",935],["T_OBJECT_OPERATOR","->",935],["T_STRING","_transformQuery",935],"(",")",";",["T_WHITESPACE","\n        ",935],["T_VARIABLE","$sql",936],["T_WHITESPACE"," ",936],"=",["T_WHITESPACE"," ",936],["T_STRING","parent",936],["T_DOUBLE_COLON","::",936],["T_STRING","sql",936],"(",["T_VARIABLE","$binder",936],")",";",["T_WHITESPACE","\n\n        ",936],["T_RETURN","return",938],["T_WHITESPACE"," ",938],["T_VARIABLE","$sql",938],";",["T_WHITESPACE","\n    ",938],"}",["T_WHITESPACE","\n\n    ",939],["T_DOC_COMMENT","\/**\n     * Executes this query and returns a ResultSet object containing the results.\n     * This will also setup the correct statement class in order to eager load deep\n     * associations.\n     *\n     * @return \\Cake\\ORM\\ResultSet\n     *\/",941],["T_WHITESPACE","\n    ",947],["T_PROTECTED","protected",948],["T_WHITESPACE"," ",948],["T_FUNCTION","function",948],["T_WHITESPACE"," ",948],["T_STRING","_execute",948],"(",")",["T_WHITESPACE","\n    ",948],"{",["T_WHITESPACE","\n        ",949],["T_VARIABLE","$this",950],["T_OBJECT_OPERATOR","->",950],["T_STRING","triggerBeforeFind",950],"(",")",";",["T_WHITESPACE","\n        ",950],["T_IF","if",951],["T_WHITESPACE"," ",951],"(",["T_VARIABLE","$this",951],["T_OBJECT_OPERATOR","->",951],["T_STRING","_results",951],")",["T_WHITESPACE"," ",951],"{",["T_WHITESPACE","\n            ",951],["T_VARIABLE","$decorator",952],["T_WHITESPACE"," ",952],"=",["T_WHITESPACE"," ",952],["T_VARIABLE","$this",952],["T_OBJECT_OPERATOR","->",952],["T_STRING","_decoratorClass",952],"(",")",";",["T_WHITESPACE","\n\n            ",952],["T_RETURN","return",954],["T_WHITESPACE"," ",954],["T_NEW","new",954],["T_WHITESPACE"," ",954],["T_VARIABLE","$decorator",954],"(",["T_VARIABLE","$this",954],["T_OBJECT_OPERATOR","->",954],["T_STRING","_results",954],")",";",["T_WHITESPACE","\n        ",954],"}",["T_WHITESPACE","\n\n        ",955],["T_VARIABLE","$statement",957],["T_WHITESPACE"," ",957],"=",["T_WHITESPACE"," ",957],["T_VARIABLE","$this",957],["T_OBJECT_OPERATOR","->",957],["T_STRING","eagerLoader",957],"(",")",["T_OBJECT_OPERATOR","->",957],["T_STRING","loadExternal",957],"(",["T_VARIABLE","$this",957],",",["T_WHITESPACE"," ",957],["T_VARIABLE","$this",957],["T_OBJECT_OPERATOR","->",957],["T_STRING","execute",957],"(",")",")",";",["T_WHITESPACE","\n\n        ",957],["T_RETURN","return",959],["T_WHITESPACE"," ",959],["T_NEW","new",959],["T_WHITESPACE"," ",959],["T_STRING","ResultSet",959],"(",["T_VARIABLE","$this",959],",",["T_WHITESPACE"," ",959],["T_VARIABLE","$statement",959],")",";",["T_WHITESPACE","\n    ",959],"}",["T_WHITESPACE","\n\n    ",960],["T_DOC_COMMENT","\/**\n     * Applies some defaults to the query object before it is executed.\n     *\n     * Specifically add the FROM clause, adds default table fields if none are\n     * specified and applies the joins required to eager load associations defined\n     * using `contain`\n     *\n     * It also sets the default types for the columns in the select clause\n     *\n     * @see \\Cake\\Database\\Query::execute()\n     * @return void\n     *\/",962],["T_WHITESPACE","\n    ",973],["T_PROTECTED","protected",974],["T_WHITESPACE"," ",974],["T_FUNCTION","function",974],["T_WHITESPACE"," ",974],["T_STRING","_transformQuery",974],"(",")",["T_WHITESPACE","\n    ",974],"{",["T_WHITESPACE","\n        ",975],["T_IF","if",976],["T_WHITESPACE"," ",976],"(","!",["T_VARIABLE","$this",976],["T_OBJECT_OPERATOR","->",976],["T_STRING","_dirty",976],["T_WHITESPACE"," ",976],["T_BOOLEAN_OR","||",976],["T_WHITESPACE"," ",976],["T_VARIABLE","$this",976],["T_OBJECT_OPERATOR","->",976],["T_STRING","_type",976],["T_WHITESPACE"," ",976],["T_IS_NOT_IDENTICAL","!==",976],["T_WHITESPACE"," ",976],["T_CONSTANT_ENCAPSED_STRING","'select'",976],")",["T_WHITESPACE"," ",976],"{",["T_WHITESPACE","\n            ",976],["T_RETURN","return",977],";",["T_WHITESPACE","\n        ",977],"}",["T_WHITESPACE","\n\n        ",978],["T_IF","if",980],["T_WHITESPACE"," ",980],"(",["T_EMPTY","empty",980],"(",["T_VARIABLE","$this",980],["T_OBJECT_OPERATOR","->",980],["T_STRING","_parts",980],"[",["T_CONSTANT_ENCAPSED_STRING","'from'",980],"]",")",")",["T_WHITESPACE"," ",980],"{",["T_WHITESPACE","\n            ",980],["T_VARIABLE","$this",981],["T_OBJECT_OPERATOR","->",981],["T_STRING","from",981],"(","[",["T_VARIABLE","$this",981],["T_OBJECT_OPERATOR","->",981],["T_STRING","_repository",981],["T_OBJECT_OPERATOR","->",981],["T_STRING","alias",981],"(",")",["T_WHITESPACE"," ",981],["T_DOUBLE_ARROW","=>",981],["T_WHITESPACE"," ",981],["T_VARIABLE","$this",981],["T_OBJECT_OPERATOR","->",981],["T_STRING","_repository",981],["T_OBJECT_OPERATOR","->",981],["T_STRING","table",981],"(",")","]",")",";",["T_WHITESPACE","\n        ",981],"}",["T_WHITESPACE","\n        ",982],["T_VARIABLE","$this",983],["T_OBJECT_OPERATOR","->",983],["T_STRING","_addDefaultFields",983],"(",")",";",["T_WHITESPACE","\n        ",983],["T_VARIABLE","$this",984],["T_OBJECT_OPERATOR","->",984],["T_STRING","eagerLoader",984],"(",")",["T_OBJECT_OPERATOR","->",984],["T_STRING","attachAssociations",984],"(",["T_VARIABLE","$this",984],",",["T_WHITESPACE"," ",984],["T_VARIABLE","$this",984],["T_OBJECT_OPERATOR","->",984],["T_STRING","_repository",984],",",["T_WHITESPACE"," ",984],"!",["T_VARIABLE","$this",984],["T_OBJECT_OPERATOR","->",984],["T_STRING","_hasFields",984],")",";",["T_WHITESPACE","\n        ",984],["T_VARIABLE","$this",985],["T_OBJECT_OPERATOR","->",985],["T_STRING","_addDefaultSelectTypes",985],"(",")",";",["T_WHITESPACE","\n    ",985],"}",["T_WHITESPACE","\n\n    ",986],["T_DOC_COMMENT","\/**\n     * Inspects if there are any set fields for selecting, otherwise adds all\n     * the fields for the default table.\n     *\n     * @return void\n     *\/",988],["T_WHITESPACE","\n    ",993],["T_PROTECTED","protected",994],["T_WHITESPACE"," ",994],["T_FUNCTION","function",994],["T_WHITESPACE"," ",994],["T_STRING","_addDefaultFields",994],"(",")",["T_WHITESPACE","\n    ",994],"{",["T_WHITESPACE","\n        ",995],["T_VARIABLE","$select",996],["T_WHITESPACE"," ",996],"=",["T_WHITESPACE"," ",996],["T_VARIABLE","$this",996],["T_OBJECT_OPERATOR","->",996],["T_STRING","clause",996],"(",["T_CONSTANT_ENCAPSED_STRING","'select'",996],")",";",["T_WHITESPACE","\n        ",996],["T_VARIABLE","$this",997],["T_OBJECT_OPERATOR","->",997],["T_STRING","_hasFields",997],["T_WHITESPACE"," ",997],"=",["T_WHITESPACE"," ",997],["T_STRING","true",997],";",["T_WHITESPACE","\n\n        ",997],["T_IF","if",999],["T_WHITESPACE"," ",999],"(","!",["T_STRING","count",999],"(",["T_VARIABLE","$select",999],")",["T_WHITESPACE"," ",999],["T_BOOLEAN_OR","||",999],["T_WHITESPACE"," ",999],["T_VARIABLE","$this",999],["T_OBJECT_OPERATOR","->",999],["T_STRING","_autoFields",999],["T_WHITESPACE"," ",999],["T_IS_IDENTICAL","===",999],["T_WHITESPACE"," ",999],["T_STRING","true",999],")",["T_WHITESPACE"," ",999],"{",["T_WHITESPACE","\n            ",999],["T_VARIABLE","$this",1000],["T_OBJECT_OPERATOR","->",1000],["T_STRING","_hasFields",1000],["T_WHITESPACE"," ",1000],"=",["T_WHITESPACE"," ",1000],["T_STRING","false",1000],";",["T_WHITESPACE","\n            ",1000],["T_VARIABLE","$this",1001],["T_OBJECT_OPERATOR","->",1001],["T_STRING","select",1001],"(",["T_VARIABLE","$this",1001],["T_OBJECT_OPERATOR","->",1001],["T_STRING","repository",1001],"(",")",["T_OBJECT_OPERATOR","->",1001],["T_STRING","schema",1001],"(",")",["T_OBJECT_OPERATOR","->",1001],["T_STRING","columns",1001],"(",")",")",";",["T_WHITESPACE","\n            ",1001],["T_VARIABLE","$select",1002],["T_WHITESPACE"," ",1002],"=",["T_WHITESPACE"," ",1002],["T_VARIABLE","$this",1002],["T_OBJECT_OPERATOR","->",1002],["T_STRING","clause",1002],"(",["T_CONSTANT_ENCAPSED_STRING","'select'",1002],")",";",["T_WHITESPACE","\n        ",1002],"}",["T_WHITESPACE","\n\n        ",1003],["T_VARIABLE","$aliased",1005],["T_WHITESPACE"," ",1005],"=",["T_WHITESPACE"," ",1005],["T_VARIABLE","$this",1005],["T_OBJECT_OPERATOR","->",1005],["T_STRING","aliasFields",1005],"(",["T_VARIABLE","$select",1005],",",["T_WHITESPACE"," ",1005],["T_VARIABLE","$this",1005],["T_OBJECT_OPERATOR","->",1005],["T_STRING","repository",1005],"(",")",["T_OBJECT_OPERATOR","->",1005],["T_STRING","alias",1005],"(",")",")",";",["T_WHITESPACE","\n        ",1005],["T_VARIABLE","$this",1006],["T_OBJECT_OPERATOR","->",1006],["T_STRING","select",1006],"(",["T_VARIABLE","$aliased",1006],",",["T_WHITESPACE"," ",1006],["T_STRING","true",1006],")",";",["T_WHITESPACE","\n    ",1006],"}",["T_WHITESPACE","\n\n    ",1007],["T_DOC_COMMENT","\/**\n     * Sets the default types for converting the fields in the select clause\n     *\n     * @return void\n     *\/",1009],["T_WHITESPACE","\n    ",1013],["T_PROTECTED","protected",1014],["T_WHITESPACE"," ",1014],["T_FUNCTION","function",1014],["T_WHITESPACE"," ",1014],["T_STRING","_addDefaultSelectTypes",1014],"(",")",["T_WHITESPACE","\n    ",1014],"{",["T_WHITESPACE","\n        ",1015],["T_VARIABLE","$typeMap",1016],["T_WHITESPACE"," ",1016],"=",["T_WHITESPACE"," ",1016],["T_VARIABLE","$this",1016],["T_OBJECT_OPERATOR","->",1016],["T_STRING","typeMap",1016],"(",")",["T_OBJECT_OPERATOR","->",1016],["T_STRING","defaults",1016],"(",")",";",["T_WHITESPACE","\n        ",1016],["T_VARIABLE","$select",1017],["T_WHITESPACE"," ",1017],"=",["T_WHITESPACE"," ",1017],["T_VARIABLE","$this",1017],["T_OBJECT_OPERATOR","->",1017],["T_STRING","clause",1017],"(",["T_CONSTANT_ENCAPSED_STRING","'select'",1017],")",";",["T_WHITESPACE","\n        ",1017],["T_VARIABLE","$types",1018],["T_WHITESPACE"," ",1018],"=",["T_WHITESPACE"," ",1018],"[","]",";",["T_WHITESPACE","\n\n        ",1018],["T_FOREACH","foreach",1020],["T_WHITESPACE"," ",1020],"(",["T_VARIABLE","$select",1020],["T_WHITESPACE"," ",1020],["T_AS","as",1020],["T_WHITESPACE"," ",1020],["T_VARIABLE","$alias",1020],["T_WHITESPACE"," ",1020],["T_DOUBLE_ARROW","=>",1020],["T_WHITESPACE"," ",1020],["T_VARIABLE","$value",1020],")",["T_WHITESPACE"," ",1020],"{",["T_WHITESPACE","\n            ",1020],["T_IF","if",1021],["T_WHITESPACE"," ",1021],"(",["T_ISSET","isset",1021],"(",["T_VARIABLE","$typeMap",1021],"[",["T_VARIABLE","$alias",1021],"]",")",")",["T_WHITESPACE"," ",1021],"{",["T_WHITESPACE","\n                ",1021],["T_VARIABLE","$types",1022],"[",["T_VARIABLE","$alias",1022],"]",["T_WHITESPACE"," ",1022],"=",["T_WHITESPACE"," ",1022],["T_VARIABLE","$typeMap",1022],"[",["T_VARIABLE","$alias",1022],"]",";",["T_WHITESPACE","\n                ",1022],["T_CONTINUE","continue",1023],";",["T_WHITESPACE","\n            ",1023],"}",["T_WHITESPACE","\n            ",1024],["T_IF","if",1025],["T_WHITESPACE"," ",1025],"(",["T_VARIABLE","$value",1025],["T_WHITESPACE"," ",1025],["T_INSTANCEOF","instanceof",1025],["T_WHITESPACE"," ",1025],["T_STRING","TypedResultInterface",1025],")",["T_WHITESPACE"," ",1025],"{",["T_WHITESPACE","\n                ",1025],["T_VARIABLE","$types",1026],"[",["T_VARIABLE","$alias",1026],"]",["T_WHITESPACE"," ",1026],"=",["T_WHITESPACE"," ",1026],["T_VARIABLE","$value",1026],["T_OBJECT_OPERATOR","->",1026],["T_STRING","returnType",1026],"(",")",";",["T_WHITESPACE","\n            ",1026],"}",["T_WHITESPACE","\n        ",1027],"}",["T_WHITESPACE","\n        ",1028],["T_VARIABLE","$this",1029],["T_OBJECT_OPERATOR","->",1029],["T_STRING","selectTypeMap",1029],"(",")",["T_OBJECT_OPERATOR","->",1029],["T_STRING","addDefaults",1029],"(",["T_VARIABLE","$types",1029],")",";",["T_WHITESPACE","\n    ",1029],"}",["T_WHITESPACE","\n\n    ",1030],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * @see \\Cake\\ORM\\Table::find()\n     *\/",1032],["T_WHITESPACE","\n    ",1036],["T_PUBLIC","public",1037],["T_WHITESPACE"," ",1037],["T_FUNCTION","function",1037],["T_WHITESPACE"," ",1037],["T_STRING","find",1037],"(",["T_VARIABLE","$finder",1037],",",["T_WHITESPACE"," ",1037],["T_ARRAY","array",1037],["T_WHITESPACE"," ",1037],["T_VARIABLE","$options",1037],["T_WHITESPACE"," ",1037],"=",["T_WHITESPACE"," ",1037],"[","]",")",["T_WHITESPACE","\n    ",1037],"{",["T_WHITESPACE","\n        ",1038],["T_RETURN","return",1039],["T_WHITESPACE"," ",1039],["T_VARIABLE","$this",1039],["T_OBJECT_OPERATOR","->",1039],["T_STRING","repository",1039],"(",")",["T_OBJECT_OPERATOR","->",1039],["T_STRING","callFinder",1039],"(",["T_VARIABLE","$finder",1039],",",["T_WHITESPACE"," ",1039],["T_VARIABLE","$this",1039],",",["T_WHITESPACE"," ",1039],["T_VARIABLE","$options",1039],")",";",["T_WHITESPACE","\n    ",1039],"}",["T_WHITESPACE","\n\n    ",1040],["T_DOC_COMMENT","\/**\n     * Marks a query as dirty, removing any preprocessed information\n     * from in memory caching such as previous results\n     *\n     * @return void\n     *\/",1042],["T_WHITESPACE","\n    ",1047],["T_PROTECTED","protected",1048],["T_WHITESPACE"," ",1048],["T_FUNCTION","function",1048],["T_WHITESPACE"," ",1048],["T_STRING","_dirty",1048],"(",")",["T_WHITESPACE","\n    ",1048],"{",["T_WHITESPACE","\n        ",1049],["T_VARIABLE","$this",1050],["T_OBJECT_OPERATOR","->",1050],["T_STRING","_results",1050],["T_WHITESPACE"," ",1050],"=",["T_WHITESPACE"," ",1050],["T_STRING","null",1050],";",["T_WHITESPACE","\n        ",1050],["T_VARIABLE","$this",1051],["T_OBJECT_OPERATOR","->",1051],["T_STRING","_resultsCount",1051],["T_WHITESPACE"," ",1051],"=",["T_WHITESPACE"," ",1051],["T_STRING","null",1051],";",["T_WHITESPACE","\n        ",1051],["T_STRING","parent",1052],["T_DOUBLE_COLON","::",1052],["T_STRING","_dirty",1052],"(",")",";",["T_WHITESPACE","\n    ",1052],"}",["T_WHITESPACE","\n\n    ",1053],["T_DOC_COMMENT","\/**\n     * Create an update query.\n     *\n     * This changes the query type to be 'update'.\n     * Can be combined with set() and where() methods to create update queries.\n     *\n     * @param string|null $table Unused parameter.\n     * @return $this\n     *\/",1055],["T_WHITESPACE","\n    ",1063],["T_PUBLIC","public",1064],["T_WHITESPACE"," ",1064],["T_FUNCTION","function",1064],["T_WHITESPACE"," ",1064],["T_STRING","update",1064],"(",["T_VARIABLE","$table",1064],["T_WHITESPACE"," ",1064],"=",["T_WHITESPACE"," ",1064],["T_STRING","null",1064],")",["T_WHITESPACE","\n    ",1064],"{",["T_WHITESPACE","\n        ",1065],["T_VARIABLE","$table",1066],["T_WHITESPACE"," ",1066],"=",["T_WHITESPACE"," ",1066],["T_VARIABLE","$table",1066],["T_WHITESPACE"," ",1066],"?",":",["T_WHITESPACE"," ",1066],["T_VARIABLE","$this",1066],["T_OBJECT_OPERATOR","->",1066],["T_STRING","repository",1066],"(",")",["T_OBJECT_OPERATOR","->",1066],["T_STRING","table",1066],"(",")",";",["T_WHITESPACE","\n\n        ",1066],["T_RETURN","return",1068],["T_WHITESPACE"," ",1068],["T_STRING","parent",1068],["T_DOUBLE_COLON","::",1068],["T_STRING","update",1068],"(",["T_VARIABLE","$table",1068],")",";",["T_WHITESPACE","\n    ",1068],"}",["T_WHITESPACE","\n\n    ",1069],["T_DOC_COMMENT","\/**\n     * Create a delete query.\n     *\n     * This changes the query type to be 'delete'.\n     * Can be combined with the where() method to create delete queries.\n     *\n     * @param string|null $table Unused parameter.\n     * @return $this\n     *\/",1071],["T_WHITESPACE","\n    ",1079],["T_PUBLIC","public",1080],["T_WHITESPACE"," ",1080],["T_FUNCTION","function",1080],["T_WHITESPACE"," ",1080],["T_STRING","delete",1080],"(",["T_VARIABLE","$table",1080],["T_WHITESPACE"," ",1080],"=",["T_WHITESPACE"," ",1080],["T_STRING","null",1080],")",["T_WHITESPACE","\n    ",1080],"{",["T_WHITESPACE","\n        ",1081],["T_VARIABLE","$repo",1082],["T_WHITESPACE"," ",1082],"=",["T_WHITESPACE"," ",1082],["T_VARIABLE","$this",1082],["T_OBJECT_OPERATOR","->",1082],["T_STRING","repository",1082],"(",")",";",["T_WHITESPACE","\n        ",1082],["T_VARIABLE","$this",1083],["T_OBJECT_OPERATOR","->",1083],["T_STRING","from",1083],"(","[",["T_VARIABLE","$repo",1083],["T_OBJECT_OPERATOR","->",1083],["T_STRING","alias",1083],"(",")",["T_WHITESPACE"," ",1083],["T_DOUBLE_ARROW","=>",1083],["T_WHITESPACE"," ",1083],["T_VARIABLE","$repo",1083],["T_OBJECT_OPERATOR","->",1083],["T_STRING","table",1083],"(",")","]",")",";",["T_WHITESPACE","\n\n        ",1083],["T_RETURN","return",1085],["T_WHITESPACE"," ",1085],["T_STRING","parent",1085],["T_DOUBLE_COLON","::",1085],["T_STRING","delete",1085],"(",")",";",["T_WHITESPACE","\n    ",1085],"}",["T_WHITESPACE","\n\n    ",1086],["T_DOC_COMMENT","\/**\n     * Create an insert query.\n     *\n     * This changes the query type to be 'insert'.\n     * Note calling this method will reset any data previously set\n     * with Query::values()\n     *\n     * Can be combined with the where() method to create delete queries.\n     *\n     * @param array $columns The columns to insert into.\n     * @param array $types A map between columns & their datatypes.\n     * @return $this\n     *\/",1088],["T_WHITESPACE","\n    ",1100],["T_PUBLIC","public",1101],["T_WHITESPACE"," ",1101],["T_FUNCTION","function",1101],["T_WHITESPACE"," ",1101],["T_STRING","insert",1101],"(",["T_ARRAY","array",1101],["T_WHITESPACE"," ",1101],["T_VARIABLE","$columns",1101],",",["T_WHITESPACE"," ",1101],["T_ARRAY","array",1101],["T_WHITESPACE"," ",1101],["T_VARIABLE","$types",1101],["T_WHITESPACE"," ",1101],"=",["T_WHITESPACE"," ",1101],"[","]",")",["T_WHITESPACE","\n    ",1101],"{",["T_WHITESPACE","\n        ",1102],["T_VARIABLE","$table",1103],["T_WHITESPACE"," ",1103],"=",["T_WHITESPACE"," ",1103],["T_VARIABLE","$this",1103],["T_OBJECT_OPERATOR","->",1103],["T_STRING","repository",1103],"(",")",["T_OBJECT_OPERATOR","->",1103],["T_STRING","table",1103],"(",")",";",["T_WHITESPACE","\n        ",1103],["T_VARIABLE","$this",1104],["T_OBJECT_OPERATOR","->",1104],["T_STRING","into",1104],"(",["T_VARIABLE","$table",1104],")",";",["T_WHITESPACE","\n\n        ",1104],["T_RETURN","return",1106],["T_WHITESPACE"," ",1106],["T_STRING","parent",1106],["T_DOUBLE_COLON","::",1106],["T_STRING","insert",1106],"(",["T_VARIABLE","$columns",1106],",",["T_WHITESPACE"," ",1106],["T_VARIABLE","$types",1106],")",";",["T_WHITESPACE","\n    ",1106],"}",["T_WHITESPACE","\n\n    ",1107],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\n     * @throws \\BadMethodCallException if the method is called for a non-select query\n     *\/",1109],["T_WHITESPACE","\n    ",1113],["T_PUBLIC","public",1114],["T_WHITESPACE"," ",1114],["T_FUNCTION","function",1114],["T_WHITESPACE"," ",1114],["T_STRING","__call",1114],"(",["T_VARIABLE","$method",1114],",",["T_WHITESPACE"," ",1114],["T_VARIABLE","$arguments",1114],")",["T_WHITESPACE","\n    ",1114],"{",["T_WHITESPACE","\n        ",1115],["T_IF","if",1116],["T_WHITESPACE"," ",1116],"(",["T_VARIABLE","$this",1116],["T_OBJECT_OPERATOR","->",1116],["T_STRING","type",1116],"(",")",["T_WHITESPACE"," ",1116],["T_IS_IDENTICAL","===",1116],["T_WHITESPACE"," ",1116],["T_CONSTANT_ENCAPSED_STRING","'select'",1116],")",["T_WHITESPACE"," ",1116],"{",["T_WHITESPACE","\n            ",1116],["T_RETURN","return",1117],["T_WHITESPACE"," ",1117],["T_VARIABLE","$this",1117],["T_OBJECT_OPERATOR","->",1117],["T_STRING","_call",1117],"(",["T_VARIABLE","$method",1117],",",["T_WHITESPACE"," ",1117],["T_VARIABLE","$arguments",1117],")",";",["T_WHITESPACE","\n        ",1117],"}",["T_WHITESPACE","\n\n        ",1118],["T_THROW","throw",1120],["T_WHITESPACE"," ",1120],["T_NEW","new",1120],["T_WHITESPACE"," ",1120],["T_NS_SEPARATOR","\\",1120],["T_STRING","BadMethodCallException",1120],"(",["T_WHITESPACE","\n            ",1120],["T_STRING","sprintf",1121],"(",["T_CONSTANT_ENCAPSED_STRING","'Cannot call method \"%s\" on a \"%s\" query'",1121],",",["T_WHITESPACE"," ",1121],["T_VARIABLE","$method",1121],",",["T_WHITESPACE"," ",1121],["T_VARIABLE","$this",1121],["T_OBJECT_OPERATOR","->",1121],["T_STRING","type",1121],"(",")",")",["T_WHITESPACE","\n        ",1121],")",";",["T_WHITESPACE","\n    ",1122],"}",["T_WHITESPACE","\n\n    ",1123],["T_DOC_COMMENT","\/**\n     * {@inheritDoc}\n     *\/",1125],["T_WHITESPACE","\n    ",1127],["T_PUBLIC","public",1128],["T_WHITESPACE"," ",1128],["T_FUNCTION","function",1128],["T_WHITESPACE"," ",1128],["T_STRING","__debugInfo",1128],"(",")",["T_WHITESPACE","\n    ",1128],"{",["T_WHITESPACE","\n        ",1129],["T_VARIABLE","$eagerLoader",1130],["T_WHITESPACE"," ",1130],"=",["T_WHITESPACE"," ",1130],["T_VARIABLE","$this",1130],["T_OBJECT_OPERATOR","->",1130],["T_STRING","eagerLoader",1130],"(",")",";",["T_WHITESPACE","\n\n        ",1130],["T_RETURN","return",1132],["T_WHITESPACE"," ",1132],["T_STRING","parent",1132],["T_DOUBLE_COLON","::",1132],["T_STRING","__debugInfo",1132],"(",")",["T_WHITESPACE"," ",1132],"+",["T_WHITESPACE"," ",1132],"[",["T_WHITESPACE","\n            ",1132],["T_CONSTANT_ENCAPSED_STRING","'hydrate'",1133],["T_WHITESPACE"," ",1133],["T_DOUBLE_ARROW","=>",1133],["T_WHITESPACE"," ",1133],["T_VARIABLE","$this",1133],["T_OBJECT_OPERATOR","->",1133],["T_STRING","_hydrate",1133],",",["T_WHITESPACE","\n            ",1133],["T_CONSTANT_ENCAPSED_STRING","'buffered'",1134],["T_WHITESPACE"," ",1134],["T_DOUBLE_ARROW","=>",1134],["T_WHITESPACE"," ",1134],["T_VARIABLE","$this",1134],["T_OBJECT_OPERATOR","->",1134],["T_STRING","_useBufferedResults",1134],",",["T_WHITESPACE","\n            ",1134],["T_CONSTANT_ENCAPSED_STRING","'formatters'",1135],["T_WHITESPACE"," ",1135],["T_DOUBLE_ARROW","=>",1135],["T_WHITESPACE"," ",1135],["T_STRING","count",1135],"(",["T_VARIABLE","$this",1135],["T_OBJECT_OPERATOR","->",1135],["T_STRING","_formatters",1135],")",",",["T_WHITESPACE","\n            ",1135],["T_CONSTANT_ENCAPSED_STRING","'mapReducers'",1136],["T_WHITESPACE"," ",1136],["T_DOUBLE_ARROW","=>",1136],["T_WHITESPACE"," ",1136],["T_STRING","count",1136],"(",["T_VARIABLE","$this",1136],["T_OBJECT_OPERATOR","->",1136],["T_STRING","_mapReduce",1136],")",",",["T_WHITESPACE","\n            ",1136],["T_CONSTANT_ENCAPSED_STRING","'contain'",1137],["T_WHITESPACE"," ",1137],["T_DOUBLE_ARROW","=>",1137],["T_WHITESPACE"," ",1137],["T_VARIABLE","$eagerLoader",1137],["T_WHITESPACE"," ",1137],"?",["T_WHITESPACE"," ",1137],["T_VARIABLE","$eagerLoader",1137],["T_OBJECT_OPERATOR","->",1137],["T_STRING","contain",1137],"(",")",["T_WHITESPACE"," ",1137],":",["T_WHITESPACE"," ",1137],"[","]",",",["T_WHITESPACE","\n            ",1137],["T_CONSTANT_ENCAPSED_STRING","'matching'",1138],["T_WHITESPACE"," ",1138],["T_DOUBLE_ARROW","=>",1138],["T_WHITESPACE"," ",1138],["T_VARIABLE","$eagerLoader",1138],["T_WHITESPACE"," ",1138],"?",["T_WHITESPACE"," ",1138],["T_VARIABLE","$eagerLoader",1138],["T_OBJECT_OPERATOR","->",1138],["T_STRING","matching",1138],"(",")",["T_WHITESPACE"," ",1138],":",["T_WHITESPACE"," ",1138],"[","]",",",["T_WHITESPACE","\n            ",1138],["T_CONSTANT_ENCAPSED_STRING","'extraOptions'",1139],["T_WHITESPACE"," ",1139],["T_DOUBLE_ARROW","=>",1139],["T_WHITESPACE"," ",1139],["T_VARIABLE","$this",1139],["T_OBJECT_OPERATOR","->",1139],["T_STRING","_options",1139],",",["T_WHITESPACE","\n            ",1139],["T_CONSTANT_ENCAPSED_STRING","'repository'",1140],["T_WHITESPACE"," ",1140],["T_DOUBLE_ARROW","=>",1140],["T_WHITESPACE"," ",1140],["T_VARIABLE","$this",1140],["T_OBJECT_OPERATOR","->",1140],["T_STRING","_repository",1140],["T_WHITESPACE","\n        ",1140],"]",";",["T_WHITESPACE","\n    ",1141],"}",["T_WHITESPACE","\n\n    ",1142],["T_DOC_COMMENT","\/**\n     * Executes the query and converts the result set into JSON.\n     *\n     * Part of JsonSerializable interface.\n     *\n     * @return \\Cake\\Datasource\\ResultSetInterface The data to convert to JSON.\n     *\/",1144],["T_WHITESPACE","\n    ",1150],["T_PUBLIC","public",1151],["T_WHITESPACE"," ",1151],["T_FUNCTION","function",1151],["T_WHITESPACE"," ",1151],["T_STRING","jsonSerialize",1151],"(",")",["T_WHITESPACE","\n    ",1151],"{",["T_WHITESPACE","\n        ",1152],["T_RETURN","return",1153],["T_WHITESPACE"," ",1153],["T_VARIABLE","$this",1153],["T_OBJECT_OPERATOR","->",1153],["T_STRING","all",1153],"(",")",";",["T_WHITESPACE","\n    ",1153],"}",["T_WHITESPACE","\n\n    ",1154],["T_DOC_COMMENT","\/**\n     * Get\/Set whether or not the ORM should automatically append fields.\n     *\n     * By default calling select() will disable auto-fields. You can re-enable\n     * auto-fields with this method.\n     *\n     * @param bool|null $value The value to set or null to read the current value.\n     * @return bool|$this Either the current value or the query object.\n     *\/",1156],["T_WHITESPACE","\n    ",1164],["T_PUBLIC","public",1165],["T_WHITESPACE"," ",1165],["T_FUNCTION","function",1165],["T_WHITESPACE"," ",1165],["T_STRING","autoFields",1165],"(",["T_VARIABLE","$value",1165],["T_WHITESPACE"," ",1165],"=",["T_WHITESPACE"," ",1165],["T_STRING","null",1165],")",["T_WHITESPACE","\n    ",1165],"{",["T_WHITESPACE","\n        ",1166],["T_IF","if",1167],["T_WHITESPACE"," ",1167],"(",["T_VARIABLE","$value",1167],["T_WHITESPACE"," ",1167],["T_IS_IDENTICAL","===",1167],["T_WHITESPACE"," ",1167],["T_STRING","null",1167],")",["T_WHITESPACE"," ",1167],"{",["T_WHITESPACE","\n            ",1167],["T_RETURN","return",1168],["T_WHITESPACE"," ",1168],["T_VARIABLE","$this",1168],["T_OBJECT_OPERATOR","->",1168],["T_STRING","_autoFields",1168],";",["T_WHITESPACE","\n        ",1168],"}",["T_WHITESPACE","\n        ",1169],["T_VARIABLE","$this",1170],["T_OBJECT_OPERATOR","->",1170],["T_STRING","_autoFields",1170],["T_WHITESPACE"," ",1170],"=",["T_WHITESPACE"," ",1170],["T_BOOL_CAST","(bool)",1170],["T_VARIABLE","$value",1170],";",["T_WHITESPACE","\n\n        ",1170],["T_RETURN","return",1172],["T_WHITESPACE"," ",1172],["T_VARIABLE","$this",1172],";",["T_WHITESPACE","\n    ",1172],"}",["T_WHITESPACE","\n\n    ",1173],["T_DOC_COMMENT","\/**\n     * Decorates the results iterator with MapReduce routines and formatters\n     *\n     * @param \\Traversable $result Original results\n     * @return \\Cake\\Datasource\\ResultSetInterface\n     *\/",1175],["T_WHITESPACE","\n    ",1180],["T_PROTECTED","protected",1181],["T_WHITESPACE"," ",1181],["T_FUNCTION","function",1181],["T_WHITESPACE"," ",1181],["T_STRING","_decorateResults",1181],"(",["T_VARIABLE","$result",1181],")",["T_WHITESPACE","\n    ",1181],"{",["T_WHITESPACE","\n        ",1182],["T_VARIABLE","$result",1183],["T_WHITESPACE"," ",1183],"=",["T_WHITESPACE"," ",1183],["T_VARIABLE","$this",1183],["T_OBJECT_OPERATOR","->",1183],["T_STRING","_applyDecorators",1183],"(",["T_VARIABLE","$result",1183],")",";",["T_WHITESPACE","\n\n        ",1183],["T_IF","if",1185],["T_WHITESPACE"," ",1185],"(","!","(",["T_VARIABLE","$result",1185],["T_WHITESPACE"," ",1185],["T_INSTANCEOF","instanceof",1185],["T_WHITESPACE"," ",1185],["T_STRING","ResultSet",1185],")",["T_WHITESPACE"," ",1185],["T_BOOLEAN_AND","&&",1185],["T_WHITESPACE"," ",1185],["T_VARIABLE","$this",1185],["T_OBJECT_OPERATOR","->",1185],["T_STRING","bufferResults",1185],"(",")",")",["T_WHITESPACE"," ",1185],"{",["T_WHITESPACE","\n            ",1185],["T_VARIABLE","$class",1186],["T_WHITESPACE"," ",1186],"=",["T_WHITESPACE"," ",1186],["T_VARIABLE","$this",1186],["T_OBJECT_OPERATOR","->",1186],["T_STRING","_decoratorClass",1186],"(",")",";",["T_WHITESPACE","\n            ",1186],["T_VARIABLE","$result",1187],["T_WHITESPACE"," ",1187],"=",["T_WHITESPACE"," ",1187],["T_NEW","new",1187],["T_WHITESPACE"," ",1187],["T_VARIABLE","$class",1187],"(",["T_VARIABLE","$result",1187],["T_OBJECT_OPERATOR","->",1187],["T_STRING","buffered",1187],"(",")",")",";",["T_WHITESPACE","\n        ",1187],"}",["T_WHITESPACE","\n\n        ",1188],["T_RETURN","return",1190],["T_WHITESPACE"," ",1190],["T_VARIABLE","$result",1190],";",["T_WHITESPACE","\n    ",1190],"}",["T_WHITESPACE","\n",1191],"}",["T_WHITESPACE","\n",1192]]