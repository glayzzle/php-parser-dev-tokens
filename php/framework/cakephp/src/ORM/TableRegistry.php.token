[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","ORM",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","ORM",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Locator",17],["T_NS_SEPARATOR","\\",17],["T_STRING","LocatorInterface",17],";",["T_WHITESPACE","\n\n",17],["T_DOC_COMMENT","\/**\n * Provides a registry\/factory for Table objects.\n *\n * This registry allows you to centralize the configuration for tables\n * their connections and other meta-data.\n *\n * ### Configuring instances\n *\n * You may need to configure your table objects, using TableRegistry you can\n * centralize configuration. Any configuration set before instances are created\n * will be used when creating instances. If you modify configuration after\n * an instance is made, the instances *will not* be updated.\n *\n * ```\n * TableRegistry::config('Users', ['table' => 'my_users']);\n * ```\n *\n * Configuration data is stored *per alias* if you use the same table with\n * multiple aliases you will need to set configuration multiple times.\n *\n * ### Getting instances\n *\n * You can fetch instances out of the registry using get(). One instance is stored\n * per alias. Once an alias is populated the same instance will always be returned.\n * This is used to make the ORM use less memory and help make cyclic references easier\n * to solve.\n *\n * ```\n * $table = TableRegistry::get('Users', $config);\n * ```\n *\/",19],["T_WHITESPACE","\n",49],["T_CLASS","class",50],["T_WHITESPACE"," ",50],["T_STRING","TableRegistry",50],["T_WHITESPACE","\n",50],"{",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * LocatorInterface implementation instance.\n     *\n     * @var \\Cake\\ORM\\Locator\\LocatorInterface\n     *\/",53],["T_WHITESPACE","\n    ",57],["T_PROTECTED","protected",58],["T_WHITESPACE"," ",58],["T_STATIC","static",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$_locator",58],";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Default LocatorInterface implementation class.\n     *\n     * @var string\n     *\/",60],["T_WHITESPACE","\n    ",64],["T_PROTECTED","protected",65],["T_WHITESPACE"," ",65],["T_STATIC","static",65],["T_WHITESPACE"," ",65],["T_VARIABLE","$_defaultLocatorClass",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],["T_CONSTANT_ENCAPSED_STRING","'Cake\\ORM\\Locator\\TableLocator'",65],";",["T_WHITESPACE","\n\n    ",65],["T_DOC_COMMENT","\/**\n     * Sets and returns a singleton instance of LocatorInterface implementation.\n     *\n     * @param \\Cake\\ORM\\Locator\\LocatorInterface|null $locator Instance of a locator to use.\n     * @return \\Cake\\ORM\\Locator\\LocatorInterface\n     *\/",67],["T_WHITESPACE","\n    ",72],["T_PUBLIC","public",73],["T_WHITESPACE"," ",73],["T_STATIC","static",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","locator",73],"(",["T_STRING","LocatorInterface",73],["T_WHITESPACE"," ",73],["T_VARIABLE","$locator",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_STRING","null",73],")",["T_WHITESPACE","\n    ",73],"{",["T_WHITESPACE","\n        ",74],["T_IF","if",75],["T_WHITESPACE"," ",75],"(",["T_VARIABLE","$locator",75],")",["T_WHITESPACE"," ",75],"{",["T_WHITESPACE","\n            ",75],["T_STATIC","static",76],["T_DOUBLE_COLON","::",76],["T_VARIABLE","$_locator",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_VARIABLE","$locator",76],";",["T_WHITESPACE","\n        ",76],"}",["T_WHITESPACE","\n\n        ",77],["T_IF","if",79],["T_WHITESPACE"," ",79],"(","!",["T_STATIC","static",79],["T_DOUBLE_COLON","::",79],["T_VARIABLE","$_locator",79],")",["T_WHITESPACE"," ",79],"{",["T_WHITESPACE","\n            ",79],["T_STATIC","static",80],["T_DOUBLE_COLON","::",80],["T_VARIABLE","$_locator",80],["T_WHITESPACE"," ",80],"=",["T_WHITESPACE"," ",80],["T_NEW","new",80],["T_WHITESPACE"," ",80],["T_STATIC","static",80],["T_DOUBLE_COLON","::",80],["T_VARIABLE","$_defaultLocatorClass",80],";",["T_WHITESPACE","\n        ",80],"}",["T_WHITESPACE","\n\n        ",81],["T_RETURN","return",83],["T_WHITESPACE"," ",83],["T_STATIC","static",83],["T_DOUBLE_COLON","::",83],["T_VARIABLE","$_locator",83],";",["T_WHITESPACE","\n    ",83],"}",["T_WHITESPACE","\n\n    ",84],["T_DOC_COMMENT","\/**\n     * Stores a list of options to be used when instantiating an object\n     * with a matching alias.\n     *\n     * @param string|null $alias Name of the alias\n     * @param array|null $options list of options for the alias\n     * @return array The config data.\n     *\/",86],["T_WHITESPACE","\n    ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_STATIC","static",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","config",94],"(",["T_VARIABLE","$alias",94],["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_STRING","null",94],",",["T_WHITESPACE"," ",94],["T_VARIABLE","$options",94],["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_STRING","null",94],")",["T_WHITESPACE","\n    ",94],"{",["T_WHITESPACE","\n        ",95],["T_RETURN","return",96],["T_WHITESPACE"," ",96],["T_STATIC","static",96],["T_DOUBLE_COLON","::",96],["T_STRING","locator",96],"(",")",["T_OBJECT_OPERATOR","->",96],["T_STRING","config",96],"(",["T_VARIABLE","$alias",96],",",["T_WHITESPACE"," ",96],["T_VARIABLE","$options",96],")",";",["T_WHITESPACE","\n    ",96],"}",["T_WHITESPACE","\n\n    ",97],["T_DOC_COMMENT","\/**\n     * Get a table instance from the registry.\n     *\n     * See options specification in {@link TableLocator::get()}.\n     *\n     * @param string $alias The alias name you want to get.\n     * @param array $options The options you want to build the table with.\n     * @return \\Cake\\ORM\\Table\n     *\/",99],["T_WHITESPACE","\n    ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_STATIC","static",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","get",108],"(",["T_VARIABLE","$alias",108],",",["T_WHITESPACE"," ",108],["T_ARRAY","array",108],["T_WHITESPACE"," ",108],["T_VARIABLE","$options",108],["T_WHITESPACE"," ",108],"=",["T_WHITESPACE"," ",108],"[","]",")",["T_WHITESPACE","\n    ",108],"{",["T_WHITESPACE","\n        ",109],["T_RETURN","return",110],["T_WHITESPACE"," ",110],["T_STATIC","static",110],["T_DOUBLE_COLON","::",110],["T_STRING","locator",110],"(",")",["T_OBJECT_OPERATOR","->",110],["T_STRING","get",110],"(",["T_VARIABLE","$alias",110],",",["T_WHITESPACE"," ",110],["T_VARIABLE","$options",110],")",";",["T_WHITESPACE","\n    ",110],"}",["T_WHITESPACE","\n\n    ",111],["T_DOC_COMMENT","\/**\n     * Check to see if an instance exists in the registry.\n     *\n     * @param string $alias The alias to check for.\n     * @return bool\n     *\/",113],["T_WHITESPACE","\n    ",118],["T_PUBLIC","public",119],["T_WHITESPACE"," ",119],["T_STATIC","static",119],["T_WHITESPACE"," ",119],["T_FUNCTION","function",119],["T_WHITESPACE"," ",119],["T_STRING","exists",119],"(",["T_VARIABLE","$alias",119],")",["T_WHITESPACE","\n    ",119],"{",["T_WHITESPACE","\n        ",120],["T_RETURN","return",121],["T_WHITESPACE"," ",121],["T_STATIC","static",121],["T_DOUBLE_COLON","::",121],["T_STRING","locator",121],"(",")",["T_OBJECT_OPERATOR","->",121],["T_STRING","exists",121],"(",["T_VARIABLE","$alias",121],")",";",["T_WHITESPACE","\n    ",121],"}",["T_WHITESPACE","\n\n    ",122],["T_DOC_COMMENT","\/**\n     * Set an instance.\n     *\n     * @param string $alias The alias to set.\n     * @param \\Cake\\ORM\\Table $object The table to set.\n     * @return \\Cake\\ORM\\Table\n     *\/",124],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_STATIC","static",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","set",131],"(",["T_VARIABLE","$alias",131],",",["T_WHITESPACE"," ",131],["T_STRING","Table",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$object",131],")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_RETURN","return",133],["T_WHITESPACE"," ",133],["T_STATIC","static",133],["T_DOUBLE_COLON","::",133],["T_STRING","locator",133],"(",")",["T_OBJECT_OPERATOR","->",133],["T_STRING","set",133],"(",["T_VARIABLE","$alias",133],",",["T_WHITESPACE"," ",133],["T_VARIABLE","$object",133],")",";",["T_WHITESPACE","\n    ",133],"}",["T_WHITESPACE","\n\n    ",134],["T_DOC_COMMENT","\/**\n     * Removes an instance from the registry.\n     *\n     * @param string $alias The alias to remove.\n     * @return void\n     *\/",136],["T_WHITESPACE","\n    ",141],["T_PUBLIC","public",142],["T_WHITESPACE"," ",142],["T_STATIC","static",142],["T_WHITESPACE"," ",142],["T_FUNCTION","function",142],["T_WHITESPACE"," ",142],["T_STRING","remove",142],"(",["T_VARIABLE","$alias",142],")",["T_WHITESPACE","\n    ",142],"{",["T_WHITESPACE","\n        ",143],["T_STATIC","static",144],["T_DOUBLE_COLON","::",144],["T_STRING","locator",144],"(",")",["T_OBJECT_OPERATOR","->",144],["T_STRING","remove",144],"(",["T_VARIABLE","$alias",144],")",";",["T_WHITESPACE","\n    ",144],"}",["T_WHITESPACE","\n\n    ",145],["T_DOC_COMMENT","\/**\n     * Clears the registry of configuration and instances.\n     *\n     * @return void\n     *\/",147],["T_WHITESPACE","\n    ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_STATIC","static",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","clear",152],"(",")",["T_WHITESPACE","\n    ",152],"{",["T_WHITESPACE","\n        ",153],["T_STATIC","static",154],["T_DOUBLE_COLON","::",154],["T_STRING","locator",154],"(",")",["T_OBJECT_OPERATOR","->",154],["T_STRING","clear",154],"(",")",";",["T_WHITESPACE","\n    ",154],"}",["T_WHITESPACE","\n\n    ",155],["T_DOC_COMMENT","\/**\n     * Proxy for static calls on a locator.\n     *\n     * @param string $name Method name.\n     * @param array $arguments Method arguments.\n     * @return mixed\n     *\/",157],["T_WHITESPACE","\n    ",163],["T_PUBLIC","public",164],["T_WHITESPACE"," ",164],["T_STATIC","static",164],["T_WHITESPACE"," ",164],["T_FUNCTION","function",164],["T_WHITESPACE"," ",164],["T_STRING","__callStatic",164],"(",["T_VARIABLE","$name",164],",",["T_WHITESPACE"," ",164],["T_VARIABLE","$arguments",164],")",["T_WHITESPACE","\n    ",164],"{",["T_WHITESPACE","\n        ",165],["T_RETURN","return",166],["T_WHITESPACE"," ",166],["T_STRING","call_user_func_array",166],"(","[",["T_STATIC","static",166],["T_DOUBLE_COLON","::",166],["T_STRING","locator",166],"(",")",",",["T_WHITESPACE"," ",166],["T_VARIABLE","$name",166],"]",",",["T_WHITESPACE"," ",166],["T_VARIABLE","$arguments",166],")",";",["T_WHITESPACE","\n    ",166],"}",["T_WHITESPACE","\n",167],"}",["T_WHITESPACE","\n",168]]