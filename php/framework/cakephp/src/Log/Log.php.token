[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         0.2.9\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",13],["T_NAMESPACE","namespace",14],["T_WHITESPACE"," ",14],["T_STRING","Cake",14],["T_NS_SEPARATOR","\\",14],["T_STRING","Log",14],";",["T_WHITESPACE","\n\n",14],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","Cake",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Core",16],["T_NS_SEPARATOR","\\",16],["T_STRING","StaticConfigTrait",16],";",["T_WHITESPACE","\n",16],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Log",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Engine",17],["T_NS_SEPARATOR","\\",17],["T_STRING","BaseLog",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","InvalidArgumentException",18],";",["T_WHITESPACE","\n\n",18],["T_DOC_COMMENT","\/**\n * Logs messages to configured Log adapters.  One or more adapters\n * can be configured using Cake Logs's methods.  If you don't\n * configure any adapters, and write to Log, the messages will be\n * ignored.\n *\n * ### Configuring Log adapters\n *\n * You can configure log adapters in your applications `config\/app.php` file.\n * A sample configuration would look like:\n *\n * ```\n * Log::config('my_log', ['className' => 'FileLog']);\n * ```\n *\n * You can define the className as any fully namespaced classname or use a short hand\n * classname to use loggers in the `App\\Log\\Engine` & `Cake\\Log\\Engine` namespaces.\n * You can also use plugin short hand to use logging classes provided by plugins.\n *\n * Log adapters are required to implement `Psr\\Log\\LoggerInterface`, and there is a\n * built-in base class (`Cake\\Log\\Engine\\BaseLog`) that can be used for custom loggers.\n *\n * Outside of the `className` key, all other configuration values will be passed to the\n * logging adapter's constructor as an array.\n *\n * ### Logging levels\n *\n * When configuring loggers, you can set which levels a logger will handle.\n * This allows you to disable debug messages in production for example:\n *\n * ```\n * Log::config('default', [\n *     'className' => 'File',\n *     'path' => LOGS,\n *     'levels' => ['error', 'critical', 'alert', 'emergency']\n * ]);\n * ```\n *\n * The above logger would only log error messages or higher. Any\n * other log messages would be discarded.\n *\n * ### Logging scopes\n *\n * When configuring loggers you can define the active scopes the logger\n * is for. If defined, only the listed scopes will be handled by the\n * logger. If you don't define any scopes an adapter will catch\n * all scopes that match the handled levels.\n *\n * ```\n * Log::config('payments', [\n *     'className' => 'File',\n *     'scopes' => ['payment', 'order']\n * ]);\n * ```\n *\n * The above logger will only capture log entries made in the\n * `payment` and `order` scopes. All other scopes including the\n * undefined scope will be ignored.\n *\n * ### Writing to the log\n *\n * You write to the logs using Log::write().  See its documentation for more information.\n *\n * ### Logging Levels\n *\n * By default Cake Log supports all the log levels defined in\n * RFC 5424. When logging messages you can either use the named methods,\n * or the correct constants with `write()`:\n *\n * ```\n * Log::error('Something horrible happened');\n * Log::write(LOG_ERR, 'Something horrible happened');\n * ```\n *\n * ### Logging scopes\n *\n * When logging messages and configuring log adapters, you can specify\n * 'scopes' that the logger will handle.  You can think of scopes as subsystems\n * in your application that may require different logging setups.  For\n * example in an e-commerce application you may want to handle logged errors\n * in the cart and ordering subsystems differently than the rest of the\n * application.  By using scopes you can control logging for each part\n * of your application and also use standard log levels.\n *\/",20],["T_WHITESPACE","\n",103],["T_CLASS","class",104],["T_WHITESPACE"," ",104],["T_STRING","Log",104],["T_WHITESPACE","\n",104],"{",["T_WHITESPACE","\n\n    ",105],["T_USE","use",107],["T_WHITESPACE"," ",107],["T_STRING","StaticConfigTrait",107],["T_WHITESPACE"," ",107],"{",["T_WHITESPACE","\n        ",107],["T_STRING","config",108],["T_WHITESPACE"," ",108],["T_AS","as",108],["T_WHITESPACE"," ",108],["T_PROTECTED","protected",108],["T_WHITESPACE"," ",108],["T_STRING","_config",108],";",["T_WHITESPACE","\n    ",108],"}",["T_WHITESPACE","\n\n    ",109],["T_DOC_COMMENT","\/**\n     * An array mapping url schemes to fully qualified Log engine class names\n     *\n     * @var array\n     *\/",111],["T_WHITESPACE","\n    ",115],["T_PROTECTED","protected",116],["T_WHITESPACE"," ",116],["T_STATIC","static",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$_dsnClassMap",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],"[",["T_WHITESPACE","\n        ",116],["T_CONSTANT_ENCAPSED_STRING","'console'",117],["T_WHITESPACE"," ",117],["T_DOUBLE_ARROW","=>",117],["T_WHITESPACE"," ",117],["T_CONSTANT_ENCAPSED_STRING","'Cake\\Log\\Engine\\ConsoleLog'",117],",",["T_WHITESPACE","\n        ",117],["T_CONSTANT_ENCAPSED_STRING","'file'",118],["T_WHITESPACE"," ",118],["T_DOUBLE_ARROW","=>",118],["T_WHITESPACE"," ",118],["T_CONSTANT_ENCAPSED_STRING","'Cake\\Log\\Engine\\FileLog'",118],",",["T_WHITESPACE","\n        ",118],["T_CONSTANT_ENCAPSED_STRING","'syslog'",119],["T_WHITESPACE"," ",119],["T_DOUBLE_ARROW","=>",119],["T_WHITESPACE"," ",119],["T_CONSTANT_ENCAPSED_STRING","'Cake\\Log\\Engine\\SyslogLog'",119],",",["T_WHITESPACE","\n    ",119],"]",";",["T_WHITESPACE","\n\n    ",120],["T_DOC_COMMENT","\/**\n     * Internal flag for tracking whether or not configuration has been changed.\n     *\n     * @var bool\n     *\/",122],["T_WHITESPACE","\n    ",126],["T_PROTECTED","protected",127],["T_WHITESPACE"," ",127],["T_STATIC","static",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$_dirtyConfig",127],["T_WHITESPACE"," ",127],"=",["T_WHITESPACE"," ",127],["T_STRING","false",127],";",["T_WHITESPACE","\n\n    ",127],["T_DOC_COMMENT","\/**\n     * LogEngineRegistry class\n     *\n     * @var \\Cake\\Log\\LogEngineRegistry\n     *\/",129],["T_WHITESPACE","\n    ",133],["T_PROTECTED","protected",134],["T_WHITESPACE"," ",134],["T_STATIC","static",134],["T_WHITESPACE"," ",134],["T_VARIABLE","$_registry",134],";",["T_WHITESPACE","\n\n    ",134],["T_DOC_COMMENT","\/**\n     * Handled log levels\n     *\n     * @var array\n     *\/",136],["T_WHITESPACE","\n    ",140],["T_PROTECTED","protected",141],["T_WHITESPACE"," ",141],["T_STATIC","static",141],["T_WHITESPACE"," ",141],["T_VARIABLE","$_levels",141],["T_WHITESPACE"," ",141],"=",["T_WHITESPACE"," ",141],"[",["T_WHITESPACE","\n        ",141],["T_CONSTANT_ENCAPSED_STRING","'emergency'",142],",",["T_WHITESPACE","\n        ",142],["T_CONSTANT_ENCAPSED_STRING","'alert'",143],",",["T_WHITESPACE","\n        ",143],["T_CONSTANT_ENCAPSED_STRING","'critical'",144],",",["T_WHITESPACE","\n        ",144],["T_CONSTANT_ENCAPSED_STRING","'error'",145],",",["T_WHITESPACE","\n        ",145],["T_CONSTANT_ENCAPSED_STRING","'warning'",146],",",["T_WHITESPACE","\n        ",146],["T_CONSTANT_ENCAPSED_STRING","'notice'",147],",",["T_WHITESPACE","\n        ",147],["T_CONSTANT_ENCAPSED_STRING","'info'",148],",",["T_WHITESPACE","\n        ",148],["T_CONSTANT_ENCAPSED_STRING","'debug'",149],["T_WHITESPACE","\n    ",149],"]",";",["T_WHITESPACE","\n\n    ",150],["T_DOC_COMMENT","\/**\n     * Log levels as detailed in RFC 5424\n     * http:\/\/tools.ietf.org\/html\/rfc5424\n     *\n     * @var array\n     *\/",152],["T_WHITESPACE","\n    ",157],["T_PROTECTED","protected",158],["T_WHITESPACE"," ",158],["T_STATIC","static",158],["T_WHITESPACE"," ",158],["T_VARIABLE","$_levelMap",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],"[",["T_WHITESPACE","\n        ",158],["T_CONSTANT_ENCAPSED_STRING","'emergency'",159],["T_WHITESPACE"," ",159],["T_DOUBLE_ARROW","=>",159],["T_WHITESPACE"," ",159],["T_STRING","LOG_EMERG",159],",",["T_WHITESPACE","\n        ",159],["T_CONSTANT_ENCAPSED_STRING","'alert'",160],["T_WHITESPACE"," ",160],["T_DOUBLE_ARROW","=>",160],["T_WHITESPACE"," ",160],["T_STRING","LOG_ALERT",160],",",["T_WHITESPACE","\n        ",160],["T_CONSTANT_ENCAPSED_STRING","'critical'",161],["T_WHITESPACE"," ",161],["T_DOUBLE_ARROW","=>",161],["T_WHITESPACE"," ",161],["T_STRING","LOG_CRIT",161],",",["T_WHITESPACE","\n        ",161],["T_CONSTANT_ENCAPSED_STRING","'error'",162],["T_WHITESPACE"," ",162],["T_DOUBLE_ARROW","=>",162],["T_WHITESPACE"," ",162],["T_STRING","LOG_ERR",162],",",["T_WHITESPACE","\n        ",162],["T_CONSTANT_ENCAPSED_STRING","'warning'",163],["T_WHITESPACE"," ",163],["T_DOUBLE_ARROW","=>",163],["T_WHITESPACE"," ",163],["T_STRING","LOG_WARNING",163],",",["T_WHITESPACE","\n        ",163],["T_CONSTANT_ENCAPSED_STRING","'notice'",164],["T_WHITESPACE"," ",164],["T_DOUBLE_ARROW","=>",164],["T_WHITESPACE"," ",164],["T_STRING","LOG_NOTICE",164],",",["T_WHITESPACE","\n        ",164],["T_CONSTANT_ENCAPSED_STRING","'info'",165],["T_WHITESPACE"," ",165],["T_DOUBLE_ARROW","=>",165],["T_WHITESPACE"," ",165],["T_STRING","LOG_INFO",165],",",["T_WHITESPACE","\n        ",165],["T_CONSTANT_ENCAPSED_STRING","'debug'",166],["T_WHITESPACE"," ",166],["T_DOUBLE_ARROW","=>",166],["T_WHITESPACE"," ",166],["T_STRING","LOG_DEBUG",166],",",["T_WHITESPACE","\n    ",166],"]",";",["T_WHITESPACE","\n\n    ",167],["T_DOC_COMMENT","\/**\n     * Initializes registry and configurations\n     *\n     * @return void\n     *\/",169],["T_WHITESPACE","\n    ",173],["T_PROTECTED","protected",174],["T_WHITESPACE"," ",174],["T_STATIC","static",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","_init",174],"(",")",["T_WHITESPACE","\n    ",174],"{",["T_WHITESPACE","\n        ",175],["T_IF","if",176],["T_WHITESPACE"," ",176],"(",["T_EMPTY","empty",176],"(",["T_STATIC","static",176],["T_DOUBLE_COLON","::",176],["T_VARIABLE","$_registry",176],")",")",["T_WHITESPACE"," ",176],"{",["T_WHITESPACE","\n            ",176],["T_STATIC","static",177],["T_DOUBLE_COLON","::",177],["T_VARIABLE","$_registry",177],["T_WHITESPACE"," ",177],"=",["T_WHITESPACE"," ",177],["T_NEW","new",177],["T_WHITESPACE"," ",177],["T_STRING","LogEngineRegistry",177],"(",")",";",["T_WHITESPACE","\n        ",177],"}",["T_WHITESPACE","\n        ",178],["T_IF","if",179],["T_WHITESPACE"," ",179],"(",["T_STATIC","static",179],["T_DOUBLE_COLON","::",179],["T_VARIABLE","$_dirtyConfig",179],")",["T_WHITESPACE"," ",179],"{",["T_WHITESPACE","\n            ",179],["T_STATIC","static",180],["T_DOUBLE_COLON","::",180],["T_STRING","_loadConfig",180],"(",")",";",["T_WHITESPACE","\n        ",180],"}",["T_WHITESPACE","\n        ",181],["T_STATIC","static",182],["T_DOUBLE_COLON","::",182],["T_VARIABLE","$_dirtyConfig",182],["T_WHITESPACE"," ",182],"=",["T_WHITESPACE"," ",182],["T_STRING","false",182],";",["T_WHITESPACE","\n    ",182],"}",["T_WHITESPACE","\n\n    ",183],["T_DOC_COMMENT","\/**\n     * Load the defined configuration and create all the defined logging\n     * adapters.\n     *\n     * @return void\n     *\/",185],["T_WHITESPACE","\n    ",190],["T_PROTECTED","protected",191],["T_WHITESPACE"," ",191],["T_STATIC","static",191],["T_WHITESPACE"," ",191],["T_FUNCTION","function",191],["T_WHITESPACE"," ",191],["T_STRING","_loadConfig",191],"(",")",["T_WHITESPACE","\n    ",191],"{",["T_WHITESPACE","\n        ",192],["T_FOREACH","foreach",193],["T_WHITESPACE"," ",193],"(",["T_STATIC","static",193],["T_DOUBLE_COLON","::",193],["T_VARIABLE","$_config",193],["T_WHITESPACE"," ",193],["T_AS","as",193],["T_WHITESPACE"," ",193],["T_VARIABLE","$name",193],["T_WHITESPACE"," ",193],["T_DOUBLE_ARROW","=>",193],["T_WHITESPACE"," ",193],["T_VARIABLE","$properties",193],")",["T_WHITESPACE"," ",193],"{",["T_WHITESPACE","\n            ",193],["T_IF","if",194],["T_WHITESPACE"," ",194],"(",["T_ISSET","isset",194],"(",["T_VARIABLE","$properties",194],"[",["T_CONSTANT_ENCAPSED_STRING","'engine'",194],"]",")",")",["T_WHITESPACE"," ",194],"{",["T_WHITESPACE","\n                ",194],["T_VARIABLE","$properties",195],"[",["T_CONSTANT_ENCAPSED_STRING","'className'",195],"]",["T_WHITESPACE"," ",195],"=",["T_WHITESPACE"," ",195],["T_VARIABLE","$properties",195],"[",["T_CONSTANT_ENCAPSED_STRING","'engine'",195],"]",";",["T_WHITESPACE","\n            ",195],"}",["T_WHITESPACE","\n            ",196],["T_IF","if",197],["T_WHITESPACE"," ",197],"(","!",["T_STATIC","static",197],["T_DOUBLE_COLON","::",197],["T_VARIABLE","$_registry",197],["T_OBJECT_OPERATOR","->",197],["T_STRING","has",197],"(",["T_VARIABLE","$name",197],")",")",["T_WHITESPACE"," ",197],"{",["T_WHITESPACE","\n                ",197],["T_STATIC","static",198],["T_DOUBLE_COLON","::",198],["T_VARIABLE","$_registry",198],["T_OBJECT_OPERATOR","->",198],["T_STRING","load",198],"(",["T_VARIABLE","$name",198],",",["T_WHITESPACE"," ",198],["T_VARIABLE","$properties",198],")",";",["T_WHITESPACE","\n            ",198],"}",["T_WHITESPACE","\n        ",199],"}",["T_WHITESPACE","\n    ",200],"}",["T_WHITESPACE","\n\n    ",201],["T_DOC_COMMENT","\/**\n     * Reset all the connected loggers.  This is useful to do when changing the logging\n     * configuration or during testing when you want to reset the internal state of the\n     * Log class.\n     *\n     * Resets the configured logging adapters, as well as any custom logging levels.\n     * This will also clear the configuration data.\n     *\n     * @return void\n     *\/",203],["T_WHITESPACE","\n    ",212],["T_PUBLIC","public",213],["T_WHITESPACE"," ",213],["T_STATIC","static",213],["T_WHITESPACE"," ",213],["T_FUNCTION","function",213],["T_WHITESPACE"," ",213],["T_STRING","reset",213],"(",")",["T_WHITESPACE","\n    ",213],"{",["T_WHITESPACE","\n        ",214],["T_STATIC","static",215],["T_DOUBLE_COLON","::",215],["T_VARIABLE","$_registry",215],["T_WHITESPACE"," ",215],"=",["T_WHITESPACE"," ",215],["T_STRING","null",215],";",["T_WHITESPACE","\n        ",215],["T_STATIC","static",216],["T_DOUBLE_COLON","::",216],["T_VARIABLE","$_config",216],["T_WHITESPACE"," ",216],"=",["T_WHITESPACE"," ",216],"[","]",";",["T_WHITESPACE","\n        ",216],["T_STATIC","static",217],["T_DOUBLE_COLON","::",217],["T_VARIABLE","$_dirtyConfig",217],["T_WHITESPACE"," ",217],"=",["T_WHITESPACE"," ",217],["T_STRING","true",217],";",["T_WHITESPACE","\n    ",217],"}",["T_WHITESPACE","\n\n    ",218],["T_DOC_COMMENT","\/**\n     * Gets log levels\n     *\n     * Call this method to obtain current\n     * level configuration.\n     *\n     * @return array active log levels\n     *\/",220],["T_WHITESPACE","\n    ",227],["T_PUBLIC","public",228],["T_WHITESPACE"," ",228],["T_STATIC","static",228],["T_WHITESPACE"," ",228],["T_FUNCTION","function",228],["T_WHITESPACE"," ",228],["T_STRING","levels",228],"(",")",["T_WHITESPACE","\n    ",228],"{",["T_WHITESPACE","\n        ",229],["T_RETURN","return",230],["T_WHITESPACE"," ",230],["T_STATIC","static",230],["T_DOUBLE_COLON","::",230],["T_VARIABLE","$_levels",230],";",["T_WHITESPACE","\n    ",230],"}",["T_WHITESPACE","\n\n    ",231],["T_DOC_COMMENT","\/**\n     * This method can be used to define logging adapters for an application\n     * or read existing configuration.\n     *\n     * To change an adapter's configuration at runtime, first drop the adapter and then\n     * reconfigure it.\n     *\n     * Loggers will not be constructed until the first log message is written.\n     *\n     * ### Usage\n     *\n     * Reading config data back:\n     *\n     * ```\n     * Log::config('default');\n     * ```\n     *\n     * Setting a cache engine up.\n     *\n     * ```\n     * Log::config('default', $settings);\n     * ```\n     *\n     * Injecting a constructed adapter in:\n     *\n     * ```\n     * Log::config('default', $instance);\n     * ```\n     *\n     * Using a factory function to get an adapter:\n     *\n     * ```\n     * Log::config('default', function () { return new FileLog(); });\n     * ```\n     *\n     * Configure multiple adapters at once:\n     *\n     * ```\n     * Log::config($arrayOfConfig);\n     * ```\n     *\n     * @param string|array $key The name of the logger config, or an array of multiple configs.\n     * @param array|null $config An array of name => config data for adapter.\n     * @return array|null Null when adding configuration and an array of configuration data when reading.\n     * @throws \\BadMethodCallException When trying to modify an existing config.\n     *\/",233],["T_WHITESPACE","\n    ",278],["T_PUBLIC","public",279],["T_WHITESPACE"," ",279],["T_STATIC","static",279],["T_WHITESPACE"," ",279],["T_FUNCTION","function",279],["T_WHITESPACE"," ",279],["T_STRING","config",279],"(",["T_VARIABLE","$key",279],",",["T_WHITESPACE"," ",279],["T_VARIABLE","$config",279],["T_WHITESPACE"," ",279],"=",["T_WHITESPACE"," ",279],["T_STRING","null",279],")",["T_WHITESPACE","\n    ",279],"{",["T_WHITESPACE","\n        ",280],["T_VARIABLE","$return",281],["T_WHITESPACE"," ",281],"=",["T_WHITESPACE"," ",281],["T_STATIC","static",281],["T_DOUBLE_COLON","::",281],["T_STRING","_config",281],"(",["T_VARIABLE","$key",281],",",["T_WHITESPACE"," ",281],["T_VARIABLE","$config",281],")",";",["T_WHITESPACE","\n        ",281],["T_IF","if",282],["T_WHITESPACE"," ",282],"(",["T_VARIABLE","$return",282],["T_WHITESPACE"," ",282],["T_IS_NOT_IDENTICAL","!==",282],["T_WHITESPACE"," ",282],["T_STRING","null",282],")",["T_WHITESPACE"," ",282],"{",["T_WHITESPACE","\n            ",282],["T_RETURN","return",283],["T_WHITESPACE"," ",283],["T_VARIABLE","$return",283],";",["T_WHITESPACE","\n        ",283],"}",["T_WHITESPACE","\n        ",284],["T_STATIC","static",285],["T_DOUBLE_COLON","::",285],["T_VARIABLE","$_dirtyConfig",285],["T_WHITESPACE"," ",285],"=",["T_WHITESPACE"," ",285],["T_STRING","true",285],";",["T_WHITESPACE","\n    ",285],"}",["T_WHITESPACE","\n\n    ",286],["T_DOC_COMMENT","\/**\n     * Get a logging engine.\n     *\n     * @param string $name Key name of a configured adapter to get.\n     * @return \\Cake\\Log\\Engine\\BaseLog|false Instance of BaseLog or false if not found\n     *\/",288],["T_WHITESPACE","\n    ",293],["T_PUBLIC","public",294],["T_WHITESPACE"," ",294],["T_STATIC","static",294],["T_WHITESPACE"," ",294],["T_FUNCTION","function",294],["T_WHITESPACE"," ",294],["T_STRING","engine",294],"(",["T_VARIABLE","$name",294],")",["T_WHITESPACE","\n    ",294],"{",["T_WHITESPACE","\n        ",295],["T_STATIC","static",296],["T_DOUBLE_COLON","::",296],["T_STRING","_init",296],"(",")",";",["T_WHITESPACE","\n        ",296],["T_IF","if",297],["T_WHITESPACE"," ",297],"(",["T_STATIC","static",297],["T_DOUBLE_COLON","::",297],["T_VARIABLE","$_registry",297],["T_OBJECT_OPERATOR","->",297],"{",["T_VARIABLE","$name",297],"}",")",["T_WHITESPACE"," ",297],"{",["T_WHITESPACE","\n            ",297],["T_RETURN","return",298],["T_WHITESPACE"," ",298],["T_STATIC","static",298],["T_DOUBLE_COLON","::",298],["T_VARIABLE","$_registry",298],["T_OBJECT_OPERATOR","->",298],"{",["T_VARIABLE","$name",298],"}",";",["T_WHITESPACE","\n        ",298],"}",["T_WHITESPACE","\n\n        ",299],["T_RETURN","return",301],["T_WHITESPACE"," ",301],["T_STRING","false",301],";",["T_WHITESPACE","\n    ",301],"}",["T_WHITESPACE","\n\n    ",302],["T_DOC_COMMENT","\/**\n     * Writes the given message and type to all of the configured log adapters.\n     * Configured adapters are passed both the $level and $message variables. $level\n     * is one of the following strings\/values.\n     *\n     * ### Levels:\n     *\n     * - `LOG_EMERG` => 'emergency',\n     * - `LOG_ALERT` => 'alert',\n     * - `LOG_CRIT` => 'critical',\n     * - `LOG_ERR` => 'error',\n     * - `LOG_WARNING` => 'warning',\n     * - `LOG_NOTICE` => 'notice',\n     * - `LOG_INFO` => 'info',\n     * - `LOG_DEBUG` => 'debug',\n     *\n     * ### Basic usage\n     *\n     * Write a 'warning' message to the logs:\n     *\n     * ```\n     * Log::write('warning', 'Stuff is broken here');\n     * ```\n     *\n     * ### Using scopes\n     *\n     * When writing a log message you can define one or many scopes for the message.\n     * This allows you to handle messages differently based on application section\/feature.\n     *\n     * ```\n     * Log::write('warning', 'Payment failed', ['scope' => 'payment']);\n     * ```\n     *\n     * When configuring loggers you can configure the scopes a particular logger will handle.\n     * When using scopes, you must ensure that the level of the message, and the scope of the message\n     * intersect with the defined levels & scopes for a logger.\n     *\n     * ### Unhandled log messages\n     *\n     * If no configured logger can handle a log message (because of level or scope restrictions)\n     * then the logged message will be ignored and silently dropped. You can check if this has happened\n     * by inspecting the return of write(). If false the message was not handled.\n     *\n     * @param int|string $level The severity level of the message being written.\n     *    The value must be an integer or string matching a known level.\n     * @param mixed $message Message content to log\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     * @throws \\InvalidArgumentException If invalid level is passed.\n     *\/",304],["T_WHITESPACE","\n    ",357],["T_PUBLIC","public",358],["T_WHITESPACE"," ",358],["T_STATIC","static",358],["T_WHITESPACE"," ",358],["T_FUNCTION","function",358],["T_WHITESPACE"," ",358],["T_STRING","write",358],"(",["T_VARIABLE","$level",358],",",["T_WHITESPACE"," ",358],["T_VARIABLE","$message",358],",",["T_WHITESPACE"," ",358],["T_VARIABLE","$context",358],["T_WHITESPACE"," ",358],"=",["T_WHITESPACE"," ",358],"[","]",")",["T_WHITESPACE","\n    ",358],"{",["T_WHITESPACE","\n        ",359],["T_STATIC","static",360],["T_DOUBLE_COLON","::",360],["T_STRING","_init",360],"(",")",";",["T_WHITESPACE","\n        ",360],["T_IF","if",361],["T_WHITESPACE"," ",361],"(",["T_STRING","is_int",361],"(",["T_VARIABLE","$level",361],")",["T_WHITESPACE"," ",361],["T_BOOLEAN_AND","&&",361],["T_WHITESPACE"," ",361],["T_STRING","in_array",361],"(",["T_VARIABLE","$level",361],",",["T_WHITESPACE"," ",361],["T_STATIC","static",361],["T_DOUBLE_COLON","::",361],["T_VARIABLE","$_levelMap",361],")",")",["T_WHITESPACE"," ",361],"{",["T_WHITESPACE","\n            ",361],["T_VARIABLE","$level",362],["T_WHITESPACE"," ",362],"=",["T_WHITESPACE"," ",362],["T_STRING","array_search",362],"(",["T_VARIABLE","$level",362],",",["T_WHITESPACE"," ",362],["T_STATIC","static",362],["T_DOUBLE_COLON","::",362],["T_VARIABLE","$_levelMap",362],")",";",["T_WHITESPACE","\n        ",362],"}",["T_WHITESPACE","\n\n        ",363],["T_IF","if",365],["T_WHITESPACE"," ",365],"(","!",["T_STRING","in_array",365],"(",["T_VARIABLE","$level",365],",",["T_WHITESPACE"," ",365],["T_STATIC","static",365],["T_DOUBLE_COLON","::",365],["T_VARIABLE","$_levels",365],")",")",["T_WHITESPACE"," ",365],"{",["T_WHITESPACE","\n            ",365],["T_THROW","throw",366],["T_WHITESPACE"," ",366],["T_NEW","new",366],["T_WHITESPACE"," ",366],["T_STRING","InvalidArgumentException",366],"(",["T_STRING","sprintf",366],"(",["T_CONSTANT_ENCAPSED_STRING","'Invalid log level \"%s\"'",366],",",["T_WHITESPACE"," ",366],["T_VARIABLE","$level",366],")",")",";",["T_WHITESPACE","\n        ",366],"}",["T_WHITESPACE","\n\n        ",367],["T_VARIABLE","$logged",369],["T_WHITESPACE"," ",369],"=",["T_WHITESPACE"," ",369],["T_STRING","false",369],";",["T_WHITESPACE","\n        ",369],["T_VARIABLE","$context",370],["T_WHITESPACE"," ",370],"=",["T_WHITESPACE"," ",370],["T_ARRAY_CAST","(array)",370],["T_VARIABLE","$context",370],";",["T_WHITESPACE","\n        ",370],["T_IF","if",371],["T_WHITESPACE"," ",371],"(",["T_ISSET","isset",371],"(",["T_VARIABLE","$context",371],"[",["T_LNUMBER","0",371],"]",")",")",["T_WHITESPACE"," ",371],"{",["T_WHITESPACE","\n            ",371],["T_VARIABLE","$context",372],["T_WHITESPACE"," ",372],"=",["T_WHITESPACE"," ",372],"[",["T_CONSTANT_ENCAPSED_STRING","'scope'",372],["T_WHITESPACE"," ",372],["T_DOUBLE_ARROW","=>",372],["T_WHITESPACE"," ",372],["T_VARIABLE","$context",372],"]",";",["T_WHITESPACE","\n        ",372],"}",["T_WHITESPACE","\n        ",373],["T_VARIABLE","$context",374],["T_WHITESPACE"," ",374],["T_PLUS_EQUAL","+=",374],["T_WHITESPACE"," ",374],"[",["T_CONSTANT_ENCAPSED_STRING","'scope'",374],["T_WHITESPACE"," ",374],["T_DOUBLE_ARROW","=>",374],["T_WHITESPACE"," ",374],"[","]","]",";",["T_WHITESPACE","\n\n        ",374],["T_FOREACH","foreach",376],["T_WHITESPACE"," ",376],"(",["T_STATIC","static",376],["T_DOUBLE_COLON","::",376],["T_VARIABLE","$_registry",376],["T_OBJECT_OPERATOR","->",376],["T_STRING","loaded",376],"(",")",["T_WHITESPACE"," ",376],["T_AS","as",376],["T_WHITESPACE"," ",376],["T_VARIABLE","$streamName",376],")",["T_WHITESPACE"," ",376],"{",["T_WHITESPACE","\n            ",376],["T_VARIABLE","$logger",377],["T_WHITESPACE"," ",377],"=",["T_WHITESPACE"," ",377],["T_STATIC","static",377],["T_DOUBLE_COLON","::",377],["T_VARIABLE","$_registry",377],["T_OBJECT_OPERATOR","->",377],"{",["T_VARIABLE","$streamName",377],"}",";",["T_WHITESPACE","\n            ",377],["T_VARIABLE","$levels",378],["T_WHITESPACE"," ",378],"=",["T_WHITESPACE"," ",378],["T_VARIABLE","$scopes",378],["T_WHITESPACE"," ",378],"=",["T_WHITESPACE"," ",378],["T_STRING","null",378],";",["T_WHITESPACE","\n\n            ",378],["T_IF","if",380],["T_WHITESPACE"," ",380],"(",["T_VARIABLE","$logger",380],["T_WHITESPACE"," ",380],["T_INSTANCEOF","instanceof",380],["T_WHITESPACE"," ",380],["T_STRING","BaseLog",380],")",["T_WHITESPACE"," ",380],"{",["T_WHITESPACE","\n                ",380],["T_VARIABLE","$levels",381],["T_WHITESPACE"," ",381],"=",["T_WHITESPACE"," ",381],["T_VARIABLE","$logger",381],["T_OBJECT_OPERATOR","->",381],["T_STRING","levels",381],"(",")",";",["T_WHITESPACE","\n                ",381],["T_VARIABLE","$scopes",382],["T_WHITESPACE"," ",382],"=",["T_WHITESPACE"," ",382],["T_VARIABLE","$logger",382],["T_OBJECT_OPERATOR","->",382],["T_STRING","scopes",382],"(",")",";",["T_WHITESPACE","\n            ",382],"}",["T_WHITESPACE","\n            ",383],["T_IF","if",384],["T_WHITESPACE"," ",384],"(",["T_VARIABLE","$scopes",384],["T_WHITESPACE"," ",384],["T_IS_IDENTICAL","===",384],["T_WHITESPACE"," ",384],["T_STRING","null",384],")",["T_WHITESPACE"," ",384],"{",["T_WHITESPACE","\n                ",384],["T_VARIABLE","$scopes",385],["T_WHITESPACE"," ",385],"=",["T_WHITESPACE"," ",385],"[","]",";",["T_WHITESPACE","\n            ",385],"}",["T_WHITESPACE","\n\n            ",386],["T_VARIABLE","$correctLevel",388],["T_WHITESPACE"," ",388],"=",["T_WHITESPACE"," ",388],["T_EMPTY","empty",388],"(",["T_VARIABLE","$levels",388],")",["T_WHITESPACE"," ",388],["T_BOOLEAN_OR","||",388],["T_WHITESPACE"," ",388],["T_STRING","in_array",388],"(",["T_VARIABLE","$level",388],",",["T_WHITESPACE"," ",388],["T_VARIABLE","$levels",388],")",";",["T_WHITESPACE","\n            ",388],["T_VARIABLE","$inScope",389],["T_WHITESPACE"," ",389],"=",["T_WHITESPACE"," ",389],["T_VARIABLE","$scopes",389],["T_WHITESPACE"," ",389],["T_IS_IDENTICAL","===",389],["T_WHITESPACE"," ",389],["T_STRING","false",389],["T_WHITESPACE"," ",389],["T_BOOLEAN_AND","&&",389],["T_WHITESPACE"," ",389],["T_EMPTY","empty",389],"(",["T_VARIABLE","$context",389],"[",["T_CONSTANT_ENCAPSED_STRING","'scope'",389],"]",")",["T_WHITESPACE"," ",389],["T_BOOLEAN_OR","||",389],["T_WHITESPACE"," ",389],["T_VARIABLE","$scopes",389],["T_WHITESPACE"," ",389],["T_IS_IDENTICAL","===",389],["T_WHITESPACE"," ",389],"[","]",["T_WHITESPACE"," ",389],["T_BOOLEAN_OR","||",389],["T_WHITESPACE","\n                ",389],["T_STRING","is_array",390],"(",["T_VARIABLE","$scopes",390],")",["T_WHITESPACE"," ",390],["T_BOOLEAN_AND","&&",390],["T_WHITESPACE"," ",390],["T_STRING","array_intersect",390],"(",["T_VARIABLE","$context",390],"[",["T_CONSTANT_ENCAPSED_STRING","'scope'",390],"]",",",["T_WHITESPACE"," ",390],["T_VARIABLE","$scopes",390],")",";",["T_WHITESPACE","\n\n            ",390],["T_IF","if",392],["T_WHITESPACE"," ",392],"(",["T_VARIABLE","$correctLevel",392],["T_WHITESPACE"," ",392],["T_BOOLEAN_AND","&&",392],["T_WHITESPACE"," ",392],["T_VARIABLE","$inScope",392],")",["T_WHITESPACE"," ",392],"{",["T_WHITESPACE","\n                ",392],["T_VARIABLE","$logger",393],["T_OBJECT_OPERATOR","->",393],["T_STRING","log",393],"(",["T_VARIABLE","$level",393],",",["T_WHITESPACE"," ",393],["T_VARIABLE","$message",393],",",["T_WHITESPACE"," ",393],["T_VARIABLE","$context",393],")",";",["T_WHITESPACE","\n                ",393],["T_VARIABLE","$logged",394],["T_WHITESPACE"," ",394],"=",["T_WHITESPACE"," ",394],["T_STRING","true",394],";",["T_WHITESPACE","\n            ",394],"}",["T_WHITESPACE","\n        ",395],"}",["T_WHITESPACE","\n\n        ",396],["T_RETURN","return",398],["T_WHITESPACE"," ",398],["T_VARIABLE","$logged",398],";",["T_WHITESPACE","\n    ",398],"}",["T_WHITESPACE","\n\n    ",399],["T_DOC_COMMENT","\/**\n     * Convenience method to log emergency messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",401],["T_WHITESPACE","\n    ",411],["T_PUBLIC","public",412],["T_WHITESPACE"," ",412],["T_STATIC","static",412],["T_WHITESPACE"," ",412],["T_FUNCTION","function",412],["T_WHITESPACE"," ",412],["T_STRING","emergency",412],"(",["T_VARIABLE","$message",412],",",["T_WHITESPACE"," ",412],["T_VARIABLE","$context",412],["T_WHITESPACE"," ",412],"=",["T_WHITESPACE"," ",412],"[","]",")",["T_WHITESPACE","\n    ",412],"{",["T_WHITESPACE","\n        ",413],["T_RETURN","return",414],["T_WHITESPACE"," ",414],["T_STATIC","static",414],["T_DOUBLE_COLON","::",414],["T_STRING","write",414],"(",["T_CONSTANT_ENCAPSED_STRING","'emergency'",414],",",["T_WHITESPACE"," ",414],["T_VARIABLE","$message",414],",",["T_WHITESPACE"," ",414],["T_VARIABLE","$context",414],")",";",["T_WHITESPACE","\n    ",414],"}",["T_WHITESPACE","\n\n    ",415],["T_DOC_COMMENT","\/**\n     * Convenience method to log alert messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",417],["T_WHITESPACE","\n    ",427],["T_PUBLIC","public",428],["T_WHITESPACE"," ",428],["T_STATIC","static",428],["T_WHITESPACE"," ",428],["T_FUNCTION","function",428],["T_WHITESPACE"," ",428],["T_STRING","alert",428],"(",["T_VARIABLE","$message",428],",",["T_WHITESPACE"," ",428],["T_VARIABLE","$context",428],["T_WHITESPACE"," ",428],"=",["T_WHITESPACE"," ",428],"[","]",")",["T_WHITESPACE","\n    ",428],"{",["T_WHITESPACE","\n        ",429],["T_RETURN","return",430],["T_WHITESPACE"," ",430],["T_STATIC","static",430],["T_DOUBLE_COLON","::",430],["T_STRING","write",430],"(",["T_CONSTANT_ENCAPSED_STRING","'alert'",430],",",["T_WHITESPACE"," ",430],["T_VARIABLE","$message",430],",",["T_WHITESPACE"," ",430],["T_VARIABLE","$context",430],")",";",["T_WHITESPACE","\n    ",430],"}",["T_WHITESPACE","\n\n    ",431],["T_DOC_COMMENT","\/**\n     * Convenience method to log critical messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",433],["T_WHITESPACE","\n    ",443],["T_PUBLIC","public",444],["T_WHITESPACE"," ",444],["T_STATIC","static",444],["T_WHITESPACE"," ",444],["T_FUNCTION","function",444],["T_WHITESPACE"," ",444],["T_STRING","critical",444],"(",["T_VARIABLE","$message",444],",",["T_WHITESPACE"," ",444],["T_VARIABLE","$context",444],["T_WHITESPACE"," ",444],"=",["T_WHITESPACE"," ",444],"[","]",")",["T_WHITESPACE","\n    ",444],"{",["T_WHITESPACE","\n        ",445],["T_RETURN","return",446],["T_WHITESPACE"," ",446],["T_STATIC","static",446],["T_DOUBLE_COLON","::",446],["T_STRING","write",446],"(",["T_CONSTANT_ENCAPSED_STRING","'critical'",446],",",["T_WHITESPACE"," ",446],["T_VARIABLE","$message",446],",",["T_WHITESPACE"," ",446],["T_VARIABLE","$context",446],")",";",["T_WHITESPACE","\n    ",446],"}",["T_WHITESPACE","\n\n    ",447],["T_DOC_COMMENT","\/**\n     * Convenience method to log error messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",449],["T_WHITESPACE","\n    ",459],["T_PUBLIC","public",460],["T_WHITESPACE"," ",460],["T_STATIC","static",460],["T_WHITESPACE"," ",460],["T_FUNCTION","function",460],["T_WHITESPACE"," ",460],["T_STRING","error",460],"(",["T_VARIABLE","$message",460],",",["T_WHITESPACE"," ",460],["T_VARIABLE","$context",460],["T_WHITESPACE"," ",460],"=",["T_WHITESPACE"," ",460],"[","]",")",["T_WHITESPACE","\n    ",460],"{",["T_WHITESPACE","\n        ",461],["T_RETURN","return",462],["T_WHITESPACE"," ",462],["T_STATIC","static",462],["T_DOUBLE_COLON","::",462],["T_STRING","write",462],"(",["T_CONSTANT_ENCAPSED_STRING","'error'",462],",",["T_WHITESPACE"," ",462],["T_VARIABLE","$message",462],",",["T_WHITESPACE"," ",462],["T_VARIABLE","$context",462],")",";",["T_WHITESPACE","\n    ",462],"}",["T_WHITESPACE","\n\n    ",463],["T_DOC_COMMENT","\/**\n     * Convenience method to log warning messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",465],["T_WHITESPACE","\n    ",475],["T_PUBLIC","public",476],["T_WHITESPACE"," ",476],["T_STATIC","static",476],["T_WHITESPACE"," ",476],["T_FUNCTION","function",476],["T_WHITESPACE"," ",476],["T_STRING","warning",476],"(",["T_VARIABLE","$message",476],",",["T_WHITESPACE"," ",476],["T_VARIABLE","$context",476],["T_WHITESPACE"," ",476],"=",["T_WHITESPACE"," ",476],"[","]",")",["T_WHITESPACE","\n    ",476],"{",["T_WHITESPACE","\n        ",477],["T_RETURN","return",478],["T_WHITESPACE"," ",478],["T_STATIC","static",478],["T_DOUBLE_COLON","::",478],["T_STRING","write",478],"(",["T_CONSTANT_ENCAPSED_STRING","'warning'",478],",",["T_WHITESPACE"," ",478],["T_VARIABLE","$message",478],",",["T_WHITESPACE"," ",478],["T_VARIABLE","$context",478],")",";",["T_WHITESPACE","\n    ",478],"}",["T_WHITESPACE","\n\n    ",479],["T_DOC_COMMENT","\/**\n     * Convenience method to log notice messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",481],["T_WHITESPACE","\n    ",491],["T_PUBLIC","public",492],["T_WHITESPACE"," ",492],["T_STATIC","static",492],["T_WHITESPACE"," ",492],["T_FUNCTION","function",492],["T_WHITESPACE"," ",492],["T_STRING","notice",492],"(",["T_VARIABLE","$message",492],",",["T_WHITESPACE"," ",492],["T_VARIABLE","$context",492],["T_WHITESPACE"," ",492],"=",["T_WHITESPACE"," ",492],"[","]",")",["T_WHITESPACE","\n    ",492],"{",["T_WHITESPACE","\n        ",493],["T_RETURN","return",494],["T_WHITESPACE"," ",494],["T_STATIC","static",494],["T_DOUBLE_COLON","::",494],["T_STRING","write",494],"(",["T_CONSTANT_ENCAPSED_STRING","'notice'",494],",",["T_WHITESPACE"," ",494],["T_VARIABLE","$message",494],",",["T_WHITESPACE"," ",494],["T_VARIABLE","$context",494],")",";",["T_WHITESPACE","\n    ",494],"}",["T_WHITESPACE","\n\n    ",495],["T_DOC_COMMENT","\/**\n     * Convenience method to log debug messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",497],["T_WHITESPACE","\n    ",507],["T_PUBLIC","public",508],["T_WHITESPACE"," ",508],["T_STATIC","static",508],["T_WHITESPACE"," ",508],["T_FUNCTION","function",508],["T_WHITESPACE"," ",508],["T_STRING","debug",508],"(",["T_VARIABLE","$message",508],",",["T_WHITESPACE"," ",508],["T_VARIABLE","$context",508],["T_WHITESPACE"," ",508],"=",["T_WHITESPACE"," ",508],"[","]",")",["T_WHITESPACE","\n    ",508],"{",["T_WHITESPACE","\n        ",509],["T_RETURN","return",510],["T_WHITESPACE"," ",510],["T_STATIC","static",510],["T_DOUBLE_COLON","::",510],["T_STRING","write",510],"(",["T_CONSTANT_ENCAPSED_STRING","'debug'",510],",",["T_WHITESPACE"," ",510],["T_VARIABLE","$message",510],",",["T_WHITESPACE"," ",510],["T_VARIABLE","$context",510],")",";",["T_WHITESPACE","\n    ",510],"}",["T_WHITESPACE","\n\n    ",511],["T_DOC_COMMENT","\/**\n     * Convenience method to log info messages\n     *\n     * @param string $message log message\n     * @param string|array $context Additional data to be used for logging the message.\n     *  The special `scope` key can be passed to be used for further filtering of the\n     *  log engines to be used. If a string or a numerically index array is passed, it\n     *  will be treated as the `scope` key.\n     *  See Cake\\Log\\Log::config() for more information on logging scopes.\n     * @return bool Success\n     *\/",513],["T_WHITESPACE","\n    ",523],["T_PUBLIC","public",524],["T_WHITESPACE"," ",524],["T_STATIC","static",524],["T_WHITESPACE"," ",524],["T_FUNCTION","function",524],["T_WHITESPACE"," ",524],["T_STRING","info",524],"(",["T_VARIABLE","$message",524],",",["T_WHITESPACE"," ",524],["T_VARIABLE","$context",524],["T_WHITESPACE"," ",524],"=",["T_WHITESPACE"," ",524],"[","]",")",["T_WHITESPACE","\n    ",524],"{",["T_WHITESPACE","\n        ",525],["T_RETURN","return",526],["T_WHITESPACE"," ",526],["T_STATIC","static",526],["T_DOUBLE_COLON","::",526],["T_STRING","write",526],"(",["T_CONSTANT_ENCAPSED_STRING","'info'",526],",",["T_WHITESPACE"," ",526],["T_VARIABLE","$message",526],",",["T_WHITESPACE"," ",526],["T_VARIABLE","$context",526],")",";",["T_WHITESPACE","\n    ",526],"}",["T_WHITESPACE","\n",527],"}",["T_WHITESPACE","\n",528]]