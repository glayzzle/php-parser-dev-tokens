[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * ErrorHandler class\n *\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         0.10.5\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",16],["T_NAMESPACE","namespace",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Error",17],";",["T_WHITESPACE","\n\n",17],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Core",19],["T_NS_SEPARATOR","\\",19],["T_STRING","App",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Exception",20],";",["T_WHITESPACE","\n\n",20],["T_DOC_COMMENT","\/**\n * Error Handler provides basic error and exception handling for your application. It captures and\n * handles all unhandled exceptions and errors. Displays helpful framework errors when debug > 1.\n *\n * ### Uncaught exceptions\n *\n * When debug < 1 a CakeException will render 404 or 500 errors. If an uncaught exception is thrown\n * and it is a type that ErrorHandler does not know about it will be treated as a 500 error.\n *\n * ### Implementing application specific exception handling\n *\n * You can implement application specific exception handling in one of a few ways. Each approach\n * gives you different amounts of control over the exception handling process.\n *\n * - Modify config\/error.php and setup custom exception handling.\n * - Use the `exceptionRenderer` option to inject an Exception renderer. This will\n *   let you keep the existing handling logic but override the rendering logic.\n *\n * #### Create your own Exception handler\n *\n * This gives you full control over the exception handling process. The class you choose should be\n * loaded in your config\/error.php and registered as the default exception handler.\n *\n * #### Using a custom renderer with `exceptionRenderer`\n *\n * If you don't want to take control of the exception handling, but want to change how exceptions are\n * rendered you can use `exceptionRenderer` option to choose a class to render exception pages. By default\n * `Cake\\Error\\ExceptionRenderer` is used. Your custom exception renderer class should be placed in src\/Error.\n *\n * Your custom renderer should expect an exception in its constructor, and implement a render method.\n * Failing to do so will cause additional errors.\n *\n * #### Logging exceptions\n *\n * Using the built-in exception handling, you can log all the exceptions\n * that are dealt with by ErrorHandler by setting `log` option to true in your config\/error.php.\n * Enabling this will log every exception to Log and the configured loggers.\n *\n * ### PHP errors\n *\n * Error handler also provides the built in features for handling php errors (trigger_error).\n * While in debug mode, errors will be output to the screen using debugger. While in production mode,\n * errors will be logged to Log.  You can control which errors are logged by setting\n * `errorLevel` option in config\/error.php.\n *\n * #### Logging errors\n *\n * When ErrorHandler is used for handling errors, you can enable error logging by setting the `log`\n * option to true. This will log all errors to the configured log handlers.\n *\n * #### Controlling what errors are logged\/displayed\n *\n * You can control which errors are logged \/ displayed by ErrorHandler by setting `errorLevel`. Setting this\n * to one or a combination of a few of the E_* constants will only enable the specified errors:\n *\n * ```\n * $options['errorLevel'] = E_ALL & ~E_NOTICE;\n * ```\n *\n * Would enable handling for all non Notice errors.\n *\n * @see \\Cake\\Error\\ExceptionRenderer for more information on how to customize exception rendering.\n *\/",22],["T_WHITESPACE","\n",84],["T_CLASS","class",85],["T_WHITESPACE"," ",85],["T_STRING","ErrorHandler",85],["T_WHITESPACE"," ",85],["T_EXTENDS","extends",85],["T_WHITESPACE"," ",85],["T_STRING","BaseErrorHandler",85],["T_WHITESPACE","\n",85],"{",["T_WHITESPACE","\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Options to use for the Error handling.\n     *\n     * @var array\n     *\/",88],["T_WHITESPACE","\n    ",92],["T_PROTECTED","protected",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$_options",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],"[","]",";",["T_WHITESPACE","\n\n    ",93],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param array $options The options for error handling.\n     *\/",95],["T_WHITESPACE","\n    ",99],["T_PUBLIC","public",100],["T_WHITESPACE"," ",100],["T_FUNCTION","function",100],["T_WHITESPACE"," ",100],["T_STRING","__construct",100],"(",["T_VARIABLE","$options",100],["T_WHITESPACE"," ",100],"=",["T_WHITESPACE"," ",100],"[","]",")",["T_WHITESPACE","\n    ",100],"{",["T_WHITESPACE","\n        ",101],["T_VARIABLE","$defaults",102],["T_WHITESPACE"," ",102],"=",["T_WHITESPACE"," ",102],"[",["T_WHITESPACE","\n            ",102],["T_CONSTANT_ENCAPSED_STRING","'log'",103],["T_WHITESPACE"," ",103],["T_DOUBLE_ARROW","=>",103],["T_WHITESPACE"," ",103],["T_STRING","true",103],",",["T_WHITESPACE","\n            ",103],["T_CONSTANT_ENCAPSED_STRING","'trace'",104],["T_WHITESPACE"," ",104],["T_DOUBLE_ARROW","=>",104],["T_WHITESPACE"," ",104],["T_STRING","false",104],",",["T_WHITESPACE","\n            ",104],["T_CONSTANT_ENCAPSED_STRING","'exceptionRenderer'",105],["T_WHITESPACE"," ",105],["T_DOUBLE_ARROW","=>",105],["T_WHITESPACE"," ",105],["T_CONSTANT_ENCAPSED_STRING","'Cake\\Error\\ExceptionRenderer'",105],",",["T_WHITESPACE","\n        ",105],"]",";",["T_WHITESPACE","\n        ",106],["T_VARIABLE","$this",107],["T_OBJECT_OPERATOR","->",107],["T_STRING","_options",107],["T_WHITESPACE"," ",107],"=",["T_WHITESPACE"," ",107],["T_VARIABLE","$options",107],["T_WHITESPACE"," ",107],"+",["T_WHITESPACE"," ",107],["T_VARIABLE","$defaults",107],";",["T_WHITESPACE","\n    ",107],"}",["T_WHITESPACE","\n\n    ",108],["T_DOC_COMMENT","\/**\n     * Display an error.\n     *\n     * Template method of BaseErrorHandler.\n     *\n     * Only when debug > 2 will a formatted error be displayed.\n     *\n     * @param array $error An array of error data.\n     * @param bool $debug Whether or not the app is in debug mode.\n     * @return void\n     *\/",110],["T_WHITESPACE","\n    ",120],["T_PROTECTED","protected",121],["T_WHITESPACE"," ",121],["T_FUNCTION","function",121],["T_WHITESPACE"," ",121],["T_STRING","_displayError",121],"(",["T_VARIABLE","$error",121],",",["T_WHITESPACE"," ",121],["T_VARIABLE","$debug",121],")",["T_WHITESPACE","\n    ",121],"{",["T_WHITESPACE","\n        ",122],["T_IF","if",123],["T_WHITESPACE"," ",123],"(","!",["T_VARIABLE","$debug",123],")",["T_WHITESPACE"," ",123],"{",["T_WHITESPACE","\n            ",123],["T_RETURN","return",124],";",["T_WHITESPACE","\n        ",124],"}",["T_WHITESPACE","\n        ",125],["T_STRING","Debugger",126],["T_DOUBLE_COLON","::",126],["T_STRING","getInstance",126],"(",")",["T_OBJECT_OPERATOR","->",126],["T_STRING","outputError",126],"(",["T_VARIABLE","$error",126],")",";",["T_WHITESPACE","\n    ",126],"}",["T_WHITESPACE","\n\n    ",127],["T_DOC_COMMENT","\/**\n     * Displays an exception response body.\n     *\n     * @param \\Exception $exception The exception to display\n     * @return void\n     * @throws \\Exception When the chosen exception renderer is invalid.\n     *\/",129],["T_WHITESPACE","\n    ",135],["T_PROTECTED","protected",136],["T_WHITESPACE"," ",136],["T_FUNCTION","function",136],["T_WHITESPACE"," ",136],["T_STRING","_displayException",136],"(",["T_VARIABLE","$exception",136],")",["T_WHITESPACE","\n    ",136],"{",["T_WHITESPACE","\n        ",137],["T_VARIABLE","$renderer",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_STRING","App",138],["T_DOUBLE_COLON","::",138],["T_STRING","className",138],"(",["T_VARIABLE","$this",138],["T_OBJECT_OPERATOR","->",138],["T_STRING","_options",138],"[",["T_CONSTANT_ENCAPSED_STRING","'exceptionRenderer'",138],"]",",",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'Error'",138],")",";",["T_WHITESPACE","\n        ",138],["T_TRY","try",139],["T_WHITESPACE"," ",139],"{",["T_WHITESPACE","\n            ",139],["T_IF","if",140],["T_WHITESPACE"," ",140],"(","!",["T_VARIABLE","$renderer",140],")",["T_WHITESPACE"," ",140],"{",["T_WHITESPACE","\n                ",140],["T_THROW","throw",141],["T_WHITESPACE"," ",141],["T_NEW","new",141],["T_WHITESPACE"," ",141],["T_STRING","Exception",141],"(","\"",["T_VARIABLE","$renderer",141],["T_ENCAPSED_AND_WHITESPACE"," is an invalid class.",141],"\"",")",";",["T_WHITESPACE","\n            ",141],"}",["T_WHITESPACE","\n            ",142],["T_VARIABLE","$error",143],["T_WHITESPACE"," ",143],"=",["T_WHITESPACE"," ",143],["T_NEW","new",143],["T_WHITESPACE"," ",143],["T_VARIABLE","$renderer",143],"(",["T_VARIABLE","$exception",143],")",";",["T_WHITESPACE","\n            ",143],["T_VARIABLE","$response",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_VARIABLE","$error",144],["T_OBJECT_OPERATOR","->",144],["T_STRING","render",144],"(",")",";",["T_WHITESPACE","\n            ",144],["T_VARIABLE","$this",145],["T_OBJECT_OPERATOR","->",145],["T_STRING","_clearOutput",145],"(",")",";",["T_WHITESPACE","\n            ",145],["T_VARIABLE","$this",146],["T_OBJECT_OPERATOR","->",146],["T_STRING","_sendResponse",146],"(",["T_VARIABLE","$response",146],")",";",["T_WHITESPACE","\n        ",146],"}",["T_WHITESPACE"," ",147],["T_CATCH","catch",147],["T_WHITESPACE"," ",147],"(",["T_STRING","Exception",147],["T_WHITESPACE"," ",147],["T_VARIABLE","$e",147],")",["T_WHITESPACE"," ",147],"{",["T_WHITESPACE","\n            ",147],["T_COMMENT","\/\/ Disable trace for internal errors.\n",148],["T_WHITESPACE","            ",149],["T_VARIABLE","$this",149],["T_OBJECT_OPERATOR","->",149],["T_STRING","_options",149],"[",["T_CONSTANT_ENCAPSED_STRING","'trace'",149],"]",["T_WHITESPACE"," ",149],"=",["T_WHITESPACE"," ",149],["T_STRING","false",149],";",["T_WHITESPACE","\n            ",149],["T_VARIABLE","$message",150],["T_WHITESPACE"," ",150],"=",["T_WHITESPACE"," ",150],["T_STRING","sprintf",150],"(",["T_WHITESPACE","\n                ",150],["T_CONSTANT_ENCAPSED_STRING","\"[%s] %s\\n%s\"",151],",",["T_WHITESPACE"," ",151],["T_COMMENT","\/\/ Keeping same message format\n",151],["T_WHITESPACE","                ",152],["T_STRING","get_class",152],"(",["T_VARIABLE","$e",152],")",",",["T_WHITESPACE","\n                ",152],["T_VARIABLE","$e",153],["T_OBJECT_OPERATOR","->",153],["T_STRING","getMessage",153],"(",")",",",["T_WHITESPACE","\n                ",153],["T_VARIABLE","$e",154],["T_OBJECT_OPERATOR","->",154],["T_STRING","getTraceAsString",154],"(",")",["T_WHITESPACE","\n            ",154],")",";",["T_WHITESPACE","\n            ",155],["T_STRING","trigger_error",156],"(",["T_VARIABLE","$message",156],",",["T_WHITESPACE"," ",156],["T_STRING","E_USER_ERROR",156],")",";",["T_WHITESPACE","\n        ",156],"}",["T_WHITESPACE","\n    ",157],"}",["T_WHITESPACE","\n\n    ",158],["T_DOC_COMMENT","\/**\n     * Clear output buffers so error pages display properly.\n     *\n     * Easily stubbed in testing.\n     *\n     * @return void\n     *\/",160],["T_WHITESPACE","\n    ",166],["T_PROTECTED","protected",167],["T_WHITESPACE"," ",167],["T_FUNCTION","function",167],["T_WHITESPACE"," ",167],["T_STRING","_clearOutput",167],"(",")",["T_WHITESPACE","\n    ",167],"{",["T_WHITESPACE","\n        ",168],["T_WHILE","while",169],["T_WHITESPACE"," ",169],"(",["T_STRING","ob_get_level",169],"(",")",")",["T_WHITESPACE"," ",169],"{",["T_WHITESPACE","\n            ",169],["T_STRING","ob_end_clean",170],"(",")",";",["T_WHITESPACE","\n        ",170],"}",["T_WHITESPACE","\n    ",171],"}",["T_WHITESPACE","\n\n    ",172],["T_DOC_COMMENT","\/**\n     * Method that can be easily stubbed in testing.\n     *\n     * @param string|\\Cake\\Network\\Response $response Either the message or response object.\n     * @return void\n     *\/",174],["T_WHITESPACE","\n    ",179],["T_PROTECTED","protected",180],["T_WHITESPACE"," ",180],["T_FUNCTION","function",180],["T_WHITESPACE"," ",180],["T_STRING","_sendResponse",180],"(",["T_VARIABLE","$response",180],")",["T_WHITESPACE","\n    ",180],"{",["T_WHITESPACE","\n        ",181],["T_IF","if",182],["T_WHITESPACE"," ",182],"(",["T_STRING","is_string",182],"(",["T_VARIABLE","$response",182],")",")",["T_WHITESPACE"," ",182],"{",["T_WHITESPACE","\n            ",182],["T_ECHO","echo",183],["T_WHITESPACE"," ",183],["T_VARIABLE","$response",183],";",["T_WHITESPACE","\n\n            ",183],["T_RETURN","return",185],";",["T_WHITESPACE","\n        ",185],"}",["T_WHITESPACE","\n        ",186],["T_VARIABLE","$response",187],["T_OBJECT_OPERATOR","->",187],["T_STRING","send",187],"(",")",";",["T_WHITESPACE","\n    ",187],"}",["T_WHITESPACE","\n",188],"}",["T_WHITESPACE","\n",189]]