[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","View",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Form",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Interface for FormHelper context implementations.\n *\/",17],["T_WHITESPACE","\n",19],["T_INTERFACE","interface",20],["T_WHITESPACE"," ",20],["T_STRING","ContextInterface",20],["T_WHITESPACE","\n",20],"{",["T_WHITESPACE","\n\n    ",21],["T_DOC_COMMENT","\/**\n     * Get the fields used in the context as a primary key.\n     *\n     * @return array\n     *\/",23],["T_WHITESPACE","\n    ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","primaryKey",28],"(",")",";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * Returns true if the passed field name is part of the primary key for this context\n     *\n     * @param string $field A dot separated path to the field a value\n     *   is needed for.\n     * @return bool\n     *\/",30],["T_WHITESPACE","\n    ",36],["T_PUBLIC","public",37],["T_WHITESPACE"," ",37],["T_FUNCTION","function",37],["T_WHITESPACE"," ",37],["T_STRING","isPrimaryKey",37],"(",["T_VARIABLE","$field",37],")",";",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * Returns whether or not this form is for a create operation.\n     *\n     * @return bool\n     *\/",39],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","isCreate",44],"(",")",";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * Get the current value for a given field.\n     *\n     * Classes implementing this method can optionally have a second argument\n     * `$options`. Valid key for `$options` array are:\n     *\n     *   - `default`: Default value to return if no value found in request\n     *     data or context record.\n     *   - `schemaDefault`: Boolean indicating whether default value from\n     *      context's schema should be used if it's not explicitly provided.\n     *\n     * @param string $field A dot separated path to the field a value\n     *   is needed for.\n     * @return mixed\n     *\/",46],["T_WHITESPACE","\n    ",60],["T_PUBLIC","public",61],["T_WHITESPACE"," ",61],["T_FUNCTION","function",61],["T_WHITESPACE"," ",61],["T_STRING","val",61],"(",["T_VARIABLE","$field",61],")",";",["T_WHITESPACE","\n\n    ",61],["T_DOC_COMMENT","\/**\n     * Check if a given field is 'required'.\n     *\n     * In this context class, this is simply defined by the 'required' array.\n     *\n     * @param string $field A dot separated path to check required-ness for.\n     * @return bool\n     *\/",63],["T_WHITESPACE","\n    ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","isRequired",71],"(",["T_VARIABLE","$field",71],")",";",["T_WHITESPACE","\n\n    ",71],["T_DOC_COMMENT","\/**\n     * Get the fieldnames of the top level object in this context.\n     *\n     * @return array A list of the field names in the context.\n     *\/",73],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","fieldNames",78],"(",")",";",["T_WHITESPACE","\n\n    ",78],["T_DOC_COMMENT","\/**\n     * Get the abstract field type for a given field name.\n     *\n     * @param string $field A dot separated path to get a schema type for.\n     * @return null|string An abstract data type or null.\n     * @see \\Cake\\Database\\Type\n     *\/",80],["T_WHITESPACE","\n    ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","type",87],"(",["T_VARIABLE","$field",87],")",";",["T_WHITESPACE","\n\n    ",87],["T_DOC_COMMENT","\/**\n     * Get an associative array of other attributes for a field name.\n     *\n     * @param string $field A dot separated path to get additional data on.\n     * @return array An array of data describing the additional attributes on a field.\n     *\/",89],["T_WHITESPACE","\n    ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","attributes",95],"(",["T_VARIABLE","$field",95],")",";",["T_WHITESPACE","\n\n    ",95],["T_DOC_COMMENT","\/**\n     * Check whether or not a field has an error attached to it\n     *\n     * @param string $field A dot separated path to check errors on.\n     * @return bool Returns true if the errors for the field are not empty.\n     *\/",97],["T_WHITESPACE","\n    ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","hasError",103],"(",["T_VARIABLE","$field",103],")",";",["T_WHITESPACE","\n\n    ",103],["T_DOC_COMMENT","\/**\n     * Get the errors for a given field\n     *\n     * @param string $field A dot separated path to check errors on.\n     * @return array An array of errors, an empty array will be returned when the\n     *    context has no errors.\n     *\/",105],["T_WHITESPACE","\n    ",111],["T_PUBLIC","public",112],["T_WHITESPACE"," ",112],["T_FUNCTION","function",112],["T_WHITESPACE"," ",112],["T_STRING","error",112],"(",["T_VARIABLE","$field",112],")",";",["T_WHITESPACE","\n",112],"}",["T_WHITESPACE","\n",113]]