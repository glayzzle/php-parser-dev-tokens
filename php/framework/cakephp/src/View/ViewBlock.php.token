[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         2.1.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","View",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Core",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Exception",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Exception",17],";",["T_WHITESPACE","\n\n",17],["T_DOC_COMMENT","\/**\n * ViewBlock implements the concept of Blocks or Slots in the View layer.\n * Slots or blocks are combined with extending views and layouts to afford slots\n * of content that are present in a layout or parent view, but are defined by the child\n * view or elements used in the view.\n *\/",19],["T_WHITESPACE","\n",24],["T_CLASS","class",25],["T_WHITESPACE"," ",25],["T_STRING","ViewBlock",25],["T_WHITESPACE","\n",25],"{",["T_WHITESPACE","\n\n    ",26],["T_DOC_COMMENT","\/**\n     * Override content\n     *\n     * @var string\n     *\/",28],["T_WHITESPACE","\n    ",32],["T_CONST","const",33],["T_WHITESPACE"," ",33],["T_STRING","OVERRIDE",33],["T_WHITESPACE"," ",33],"=",["T_WHITESPACE"," ",33],["T_CONSTANT_ENCAPSED_STRING","'override'",33],";",["T_WHITESPACE","\n\n    ",33],["T_DOC_COMMENT","\/**\n     * Append content\n     *\n     * @var string\n     *\/",35],["T_WHITESPACE","\n    ",39],["T_CONST","const",40],["T_WHITESPACE"," ",40],["T_STRING","APPEND",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_CONSTANT_ENCAPSED_STRING","'append'",40],";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * Prepend content\n     *\n     * @var string\n     *\/",42],["T_WHITESPACE","\n    ",46],["T_CONST","const",47],["T_WHITESPACE"," ",47],["T_STRING","PREPEND",47],["T_WHITESPACE"," ",47],"=",["T_WHITESPACE"," ",47],["T_CONSTANT_ENCAPSED_STRING","'prepend'",47],";",["T_WHITESPACE","\n\n    ",47],["T_DOC_COMMENT","\/**\n     * Block content. An array of blocks indexed by name.\n     *\n     * @var array\n     *\/",49],["T_WHITESPACE","\n    ",53],["T_PROTECTED","protected",54],["T_WHITESPACE"," ",54],["T_VARIABLE","$_blocks",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],"[","]",";",["T_WHITESPACE","\n\n    ",54],["T_DOC_COMMENT","\/**\n     * The active blocks being captured.\n     *\n     * @var array\n     *\/",56],["T_WHITESPACE","\n    ",60],["T_PROTECTED","protected",61],["T_WHITESPACE"," ",61],["T_VARIABLE","$_active",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],"[","]",";",["T_WHITESPACE","\n\n    ",61],["T_DOC_COMMENT","\/**\n     * Should the currently captured content be discarded on ViewBlock::end()\n     *\n     * @see \\Cake\\View\\ViewBlock::end()\n     * @var bool\n     *\/",63],["T_WHITESPACE","\n    ",68],["T_PROTECTED","protected",69],["T_WHITESPACE"," ",69],["T_VARIABLE","$_discardActiveBufferOnEnd",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_STRING","false",69],";",["T_WHITESPACE","\n\n    ",69],["T_DOC_COMMENT","\/**\n     * Start capturing output for a 'block'\n     *\n     * Blocks allow you to create slots or blocks of dynamic content in the layout.\n     * view files can implement some or all of a layout's slots.\n     *\n     * You can end capturing blocks using View::end(). Blocks can be output\n     * using View::get();\n     *\n     * @param string $name The name of the block to capture for.\n     * @param string $mode If ViewBlock::OVERRIDE existing content will be overridden by new content.\n     *   If ViewBlock::APPEND content will be appended to existing content.\n     *   If ViewBlock::PREPEND it will be prepended.\n     * @throws \\Cake\\Core\\Exception\\Exception When starting a block twice\n     * @return void\n     *\/",71],["T_WHITESPACE","\n    ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","start",87],"(",["T_VARIABLE","$name",87],",",["T_WHITESPACE"," ",87],["T_VARIABLE","$mode",87],["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],["T_STRING","ViewBlock",87],["T_DOUBLE_COLON","::",87],["T_STRING","OVERRIDE",87],")",["T_WHITESPACE","\n    ",87],"{",["T_WHITESPACE","\n        ",88],["T_IF","if",89],["T_WHITESPACE"," ",89],"(",["T_STRING","in_array",89],"(",["T_VARIABLE","$name",89],",",["T_WHITESPACE"," ",89],["T_STRING","array_keys",89],"(",["T_VARIABLE","$this",89],["T_OBJECT_OPERATOR","->",89],["T_STRING","_active",89],")",")",")",["T_WHITESPACE"," ",89],"{",["T_WHITESPACE","\n            ",89],["T_THROW","throw",90],["T_WHITESPACE"," ",90],["T_NEW","new",90],["T_WHITESPACE"," ",90],["T_STRING","Exception",90],"(",["T_STRING","sprintf",90],"(",["T_CONSTANT_ENCAPSED_STRING","\"A view block with the name '%s' is already\/still open.\"",90],",",["T_WHITESPACE"," ",90],["T_VARIABLE","$name",90],")",")",";",["T_WHITESPACE","\n        ",90],"}",["T_WHITESPACE","\n        ",91],["T_VARIABLE","$this",92],["T_OBJECT_OPERATOR","->",92],["T_STRING","_active",92],"[",["T_VARIABLE","$name",92],"]",["T_WHITESPACE"," ",92],"=",["T_WHITESPACE"," ",92],["T_VARIABLE","$mode",92],";",["T_WHITESPACE","\n        ",92],["T_STRING","ob_start",93],"(",")",";",["T_WHITESPACE","\n    ",93],"}",["T_WHITESPACE","\n\n    ",94],["T_DOC_COMMENT","\/**\n     * End a capturing block. The compliment to ViewBlock::start()\n     *\n     * @return void\n     * @see \\Cake\\View\\ViewBlock::start()\n     *\/",96],["T_WHITESPACE","\n    ",101],["T_PUBLIC","public",102],["T_WHITESPACE"," ",102],["T_FUNCTION","function",102],["T_WHITESPACE"," ",102],["T_STRING","end",102],"(",")",["T_WHITESPACE","\n    ",102],"{",["T_WHITESPACE","\n        ",103],["T_IF","if",104],["T_WHITESPACE"," ",104],"(",["T_VARIABLE","$this",104],["T_OBJECT_OPERATOR","->",104],["T_STRING","_discardActiveBufferOnEnd",104],")",["T_WHITESPACE"," ",104],"{",["T_WHITESPACE","\n            ",104],["T_VARIABLE","$this",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","_discardActiveBufferOnEnd",105],["T_WHITESPACE"," ",105],"=",["T_WHITESPACE"," ",105],["T_STRING","false",105],";",["T_WHITESPACE","\n            ",105],["T_STRING","ob_end_clean",106],"(",")",";",["T_WHITESPACE","\n\n            ",106],["T_RETURN","return",108],";",["T_WHITESPACE","\n        ",108],"}",["T_WHITESPACE","\n        ",109],["T_IF","if",110],["T_WHITESPACE"," ",110],"(","!",["T_EMPTY","empty",110],"(",["T_VARIABLE","$this",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","_active",110],")",")",["T_WHITESPACE"," ",110],"{",["T_WHITESPACE","\n            ",110],["T_VARIABLE","$mode",111],["T_WHITESPACE"," ",111],"=",["T_WHITESPACE"," ",111],["T_STRING","end",111],"(",["T_VARIABLE","$this",111],["T_OBJECT_OPERATOR","->",111],["T_STRING","_active",111],")",";",["T_WHITESPACE","\n            ",111],["T_VARIABLE","$active",112],["T_WHITESPACE"," ",112],"=",["T_WHITESPACE"," ",112],["T_STRING","key",112],"(",["T_VARIABLE","$this",112],["T_OBJECT_OPERATOR","->",112],["T_STRING","_active",112],")",";",["T_WHITESPACE","\n            ",112],["T_VARIABLE","$content",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_STRING","ob_get_clean",113],"(",")",";",["T_WHITESPACE","\n            ",113],["T_IF","if",114],["T_WHITESPACE"," ",114],"(",["T_VARIABLE","$mode",114],["T_WHITESPACE"," ",114],["T_IS_IDENTICAL","===",114],["T_WHITESPACE"," ",114],["T_STRING","ViewBlock",114],["T_DOUBLE_COLON","::",114],["T_STRING","OVERRIDE",114],")",["T_WHITESPACE"," ",114],"{",["T_WHITESPACE","\n                ",114],["T_VARIABLE","$this",115],["T_OBJECT_OPERATOR","->",115],["T_STRING","_blocks",115],"[",["T_VARIABLE","$active",115],"]",["T_WHITESPACE"," ",115],"=",["T_WHITESPACE"," ",115],["T_VARIABLE","$content",115],";",["T_WHITESPACE","\n            ",115],"}",["T_WHITESPACE"," ",116],["T_ELSE","else",116],["T_WHITESPACE"," ",116],"{",["T_WHITESPACE","\n                ",116],["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","concat",117],"(",["T_VARIABLE","$active",117],",",["T_WHITESPACE"," ",117],["T_VARIABLE","$content",117],",",["T_WHITESPACE"," ",117],["T_VARIABLE","$mode",117],")",";",["T_WHITESPACE","\n            ",117],"}",["T_WHITESPACE","\n            ",118],["T_STRING","array_pop",119],"(",["T_VARIABLE","$this",119],["T_OBJECT_OPERATOR","->",119],["T_STRING","_active",119],")",";",["T_WHITESPACE","\n        ",119],"}",["T_WHITESPACE","\n    ",120],"}",["T_WHITESPACE","\n\n    ",121],["T_DOC_COMMENT","\/**\n     * Concat content to an existing or new block.\n     * Concating to a new block will create the block.\n     *\n     * Calling concat() without a value will create a new capturing\n     * block that needs to be finished with View::end(). The content\n     * of the new capturing context will be added to the existing block context.\n     *\n     * @param string $name Name of the block\n     * @param mixed $value The content for the block. Value will be type cast\n     *   to string.\n     * @param string $mode If ViewBlock::APPEND content will be appended to existing content.\n     *   If ViewBlock::PREPEND it will be prepended.\n     * @return void\n     *\/",123],["T_WHITESPACE","\n    ",137],["T_PUBLIC","public",138],["T_WHITESPACE"," ",138],["T_FUNCTION","function",138],["T_WHITESPACE"," ",138],["T_STRING","concat",138],"(",["T_VARIABLE","$name",138],",",["T_WHITESPACE"," ",138],["T_VARIABLE","$value",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_STRING","null",138],",",["T_WHITESPACE"," ",138],["T_VARIABLE","$mode",138],["T_WHITESPACE"," ",138],"=",["T_WHITESPACE"," ",138],["T_STRING","ViewBlock",138],["T_DOUBLE_COLON","::",138],["T_STRING","APPEND",138],")",["T_WHITESPACE","\n    ",138],"{",["T_WHITESPACE","\n        ",139],["T_IF","if",140],["T_WHITESPACE"," ",140],"(",["T_VARIABLE","$value",140],["T_WHITESPACE"," ",140],["T_IS_IDENTICAL","===",140],["T_WHITESPACE"," ",140],["T_STRING","null",140],")",["T_WHITESPACE"," ",140],"{",["T_WHITESPACE","\n            ",140],["T_VARIABLE","$this",141],["T_OBJECT_OPERATOR","->",141],["T_STRING","start",141],"(",["T_VARIABLE","$name",141],",",["T_WHITESPACE"," ",141],["T_VARIABLE","$mode",141],")",";",["T_WHITESPACE","\n\n            ",141],["T_RETURN","return",143],";",["T_WHITESPACE","\n        ",143],"}",["T_WHITESPACE","\n\n        ",144],["T_IF","if",146],["T_WHITESPACE"," ",146],"(","!",["T_ISSET","isset",146],"(",["T_VARIABLE","$this",146],["T_OBJECT_OPERATOR","->",146],["T_STRING","_blocks",146],"[",["T_VARIABLE","$name",146],"]",")",")",["T_WHITESPACE"," ",146],"{",["T_WHITESPACE","\n            ",146],["T_VARIABLE","$this",147],["T_OBJECT_OPERATOR","->",147],["T_STRING","_blocks",147],"[",["T_VARIABLE","$name",147],"]",["T_WHITESPACE"," ",147],"=",["T_WHITESPACE"," ",147],["T_CONSTANT_ENCAPSED_STRING","''",147],";",["T_WHITESPACE","\n        ",147],"}",["T_WHITESPACE","\n        ",148],["T_IF","if",149],["T_WHITESPACE"," ",149],"(",["T_VARIABLE","$mode",149],["T_WHITESPACE"," ",149],["T_IS_IDENTICAL","===",149],["T_WHITESPACE"," ",149],["T_STRING","ViewBlock",149],["T_DOUBLE_COLON","::",149],["T_STRING","PREPEND",149],")",["T_WHITESPACE"," ",149],"{",["T_WHITESPACE","\n            ",149],["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","_blocks",150],"[",["T_VARIABLE","$name",150],"]",["T_WHITESPACE"," ",150],"=",["T_WHITESPACE"," ",150],["T_VARIABLE","$value",150],["T_WHITESPACE"," ",150],".",["T_WHITESPACE"," ",150],["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","_blocks",150],"[",["T_VARIABLE","$name",150],"]",";",["T_WHITESPACE","\n        ",150],"}",["T_WHITESPACE"," ",151],["T_ELSE","else",151],["T_WHITESPACE"," ",151],"{",["T_WHITESPACE","\n            ",151],["T_VARIABLE","$this",152],["T_OBJECT_OPERATOR","->",152],["T_STRING","_blocks",152],"[",["T_VARIABLE","$name",152],"]",["T_WHITESPACE"," ",152],["T_CONCAT_EQUAL",".=",152],["T_WHITESPACE"," ",152],["T_VARIABLE","$value",152],";",["T_WHITESPACE","\n        ",152],"}",["T_WHITESPACE","\n    ",153],"}",["T_WHITESPACE","\n\n    ",154],["T_DOC_COMMENT","\/**\n     * Set the content for a block. This will overwrite any\n     * existing content.\n     *\n     * @param string $name Name of the block\n     * @param mixed $value The content for the block. Value will be type cast\n     *   to string.\n     * @return void\n     *\/",156],["T_WHITESPACE","\n    ",164],["T_PUBLIC","public",165],["T_WHITESPACE"," ",165],["T_FUNCTION","function",165],["T_WHITESPACE"," ",165],["T_STRING","set",165],"(",["T_VARIABLE","$name",165],",",["T_WHITESPACE"," ",165],["T_VARIABLE","$value",165],")",["T_WHITESPACE","\n    ",165],"{",["T_WHITESPACE","\n        ",166],["T_VARIABLE","$this",167],["T_OBJECT_OPERATOR","->",167],["T_STRING","_blocks",167],"[",["T_VARIABLE","$name",167],"]",["T_WHITESPACE"," ",167],"=",["T_WHITESPACE"," ",167],["T_STRING_CAST","(string)",167],["T_VARIABLE","$value",167],";",["T_WHITESPACE","\n    ",167],"}",["T_WHITESPACE","\n\n    ",168],["T_DOC_COMMENT","\/**\n     * Get the content for a block.\n     *\n     * @param string $name Name of the block\n     * @param string $default Default string\n     * @return string The block content or $default if the block does not exist.\n     *\/",170],["T_WHITESPACE","\n    ",176],["T_PUBLIC","public",177],["T_WHITESPACE"," ",177],["T_FUNCTION","function",177],["T_WHITESPACE"," ",177],["T_STRING","get",177],"(",["T_VARIABLE","$name",177],",",["T_WHITESPACE"," ",177],["T_VARIABLE","$default",177],["T_WHITESPACE"," ",177],"=",["T_WHITESPACE"," ",177],["T_CONSTANT_ENCAPSED_STRING","''",177],")",["T_WHITESPACE","\n    ",177],"{",["T_WHITESPACE","\n        ",178],["T_IF","if",179],["T_WHITESPACE"," ",179],"(","!",["T_ISSET","isset",179],"(",["T_VARIABLE","$this",179],["T_OBJECT_OPERATOR","->",179],["T_STRING","_blocks",179],"[",["T_VARIABLE","$name",179],"]",")",")",["T_WHITESPACE"," ",179],"{",["T_WHITESPACE","\n            ",179],["T_RETURN","return",180],["T_WHITESPACE"," ",180],["T_VARIABLE","$default",180],";",["T_WHITESPACE","\n        ",180],"}",["T_WHITESPACE","\n\n        ",181],["T_RETURN","return",183],["T_WHITESPACE"," ",183],["T_VARIABLE","$this",183],["T_OBJECT_OPERATOR","->",183],["T_STRING","_blocks",183],"[",["T_VARIABLE","$name",183],"]",";",["T_WHITESPACE","\n    ",183],"}",["T_WHITESPACE","\n\n    ",184],["T_DOC_COMMENT","\/**\n     * Check if a block exists\n     *\n     * @param string $name Name of the block\n     * @return bool\n     *\/",186],["T_WHITESPACE","\n    ",191],["T_PUBLIC","public",192],["T_WHITESPACE"," ",192],["T_FUNCTION","function",192],["T_WHITESPACE"," ",192],["T_STRING","exists",192],"(",["T_VARIABLE","$name",192],")",["T_WHITESPACE","\n    ",192],"{",["T_WHITESPACE","\n        ",193],["T_RETURN","return",194],["T_WHITESPACE"," ",194],["T_ISSET","isset",194],"(",["T_VARIABLE","$this",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","_blocks",194],"[",["T_VARIABLE","$name",194],"]",")",";",["T_WHITESPACE","\n    ",194],"}",["T_WHITESPACE","\n\n    ",195],["T_DOC_COMMENT","\/**\n     * Get the names of all the existing blocks.\n     *\n     * @return array An array containing the blocks.\n     *\/",197],["T_WHITESPACE","\n    ",201],["T_PUBLIC","public",202],["T_WHITESPACE"," ",202],["T_FUNCTION","function",202],["T_WHITESPACE"," ",202],["T_STRING","keys",202],"(",")",["T_WHITESPACE","\n    ",202],"{",["T_WHITESPACE","\n        ",203],["T_RETURN","return",204],["T_WHITESPACE"," ",204],["T_STRING","array_keys",204],"(",["T_VARIABLE","$this",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","_blocks",204],")",";",["T_WHITESPACE","\n    ",204],"}",["T_WHITESPACE","\n\n    ",205],["T_DOC_COMMENT","\/**\n     * Get the name of the currently open block.\n     *\n     * @return string|null Either null or the name of the last open block.\n     *\/",207],["T_WHITESPACE","\n    ",211],["T_PUBLIC","public",212],["T_WHITESPACE"," ",212],["T_FUNCTION","function",212],["T_WHITESPACE"," ",212],["T_STRING","active",212],"(",")",["T_WHITESPACE","\n    ",212],"{",["T_WHITESPACE","\n        ",213],["T_STRING","end",214],"(",["T_VARIABLE","$this",214],["T_OBJECT_OPERATOR","->",214],["T_STRING","_active",214],")",";",["T_WHITESPACE","\n\n        ",214],["T_RETURN","return",216],["T_WHITESPACE"," ",216],["T_STRING","key",216],"(",["T_VARIABLE","$this",216],["T_OBJECT_OPERATOR","->",216],["T_STRING","_active",216],")",";",["T_WHITESPACE","\n    ",216],"}",["T_WHITESPACE","\n\n    ",217],["T_DOC_COMMENT","\/**\n     * Get the names of the unclosed\/active blocks.\n     *\n     * @return array An array of unclosed blocks.\n     *\/",219],["T_WHITESPACE","\n    ",223],["T_PUBLIC","public",224],["T_WHITESPACE"," ",224],["T_FUNCTION","function",224],["T_WHITESPACE"," ",224],["T_STRING","unclosed",224],"(",")",["T_WHITESPACE","\n    ",224],"{",["T_WHITESPACE","\n        ",225],["T_RETURN","return",226],["T_WHITESPACE"," ",226],["T_VARIABLE","$this",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","_active",226],";",["T_WHITESPACE","\n    ",226],"}",["T_WHITESPACE","\n",227],"}",["T_WHITESPACE","\n",228]]