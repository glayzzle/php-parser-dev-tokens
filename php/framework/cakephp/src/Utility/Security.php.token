[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         0.10.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Utility",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Utility",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Crypto",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Mcrypt",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Utility",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Crypto",18],["T_NS_SEPARATOR","\\",18],["T_STRING","OpenSsl",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","InvalidArgumentException",19],";",["T_WHITESPACE","\n\n",19],["T_DOC_COMMENT","\/**\n * Security Library contains utility methods related to security\n *\/",21],["T_WHITESPACE","\n",23],["T_CLASS","class",24],["T_WHITESPACE"," ",24],["T_STRING","Security",24],["T_WHITESPACE","\n",24],"{",["T_WHITESPACE","\n\n    ",25],["T_DOC_COMMENT","\/**\n     * Default hash method. If `$type` param for `Security::hash()` is not specified\n     * this value is used. Defaults to 'sha1'.\n     *\n     * @var string\n     *\/",27],["T_WHITESPACE","\n    ",32],["T_PUBLIC","public",33],["T_WHITESPACE"," ",33],["T_STATIC","static",33],["T_WHITESPACE"," ",33],["T_VARIABLE","$hashType",33],["T_WHITESPACE"," ",33],"=",["T_WHITESPACE"," ",33],["T_CONSTANT_ENCAPSED_STRING","'sha1'",33],";",["T_WHITESPACE","\n\n    ",33],["T_DOC_COMMENT","\/**\n     * The HMAC salt to use for encryption and decryption routines\n     *\n     * @var string\n     *\/",35],["T_WHITESPACE","\n    ",39],["T_PROTECTED","protected",40],["T_WHITESPACE"," ",40],["T_STATIC","static",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$_salt",40],";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * The crypto implementation to use.\n     *\n     * @var object\n     *\/",42],["T_WHITESPACE","\n    ",46],["T_PROTECTED","protected",47],["T_WHITESPACE"," ",47],["T_STATIC","static",47],["T_WHITESPACE"," ",47],["T_VARIABLE","$_instance",47],";",["T_WHITESPACE","\n\n    ",47],["T_DOC_COMMENT","\/**\n     * Create a hash from string using given method.\n     *\n     * @param string $string String to hash\n     * @param string|null $type Hashing algo to use (i.e. sha1, sha256 etc.).\n     *   Can be any valid algo included in list returned by hash_algos().\n     *   If no value is passed the type specified by `Security::$hashType` is used.\n     * @param mixed $salt If true, automatically prepends the application's salt\n     *   value to $string (Security.salt).\n     * @return string Hash\n     * @link http:\/\/book.cakephp.org\/3.0\/en\/core-libraries\/security.html#hashing-data\n     *\/",49],["T_WHITESPACE","\n    ",60],["T_PUBLIC","public",61],["T_WHITESPACE"," ",61],["T_STATIC","static",61],["T_WHITESPACE"," ",61],["T_FUNCTION","function",61],["T_WHITESPACE"," ",61],["T_STRING","hash",61],"(",["T_VARIABLE","$string",61],",",["T_WHITESPACE"," ",61],["T_VARIABLE","$type",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],["T_STRING","null",61],",",["T_WHITESPACE"," ",61],["T_VARIABLE","$salt",61],["T_WHITESPACE"," ",61],"=",["T_WHITESPACE"," ",61],["T_STRING","false",61],")",["T_WHITESPACE","\n    ",61],"{",["T_WHITESPACE","\n        ",62],["T_IF","if",63],["T_WHITESPACE"," ",63],"(",["T_EMPTY","empty",63],"(",["T_VARIABLE","$type",63],")",")",["T_WHITESPACE"," ",63],"{",["T_WHITESPACE","\n            ",63],["T_VARIABLE","$type",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_STATIC","static",64],["T_DOUBLE_COLON","::",64],["T_VARIABLE","$hashType",64],";",["T_WHITESPACE","\n        ",64],"}",["T_WHITESPACE","\n        ",65],["T_VARIABLE","$type",66],["T_WHITESPACE"," ",66],"=",["T_WHITESPACE"," ",66],["T_STRING","strtolower",66],"(",["T_VARIABLE","$type",66],")",";",["T_WHITESPACE","\n\n        ",66],["T_IF","if",68],["T_WHITESPACE"," ",68],"(",["T_VARIABLE","$salt",68],")",["T_WHITESPACE"," ",68],"{",["T_WHITESPACE","\n            ",68],["T_IF","if",69],["T_WHITESPACE"," ",69],"(","!",["T_STRING","is_string",69],"(",["T_VARIABLE","$salt",69],")",")",["T_WHITESPACE"," ",69],"{",["T_WHITESPACE","\n                ",69],["T_VARIABLE","$salt",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_STATIC","static",70],["T_DOUBLE_COLON","::",70],["T_VARIABLE","$_salt",70],";",["T_WHITESPACE","\n            ",70],"}",["T_WHITESPACE","\n            ",71],["T_VARIABLE","$string",72],["T_WHITESPACE"," ",72],"=",["T_WHITESPACE"," ",72],["T_VARIABLE","$salt",72],["T_WHITESPACE"," ",72],".",["T_WHITESPACE"," ",72],["T_VARIABLE","$string",72],";",["T_WHITESPACE","\n        ",72],"}",["T_WHITESPACE","\n\n        ",73],["T_RETURN","return",75],["T_WHITESPACE"," ",75],["T_STRING","hash",75],"(",["T_VARIABLE","$type",75],",",["T_WHITESPACE"," ",75],["T_VARIABLE","$string",75],")",";",["T_WHITESPACE","\n    ",75],"}",["T_WHITESPACE","\n\n    ",76],["T_DOC_COMMENT","\/**\n     * Sets the default hash method for the Security object. This affects all objects\n     * using Security::hash().\n     *\n     * @param string $hash Method to use (sha1\/sha256\/md5 etc.)\n     * @return void\n     * @see \\Cake\\Utility\\Security::hash()\n     *\/",78],["T_WHITESPACE","\n    ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_STATIC","static",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","setHash",86],"(",["T_VARIABLE","$hash",86],")",["T_WHITESPACE","\n    ",86],"{",["T_WHITESPACE","\n        ",87],["T_STATIC","static",88],["T_DOUBLE_COLON","::",88],["T_VARIABLE","$hashType",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_VARIABLE","$hash",88],";",["T_WHITESPACE","\n    ",88],"}",["T_WHITESPACE","\n\n    ",89],["T_DOC_COMMENT","\/**\n     * Get random bytes from a secure source.\n     *\n     * This method will fall back to an insecure source an trigger a warning\n     * if it cannot find a secure source of random data.\n     *\n     * @param int $length The number of bytes you want.\n     * @return string Random bytes in binary.\n     *\/",91],["T_WHITESPACE","\n    ",99],["T_PUBLIC","public",100],["T_WHITESPACE"," ",100],["T_STATIC","static",100],["T_WHITESPACE"," ",100],["T_FUNCTION","function",100],["T_WHITESPACE"," ",100],["T_STRING","randomBytes",100],"(",["T_VARIABLE","$length",100],")",["T_WHITESPACE","\n    ",100],"{",["T_WHITESPACE","\n        ",101],["T_IF","if",102],["T_WHITESPACE"," ",102],"(",["T_STRING","function_exists",102],"(",["T_CONSTANT_ENCAPSED_STRING","'random_bytes'",102],")",")",["T_WHITESPACE"," ",102],"{",["T_WHITESPACE","\n            ",102],["T_RETURN","return",103],["T_WHITESPACE"," ",103],["T_STRING","random_bytes",103],"(",["T_VARIABLE","$length",103],")",";",["T_WHITESPACE","\n        ",103],"}",["T_WHITESPACE","\n        ",104],["T_IF","if",105],["T_WHITESPACE"," ",105],"(",["T_STRING","function_exists",105],"(",["T_CONSTANT_ENCAPSED_STRING","'openssl_random_pseudo_bytes'",105],")",")",["T_WHITESPACE"," ",105],"{",["T_WHITESPACE","\n            ",105],["T_VARIABLE","$bytes",106],["T_WHITESPACE"," ",106],"=",["T_WHITESPACE"," ",106],["T_STRING","openssl_random_pseudo_bytes",106],"(",["T_VARIABLE","$length",106],",",["T_WHITESPACE"," ",106],["T_VARIABLE","$strongSource",106],")",";",["T_WHITESPACE","\n            ",106],["T_IF","if",107],["T_WHITESPACE"," ",107],"(","!",["T_VARIABLE","$strongSource",107],")",["T_WHITESPACE"," ",107],"{",["T_WHITESPACE","\n                ",107],["T_STRING","trigger_error",108],"(",["T_WHITESPACE","\n                    ",108],["T_CONSTANT_ENCAPSED_STRING","'openssl was unable to use a strong source of entropy. '",109],["T_WHITESPACE"," ",109],".",["T_WHITESPACE","\n                    ",109],["T_CONSTANT_ENCAPSED_STRING","'Consider updating your system libraries, or ensuring '",110],["T_WHITESPACE"," ",110],".",["T_WHITESPACE","\n                    ",110],["T_CONSTANT_ENCAPSED_STRING","'you have more available entropy.'",111],",",["T_WHITESPACE","\n                    ",111],["T_STRING","E_USER_WARNING",112],["T_WHITESPACE","\n                ",112],")",";",["T_WHITESPACE","\n            ",113],"}",["T_WHITESPACE","\n\n            ",114],["T_RETURN","return",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$bytes",116],";",["T_WHITESPACE","\n        ",116],"}",["T_WHITESPACE","\n        ",117],["T_STRING","trigger_error",118],"(",["T_WHITESPACE","\n            ",118],["T_CONSTANT_ENCAPSED_STRING","'You do not have a safe source of random data available. '",119],["T_WHITESPACE"," ",119],".",["T_WHITESPACE","\n            ",119],["T_CONSTANT_ENCAPSED_STRING","'Install either the openssl extension, or paragonie\/random_compat. '",120],["T_WHITESPACE"," ",120],".",["T_WHITESPACE","\n            ",120],["T_CONSTANT_ENCAPSED_STRING","'Falling back to an insecure random source.'",121],",",["T_WHITESPACE","\n            ",121],["T_STRING","E_USER_WARNING",122],["T_WHITESPACE","\n        ",122],")",";",["T_WHITESPACE","\n\n        ",123],["T_RETURN","return",125],["T_WHITESPACE"," ",125],["T_STATIC","static",125],["T_DOUBLE_COLON","::",125],["T_STRING","insecureRandomBytes",125],"(",["T_VARIABLE","$length",125],")",";",["T_WHITESPACE","\n    ",125],"}",["T_WHITESPACE","\n\n    ",126],["T_DOC_COMMENT","\/**\n     * Like randomBytes() above, but not cryptographically secure.\n     *\n     * @param int $length The number of bytes you want.\n     * @return string Random bytes in binary.\n     * @see \\Cake\\Utility\\Security::randomBytes()\n     *\/",128],["T_WHITESPACE","\n    ",134],["T_PUBLIC","public",135],["T_WHITESPACE"," ",135],["T_STATIC","static",135],["T_WHITESPACE"," ",135],["T_FUNCTION","function",135],["T_WHITESPACE"," ",135],["T_STRING","insecureRandomBytes",135],"(",["T_VARIABLE","$length",135],")",["T_WHITESPACE","\n    ",135],"{",["T_WHITESPACE","\n        ",136],["T_VARIABLE","$length",137],["T_WHITESPACE"," ",137],["T_MUL_EQUAL","*=",137],["T_WHITESPACE"," ",137],["T_LNUMBER","2",137],";",["T_WHITESPACE","\n\n        ",137],["T_VARIABLE","$bytes",139],["T_WHITESPACE"," ",139],"=",["T_WHITESPACE"," ",139],["T_CONSTANT_ENCAPSED_STRING","''",139],";",["T_WHITESPACE","\n        ",139],["T_VARIABLE","$byteLength",140],["T_WHITESPACE"," ",140],"=",["T_WHITESPACE"," ",140],["T_LNUMBER","0",140],";",["T_WHITESPACE","\n        ",140],["T_WHILE","while",141],["T_WHITESPACE"," ",141],"(",["T_VARIABLE","$byteLength",141],["T_WHITESPACE"," ",141],"<",["T_WHITESPACE"," ",141],["T_VARIABLE","$length",141],")",["T_WHITESPACE"," ",141],"{",["T_WHITESPACE","\n            ",141],["T_VARIABLE","$bytes",142],["T_WHITESPACE"," ",142],["T_CONCAT_EQUAL",".=",142],["T_WHITESPACE"," ",142],["T_STATIC","static",142],["T_DOUBLE_COLON","::",142],["T_STRING","hash",142],"(",["T_STRING","Text",142],["T_DOUBLE_COLON","::",142],["T_STRING","uuid",142],"(",")",["T_WHITESPACE"," ",142],".",["T_WHITESPACE"," ",142],["T_STRING","uniqid",142],"(",["T_STRING","mt_rand",142],"(",")",",",["T_WHITESPACE"," ",142],["T_STRING","true",142],")",",",["T_WHITESPACE"," ",142],["T_CONSTANT_ENCAPSED_STRING","'sha512'",142],",",["T_WHITESPACE"," ",142],["T_STRING","true",142],")",";",["T_WHITESPACE","\n            ",142],["T_VARIABLE","$byteLength",143],["T_WHITESPACE"," ",143],"=",["T_WHITESPACE"," ",143],["T_STRING","strlen",143],"(",["T_VARIABLE","$bytes",143],")",";",["T_WHITESPACE","\n        ",143],"}",["T_WHITESPACE","\n        ",144],["T_VARIABLE","$bytes",145],["T_WHITESPACE"," ",145],"=",["T_WHITESPACE"," ",145],["T_STRING","substr",145],"(",["T_VARIABLE","$bytes",145],",",["T_WHITESPACE"," ",145],["T_LNUMBER","0",145],",",["T_WHITESPACE"," ",145],["T_VARIABLE","$length",145],")",";",["T_WHITESPACE","\n\n        ",145],["T_RETURN","return",147],["T_WHITESPACE"," ",147],["T_STRING","pack",147],"(",["T_CONSTANT_ENCAPSED_STRING","'H*'",147],",",["T_WHITESPACE"," ",147],["T_VARIABLE","$bytes",147],")",";",["T_WHITESPACE","\n    ",147],"}",["T_WHITESPACE","\n\n    ",148],["T_DOC_COMMENT","\/**\n     * Get the crypto implementation based on the loaded extensions.\n     *\n     * You can use this method to forcibly decide between mcrypt\/openssl\/custom implementations.\n     *\n     * @param object|null $instance The crypto instance to use.\n     * @return object Crypto instance.\n     * @throws \\InvalidArgumentException When no compatible crypto extension is available.\n     *\/",150],["T_WHITESPACE","\n    ",158],["T_PUBLIC","public",159],["T_WHITESPACE"," ",159],["T_STATIC","static",159],["T_WHITESPACE"," ",159],["T_FUNCTION","function",159],["T_WHITESPACE"," ",159],["T_STRING","engine",159],"(",["T_VARIABLE","$instance",159],["T_WHITESPACE"," ",159],"=",["T_WHITESPACE"," ",159],["T_STRING","null",159],")",["T_WHITESPACE","\n    ",159],"{",["T_WHITESPACE","\n        ",160],["T_IF","if",161],["T_WHITESPACE"," ",161],"(",["T_VARIABLE","$instance",161],["T_WHITESPACE"," ",161],["T_IS_IDENTICAL","===",161],["T_WHITESPACE"," ",161],["T_STRING","null",161],["T_WHITESPACE"," ",161],["T_BOOLEAN_AND","&&",161],["T_WHITESPACE"," ",161],["T_STATIC","static",161],["T_DOUBLE_COLON","::",161],["T_VARIABLE","$_instance",161],["T_WHITESPACE"," ",161],["T_IS_IDENTICAL","===",161],["T_WHITESPACE"," ",161],["T_STRING","null",161],")",["T_WHITESPACE"," ",161],"{",["T_WHITESPACE","\n            ",161],["T_IF","if",162],["T_WHITESPACE"," ",162],"(",["T_STRING","extension_loaded",162],"(",["T_CONSTANT_ENCAPSED_STRING","'openssl'",162],")",")",["T_WHITESPACE"," ",162],"{",["T_WHITESPACE","\n                ",162],["T_VARIABLE","$instance",163],["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_NEW","new",163],["T_WHITESPACE"," ",163],["T_STRING","OpenSsl",163],"(",")",";",["T_WHITESPACE","\n            ",163],"}",["T_WHITESPACE"," ",164],["T_ELSEIF","elseif",164],["T_WHITESPACE"," ",164],"(",["T_STRING","extension_loaded",164],"(",["T_CONSTANT_ENCAPSED_STRING","'mcrypt'",164],")",")",["T_WHITESPACE"," ",164],"{",["T_WHITESPACE","\n                ",164],["T_VARIABLE","$instance",165],["T_WHITESPACE"," ",165],"=",["T_WHITESPACE"," ",165],["T_NEW","new",165],["T_WHITESPACE"," ",165],["T_STRING","Mcrypt",165],"(",")",";",["T_WHITESPACE","\n            ",165],"}",["T_WHITESPACE","\n        ",166],"}",["T_WHITESPACE","\n        ",167],["T_IF","if",168],["T_WHITESPACE"," ",168],"(",["T_VARIABLE","$instance",168],")",["T_WHITESPACE"," ",168],"{",["T_WHITESPACE","\n            ",168],["T_STATIC","static",169],["T_DOUBLE_COLON","::",169],["T_VARIABLE","$_instance",169],["T_WHITESPACE"," ",169],"=",["T_WHITESPACE"," ",169],["T_VARIABLE","$instance",169],";",["T_WHITESPACE","\n        ",169],"}",["T_WHITESPACE","\n        ",170],["T_IF","if",171],["T_WHITESPACE"," ",171],"(",["T_ISSET","isset",171],"(",["T_STATIC","static",171],["T_DOUBLE_COLON","::",171],["T_VARIABLE","$_instance",171],")",")",["T_WHITESPACE"," ",171],"{",["T_WHITESPACE","\n            ",171],["T_RETURN","return",172],["T_WHITESPACE"," ",172],["T_STATIC","static",172],["T_DOUBLE_COLON","::",172],["T_VARIABLE","$_instance",172],";",["T_WHITESPACE","\n        ",172],"}",["T_WHITESPACE","\n        ",173],["T_THROW","throw",174],["T_WHITESPACE"," ",174],["T_NEW","new",174],["T_WHITESPACE"," ",174],["T_STRING","InvalidArgumentException",174],"(",["T_WHITESPACE","\n            ",174],["T_CONSTANT_ENCAPSED_STRING","'No compatible crypto engine available. '",175],["T_WHITESPACE"," ",175],".",["T_WHITESPACE","\n            ",175],["T_CONSTANT_ENCAPSED_STRING","'Load either the openssl or mcrypt extensions'",176],["T_WHITESPACE","\n        ",176],")",";",["T_WHITESPACE","\n    ",177],"}",["T_WHITESPACE","\n\n    ",178],["T_DOC_COMMENT","\/**\n     * Encrypts\/Decrypts a text using the given key using rijndael method.\n     *\n     * @param string $text Encrypted string to decrypt, normal string to encrypt\n     * @param string $key Key to use as the encryption key for encrypted data.\n     * @param string $operation Operation to perform, encrypt or decrypt\n     * @throws \\InvalidArgumentException When there are errors.\n     * @return string Encrypted\/Decrypted string\n     *\/",180],["T_WHITESPACE","\n    ",188],["T_PUBLIC","public",189],["T_WHITESPACE"," ",189],["T_STATIC","static",189],["T_WHITESPACE"," ",189],["T_FUNCTION","function",189],["T_WHITESPACE"," ",189],["T_STRING","rijndael",189],"(",["T_VARIABLE","$text",189],",",["T_WHITESPACE"," ",189],["T_VARIABLE","$key",189],",",["T_WHITESPACE"," ",189],["T_VARIABLE","$operation",189],")",["T_WHITESPACE","\n    ",189],"{",["T_WHITESPACE","\n        ",190],["T_IF","if",191],["T_WHITESPACE"," ",191],"(",["T_EMPTY","empty",191],"(",["T_VARIABLE","$key",191],")",")",["T_WHITESPACE"," ",191],"{",["T_WHITESPACE","\n            ",191],["T_THROW","throw",192],["T_WHITESPACE"," ",192],["T_NEW","new",192],["T_WHITESPACE"," ",192],["T_STRING","InvalidArgumentException",192],"(",["T_CONSTANT_ENCAPSED_STRING","'You cannot use an empty key for Security::rijndael()'",192],")",";",["T_WHITESPACE","\n        ",192],"}",["T_WHITESPACE","\n        ",193],["T_IF","if",194],["T_WHITESPACE"," ",194],"(",["T_EMPTY","empty",194],"(",["T_VARIABLE","$operation",194],")",["T_WHITESPACE"," ",194],["T_BOOLEAN_OR","||",194],["T_WHITESPACE"," ",194],"!",["T_STRING","in_array",194],"(",["T_VARIABLE","$operation",194],",",["T_WHITESPACE"," ",194],"[",["T_CONSTANT_ENCAPSED_STRING","'encrypt'",194],",",["T_WHITESPACE"," ",194],["T_CONSTANT_ENCAPSED_STRING","'decrypt'",194],"]",")",")",["T_WHITESPACE"," ",194],"{",["T_WHITESPACE","\n            ",194],["T_THROW","throw",195],["T_WHITESPACE"," ",195],["T_NEW","new",195],["T_WHITESPACE"," ",195],["T_STRING","InvalidArgumentException",195],"(",["T_CONSTANT_ENCAPSED_STRING","'You must specify the operation for Security::rijndael(), either encrypt or decrypt'",195],")",";",["T_WHITESPACE","\n        ",195],"}",["T_WHITESPACE","\n        ",196],["T_IF","if",197],["T_WHITESPACE"," ",197],"(",["T_STRING","mb_strlen",197],"(",["T_VARIABLE","$key",197],",",["T_WHITESPACE"," ",197],["T_CONSTANT_ENCAPSED_STRING","'8bit'",197],")",["T_WHITESPACE"," ",197],"<",["T_WHITESPACE"," ",197],["T_LNUMBER","32",197],")",["T_WHITESPACE"," ",197],"{",["T_WHITESPACE","\n            ",197],["T_THROW","throw",198],["T_WHITESPACE"," ",198],["T_NEW","new",198],["T_WHITESPACE"," ",198],["T_STRING","InvalidArgumentException",198],"(",["T_CONSTANT_ENCAPSED_STRING","'You must use a key larger than 32 bytes for Security::rijndael()'",198],")",";",["T_WHITESPACE","\n        ",198],"}",["T_WHITESPACE","\n        ",199],["T_VARIABLE","$crypto",200],["T_WHITESPACE"," ",200],"=",["T_WHITESPACE"," ",200],["T_STATIC","static",200],["T_DOUBLE_COLON","::",200],["T_STRING","engine",200],"(",")",";",["T_WHITESPACE","\n\n        ",200],["T_RETURN","return",202],["T_WHITESPACE"," ",202],["T_VARIABLE","$crypto",202],["T_OBJECT_OPERATOR","->",202],["T_STRING","rijndael",202],"(",["T_VARIABLE","$text",202],",",["T_WHITESPACE"," ",202],["T_VARIABLE","$key",202],",",["T_WHITESPACE"," ",202],["T_VARIABLE","$operation",202],")",";",["T_WHITESPACE","\n    ",202],"}",["T_WHITESPACE","\n\n    ",203],["T_DOC_COMMENT","\/**\n     * Encrypt a value using AES-256.\n     *\n     * *Caveat* You cannot properly encrypt\/decrypt data with trailing null bytes.\n     * Any trailing null bytes will be removed on decryption due to how PHP pads messages\n     * with nulls prior to encryption.\n     *\n     * @param string $plain The value to encrypt.\n     * @param string $key The 256 bit\/32 byte key to use as a cipher key.\n     * @param string|null $hmacSalt The salt to use for the HMAC process. Leave null to use Security.salt.\n     * @return string Encrypted data.\n     * @throws \\InvalidArgumentException On invalid data or key.\n     *\/",205],["T_WHITESPACE","\n    ",217],["T_PUBLIC","public",218],["T_WHITESPACE"," ",218],["T_STATIC","static",218],["T_WHITESPACE"," ",218],["T_FUNCTION","function",218],["T_WHITESPACE"," ",218],["T_STRING","encrypt",218],"(",["T_VARIABLE","$plain",218],",",["T_WHITESPACE"," ",218],["T_VARIABLE","$key",218],",",["T_WHITESPACE"," ",218],["T_VARIABLE","$hmacSalt",218],["T_WHITESPACE"," ",218],"=",["T_WHITESPACE"," ",218],["T_STRING","null",218],")",["T_WHITESPACE","\n    ",218],"{",["T_WHITESPACE","\n        ",219],["T_STRING","self",220],["T_DOUBLE_COLON","::",220],["T_STRING","_checkKey",220],"(",["T_VARIABLE","$key",220],",",["T_WHITESPACE"," ",220],["T_CONSTANT_ENCAPSED_STRING","'encrypt()'",220],")",";",["T_WHITESPACE","\n\n        ",220],["T_IF","if",222],["T_WHITESPACE"," ",222],"(",["T_VARIABLE","$hmacSalt",222],["T_WHITESPACE"," ",222],["T_IS_IDENTICAL","===",222],["T_WHITESPACE"," ",222],["T_STRING","null",222],")",["T_WHITESPACE"," ",222],"{",["T_WHITESPACE","\n            ",222],["T_VARIABLE","$hmacSalt",223],["T_WHITESPACE"," ",223],"=",["T_WHITESPACE"," ",223],["T_STATIC","static",223],["T_DOUBLE_COLON","::",223],["T_VARIABLE","$_salt",223],";",["T_WHITESPACE","\n        ",223],"}",["T_WHITESPACE","\n        ",224],["T_COMMENT","\/\/ Generate the encryption and hmac key.\n",225],["T_WHITESPACE","        ",226],["T_VARIABLE","$key",226],["T_WHITESPACE"," ",226],"=",["T_WHITESPACE"," ",226],["T_STRING","mb_substr",226],"(",["T_STRING","hash",226],"(",["T_CONSTANT_ENCAPSED_STRING","'sha256'",226],",",["T_WHITESPACE"," ",226],["T_VARIABLE","$key",226],["T_WHITESPACE"," ",226],".",["T_WHITESPACE"," ",226],["T_VARIABLE","$hmacSalt",226],")",",",["T_WHITESPACE"," ",226],["T_LNUMBER","0",226],",",["T_WHITESPACE"," ",226],["T_LNUMBER","32",226],",",["T_WHITESPACE"," ",226],["T_CONSTANT_ENCAPSED_STRING","'8bit'",226],")",";",["T_WHITESPACE","\n\n        ",226],["T_VARIABLE","$crypto",228],["T_WHITESPACE"," ",228],"=",["T_WHITESPACE"," ",228],["T_STATIC","static",228],["T_DOUBLE_COLON","::",228],["T_STRING","engine",228],"(",")",";",["T_WHITESPACE","\n        ",228],["T_VARIABLE","$ciphertext",229],["T_WHITESPACE"," ",229],"=",["T_WHITESPACE"," ",229],["T_VARIABLE","$crypto",229],["T_OBJECT_OPERATOR","->",229],["T_STRING","encrypt",229],"(",["T_VARIABLE","$plain",229],",",["T_WHITESPACE"," ",229],["T_VARIABLE","$key",229],")",";",["T_WHITESPACE","\n        ",229],["T_VARIABLE","$hmac",230],["T_WHITESPACE"," ",230],"=",["T_WHITESPACE"," ",230],["T_STRING","hash_hmac",230],"(",["T_CONSTANT_ENCAPSED_STRING","'sha256'",230],",",["T_WHITESPACE"," ",230],["T_VARIABLE","$ciphertext",230],",",["T_WHITESPACE"," ",230],["T_VARIABLE","$key",230],")",";",["T_WHITESPACE","\n\n        ",230],["T_RETURN","return",232],["T_WHITESPACE"," ",232],["T_VARIABLE","$hmac",232],["T_WHITESPACE"," ",232],".",["T_WHITESPACE"," ",232],["T_VARIABLE","$ciphertext",232],";",["T_WHITESPACE","\n    ",232],"}",["T_WHITESPACE","\n\n    ",233],["T_DOC_COMMENT","\/**\n     * Check the encryption key for proper length.\n     *\n     * @param string $key Key to check.\n     * @param string $method The method the key is being checked for.\n     * @return void\n     * @throws \\InvalidArgumentException When key length is not 256 bit\/32 bytes\n     *\/",235],["T_WHITESPACE","\n    ",242],["T_PROTECTED","protected",243],["T_WHITESPACE"," ",243],["T_STATIC","static",243],["T_WHITESPACE"," ",243],["T_FUNCTION","function",243],["T_WHITESPACE"," ",243],["T_STRING","_checkKey",243],"(",["T_VARIABLE","$key",243],",",["T_WHITESPACE"," ",243],["T_VARIABLE","$method",243],")",["T_WHITESPACE","\n    ",243],"{",["T_WHITESPACE","\n        ",244],["T_IF","if",245],["T_WHITESPACE"," ",245],"(",["T_STRING","mb_strlen",245],"(",["T_VARIABLE","$key",245],",",["T_WHITESPACE"," ",245],["T_CONSTANT_ENCAPSED_STRING","'8bit'",245],")",["T_WHITESPACE"," ",245],"<",["T_WHITESPACE"," ",245],["T_LNUMBER","32",245],")",["T_WHITESPACE"," ",245],"{",["T_WHITESPACE","\n            ",245],["T_THROW","throw",246],["T_WHITESPACE"," ",246],["T_NEW","new",246],["T_WHITESPACE"," ",246],["T_STRING","InvalidArgumentException",246],"(",["T_WHITESPACE","\n                ",246],["T_STRING","sprintf",247],"(",["T_CONSTANT_ENCAPSED_STRING","'Invalid key for %s, key must be at least 256 bits (32 bytes) long.'",247],",",["T_WHITESPACE"," ",247],["T_VARIABLE","$method",247],")",["T_WHITESPACE","\n            ",247],")",";",["T_WHITESPACE","\n        ",248],"}",["T_WHITESPACE","\n    ",249],"}",["T_WHITESPACE","\n\n    ",250],["T_DOC_COMMENT","\/**\n     * Decrypt a value using AES-256.\n     *\n     * @param string $cipher The ciphertext to decrypt.\n     * @param string $key The 256 bit\/32 byte key to use as a cipher key.\n     * @param string|null $hmacSalt The salt to use for the HMAC process. Leave null to use Security.salt.\n     * @return string Decrypted data. Any trailing null bytes will be removed.\n     * @throws \\InvalidArgumentException On invalid data or key.\n     *\/",252],["T_WHITESPACE","\n    ",260],["T_PUBLIC","public",261],["T_WHITESPACE"," ",261],["T_STATIC","static",261],["T_WHITESPACE"," ",261],["T_FUNCTION","function",261],["T_WHITESPACE"," ",261],["T_STRING","decrypt",261],"(",["T_VARIABLE","$cipher",261],",",["T_WHITESPACE"," ",261],["T_VARIABLE","$key",261],",",["T_WHITESPACE"," ",261],["T_VARIABLE","$hmacSalt",261],["T_WHITESPACE"," ",261],"=",["T_WHITESPACE"," ",261],["T_STRING","null",261],")",["T_WHITESPACE","\n    ",261],"{",["T_WHITESPACE","\n        ",262],["T_STRING","self",263],["T_DOUBLE_COLON","::",263],["T_STRING","_checkKey",263],"(",["T_VARIABLE","$key",263],",",["T_WHITESPACE"," ",263],["T_CONSTANT_ENCAPSED_STRING","'decrypt()'",263],")",";",["T_WHITESPACE","\n        ",263],["T_IF","if",264],["T_WHITESPACE"," ",264],"(",["T_EMPTY","empty",264],"(",["T_VARIABLE","$cipher",264],")",")",["T_WHITESPACE"," ",264],"{",["T_WHITESPACE","\n            ",264],["T_THROW","throw",265],["T_WHITESPACE"," ",265],["T_NEW","new",265],["T_WHITESPACE"," ",265],["T_STRING","InvalidArgumentException",265],"(",["T_CONSTANT_ENCAPSED_STRING","'The data to decrypt cannot be empty.'",265],")",";",["T_WHITESPACE","\n        ",265],"}",["T_WHITESPACE","\n        ",266],["T_IF","if",267],["T_WHITESPACE"," ",267],"(",["T_VARIABLE","$hmacSalt",267],["T_WHITESPACE"," ",267],["T_IS_IDENTICAL","===",267],["T_WHITESPACE"," ",267],["T_STRING","null",267],")",["T_WHITESPACE"," ",267],"{",["T_WHITESPACE","\n            ",267],["T_VARIABLE","$hmacSalt",268],["T_WHITESPACE"," ",268],"=",["T_WHITESPACE"," ",268],["T_STATIC","static",268],["T_DOUBLE_COLON","::",268],["T_VARIABLE","$_salt",268],";",["T_WHITESPACE","\n        ",268],"}",["T_WHITESPACE","\n\n        ",269],["T_COMMENT","\/\/ Generate the encryption and hmac key.\n",271],["T_WHITESPACE","        ",272],["T_VARIABLE","$key",272],["T_WHITESPACE"," ",272],"=",["T_WHITESPACE"," ",272],["T_STRING","mb_substr",272],"(",["T_STRING","hash",272],"(",["T_CONSTANT_ENCAPSED_STRING","'sha256'",272],",",["T_WHITESPACE"," ",272],["T_VARIABLE","$key",272],["T_WHITESPACE"," ",272],".",["T_WHITESPACE"," ",272],["T_VARIABLE","$hmacSalt",272],")",",",["T_WHITESPACE"," ",272],["T_LNUMBER","0",272],",",["T_WHITESPACE"," ",272],["T_LNUMBER","32",272],",",["T_WHITESPACE"," ",272],["T_CONSTANT_ENCAPSED_STRING","'8bit'",272],")",";",["T_WHITESPACE","\n\n        ",272],["T_COMMENT","\/\/ Split out hmac for comparison\n",274],["T_WHITESPACE","        ",275],["T_VARIABLE","$macSize",275],["T_WHITESPACE"," ",275],"=",["T_WHITESPACE"," ",275],["T_LNUMBER","64",275],";",["T_WHITESPACE","\n        ",275],["T_VARIABLE","$hmac",276],["T_WHITESPACE"," ",276],"=",["T_WHITESPACE"," ",276],["T_STRING","mb_substr",276],"(",["T_VARIABLE","$cipher",276],",",["T_WHITESPACE"," ",276],["T_LNUMBER","0",276],",",["T_WHITESPACE"," ",276],["T_VARIABLE","$macSize",276],",",["T_WHITESPACE"," ",276],["T_CONSTANT_ENCAPSED_STRING","'8bit'",276],")",";",["T_WHITESPACE","\n        ",276],["T_VARIABLE","$cipher",277],["T_WHITESPACE"," ",277],"=",["T_WHITESPACE"," ",277],["T_STRING","mb_substr",277],"(",["T_VARIABLE","$cipher",277],",",["T_WHITESPACE"," ",277],["T_VARIABLE","$macSize",277],",",["T_WHITESPACE"," ",277],["T_STRING","null",277],",",["T_WHITESPACE"," ",277],["T_CONSTANT_ENCAPSED_STRING","'8bit'",277],")",";",["T_WHITESPACE","\n\n        ",277],["T_VARIABLE","$compareHmac",279],["T_WHITESPACE"," ",279],"=",["T_WHITESPACE"," ",279],["T_STRING","hash_hmac",279],"(",["T_CONSTANT_ENCAPSED_STRING","'sha256'",279],",",["T_WHITESPACE"," ",279],["T_VARIABLE","$cipher",279],",",["T_WHITESPACE"," ",279],["T_VARIABLE","$key",279],")",";",["T_WHITESPACE","\n        ",279],["T_IF","if",280],["T_WHITESPACE"," ",280],"(","!",["T_STATIC","static",280],["T_DOUBLE_COLON","::",280],["T_STRING","_constantEquals",280],"(",["T_VARIABLE","$hmac",280],",",["T_WHITESPACE"," ",280],["T_VARIABLE","$compareHmac",280],")",")",["T_WHITESPACE"," ",280],"{",["T_WHITESPACE","\n            ",280],["T_RETURN","return",281],["T_WHITESPACE"," ",281],["T_STRING","false",281],";",["T_WHITESPACE","\n        ",281],"}",["T_WHITESPACE","\n\n        ",282],["T_VARIABLE","$crypto",284],["T_WHITESPACE"," ",284],"=",["T_WHITESPACE"," ",284],["T_STATIC","static",284],["T_DOUBLE_COLON","::",284],["T_STRING","engine",284],"(",")",";",["T_WHITESPACE","\n\n        ",284],["T_RETURN","return",286],["T_WHITESPACE"," ",286],["T_VARIABLE","$crypto",286],["T_OBJECT_OPERATOR","->",286],["T_STRING","decrypt",286],"(",["T_VARIABLE","$cipher",286],",",["T_WHITESPACE"," ",286],["T_VARIABLE","$key",286],")",";",["T_WHITESPACE","\n    ",286],"}",["T_WHITESPACE","\n\n    ",287],["T_DOC_COMMENT","\/**\n     * A timing attack resistant comparison that prefers native PHP implementations.\n     *\n     * @param string $hmac The hmac from the ciphertext being decrypted.\n     * @param string $compare The comparison hmac.\n     * @return bool\n     * @see https:\/\/github.com\/resonantcore\/php-future\/\n     *\/",289],["T_WHITESPACE","\n    ",296],["T_PROTECTED","protected",297],["T_WHITESPACE"," ",297],["T_STATIC","static",297],["T_WHITESPACE"," ",297],["T_FUNCTION","function",297],["T_WHITESPACE"," ",297],["T_STRING","_constantEquals",297],"(",["T_VARIABLE","$hmac",297],",",["T_WHITESPACE"," ",297],["T_VARIABLE","$compare",297],")",["T_WHITESPACE","\n    ",297],"{",["T_WHITESPACE","\n        ",298],["T_IF","if",299],["T_WHITESPACE"," ",299],"(",["T_STRING","function_exists",299],"(",["T_CONSTANT_ENCAPSED_STRING","'hash_equals'",299],")",")",["T_WHITESPACE"," ",299],"{",["T_WHITESPACE","\n            ",299],["T_RETURN","return",300],["T_WHITESPACE"," ",300],["T_STRING","hash_equals",300],"(",["T_VARIABLE","$hmac",300],",",["T_WHITESPACE"," ",300],["T_VARIABLE","$compare",300],")",";",["T_WHITESPACE","\n        ",300],"}",["T_WHITESPACE","\n        ",301],["T_VARIABLE","$hashLength",302],["T_WHITESPACE"," ",302],"=",["T_WHITESPACE"," ",302],["T_STRING","mb_strlen",302],"(",["T_VARIABLE","$hmac",302],",",["T_WHITESPACE"," ",302],["T_CONSTANT_ENCAPSED_STRING","'8bit'",302],")",";",["T_WHITESPACE","\n        ",302],["T_VARIABLE","$compareLength",303],["T_WHITESPACE"," ",303],"=",["T_WHITESPACE"," ",303],["T_STRING","mb_strlen",303],"(",["T_VARIABLE","$compare",303],",",["T_WHITESPACE"," ",303],["T_CONSTANT_ENCAPSED_STRING","'8bit'",303],")",";",["T_WHITESPACE","\n        ",303],["T_IF","if",304],["T_WHITESPACE"," ",304],"(",["T_VARIABLE","$hashLength",304],["T_WHITESPACE"," ",304],["T_IS_NOT_IDENTICAL","!==",304],["T_WHITESPACE"," ",304],["T_VARIABLE","$compareLength",304],")",["T_WHITESPACE"," ",304],"{",["T_WHITESPACE","\n            ",304],["T_RETURN","return",305],["T_WHITESPACE"," ",305],["T_STRING","false",305],";",["T_WHITESPACE","\n        ",305],"}",["T_WHITESPACE","\n        ",306],["T_VARIABLE","$result",307],["T_WHITESPACE"," ",307],"=",["T_WHITESPACE"," ",307],["T_LNUMBER","0",307],";",["T_WHITESPACE","\n        ",307],["T_FOR","for",308],["T_WHITESPACE"," ",308],"(",["T_VARIABLE","$i",308],["T_WHITESPACE"," ",308],"=",["T_WHITESPACE"," ",308],["T_LNUMBER","0",308],";",["T_WHITESPACE"," ",308],["T_VARIABLE","$i",308],["T_WHITESPACE"," ",308],"<",["T_WHITESPACE"," ",308],["T_VARIABLE","$hashLength",308],";",["T_WHITESPACE"," ",308],["T_VARIABLE","$i",308],["T_INC","++",308],")",["T_WHITESPACE"," ",308],"{",["T_WHITESPACE","\n            ",308],["T_VARIABLE","$result",309],["T_WHITESPACE"," ",309],["T_OR_EQUAL","|=",309],["T_WHITESPACE"," ",309],"(",["T_STRING","ord",309],"(",["T_VARIABLE","$hmac",309],"[",["T_VARIABLE","$i",309],"]",")",["T_WHITESPACE"," ",309],"^",["T_WHITESPACE"," ",309],["T_STRING","ord",309],"(",["T_VARIABLE","$compare",309],"[",["T_VARIABLE","$i",309],"]",")",")",";",["T_WHITESPACE","\n        ",309],"}",["T_WHITESPACE","\n\n        ",310],["T_RETURN","return",312],["T_WHITESPACE"," ",312],["T_VARIABLE","$result",312],["T_WHITESPACE"," ",312],["T_IS_IDENTICAL","===",312],["T_WHITESPACE"," ",312],["T_LNUMBER","0",312],";",["T_WHITESPACE","\n    ",312],"}",["T_WHITESPACE","\n\n    ",313],["T_DOC_COMMENT","\/**\n     * Gets or sets the HMAC salt to be used for encryption\/decryption\n     * routines.\n     *\n     * @param string|null $salt The salt to use for encryption routines. If null returns current salt.\n     * @return string The currently configured salt\n     *\/",315],["T_WHITESPACE","\n    ",321],["T_PUBLIC","public",322],["T_WHITESPACE"," ",322],["T_STATIC","static",322],["T_WHITESPACE"," ",322],["T_FUNCTION","function",322],["T_WHITESPACE"," ",322],["T_STRING","salt",322],"(",["T_VARIABLE","$salt",322],["T_WHITESPACE"," ",322],"=",["T_WHITESPACE"," ",322],["T_STRING","null",322],")",["T_WHITESPACE","\n    ",322],"{",["T_WHITESPACE","\n        ",323],["T_IF","if",324],["T_WHITESPACE"," ",324],"(",["T_VARIABLE","$salt",324],["T_WHITESPACE"," ",324],["T_IS_IDENTICAL","===",324],["T_WHITESPACE"," ",324],["T_STRING","null",324],")",["T_WHITESPACE"," ",324],"{",["T_WHITESPACE","\n            ",324],["T_RETURN","return",325],["T_WHITESPACE"," ",325],["T_STATIC","static",325],["T_DOUBLE_COLON","::",325],["T_VARIABLE","$_salt",325],";",["T_WHITESPACE","\n        ",325],"}",["T_WHITESPACE","\n\n        ",326],["T_RETURN","return",328],["T_WHITESPACE"," ",328],["T_STATIC","static",328],["T_DOUBLE_COLON","::",328],["T_VARIABLE","$_salt",328],["T_WHITESPACE"," ",328],"=",["T_WHITESPACE"," ",328],["T_STRING_CAST","(string)",328],["T_VARIABLE","$salt",328],";",["T_WHITESPACE","\n    ",328],"}",["T_WHITESPACE","\n",329],"}",["T_WHITESPACE","\n",330]]