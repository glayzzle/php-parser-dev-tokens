[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Datasource",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","ArrayAccess",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","JsonSerializable",18],";",["T_WHITESPACE","\n\n",18],["T_DOC_COMMENT","\/**\n * Describes the methods that any class representing a data storage should\n * comply with.\n *\n * @property mixed $id Alias for commonly used primary key.\n *\/",20],["T_WHITESPACE","\n",25],["T_INTERFACE","interface",26],["T_WHITESPACE"," ",26],["T_STRING","EntityInterface",26],["T_WHITESPACE"," ",26],["T_EXTENDS","extends",26],["T_WHITESPACE"," ",26],["T_STRING","ArrayAccess",26],",",["T_WHITESPACE"," ",26],["T_STRING","JsonSerializable",26],["T_WHITESPACE","\n",26],"{",["T_WHITESPACE","\n\n    ",27],["T_DOC_COMMENT","\/**\n     * Sets one or multiple properties to the specified value\n     *\n     * @param string|array $property the name of property to set or a list of\n     * properties with their respective values\n     * @param mixed $value The value to set to the property or an array if the\n     * first argument is also an array, in which case will be treated as $options\n     * @param array $options options to be used for setting the property. Allowed option\n     * keys are `setter` and `guard`\n     * @return \\Cake\\Datasource\\EntityInterface\n     *\/",29],["T_WHITESPACE","\n    ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","set",40],"(",["T_VARIABLE","$property",40],",",["T_WHITESPACE"," ",40],["T_VARIABLE","$value",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_STRING","null",40],",",["T_WHITESPACE"," ",40],["T_ARRAY","array",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$options",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],"[","]",")",";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * Returns the value of a property by name\n     *\n     * @param string $property the name of the property to retrieve\n     * @return mixed\n     *\/",42],["T_WHITESPACE","\n    ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],"&",["T_STRING","get",48],"(",["T_VARIABLE","$property",48],")",";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Returns whether this entity contains a property named $property\n     * regardless of if it is empty.\n     *\n     * @param string $property The property to check.\n     * @return bool\n     *\/",50],["T_WHITESPACE","\n    ",56],["T_PUBLIC","public",57],["T_WHITESPACE"," ",57],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","has",57],"(",["T_VARIABLE","$property",57],")",";",["T_WHITESPACE","\n\n    ",57],["T_DOC_COMMENT","\/**\n     * Removes a property or list of properties from this entity\n     *\n     * @param string|array $property The property to unset.\n     * @return \\Cake\\ORM\\\n     *\/",59],["T_WHITESPACE","\n    ",64],["T_PUBLIC","public",65],["T_WHITESPACE"," ",65],["T_FUNCTION","function",65],["T_WHITESPACE"," ",65],["T_STRING","unsetProperty",65],"(",["T_VARIABLE","$property",65],")",";",["T_WHITESPACE","\n\n    ",65],["T_DOC_COMMENT","\/**\n     * Get\/Set the hidden properties on this entity.\n     *\n     * If the properties argument is null, the currently hidden properties\n     * will be returned. Otherwise the hidden properties will be set.\n     *\n     * @param null|array $properties Either an array of properties to hide or null to get properties\n     * @return array|\\Cake\\Datasource\\EntityInterface\n     *\/",67],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","hiddenProperties",76],"(",["T_VARIABLE","$properties",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_STRING","null",76],")",";",["T_WHITESPACE","\n\n    ",76],["T_DOC_COMMENT","\/**\n     * Get\/Set the virtual properties on this entity.\n     *\n     * If the properties argument is null, the currently virtual properties\n     * will be returned. Otherwise the virtual properties will be set.\n     *\n     * @param null|array $properties Either an array of properties to treat as virtual or null to get properties\n     * @return array|\\Cake\\Datasource\\EntityInterface\n     *\/",78],["T_WHITESPACE","\n    ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","virtualProperties",87],"(",["T_VARIABLE","$properties",87],["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],["T_STRING","null",87],")",";",["T_WHITESPACE","\n\n    ",87],["T_DOC_COMMENT","\/**\n     * Get the list of visible properties.\n     *\n     * @return array A list of properties that are 'visible' in all representations.\n     *\/",89],["T_WHITESPACE","\n    ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","visibleProperties",94],"(",")",";",["T_WHITESPACE","\n\n    ",94],["T_DOC_COMMENT","\/**\n     * Returns an array with all the visible properties set in this entity.\n     *\n     * *Note* hidden properties are not visible, and will not be output\n     * by toArray().\n     *\n     * @return array\n     *\/",96],["T_WHITESPACE","\n    ",103],["T_PUBLIC","public",104],["T_WHITESPACE"," ",104],["T_FUNCTION","function",104],["T_WHITESPACE"," ",104],["T_STRING","toArray",104],"(",")",";",["T_WHITESPACE","\n\n    ",104],["T_DOC_COMMENT","\/**\n     * Returns an array with the requested properties\n     * stored in this entity, indexed by property name\n     *\n     * @param array $properties list of properties to be returned\n     * @param bool $onlyDirty Return the requested property only if it is dirty\n     * @return array\n     *\/",106],["T_WHITESPACE","\n    ",113],["T_PUBLIC","public",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","extract",114],"(",["T_ARRAY","array",114],["T_WHITESPACE"," ",114],["T_VARIABLE","$properties",114],",",["T_WHITESPACE"," ",114],["T_VARIABLE","$onlyDirty",114],["T_WHITESPACE"," ",114],"=",["T_WHITESPACE"," ",114],["T_STRING","false",114],")",";",["T_WHITESPACE","\n\n    ",114],["T_DOC_COMMENT","\/**\n     * Sets the dirty status of a single property. If called with no second\n     * argument, it will return whether the property was modified or not\n     * after the object creation.\n     *\n     * When called with no arguments it will return whether or not there are any\n     * dirty property in the entity\n     *\n     * @param string|null $property the field to set or check status for\n     * @param null|bool $isDirty true means the property was changed, false means\n     * it was not changed and null will make the function return current state\n     * for that property\n     * @return bool whether the property was changed or not\n     *\/",116],["T_WHITESPACE","\n    ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","dirty",130],"(",["T_VARIABLE","$property",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_STRING","null",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$isDirty",130],["T_WHITESPACE"," ",130],"=",["T_WHITESPACE"," ",130],["T_STRING","null",130],")",";",["T_WHITESPACE","\n\n    ",130],["T_DOC_COMMENT","\/**\n     * Sets the entire entity as clean, which means that it will appear as\n     * no properties being modified or added at all. This is an useful call\n     * for an initial object hydration\n     *\n     * @return void\n     *\/",132],["T_WHITESPACE","\n    ",138],["T_PUBLIC","public",139],["T_WHITESPACE"," ",139],["T_FUNCTION","function",139],["T_WHITESPACE"," ",139],["T_STRING","clean",139],"(",")",";",["T_WHITESPACE","\n\n    ",139],["T_DOC_COMMENT","\/**\n     * Returns whether or not this entity has already been persisted.\n     * This method can return null in the case there is no prior information on\n     * the status of this entity.\n     *\n     * If called with a boolean, this method will set the status of this instance.\n     * Using `true` means that the instance has not been persisted in the database, `false`\n     * that it already is.\n     *\n     * @param bool|null $new Indicate whether or not this instance has been persisted.\n     * @return bool If it is known whether the entity was already persisted\n     * null otherwise\n     *\/",141],["T_WHITESPACE","\n    ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","isNew",154],"(",["T_VARIABLE","$new",154],["T_WHITESPACE"," ",154],"=",["T_WHITESPACE"," ",154],["T_STRING","null",154],")",";",["T_WHITESPACE","\n\n    ",154],["T_DOC_COMMENT","\/**\n     * Sets the error messages for a field or a list of fields. When called\n     * without the second argument it returns the validation\n     * errors for the specified fields. If called with no arguments it returns\n     * all the validation error messages stored in this entity.\n     *\n     * When used as a setter, this method will return this entity instance for method\n     * chaining.\n     *\n     * @param string|array|null $field The field to get errors for.\n     * @param string|array|null $errors The errors to be set for $field\n     * @param bool $overwrite Whether or not to overwrite pre-existing errors for $field\n     * @return array|\\Cake\\Datasource\\EntityInterface\n     *\/",156],["T_WHITESPACE","\n    ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","errors",170],"(",["T_VARIABLE","$field",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","null",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$errors",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","null",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$overwrite",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","false",170],")",";",["T_WHITESPACE","\n\n    ",170],["T_DOC_COMMENT","\/**\n     * Stores whether or not a property value can be changed or set in this entity.\n     * The special property `*` can also be marked as accessible or protected, meaning\n     * that any other property specified before will take its value. For example\n     * `$entity->accessible('*', true)`  means that any property not specified already\n     * will be accessible by default.\n     *\n     * @param string|array $property Either a single or list of properties to change its accessibility.\n     * @param bool|null $set true marks the property as accessible, false will\n     * mark it as protected.\n     * @return \\Cake\\Datasource\\EntityInterface|bool\n     *\/",172],["T_WHITESPACE","\n    ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","accessible",184],"(",["T_VARIABLE","$property",184],",",["T_WHITESPACE"," ",184],["T_VARIABLE","$set",184],["T_WHITESPACE"," ",184],"=",["T_WHITESPACE"," ",184],["T_STRING","null",184],")",";",["T_WHITESPACE","\n",184],"}",["T_WHITESPACE","\n",185]]