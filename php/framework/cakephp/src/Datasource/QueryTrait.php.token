[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Datasource",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","BadMethodCallException",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Collection",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Iterator",18],["T_NS_SEPARATOR","\\",18],["T_STRING","MapReduce",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Datasource",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Exception",19],["T_NS_SEPARATOR","\\",19],["T_STRING","RecordNotFoundException",19],";",["T_WHITESPACE","\n\n",19],["T_DOC_COMMENT","\/**\n * Contains the characteristics for an object that is attached to a repository and\n * can retrieve results based on any criteria.\n *\/",21],["T_WHITESPACE","\n",24],["T_TRAIT","trait",25],["T_WHITESPACE"," ",25],["T_STRING","QueryTrait",25],["T_WHITESPACE","\n",25],"{",["T_WHITESPACE","\n\n    ",26],["T_DOC_COMMENT","\/**\n     * Instance of a table object this query is bound to\n     *\n     * @var \\Cake\\Datasource\\RepositoryInterface\n     *\/",28],["T_WHITESPACE","\n    ",32],["T_PROTECTED","protected",33],["T_WHITESPACE"," ",33],["T_VARIABLE","$_repository",33],";",["T_WHITESPACE","\n\n    ",33],["T_DOC_COMMENT","\/**\n     * A ResultSet.\n     *\n     * When set, query execution will be bypassed.\n     *\n     * @var \\Cake\\Datasource\\ResultSetInterface\n     * @see \\Cake\\Datasource\\QueryTrait::setResult()\n     *\/",35],["T_WHITESPACE","\n    ",42],["T_PROTECTED","protected",43],["T_WHITESPACE"," ",43],["T_VARIABLE","$_results",43],";",["T_WHITESPACE","\n\n    ",43],["T_DOC_COMMENT","\/**\n     * List of map-reduce routines that should be applied over the query\n     * result\n     *\n     * @var array\n     *\/",45],["T_WHITESPACE","\n    ",50],["T_PROTECTED","protected",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$_mapReduce",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],"[","]",";",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * List of formatter classes or callbacks that will post-process the\n     * results when fetched\n     *\n     * @var array\n     *\/",53],["T_WHITESPACE","\n    ",58],["T_PROTECTED","protected",59],["T_WHITESPACE"," ",59],["T_VARIABLE","$_formatters",59],["T_WHITESPACE"," ",59],"=",["T_WHITESPACE"," ",59],"[","]",";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * A query cacher instance if this query has caching enabled.\n     *\n     * @var \\Cake\\Datasource\\QueryCacher\n     *\/",61],["T_WHITESPACE","\n    ",65],["T_PROTECTED","protected",66],["T_WHITESPACE"," ",66],["T_VARIABLE","$_cache",66],";",["T_WHITESPACE","\n\n    ",66],["T_DOC_COMMENT","\/**\n     * Holds any custom options passed using applyOptions that could not be processed\n     * by any method in this class.\n     *\n     * @var array\n     *\/",68],["T_WHITESPACE","\n    ",73],["T_PROTECTED","protected",74],["T_WHITESPACE"," ",74],["T_VARIABLE","$_options",74],["T_WHITESPACE"," ",74],"=",["T_WHITESPACE"," ",74],"[","]",";",["T_WHITESPACE","\n\n    ",74],["T_DOC_COMMENT","\/**\n     * Whether the query is standalone or the product of an eager load operation.\n     *\n     * @var bool\n     *\/",76],["T_WHITESPACE","\n    ",80],["T_PROTECTED","protected",81],["T_WHITESPACE"," ",81],["T_VARIABLE","$_eagerLoaded",81],["T_WHITESPACE"," ",81],"=",["T_WHITESPACE"," ",81],["T_STRING","false",81],";",["T_WHITESPACE","\n\n    ",81],["T_DOC_COMMENT","\/**\n     * Returns the default table object that will be used by this query,\n     * that is, the table that will appear in the from clause.\n     *\n     * When called with a Table argument, the default table object will be set\n     * and this query object will be returned for chaining.\n     *\n     * @param \\Cake\\Datasource\\RepositoryInterface|null $table The default table object to use\n     * @return \\Cake\\Datasource\\RepositoryInterface|$this\n     *\/",83],["T_WHITESPACE","\n    ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","repository",93],"(",["T_STRING","RepositoryInterface",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$table",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_STRING","null",93],")",["T_WHITESPACE","\n    ",93],"{",["T_WHITESPACE","\n        ",94],["T_IF","if",95],["T_WHITESPACE"," ",95],"(",["T_VARIABLE","$table",95],["T_WHITESPACE"," ",95],["T_IS_IDENTICAL","===",95],["T_WHITESPACE"," ",95],["T_STRING","null",95],")",["T_WHITESPACE"," ",95],"{",["T_WHITESPACE","\n            ",95],["T_RETURN","return",96],["T_WHITESPACE"," ",96],["T_VARIABLE","$this",96],["T_OBJECT_OPERATOR","->",96],["T_STRING","_repository",96],";",["T_WHITESPACE","\n        ",96],"}",["T_WHITESPACE","\n        ",97],["T_VARIABLE","$this",98],["T_OBJECT_OPERATOR","->",98],["T_STRING","_repository",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_VARIABLE","$table",98],";",["T_WHITESPACE","\n\n        ",98],["T_RETURN","return",100],["T_WHITESPACE"," ",100],["T_VARIABLE","$this",100],";",["T_WHITESPACE","\n    ",100],"}",["T_WHITESPACE","\n\n    ",101],["T_DOC_COMMENT","\/**\n     * Set the result set for a query.\n     *\n     * Setting the resultset of a query will make execute() a no-op. Instead\n     * of executing the SQL query and fetching results, the ResultSet provided to this\n     * method will be returned.\n     *\n     * This method is most useful when combined with results stored in a persistent cache.\n     *\n     * @param \\Cake\\Datasource\\ResultSetInterface $results The results this query should return.\n     * @return $this The query instance.\n     *\/",103],["T_WHITESPACE","\n    ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","setResult",115],"(",["T_VARIABLE","$results",115],")",["T_WHITESPACE","\n    ",115],"{",["T_WHITESPACE","\n        ",116],["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","_results",117],["T_WHITESPACE"," ",117],"=",["T_WHITESPACE"," ",117],["T_VARIABLE","$results",117],";",["T_WHITESPACE","\n\n        ",117],["T_RETURN","return",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$this",119],";",["T_WHITESPACE","\n    ",119],"}",["T_WHITESPACE","\n\n    ",120],["T_DOC_COMMENT","\/**\n     * Executes this query and returns a results iterator. This function is required\n     * for implementing the IteratorAggregate interface and allows the query to be\n     * iterated without having to call execute() manually, thus making it look like\n     * a result set instead of the query itself.\n     *\n     * @return \\Iterator\n     *\/",122],["T_WHITESPACE","\n    ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","getIterator",130],"(",")",["T_WHITESPACE","\n    ",130],"{",["T_WHITESPACE","\n        ",131],["T_RETURN","return",132],["T_WHITESPACE"," ",132],["T_VARIABLE","$this",132],["T_OBJECT_OPERATOR","->",132],["T_STRING","all",132],"(",")",";",["T_WHITESPACE","\n    ",132],"}",["T_WHITESPACE","\n\n    ",133],["T_DOC_COMMENT","\/**\n     * Enable result caching for this query.\n     *\n     * If a query has caching enabled, it will do the following when executed:\n     *\n     * - Check the cache for $key. If there are results no SQL will be executed.\n     *   Instead the cached results will be returned.\n     * - When the cached data is stale\/missing the result set will be cached as the query\n     *   is executed.\n     *\n     * ### Usage\n     *\n     * ```\n     * \/\/ Simple string key + config\n     * $query->cache('my_key', 'db_results');\n     *\n     * \/\/ Function to generate key.\n     * $query->cache(function ($q) {\n     *   $key = serialize($q->clause('select'));\n     *   $key .= serialize($q->clause('where'));\n     *   return md5($key);\n     * });\n     *\n     * \/\/ Using a pre-built cache engine.\n     * $query->cache('my_key', $engine);\n     *\n     * \/\/ Disable caching\n     * $query->cache(false);\n     * ```\n     *\n     * @param false|string|\\Closure $key Either the cache key or a function to generate the cache key.\n     *   When using a function, this query instance will be supplied as an argument.\n     * @param string|\\Cake\\Cache\\CacheEngine $config Either the name of the cache config to use, or\n     *   a cache config instance.\n     * @return $this This instance\n     *\/",135],["T_WHITESPACE","\n    ",170],["T_PUBLIC","public",171],["T_WHITESPACE"," ",171],["T_FUNCTION","function",171],["T_WHITESPACE"," ",171],["T_STRING","cache",171],"(",["T_VARIABLE","$key",171],",",["T_WHITESPACE"," ",171],["T_VARIABLE","$config",171],["T_WHITESPACE"," ",171],"=",["T_WHITESPACE"," ",171],["T_CONSTANT_ENCAPSED_STRING","'default'",171],")",["T_WHITESPACE","\n    ",171],"{",["T_WHITESPACE","\n        ",172],["T_IF","if",173],["T_WHITESPACE"," ",173],"(",["T_VARIABLE","$key",173],["T_WHITESPACE"," ",173],["T_IS_IDENTICAL","===",173],["T_WHITESPACE"," ",173],["T_STRING","false",173],")",["T_WHITESPACE"," ",173],"{",["T_WHITESPACE","\n            ",173],["T_VARIABLE","$this",174],["T_OBJECT_OPERATOR","->",174],["T_STRING","_cache",174],["T_WHITESPACE"," ",174],"=",["T_WHITESPACE"," ",174],["T_STRING","null",174],";",["T_WHITESPACE","\n\n            ",174],["T_RETURN","return",176],["T_WHITESPACE"," ",176],["T_VARIABLE","$this",176],";",["T_WHITESPACE","\n        ",176],"}",["T_WHITESPACE","\n        ",177],["T_VARIABLE","$this",178],["T_OBJECT_OPERATOR","->",178],["T_STRING","_cache",178],["T_WHITESPACE"," ",178],"=",["T_WHITESPACE"," ",178],["T_NEW","new",178],["T_WHITESPACE"," ",178],["T_STRING","QueryCacher",178],"(",["T_VARIABLE","$key",178],",",["T_WHITESPACE"," ",178],["T_VARIABLE","$config",178],")",";",["T_WHITESPACE","\n\n        ",178],["T_RETURN","return",180],["T_WHITESPACE"," ",180],["T_VARIABLE","$this",180],";",["T_WHITESPACE","\n    ",180],"}",["T_WHITESPACE","\n\n    ",181],["T_DOC_COMMENT","\/**\n     * Sets the query instance to be an eager loaded query. If no argument is\n     * passed, the current configured query `_eagerLoaded` value is returned.\n     *\n     * @param bool|null $value Whether or not to eager load.\n     * @return $this|\\Cake\\ORM\\Query\n     *\/",183],["T_WHITESPACE","\n    ",189],["T_PUBLIC","public",190],["T_WHITESPACE"," ",190],["T_FUNCTION","function",190],["T_WHITESPACE"," ",190],["T_STRING","eagerLoaded",190],"(",["T_VARIABLE","$value",190],["T_WHITESPACE"," ",190],"=",["T_WHITESPACE"," ",190],["T_STRING","null",190],")",["T_WHITESPACE","\n    ",190],"{",["T_WHITESPACE","\n        ",191],["T_IF","if",192],["T_WHITESPACE"," ",192],"(",["T_VARIABLE","$value",192],["T_WHITESPACE"," ",192],["T_IS_IDENTICAL","===",192],["T_WHITESPACE"," ",192],["T_STRING","null",192],")",["T_WHITESPACE"," ",192],"{",["T_WHITESPACE","\n            ",192],["T_RETURN","return",193],["T_WHITESPACE"," ",193],["T_VARIABLE","$this",193],["T_OBJECT_OPERATOR","->",193],["T_STRING","_eagerLoaded",193],";",["T_WHITESPACE","\n        ",193],"}",["T_WHITESPACE","\n        ",194],["T_VARIABLE","$this",195],["T_OBJECT_OPERATOR","->",195],["T_STRING","_eagerLoaded",195],["T_WHITESPACE"," ",195],"=",["T_WHITESPACE"," ",195],["T_VARIABLE","$value",195],";",["T_WHITESPACE","\n\n        ",195],["T_RETURN","return",197],["T_WHITESPACE"," ",197],["T_VARIABLE","$this",197],";",["T_WHITESPACE","\n    ",197],"}",["T_WHITESPACE","\n\n    ",198],["T_DOC_COMMENT","\/**\n     * Returns a key => value array representing a single aliased field\n     * that can be passed directly to the select() method.\n     * The key will contain the alias and the value the actual field name.\n     *\n     * If the field is already aliased, then it will not be changed.\n     * If no $alias is passed, the default table for this query will be used.\n     *\n     * @param string $field The field to alias\n     * @param string|null $alias the alias used to prefix the field\n     * @return array\n     *\/",200],["T_WHITESPACE","\n    ",211],["T_PUBLIC","public",212],["T_WHITESPACE"," ",212],["T_FUNCTION","function",212],["T_WHITESPACE"," ",212],["T_STRING","aliasField",212],"(",["T_VARIABLE","$field",212],",",["T_WHITESPACE"," ",212],["T_VARIABLE","$alias",212],["T_WHITESPACE"," ",212],"=",["T_WHITESPACE"," ",212],["T_STRING","null",212],")",["T_WHITESPACE","\n    ",212],"{",["T_WHITESPACE","\n        ",213],["T_VARIABLE","$namespaced",214],["T_WHITESPACE"," ",214],"=",["T_WHITESPACE"," ",214],["T_STRING","strpos",214],"(",["T_VARIABLE","$field",214],",",["T_WHITESPACE"," ",214],["T_CONSTANT_ENCAPSED_STRING","'.'",214],")",["T_WHITESPACE"," ",214],["T_IS_NOT_IDENTICAL","!==",214],["T_WHITESPACE"," ",214],["T_STRING","false",214],";",["T_WHITESPACE","\n        ",214],["T_VARIABLE","$aliasedField",215],["T_WHITESPACE"," ",215],"=",["T_WHITESPACE"," ",215],["T_VARIABLE","$field",215],";",["T_WHITESPACE","\n\n        ",215],["T_IF","if",217],["T_WHITESPACE"," ",217],"(",["T_VARIABLE","$namespaced",217],")",["T_WHITESPACE"," ",217],"{",["T_WHITESPACE","\n            ",217],["T_LIST","list",218],"(",["T_VARIABLE","$alias",218],",",["T_WHITESPACE"," ",218],["T_VARIABLE","$field",218],")",["T_WHITESPACE"," ",218],"=",["T_WHITESPACE"," ",218],["T_STRING","explode",218],"(",["T_CONSTANT_ENCAPSED_STRING","'.'",218],",",["T_WHITESPACE"," ",218],["T_VARIABLE","$field",218],")",";",["T_WHITESPACE","\n        ",218],"}",["T_WHITESPACE","\n\n        ",219],["T_IF","if",221],["T_WHITESPACE"," ",221],"(","!",["T_VARIABLE","$alias",221],")",["T_WHITESPACE"," ",221],"{",["T_WHITESPACE","\n            ",221],["T_VARIABLE","$alias",222],["T_WHITESPACE"," ",222],"=",["T_WHITESPACE"," ",222],["T_VARIABLE","$this",222],["T_OBJECT_OPERATOR","->",222],["T_STRING","repository",222],"(",")",["T_OBJECT_OPERATOR","->",222],["T_STRING","alias",222],"(",")",";",["T_WHITESPACE","\n        ",222],"}",["T_WHITESPACE","\n\n        ",223],["T_VARIABLE","$key",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],["T_STRING","sprintf",225],"(",["T_CONSTANT_ENCAPSED_STRING","'%s__%s'",225],",",["T_WHITESPACE"," ",225],["T_VARIABLE","$alias",225],",",["T_WHITESPACE"," ",225],["T_VARIABLE","$field",225],")",";",["T_WHITESPACE","\n        ",225],["T_IF","if",226],["T_WHITESPACE"," ",226],"(","!",["T_VARIABLE","$namespaced",226],")",["T_WHITESPACE"," ",226],"{",["T_WHITESPACE","\n            ",226],["T_VARIABLE","$aliasedField",227],["T_WHITESPACE"," ",227],"=",["T_WHITESPACE"," ",227],["T_VARIABLE","$alias",227],["T_WHITESPACE"," ",227],".",["T_WHITESPACE"," ",227],["T_CONSTANT_ENCAPSED_STRING","'.'",227],["T_WHITESPACE"," ",227],".",["T_WHITESPACE"," ",227],["T_VARIABLE","$field",227],";",["T_WHITESPACE","\n        ",227],"}",["T_WHITESPACE","\n\n        ",228],["T_RETURN","return",230],["T_WHITESPACE"," ",230],"[",["T_VARIABLE","$key",230],["T_WHITESPACE"," ",230],["T_DOUBLE_ARROW","=>",230],["T_WHITESPACE"," ",230],["T_VARIABLE","$aliasedField",230],"]",";",["T_WHITESPACE","\n    ",230],"}",["T_WHITESPACE","\n\n    ",231],["T_DOC_COMMENT","\/**\n     * Runs `aliasField()` for each field in the provided list and returns\n     * the result under a single array.\n     *\n     * @param array $fields The fields to alias\n     * @param string|null $defaultAlias The default alias\n     * @return array\n     *\/",233],["T_WHITESPACE","\n    ",240],["T_PUBLIC","public",241],["T_WHITESPACE"," ",241],["T_FUNCTION","function",241],["T_WHITESPACE"," ",241],["T_STRING","aliasFields",241],"(",["T_VARIABLE","$fields",241],",",["T_WHITESPACE"," ",241],["T_VARIABLE","$defaultAlias",241],["T_WHITESPACE"," ",241],"=",["T_WHITESPACE"," ",241],["T_STRING","null",241],")",["T_WHITESPACE","\n    ",241],"{",["T_WHITESPACE","\n        ",242],["T_VARIABLE","$aliased",243],["T_WHITESPACE"," ",243],"=",["T_WHITESPACE"," ",243],"[","]",";",["T_WHITESPACE","\n        ",243],["T_FOREACH","foreach",244],["T_WHITESPACE"," ",244],"(",["T_VARIABLE","$fields",244],["T_WHITESPACE"," ",244],["T_AS","as",244],["T_WHITESPACE"," ",244],["T_VARIABLE","$alias",244],["T_WHITESPACE"," ",244],["T_DOUBLE_ARROW","=>",244],["T_WHITESPACE"," ",244],["T_VARIABLE","$field",244],")",["T_WHITESPACE"," ",244],"{",["T_WHITESPACE","\n            ",244],["T_IF","if",245],["T_WHITESPACE"," ",245],"(",["T_STRING","is_numeric",245],"(",["T_VARIABLE","$alias",245],")",["T_WHITESPACE"," ",245],["T_BOOLEAN_AND","&&",245],["T_WHITESPACE"," ",245],["T_STRING","is_string",245],"(",["T_VARIABLE","$field",245],")",")",["T_WHITESPACE"," ",245],"{",["T_WHITESPACE","\n                ",245],["T_VARIABLE","$aliased",246],["T_WHITESPACE"," ",246],["T_PLUS_EQUAL","+=",246],["T_WHITESPACE"," ",246],["T_VARIABLE","$this",246],["T_OBJECT_OPERATOR","->",246],["T_STRING","aliasField",246],"(",["T_VARIABLE","$field",246],",",["T_WHITESPACE"," ",246],["T_VARIABLE","$defaultAlias",246],")",";",["T_WHITESPACE","\n                ",246],["T_CONTINUE","continue",247],";",["T_WHITESPACE","\n            ",247],"}",["T_WHITESPACE","\n            ",248],["T_VARIABLE","$aliased",249],"[",["T_VARIABLE","$alias",249],"]",["T_WHITESPACE"," ",249],"=",["T_WHITESPACE"," ",249],["T_VARIABLE","$field",249],";",["T_WHITESPACE","\n        ",249],"}",["T_WHITESPACE","\n\n        ",250],["T_RETURN","return",252],["T_WHITESPACE"," ",252],["T_VARIABLE","$aliased",252],";",["T_WHITESPACE","\n    ",252],"}",["T_WHITESPACE","\n\n    ",253],["T_DOC_COMMENT","\/**\n     * Fetch the results for this query.\n     *\n     * Will return either the results set through setResult(), or execute this query\n     * and return the ResultSetDecorator object ready for streaming of results.\n     *\n     * ResultSetDecorator is a traversable object that implements the methods found\n     * on Cake\\Collection\\Collection.\n     *\n     * @return \\Cake\\Datasource\\ResultSetInterface\n     *\/",255],["T_WHITESPACE","\n    ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","all",266],"(",")",["T_WHITESPACE","\n    ",266],"{",["T_WHITESPACE","\n        ",267],["T_IF","if",268],["T_WHITESPACE"," ",268],"(",["T_ISSET","isset",268],"(",["T_VARIABLE","$this",268],["T_OBJECT_OPERATOR","->",268],["T_STRING","_results",268],")",")",["T_WHITESPACE"," ",268],"{",["T_WHITESPACE","\n            ",268],["T_RETURN","return",269],["T_WHITESPACE"," ",269],["T_VARIABLE","$this",269],["T_OBJECT_OPERATOR","->",269],["T_STRING","_results",269],";",["T_WHITESPACE","\n        ",269],"}",["T_WHITESPACE","\n\n        ",270],["T_IF","if",272],["T_WHITESPACE"," ",272],"(",["T_VARIABLE","$this",272],["T_OBJECT_OPERATOR","->",272],["T_STRING","_cache",272],")",["T_WHITESPACE"," ",272],"{",["T_WHITESPACE","\n            ",272],["T_VARIABLE","$results",273],["T_WHITESPACE"," ",273],"=",["T_WHITESPACE"," ",273],["T_VARIABLE","$this",273],["T_OBJECT_OPERATOR","->",273],["T_STRING","_cache",273],["T_OBJECT_OPERATOR","->",273],["T_STRING","fetch",273],"(",["T_VARIABLE","$this",273],")",";",["T_WHITESPACE","\n        ",273],"}",["T_WHITESPACE","\n        ",274],["T_IF","if",275],["T_WHITESPACE"," ",275],"(","!",["T_ISSET","isset",275],"(",["T_VARIABLE","$results",275],")",")",["T_WHITESPACE"," ",275],"{",["T_WHITESPACE","\n            ",275],["T_VARIABLE","$results",276],["T_WHITESPACE"," ",276],"=",["T_WHITESPACE"," ",276],["T_VARIABLE","$this",276],["T_OBJECT_OPERATOR","->",276],["T_STRING","_decorateResults",276],"(",["T_VARIABLE","$this",276],["T_OBJECT_OPERATOR","->",276],["T_STRING","_execute",276],"(",")",")",";",["T_WHITESPACE","\n            ",276],["T_IF","if",277],["T_WHITESPACE"," ",277],"(",["T_VARIABLE","$this",277],["T_OBJECT_OPERATOR","->",277],["T_STRING","_cache",277],")",["T_WHITESPACE"," ",277],"{",["T_WHITESPACE","\n                ",277],["T_VARIABLE","$this",278],["T_OBJECT_OPERATOR","->",278],["T_STRING","_cache",278],["T_OBJECT_OPERATOR","->",278],["T_STRING","store",278],"(",["T_VARIABLE","$this",278],",",["T_WHITESPACE"," ",278],["T_VARIABLE","$results",278],")",";",["T_WHITESPACE","\n            ",278],"}",["T_WHITESPACE","\n        ",279],"}",["T_WHITESPACE","\n        ",280],["T_VARIABLE","$this",281],["T_OBJECT_OPERATOR","->",281],["T_STRING","_results",281],["T_WHITESPACE"," ",281],"=",["T_WHITESPACE"," ",281],["T_VARIABLE","$results",281],";",["T_WHITESPACE","\n\n        ",281],["T_RETURN","return",283],["T_WHITESPACE"," ",283],["T_VARIABLE","$this",283],["T_OBJECT_OPERATOR","->",283],["T_STRING","_results",283],";",["T_WHITESPACE","\n    ",283],"}",["T_WHITESPACE","\n\n    ",284],["T_DOC_COMMENT","\/**\n     * Returns an array representation of the results after executing the query.\n     *\n     * @return array\n     *\/",286],["T_WHITESPACE","\n    ",290],["T_PUBLIC","public",291],["T_WHITESPACE"," ",291],["T_FUNCTION","function",291],["T_WHITESPACE"," ",291],["T_STRING","toArray",291],"(",")",["T_WHITESPACE","\n    ",291],"{",["T_WHITESPACE","\n        ",292],["T_RETURN","return",293],["T_WHITESPACE"," ",293],["T_VARIABLE","$this",293],["T_OBJECT_OPERATOR","->",293],["T_STRING","all",293],"(",")",["T_OBJECT_OPERATOR","->",293],["T_STRING","toArray",293],"(",")",";",["T_WHITESPACE","\n    ",293],"}",["T_WHITESPACE","\n\n    ",294],["T_DOC_COMMENT","\/**\n     * Register a new MapReduce routine to be executed on top of the database results\n     * Both the mapper and caller callable should be invokable objects.\n     *\n     * The MapReduce routing will only be run when the query is executed and the first\n     * result is attempted to be fetched.\n     *\n     * If the first argument is set to null, it will return the list of previously\n     * registered map reduce routines.\n     *\n     * If the third argument is set to true, it will erase previous map reducers\n     * and replace it with the arguments passed.\n     *\n     * @param callable|null $mapper The mapper callable.\n     * @param callable|null $reducer The reducing function.\n     * @param bool $overwrite Set to true to overwrite existing map + reduce functions.\n     * @return $this|array\n     * @see \\Cake\\Collection\\Iterator\\MapReduce for details on how to use emit data to the map reducer.\n     *\/",296],["T_WHITESPACE","\n    ",314],["T_PUBLIC","public",315],["T_WHITESPACE"," ",315],["T_FUNCTION","function",315],["T_WHITESPACE"," ",315],["T_STRING","mapReduce",315],"(",["T_CALLABLE","callable",315],["T_WHITESPACE"," ",315],["T_VARIABLE","$mapper",315],["T_WHITESPACE"," ",315],"=",["T_WHITESPACE"," ",315],["T_STRING","null",315],",",["T_WHITESPACE"," ",315],["T_CALLABLE","callable",315],["T_WHITESPACE"," ",315],["T_VARIABLE","$reducer",315],["T_WHITESPACE"," ",315],"=",["T_WHITESPACE"," ",315],["T_STRING","null",315],",",["T_WHITESPACE"," ",315],["T_VARIABLE","$overwrite",315],["T_WHITESPACE"," ",315],"=",["T_WHITESPACE"," ",315],["T_STRING","false",315],")",["T_WHITESPACE","\n    ",315],"{",["T_WHITESPACE","\n        ",316],["T_IF","if",317],["T_WHITESPACE"," ",317],"(",["T_VARIABLE","$overwrite",317],")",["T_WHITESPACE"," ",317],"{",["T_WHITESPACE","\n            ",317],["T_VARIABLE","$this",318],["T_OBJECT_OPERATOR","->",318],["T_STRING","_mapReduce",318],["T_WHITESPACE"," ",318],"=",["T_WHITESPACE"," ",318],"[","]",";",["T_WHITESPACE","\n        ",318],"}",["T_WHITESPACE","\n        ",319],["T_IF","if",320],["T_WHITESPACE"," ",320],"(",["T_VARIABLE","$mapper",320],["T_WHITESPACE"," ",320],["T_IS_IDENTICAL","===",320],["T_WHITESPACE"," ",320],["T_STRING","null",320],")",["T_WHITESPACE"," ",320],"{",["T_WHITESPACE","\n            ",320],["T_RETURN","return",321],["T_WHITESPACE"," ",321],["T_VARIABLE","$this",321],["T_OBJECT_OPERATOR","->",321],["T_STRING","_mapReduce",321],";",["T_WHITESPACE","\n        ",321],"}",["T_WHITESPACE","\n        ",322],["T_VARIABLE","$this",323],["T_OBJECT_OPERATOR","->",323],["T_STRING","_mapReduce",323],"[","]",["T_WHITESPACE"," ",323],"=",["T_WHITESPACE"," ",323],["T_STRING","compact",323],"(",["T_CONSTANT_ENCAPSED_STRING","'mapper'",323],",",["T_WHITESPACE"," ",323],["T_CONSTANT_ENCAPSED_STRING","'reducer'",323],")",";",["T_WHITESPACE","\n\n        ",323],["T_RETURN","return",325],["T_WHITESPACE"," ",325],["T_VARIABLE","$this",325],";",["T_WHITESPACE","\n    ",325],"}",["T_WHITESPACE","\n\n    ",326],["T_DOC_COMMENT","\/**\n     * Registers a new formatter callback function that is to be executed when trying\n     * to fetch the results from the database.\n     *\n     * Formatting callbacks will get a first parameter, a `ResultSetDecorator`, that\n     * can be traversed and modified at will.\n     *\n     * Callbacks are required to return an iterator object, which will be used as\n     * the return value for this query's result. Formatter functions are applied\n     * after all the `MapReduce` routines for this query have been executed.\n     *\n     * If the first argument is set to null, it will return the list of previously\n     * registered map reduce routines.\n     *\n     * If the second argument is set to true, it will erase previous formatters\n     * and replace them with the passed first argument.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Return all results from the table indexed by id\n     * $query->select(['id', 'name'])->formatResults(function ($results) {\n     *   return $results->indexBy('id');\n     * });\n     *\n     * \/\/ Add a new column to the ResultSet\n     * $query->select(['name', 'birth_date'])->formatResults(function ($results) {\n     *   return $results->map(function ($row) {\n     *     $row['age'] = $row['birth_date']->diff(new DateTime)->y;\n     *     return $row;\n     *   });\n     * });\n     * ```\n     *\n     * @param callable|null $formatter The formatting callable.\n     * @param bool|int $mode Whether or not to overwrite, append or prepend the formatter.\n     * @return $this|array\n     *\/",328],["T_WHITESPACE","\n    ",365],["T_PUBLIC","public",366],["T_WHITESPACE"," ",366],["T_FUNCTION","function",366],["T_WHITESPACE"," ",366],["T_STRING","formatResults",366],"(",["T_CALLABLE","callable",366],["T_WHITESPACE"," ",366],["T_VARIABLE","$formatter",366],["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],["T_STRING","null",366],",",["T_WHITESPACE"," ",366],["T_VARIABLE","$mode",366],["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],["T_LNUMBER","0",366],")",["T_WHITESPACE","\n    ",366],"{",["T_WHITESPACE","\n        ",367],["T_IF","if",368],["T_WHITESPACE"," ",368],"(",["T_VARIABLE","$mode",368],["T_WHITESPACE"," ",368],["T_IS_IDENTICAL","===",368],["T_WHITESPACE"," ",368],["T_STRING","self",368],["T_DOUBLE_COLON","::",368],["T_STRING","OVERWRITE",368],")",["T_WHITESPACE"," ",368],"{",["T_WHITESPACE","\n            ",368],["T_VARIABLE","$this",369],["T_OBJECT_OPERATOR","->",369],["T_STRING","_formatters",369],["T_WHITESPACE"," ",369],"=",["T_WHITESPACE"," ",369],"[","]",";",["T_WHITESPACE","\n        ",369],"}",["T_WHITESPACE","\n        ",370],["T_IF","if",371],["T_WHITESPACE"," ",371],"(",["T_VARIABLE","$formatter",371],["T_WHITESPACE"," ",371],["T_IS_IDENTICAL","===",371],["T_WHITESPACE"," ",371],["T_STRING","null",371],")",["T_WHITESPACE"," ",371],"{",["T_WHITESPACE","\n            ",371],["T_RETURN","return",372],["T_WHITESPACE"," ",372],["T_VARIABLE","$this",372],["T_OBJECT_OPERATOR","->",372],["T_STRING","_formatters",372],";",["T_WHITESPACE","\n        ",372],"}",["T_WHITESPACE","\n\n        ",373],["T_IF","if",375],["T_WHITESPACE"," ",375],"(",["T_VARIABLE","$mode",375],["T_WHITESPACE"," ",375],["T_IS_IDENTICAL","===",375],["T_WHITESPACE"," ",375],["T_STRING","self",375],["T_DOUBLE_COLON","::",375],["T_STRING","PREPEND",375],")",["T_WHITESPACE"," ",375],"{",["T_WHITESPACE","\n            ",375],["T_STRING","array_unshift",376],"(",["T_VARIABLE","$this",376],["T_OBJECT_OPERATOR","->",376],["T_STRING","_formatters",376],",",["T_WHITESPACE"," ",376],["T_VARIABLE","$formatter",376],")",";",["T_WHITESPACE","\n\n            ",376],["T_RETURN","return",378],["T_WHITESPACE"," ",378],["T_VARIABLE","$this",378],";",["T_WHITESPACE","\n        ",378],"}",["T_WHITESPACE","\n\n        ",379],["T_VARIABLE","$this",381],["T_OBJECT_OPERATOR","->",381],["T_STRING","_formatters",381],"[","]",["T_WHITESPACE"," ",381],"=",["T_WHITESPACE"," ",381],["T_VARIABLE","$formatter",381],";",["T_WHITESPACE","\n\n        ",381],["T_RETURN","return",383],["T_WHITESPACE"," ",383],["T_VARIABLE","$this",383],";",["T_WHITESPACE","\n    ",383],"}",["T_WHITESPACE","\n\n    ",384],["T_DOC_COMMENT","\/**\n     * Returns the first result out of executing this query, if the query has not been\n     * executed before, it will set the limit clause to 1 for performance reasons.\n     *\n     * ### Example:\n     *\n     * ```\n     * $singleUser = $query->select(['id', 'username'])->first();\n     * ```\n     *\n     * @return mixed the first result from the ResultSet\n     *\/",386],["T_WHITESPACE","\n    ",397],["T_PUBLIC","public",398],["T_WHITESPACE"," ",398],["T_FUNCTION","function",398],["T_WHITESPACE"," ",398],["T_STRING","first",398],"(",")",["T_WHITESPACE","\n    ",398],"{",["T_WHITESPACE","\n        ",399],["T_IF","if",400],["T_WHITESPACE"," ",400],"(",["T_VARIABLE","$this",400],["T_OBJECT_OPERATOR","->",400],["T_STRING","_dirty",400],")",["T_WHITESPACE"," ",400],"{",["T_WHITESPACE","\n            ",400],["T_VARIABLE","$this",401],["T_OBJECT_OPERATOR","->",401],["T_STRING","limit",401],"(",["T_LNUMBER","1",401],")",";",["T_WHITESPACE","\n        ",401],"}",["T_WHITESPACE","\n\n        ",402],["T_RETURN","return",404],["T_WHITESPACE"," ",404],["T_VARIABLE","$this",404],["T_OBJECT_OPERATOR","->",404],["T_STRING","all",404],"(",")",["T_OBJECT_OPERATOR","->",404],["T_STRING","first",404],"(",")",";",["T_WHITESPACE","\n    ",404],"}",["T_WHITESPACE","\n\n    ",405],["T_DOC_COMMENT","\/**\n     * Get the first result from the executing query or raise an exception.\n     *\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When there is no first record.\n     * @return mixed The first result from the ResultSet.\n     *\/",407],["T_WHITESPACE","\n    ",412],["T_PUBLIC","public",413],["T_WHITESPACE"," ",413],["T_FUNCTION","function",413],["T_WHITESPACE"," ",413],["T_STRING","firstOrFail",413],"(",")",["T_WHITESPACE","\n    ",413],"{",["T_WHITESPACE","\n        ",414],["T_VARIABLE","$entity",415],["T_WHITESPACE"," ",415],"=",["T_WHITESPACE"," ",415],["T_VARIABLE","$this",415],["T_OBJECT_OPERATOR","->",415],["T_STRING","first",415],"(",")",";",["T_WHITESPACE","\n        ",415],["T_IF","if",416],["T_WHITESPACE"," ",416],"(",["T_VARIABLE","$entity",416],")",["T_WHITESPACE"," ",416],"{",["T_WHITESPACE","\n            ",416],["T_RETURN","return",417],["T_WHITESPACE"," ",417],["T_VARIABLE","$entity",417],";",["T_WHITESPACE","\n        ",417],"}",["T_WHITESPACE","\n        ",418],["T_THROW","throw",419],["T_WHITESPACE"," ",419],["T_NEW","new",419],["T_WHITESPACE"," ",419],["T_STRING","RecordNotFoundException",419],"(",["T_STRING","sprintf",419],"(",["T_WHITESPACE","\n            ",419],["T_CONSTANT_ENCAPSED_STRING","'Record not found in table \"%s\"'",420],",",["T_WHITESPACE","\n            ",420],["T_VARIABLE","$this",421],["T_OBJECT_OPERATOR","->",421],["T_STRING","repository",421],"(",")",["T_OBJECT_OPERATOR","->",421],["T_STRING","table",421],"(",")",["T_WHITESPACE","\n        ",421],")",")",";",["T_WHITESPACE","\n    ",422],"}",["T_WHITESPACE","\n\n    ",423],["T_DOC_COMMENT","\/**\n     * Returns an array with the custom options that were applied to this query\n     * and that were not already processed by another method in this class.\n     *\n     * ### Example:\n     *\n     * ```\n     *  $query->applyOptions(['doABarrelRoll' => true, 'fields' => ['id', 'name']);\n     *  $query->getOptions(); \/\/ Returns ['doABarrelRoll' => true]\n     * ```\n     *\n     * @see \\Cake\\ORM\\Query::applyOptions() to read about the options that will\n     * be processed by this class and not returned by this function\n     * @return array\n     *\/",425],["T_WHITESPACE","\n    ",439],["T_PUBLIC","public",440],["T_WHITESPACE"," ",440],["T_FUNCTION","function",440],["T_WHITESPACE"," ",440],["T_STRING","getOptions",440],"(",")",["T_WHITESPACE","\n    ",440],"{",["T_WHITESPACE","\n        ",441],["T_RETURN","return",442],["T_WHITESPACE"," ",442],["T_VARIABLE","$this",442],["T_OBJECT_OPERATOR","->",442],["T_STRING","_options",442],";",["T_WHITESPACE","\n    ",442],"}",["T_WHITESPACE","\n\n    ",443],["T_DOC_COMMENT","\/**\n     * Enables calling methods from the result set as if they were from this class\n     *\n     * @param string $method the method to call\n     * @param array $arguments list of arguments for the method to call\n     * @return mixed\n     * @throws \\BadMethodCallException if no such method exists in result set\n     *\/",445],["T_WHITESPACE","\n    ",452],["T_PUBLIC","public",453],["T_WHITESPACE"," ",453],["T_FUNCTION","function",453],["T_WHITESPACE"," ",453],["T_STRING","__call",453],"(",["T_VARIABLE","$method",453],",",["T_WHITESPACE"," ",453],["T_VARIABLE","$arguments",453],")",["T_WHITESPACE","\n    ",453],"{",["T_WHITESPACE","\n        ",454],["T_VARIABLE","$resultSetClass",455],["T_WHITESPACE"," ",455],"=",["T_WHITESPACE"," ",455],["T_VARIABLE","$this",455],["T_OBJECT_OPERATOR","->",455],["T_STRING","_decoratorClass",455],"(",")",";",["T_WHITESPACE","\n        ",455],["T_IF","if",456],["T_WHITESPACE"," ",456],"(",["T_STRING","in_array",456],"(",["T_VARIABLE","$method",456],",",["T_WHITESPACE"," ",456],["T_STRING","get_class_methods",456],"(",["T_VARIABLE","$resultSetClass",456],")",")",")",["T_WHITESPACE"," ",456],"{",["T_WHITESPACE","\n            ",456],["T_VARIABLE","$results",457],["T_WHITESPACE"," ",457],"=",["T_WHITESPACE"," ",457],["T_VARIABLE","$this",457],["T_OBJECT_OPERATOR","->",457],["T_STRING","all",457],"(",")",";",["T_WHITESPACE","\n\n            ",457],["T_RETURN","return",459],["T_WHITESPACE"," ",459],["T_STRING","call_user_func_array",459],"(","[",["T_VARIABLE","$results",459],",",["T_WHITESPACE"," ",459],["T_VARIABLE","$method",459],"]",",",["T_WHITESPACE"," ",459],["T_VARIABLE","$arguments",459],")",";",["T_WHITESPACE","\n        ",459],"}",["T_WHITESPACE","\n        ",460],["T_THROW","throw",461],["T_WHITESPACE"," ",461],["T_NEW","new",461],["T_WHITESPACE"," ",461],["T_STRING","BadMethodCallException",461],"(",["T_WHITESPACE","\n            ",461],["T_STRING","sprintf",462],"(",["T_CONSTANT_ENCAPSED_STRING","'Unknown method \"%s\"'",462],",",["T_WHITESPACE"," ",462],["T_VARIABLE","$method",462],")",["T_WHITESPACE","\n        ",462],")",";",["T_WHITESPACE","\n    ",463],"}",["T_WHITESPACE","\n\n    ",464],["T_DOC_COMMENT","\/**\n     * Populates or adds parts to current query clauses using an array.\n     * This is handy for passing all query clauses at once.\n     *\n     * @param array $options the options to be applied\n     * @return $this This object\n     *\/",466],["T_WHITESPACE","\n    ",472],["T_ABSTRACT","abstract",473],["T_WHITESPACE"," ",473],["T_PUBLIC","public",473],["T_WHITESPACE"," ",473],["T_FUNCTION","function",473],["T_WHITESPACE"," ",473],["T_STRING","applyOptions",473],"(",["T_ARRAY","array",473],["T_WHITESPACE"," ",473],["T_VARIABLE","$options",473],")",";",["T_WHITESPACE","\n\n    ",473],["T_DOC_COMMENT","\/**\n     * Executes this query and returns a traversable object containing the results\n     *\n     * @return \\Traversable\n     *\/",475],["T_WHITESPACE","\n    ",479],["T_ABSTRACT","abstract",480],["T_WHITESPACE"," ",480],["T_PROTECTED","protected",480],["T_WHITESPACE"," ",480],["T_FUNCTION","function",480],["T_WHITESPACE"," ",480],["T_STRING","_execute",480],"(",")",";",["T_WHITESPACE","\n\n    ",480],["T_DOC_COMMENT","\/**\n     * Decorates the results iterator with MapReduce routines and formatters\n     *\n     * @param \\Traversable $result Original results\n     * @return \\Cake\\Datasource\\ResultSetInterface\n     *\/",482],["T_WHITESPACE","\n    ",487],["T_PROTECTED","protected",488],["T_WHITESPACE"," ",488],["T_FUNCTION","function",488],["T_WHITESPACE"," ",488],["T_STRING","_decorateResults",488],"(",["T_VARIABLE","$result",488],")",["T_WHITESPACE","\n    ",488],"{",["T_WHITESPACE","\n        ",489],["T_VARIABLE","$decorator",490],["T_WHITESPACE"," ",490],"=",["T_WHITESPACE"," ",490],["T_VARIABLE","$this",490],["T_OBJECT_OPERATOR","->",490],["T_STRING","_decoratorClass",490],"(",")",";",["T_WHITESPACE","\n        ",490],["T_FOREACH","foreach",491],["T_WHITESPACE"," ",491],"(",["T_VARIABLE","$this",491],["T_OBJECT_OPERATOR","->",491],["T_STRING","_mapReduce",491],["T_WHITESPACE"," ",491],["T_AS","as",491],["T_WHITESPACE"," ",491],["T_VARIABLE","$functions",491],")",["T_WHITESPACE"," ",491],"{",["T_WHITESPACE","\n            ",491],["T_VARIABLE","$result",492],["T_WHITESPACE"," ",492],"=",["T_WHITESPACE"," ",492],["T_NEW","new",492],["T_WHITESPACE"," ",492],["T_STRING","MapReduce",492],"(",["T_VARIABLE","$result",492],",",["T_WHITESPACE"," ",492],["T_VARIABLE","$functions",492],"[",["T_CONSTANT_ENCAPSED_STRING","'mapper'",492],"]",",",["T_WHITESPACE"," ",492],["T_VARIABLE","$functions",492],"[",["T_CONSTANT_ENCAPSED_STRING","'reducer'",492],"]",")",";",["T_WHITESPACE","\n        ",492],"}",["T_WHITESPACE","\n\n        ",493],["T_IF","if",495],["T_WHITESPACE"," ",495],"(","!",["T_EMPTY","empty",495],"(",["T_VARIABLE","$this",495],["T_OBJECT_OPERATOR","->",495],["T_STRING","_mapReduce",495],")",")",["T_WHITESPACE"," ",495],"{",["T_WHITESPACE","\n            ",495],["T_VARIABLE","$result",496],["T_WHITESPACE"," ",496],"=",["T_WHITESPACE"," ",496],["T_NEW","new",496],["T_WHITESPACE"," ",496],["T_VARIABLE","$decorator",496],"(",["T_VARIABLE","$result",496],")",";",["T_WHITESPACE","\n        ",496],"}",["T_WHITESPACE","\n\n        ",497],["T_FOREACH","foreach",499],["T_WHITESPACE"," ",499],"(",["T_VARIABLE","$this",499],["T_OBJECT_OPERATOR","->",499],["T_STRING","_formatters",499],["T_WHITESPACE"," ",499],["T_AS","as",499],["T_WHITESPACE"," ",499],["T_VARIABLE","$formatter",499],")",["T_WHITESPACE"," ",499],"{",["T_WHITESPACE","\n            ",499],["T_VARIABLE","$result",500],["T_WHITESPACE"," ",500],"=",["T_WHITESPACE"," ",500],["T_VARIABLE","$formatter",500],"(",["T_VARIABLE","$result",500],")",";",["T_WHITESPACE","\n        ",500],"}",["T_WHITESPACE","\n\n        ",501],["T_IF","if",503],["T_WHITESPACE"," ",503],"(","!",["T_EMPTY","empty",503],"(",["T_VARIABLE","$this",503],["T_OBJECT_OPERATOR","->",503],["T_STRING","_formatters",503],")",["T_WHITESPACE"," ",503],["T_BOOLEAN_AND","&&",503],["T_WHITESPACE"," ",503],"!","(",["T_VARIABLE","$result",503],["T_WHITESPACE"," ",503],["T_INSTANCEOF","instanceof",503],["T_WHITESPACE"," ",503],["T_VARIABLE","$decorator",503],")",")",["T_WHITESPACE"," ",503],"{",["T_WHITESPACE","\n            ",503],["T_VARIABLE","$result",504],["T_WHITESPACE"," ",504],"=",["T_WHITESPACE"," ",504],["T_NEW","new",504],["T_WHITESPACE"," ",504],["T_VARIABLE","$decorator",504],"(",["T_VARIABLE","$result",504],")",";",["T_WHITESPACE","\n        ",504],"}",["T_WHITESPACE","\n\n        ",505],["T_RETURN","return",507],["T_WHITESPACE"," ",507],["T_VARIABLE","$result",507],";",["T_WHITESPACE","\n    ",507],"}",["T_WHITESPACE","\n\n    ",508],["T_DOC_COMMENT","\/**\n     * Returns the name of the class to be used for decorating results\n     *\n     * @return string\n     *\/",510],["T_WHITESPACE","\n    ",514],["T_PROTECTED","protected",515],["T_WHITESPACE"," ",515],["T_FUNCTION","function",515],["T_WHITESPACE"," ",515],["T_STRING","_decoratorClass",515],"(",")",["T_WHITESPACE","\n    ",515],"{",["T_WHITESPACE","\n        ",516],["T_RETURN","return",517],["T_WHITESPACE"," ",517],["T_CONSTANT_ENCAPSED_STRING","'Cake\\Datasource\\ResultSetDecorator'",517],";",["T_WHITESPACE","\n    ",517],"}",["T_WHITESPACE","\n",518],"}",["T_WHITESPACE","\n",519]]