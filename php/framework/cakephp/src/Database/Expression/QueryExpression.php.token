[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Expression",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","BadMethodCallException",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Database",18],["T_NS_SEPARATOR","\\",18],["T_STRING","ExpressionInterface",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Database",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Query",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Cake",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Database",20],["T_NS_SEPARATOR","\\",20],["T_STRING","TypeMapTrait",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Cake",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Database",21],["T_NS_SEPARATOR","\\",21],["T_STRING","ValueBinder",21],";",["T_WHITESPACE","\n",21],["T_USE","use",22],["T_WHITESPACE"," ",22],["T_STRING","Countable",22],";",["T_WHITESPACE","\n\n",22],["T_DOC_COMMENT","\/**\n * Represents a SQL Query expression. Internally it stores a tree of\n * expressions that can be compiled by converting this object to string\n * and will contain a correctly parenthesized and nested expression.\n *\/",24],["T_WHITESPACE","\n",28],["T_CLASS","class",29],["T_WHITESPACE"," ",29],["T_STRING","QueryExpression",29],["T_WHITESPACE"," ",29],["T_IMPLEMENTS","implements",29],["T_WHITESPACE"," ",29],["T_STRING","ExpressionInterface",29],",",["T_WHITESPACE"," ",29],["T_STRING","Countable",29],["T_WHITESPACE","\n",29],"{",["T_WHITESPACE","\n\n    ",30],["T_USE","use",32],["T_WHITESPACE"," ",32],["T_STRING","TypeMapTrait",32],";",["T_WHITESPACE","\n\n    ",32],["T_DOC_COMMENT","\/**\n     * String to be used for joining each of the internal expressions\n     * this object internally stores for example \"AND\", \"OR\", etc.\n     *\n     * @var string\n     *\/",34],["T_WHITESPACE","\n    ",39],["T_PROTECTED","protected",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$_conjunction",40],";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * A list of strings or other expression objects that represent the \"branches\" of\n     * the expression tree. For example one key of the array might look like \"sum > :value\"\n     *\n     * @var array\n     *\/",42],["T_WHITESPACE","\n    ",47],["T_PROTECTED","protected",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$_conditions",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],"[","]",";",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Constructor. A new expression object can be created without any params and\n     * be built dynamically. Otherwise it is possible to pass an array of conditions\n     * containing either a tree-like array structure to be parsed and\/or other\n     * expression objects. Optionally, you can set the conjunction keyword to be used\n     * for joining each part of this level of the expression tree.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions tree-like array structure containing all the conditions\n     * to be added or nested inside this expression object.\n     * @param array|\\Cake\\Database\\TypeMap $types associative array of types to be associated with the values\n     * passed in $conditions.\n     * @param string $conjunction the glue that will join all the string conditions at this\n     * level of the expression tree. For example \"AND\", \"OR\", \"XOR\"...\n     * @see \\Cake\\Database\\Expression\\QueryExpression::add() for more details on $conditions and $types\n     *\/",50],["T_WHITESPACE","\n    ",64],["T_PUBLIC","public",65],["T_WHITESPACE"," ",65],["T_FUNCTION","function",65],["T_WHITESPACE"," ",65],["T_STRING","__construct",65],"(",["T_VARIABLE","$conditions",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],"[","]",",",["T_WHITESPACE"," ",65],["T_VARIABLE","$types",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],"[","]",",",["T_WHITESPACE"," ",65],["T_VARIABLE","$conjunction",65],["T_WHITESPACE"," ",65],"=",["T_WHITESPACE"," ",65],["T_CONSTANT_ENCAPSED_STRING","'AND'",65],")",["T_WHITESPACE","\n    ",65],"{",["T_WHITESPACE","\n        ",66],["T_VARIABLE","$this",67],["T_OBJECT_OPERATOR","->",67],["T_STRING","typeMap",67],"(",["T_VARIABLE","$types",67],")",";",["T_WHITESPACE","\n        ",67],["T_VARIABLE","$this",68],["T_OBJECT_OPERATOR","->",68],["T_STRING","tieWith",68],"(",["T_STRING","strtoupper",68],"(",["T_VARIABLE","$conjunction",68],")",")",";",["T_WHITESPACE","\n        ",68],["T_IF","if",69],["T_WHITESPACE"," ",69],"(","!",["T_EMPTY","empty",69],"(",["T_VARIABLE","$conditions",69],")",")",["T_WHITESPACE"," ",69],"{",["T_WHITESPACE","\n            ",69],["T_VARIABLE","$this",70],["T_OBJECT_OPERATOR","->",70],["T_STRING","add",70],"(",["T_VARIABLE","$conditions",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$this",70],["T_OBJECT_OPERATOR","->",70],["T_STRING","typeMap",70],"(",")",["T_OBJECT_OPERATOR","->",70],["T_STRING","types",70],"(",")",")",";",["T_WHITESPACE","\n        ",70],"}",["T_WHITESPACE","\n    ",71],"}",["T_WHITESPACE","\n\n    ",72],["T_DOC_COMMENT","\/**\n     * Changes the conjunction for the conditions at this level of the expression tree.\n     * If called with no arguments it will return the currently configured value.\n     *\n     * @param string|null $conjunction value to be used for joining conditions. If null it\n     * will not set any value, but return the currently stored one\n     * @return string|$this\n     *\/",74],["T_WHITESPACE","\n    ",81],["T_PUBLIC","public",82],["T_WHITESPACE"," ",82],["T_FUNCTION","function",82],["T_WHITESPACE"," ",82],["T_STRING","tieWith",82],"(",["T_VARIABLE","$conjunction",82],["T_WHITESPACE"," ",82],"=",["T_WHITESPACE"," ",82],["T_STRING","null",82],")",["T_WHITESPACE","\n    ",82],"{",["T_WHITESPACE","\n        ",83],["T_IF","if",84],["T_WHITESPACE"," ",84],"(",["T_VARIABLE","$conjunction",84],["T_WHITESPACE"," ",84],["T_IS_IDENTICAL","===",84],["T_WHITESPACE"," ",84],["T_STRING","null",84],")",["T_WHITESPACE"," ",84],"{",["T_WHITESPACE","\n            ",84],["T_RETURN","return",85],["T_WHITESPACE"," ",85],["T_VARIABLE","$this",85],["T_OBJECT_OPERATOR","->",85],["T_STRING","_conjunction",85],";",["T_WHITESPACE","\n        ",85],"}",["T_WHITESPACE","\n\n        ",86],["T_VARIABLE","$this",88],["T_OBJECT_OPERATOR","->",88],["T_STRING","_conjunction",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_STRING","strtoupper",88],"(",["T_VARIABLE","$conjunction",88],")",";",["T_WHITESPACE","\n\n        ",88],["T_RETURN","return",90],["T_WHITESPACE"," ",90],["T_VARIABLE","$this",90],";",["T_WHITESPACE","\n    ",90],"}",["T_WHITESPACE","\n\n    ",91],["T_DOC_COMMENT","\/**\n     * Backwards compatible wrapper for tieWith()\n     *\n     * @param string|null $conjunction value to be used for joining conditions. If null it\n     * will not set any value, but return the currently stored one\n     * @return string|$this\n     * @deprecated 3.2.0 Use tieWith() instead\n     *\/",93],["T_WHITESPACE","\n    ",100],["T_PUBLIC","public",101],["T_WHITESPACE"," ",101],["T_FUNCTION","function",101],["T_WHITESPACE"," ",101],["T_STRING","type",101],"(",["T_VARIABLE","$conjunction",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],["T_STRING","null",101],")",["T_WHITESPACE","\n    ",101],"{",["T_WHITESPACE","\n        ",102],["T_RETURN","return",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$this",103],["T_OBJECT_OPERATOR","->",103],["T_STRING","tieWith",103],"(",["T_VARIABLE","$conjunction",103],")",";",["T_WHITESPACE","\n    ",103],"}",["T_WHITESPACE","\n\n    ",104],["T_DOC_COMMENT","\/**\n     * Adds one or more conditions to this expression object. Conditions can be\n     * expressed in a one dimensional array, that will cause all conditions to\n     * be added directly at this level of the tree or they can be nested arbitrarily\n     * making it create more expression objects that will be nested inside and\n     * configured to use the specified conjunction.\n     *\n     * If the type passed for any of the fields is expressed \"type[]\" (note braces)\n     * then it will cause the placeholder to be re-written dynamically so if the\n     * value is an array, it will create as many placeholders as values are in it.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions single or multiple conditions to\n     * be added. When using an array and the key is 'OR' or 'AND' a new expression\n     * object will be created with that conjunction and internal array value passed\n     * as conditions.\n     * @param array $types associative array of fields pointing to the type of the\n     * values that are being passed. Used for correctly binding values to statements.\n     * @see \\Cake\\Database\\Query::where() for examples on conditions\n     * @return $this\n     *\/",106],["T_WHITESPACE","\n    ",125],["T_PUBLIC","public",126],["T_WHITESPACE"," ",126],["T_FUNCTION","function",126],["T_WHITESPACE"," ",126],["T_STRING","add",126],"(",["T_VARIABLE","$conditions",126],",",["T_WHITESPACE"," ",126],["T_VARIABLE","$types",126],["T_WHITESPACE"," ",126],"=",["T_WHITESPACE"," ",126],"[","]",")",["T_WHITESPACE","\n    ",126],"{",["T_WHITESPACE","\n        ",127],["T_IF","if",128],["T_WHITESPACE"," ",128],"(",["T_STRING","is_string",128],"(",["T_VARIABLE","$conditions",128],")",")",["T_WHITESPACE"," ",128],"{",["T_WHITESPACE","\n            ",128],["T_VARIABLE","$this",129],["T_OBJECT_OPERATOR","->",129],["T_STRING","_conditions",129],"[","]",["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_VARIABLE","$conditions",129],";",["T_WHITESPACE","\n\n            ",129],["T_RETURN","return",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$this",131],";",["T_WHITESPACE","\n        ",131],"}",["T_WHITESPACE","\n\n        ",132],["T_IF","if",134],["T_WHITESPACE"," ",134],"(",["T_VARIABLE","$conditions",134],["T_WHITESPACE"," ",134],["T_INSTANCEOF","instanceof",134],["T_WHITESPACE"," ",134],["T_STRING","ExpressionInterface",134],")",["T_WHITESPACE"," ",134],"{",["T_WHITESPACE","\n            ",134],["T_VARIABLE","$this",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","_conditions",135],"[","]",["T_WHITESPACE"," ",135],"=",["T_WHITESPACE"," ",135],["T_VARIABLE","$conditions",135],";",["T_WHITESPACE","\n\n            ",135],["T_RETURN","return",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$this",137],";",["T_WHITESPACE","\n        ",137],"}",["T_WHITESPACE","\n\n        ",138],["T_VARIABLE","$this",140],["T_OBJECT_OPERATOR","->",140],["T_STRING","_addConditions",140],"(",["T_VARIABLE","$conditions",140],",",["T_WHITESPACE"," ",140],["T_VARIABLE","$types",140],")",";",["T_WHITESPACE","\n\n        ",140],["T_RETURN","return",142],["T_WHITESPACE"," ",142],["T_VARIABLE","$this",142],";",["T_WHITESPACE","\n    ",142],"}",["T_WHITESPACE","\n\n    ",143],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field = value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * If it is suffixed with \"[]\" and the value is an array then multiple placeholders\n     * will be created, one per each value in the array.\n     * @return $this\n     *\/",145],["T_WHITESPACE","\n    ",154],["T_PUBLIC","public",155],["T_WHITESPACE"," ",155],["T_FUNCTION","function",155],["T_WHITESPACE"," ",155],["T_STRING","eq",155],"(",["T_VARIABLE","$field",155],",",["T_WHITESPACE"," ",155],["T_VARIABLE","$value",155],",",["T_WHITESPACE"," ",155],["T_VARIABLE","$type",155],["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_STRING","null",155],")",["T_WHITESPACE","\n    ",155],"{",["T_WHITESPACE","\n        ",156],["T_IF","if",157],["T_WHITESPACE"," ",157],"(",["T_VARIABLE","$type",157],["T_WHITESPACE"," ",157],["T_IS_IDENTICAL","===",157],["T_WHITESPACE"," ",157],["T_STRING","null",157],")",["T_WHITESPACE"," ",157],"{",["T_WHITESPACE","\n            ",157],["T_VARIABLE","$type",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_VARIABLE","$this",158],["T_OBJECT_OPERATOR","->",158],["T_STRING","_calculateType",158],"(",["T_VARIABLE","$field",158],")",";",["T_WHITESPACE","\n        ",158],"}",["T_WHITESPACE","\n\n        ",159],["T_RETURN","return",161],["T_WHITESPACE"," ",161],["T_VARIABLE","$this",161],["T_OBJECT_OPERATOR","->",161],["T_STRING","add",161],"(",["T_NEW","new",161],["T_WHITESPACE"," ",161],["T_STRING","Comparison",161],"(",["T_VARIABLE","$field",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$value",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$type",161],",",["T_WHITESPACE"," ",161],["T_CONSTANT_ENCAPSED_STRING","'='",161],")",")",";",["T_WHITESPACE","\n    ",161],"}",["T_WHITESPACE","\n\n    ",162],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field != value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * If it is suffixed with \"[]\" and the value is an array then multiple placeholders\n     * will be created, one per each value in the array.\n     * @return $this\n     *\/",164],["T_WHITESPACE","\n    ",173],["T_PUBLIC","public",174],["T_WHITESPACE"," ",174],["T_FUNCTION","function",174],["T_WHITESPACE"," ",174],["T_STRING","notEq",174],"(",["T_VARIABLE","$field",174],",",["T_WHITESPACE"," ",174],["T_VARIABLE","$value",174],",",["T_WHITESPACE"," ",174],["T_VARIABLE","$type",174],["T_WHITESPACE"," ",174],"=",["T_WHITESPACE"," ",174],["T_STRING","null",174],")",["T_WHITESPACE","\n    ",174],"{",["T_WHITESPACE","\n        ",175],["T_IF","if",176],["T_WHITESPACE"," ",176],"(",["T_VARIABLE","$type",176],["T_WHITESPACE"," ",176],["T_IS_IDENTICAL","===",176],["T_WHITESPACE"," ",176],["T_STRING","null",176],")",["T_WHITESPACE"," ",176],"{",["T_WHITESPACE","\n            ",176],["T_VARIABLE","$type",177],["T_WHITESPACE"," ",177],"=",["T_WHITESPACE"," ",177],["T_VARIABLE","$this",177],["T_OBJECT_OPERATOR","->",177],["T_STRING","_calculateType",177],"(",["T_VARIABLE","$field",177],")",";",["T_WHITESPACE","\n        ",177],"}",["T_WHITESPACE","\n\n        ",178],["T_RETURN","return",180],["T_WHITESPACE"," ",180],["T_VARIABLE","$this",180],["T_OBJECT_OPERATOR","->",180],["T_STRING","add",180],"(",["T_NEW","new",180],["T_WHITESPACE"," ",180],["T_STRING","Comparison",180],"(",["T_VARIABLE","$field",180],",",["T_WHITESPACE"," ",180],["T_VARIABLE","$value",180],",",["T_WHITESPACE"," ",180],["T_VARIABLE","$type",180],",",["T_WHITESPACE"," ",180],["T_CONSTANT_ENCAPSED_STRING","'!='",180],")",")",";",["T_WHITESPACE","\n    ",180],"}",["T_WHITESPACE","\n\n    ",181],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field > value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",183],["T_WHITESPACE","\n    ",190],["T_PUBLIC","public",191],["T_WHITESPACE"," ",191],["T_FUNCTION","function",191],["T_WHITESPACE"," ",191],["T_STRING","gt",191],"(",["T_VARIABLE","$field",191],",",["T_WHITESPACE"," ",191],["T_VARIABLE","$value",191],",",["T_WHITESPACE"," ",191],["T_VARIABLE","$type",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_STRING","null",191],")",["T_WHITESPACE","\n    ",191],"{",["T_WHITESPACE","\n        ",192],["T_IF","if",193],["T_WHITESPACE"," ",193],"(",["T_VARIABLE","$type",193],["T_WHITESPACE"," ",193],["T_IS_IDENTICAL","===",193],["T_WHITESPACE"," ",193],["T_STRING","null",193],")",["T_WHITESPACE"," ",193],"{",["T_WHITESPACE","\n            ",193],["T_VARIABLE","$type",194],["T_WHITESPACE"," ",194],"=",["T_WHITESPACE"," ",194],["T_VARIABLE","$this",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","_calculateType",194],"(",["T_VARIABLE","$field",194],")",";",["T_WHITESPACE","\n        ",194],"}",["T_WHITESPACE","\n\n        ",195],["T_RETURN","return",197],["T_WHITESPACE"," ",197],["T_VARIABLE","$this",197],["T_OBJECT_OPERATOR","->",197],["T_STRING","add",197],"(",["T_NEW","new",197],["T_WHITESPACE"," ",197],["T_STRING","Comparison",197],"(",["T_VARIABLE","$field",197],",",["T_WHITESPACE"," ",197],["T_VARIABLE","$value",197],",",["T_WHITESPACE"," ",197],["T_VARIABLE","$type",197],",",["T_WHITESPACE"," ",197],["T_CONSTANT_ENCAPSED_STRING","'>'",197],")",")",";",["T_WHITESPACE","\n    ",197],"}",["T_WHITESPACE","\n\n    ",198],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field < value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",200],["T_WHITESPACE","\n    ",207],["T_PUBLIC","public",208],["T_WHITESPACE"," ",208],["T_FUNCTION","function",208],["T_WHITESPACE"," ",208],["T_STRING","lt",208],"(",["T_VARIABLE","$field",208],",",["T_WHITESPACE"," ",208],["T_VARIABLE","$value",208],",",["T_WHITESPACE"," ",208],["T_VARIABLE","$type",208],["T_WHITESPACE"," ",208],"=",["T_WHITESPACE"," ",208],["T_STRING","null",208],")",["T_WHITESPACE","\n    ",208],"{",["T_WHITESPACE","\n        ",209],["T_IF","if",210],["T_WHITESPACE"," ",210],"(",["T_VARIABLE","$type",210],["T_WHITESPACE"," ",210],["T_IS_IDENTICAL","===",210],["T_WHITESPACE"," ",210],["T_STRING","null",210],")",["T_WHITESPACE"," ",210],"{",["T_WHITESPACE","\n            ",210],["T_VARIABLE","$type",211],["T_WHITESPACE"," ",211],"=",["T_WHITESPACE"," ",211],["T_VARIABLE","$this",211],["T_OBJECT_OPERATOR","->",211],["T_STRING","_calculateType",211],"(",["T_VARIABLE","$field",211],")",";",["T_WHITESPACE","\n        ",211],"}",["T_WHITESPACE","\n\n        ",212],["T_RETURN","return",214],["T_WHITESPACE"," ",214],["T_VARIABLE","$this",214],["T_OBJECT_OPERATOR","->",214],["T_STRING","add",214],"(",["T_NEW","new",214],["T_WHITESPACE"," ",214],["T_STRING","Comparison",214],"(",["T_VARIABLE","$field",214],",",["T_WHITESPACE"," ",214],["T_VARIABLE","$value",214],",",["T_WHITESPACE"," ",214],["T_VARIABLE","$type",214],",",["T_WHITESPACE"," ",214],["T_CONSTANT_ENCAPSED_STRING","'<'",214],")",")",";",["T_WHITESPACE","\n    ",214],"}",["T_WHITESPACE","\n\n    ",215],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field >= value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",217],["T_WHITESPACE","\n    ",224],["T_PUBLIC","public",225],["T_WHITESPACE"," ",225],["T_FUNCTION","function",225],["T_WHITESPACE"," ",225],["T_STRING","gte",225],"(",["T_VARIABLE","$field",225],",",["T_WHITESPACE"," ",225],["T_VARIABLE","$value",225],",",["T_WHITESPACE"," ",225],["T_VARIABLE","$type",225],["T_WHITESPACE"," ",225],"=",["T_WHITESPACE"," ",225],["T_STRING","null",225],")",["T_WHITESPACE","\n    ",225],"{",["T_WHITESPACE","\n        ",226],["T_IF","if",227],["T_WHITESPACE"," ",227],"(",["T_VARIABLE","$type",227],["T_WHITESPACE"," ",227],["T_IS_IDENTICAL","===",227],["T_WHITESPACE"," ",227],["T_STRING","null",227],")",["T_WHITESPACE"," ",227],"{",["T_WHITESPACE","\n            ",227],["T_VARIABLE","$type",228],["T_WHITESPACE"," ",228],"=",["T_WHITESPACE"," ",228],["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","_calculateType",228],"(",["T_VARIABLE","$field",228],")",";",["T_WHITESPACE","\n        ",228],"}",["T_WHITESPACE","\n\n        ",229],["T_RETURN","return",231],["T_WHITESPACE"," ",231],["T_VARIABLE","$this",231],["T_OBJECT_OPERATOR","->",231],["T_STRING","add",231],"(",["T_NEW","new",231],["T_WHITESPACE"," ",231],["T_STRING","Comparison",231],"(",["T_VARIABLE","$field",231],",",["T_WHITESPACE"," ",231],["T_VARIABLE","$value",231],",",["T_WHITESPACE"," ",231],["T_VARIABLE","$type",231],",",["T_WHITESPACE"," ",231],["T_CONSTANT_ENCAPSED_STRING","'>='",231],")",")",";",["T_WHITESPACE","\n    ",231],"}",["T_WHITESPACE","\n\n    ",232],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field <= value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",234],["T_WHITESPACE","\n    ",241],["T_PUBLIC","public",242],["T_WHITESPACE"," ",242],["T_FUNCTION","function",242],["T_WHITESPACE"," ",242],["T_STRING","lte",242],"(",["T_VARIABLE","$field",242],",",["T_WHITESPACE"," ",242],["T_VARIABLE","$value",242],",",["T_WHITESPACE"," ",242],["T_VARIABLE","$type",242],["T_WHITESPACE"," ",242],"=",["T_WHITESPACE"," ",242],["T_STRING","null",242],")",["T_WHITESPACE","\n    ",242],"{",["T_WHITESPACE","\n        ",243],["T_IF","if",244],["T_WHITESPACE"," ",244],"(",["T_VARIABLE","$type",244],["T_WHITESPACE"," ",244],["T_IS_IDENTICAL","===",244],["T_WHITESPACE"," ",244],["T_STRING","null",244],")",["T_WHITESPACE"," ",244],"{",["T_WHITESPACE","\n            ",244],["T_VARIABLE","$type",245],["T_WHITESPACE"," ",245],"=",["T_WHITESPACE"," ",245],["T_VARIABLE","$this",245],["T_OBJECT_OPERATOR","->",245],["T_STRING","_calculateType",245],"(",["T_VARIABLE","$field",245],")",";",["T_WHITESPACE","\n        ",245],"}",["T_WHITESPACE","\n\n        ",246],["T_RETURN","return",248],["T_WHITESPACE"," ",248],["T_VARIABLE","$this",248],["T_OBJECT_OPERATOR","->",248],["T_STRING","add",248],"(",["T_NEW","new",248],["T_WHITESPACE"," ",248],["T_STRING","Comparison",248],"(",["T_VARIABLE","$field",248],",",["T_WHITESPACE"," ",248],["T_VARIABLE","$value",248],",",["T_WHITESPACE"," ",248],["T_VARIABLE","$type",248],",",["T_WHITESPACE"," ",248],["T_CONSTANT_ENCAPSED_STRING","'<='",248],")",")",";",["T_WHITESPACE","\n    ",248],"}",["T_WHITESPACE","\n\n    ",249],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field IS NULL\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field database field to be\n     * tested for null\n     * @return $this\n     *\/",251],["T_WHITESPACE","\n    ",257],["T_PUBLIC","public",258],["T_WHITESPACE"," ",258],["T_FUNCTION","function",258],["T_WHITESPACE"," ",258],["T_STRING","isNull",258],"(",["T_VARIABLE","$field",258],")",["T_WHITESPACE","\n    ",258],"{",["T_WHITESPACE","\n        ",259],["T_IF","if",260],["T_WHITESPACE"," ",260],"(","!","(",["T_VARIABLE","$field",260],["T_WHITESPACE"," ",260],["T_INSTANCEOF","instanceof",260],["T_WHITESPACE"," ",260],["T_STRING","ExpressionInterface",260],")",")",["T_WHITESPACE"," ",260],"{",["T_WHITESPACE","\n            ",260],["T_VARIABLE","$field",261],["T_WHITESPACE"," ",261],"=",["T_WHITESPACE"," ",261],["T_NEW","new",261],["T_WHITESPACE"," ",261],["T_STRING","IdentifierExpression",261],"(",["T_VARIABLE","$field",261],")",";",["T_WHITESPACE","\n        ",261],"}",["T_WHITESPACE","\n\n        ",262],["T_RETURN","return",264],["T_WHITESPACE"," ",264],["T_VARIABLE","$this",264],["T_OBJECT_OPERATOR","->",264],["T_STRING","add",264],"(",["T_NEW","new",264],["T_WHITESPACE"," ",264],["T_STRING","UnaryExpression",264],"(",["T_CONSTANT_ENCAPSED_STRING","'IS NULL'",264],",",["T_WHITESPACE"," ",264],["T_VARIABLE","$field",264],",",["T_WHITESPACE"," ",264],["T_STRING","UnaryExpression",264],["T_DOUBLE_COLON","::",264],["T_STRING","POSTFIX",264],")",")",";",["T_WHITESPACE","\n    ",264],"}",["T_WHITESPACE","\n\n    ",265],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field IS NOT NULL\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field database field to be\n     * tested for not null\n     * @return $this\n     *\/",267],["T_WHITESPACE","\n    ",273],["T_PUBLIC","public",274],["T_WHITESPACE"," ",274],["T_FUNCTION","function",274],["T_WHITESPACE"," ",274],["T_STRING","isNotNull",274],"(",["T_VARIABLE","$field",274],")",["T_WHITESPACE","\n    ",274],"{",["T_WHITESPACE","\n        ",275],["T_IF","if",276],["T_WHITESPACE"," ",276],"(","!","(",["T_VARIABLE","$field",276],["T_WHITESPACE"," ",276],["T_INSTANCEOF","instanceof",276],["T_WHITESPACE"," ",276],["T_STRING","ExpressionInterface",276],")",")",["T_WHITESPACE"," ",276],"{",["T_WHITESPACE","\n            ",276],["T_VARIABLE","$field",277],["T_WHITESPACE"," ",277],"=",["T_WHITESPACE"," ",277],["T_NEW","new",277],["T_WHITESPACE"," ",277],["T_STRING","IdentifierExpression",277],"(",["T_VARIABLE","$field",277],")",";",["T_WHITESPACE","\n        ",277],"}",["T_WHITESPACE","\n\n        ",278],["T_RETURN","return",280],["T_WHITESPACE"," ",280],["T_VARIABLE","$this",280],["T_OBJECT_OPERATOR","->",280],["T_STRING","add",280],"(",["T_NEW","new",280],["T_WHITESPACE"," ",280],["T_STRING","UnaryExpression",280],"(",["T_CONSTANT_ENCAPSED_STRING","'IS NOT NULL'",280],",",["T_WHITESPACE"," ",280],["T_VARIABLE","$field",280],",",["T_WHITESPACE"," ",280],["T_STRING","UnaryExpression",280],["T_DOUBLE_COLON","::",280],["T_STRING","POSTFIX",280],")",")",";",["T_WHITESPACE","\n    ",280],"}",["T_WHITESPACE","\n\n    ",281],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field LIKE value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",283],["T_WHITESPACE","\n    ",290],["T_PUBLIC","public",291],["T_WHITESPACE"," ",291],["T_FUNCTION","function",291],["T_WHITESPACE"," ",291],["T_STRING","like",291],"(",["T_VARIABLE","$field",291],",",["T_WHITESPACE"," ",291],["T_VARIABLE","$value",291],",",["T_WHITESPACE"," ",291],["T_VARIABLE","$type",291],["T_WHITESPACE"," ",291],"=",["T_WHITESPACE"," ",291],["T_STRING","null",291],")",["T_WHITESPACE","\n    ",291],"{",["T_WHITESPACE","\n        ",292],["T_IF","if",293],["T_WHITESPACE"," ",293],"(",["T_VARIABLE","$type",293],["T_WHITESPACE"," ",293],["T_IS_IDENTICAL","===",293],["T_WHITESPACE"," ",293],["T_STRING","null",293],")",["T_WHITESPACE"," ",293],"{",["T_WHITESPACE","\n            ",293],["T_VARIABLE","$type",294],["T_WHITESPACE"," ",294],"=",["T_WHITESPACE"," ",294],["T_VARIABLE","$this",294],["T_OBJECT_OPERATOR","->",294],["T_STRING","_calculateType",294],"(",["T_VARIABLE","$field",294],")",";",["T_WHITESPACE","\n        ",294],"}",["T_WHITESPACE","\n\n        ",295],["T_RETURN","return",297],["T_WHITESPACE"," ",297],["T_VARIABLE","$this",297],["T_OBJECT_OPERATOR","->",297],["T_STRING","add",297],"(",["T_NEW","new",297],["T_WHITESPACE"," ",297],["T_STRING","Comparison",297],"(",["T_VARIABLE","$field",297],",",["T_WHITESPACE"," ",297],["T_VARIABLE","$value",297],",",["T_WHITESPACE"," ",297],["T_VARIABLE","$type",297],",",["T_WHITESPACE"," ",297],["T_CONSTANT_ENCAPSED_STRING","'LIKE'",297],")",")",";",["T_WHITESPACE","\n    ",297],"}",["T_WHITESPACE","\n\n    ",298],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"field NOT LIKE value\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param mixed $value The value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",300],["T_WHITESPACE","\n    ",307],["T_PUBLIC","public",308],["T_WHITESPACE"," ",308],["T_FUNCTION","function",308],["T_WHITESPACE"," ",308],["T_STRING","notLike",308],"(",["T_VARIABLE","$field",308],",",["T_WHITESPACE"," ",308],["T_VARIABLE","$value",308],",",["T_WHITESPACE"," ",308],["T_VARIABLE","$type",308],["T_WHITESPACE"," ",308],"=",["T_WHITESPACE"," ",308],["T_STRING","null",308],")",["T_WHITESPACE","\n    ",308],"{",["T_WHITESPACE","\n        ",309],["T_IF","if",310],["T_WHITESPACE"," ",310],"(",["T_VARIABLE","$type",310],["T_WHITESPACE"," ",310],["T_IS_IDENTICAL","===",310],["T_WHITESPACE"," ",310],["T_STRING","null",310],")",["T_WHITESPACE"," ",310],"{",["T_WHITESPACE","\n            ",310],["T_VARIABLE","$type",311],["T_WHITESPACE"," ",311],"=",["T_WHITESPACE"," ",311],["T_VARIABLE","$this",311],["T_OBJECT_OPERATOR","->",311],["T_STRING","_calculateType",311],"(",["T_VARIABLE","$field",311],")",";",["T_WHITESPACE","\n        ",311],"}",["T_WHITESPACE","\n\n        ",312],["T_RETURN","return",314],["T_WHITESPACE"," ",314],["T_VARIABLE","$this",314],["T_OBJECT_OPERATOR","->",314],["T_STRING","add",314],"(",["T_NEW","new",314],["T_WHITESPACE"," ",314],["T_STRING","Comparison",314],"(",["T_VARIABLE","$field",314],",",["T_WHITESPACE"," ",314],["T_VARIABLE","$value",314],",",["T_WHITESPACE"," ",314],["T_VARIABLE","$type",314],",",["T_WHITESPACE"," ",314],["T_CONSTANT_ENCAPSED_STRING","'NOT LIKE'",314],")",")",";",["T_WHITESPACE","\n    ",314],"}",["T_WHITESPACE","\n\n    ",315],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form\n     * \"field IN (value1, value2)\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param string|array $values the value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",317],["T_WHITESPACE","\n    ",325],["T_PUBLIC","public",326],["T_WHITESPACE"," ",326],["T_FUNCTION","function",326],["T_WHITESPACE"," ",326],["T_STRING","in",326],"(",["T_VARIABLE","$field",326],",",["T_WHITESPACE"," ",326],["T_VARIABLE","$values",326],",",["T_WHITESPACE"," ",326],["T_VARIABLE","$type",326],["T_WHITESPACE"," ",326],"=",["T_WHITESPACE"," ",326],["T_STRING","null",326],")",["T_WHITESPACE","\n    ",326],"{",["T_WHITESPACE","\n        ",327],["T_IF","if",328],["T_WHITESPACE"," ",328],"(",["T_VARIABLE","$type",328],["T_WHITESPACE"," ",328],["T_IS_IDENTICAL","===",328],["T_WHITESPACE"," ",328],["T_STRING","null",328],")",["T_WHITESPACE"," ",328],"{",["T_WHITESPACE","\n            ",328],["T_VARIABLE","$type",329],["T_WHITESPACE"," ",329],"=",["T_WHITESPACE"," ",329],["T_VARIABLE","$this",329],["T_OBJECT_OPERATOR","->",329],["T_STRING","_calculateType",329],"(",["T_VARIABLE","$field",329],")",";",["T_WHITESPACE","\n        ",329],"}",["T_WHITESPACE","\n        ",330],["T_VARIABLE","$type",331],["T_WHITESPACE"," ",331],"=",["T_WHITESPACE"," ",331],["T_VARIABLE","$type",331],["T_WHITESPACE"," ",331],"?",":",["T_WHITESPACE"," ",331],["T_CONSTANT_ENCAPSED_STRING","'string'",331],";",["T_WHITESPACE","\n        ",331],["T_VARIABLE","$type",332],["T_WHITESPACE"," ",332],["T_CONCAT_EQUAL",".=",332],["T_WHITESPACE"," ",332],["T_CONSTANT_ENCAPSED_STRING","'[]'",332],";",["T_WHITESPACE","\n        ",332],["T_VARIABLE","$values",333],["T_WHITESPACE"," ",333],"=",["T_WHITESPACE"," ",333],["T_VARIABLE","$values",333],["T_WHITESPACE"," ",333],["T_INSTANCEOF","instanceof",333],["T_WHITESPACE"," ",333],["T_STRING","ExpressionInterface",333],["T_WHITESPACE"," ",333],"?",["T_WHITESPACE"," ",333],["T_VARIABLE","$values",333],["T_WHITESPACE"," ",333],":",["T_WHITESPACE"," ",333],["T_ARRAY_CAST","(array)",333],["T_VARIABLE","$values",333],";",["T_WHITESPACE","\n\n        ",333],["T_RETURN","return",335],["T_WHITESPACE"," ",335],["T_VARIABLE","$this",335],["T_OBJECT_OPERATOR","->",335],["T_STRING","add",335],"(",["T_NEW","new",335],["T_WHITESPACE"," ",335],["T_STRING","Comparison",335],"(",["T_VARIABLE","$field",335],",",["T_WHITESPACE"," ",335],["T_VARIABLE","$values",335],",",["T_WHITESPACE"," ",335],["T_VARIABLE","$type",335],",",["T_WHITESPACE"," ",335],["T_CONSTANT_ENCAPSED_STRING","'IN'",335],")",")",";",["T_WHITESPACE","\n    ",335],"}",["T_WHITESPACE","\n\n    ",336],["T_DOC_COMMENT","\/**\n     * Adds a new case expression to the expression object\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface $conditions The conditions to test. Must be a ExpressionInterface\n     * instance, or an array of ExpressionInterface instances.\n     * @param array|\\Cake\\Database\\ExpressionInterface $values associative array of values to be associated with the conditions\n     * passed in $conditions. If there are more $values than $conditions, the last $value is used as the `ELSE` value\n     * @param array $types associative array of types to be associated with the values\n     * passed in $values\n     * @return $this\n     *\/",338],["T_WHITESPACE","\n    ",348],["T_PUBLIC","public",349],["T_WHITESPACE"," ",349],["T_FUNCTION","function",349],["T_WHITESPACE"," ",349],["T_STRING","addCase",349],"(",["T_VARIABLE","$conditions",349],",",["T_WHITESPACE"," ",349],["T_VARIABLE","$values",349],["T_WHITESPACE"," ",349],"=",["T_WHITESPACE"," ",349],"[","]",",",["T_WHITESPACE"," ",349],["T_VARIABLE","$types",349],["T_WHITESPACE"," ",349],"=",["T_WHITESPACE"," ",349],"[","]",")",["T_WHITESPACE","\n    ",349],"{",["T_WHITESPACE","\n        ",350],["T_RETURN","return",351],["T_WHITESPACE"," ",351],["T_VARIABLE","$this",351],["T_OBJECT_OPERATOR","->",351],["T_STRING","add",351],"(",["T_NEW","new",351],["T_WHITESPACE"," ",351],["T_STRING","CaseExpression",351],"(",["T_VARIABLE","$conditions",351],",",["T_WHITESPACE"," ",351],["T_VARIABLE","$values",351],",",["T_WHITESPACE"," ",351],["T_VARIABLE","$types",351],")",")",";",["T_WHITESPACE","\n    ",351],"}",["T_WHITESPACE","\n\n    ",352],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form\n     * \"field NOT IN (value1, value2)\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field Database field to be compared against value\n     * @param array $values the value to be bound to $field for comparison\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",354],["T_WHITESPACE","\n    ",362],["T_PUBLIC","public",363],["T_WHITESPACE"," ",363],["T_FUNCTION","function",363],["T_WHITESPACE"," ",363],["T_STRING","notIn",363],"(",["T_VARIABLE","$field",363],",",["T_WHITESPACE"," ",363],["T_VARIABLE","$values",363],",",["T_WHITESPACE"," ",363],["T_VARIABLE","$type",363],["T_WHITESPACE"," ",363],"=",["T_WHITESPACE"," ",363],["T_STRING","null",363],")",["T_WHITESPACE","\n    ",363],"{",["T_WHITESPACE","\n        ",364],["T_IF","if",365],["T_WHITESPACE"," ",365],"(",["T_VARIABLE","$type",365],["T_WHITESPACE"," ",365],["T_IS_IDENTICAL","===",365],["T_WHITESPACE"," ",365],["T_STRING","null",365],")",["T_WHITESPACE"," ",365],"{",["T_WHITESPACE","\n            ",365],["T_VARIABLE","$type",366],["T_WHITESPACE"," ",366],"=",["T_WHITESPACE"," ",366],["T_VARIABLE","$this",366],["T_OBJECT_OPERATOR","->",366],["T_STRING","_calculateType",366],"(",["T_VARIABLE","$field",366],")",";",["T_WHITESPACE","\n        ",366],"}",["T_WHITESPACE","\n        ",367],["T_VARIABLE","$type",368],["T_WHITESPACE"," ",368],"=",["T_WHITESPACE"," ",368],["T_VARIABLE","$type",368],["T_WHITESPACE"," ",368],"?",":",["T_WHITESPACE"," ",368],["T_CONSTANT_ENCAPSED_STRING","'string'",368],";",["T_WHITESPACE","\n        ",368],["T_VARIABLE","$type",369],["T_WHITESPACE"," ",369],["T_CONCAT_EQUAL",".=",369],["T_WHITESPACE"," ",369],["T_CONSTANT_ENCAPSED_STRING","'[]'",369],";",["T_WHITESPACE","\n        ",369],["T_VARIABLE","$values",370],["T_WHITESPACE"," ",370],"=",["T_WHITESPACE"," ",370],["T_VARIABLE","$values",370],["T_WHITESPACE"," ",370],["T_INSTANCEOF","instanceof",370],["T_WHITESPACE"," ",370],["T_STRING","ExpressionInterface",370],["T_WHITESPACE"," ",370],"?",["T_WHITESPACE"," ",370],["T_VARIABLE","$values",370],["T_WHITESPACE"," ",370],":",["T_WHITESPACE"," ",370],["T_ARRAY_CAST","(array)",370],["T_VARIABLE","$values",370],";",["T_WHITESPACE","\n\n        ",370],["T_RETURN","return",372],["T_WHITESPACE"," ",372],["T_VARIABLE","$this",372],["T_OBJECT_OPERATOR","->",372],["T_STRING","add",372],"(",["T_NEW","new",372],["T_WHITESPACE"," ",372],["T_STRING","Comparison",372],"(",["T_VARIABLE","$field",372],",",["T_WHITESPACE"," ",372],["T_VARIABLE","$values",372],",",["T_WHITESPACE"," ",372],["T_VARIABLE","$type",372],",",["T_WHITESPACE"," ",372],["T_CONSTANT_ENCAPSED_STRING","'NOT IN'",372],")",")",";",["T_WHITESPACE","\n    ",372],"}",["T_WHITESPACE","\n\n    ",373],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"EXISTS (...)\".\n     *\n     * @param \\Cake\\Database\\ExpressionInterface $query the inner query\n     * @return $this\n     *\/",375],["T_WHITESPACE","\n    ",380],["T_PUBLIC","public",381],["T_WHITESPACE"," ",381],["T_FUNCTION","function",381],["T_WHITESPACE"," ",381],["T_STRING","exists",381],"(",["T_STRING","ExpressionInterface",381],["T_WHITESPACE"," ",381],["T_VARIABLE","$query",381],")",["T_WHITESPACE","\n    ",381],"{",["T_WHITESPACE","\n        ",382],["T_RETURN","return",383],["T_WHITESPACE"," ",383],["T_VARIABLE","$this",383],["T_OBJECT_OPERATOR","->",383],["T_STRING","add",383],"(",["T_NEW","new",383],["T_WHITESPACE"," ",383],["T_STRING","UnaryExpression",383],"(",["T_CONSTANT_ENCAPSED_STRING","'EXISTS'",383],",",["T_WHITESPACE"," ",383],["T_VARIABLE","$query",383],",",["T_WHITESPACE"," ",383],["T_STRING","UnaryExpression",383],["T_DOUBLE_COLON","::",383],["T_STRING","PREFIX",383],")",")",";",["T_WHITESPACE","\n    ",383],"}",["T_WHITESPACE","\n\n    ",384],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form \"NOT EXISTS (...)\".\n     *\n     * @param \\Cake\\Database\\ExpressionInterface $query the inner query\n     * @return $this\n     *\/",386],["T_WHITESPACE","\n    ",391],["T_PUBLIC","public",392],["T_WHITESPACE"," ",392],["T_FUNCTION","function",392],["T_WHITESPACE"," ",392],["T_STRING","notExists",392],"(",["T_STRING","ExpressionInterface",392],["T_WHITESPACE"," ",392],["T_VARIABLE","$query",392],")",["T_WHITESPACE","\n    ",392],"{",["T_WHITESPACE","\n        ",393],["T_RETURN","return",394],["T_WHITESPACE"," ",394],["T_VARIABLE","$this",394],["T_OBJECT_OPERATOR","->",394],["T_STRING","add",394],"(",["T_NEW","new",394],["T_WHITESPACE"," ",394],["T_STRING","UnaryExpression",394],"(",["T_CONSTANT_ENCAPSED_STRING","'NOT EXISTS'",394],",",["T_WHITESPACE"," ",394],["T_VARIABLE","$query",394],",",["T_WHITESPACE"," ",394],["T_STRING","UnaryExpression",394],["T_DOUBLE_COLON","::",394],["T_STRING","PREFIX",394],")",")",";",["T_WHITESPACE","\n    ",394],"}",["T_WHITESPACE","\n\n    ",395],["T_DOC_COMMENT","\/**\n     * Adds a new condition to the expression object in the form\n     * \"field BETWEEN from AND to\".\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $field The field name to compare for values in between the range.\n     * @param mixed $from The initial value of the range.\n     * @param mixed $to The ending value in the comparison range.\n     * @param string|null $type the type name for $value as configured using the Type map.\n     * @return $this\n     *\/",397],["T_WHITESPACE","\n    ",406],["T_PUBLIC","public",407],["T_WHITESPACE"," ",407],["T_FUNCTION","function",407],["T_WHITESPACE"," ",407],["T_STRING","between",407],"(",["T_VARIABLE","$field",407],",",["T_WHITESPACE"," ",407],["T_VARIABLE","$from",407],",",["T_WHITESPACE"," ",407],["T_VARIABLE","$to",407],",",["T_WHITESPACE"," ",407],["T_VARIABLE","$type",407],["T_WHITESPACE"," ",407],"=",["T_WHITESPACE"," ",407],["T_STRING","null",407],")",["T_WHITESPACE","\n    ",407],"{",["T_WHITESPACE","\n        ",408],["T_IF","if",409],["T_WHITESPACE"," ",409],"(",["T_VARIABLE","$type",409],["T_WHITESPACE"," ",409],["T_IS_IDENTICAL","===",409],["T_WHITESPACE"," ",409],["T_STRING","null",409],")",["T_WHITESPACE"," ",409],"{",["T_WHITESPACE","\n            ",409],["T_VARIABLE","$type",410],["T_WHITESPACE"," ",410],"=",["T_WHITESPACE"," ",410],["T_VARIABLE","$this",410],["T_OBJECT_OPERATOR","->",410],["T_STRING","_calculateType",410],"(",["T_VARIABLE","$field",410],")",";",["T_WHITESPACE","\n        ",410],"}",["T_WHITESPACE","\n\n        ",411],["T_RETURN","return",413],["T_WHITESPACE"," ",413],["T_VARIABLE","$this",413],["T_OBJECT_OPERATOR","->",413],["T_STRING","add",413],"(",["T_NEW","new",413],["T_WHITESPACE"," ",413],["T_STRING","BetweenExpression",413],"(",["T_VARIABLE","$field",413],",",["T_WHITESPACE"," ",413],["T_VARIABLE","$from",413],",",["T_WHITESPACE"," ",413],["T_VARIABLE","$to",413],",",["T_WHITESPACE"," ",413],["T_VARIABLE","$type",413],")",")",";",["T_WHITESPACE","\n    ",413],"}",["T_WHITESPACE","\n\n",414],["T_COMMENT","\/\/ @codingStandardsIgnoreStart\n",416],["T_WHITESPACE","    ",417],["T_DOC_COMMENT","\/**\n     * Returns a new QueryExpression object containing all the conditions passed\n     * and set up the conjunction to be \"AND\"\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions to be joined with AND\n     * @param array $types associative array of fields pointing to the type of the\n     * values that are being passed. Used for correctly binding values to statements.\n     * @return \\Cake\\Database\\Expression\\QueryExpression\n     *\/",417],["T_WHITESPACE","\n    ",425],["T_PUBLIC","public",426],["T_WHITESPACE"," ",426],["T_FUNCTION","function",426],["T_WHITESPACE"," ",426],["T_STRING","and_",426],"(",["T_VARIABLE","$conditions",426],",",["T_WHITESPACE"," ",426],["T_VARIABLE","$types",426],["T_WHITESPACE"," ",426],"=",["T_WHITESPACE"," ",426],"[","]",")",["T_WHITESPACE","\n    ",426],"{",["T_WHITESPACE","\n        ",427],["T_IF","if",428],["T_WHITESPACE"," ",428],"(",["T_VARIABLE","$this",428],["T_OBJECT_OPERATOR","->",428],["T_STRING","isCallable",428],"(",["T_VARIABLE","$conditions",428],")",")",["T_WHITESPACE"," ",428],"{",["T_WHITESPACE","\n            ",428],["T_RETURN","return",429],["T_WHITESPACE"," ",429],["T_VARIABLE","$conditions",429],"(",["T_NEW","new",429],["T_WHITESPACE"," ",429],["T_STRING","self",429],"(","[","]",",",["T_WHITESPACE"," ",429],["T_VARIABLE","$this",429],["T_OBJECT_OPERATOR","->",429],["T_STRING","typeMap",429],"(",")",["T_OBJECT_OPERATOR","->",429],["T_STRING","types",429],"(",["T_VARIABLE","$types",429],")",")",")",";",["T_WHITESPACE","\n        ",429],"}",["T_WHITESPACE","\n\n        ",430],["T_RETURN","return",432],["T_WHITESPACE"," ",432],["T_NEW","new",432],["T_WHITESPACE"," ",432],["T_STRING","self",432],"(",["T_VARIABLE","$conditions",432],",",["T_WHITESPACE"," ",432],["T_VARIABLE","$this",432],["T_OBJECT_OPERATOR","->",432],["T_STRING","typeMap",432],"(",")",["T_OBJECT_OPERATOR","->",432],["T_STRING","types",432],"(",["T_VARIABLE","$types",432],")",")",";",["T_WHITESPACE","\n    ",432],"}",["T_WHITESPACE","\n\n    ",433],["T_DOC_COMMENT","\/**\n     * Returns a new QueryExpression object containing all the conditions passed\n     * and set up the conjunction to be \"OR\"\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions to be joined with OR\n     * @param array $types associative array of fields pointing to the type of the\n     * values that are being passed. Used for correctly binding values to statements.\n     * @return \\Cake\\Database\\Expression\\QueryExpression\n     *\/",435],["T_WHITESPACE","\n    ",443],["T_PUBLIC","public",444],["T_WHITESPACE"," ",444],["T_FUNCTION","function",444],["T_WHITESPACE"," ",444],["T_STRING","or_",444],"(",["T_VARIABLE","$conditions",444],",",["T_WHITESPACE"," ",444],["T_VARIABLE","$types",444],["T_WHITESPACE"," ",444],"=",["T_WHITESPACE"," ",444],"[","]",")",["T_WHITESPACE","\n    ",444],"{",["T_WHITESPACE","\n        ",445],["T_IF","if",446],["T_WHITESPACE"," ",446],"(",["T_VARIABLE","$this",446],["T_OBJECT_OPERATOR","->",446],["T_STRING","isCallable",446],"(",["T_VARIABLE","$conditions",446],")",")",["T_WHITESPACE"," ",446],"{",["T_WHITESPACE","\n            ",446],["T_RETURN","return",447],["T_WHITESPACE"," ",447],["T_VARIABLE","$conditions",447],"(",["T_NEW","new",447],["T_WHITESPACE"," ",447],["T_STRING","self",447],"(","[","]",",",["T_WHITESPACE"," ",447],["T_VARIABLE","$this",447],["T_OBJECT_OPERATOR","->",447],["T_STRING","typeMap",447],"(",")",["T_OBJECT_OPERATOR","->",447],["T_STRING","types",447],"(",["T_VARIABLE","$types",447],")",",",["T_WHITESPACE"," ",447],["T_CONSTANT_ENCAPSED_STRING","'OR'",447],")",")",";",["T_WHITESPACE","\n        ",447],"}",["T_WHITESPACE","\n\n        ",448],["T_RETURN","return",450],["T_WHITESPACE"," ",450],["T_NEW","new",450],["T_WHITESPACE"," ",450],["T_STRING","self",450],"(",["T_VARIABLE","$conditions",450],",",["T_WHITESPACE"," ",450],["T_VARIABLE","$this",450],["T_OBJECT_OPERATOR","->",450],["T_STRING","typeMap",450],"(",")",["T_OBJECT_OPERATOR","->",450],["T_STRING","types",450],"(",["T_VARIABLE","$types",450],")",",",["T_WHITESPACE"," ",450],["T_CONSTANT_ENCAPSED_STRING","'OR'",450],")",";",["T_WHITESPACE","\n    ",450],"}",["T_WHITESPACE","\n",451],["T_COMMENT","\/\/ @codingStandardsIgnoreEnd\n",452],["T_WHITESPACE","\n    ",453],["T_DOC_COMMENT","\/**\n     * Adds a new set of conditions to this level of the tree and negates\n     * the final result by prepending a NOT, it will look like\n     * \"NOT ( (condition1) AND (conditions2) )\" conjunction depends on the one\n     * currently configured for this object.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions to be added and negated\n     * @param array $types associative array of fields pointing to the type of the\n     * values that are being passed. Used for correctly binding values to statements.\n     * @return $this\n     *\/",454],["T_WHITESPACE","\n    ",464],["T_PUBLIC","public",465],["T_WHITESPACE"," ",465],["T_FUNCTION","function",465],["T_WHITESPACE"," ",465],["T_STRING","not",465],"(",["T_VARIABLE","$conditions",465],",",["T_WHITESPACE"," ",465],["T_VARIABLE","$types",465],["T_WHITESPACE"," ",465],"=",["T_WHITESPACE"," ",465],"[","]",")",["T_WHITESPACE","\n    ",465],"{",["T_WHITESPACE","\n        ",466],["T_RETURN","return",467],["T_WHITESPACE"," ",467],["T_VARIABLE","$this",467],["T_OBJECT_OPERATOR","->",467],["T_STRING","add",467],"(","[",["T_CONSTANT_ENCAPSED_STRING","'NOT'",467],["T_WHITESPACE"," ",467],["T_DOUBLE_ARROW","=>",467],["T_WHITESPACE"," ",467],["T_VARIABLE","$conditions",467],"]",",",["T_WHITESPACE"," ",467],["T_VARIABLE","$types",467],")",";",["T_WHITESPACE","\n    ",467],"}",["T_WHITESPACE","\n\n    ",468],["T_DOC_COMMENT","\/**\n     * Returns the number of internal conditions that are stored in this expression.\n     * Useful to determine if this expression object is void or it will generate\n     * a non-empty string when compiled\n     *\n     * @return int\n     *\/",470],["T_WHITESPACE","\n    ",476],["T_PUBLIC","public",477],["T_WHITESPACE"," ",477],["T_FUNCTION","function",477],["T_WHITESPACE"," ",477],["T_STRING","count",477],"(",")",["T_WHITESPACE","\n    ",477],"{",["T_WHITESPACE","\n        ",478],["T_RETURN","return",479],["T_WHITESPACE"," ",479],["T_STRING","count",479],"(",["T_VARIABLE","$this",479],["T_OBJECT_OPERATOR","->",479],["T_STRING","_conditions",479],")",";",["T_WHITESPACE","\n    ",479],"}",["T_WHITESPACE","\n\n    ",480],["T_DOC_COMMENT","\/**\n     * Builds equal condition or assignment with identifier wrapping.\n     *\n     * @param string $left Left join condition field name.\n     * @param string $right Right join condition field name.\n     * @return $this\n     *\/",482],["T_WHITESPACE","\n    ",488],["T_PUBLIC","public",489],["T_WHITESPACE"," ",489],["T_FUNCTION","function",489],["T_WHITESPACE"," ",489],["T_STRING","equalFields",489],"(",["T_VARIABLE","$left",489],",",["T_WHITESPACE"," ",489],["T_VARIABLE","$right",489],")",["T_WHITESPACE","\n    ",489],"{",["T_WHITESPACE","\n        ",490],["T_VARIABLE","$wrapIdentifier",491],["T_WHITESPACE"," ",491],"=",["T_WHITESPACE"," ",491],["T_FUNCTION","function",491],["T_WHITESPACE"," ",491],"(",["T_VARIABLE","$field",491],")",["T_WHITESPACE"," ",491],"{",["T_WHITESPACE","\n            ",491],["T_IF","if",492],["T_WHITESPACE"," ",492],"(",["T_VARIABLE","$field",492],["T_WHITESPACE"," ",492],["T_INSTANCEOF","instanceof",492],["T_WHITESPACE"," ",492],["T_STRING","ExpressionInterface",492],")",["T_WHITESPACE"," ",492],"{",["T_WHITESPACE","\n                ",492],["T_RETURN","return",493],["T_WHITESPACE"," ",493],["T_VARIABLE","$field",493],";",["T_WHITESPACE","\n            ",493],"}",["T_WHITESPACE","\n\n            ",494],["T_RETURN","return",496],["T_WHITESPACE"," ",496],["T_NEW","new",496],["T_WHITESPACE"," ",496],["T_STRING","IdentifierExpression",496],"(",["T_VARIABLE","$field",496],")",";",["T_WHITESPACE","\n        ",496],"}",";",["T_WHITESPACE","\n\n        ",497],["T_RETURN","return",499],["T_WHITESPACE"," ",499],["T_VARIABLE","$this",499],["T_OBJECT_OPERATOR","->",499],["T_STRING","eq",499],"(",["T_VARIABLE","$wrapIdentifier",499],"(",["T_VARIABLE","$left",499],")",",",["T_WHITESPACE"," ",499],["T_VARIABLE","$wrapIdentifier",499],"(",["T_VARIABLE","$right",499],")",")",";",["T_WHITESPACE","\n    ",499],"}",["T_WHITESPACE","\n\n    ",500],["T_DOC_COMMENT","\/**\n     * Returns the string representation of this object so that it can be used in a\n     * SQL query. Note that values condition values are not included in the string,\n     * in their place placeholders are put and can be replaced by the quoted values\n     * accordingly.\n     *\n     * @param \\Cake\\Database\\ValueBinder $generator Placeholder generator object\n     * @return string\n     *\/",502],["T_WHITESPACE","\n    ",510],["T_PUBLIC","public",511],["T_WHITESPACE"," ",511],["T_FUNCTION","function",511],["T_WHITESPACE"," ",511],["T_STRING","sql",511],"(",["T_STRING","ValueBinder",511],["T_WHITESPACE"," ",511],["T_VARIABLE","$generator",511],")",["T_WHITESPACE","\n    ",511],"{",["T_WHITESPACE","\n        ",512],["T_VARIABLE","$len",513],["T_WHITESPACE"," ",513],"=",["T_WHITESPACE"," ",513],["T_VARIABLE","$this",513],["T_OBJECT_OPERATOR","->",513],["T_STRING","count",513],"(",")",";",["T_WHITESPACE","\n        ",513],["T_IF","if",514],["T_WHITESPACE"," ",514],"(",["T_VARIABLE","$len",514],["T_WHITESPACE"," ",514],["T_IS_IDENTICAL","===",514],["T_WHITESPACE"," ",514],["T_LNUMBER","0",514],")",["T_WHITESPACE"," ",514],"{",["T_WHITESPACE","\n            ",514],["T_RETURN","return",515],["T_WHITESPACE"," ",515],["T_CONSTANT_ENCAPSED_STRING","''",515],";",["T_WHITESPACE","\n        ",515],"}",["T_WHITESPACE","\n        ",516],["T_VARIABLE","$conjunction",517],["T_WHITESPACE"," ",517],"=",["T_WHITESPACE"," ",517],["T_VARIABLE","$this",517],["T_OBJECT_OPERATOR","->",517],["T_STRING","_conjunction",517],";",["T_WHITESPACE","\n        ",517],["T_VARIABLE","$template",518],["T_WHITESPACE"," ",518],"=",["T_WHITESPACE"," ",518],"(",["T_VARIABLE","$len",518],["T_WHITESPACE"," ",518],["T_IS_IDENTICAL","===",518],["T_WHITESPACE"," ",518],["T_LNUMBER","1",518],")",["T_WHITESPACE"," ",518],"?",["T_WHITESPACE"," ",518],["T_CONSTANT_ENCAPSED_STRING","'%s'",518],["T_WHITESPACE"," ",518],":",["T_WHITESPACE"," ",518],["T_CONSTANT_ENCAPSED_STRING","'(%s)'",518],";",["T_WHITESPACE","\n        ",518],["T_VARIABLE","$parts",519],["T_WHITESPACE"," ",519],"=",["T_WHITESPACE"," ",519],"[","]",";",["T_WHITESPACE","\n        ",519],["T_FOREACH","foreach",520],["T_WHITESPACE"," ",520],"(",["T_VARIABLE","$this",520],["T_OBJECT_OPERATOR","->",520],["T_STRING","_conditions",520],["T_WHITESPACE"," ",520],["T_AS","as",520],["T_WHITESPACE"," ",520],["T_VARIABLE","$part",520],")",["T_WHITESPACE"," ",520],"{",["T_WHITESPACE","\n            ",520],["T_IF","if",521],["T_WHITESPACE"," ",521],"(",["T_VARIABLE","$part",521],["T_WHITESPACE"," ",521],["T_INSTANCEOF","instanceof",521],["T_WHITESPACE"," ",521],["T_STRING","Query",521],")",["T_WHITESPACE"," ",521],"{",["T_WHITESPACE","\n                ",521],["T_VARIABLE","$part",522],["T_WHITESPACE"," ",522],"=",["T_WHITESPACE"," ",522],["T_CONSTANT_ENCAPSED_STRING","'('",522],["T_WHITESPACE"," ",522],".",["T_WHITESPACE"," ",522],["T_VARIABLE","$part",522],["T_OBJECT_OPERATOR","->",522],["T_STRING","sql",522],"(",["T_VARIABLE","$generator",522],")",["T_WHITESPACE"," ",522],".",["T_WHITESPACE"," ",522],["T_CONSTANT_ENCAPSED_STRING","')'",522],";",["T_WHITESPACE","\n            ",522],"}",["T_WHITESPACE"," ",523],["T_ELSEIF","elseif",523],["T_WHITESPACE"," ",523],"(",["T_VARIABLE","$part",523],["T_WHITESPACE"," ",523],["T_INSTANCEOF","instanceof",523],["T_WHITESPACE"," ",523],["T_STRING","ExpressionInterface",523],")",["T_WHITESPACE"," ",523],"{",["T_WHITESPACE","\n                ",523],["T_VARIABLE","$part",524],["T_WHITESPACE"," ",524],"=",["T_WHITESPACE"," ",524],["T_VARIABLE","$part",524],["T_OBJECT_OPERATOR","->",524],["T_STRING","sql",524],"(",["T_VARIABLE","$generator",524],")",";",["T_WHITESPACE","\n            ",524],"}",["T_WHITESPACE","\n            ",525],["T_IF","if",526],["T_WHITESPACE"," ",526],"(",["T_STRING","strlen",526],"(",["T_VARIABLE","$part",526],")",")",["T_WHITESPACE"," ",526],"{",["T_WHITESPACE","\n                ",526],["T_VARIABLE","$parts",527],"[","]",["T_WHITESPACE"," ",527],"=",["T_WHITESPACE"," ",527],["T_VARIABLE","$part",527],";",["T_WHITESPACE","\n            ",527],"}",["T_WHITESPACE","\n        ",528],"}",["T_WHITESPACE","\n\n        ",529],["T_RETURN","return",531],["T_WHITESPACE"," ",531],["T_STRING","sprintf",531],"(",["T_VARIABLE","$template",531],",",["T_WHITESPACE"," ",531],["T_STRING","implode",531],"(","\"",["T_ENCAPSED_AND_WHITESPACE"," ",531],["T_VARIABLE","$conjunction",531],["T_ENCAPSED_AND_WHITESPACE"," ",531],"\"",",",["T_WHITESPACE"," ",531],["T_VARIABLE","$parts",531],")",")",";",["T_WHITESPACE","\n    ",531],"}",["T_WHITESPACE","\n\n    ",532],["T_DOC_COMMENT","\/**\n     * Traverses the tree structure of this query expression by executing a callback\n     * function for each of the conditions that are included in this object.\n     * Useful for compiling the final expression, or doing\n     * introspection in the structure.\n     *\n     * Callback function receives as only argument an instance of a QueryExpression\n     *\n     * @param callable $callable The callable to apply to all sub-expressions.\n     * @return void\n     *\/",534],["T_WHITESPACE","\n    ",544],["T_PUBLIC","public",545],["T_WHITESPACE"," ",545],["T_FUNCTION","function",545],["T_WHITESPACE"," ",545],["T_STRING","traverse",545],"(",["T_CALLABLE","callable",545],["T_WHITESPACE"," ",545],["T_VARIABLE","$callable",545],")",["T_WHITESPACE","\n    ",545],"{",["T_WHITESPACE","\n        ",546],["T_FOREACH","foreach",547],["T_WHITESPACE"," ",547],"(",["T_VARIABLE","$this",547],["T_OBJECT_OPERATOR","->",547],["T_STRING","_conditions",547],["T_WHITESPACE"," ",547],["T_AS","as",547],["T_WHITESPACE"," ",547],["T_VARIABLE","$c",547],")",["T_WHITESPACE"," ",547],"{",["T_WHITESPACE","\n            ",547],["T_IF","if",548],["T_WHITESPACE"," ",548],"(",["T_VARIABLE","$c",548],["T_WHITESPACE"," ",548],["T_INSTANCEOF","instanceof",548],["T_WHITESPACE"," ",548],["T_STRING","ExpressionInterface",548],")",["T_WHITESPACE"," ",548],"{",["T_WHITESPACE","\n                ",548],["T_VARIABLE","$callable",549],"(",["T_VARIABLE","$c",549],")",";",["T_WHITESPACE","\n                ",549],["T_VARIABLE","$c",550],["T_OBJECT_OPERATOR","->",550],["T_STRING","traverse",550],"(",["T_VARIABLE","$callable",550],")",";",["T_WHITESPACE","\n            ",550],"}",["T_WHITESPACE","\n        ",551],"}",["T_WHITESPACE","\n    ",552],"}",["T_WHITESPACE","\n\n    ",553],["T_DOC_COMMENT","\/**\n     * Executes a callable function for each of the parts that form this expression.\n     *\n     * The callable function is required to return a value with which the currently\n     * visited part will be replaced. If the callable function returns null then\n     * the part will be discarded completely from this expression.\n     *\n     * The callback function will receive each of the conditions as first param and\n     * the key as second param. It is possible to declare the second parameter as\n     * passed by reference, this will enable you to change the key under which the\n     * modified part is stored.\n     *\n     * @param callable $callable The callable to apply to each part.\n     * @return $this\n     *\/",555],["T_WHITESPACE","\n    ",569],["T_PUBLIC","public",570],["T_WHITESPACE"," ",570],["T_FUNCTION","function",570],["T_WHITESPACE"," ",570],["T_STRING","iterateParts",570],"(",["T_CALLABLE","callable",570],["T_WHITESPACE"," ",570],["T_VARIABLE","$callable",570],")",["T_WHITESPACE","\n    ",570],"{",["T_WHITESPACE","\n        ",571],["T_VARIABLE","$parts",572],["T_WHITESPACE"," ",572],"=",["T_WHITESPACE"," ",572],"[","]",";",["T_WHITESPACE","\n        ",572],["T_FOREACH","foreach",573],["T_WHITESPACE"," ",573],"(",["T_VARIABLE","$this",573],["T_OBJECT_OPERATOR","->",573],["T_STRING","_conditions",573],["T_WHITESPACE"," ",573],["T_AS","as",573],["T_WHITESPACE"," ",573],["T_VARIABLE","$k",573],["T_WHITESPACE"," ",573],["T_DOUBLE_ARROW","=>",573],["T_WHITESPACE"," ",573],["T_VARIABLE","$c",573],")",["T_WHITESPACE"," ",573],"{",["T_WHITESPACE","\n            ",573],["T_VARIABLE","$key",574],["T_WHITESPACE"," ",574],"=","&",["T_WHITESPACE"," ",574],["T_VARIABLE","$k",574],";",["T_WHITESPACE","\n            ",574],["T_VARIABLE","$part",575],["T_WHITESPACE"," ",575],"=",["T_WHITESPACE"," ",575],["T_VARIABLE","$callable",575],"(",["T_VARIABLE","$c",575],",",["T_WHITESPACE"," ",575],["T_VARIABLE","$key",575],")",";",["T_WHITESPACE","\n            ",575],["T_IF","if",576],["T_WHITESPACE"," ",576],"(",["T_VARIABLE","$part",576],["T_WHITESPACE"," ",576],["T_IS_NOT_IDENTICAL","!==",576],["T_WHITESPACE"," ",576],["T_STRING","null",576],")",["T_WHITESPACE"," ",576],"{",["T_WHITESPACE","\n                ",576],["T_VARIABLE","$parts",577],"[",["T_VARIABLE","$key",577],"]",["T_WHITESPACE"," ",577],"=",["T_WHITESPACE"," ",577],["T_VARIABLE","$part",577],";",["T_WHITESPACE","\n            ",577],"}",["T_WHITESPACE","\n        ",578],"}",["T_WHITESPACE","\n        ",579],["T_VARIABLE","$this",580],["T_OBJECT_OPERATOR","->",580],["T_STRING","_conditions",580],["T_WHITESPACE"," ",580],"=",["T_WHITESPACE"," ",580],["T_VARIABLE","$parts",580],";",["T_WHITESPACE","\n\n        ",580],["T_RETURN","return",582],["T_WHITESPACE"," ",582],["T_VARIABLE","$this",582],";",["T_WHITESPACE","\n    ",582],"}",["T_WHITESPACE","\n\n    ",583],["T_DOC_COMMENT","\/**\n     * Helps calling the `and()` and `or()` methods transparently.\n     *\n     * @param string $method The method name.\n     * @param array $args The arguments to pass to the method.\n     * @return \\Cake\\Database\\Expression\\QueryExpression\n     * @throws \\BadMethodCallException\n     *\/",585],["T_WHITESPACE","\n    ",592],["T_PUBLIC","public",593],["T_WHITESPACE"," ",593],["T_FUNCTION","function",593],["T_WHITESPACE"," ",593],["T_STRING","__call",593],"(",["T_VARIABLE","$method",593],",",["T_WHITESPACE"," ",593],["T_VARIABLE","$args",593],")",["T_WHITESPACE","\n    ",593],"{",["T_WHITESPACE","\n        ",594],["T_IF","if",595],["T_WHITESPACE"," ",595],"(",["T_STRING","in_array",595],"(",["T_VARIABLE","$method",595],",",["T_WHITESPACE"," ",595],"[",["T_CONSTANT_ENCAPSED_STRING","'and'",595],",",["T_WHITESPACE"," ",595],["T_CONSTANT_ENCAPSED_STRING","'or'",595],"]",")",")",["T_WHITESPACE"," ",595],"{",["T_WHITESPACE","\n            ",595],["T_RETURN","return",596],["T_WHITESPACE"," ",596],["T_STRING","call_user_func_array",596],"(","[",["T_VARIABLE","$this",596],",",["T_WHITESPACE"," ",596],["T_VARIABLE","$method",596],["T_WHITESPACE"," ",596],".",["T_WHITESPACE"," ",596],["T_CONSTANT_ENCAPSED_STRING","'_'",596],"]",",",["T_WHITESPACE"," ",596],["T_VARIABLE","$args",596],")",";",["T_WHITESPACE","\n        ",596],"}",["T_WHITESPACE","\n        ",597],["T_THROW","throw",598],["T_WHITESPACE"," ",598],["T_NEW","new",598],["T_WHITESPACE"," ",598],["T_STRING","BadMethodCallException",598],"(",["T_STRING","sprintf",598],"(",["T_CONSTANT_ENCAPSED_STRING","'Method %s does not exist'",598],",",["T_WHITESPACE"," ",598],["T_VARIABLE","$method",598],")",")",";",["T_WHITESPACE","\n    ",598],"}",["T_WHITESPACE","\n\n    ",599],["T_DOC_COMMENT","\/**\n     * Check whether or not a callable is acceptable.\n     *\n     * We don't accept ['class', 'method'] style callbacks,\n     * as they often contain user input and arrays of strings\n     * are easy to sneak in.\n     *\n     * @param callable $c The callable to check.\n     * @return bool Valid callable.\n     *\/",601],["T_WHITESPACE","\n    ",610],["T_PUBLIC","public",611],["T_WHITESPACE"," ",611],["T_FUNCTION","function",611],["T_WHITESPACE"," ",611],["T_STRING","isCallable",611],"(",["T_VARIABLE","$c",611],")",["T_WHITESPACE","\n    ",611],"{",["T_WHITESPACE","\n        ",612],["T_IF","if",613],["T_WHITESPACE"," ",613],"(",["T_STRING","is_string",613],"(",["T_VARIABLE","$c",613],")",")",["T_WHITESPACE"," ",613],"{",["T_WHITESPACE","\n            ",613],["T_RETURN","return",614],["T_WHITESPACE"," ",614],["T_STRING","false",614],";",["T_WHITESPACE","\n        ",614],"}",["T_WHITESPACE","\n        ",615],["T_IF","if",616],["T_WHITESPACE"," ",616],"(",["T_STRING","is_object",616],"(",["T_VARIABLE","$c",616],")",["T_WHITESPACE"," ",616],["T_BOOLEAN_AND","&&",616],["T_WHITESPACE"," ",616],["T_STRING","is_callable",616],"(",["T_VARIABLE","$c",616],")",")",["T_WHITESPACE"," ",616],"{",["T_WHITESPACE","\n            ",616],["T_RETURN","return",617],["T_WHITESPACE"," ",617],["T_STRING","true",617],";",["T_WHITESPACE","\n        ",617],"}",["T_WHITESPACE","\n\n        ",618],["T_RETURN","return",620],["T_WHITESPACE"," ",620],["T_STRING","is_array",620],"(",["T_VARIABLE","$c",620],")",["T_WHITESPACE"," ",620],["T_BOOLEAN_AND","&&",620],["T_WHITESPACE"," ",620],["T_ISSET","isset",620],"(",["T_VARIABLE","$c",620],"[",["T_LNUMBER","0",620],"]",")",["T_WHITESPACE"," ",620],["T_BOOLEAN_AND","&&",620],["T_WHITESPACE"," ",620],["T_STRING","is_object",620],"(",["T_VARIABLE","$c",620],"[",["T_LNUMBER","0",620],"]",")",["T_WHITESPACE"," ",620],["T_BOOLEAN_AND","&&",620],["T_WHITESPACE"," ",620],["T_STRING","is_callable",620],"(",["T_VARIABLE","$c",620],")",";",["T_WHITESPACE","\n    ",620],"}",["T_WHITESPACE","\n\n    ",621],["T_DOC_COMMENT","\/**\n     * Returns true if this expression contains any other nested\n     * ExpressionInterface objects\n     *\n     * @return bool\n     *\/",623],["T_WHITESPACE","\n    ",628],["T_PUBLIC","public",629],["T_WHITESPACE"," ",629],["T_FUNCTION","function",629],["T_WHITESPACE"," ",629],["T_STRING","hasNestedExpression",629],"(",")",["T_WHITESPACE","\n    ",629],"{",["T_WHITESPACE","\n        ",630],["T_FOREACH","foreach",631],["T_WHITESPACE"," ",631],"(",["T_VARIABLE","$this",631],["T_OBJECT_OPERATOR","->",631],["T_STRING","_conditions",631],["T_WHITESPACE"," ",631],["T_AS","as",631],["T_WHITESPACE"," ",631],["T_VARIABLE","$c",631],")",["T_WHITESPACE"," ",631],"{",["T_WHITESPACE","\n            ",631],["T_IF","if",632],["T_WHITESPACE"," ",632],"(",["T_VARIABLE","$c",632],["T_WHITESPACE"," ",632],["T_INSTANCEOF","instanceof",632],["T_WHITESPACE"," ",632],["T_STRING","ExpressionInterface",632],")",["T_WHITESPACE"," ",632],"{",["T_WHITESPACE","\n                ",632],["T_RETURN","return",633],["T_WHITESPACE"," ",633],["T_STRING","true",633],";",["T_WHITESPACE","\n            ",633],"}",["T_WHITESPACE","\n        ",634],"}",["T_WHITESPACE","\n\n        ",635],["T_RETURN","return",637],["T_WHITESPACE"," ",637],["T_STRING","false",637],";",["T_WHITESPACE","\n    ",637],"}",["T_WHITESPACE","\n\n    ",638],["T_DOC_COMMENT","\/**\n     * Auxiliary function used for decomposing a nested array of conditions and build\n     * a tree structure inside this object to represent the full SQL expression.\n     * String conditions are stored directly in the conditions, while any other\n     * representation is wrapped around an adequate instance or of this class.\n     *\n     * @param array $conditions list of conditions to be stored in this object\n     * @param array $types list of types associated on fields referenced in $conditions\n     * @return void\n     *\/",640],["T_WHITESPACE","\n    ",649],["T_PROTECTED","protected",650],["T_WHITESPACE"," ",650],["T_FUNCTION","function",650],["T_WHITESPACE"," ",650],["T_STRING","_addConditions",650],"(",["T_ARRAY","array",650],["T_WHITESPACE"," ",650],["T_VARIABLE","$conditions",650],",",["T_WHITESPACE"," ",650],["T_ARRAY","array",650],["T_WHITESPACE"," ",650],["T_VARIABLE","$types",650],")",["T_WHITESPACE","\n    ",650],"{",["T_WHITESPACE","\n        ",651],["T_VARIABLE","$operators",652],["T_WHITESPACE"," ",652],"=",["T_WHITESPACE"," ",652],"[",["T_CONSTANT_ENCAPSED_STRING","'and'",652],",",["T_WHITESPACE"," ",652],["T_CONSTANT_ENCAPSED_STRING","'or'",652],",",["T_WHITESPACE"," ",652],["T_CONSTANT_ENCAPSED_STRING","'xor'",652],"]",";",["T_WHITESPACE","\n\n        ",652],["T_VARIABLE","$typeMap",654],["T_WHITESPACE"," ",654],"=",["T_WHITESPACE"," ",654],["T_VARIABLE","$this",654],["T_OBJECT_OPERATOR","->",654],["T_STRING","typeMap",654],"(",")",["T_OBJECT_OPERATOR","->",654],["T_STRING","types",654],"(",["T_VARIABLE","$types",654],")",";",["T_WHITESPACE","\n\n        ",654],["T_FOREACH","foreach",656],["T_WHITESPACE"," ",656],"(",["T_VARIABLE","$conditions",656],["T_WHITESPACE"," ",656],["T_AS","as",656],["T_WHITESPACE"," ",656],["T_VARIABLE","$k",656],["T_WHITESPACE"," ",656],["T_DOUBLE_ARROW","=>",656],["T_WHITESPACE"," ",656],["T_VARIABLE","$c",656],")",["T_WHITESPACE"," ",656],"{",["T_WHITESPACE","\n            ",656],["T_VARIABLE","$numericKey",657],["T_WHITESPACE"," ",657],"=",["T_WHITESPACE"," ",657],["T_STRING","is_numeric",657],"(",["T_VARIABLE","$k",657],")",";",["T_WHITESPACE","\n\n            ",657],["T_IF","if",659],["T_WHITESPACE"," ",659],"(",["T_VARIABLE","$numericKey",659],["T_WHITESPACE"," ",659],["T_BOOLEAN_AND","&&",659],["T_WHITESPACE"," ",659],["T_EMPTY","empty",659],"(",["T_VARIABLE","$c",659],")",")",["T_WHITESPACE"," ",659],"{",["T_WHITESPACE","\n                ",659],["T_CONTINUE","continue",660],";",["T_WHITESPACE","\n            ",660],"}",["T_WHITESPACE","\n\n            ",661],["T_IF","if",663],["T_WHITESPACE"," ",663],"(",["T_VARIABLE","$this",663],["T_OBJECT_OPERATOR","->",663],["T_STRING","isCallable",663],"(",["T_VARIABLE","$c",663],")",")",["T_WHITESPACE"," ",663],"{",["T_WHITESPACE","\n                ",663],["T_VARIABLE","$expr",664],["T_WHITESPACE"," ",664],"=",["T_WHITESPACE"," ",664],["T_NEW","new",664],["T_WHITESPACE"," ",664],["T_STRING","QueryExpression",664],"(","[","]",",",["T_WHITESPACE"," ",664],["T_VARIABLE","$typeMap",664],")",";",["T_WHITESPACE","\n                ",664],["T_VARIABLE","$c",665],["T_WHITESPACE"," ",665],"=",["T_WHITESPACE"," ",665],["T_VARIABLE","$c",665],"(",["T_VARIABLE","$expr",665],",",["T_WHITESPACE"," ",665],["T_VARIABLE","$this",665],")",";",["T_WHITESPACE","\n            ",665],"}",["T_WHITESPACE","\n\n            ",666],["T_IF","if",668],["T_WHITESPACE"," ",668],"(",["T_VARIABLE","$numericKey",668],["T_WHITESPACE"," ",668],["T_BOOLEAN_AND","&&",668],["T_WHITESPACE"," ",668],["T_STRING","is_string",668],"(",["T_VARIABLE","$c",668],")",")",["T_WHITESPACE"," ",668],"{",["T_WHITESPACE","\n                ",668],["T_VARIABLE","$this",669],["T_OBJECT_OPERATOR","->",669],["T_STRING","_conditions",669],"[","]",["T_WHITESPACE"," ",669],"=",["T_WHITESPACE"," ",669],["T_VARIABLE","$c",669],";",["T_WHITESPACE","\n                ",669],["T_CONTINUE","continue",670],";",["T_WHITESPACE","\n            ",670],"}",["T_WHITESPACE","\n\n            ",671],["T_IF","if",673],["T_WHITESPACE"," ",673],"(",["T_VARIABLE","$numericKey",673],["T_WHITESPACE"," ",673],["T_BOOLEAN_AND","&&",673],["T_WHITESPACE"," ",673],["T_STRING","is_array",673],"(",["T_VARIABLE","$c",673],")",["T_WHITESPACE"," ",673],["T_BOOLEAN_OR","||",673],["T_WHITESPACE"," ",673],["T_STRING","in_array",673],"(",["T_STRING","strtolower",673],"(",["T_VARIABLE","$k",673],")",",",["T_WHITESPACE"," ",673],["T_VARIABLE","$operators",673],")",")",["T_WHITESPACE"," ",673],"{",["T_WHITESPACE","\n                ",673],["T_VARIABLE","$this",674],["T_OBJECT_OPERATOR","->",674],["T_STRING","_conditions",674],"[","]",["T_WHITESPACE"," ",674],"=",["T_WHITESPACE"," ",674],["T_NEW","new",674],["T_WHITESPACE"," ",674],["T_STRING","self",674],"(",["T_VARIABLE","$c",674],",",["T_WHITESPACE"," ",674],["T_VARIABLE","$typeMap",674],",",["T_WHITESPACE"," ",674],["T_VARIABLE","$numericKey",674],["T_WHITESPACE"," ",674],"?",["T_WHITESPACE"," ",674],["T_CONSTANT_ENCAPSED_STRING","'AND'",674],["T_WHITESPACE"," ",674],":",["T_WHITESPACE"," ",674],["T_VARIABLE","$k",674],")",";",["T_WHITESPACE","\n                ",674],["T_CONTINUE","continue",675],";",["T_WHITESPACE","\n            ",675],"}",["T_WHITESPACE","\n\n            ",676],["T_IF","if",678],["T_WHITESPACE"," ",678],"(",["T_STRING","strtolower",678],"(",["T_VARIABLE","$k",678],")",["T_WHITESPACE"," ",678],["T_IS_IDENTICAL","===",678],["T_WHITESPACE"," ",678],["T_CONSTANT_ENCAPSED_STRING","'not'",678],")",["T_WHITESPACE"," ",678],"{",["T_WHITESPACE","\n                ",678],["T_VARIABLE","$this",679],["T_OBJECT_OPERATOR","->",679],["T_STRING","_conditions",679],"[","]",["T_WHITESPACE"," ",679],"=",["T_WHITESPACE"," ",679],["T_NEW","new",679],["T_WHITESPACE"," ",679],["T_STRING","UnaryExpression",679],"(",["T_CONSTANT_ENCAPSED_STRING","'NOT'",679],",",["T_WHITESPACE"," ",679],["T_NEW","new",679],["T_WHITESPACE"," ",679],["T_STRING","self",679],"(",["T_VARIABLE","$c",679],",",["T_WHITESPACE"," ",679],["T_VARIABLE","$typeMap",679],")",")",";",["T_WHITESPACE","\n                ",679],["T_CONTINUE","continue",680],";",["T_WHITESPACE","\n            ",680],"}",["T_WHITESPACE","\n\n            ",681],["T_IF","if",683],["T_WHITESPACE"," ",683],"(",["T_VARIABLE","$c",683],["T_WHITESPACE"," ",683],["T_INSTANCEOF","instanceof",683],["T_WHITESPACE"," ",683],["T_STRING","self",683],["T_WHITESPACE"," ",683],["T_BOOLEAN_AND","&&",683],["T_WHITESPACE"," ",683],["T_STRING","count",683],"(",["T_VARIABLE","$c",683],")",["T_WHITESPACE"," ",683],["T_IS_IDENTICAL","===",683],["T_WHITESPACE"," ",683],["T_LNUMBER","0",683],")",["T_WHITESPACE"," ",683],"{",["T_WHITESPACE","\n                ",683],["T_CONTINUE","continue",684],";",["T_WHITESPACE","\n            ",684],"}",["T_WHITESPACE","\n\n            ",685],["T_IF","if",687],["T_WHITESPACE"," ",687],"(",["T_VARIABLE","$numericKey",687],["T_WHITESPACE"," ",687],["T_BOOLEAN_AND","&&",687],["T_WHITESPACE"," ",687],["T_VARIABLE","$c",687],["T_WHITESPACE"," ",687],["T_INSTANCEOF","instanceof",687],["T_WHITESPACE"," ",687],["T_STRING","ExpressionInterface",687],")",["T_WHITESPACE"," ",687],"{",["T_WHITESPACE","\n                ",687],["T_VARIABLE","$this",688],["T_OBJECT_OPERATOR","->",688],["T_STRING","_conditions",688],"[","]",["T_WHITESPACE"," ",688],"=",["T_WHITESPACE"," ",688],["T_VARIABLE","$c",688],";",["T_WHITESPACE","\n                ",688],["T_CONTINUE","continue",689],";",["T_WHITESPACE","\n            ",689],"}",["T_WHITESPACE","\n\n            ",690],["T_IF","if",692],["T_WHITESPACE"," ",692],"(","!",["T_VARIABLE","$numericKey",692],")",["T_WHITESPACE"," ",692],"{",["T_WHITESPACE","\n                ",692],["T_VARIABLE","$this",693],["T_OBJECT_OPERATOR","->",693],["T_STRING","_conditions",693],"[","]",["T_WHITESPACE"," ",693],"=",["T_WHITESPACE"," ",693],["T_VARIABLE","$this",693],["T_OBJECT_OPERATOR","->",693],["T_STRING","_parseCondition",693],"(",["T_VARIABLE","$k",693],",",["T_WHITESPACE"," ",693],["T_VARIABLE","$c",693],")",";",["T_WHITESPACE","\n            ",693],"}",["T_WHITESPACE","\n        ",694],"}",["T_WHITESPACE","\n    ",695],"}",["T_WHITESPACE","\n\n    ",696],["T_DOC_COMMENT","\/**\n     * Parses a string conditions by trying to extract the operator inside it if any\n     * and finally returning either an adequate QueryExpression object or a plain\n     * string representation of the condition. This function is responsible for\n     * generating the placeholders and replacing the values by them, while storing\n     * the value elsewhere for future binding.\n     *\n     * @param string $field The value from with the actual field and operator will\n     * be extracted.\n     * @param mixed $value The value to be bound to a placeholder for the field\n     * @return string|\\Cake\\Database\\ExpressionInterface\n     *\/",698],["T_WHITESPACE","\n    ",709],["T_PROTECTED","protected",710],["T_WHITESPACE"," ",710],["T_FUNCTION","function",710],["T_WHITESPACE"," ",710],["T_STRING","_parseCondition",710],"(",["T_VARIABLE","$field",710],",",["T_WHITESPACE"," ",710],["T_VARIABLE","$value",710],")",["T_WHITESPACE","\n    ",710],"{",["T_WHITESPACE","\n        ",711],["T_VARIABLE","$operator",712],["T_WHITESPACE"," ",712],"=",["T_WHITESPACE"," ",712],["T_CONSTANT_ENCAPSED_STRING","'='",712],";",["T_WHITESPACE","\n        ",712],["T_VARIABLE","$expression",713],["T_WHITESPACE"," ",713],"=",["T_WHITESPACE"," ",713],["T_VARIABLE","$field",713],";",["T_WHITESPACE","\n        ",713],["T_VARIABLE","$parts",714],["T_WHITESPACE"," ",714],"=",["T_WHITESPACE"," ",714],["T_STRING","explode",714],"(",["T_CONSTANT_ENCAPSED_STRING","' '",714],",",["T_WHITESPACE"," ",714],["T_STRING","trim",714],"(",["T_VARIABLE","$field",714],")",",",["T_WHITESPACE"," ",714],["T_LNUMBER","2",714],")",";",["T_WHITESPACE","\n\n        ",714],["T_IF","if",716],["T_WHITESPACE"," ",716],"(",["T_STRING","count",716],"(",["T_VARIABLE","$parts",716],")",["T_WHITESPACE"," ",716],">",["T_WHITESPACE"," ",716],["T_LNUMBER","1",716],")",["T_WHITESPACE"," ",716],"{",["T_WHITESPACE","\n            ",716],["T_LIST","list",717],"(",["T_VARIABLE","$expression",717],",",["T_WHITESPACE"," ",717],["T_VARIABLE","$operator",717],")",["T_WHITESPACE"," ",717],"=",["T_WHITESPACE"," ",717],["T_VARIABLE","$parts",717],";",["T_WHITESPACE","\n        ",717],"}",["T_WHITESPACE","\n\n        ",718],["T_VARIABLE","$type",720],["T_WHITESPACE"," ",720],"=",["T_WHITESPACE"," ",720],["T_VARIABLE","$this",720],["T_OBJECT_OPERATOR","->",720],["T_STRING","typeMap",720],"(",")",["T_OBJECT_OPERATOR","->",720],["T_STRING","type",720],"(",["T_VARIABLE","$expression",720],")",";",["T_WHITESPACE","\n        ",720],["T_VARIABLE","$operator",721],["T_WHITESPACE"," ",721],"=",["T_WHITESPACE"," ",721],["T_STRING","strtolower",721],"(",["T_STRING","trim",721],"(",["T_VARIABLE","$operator",721],")",")",";",["T_WHITESPACE","\n\n        ",721],["T_VARIABLE","$typeMultiple",723],["T_WHITESPACE"," ",723],"=",["T_WHITESPACE"," ",723],["T_STRING","strpos",723],"(",["T_VARIABLE","$type",723],",",["T_WHITESPACE"," ",723],["T_CONSTANT_ENCAPSED_STRING","'[]'",723],")",["T_WHITESPACE"," ",723],["T_IS_NOT_IDENTICAL","!==",723],["T_WHITESPACE"," ",723],["T_STRING","false",723],";",["T_WHITESPACE","\n        ",723],["T_IF","if",724],["T_WHITESPACE"," ",724],"(",["T_STRING","in_array",724],"(",["T_VARIABLE","$operator",724],",",["T_WHITESPACE"," ",724],"[",["T_CONSTANT_ENCAPSED_STRING","'in'",724],",",["T_WHITESPACE"," ",724],["T_CONSTANT_ENCAPSED_STRING","'not in'",724],"]",")",["T_WHITESPACE"," ",724],["T_BOOLEAN_OR","||",724],["T_WHITESPACE"," ",724],["T_VARIABLE","$typeMultiple",724],")",["T_WHITESPACE"," ",724],"{",["T_WHITESPACE","\n            ",724],["T_VARIABLE","$type",725],["T_WHITESPACE"," ",725],"=",["T_WHITESPACE"," ",725],["T_VARIABLE","$type",725],["T_WHITESPACE"," ",725],"?",":",["T_WHITESPACE"," ",725],["T_CONSTANT_ENCAPSED_STRING","'string'",725],";",["T_WHITESPACE","\n            ",725],["T_VARIABLE","$type",726],["T_WHITESPACE"," ",726],["T_CONCAT_EQUAL",".=",726],["T_WHITESPACE"," ",726],["T_VARIABLE","$typeMultiple",726],["T_WHITESPACE"," ",726],"?",["T_WHITESPACE"," ",726],["T_STRING","null",726],["T_WHITESPACE"," ",726],":",["T_WHITESPACE"," ",726],["T_CONSTANT_ENCAPSED_STRING","'[]'",726],";",["T_WHITESPACE","\n            ",726],["T_VARIABLE","$operator",727],["T_WHITESPACE"," ",727],"=",["T_WHITESPACE"," ",727],["T_VARIABLE","$operator",727],["T_WHITESPACE"," ",727],["T_IS_IDENTICAL","===",727],["T_WHITESPACE"," ",727],["T_CONSTANT_ENCAPSED_STRING","'='",727],["T_WHITESPACE"," ",727],"?",["T_WHITESPACE"," ",727],["T_CONSTANT_ENCAPSED_STRING","'IN'",727],["T_WHITESPACE"," ",727],":",["T_WHITESPACE"," ",727],["T_VARIABLE","$operator",727],";",["T_WHITESPACE","\n            ",727],["T_VARIABLE","$operator",728],["T_WHITESPACE"," ",728],"=",["T_WHITESPACE"," ",728],["T_VARIABLE","$operator",728],["T_WHITESPACE"," ",728],["T_IS_IDENTICAL","===",728],["T_WHITESPACE"," ",728],["T_CONSTANT_ENCAPSED_STRING","'!='",728],["T_WHITESPACE"," ",728],"?",["T_WHITESPACE"," ",728],["T_CONSTANT_ENCAPSED_STRING","'NOT IN'",728],["T_WHITESPACE"," ",728],":",["T_WHITESPACE"," ",728],["T_VARIABLE","$operator",728],";",["T_WHITESPACE","\n            ",728],["T_VARIABLE","$typeMultiple",729],["T_WHITESPACE"," ",729],"=",["T_WHITESPACE"," ",729],["T_STRING","true",729],";",["T_WHITESPACE","\n        ",729],"}",["T_WHITESPACE","\n\n        ",730],["T_IF","if",732],["T_WHITESPACE"," ",732],"(",["T_VARIABLE","$typeMultiple",732],")",["T_WHITESPACE"," ",732],"{",["T_WHITESPACE","\n            ",732],["T_VARIABLE","$value",733],["T_WHITESPACE"," ",733],"=",["T_WHITESPACE"," ",733],["T_VARIABLE","$value",733],["T_WHITESPACE"," ",733],["T_INSTANCEOF","instanceof",733],["T_WHITESPACE"," ",733],["T_STRING","ExpressionInterface",733],["T_WHITESPACE"," ",733],"?",["T_WHITESPACE"," ",733],["T_VARIABLE","$value",733],["T_WHITESPACE"," ",733],":",["T_WHITESPACE"," ",733],["T_ARRAY_CAST","(array)",733],["T_VARIABLE","$value",733],";",["T_WHITESPACE","\n        ",733],"}",["T_WHITESPACE","\n\n        ",734],["T_IF","if",736],["T_WHITESPACE"," ",736],"(",["T_VARIABLE","$operator",736],["T_WHITESPACE"," ",736],["T_IS_IDENTICAL","===",736],["T_WHITESPACE"," ",736],["T_CONSTANT_ENCAPSED_STRING","'is'",736],["T_WHITESPACE"," ",736],["T_BOOLEAN_AND","&&",736],["T_WHITESPACE"," ",736],["T_VARIABLE","$value",736],["T_WHITESPACE"," ",736],["T_IS_IDENTICAL","===",736],["T_WHITESPACE"," ",736],["T_STRING","null",736],")",["T_WHITESPACE"," ",736],"{",["T_WHITESPACE","\n            ",736],["T_RETURN","return",737],["T_WHITESPACE"," ",737],["T_NEW","new",737],["T_WHITESPACE"," ",737],["T_STRING","UnaryExpression",737],"(",["T_WHITESPACE","\n                ",737],["T_CONSTANT_ENCAPSED_STRING","'IS NULL'",738],",",["T_WHITESPACE","\n                ",738],["T_NEW","new",739],["T_WHITESPACE"," ",739],["T_STRING","IdentifierExpression",739],"(",["T_VARIABLE","$expression",739],")",",",["T_WHITESPACE","\n                ",739],["T_STRING","UnaryExpression",740],["T_DOUBLE_COLON","::",740],["T_STRING","POSTFIX",740],["T_WHITESPACE","\n            ",740],")",";",["T_WHITESPACE","\n        ",741],"}",["T_WHITESPACE","\n\n        ",742],["T_IF","if",744],["T_WHITESPACE"," ",744],"(",["T_VARIABLE","$operator",744],["T_WHITESPACE"," ",744],["T_IS_IDENTICAL","===",744],["T_WHITESPACE"," ",744],["T_CONSTANT_ENCAPSED_STRING","'is not'",744],["T_WHITESPACE"," ",744],["T_BOOLEAN_AND","&&",744],["T_WHITESPACE"," ",744],["T_VARIABLE","$value",744],["T_WHITESPACE"," ",744],["T_IS_IDENTICAL","===",744],["T_WHITESPACE"," ",744],["T_STRING","null",744],")",["T_WHITESPACE"," ",744],"{",["T_WHITESPACE","\n            ",744],["T_RETURN","return",745],["T_WHITESPACE"," ",745],["T_NEW","new",745],["T_WHITESPACE"," ",745],["T_STRING","UnaryExpression",745],"(",["T_WHITESPACE","\n                ",745],["T_CONSTANT_ENCAPSED_STRING","'IS NOT NULL'",746],",",["T_WHITESPACE","\n                ",746],["T_NEW","new",747],["T_WHITESPACE"," ",747],["T_STRING","IdentifierExpression",747],"(",["T_VARIABLE","$expression",747],")",",",["T_WHITESPACE","\n                ",747],["T_STRING","UnaryExpression",748],["T_DOUBLE_COLON","::",748],["T_STRING","POSTFIX",748],["T_WHITESPACE","\n            ",748],")",";",["T_WHITESPACE","\n        ",749],"}",["T_WHITESPACE","\n\n        ",750],["T_IF","if",752],["T_WHITESPACE"," ",752],"(",["T_VARIABLE","$operator",752],["T_WHITESPACE"," ",752],["T_IS_IDENTICAL","===",752],["T_WHITESPACE"," ",752],["T_CONSTANT_ENCAPSED_STRING","'is'",752],["T_WHITESPACE"," ",752],["T_BOOLEAN_AND","&&",752],["T_WHITESPACE"," ",752],["T_VARIABLE","$value",752],["T_WHITESPACE"," ",752],["T_IS_NOT_IDENTICAL","!==",752],["T_WHITESPACE"," ",752],["T_STRING","null",752],")",["T_WHITESPACE"," ",752],"{",["T_WHITESPACE","\n            ",752],["T_VARIABLE","$operator",753],["T_WHITESPACE"," ",753],"=",["T_WHITESPACE"," ",753],["T_CONSTANT_ENCAPSED_STRING","'='",753],";",["T_WHITESPACE","\n        ",753],"}",["T_WHITESPACE","\n\n        ",754],["T_IF","if",756],["T_WHITESPACE"," ",756],"(",["T_VARIABLE","$operator",756],["T_WHITESPACE"," ",756],["T_IS_IDENTICAL","===",756],["T_WHITESPACE"," ",756],["T_CONSTANT_ENCAPSED_STRING","'is not'",756],["T_WHITESPACE"," ",756],["T_BOOLEAN_AND","&&",756],["T_WHITESPACE"," ",756],["T_VARIABLE","$value",756],["T_WHITESPACE"," ",756],["T_IS_NOT_IDENTICAL","!==",756],["T_WHITESPACE"," ",756],["T_STRING","null",756],")",["T_WHITESPACE"," ",756],"{",["T_WHITESPACE","\n            ",756],["T_VARIABLE","$operator",757],["T_WHITESPACE"," ",757],"=",["T_WHITESPACE"," ",757],["T_CONSTANT_ENCAPSED_STRING","'!='",757],";",["T_WHITESPACE","\n        ",757],"}",["T_WHITESPACE","\n\n        ",758],["T_RETURN","return",760],["T_WHITESPACE"," ",760],["T_NEW","new",760],["T_WHITESPACE"," ",760],["T_STRING","Comparison",760],"(",["T_VARIABLE","$expression",760],",",["T_WHITESPACE"," ",760],["T_VARIABLE","$value",760],",",["T_WHITESPACE"," ",760],["T_VARIABLE","$type",760],",",["T_WHITESPACE"," ",760],["T_VARIABLE","$operator",760],")",";",["T_WHITESPACE","\n    ",760],"}",["T_WHITESPACE","\n\n    ",761],["T_DOC_COMMENT","\/**\n     * Returns the type name for the passed field if it was stored in the typeMap\n     *\n     * @param string|\\Cake\\Database\\Expression\\IdentifierExpression $field The field name to get a type for.\n     * @return string|null The computed type or null, if the type is unknown.\n     *\/",763],["T_WHITESPACE","\n    ",768],["T_PROTECTED","protected",769],["T_WHITESPACE"," ",769],["T_FUNCTION","function",769],["T_WHITESPACE"," ",769],["T_STRING","_calculateType",769],"(",["T_VARIABLE","$field",769],")",["T_WHITESPACE","\n    ",769],"{",["T_WHITESPACE","\n        ",770],["T_VARIABLE","$field",771],["T_WHITESPACE"," ",771],"=",["T_WHITESPACE"," ",771],["T_VARIABLE","$field",771],["T_WHITESPACE"," ",771],["T_INSTANCEOF","instanceof",771],["T_WHITESPACE"," ",771],["T_STRING","IdentifierExpression",771],["T_WHITESPACE"," ",771],"?",["T_WHITESPACE"," ",771],["T_VARIABLE","$field",771],["T_OBJECT_OPERATOR","->",771],["T_STRING","getIdentifier",771],"(",")",["T_WHITESPACE"," ",771],":",["T_WHITESPACE"," ",771],["T_VARIABLE","$field",771],";",["T_WHITESPACE","\n        ",771],["T_IF","if",772],["T_WHITESPACE"," ",772],"(",["T_STRING","is_string",772],"(",["T_VARIABLE","$field",772],")",")",["T_WHITESPACE"," ",772],"{",["T_WHITESPACE","\n            ",772],["T_RETURN","return",773],["T_WHITESPACE"," ",773],["T_VARIABLE","$this",773],["T_OBJECT_OPERATOR","->",773],["T_STRING","typeMap",773],"(",")",["T_OBJECT_OPERATOR","->",773],["T_STRING","type",773],"(",["T_VARIABLE","$field",773],")",";",["T_WHITESPACE","\n        ",773],"}",["T_WHITESPACE","\n\n        ",774],["T_RETURN","return",776],["T_WHITESPACE"," ",776],["T_STRING","null",776],";",["T_WHITESPACE","\n    ",776],"}",["T_WHITESPACE","\n\n    ",777],["T_DOC_COMMENT","\/**\n     * Clone this object and its subtree of expressions.\n     *\n     * @return void\n     *\/",779],["T_WHITESPACE","\n    ",783],["T_PUBLIC","public",784],["T_WHITESPACE"," ",784],["T_FUNCTION","function",784],["T_WHITESPACE"," ",784],["T_STRING","__clone",784],"(",")",["T_WHITESPACE","\n    ",784],"{",["T_WHITESPACE","\n        ",785],["T_FOREACH","foreach",786],["T_WHITESPACE"," ",786],"(",["T_VARIABLE","$this",786],["T_OBJECT_OPERATOR","->",786],["T_STRING","_conditions",786],["T_WHITESPACE"," ",786],["T_AS","as",786],["T_WHITESPACE"," ",786],["T_VARIABLE","$i",786],["T_WHITESPACE"," ",786],["T_DOUBLE_ARROW","=>",786],["T_WHITESPACE"," ",786],["T_VARIABLE","$condition",786],")",["T_WHITESPACE"," ",786],"{",["T_WHITESPACE","\n            ",786],["T_IF","if",787],["T_WHITESPACE"," ",787],"(",["T_VARIABLE","$condition",787],["T_WHITESPACE"," ",787],["T_INSTANCEOF","instanceof",787],["T_WHITESPACE"," ",787],["T_STRING","ExpressionInterface",787],")",["T_WHITESPACE"," ",787],"{",["T_WHITESPACE","\n                ",787],["T_VARIABLE","$this",788],["T_OBJECT_OPERATOR","->",788],["T_STRING","_conditions",788],"[",["T_VARIABLE","$i",788],"]",["T_WHITESPACE"," ",788],"=",["T_WHITESPACE"," ",788],["T_CLONE","clone",788],["T_WHITESPACE"," ",788],["T_VARIABLE","$condition",788],";",["T_WHITESPACE","\n            ",788],"}",["T_WHITESPACE","\n        ",789],"}",["T_WHITESPACE","\n    ",790],"}",["T_WHITESPACE","\n",791],"}",["T_WHITESPACE","\n",792]]