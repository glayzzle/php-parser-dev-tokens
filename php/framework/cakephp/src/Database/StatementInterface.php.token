[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Represents a database statement. Concrete implementations\n * can either use PDOStatement or a native driver\n *\/",17],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","StatementInterface",21],["T_WHITESPACE","\n",21],"{",["T_WHITESPACE","\n\n    ",22],["T_DOC_COMMENT","\/**\n     * Assign a value to a positional or named variable in prepared query. If using\n     * positional variables you need to start with index one, if using named params then\n     * just use the name in any order.\n     *\n     * It is not allowed to combine positional and named variables in the same statement\n     *\n     * ### Examples:\n     *\n     * ```\n     * $statement->bindValue(1, 'a title');\n     * $statement->bindValue('active', true, 'boolean');\n     * $statement->bindValue(5, new \\DateTime(), 'date');\n     * ```\n     *\n     * @param string|int $column name or param position to be bound\n     * @param mixed $value The value to bind to variable in query\n     * @param string $type name of configured Type class\n     * @return void\n     *\/",24],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","bindValue",44],"(",["T_VARIABLE","$column",44],",",["T_WHITESPACE"," ",44],["T_VARIABLE","$value",44],",",["T_WHITESPACE"," ",44],["T_VARIABLE","$type",44],["T_WHITESPACE"," ",44],"=",["T_WHITESPACE"," ",44],["T_CONSTANT_ENCAPSED_STRING","'string'",44],")",";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * Closes a cursor in the database, freeing up any resources and memory\n     * allocated to it. In most cases you don't need to call this method, as it is\n     * automatically called after fetching all results from the result set.\n     *\n     * @return void\n     *\/",46],["T_WHITESPACE","\n    ",52],["T_PUBLIC","public",53],["T_WHITESPACE"," ",53],["T_FUNCTION","function",53],["T_WHITESPACE"," ",53],["T_STRING","closeCursor",53],"(",")",";",["T_WHITESPACE","\n\n    ",53],["T_DOC_COMMENT","\/**\n     * Returns the number of columns this statement's results will contain\n     *\n     * ### Example:\n     *\n     * ```\n     *  $statement = $connection->prepare('SELECT id, title from articles');\n     *  $statement->execute();\n     *  echo $statement->columnCount(); \/\/ outputs 2\n     * ```\n     *\n     * @return int\n     *\/",55],["T_WHITESPACE","\n    ",67],["T_PUBLIC","public",68],["T_WHITESPACE"," ",68],["T_FUNCTION","function",68],["T_WHITESPACE"," ",68],["T_STRING","columnCount",68],"(",")",";",["T_WHITESPACE","\n\n    ",68],["T_DOC_COMMENT","\/**\n     * Returns the error code for the last error that occurred when executing this statement\n     *\n     * @return int|string\n     *\/",70],["T_WHITESPACE","\n    ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","errorCode",75],"(",")",";",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Returns the error information for the last error that occurred when executing\n     * this statement\n     *\n     * @return array\n     *\/",77],["T_WHITESPACE","\n    ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_FUNCTION","function",83],["T_WHITESPACE"," ",83],["T_STRING","errorInfo",83],"(",")",";",["T_WHITESPACE","\n\n    ",83],["T_DOC_COMMENT","\/**\n     * Executes the statement by sending the SQL query to the database. It can optionally\n     * take an array or arguments to be bound to the query variables. Please note\n     * that binding parameters from this method will not perform any custom type conversion\n     * as it would normally happen when calling `bindValue`\n     *\n     * @param array|null $params list of values to be bound to query\n     * @return bool true on success, false otherwise\n     *\/",85],["T_WHITESPACE","\n    ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","execute",94],"(",["T_VARIABLE","$params",94],["T_WHITESPACE"," ",94],"=",["T_WHITESPACE"," ",94],["T_STRING","null",94],")",";",["T_WHITESPACE","\n\n    ",94],["T_DOC_COMMENT","\/**\n     * Returns the next row for the result set after executing this statement.\n     * Rows can be fetched to contain columns as names or positions. If no\n     * rows are left in result set, this method will return false\n     *\n     * ### Example:\n     *\n     * ```\n     *  $statement = $connection->prepare('SELECT id, title from articles');\n     *  $statement->execute();\n     *  print_r($statement->fetch('assoc')); \/\/ will show ['id' => 1, 'title' => 'a title']\n     * ```\n     *\n     * @param string $type 'num' for positional columns, assoc for named columns\n     * @return array|false Result array containing columns and values or false if no results\n     * are left\n     *\/",96],["T_WHITESPACE","\n    ",112],["T_PUBLIC","public",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","fetch",113],"(",["T_VARIABLE","$type",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_CONSTANT_ENCAPSED_STRING","'num'",113],")",";",["T_WHITESPACE","\n\n    ",113],["T_DOC_COMMENT","\/**\n     * Returns an array with all rows resulting from executing this statement\n     *\n     * ### Example:\n     *\n     * ```\n     *  $statement = $connection->prepare('SELECT id, title from articles');\n     *  $statement->execute();\n     *  print_r($statement->fetchAll('assoc')); \/\/ will show [0 => ['id' => 1, 'title' => 'a title']]\n     * ```\n     *\n     * @param string $type num for fetching columns as positional keys or assoc for column names as keys\n     * @return array list of all results from database for this statement\n     *\/",115],["T_WHITESPACE","\n    ",128],["T_PUBLIC","public",129],["T_WHITESPACE"," ",129],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","fetchAll",129],"(",["T_VARIABLE","$type",129],["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_CONSTANT_ENCAPSED_STRING","'num'",129],")",";",["T_WHITESPACE","\n\n    ",129],["T_DOC_COMMENT","\/**\n     * Returns the number of rows affected by this SQL statement\n     *\n     * ### Example:\n     *\n     * ```\n     *  $statement = $connection->prepare('SELECT id, title from articles');\n     *  $statement->execute();\n     *  print_r($statement->rowCount()); \/\/ will show 1\n     * ```\n     *\n     * @return int\n     *\/",131],["T_WHITESPACE","\n    ",143],["T_PUBLIC","public",144],["T_WHITESPACE"," ",144],["T_FUNCTION","function",144],["T_WHITESPACE"," ",144],["T_STRING","rowCount",144],"(",")",";",["T_WHITESPACE","\n\n    ",144],["T_DOC_COMMENT","\/**\n     * Statements can be passed as argument for count()\n     * to return the number for affected rows from last execution\n     *\n     * @return int\n     *\/",146],["T_WHITESPACE","\n    ",151],["T_PUBLIC","public",152],["T_WHITESPACE"," ",152],["T_FUNCTION","function",152],["T_WHITESPACE"," ",152],["T_STRING","count",152],"(",")",";",["T_WHITESPACE","\n\n    ",152],["T_DOC_COMMENT","\/**\n     * Binds a set of values to statement object with corresponding type\n     *\n     * @param array $params list of values to be bound\n     * @param array $types list of types to be used, keys should match those in $params\n     * @return void\n     *\/",154],["T_WHITESPACE","\n    ",160],["T_PUBLIC","public",161],["T_WHITESPACE"," ",161],["T_FUNCTION","function",161],["T_WHITESPACE"," ",161],["T_STRING","bind",161],"(",["T_VARIABLE","$params",161],",",["T_WHITESPACE"," ",161],["T_VARIABLE","$types",161],")",";",["T_WHITESPACE","\n\n    ",161],["T_DOC_COMMENT","\/**\n     * Returns the latest primary inserted using this statement\n     *\n     * @param string|null $table table name or sequence to get last insert value from\n     * @param string|null $column the name of the column representing the primary key\n     * @return string\n     *\/",163],["T_WHITESPACE","\n    ",169],["T_PUBLIC","public",170],["T_WHITESPACE"," ",170],["T_FUNCTION","function",170],["T_WHITESPACE"," ",170],["T_STRING","lastInsertId",170],"(",["T_VARIABLE","$table",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","null",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$column",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","null",170],")",";",["T_WHITESPACE","\n",170],"}",["T_WHITESPACE","\n",171]]