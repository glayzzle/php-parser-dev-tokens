[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Value binder class manages list of values bound to conditions.\n *\n * @internal\n *\/",17],["T_WHITESPACE","\n",21],["T_CLASS","class",22],["T_WHITESPACE"," ",22],["T_STRING","ValueBinder",22],["T_WHITESPACE","\n",22],"{",["T_WHITESPACE","\n\n    ",23],["T_DOC_COMMENT","\/**\n     * Array containing a list of bound values to the conditions on this\n     * object. Each array entry is another array structure containing the actual\n     * bound value, its type and the placeholder it is bound to.\n     *\n     * @var array\n     *\/",25],["T_WHITESPACE","\n    ",31],["T_PROTECTED","protected",32],["T_WHITESPACE"," ",32],["T_VARIABLE","$_bindings",32],["T_WHITESPACE"," ",32],"=",["T_WHITESPACE"," ",32],"[","]",";",["T_WHITESPACE","\n\n    ",32],["T_DOC_COMMENT","\/**\n     * A counter of the number of parameters bound in this expression object\n     *\n     * @var int\n     *\/",34],["T_WHITESPACE","\n    ",38],["T_PROTECTED","protected",39],["T_WHITESPACE"," ",39],["T_VARIABLE","$_bindingsCount",39],["T_WHITESPACE"," ",39],"=",["T_WHITESPACE"," ",39],["T_LNUMBER","0",39],";",["T_WHITESPACE","\n\n    ",39],["T_DOC_COMMENT","\/**\n     * Associates a query placeholder to a value and a type\n     *\n     * @param string|int $param placeholder to be replaced with quoted version\n     * of $value\n     * @param mixed $value The value to be bound\n     * @param string|int $type the mapped type name, used for casting when sending\n     * to database\n     * @return void\n     *\/",41],["T_WHITESPACE","\n    ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","bind",51],"(",["T_VARIABLE","$param",51],",",["T_WHITESPACE"," ",51],["T_VARIABLE","$value",51],",",["T_WHITESPACE"," ",51],["T_VARIABLE","$type",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],["T_CONSTANT_ENCAPSED_STRING","'string'",51],")",["T_WHITESPACE","\n    ",51],"{",["T_WHITESPACE","\n        ",52],["T_VARIABLE","$this",53],["T_OBJECT_OPERATOR","->",53],["T_STRING","_bindings",53],"[",["T_VARIABLE","$param",53],"]",["T_WHITESPACE"," ",53],"=",["T_WHITESPACE"," ",53],["T_STRING","compact",53],"(",["T_CONSTANT_ENCAPSED_STRING","'value'",53],",",["T_WHITESPACE"," ",53],["T_CONSTANT_ENCAPSED_STRING","'type'",53],")",["T_WHITESPACE"," ",53],"+",["T_WHITESPACE"," ",53],"[",["T_WHITESPACE","\n            ",53],["T_CONSTANT_ENCAPSED_STRING","'placeholder'",54],["T_WHITESPACE"," ",54],["T_DOUBLE_ARROW","=>",54],["T_WHITESPACE"," ",54],["T_STRING","is_int",54],"(",["T_VARIABLE","$param",54],")",["T_WHITESPACE"," ",54],"?",["T_WHITESPACE"," ",54],["T_VARIABLE","$param",54],["T_WHITESPACE"," ",54],":",["T_WHITESPACE"," ",54],["T_STRING","substr",54],"(",["T_VARIABLE","$param",54],",",["T_WHITESPACE"," ",54],["T_LNUMBER","1",54],")",["T_WHITESPACE","\n        ",54],"]",";",["T_WHITESPACE","\n    ",55],"}",["T_WHITESPACE","\n\n    ",56],["T_DOC_COMMENT","\/**\n     * Creates a unique placeholder name if the token provided does not start with \":\"\n     * otherwise, it will return the same string and internally increment the number\n     * of placeholders generated by this object.\n     *\n     * @param string $token string from which the placeholder will be derived from,\n     * if it starts with a colon, then the same string is returned\n     * @return string to be used as a placeholder in a query expression\n     *\/",58],["T_WHITESPACE","\n    ",66],["T_PUBLIC","public",67],["T_WHITESPACE"," ",67],["T_FUNCTION","function",67],["T_WHITESPACE"," ",67],["T_STRING","placeholder",67],"(",["T_VARIABLE","$token",67],")",["T_WHITESPACE","\n    ",67],"{",["T_WHITESPACE","\n        ",68],["T_VARIABLE","$number",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_VARIABLE","$this",69],["T_OBJECT_OPERATOR","->",69],["T_STRING","_bindingsCount",69],["T_INC","++",69],";",["T_WHITESPACE","\n        ",69],["T_IF","if",70],["T_WHITESPACE"," ",70],"(",["T_VARIABLE","$token",70],"[",["T_LNUMBER","0",70],"]",["T_WHITESPACE"," ",70],["T_IS_NOT_IDENTICAL","!==",70],["T_WHITESPACE"," ",70],["T_CONSTANT_ENCAPSED_STRING","':'",70],["T_WHITESPACE"," ",70],["T_BOOLEAN_OR","||",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$token",70],["T_WHITESPACE"," ",70],["T_IS_NOT_IDENTICAL","!==",70],["T_WHITESPACE"," ",70],["T_CONSTANT_ENCAPSED_STRING","'?'",70],")",["T_WHITESPACE"," ",70],"{",["T_WHITESPACE","\n            ",70],["T_VARIABLE","$token",71],["T_WHITESPACE"," ",71],"=",["T_WHITESPACE"," ",71],["T_STRING","sprintf",71],"(",["T_CONSTANT_ENCAPSED_STRING","':c%s'",71],",",["T_WHITESPACE"," ",71],["T_VARIABLE","$number",71],")",";",["T_WHITESPACE","\n        ",71],"}",["T_WHITESPACE","\n\n        ",72],["T_RETURN","return",74],["T_WHITESPACE"," ",74],["T_VARIABLE","$token",74],";",["T_WHITESPACE","\n    ",74],"}",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Creates unique named placeholders for each of the passed values\n     * and binds them with the specified type.\n     *\n     * @param array|\\Traversable $values The list of values to be bound\n     * @param string $type The type with which all values will be bound\n     * @return array with the placeholders to insert in the query\n     *\/",77],["T_WHITESPACE","\n    ",84],["T_PUBLIC","public",85],["T_WHITESPACE"," ",85],["T_FUNCTION","function",85],["T_WHITESPACE"," ",85],["T_STRING","generateManyNamed",85],"(",["T_VARIABLE","$values",85],",",["T_WHITESPACE"," ",85],["T_VARIABLE","$type",85],["T_WHITESPACE"," ",85],"=",["T_WHITESPACE"," ",85],["T_CONSTANT_ENCAPSED_STRING","'string'",85],")",["T_WHITESPACE","\n    ",85],"{",["T_WHITESPACE","\n        ",86],["T_VARIABLE","$placeholders",87],["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],"[","]",";",["T_WHITESPACE","\n        ",87],["T_FOREACH","foreach",88],["T_WHITESPACE"," ",88],"(",["T_VARIABLE","$values",88],["T_WHITESPACE"," ",88],["T_AS","as",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$k",88],["T_WHITESPACE"," ",88],["T_DOUBLE_ARROW","=>",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$value",88],")",["T_WHITESPACE"," ",88],"{",["T_WHITESPACE","\n            ",88],["T_VARIABLE","$param",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_CONSTANT_ENCAPSED_STRING","\":c\"",89],["T_WHITESPACE"," ",89],".",["T_WHITESPACE"," ",89],["T_VARIABLE","$this",89],["T_OBJECT_OPERATOR","->",89],["T_STRING","_bindingsCount",89],";",["T_WHITESPACE","\n            ",89],["T_VARIABLE","$this",90],["T_OBJECT_OPERATOR","->",90],["T_STRING","_bindings",90],"[",["T_VARIABLE","$param",90],"]",["T_WHITESPACE"," ",90],"=",["T_WHITESPACE"," ",90],"[",["T_WHITESPACE","\n                ",90],["T_CONSTANT_ENCAPSED_STRING","'value'",91],["T_WHITESPACE"," ",91],["T_DOUBLE_ARROW","=>",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$value",91],",",["T_WHITESPACE","\n                ",91],["T_CONSTANT_ENCAPSED_STRING","'type'",92],["T_WHITESPACE"," ",92],["T_DOUBLE_ARROW","=>",92],["T_WHITESPACE"," ",92],["T_VARIABLE","$type",92],",",["T_WHITESPACE","\n                ",92],["T_CONSTANT_ENCAPSED_STRING","'placeholder'",93],["T_WHITESPACE"," ",93],["T_DOUBLE_ARROW","=>",93],["T_WHITESPACE"," ",93],["T_STRING","substr",93],"(",["T_VARIABLE","$param",93],",",["T_WHITESPACE"," ",93],["T_LNUMBER","1",93],")",",",["T_WHITESPACE","\n            ",93],"]",";",["T_WHITESPACE","\n            ",94],["T_VARIABLE","$placeholders",95],"[",["T_VARIABLE","$k",95],"]",["T_WHITESPACE"," ",95],"=",["T_WHITESPACE"," ",95],["T_VARIABLE","$param",95],";",["T_WHITESPACE","\n            ",95],["T_VARIABLE","$this",96],["T_OBJECT_OPERATOR","->",96],["T_STRING","_bindingsCount",96],["T_INC","++",96],";",["T_WHITESPACE","\n        ",96],"}",["T_WHITESPACE","\n\n        ",97],["T_RETURN","return",99],["T_WHITESPACE"," ",99],["T_VARIABLE","$placeholders",99],";",["T_WHITESPACE","\n    ",99],"}",["T_WHITESPACE","\n\n    ",100],["T_DOC_COMMENT","\/**\n     * Returns all values bound to this expression object at this nesting level.\n     * Subexpression bound values will not be returned with this function.\n     *\n     * @return array\n     *\/",102],["T_WHITESPACE","\n    ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","bindings",108],"(",")",["T_WHITESPACE","\n    ",108],"{",["T_WHITESPACE","\n        ",109],["T_RETURN","return",110],["T_WHITESPACE"," ",110],["T_VARIABLE","$this",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","_bindings",110],";",["T_WHITESPACE","\n    ",110],"}",["T_WHITESPACE","\n\n    ",111],["T_DOC_COMMENT","\/**\n     * Clears any bindings that were previously registered\n     *\n     * @return void\n     *\/",113],["T_WHITESPACE","\n    ",117],["T_PUBLIC","public",118],["T_WHITESPACE"," ",118],["T_FUNCTION","function",118],["T_WHITESPACE"," ",118],["T_STRING","reset",118],"(",")",["T_WHITESPACE","\n    ",118],"{",["T_WHITESPACE","\n        ",119],["T_VARIABLE","$this",120],["T_OBJECT_OPERATOR","->",120],["T_STRING","_bindings",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],"[","]",";",["T_WHITESPACE","\n        ",120],["T_VARIABLE","$this",121],["T_OBJECT_OPERATOR","->",121],["T_STRING","_bindingsCount",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_LNUMBER","0",121],";",["T_WHITESPACE","\n    ",121],"}",["T_WHITESPACE","\n\n    ",122],["T_DOC_COMMENT","\/**\n     * Resets the bindings count without clearing previously bound values\n     *\n     * @return void\n     *\/",124],["T_WHITESPACE","\n    ",128],["T_PUBLIC","public",129],["T_WHITESPACE"," ",129],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","resetCount",129],"(",")",["T_WHITESPACE","\n    ",129],"{",["T_WHITESPACE","\n        ",130],["T_VARIABLE","$this",131],["T_OBJECT_OPERATOR","->",131],["T_STRING","_bindingsCount",131],["T_WHITESPACE"," ",131],"=",["T_WHITESPACE"," ",131],["T_LNUMBER","0",131],";",["T_WHITESPACE","\n    ",131],"}",["T_WHITESPACE","\n\n    ",132],["T_DOC_COMMENT","\/**\n     * Binds all the stored values in this object to the passed statement.\n     *\n     * @param \\Cake\\Database\\StatementInterface $statement The statement to add parameters to.\n     * @return void\n     *\/",134],["T_WHITESPACE","\n    ",139],["T_PUBLIC","public",140],["T_WHITESPACE"," ",140],["T_FUNCTION","function",140],["T_WHITESPACE"," ",140],["T_STRING","attachTo",140],"(",["T_VARIABLE","$statement",140],")",["T_WHITESPACE","\n    ",140],"{",["T_WHITESPACE","\n        ",141],["T_VARIABLE","$bindings",142],["T_WHITESPACE"," ",142],"=",["T_WHITESPACE"," ",142],["T_VARIABLE","$this",142],["T_OBJECT_OPERATOR","->",142],["T_STRING","bindings",142],"(",")",";",["T_WHITESPACE","\n        ",142],["T_IF","if",143],["T_WHITESPACE"," ",143],"(",["T_EMPTY","empty",143],"(",["T_VARIABLE","$bindings",143],")",")",["T_WHITESPACE"," ",143],"{",["T_WHITESPACE","\n            ",143],["T_RETURN","return",144],";",["T_WHITESPACE","\n        ",144],"}",["T_WHITESPACE","\n        ",145],["T_VARIABLE","$params",146],["T_WHITESPACE"," ",146],"=",["T_WHITESPACE"," ",146],["T_VARIABLE","$types",146],["T_WHITESPACE"," ",146],"=",["T_WHITESPACE"," ",146],"[","]",";",["T_WHITESPACE","\n        ",146],["T_FOREACH","foreach",147],["T_WHITESPACE"," ",147],"(",["T_VARIABLE","$bindings",147],["T_WHITESPACE"," ",147],["T_AS","as",147],["T_WHITESPACE"," ",147],["T_VARIABLE","$b",147],")",["T_WHITESPACE"," ",147],"{",["T_WHITESPACE","\n            ",147],["T_VARIABLE","$statement",148],["T_OBJECT_OPERATOR","->",148],["T_STRING","bindValue",148],"(",["T_VARIABLE","$b",148],"[",["T_CONSTANT_ENCAPSED_STRING","'placeholder'",148],"]",",",["T_WHITESPACE"," ",148],["T_VARIABLE","$b",148],"[",["T_CONSTANT_ENCAPSED_STRING","'value'",148],"]",",",["T_WHITESPACE"," ",148],["T_VARIABLE","$b",148],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",148],"]",")",";",["T_WHITESPACE","\n        ",148],"}",["T_WHITESPACE","\n    ",149],"}",["T_WHITESPACE","\n",150],"}",["T_WHITESPACE","\n",151]]