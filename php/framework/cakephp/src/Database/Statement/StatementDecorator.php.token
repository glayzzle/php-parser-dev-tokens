[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Statement",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Database",17],["T_NS_SEPARATOR","\\",17],["T_STRING","StatementInterface",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Database",18],["T_NS_SEPARATOR","\\",18],["T_STRING","TypeConverterTrait",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Countable",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","IteratorAggregate",20],";",["T_WHITESPACE","\n\n",20],["T_DOC_COMMENT","\/**\n * Represents a database statement. Statements contains queries that can be\n * executed multiple times by binding different values on each call. This class\n * also helps convert values to their valid representation for the corresponding\n * types.\n *\n * This class is but a decorator of an actual statement implementation, such as\n * PDOStatement.\n *\/",22],["T_WHITESPACE","\n",30],["T_CLASS","class",31],["T_WHITESPACE"," ",31],["T_STRING","StatementDecorator",31],["T_WHITESPACE"," ",31],["T_IMPLEMENTS","implements",31],["T_WHITESPACE"," ",31],["T_STRING","StatementInterface",31],",",["T_WHITESPACE"," ",31],["T_STRING","Countable",31],",",["T_WHITESPACE"," ",31],["T_STRING","IteratorAggregate",31],["T_WHITESPACE","\n",31],"{",["T_WHITESPACE","\n\n    ",32],["T_USE","use",34],["T_WHITESPACE"," ",34],["T_STRING","TypeConverterTrait",34],";",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Statement instance implementation, such as PDOStatement\n     * or any other custom implementation.\n     *\n     * @var mixed\n     *\/",36],["T_WHITESPACE","\n    ",41],["T_PROTECTED","protected",42],["T_WHITESPACE"," ",42],["T_VARIABLE","$_statement",42],";",["T_WHITESPACE","\n\n    ",42],["T_DOC_COMMENT","\/**\n     * Reference to the driver object associated to this statement.\n     *\n     * @var \\Cake\\Database\\Driver\n     *\/",44],["T_WHITESPACE","\n    ",48],["T_PROTECTED","protected",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$_driver",49],";",["T_WHITESPACE","\n\n    ",49],["T_DOC_COMMENT","\/**\n     * Whether or not this statement has already been executed\n     *\n     * @var bool\n     *\/",51],["T_WHITESPACE","\n    ",55],["T_PROTECTED","protected",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$_hasExecuted",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],["T_STRING","false",56],";",["T_WHITESPACE","\n\n    ",56],["T_DOC_COMMENT","\/**\n     * Constructor\n     *\n     * @param \\Cake\\Database\\StatementInterface|null $statement Statement implementation such as PDOStatement\n     * @param \\Cake\\Database\\Driver|null $driver Driver instance\n     *\/",58],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","__construct",64],"(",["T_VARIABLE","$statement",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_STRING","null",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$driver",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_STRING","null",64],")",["T_WHITESPACE","\n    ",64],"{",["T_WHITESPACE","\n        ",65],["T_VARIABLE","$this",66],["T_OBJECT_OPERATOR","->",66],["T_STRING","_statement",66],["T_WHITESPACE"," ",66],"=",["T_WHITESPACE"," ",66],["T_VARIABLE","$statement",66],";",["T_WHITESPACE","\n        ",66],["T_VARIABLE","$this",67],["T_OBJECT_OPERATOR","->",67],["T_STRING","_driver",67],["T_WHITESPACE"," ",67],"=",["T_WHITESPACE"," ",67],["T_VARIABLE","$driver",67],";",["T_WHITESPACE","\n    ",67],"}",["T_WHITESPACE","\n\n    ",68],["T_DOC_COMMENT","\/**\n     * Magic getter to return $queryString as read-only.\n     *\n     * @param string $property internal property to get\n     * @return mixed\n     *\/",70],["T_WHITESPACE","\n    ",75],["T_PUBLIC","public",76],["T_WHITESPACE"," ",76],["T_FUNCTION","function",76],["T_WHITESPACE"," ",76],["T_STRING","__get",76],"(",["T_VARIABLE","$property",76],")",["T_WHITESPACE","\n    ",76],"{",["T_WHITESPACE","\n        ",77],["T_IF","if",78],["T_WHITESPACE"," ",78],"(",["T_VARIABLE","$property",78],["T_WHITESPACE"," ",78],["T_IS_IDENTICAL","===",78],["T_WHITESPACE"," ",78],["T_CONSTANT_ENCAPSED_STRING","'queryString'",78],")",["T_WHITESPACE"," ",78],"{",["T_WHITESPACE","\n            ",78],["T_RETURN","return",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$this",79],["T_OBJECT_OPERATOR","->",79],["T_STRING","_statement",79],["T_OBJECT_OPERATOR","->",79],["T_STRING","queryString",79],";",["T_WHITESPACE","\n        ",79],"}",["T_WHITESPACE","\n    ",80],"}",["T_WHITESPACE","\n\n    ",81],["T_DOC_COMMENT","\/**\n     * Assign a value to a positional or named variable in prepared query. If using\n     * positional variables you need to start with index one, if using named params then\n     * just use the name in any order.\n     *\n     * It is not allowed to combine positional and named variables in the same statement.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $statement->bindValue(1, 'a title');\n     * $statement->bindValue('active', true, 'boolean');\n     * $statement->bindValue(5, new \\DateTime(), 'date');\n     * ```\n     *\n     * @param string|int $column name or param position to be bound\n     * @param mixed $value The value to bind to variable in query\n     * @param string $type name of configured Type class\n     * @return void\n     *\/",83],["T_WHITESPACE","\n    ",102],["T_PUBLIC","public",103],["T_WHITESPACE"," ",103],["T_FUNCTION","function",103],["T_WHITESPACE"," ",103],["T_STRING","bindValue",103],"(",["T_VARIABLE","$column",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$value",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$type",103],["T_WHITESPACE"," ",103],"=",["T_WHITESPACE"," ",103],["T_CONSTANT_ENCAPSED_STRING","'string'",103],")",["T_WHITESPACE","\n    ",103],"{",["T_WHITESPACE","\n        ",104],["T_VARIABLE","$this",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","_statement",105],["T_OBJECT_OPERATOR","->",105],["T_STRING","bindValue",105],"(",["T_VARIABLE","$column",105],",",["T_WHITESPACE"," ",105],["T_VARIABLE","$value",105],",",["T_WHITESPACE"," ",105],["T_VARIABLE","$type",105],")",";",["T_WHITESPACE","\n    ",105],"}",["T_WHITESPACE","\n\n    ",106],["T_DOC_COMMENT","\/**\n     * Closes a cursor in the database, freeing up any resources and memory\n     * allocated to it. In most cases you don't need to call this method, as it is\n     * automatically called after fetching all results from the result set.\n     *\n     * @return void\n     *\/",108],["T_WHITESPACE","\n    ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","closeCursor",115],"(",")",["T_WHITESPACE","\n    ",115],"{",["T_WHITESPACE","\n        ",116],["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","_statement",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","closeCursor",117],"(",")",";",["T_WHITESPACE","\n    ",117],"}",["T_WHITESPACE","\n\n    ",118],["T_DOC_COMMENT","\/**\n     * Returns the number of columns this statement's results will contain.\n     *\n     * ### Example:\n     *\n     * ```\n     * $statement = $connection->prepare('SELECT id, title from articles');\n     * $statement->execute();\n     * echo $statement->columnCount(); \/\/ outputs 2\n     * ```\n     *\n     * @return int\n     *\/",120],["T_WHITESPACE","\n    ",132],["T_PUBLIC","public",133],["T_WHITESPACE"," ",133],["T_FUNCTION","function",133],["T_WHITESPACE"," ",133],["T_STRING","columnCount",133],"(",")",["T_WHITESPACE","\n    ",133],"{",["T_WHITESPACE","\n        ",134],["T_RETURN","return",135],["T_WHITESPACE"," ",135],["T_VARIABLE","$this",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","_statement",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","columnCount",135],"(",")",";",["T_WHITESPACE","\n    ",135],"}",["T_WHITESPACE","\n\n    ",136],["T_DOC_COMMENT","\/**\n     * Returns the error code for the last error that occurred when executing this statement.\n     *\n     * @return int|string\n     *\/",138],["T_WHITESPACE","\n    ",142],["T_PUBLIC","public",143],["T_WHITESPACE"," ",143],["T_FUNCTION","function",143],["T_WHITESPACE"," ",143],["T_STRING","errorCode",143],"(",")",["T_WHITESPACE","\n    ",143],"{",["T_WHITESPACE","\n        ",144],["T_RETURN","return",145],["T_WHITESPACE"," ",145],["T_VARIABLE","$this",145],["T_OBJECT_OPERATOR","->",145],["T_STRING","_statement",145],["T_OBJECT_OPERATOR","->",145],["T_STRING","errorCode",145],"(",")",";",["T_WHITESPACE","\n    ",145],"}",["T_WHITESPACE","\n\n    ",146],["T_DOC_COMMENT","\/**\n     * Returns the error information for the last error that occurred when executing\n     * this statement.\n     *\n     * @return array\n     *\/",148],["T_WHITESPACE","\n    ",153],["T_PUBLIC","public",154],["T_WHITESPACE"," ",154],["T_FUNCTION","function",154],["T_WHITESPACE"," ",154],["T_STRING","errorInfo",154],"(",")",["T_WHITESPACE","\n    ",154],"{",["T_WHITESPACE","\n        ",155],["T_RETURN","return",156],["T_WHITESPACE"," ",156],["T_VARIABLE","$this",156],["T_OBJECT_OPERATOR","->",156],["T_STRING","_statement",156],["T_OBJECT_OPERATOR","->",156],["T_STRING","errorInfo",156],"(",")",";",["T_WHITESPACE","\n    ",156],"}",["T_WHITESPACE","\n\n    ",157],["T_DOC_COMMENT","\/**\n     * Executes the statement by sending the SQL query to the database. It can optionally\n     * take an array or arguments to be bound to the query variables. Please note\n     * that binding parameters from this method will not perform any custom type conversion\n     * as it would normally happen when calling `bindValue`.\n     *\n     * @param array|null $params list of values to be bound to query\n     * @return bool true on success, false otherwise\n     *\/",159],["T_WHITESPACE","\n    ",167],["T_PUBLIC","public",168],["T_WHITESPACE"," ",168],["T_FUNCTION","function",168],["T_WHITESPACE"," ",168],["T_STRING","execute",168],"(",["T_VARIABLE","$params",168],["T_WHITESPACE"," ",168],"=",["T_WHITESPACE"," ",168],["T_STRING","null",168],")",["T_WHITESPACE","\n    ",168],"{",["T_WHITESPACE","\n        ",169],["T_VARIABLE","$this",170],["T_OBJECT_OPERATOR","->",170],["T_STRING","_hasExecuted",170],["T_WHITESPACE"," ",170],"=",["T_WHITESPACE"," ",170],["T_STRING","true",170],";",["T_WHITESPACE","\n\n        ",170],["T_RETURN","return",172],["T_WHITESPACE"," ",172],["T_VARIABLE","$this",172],["T_OBJECT_OPERATOR","->",172],["T_STRING","_statement",172],["T_OBJECT_OPERATOR","->",172],["T_STRING","execute",172],"(",["T_VARIABLE","$params",172],")",";",["T_WHITESPACE","\n    ",172],"}",["T_WHITESPACE","\n\n    ",173],["T_DOC_COMMENT","\/**\n     * Returns the next row for the result set after executing this statement.\n     * Rows can be fetched to contain columns as names or positions. If no\n     * rows are left in result set, this method will return false.\n     *\n     * ### Example:\n     *\n     * ```\n     * $statement = $connection->prepare('SELECT id, title from articles');\n     * $statement->execute();\n     * print_r($statement->fetch('assoc')); \/\/ will show ['id' => 1, 'title' => 'a title']\n     * ```\n     *\n     * @param string $type 'num' for positional columns, assoc for named columns\n     * @return array|false Result array containing columns and values or false if no results\n     * are left\n     *\/",175],["T_WHITESPACE","\n    ",191],["T_PUBLIC","public",192],["T_WHITESPACE"," ",192],["T_FUNCTION","function",192],["T_WHITESPACE"," ",192],["T_STRING","fetch",192],"(",["T_VARIABLE","$type",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_CONSTANT_ENCAPSED_STRING","'num'",192],")",["T_WHITESPACE","\n    ",192],"{",["T_WHITESPACE","\n        ",193],["T_RETURN","return",194],["T_WHITESPACE"," ",194],["T_VARIABLE","$this",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","_statement",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","fetch",194],"(",["T_VARIABLE","$type",194],")",";",["T_WHITESPACE","\n    ",194],"}",["T_WHITESPACE","\n\n    ",195],["T_DOC_COMMENT","\/**\n     * Returns an array with all rows resulting from executing this statement.\n     *\n     * ### Example:\n     *\n     * ```\n     * $statement = $connection->prepare('SELECT id, title from articles');\n     * $statement->execute();\n     * print_r($statement->fetchAll('assoc')); \/\/ will show [0 => ['id' => 1, 'title' => 'a title']]\n     * ```\n     *\n     * @param string $type num for fetching columns as positional keys or assoc for column names as keys\n     * @return array List of all results from database for this statement\n     *\/",197],["T_WHITESPACE","\n    ",210],["T_PUBLIC","public",211],["T_WHITESPACE"," ",211],["T_FUNCTION","function",211],["T_WHITESPACE"," ",211],["T_STRING","fetchAll",211],"(",["T_VARIABLE","$type",211],["T_WHITESPACE"," ",211],"=",["T_WHITESPACE"," ",211],["T_CONSTANT_ENCAPSED_STRING","'num'",211],")",["T_WHITESPACE","\n    ",211],"{",["T_WHITESPACE","\n        ",212],["T_RETURN","return",213],["T_WHITESPACE"," ",213],["T_VARIABLE","$this",213],["T_OBJECT_OPERATOR","->",213],["T_STRING","_statement",213],["T_OBJECT_OPERATOR","->",213],["T_STRING","fetchAll",213],"(",["T_VARIABLE","$type",213],")",";",["T_WHITESPACE","\n    ",213],"}",["T_WHITESPACE","\n\n    ",214],["T_DOC_COMMENT","\/**\n     * Returns the number of rows affected by this SQL statement.\n     *\n     * ### Example:\n     *\n     * ```\n     * $statement = $connection->prepare('SELECT id, title from articles');\n     * $statement->execute();\n     * print_r($statement->rowCount()); \/\/ will show 1\n     * ```\n     *\n     * @return int\n     *\/",216],["T_WHITESPACE","\n    ",228],["T_PUBLIC","public",229],["T_WHITESPACE"," ",229],["T_FUNCTION","function",229],["T_WHITESPACE"," ",229],["T_STRING","rowCount",229],"(",")",["T_WHITESPACE","\n    ",229],"{",["T_WHITESPACE","\n        ",230],["T_RETURN","return",231],["T_WHITESPACE"," ",231],["T_VARIABLE","$this",231],["T_OBJECT_OPERATOR","->",231],["T_STRING","_statement",231],["T_OBJECT_OPERATOR","->",231],["T_STRING","rowCount",231],"(",")",";",["T_WHITESPACE","\n    ",231],"}",["T_WHITESPACE","\n\n    ",232],["T_DOC_COMMENT","\/**\n     * Statements are iterable as arrays, this method will return\n     * the iterator object for traversing all items in the result.\n     *\n     * ### Example:\n     *\n     * ```\n     * $statement = $connection->prepare('SELECT id, title from articles');\n     * foreach ($statement as $row) {\n     *   \/\/do stuff\n     * }\n     * ```\n     *\n     * @return \\Iterator\n     *\/",234],["T_WHITESPACE","\n    ",248],["T_PUBLIC","public",249],["T_WHITESPACE"," ",249],["T_FUNCTION","function",249],["T_WHITESPACE"," ",249],["T_STRING","getIterator",249],"(",")",["T_WHITESPACE","\n    ",249],"{",["T_WHITESPACE","\n        ",250],["T_IF","if",251],["T_WHITESPACE"," ",251],"(","!",["T_VARIABLE","$this",251],["T_OBJECT_OPERATOR","->",251],["T_STRING","_hasExecuted",251],")",["T_WHITESPACE"," ",251],"{",["T_WHITESPACE","\n            ",251],["T_VARIABLE","$this",252],["T_OBJECT_OPERATOR","->",252],["T_STRING","execute",252],"(",")",";",["T_WHITESPACE","\n        ",252],"}",["T_WHITESPACE","\n\n        ",253],["T_RETURN","return",255],["T_WHITESPACE"," ",255],["T_VARIABLE","$this",255],["T_OBJECT_OPERATOR","->",255],["T_STRING","_statement",255],";",["T_WHITESPACE","\n    ",255],"}",["T_WHITESPACE","\n\n    ",256],["T_DOC_COMMENT","\/**\n     * Statements can be passed as argument for count() to return the number\n     * for affected rows from last execution.\n     *\n     * @return int\n     *\/",258],["T_WHITESPACE","\n    ",263],["T_PUBLIC","public",264],["T_WHITESPACE"," ",264],["T_FUNCTION","function",264],["T_WHITESPACE"," ",264],["T_STRING","count",264],"(",")",["T_WHITESPACE","\n    ",264],"{",["T_WHITESPACE","\n        ",265],["T_RETURN","return",266],["T_WHITESPACE"," ",266],["T_VARIABLE","$this",266],["T_OBJECT_OPERATOR","->",266],["T_STRING","rowCount",266],"(",")",";",["T_WHITESPACE","\n    ",266],"}",["T_WHITESPACE","\n\n    ",267],["T_DOC_COMMENT","\/**\n     * Binds a set of values to statement object with corresponding type.\n     *\n     * @param array $params list of values to be bound\n     * @param array $types list of types to be used, keys should match those in $params\n     * @return void\n     *\/",269],["T_WHITESPACE","\n    ",275],["T_PUBLIC","public",276],["T_WHITESPACE"," ",276],["T_FUNCTION","function",276],["T_WHITESPACE"," ",276],["T_STRING","bind",276],"(",["T_VARIABLE","$params",276],",",["T_WHITESPACE"," ",276],["T_VARIABLE","$types",276],")",["T_WHITESPACE","\n    ",276],"{",["T_WHITESPACE","\n        ",277],["T_IF","if",278],["T_WHITESPACE"," ",278],"(",["T_EMPTY","empty",278],"(",["T_VARIABLE","$params",278],")",")",["T_WHITESPACE"," ",278],"{",["T_WHITESPACE","\n            ",278],["T_RETURN","return",279],";",["T_WHITESPACE","\n        ",279],"}",["T_WHITESPACE","\n\n        ",280],["T_VARIABLE","$anonymousParams",282],["T_WHITESPACE"," ",282],"=",["T_WHITESPACE"," ",282],["T_STRING","is_int",282],"(",["T_STRING","key",282],"(",["T_VARIABLE","$params",282],")",")",["T_WHITESPACE"," ",282],"?",["T_WHITESPACE"," ",282],["T_STRING","true",282],["T_WHITESPACE"," ",282],":",["T_WHITESPACE"," ",282],["T_STRING","false",282],";",["T_WHITESPACE","\n        ",282],["T_VARIABLE","$offset",283],["T_WHITESPACE"," ",283],"=",["T_WHITESPACE"," ",283],["T_LNUMBER","1",283],";",["T_WHITESPACE","\n        ",283],["T_FOREACH","foreach",284],["T_WHITESPACE"," ",284],"(",["T_VARIABLE","$params",284],["T_WHITESPACE"," ",284],["T_AS","as",284],["T_WHITESPACE"," ",284],["T_VARIABLE","$index",284],["T_WHITESPACE"," ",284],["T_DOUBLE_ARROW","=>",284],["T_WHITESPACE"," ",284],["T_VARIABLE","$value",284],")",["T_WHITESPACE"," ",284],"{",["T_WHITESPACE","\n            ",284],["T_VARIABLE","$type",285],["T_WHITESPACE"," ",285],"=",["T_WHITESPACE"," ",285],["T_STRING","null",285],";",["T_WHITESPACE","\n            ",285],["T_IF","if",286],["T_WHITESPACE"," ",286],"(",["T_ISSET","isset",286],"(",["T_VARIABLE","$types",286],"[",["T_VARIABLE","$index",286],"]",")",")",["T_WHITESPACE"," ",286],"{",["T_WHITESPACE","\n                ",286],["T_VARIABLE","$type",287],["T_WHITESPACE"," ",287],"=",["T_WHITESPACE"," ",287],["T_VARIABLE","$types",287],"[",["T_VARIABLE","$index",287],"]",";",["T_WHITESPACE","\n            ",287],"}",["T_WHITESPACE","\n            ",288],["T_IF","if",289],["T_WHITESPACE"," ",289],"(",["T_VARIABLE","$anonymousParams",289],")",["T_WHITESPACE"," ",289],"{",["T_WHITESPACE","\n                ",289],["T_VARIABLE","$index",290],["T_WHITESPACE"," ",290],["T_PLUS_EQUAL","+=",290],["T_WHITESPACE"," ",290],["T_VARIABLE","$offset",290],";",["T_WHITESPACE","\n            ",290],"}",["T_WHITESPACE","\n            ",291],["T_VARIABLE","$this",292],["T_OBJECT_OPERATOR","->",292],["T_STRING","bindValue",292],"(",["T_VARIABLE","$index",292],",",["T_WHITESPACE"," ",292],["T_VARIABLE","$value",292],",",["T_WHITESPACE"," ",292],["T_VARIABLE","$type",292],")",";",["T_WHITESPACE","\n        ",292],"}",["T_WHITESPACE","\n    ",293],"}",["T_WHITESPACE","\n\n    ",294],["T_DOC_COMMENT","\/**\n     * Returns the latest primary inserted using this statement.\n     *\n     * @param string|null $table table name or sequence to get last insert value from\n     * @param string|null $column the name of the column representing the primary key\n     * @return string\n     *\/",296],["T_WHITESPACE","\n    ",302],["T_PUBLIC","public",303],["T_WHITESPACE"," ",303],["T_FUNCTION","function",303],["T_WHITESPACE"," ",303],["T_STRING","lastInsertId",303],"(",["T_VARIABLE","$table",303],["T_WHITESPACE"," ",303],"=",["T_WHITESPACE"," ",303],["T_STRING","null",303],",",["T_WHITESPACE"," ",303],["T_VARIABLE","$column",303],["T_WHITESPACE"," ",303],"=",["T_WHITESPACE"," ",303],["T_STRING","null",303],")",["T_WHITESPACE","\n    ",303],"{",["T_WHITESPACE","\n        ",304],["T_VARIABLE","$row",305],["T_WHITESPACE"," ",305],"=",["T_WHITESPACE"," ",305],["T_STRING","null",305],";",["T_WHITESPACE","\n        ",305],["T_IF","if",306],["T_WHITESPACE"," ",306],"(",["T_VARIABLE","$column",306],["T_WHITESPACE"," ",306],["T_BOOLEAN_AND","&&",306],["T_WHITESPACE"," ",306],["T_VARIABLE","$this",306],["T_OBJECT_OPERATOR","->",306],["T_STRING","columnCount",306],"(",")",")",["T_WHITESPACE"," ",306],"{",["T_WHITESPACE","\n            ",306],["T_VARIABLE","$row",307],["T_WHITESPACE"," ",307],"=",["T_WHITESPACE"," ",307],["T_VARIABLE","$this",307],["T_OBJECT_OPERATOR","->",307],["T_STRING","fetch",307],"(",["T_CONSTANT_ENCAPSED_STRING","'assoc'",307],")",";",["T_WHITESPACE","\n        ",307],"}",["T_WHITESPACE","\n        ",308],["T_IF","if",309],["T_WHITESPACE"," ",309],"(",["T_ISSET","isset",309],"(",["T_VARIABLE","$row",309],"[",["T_VARIABLE","$column",309],"]",")",")",["T_WHITESPACE"," ",309],"{",["T_WHITESPACE","\n            ",309],["T_RETURN","return",310],["T_WHITESPACE"," ",310],["T_VARIABLE","$row",310],"[",["T_VARIABLE","$column",310],"]",";",["T_WHITESPACE","\n        ",310],"}",["T_WHITESPACE","\n\n        ",311],["T_RETURN","return",313],["T_WHITESPACE"," ",313],["T_VARIABLE","$this",313],["T_OBJECT_OPERATOR","->",313],["T_STRING","_driver",313],["T_OBJECT_OPERATOR","->",313],["T_STRING","lastInsertId",313],"(",["T_VARIABLE","$table",313],",",["T_WHITESPACE"," ",313],["T_VARIABLE","$column",313],")",";",["T_WHITESPACE","\n    ",313],"}",["T_WHITESPACE","\n\n    ",314],["T_DOC_COMMENT","\/**\n     * Returns the statement object that was decorated by this class.\n     *\n     * @return \\Cake\\Database\\StatementInterface\n     *\/",316],["T_WHITESPACE","\n    ",320],["T_PUBLIC","public",321],["T_WHITESPACE"," ",321],["T_FUNCTION","function",321],["T_WHITESPACE"," ",321],["T_STRING","getInnerStatement",321],"(",")",["T_WHITESPACE","\n    ",321],"{",["T_WHITESPACE","\n        ",322],["T_RETURN","return",323],["T_WHITESPACE"," ",323],["T_VARIABLE","$this",323],["T_OBJECT_OPERATOR","->",323],["T_STRING","_statement",323],";",["T_WHITESPACE","\n    ",323],"}",["T_WHITESPACE","\n",324],"}",["T_WHITESPACE","\n",325]]