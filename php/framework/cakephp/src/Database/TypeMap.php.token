[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Implements default and single-use mappings for columns to their associated types\n *\/",17],["T_WHITESPACE","\n",19],["T_CLASS","class",20],["T_WHITESPACE"," ",20],["T_STRING","TypeMap",20],["T_WHITESPACE","\n",20],"{",["T_WHITESPACE","\n\n    ",21],["T_DOC_COMMENT","\/**\n     * Associative array with the default fields and the related types this query might contain.\n     *\n     * Used to avoid repetition when calling multiple functions inside this class that\n     * may require a custom type for a specific field.\n     *\n     * @var array\n     *\/",23],["T_WHITESPACE","\n    ",30],["T_PROTECTED","protected",31],["T_WHITESPACE"," ",31],["T_VARIABLE","$_defaults",31],";",["T_WHITESPACE","\n\n    ",31],["T_DOC_COMMENT","\/**\n     * Associative array with the fields and the related types that override defaults this query might contain\n     *\n     * Used to avoid repetition when calling multiple functions inside this class that\n     * may require a custom type for a specific field.\n     *\n     * @var array\n     *\/",33],["T_WHITESPACE","\n    ",40],["T_PROTECTED","protected",41],["T_WHITESPACE"," ",41],["T_VARIABLE","$_types",41],["T_WHITESPACE"," ",41],"=",["T_WHITESPACE"," ",41],"[","]",";",["T_WHITESPACE","\n\n    ",41],["T_DOC_COMMENT","\/**\n     * Creates an instance with the given defaults\n     *\n     * @param array $defaults The defaults to use.\n     *\/",43],["T_WHITESPACE","\n    ",47],["T_PUBLIC","public",48],["T_WHITESPACE"," ",48],["T_FUNCTION","function",48],["T_WHITESPACE"," ",48],["T_STRING","__construct",48],"(",["T_ARRAY","array",48],["T_WHITESPACE"," ",48],["T_VARIABLE","$defaults",48],["T_WHITESPACE"," ",48],"=",["T_WHITESPACE"," ",48],"[","]",")",["T_WHITESPACE","\n    ",48],"{",["T_WHITESPACE","\n        ",49],["T_VARIABLE","$this",50],["T_OBJECT_OPERATOR","->",50],["T_STRING","defaults",50],"(",["T_VARIABLE","$defaults",50],")",";",["T_WHITESPACE","\n    ",50],"}",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * Configures a map of default fields and their associated types to be\n     * used as the default list of types for every function in this class\n     * with a $types param. Useful to avoid repetition when calling the same\n     * functions using the same fields and types.\n     *\n     * If called with no arguments it will return the currently configured types.\n     *\n     * ### Example\n     *\n     * ```\n     * $query->defaults(['created' => 'datetime', 'is_visible' => 'boolean']);\n     * ```\n     *\n     * This method will replace all the existing type maps with the ones provided.\n     *\n     * @param array|null $defaults associative array where keys are field names and values\n     * are the correspondent type.\n     * @return $this|array\n     *\/",53],["T_WHITESPACE","\n    ",72],["T_PUBLIC","public",73],["T_WHITESPACE"," ",73],["T_FUNCTION","function",73],["T_WHITESPACE"," ",73],["T_STRING","defaults",73],"(",["T_ARRAY","array",73],["T_WHITESPACE"," ",73],["T_VARIABLE","$defaults",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_STRING","null",73],")",["T_WHITESPACE","\n    ",73],"{",["T_WHITESPACE","\n        ",74],["T_IF","if",75],["T_WHITESPACE"," ",75],"(",["T_VARIABLE","$defaults",75],["T_WHITESPACE"," ",75],["T_IS_IDENTICAL","===",75],["T_WHITESPACE"," ",75],["T_STRING","null",75],")",["T_WHITESPACE"," ",75],"{",["T_WHITESPACE","\n            ",75],["T_RETURN","return",76],["T_WHITESPACE"," ",76],["T_VARIABLE","$this",76],["T_OBJECT_OPERATOR","->",76],["T_STRING","_defaults",76],";",["T_WHITESPACE","\n        ",76],"}",["T_WHITESPACE","\n        ",77],["T_VARIABLE","$this",78],["T_OBJECT_OPERATOR","->",78],["T_STRING","_defaults",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_VARIABLE","$defaults",78],";",["T_WHITESPACE","\n\n        ",78],["T_RETURN","return",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$this",80],";",["T_WHITESPACE","\n    ",80],"}",["T_WHITESPACE","\n\n    ",81],["T_DOC_COMMENT","\/**\n     * Add additional default types into the type map.\n     *\n     * If a key already exists it will not be overwritten.\n     *\n     * @param array $types The additional types to add.\n     * @return void\n     *\/",83],["T_WHITESPACE","\n    ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","addDefaults",91],"(",["T_ARRAY","array",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$types",91],")",["T_WHITESPACE","\n    ",91],"{",["T_WHITESPACE","\n        ",92],["T_VARIABLE","$this",93],["T_OBJECT_OPERATOR","->",93],["T_STRING","_defaults",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],["T_VARIABLE","$this",93],["T_OBJECT_OPERATOR","->",93],["T_STRING","_defaults",93],["T_WHITESPACE"," ",93],"+",["T_WHITESPACE"," ",93],["T_VARIABLE","$types",93],";",["T_WHITESPACE","\n    ",93],"}",["T_WHITESPACE","\n\n    ",94],["T_DOC_COMMENT","\/**\n     * Sets a map of fields and their associated types for single-use.\n     *\n     * If called with no arguments it will return the currently configured types.\n     *\n     * ### Example\n     *\n     * ```\n     * $query->types(['created' => 'time']);\n     * ```\n     *\n     * This method will replace all the existing type maps with the ones provided.\n     *\n     * @param array|null $types associative array where keys are field names and values\n     * are the correspondent type.\n     * @return $this|array\n     *\/",96],["T_WHITESPACE","\n    ",112],["T_PUBLIC","public",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","types",113],"(",["T_ARRAY","array",113],["T_WHITESPACE"," ",113],["T_VARIABLE","$types",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_STRING","null",113],")",["T_WHITESPACE","\n    ",113],"{",["T_WHITESPACE","\n        ",114],["T_IF","if",115],["T_WHITESPACE"," ",115],"(",["T_VARIABLE","$types",115],["T_WHITESPACE"," ",115],["T_IS_IDENTICAL","===",115],["T_WHITESPACE"," ",115],["T_STRING","null",115],")",["T_WHITESPACE"," ",115],"{",["T_WHITESPACE","\n            ",115],["T_RETURN","return",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$this",116],["T_OBJECT_OPERATOR","->",116],["T_STRING","_types",116],";",["T_WHITESPACE","\n        ",116],"}",["T_WHITESPACE","\n        ",117],["T_VARIABLE","$this",118],["T_OBJECT_OPERATOR","->",118],["T_STRING","_types",118],["T_WHITESPACE"," ",118],"=",["T_WHITESPACE"," ",118],["T_VARIABLE","$types",118],";",["T_WHITESPACE","\n\n        ",118],["T_RETURN","return",120],["T_WHITESPACE"," ",120],["T_VARIABLE","$this",120],";",["T_WHITESPACE","\n    ",120],"}",["T_WHITESPACE","\n\n    ",121],["T_DOC_COMMENT","\/**\n     * Returns the type of the given column. If there is no single use type is configured,\n     * the column type will be looked for inside the default mapping. If neither exist,\n     * null will be returned.\n     *\n     * @param string $column The type for a given column\n     * @return null|string\n     *\/",123],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","type",131],"(",["T_VARIABLE","$column",131],")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_IF","if",133],["T_WHITESPACE"," ",133],"(",["T_ISSET","isset",133],"(",["T_VARIABLE","$this",133],["T_OBJECT_OPERATOR","->",133],["T_STRING","_types",133],"[",["T_VARIABLE","$column",133],"]",")",")",["T_WHITESPACE"," ",133],"{",["T_WHITESPACE","\n            ",133],["T_RETURN","return",134],["T_WHITESPACE"," ",134],["T_VARIABLE","$this",134],["T_OBJECT_OPERATOR","->",134],["T_STRING","_types",134],"[",["T_VARIABLE","$column",134],"]",";",["T_WHITESPACE","\n        ",134],"}",["T_WHITESPACE","\n        ",135],["T_IF","if",136],["T_WHITESPACE"," ",136],"(",["T_ISSET","isset",136],"(",["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","_defaults",136],"[",["T_VARIABLE","$column",136],"]",")",")",["T_WHITESPACE"," ",136],"{",["T_WHITESPACE","\n            ",136],["T_RETURN","return",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","_defaults",137],"[",["T_VARIABLE","$column",137],"]",";",["T_WHITESPACE","\n        ",137],"}",["T_WHITESPACE","\n\n        ",138],["T_RETURN","return",140],["T_WHITESPACE"," ",140],["T_STRING","null",140],";",["T_WHITESPACE","\n    ",140],"}",["T_WHITESPACE","\n\n    ",141],["T_DOC_COMMENT","\/**\n     * Returns an array of all types mapped types\n     *\n     * @return array\n     *\/",143],["T_WHITESPACE","\n    ",147],["T_PUBLIC","public",148],["T_WHITESPACE"," ",148],["T_FUNCTION","function",148],["T_WHITESPACE"," ",148],["T_STRING","toArray",148],"(",")",["T_WHITESPACE","\n    ",148],"{",["T_WHITESPACE","\n        ",149],["T_RETURN","return",150],["T_WHITESPACE"," ",150],["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","_types",150],["T_WHITESPACE"," ",150],"+",["T_WHITESPACE"," ",150],["T_VARIABLE","$this",150],["T_OBJECT_OPERATOR","->",150],["T_STRING","_defaults",150],";",["T_WHITESPACE","\n    ",150],"}",["T_WHITESPACE","\n",151],"}",["T_WHITESPACE","\n",152]]