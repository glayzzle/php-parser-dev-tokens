[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Database",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Expression",17],["T_NS_SEPARATOR","\\",17],["T_STRING","OrderByExpression",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","Cake",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Database",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Expression",18],["T_NS_SEPARATOR","\\",18],["T_STRING","OrderClauseExpression",18],";",["T_WHITESPACE","\n",18],["T_USE","use",19],["T_WHITESPACE"," ",19],["T_STRING","Cake",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Database",19],["T_NS_SEPARATOR","\\",19],["T_STRING","Expression",19],["T_NS_SEPARATOR","\\",19],["T_STRING","QueryExpression",19],";",["T_WHITESPACE","\n",19],["T_USE","use",20],["T_WHITESPACE"," ",20],["T_STRING","Cake",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Database",20],["T_NS_SEPARATOR","\\",20],["T_STRING","Expression",20],["T_NS_SEPARATOR","\\",20],["T_STRING","ValuesExpression",20],";",["T_WHITESPACE","\n",20],["T_USE","use",21],["T_WHITESPACE"," ",21],["T_STRING","Cake",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Database",21],["T_NS_SEPARATOR","\\",21],["T_STRING","Statement",21],["T_NS_SEPARATOR","\\",21],["T_STRING","CallbackStatement",21],";",["T_WHITESPACE","\n",21],["T_USE","use",22],["T_WHITESPACE"," ",22],["T_STRING","InvalidArgumentException",22],";",["T_WHITESPACE","\n",22],["T_USE","use",23],["T_WHITESPACE"," ",23],["T_STRING","IteratorAggregate",23],";",["T_WHITESPACE","\n",23],["T_USE","use",24],["T_WHITESPACE"," ",24],["T_STRING","RuntimeException",24],";",["T_WHITESPACE","\n\n",24],["T_DOC_COMMENT","\/**\n * This class represents a Relational database SQL Query. A query can be of\n * different types like select, update, insert and delete. Exposes the methods\n * for dynamically constructing each query part, execute it and transform it\n * to a specific SQL dialect.\n *\/",26],["T_WHITESPACE","\n",31],["T_CLASS","class",32],["T_WHITESPACE"," ",32],["T_STRING","Query",32],["T_WHITESPACE"," ",32],["T_IMPLEMENTS","implements",32],["T_WHITESPACE"," ",32],["T_STRING","ExpressionInterface",32],",",["T_WHITESPACE"," ",32],["T_STRING","IteratorAggregate",32],["T_WHITESPACE","\n",32],"{",["T_WHITESPACE","\n\n    ",33],["T_USE","use",35],["T_WHITESPACE"," ",35],["T_STRING","TypeMapTrait",35],";",["T_WHITESPACE","\n\n    ",35],["T_DOC_COMMENT","\/**\n     * Connection instance to be used to execute this query.\n     *\n     * @var \\Cake\\Datasource\\ConnectionInterface\n     *\/",37],["T_WHITESPACE","\n    ",41],["T_PROTECTED","protected",42],["T_WHITESPACE"," ",42],["T_VARIABLE","$_connection",42],";",["T_WHITESPACE","\n\n    ",42],["T_DOC_COMMENT","\/**\n     * Type of this query (select, insert, update, delete).\n     *\n     * @var string\n     *\/",44],["T_WHITESPACE","\n    ",48],["T_PROTECTED","protected",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$_type",49],["T_WHITESPACE"," ",49],"=",["T_WHITESPACE"," ",49],["T_CONSTANT_ENCAPSED_STRING","'select'",49],";",["T_WHITESPACE","\n\n    ",49],["T_DOC_COMMENT","\/**\n     * List of SQL parts that will be used to build this query.\n     *\n     * @var array\n     *\/",51],["T_WHITESPACE","\n    ",55],["T_PROTECTED","protected",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$_parts",56],["T_WHITESPACE"," ",56],"=",["T_WHITESPACE"," ",56],"[",["T_WHITESPACE","\n        ",56],["T_CONSTANT_ENCAPSED_STRING","'delete'",57],["T_WHITESPACE"," ",57],["T_DOUBLE_ARROW","=>",57],["T_WHITESPACE"," ",57],["T_STRING","true",57],",",["T_WHITESPACE","\n        ",57],["T_CONSTANT_ENCAPSED_STRING","'update'",58],["T_WHITESPACE"," ",58],["T_DOUBLE_ARROW","=>",58],["T_WHITESPACE"," ",58],"[","]",",",["T_WHITESPACE","\n        ",58],["T_CONSTANT_ENCAPSED_STRING","'set'",59],["T_WHITESPACE"," ",59],["T_DOUBLE_ARROW","=>",59],["T_WHITESPACE"," ",59],"[","]",",",["T_WHITESPACE","\n        ",59],["T_CONSTANT_ENCAPSED_STRING","'insert'",60],["T_WHITESPACE"," ",60],["T_DOUBLE_ARROW","=>",60],["T_WHITESPACE"," ",60],"[","]",",",["T_WHITESPACE","\n        ",60],["T_CONSTANT_ENCAPSED_STRING","'values'",61],["T_WHITESPACE"," ",61],["T_DOUBLE_ARROW","=>",61],["T_WHITESPACE"," ",61],"[","]",",",["T_WHITESPACE","\n        ",61],["T_CONSTANT_ENCAPSED_STRING","'select'",62],["T_WHITESPACE"," ",62],["T_DOUBLE_ARROW","=>",62],["T_WHITESPACE"," ",62],"[","]",",",["T_WHITESPACE","\n        ",62],["T_CONSTANT_ENCAPSED_STRING","'distinct'",63],["T_WHITESPACE"," ",63],["T_DOUBLE_ARROW","=>",63],["T_WHITESPACE"," ",63],["T_STRING","false",63],",",["T_WHITESPACE","\n        ",63],["T_CONSTANT_ENCAPSED_STRING","'modifier'",64],["T_WHITESPACE"," ",64],["T_DOUBLE_ARROW","=>",64],["T_WHITESPACE"," ",64],"[","]",",",["T_WHITESPACE","\n        ",64],["T_CONSTANT_ENCAPSED_STRING","'from'",65],["T_WHITESPACE"," ",65],["T_DOUBLE_ARROW","=>",65],["T_WHITESPACE"," ",65],"[","]",",",["T_WHITESPACE","\n        ",65],["T_CONSTANT_ENCAPSED_STRING","'join'",66],["T_WHITESPACE"," ",66],["T_DOUBLE_ARROW","=>",66],["T_WHITESPACE"," ",66],"[","]",",",["T_WHITESPACE","\n        ",66],["T_CONSTANT_ENCAPSED_STRING","'where'",67],["T_WHITESPACE"," ",67],["T_DOUBLE_ARROW","=>",67],["T_WHITESPACE"," ",67],["T_STRING","null",67],",",["T_WHITESPACE","\n        ",67],["T_CONSTANT_ENCAPSED_STRING","'group'",68],["T_WHITESPACE"," ",68],["T_DOUBLE_ARROW","=>",68],["T_WHITESPACE"," ",68],"[","]",",",["T_WHITESPACE","\n        ",68],["T_CONSTANT_ENCAPSED_STRING","'having'",69],["T_WHITESPACE"," ",69],["T_DOUBLE_ARROW","=>",69],["T_WHITESPACE"," ",69],["T_STRING","null",69],",",["T_WHITESPACE","\n        ",69],["T_CONSTANT_ENCAPSED_STRING","'order'",70],["T_WHITESPACE"," ",70],["T_DOUBLE_ARROW","=>",70],["T_WHITESPACE"," ",70],["T_STRING","null",70],",",["T_WHITESPACE","\n        ",70],["T_CONSTANT_ENCAPSED_STRING","'limit'",71],["T_WHITESPACE"," ",71],["T_DOUBLE_ARROW","=>",71],["T_WHITESPACE"," ",71],["T_STRING","null",71],",",["T_WHITESPACE","\n        ",71],["T_CONSTANT_ENCAPSED_STRING","'offset'",72],["T_WHITESPACE"," ",72],["T_DOUBLE_ARROW","=>",72],["T_WHITESPACE"," ",72],["T_STRING","null",72],",",["T_WHITESPACE","\n        ",72],["T_CONSTANT_ENCAPSED_STRING","'union'",73],["T_WHITESPACE"," ",73],["T_DOUBLE_ARROW","=>",73],["T_WHITESPACE"," ",73],"[","]",",",["T_WHITESPACE","\n        ",73],["T_CONSTANT_ENCAPSED_STRING","'epilog'",74],["T_WHITESPACE"," ",74],["T_DOUBLE_ARROW","=>",74],["T_WHITESPACE"," ",74],["T_STRING","null",74],["T_WHITESPACE","\n    ",74],"]",";",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Indicates whether internal state of this query was changed, this is used to\n     * discard internal cached objects such as the transformed query or the reference\n     * to the executed statement.\n     *\n     * @var bool\n     *\/",77],["T_WHITESPACE","\n    ",83],["T_PROTECTED","protected",84],["T_WHITESPACE"," ",84],["T_VARIABLE","$_dirty",84],["T_WHITESPACE"," ",84],"=",["T_WHITESPACE"," ",84],["T_STRING","false",84],";",["T_WHITESPACE","\n\n    ",84],["T_DOC_COMMENT","\/**\n     * A list of callback functions to be called to alter each row from resulting\n     * statement upon retrieval. Each one of the callback function will receive\n     * the row array as first argument.\n     *\n     * @var array\n     *\/",86],["T_WHITESPACE","\n    ",92],["T_PROTECTED","protected",93],["T_WHITESPACE"," ",93],["T_VARIABLE","$_resultDecorators",93],["T_WHITESPACE"," ",93],"=",["T_WHITESPACE"," ",93],"[","]",";",["T_WHITESPACE","\n\n    ",93],["T_DOC_COMMENT","\/**\n     * Statement object resulting from executing this query.\n     *\n     * @var \\Cake\\Database\\StatementInterface\n     *\/",95],["T_WHITESPACE","\n    ",99],["T_PROTECTED","protected",100],["T_WHITESPACE"," ",100],["T_VARIABLE","$_iterator",100],";",["T_WHITESPACE","\n\n    ",100],["T_DOC_COMMENT","\/**\n     * The object responsible for generating query placeholders and temporarily store values\n     * associated to each of those.\n     *\n     * @var \\Cake\\Database\\ValueBinder\n     *\/",102],["T_WHITESPACE","\n    ",107],["T_PROTECTED","protected",108],["T_WHITESPACE"," ",108],["T_VARIABLE","$_valueBinder",108],";",["T_WHITESPACE","\n\n    ",108],["T_DOC_COMMENT","\/**\n     * Instance of functions builder object used for generating arbitrary SQL functions.\n     *\n     * @var \\Cake\\Database\\FunctionsBuilder\n     *\/",110],["T_WHITESPACE","\n    ",114],["T_PROTECTED","protected",115],["T_WHITESPACE"," ",115],["T_VARIABLE","$_functionsBuilder",115],";",["T_WHITESPACE","\n\n    ",115],["T_DOC_COMMENT","\/**\n     * Boolean for tracking whether or not buffered results\n     * are enabled.\n     *\n     * @var bool\n     *\/",117],["T_WHITESPACE","\n    ",122],["T_PROTECTED","protected",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$_useBufferedResults",123],["T_WHITESPACE"," ",123],"=",["T_WHITESPACE"," ",123],["T_STRING","true",123],";",["T_WHITESPACE","\n\n    ",123],["T_DOC_COMMENT","\/**\n     * The Type map for fields in the select clause\n     *\n     * @var \\Cake\\Database\\TypeMap\n     *\/",125],["T_WHITESPACE","\n    ",129],["T_PROTECTED","protected",130],["T_WHITESPACE"," ",130],["T_VARIABLE","$_selectTypeMap",130],";",["T_WHITESPACE","\n\n    ",130],["T_DOC_COMMENT","\/**\n     * Tracking flag to ensure only one type caster is appended.\n     *\n     * @var bool\n     *\/",132],["T_WHITESPACE","\n    ",136],["T_PROTECTED","protected",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$_typeCastAttached",137],["T_WHITESPACE"," ",137],"=",["T_WHITESPACE"," ",137],["T_STRING","false",137],";",["T_WHITESPACE","\n\n    ",137],["T_DOC_COMMENT","\/**\n     * Constructor.\n     *\n     * @param \\Cake\\Datasource\\ConnectionInterface $connection The connection\n     * object to be used for transforming and executing this query\n     *\/",139],["T_WHITESPACE","\n    ",144],["T_PUBLIC","public",145],["T_WHITESPACE"," ",145],["T_FUNCTION","function",145],["T_WHITESPACE"," ",145],["T_STRING","__construct",145],"(",["T_VARIABLE","$connection",145],")",["T_WHITESPACE","\n    ",145],"{",["T_WHITESPACE","\n        ",146],["T_VARIABLE","$this",147],["T_OBJECT_OPERATOR","->",147],["T_STRING","connection",147],"(",["T_VARIABLE","$connection",147],")",";",["T_WHITESPACE","\n    ",147],"}",["T_WHITESPACE","\n\n    ",148],["T_DOC_COMMENT","\/**\n     * Sets the connection instance to be used for executing and transforming this query\n     * When called with a null argument, it will return the current connection instance.\n     *\n     * @param \\Cake\\Datasource\\ConnectionInterface|null $connection instance\n     * @return $this|\\Cake\\Datasource\\ConnectionInterface\n     *\/",150],["T_WHITESPACE","\n    ",156],["T_PUBLIC","public",157],["T_WHITESPACE"," ",157],["T_FUNCTION","function",157],["T_WHITESPACE"," ",157],["T_STRING","connection",157],"(",["T_VARIABLE","$connection",157],["T_WHITESPACE"," ",157],"=",["T_WHITESPACE"," ",157],["T_STRING","null",157],")",["T_WHITESPACE","\n    ",157],"{",["T_WHITESPACE","\n        ",158],["T_IF","if",159],["T_WHITESPACE"," ",159],"(",["T_VARIABLE","$connection",159],["T_WHITESPACE"," ",159],["T_IS_IDENTICAL","===",159],["T_WHITESPACE"," ",159],["T_STRING","null",159],")",["T_WHITESPACE"," ",159],"{",["T_WHITESPACE","\n            ",159],["T_RETURN","return",160],["T_WHITESPACE"," ",160],["T_VARIABLE","$this",160],["T_OBJECT_OPERATOR","->",160],["T_STRING","_connection",160],";",["T_WHITESPACE","\n        ",160],"}",["T_WHITESPACE","\n        ",161],["T_VARIABLE","$this",162],["T_OBJECT_OPERATOR","->",162],["T_STRING","_dirty",162],"(",")",";",["T_WHITESPACE","\n        ",162],["T_VARIABLE","$this",163],["T_OBJECT_OPERATOR","->",163],["T_STRING","_connection",163],["T_WHITESPACE"," ",163],"=",["T_WHITESPACE"," ",163],["T_VARIABLE","$connection",163],";",["T_WHITESPACE","\n\n        ",163],["T_RETURN","return",165],["T_WHITESPACE"," ",165],["T_VARIABLE","$this",165],";",["T_WHITESPACE","\n    ",165],"}",["T_WHITESPACE","\n\n    ",166],["T_DOC_COMMENT","\/**\n     * Compiles the SQL representation of this query and executes it using the\n     * configured connection object. Returns the resulting statement object.\n     *\n     * Executing a query internally executes several steps, the first one is\n     * letting the connection transform this object to fit its particular dialect,\n     * this might result in generating a different Query object that will be the one\n     * to actually be executed. Immediately after, literal values are passed to the\n     * connection so they are bound to the query in a safe way. Finally, the resulting\n     * statement is decorated with custom objects to execute callbacks for each row\n     * retrieved if necessary.\n     *\n     * Resulting statement is traversable, so it can be used in any loop as you would\n     * with an array.\n     *\n     * This method can be overridden in query subclasses to decorate behavior\n     * around query execution.\n     *\n     * @return \\Cake\\Database\\StatementInterface\n     *\/",168],["T_WHITESPACE","\n    ",187],["T_PUBLIC","public",188],["T_WHITESPACE"," ",188],["T_FUNCTION","function",188],["T_WHITESPACE"," ",188],["T_STRING","execute",188],"(",")",["T_WHITESPACE","\n    ",188],"{",["T_WHITESPACE","\n        ",189],["T_VARIABLE","$statement",190],["T_WHITESPACE"," ",190],"=",["T_WHITESPACE"," ",190],["T_VARIABLE","$this",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","_connection",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","run",190],"(",["T_VARIABLE","$this",190],")",";",["T_WHITESPACE","\n        ",190],["T_VARIABLE","$driver",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_VARIABLE","$this",191],["T_OBJECT_OPERATOR","->",191],["T_STRING","_connection",191],["T_OBJECT_OPERATOR","->",191],["T_STRING","driver",191],"(",")",";",["T_WHITESPACE","\n        ",191],["T_VARIABLE","$typeMap",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_VARIABLE","$this",192],["T_OBJECT_OPERATOR","->",192],["T_STRING","selectTypeMap",192],"(",")",";",["T_WHITESPACE","\n\n        ",192],["T_IF","if",194],["T_WHITESPACE"," ",194],"(",["T_VARIABLE","$typeMap",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","toArray",194],"(",")",["T_WHITESPACE"," ",194],["T_BOOLEAN_AND","&&",194],["T_WHITESPACE"," ",194],["T_VARIABLE","$this",194],["T_OBJECT_OPERATOR","->",194],["T_STRING","_typeCastAttached",194],["T_WHITESPACE"," ",194],["T_IS_IDENTICAL","===",194],["T_WHITESPACE"," ",194],["T_STRING","false",194],")",["T_WHITESPACE"," ",194],"{",["T_WHITESPACE","\n            ",194],["T_VARIABLE","$this",195],["T_OBJECT_OPERATOR","->",195],["T_STRING","decorateResults",195],"(",["T_NEW","new",195],["T_WHITESPACE"," ",195],["T_STRING","FieldTypeConverter",195],"(",["T_VARIABLE","$typeMap",195],",",["T_WHITESPACE"," ",195],["T_VARIABLE","$driver",195],")",")",";",["T_WHITESPACE","\n            ",195],["T_VARIABLE","$this",196],["T_OBJECT_OPERATOR","->",196],["T_STRING","_typeCastAttached",196],["T_WHITESPACE"," ",196],"=",["T_WHITESPACE"," ",196],["T_STRING","true",196],";",["T_WHITESPACE","\n        ",196],"}",["T_WHITESPACE","\n\n        ",197],["T_VARIABLE","$this",199],["T_OBJECT_OPERATOR","->",199],["T_STRING","_iterator",199],["T_WHITESPACE"," ",199],"=",["T_WHITESPACE"," ",199],["T_VARIABLE","$this",199],["T_OBJECT_OPERATOR","->",199],["T_STRING","_decorateStatement",199],"(",["T_VARIABLE","$statement",199],")",";",["T_WHITESPACE","\n        ",199],["T_VARIABLE","$this",200],["T_OBJECT_OPERATOR","->",200],["T_STRING","_dirty",200],["T_WHITESPACE"," ",200],"=",["T_WHITESPACE"," ",200],["T_STRING","false",200],";",["T_WHITESPACE","\n\n        ",200],["T_RETURN","return",202],["T_WHITESPACE"," ",202],["T_VARIABLE","$this",202],["T_OBJECT_OPERATOR","->",202],["T_STRING","_iterator",202],";",["T_WHITESPACE","\n    ",202],"}",["T_WHITESPACE","\n\n    ",203],["T_DOC_COMMENT","\/**\n     * Returns the SQL representation of this object.\n     *\n     * This function will compile this query to make it compatible\n     * with the SQL dialect that is used by the connection, This process might\n     * add, remove or alter any query part or internal expression to make it\n     * executable in the target platform.\n     *\n     * The resulting query may have placeholders that will be replaced with the actual\n     * values when the query is executed, hence it is most suitable to use with\n     * prepared statements.\n     *\n     * @param \\Cake\\Database\\ValueBinder|null $generator A placeholder object that will hold\n     * associated values for expressions\n     * @return string\n     *\/",205],["T_WHITESPACE","\n    ",220],["T_PUBLIC","public",221],["T_WHITESPACE"," ",221],["T_FUNCTION","function",221],["T_WHITESPACE"," ",221],["T_STRING","sql",221],"(",["T_STRING","ValueBinder",221],["T_WHITESPACE"," ",221],["T_VARIABLE","$generator",221],["T_WHITESPACE"," ",221],"=",["T_WHITESPACE"," ",221],["T_STRING","null",221],")",["T_WHITESPACE","\n    ",221],"{",["T_WHITESPACE","\n        ",222],["T_IF","if",223],["T_WHITESPACE"," ",223],"(","!",["T_VARIABLE","$generator",223],")",["T_WHITESPACE"," ",223],"{",["T_WHITESPACE","\n            ",223],["T_VARIABLE","$generator",224],["T_WHITESPACE"," ",224],"=",["T_WHITESPACE"," ",224],["T_VARIABLE","$this",224],["T_OBJECT_OPERATOR","->",224],["T_STRING","valueBinder",224],"(",")",";",["T_WHITESPACE","\n            ",224],["T_VARIABLE","$generator",225],["T_OBJECT_OPERATOR","->",225],["T_STRING","resetCount",225],"(",")",";",["T_WHITESPACE","\n        ",225],"}",["T_WHITESPACE","\n\n        ",226],["T_RETURN","return",228],["T_WHITESPACE"," ",228],["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","connection",228],"(",")",["T_OBJECT_OPERATOR","->",228],["T_STRING","compileQuery",228],"(",["T_VARIABLE","$this",228],",",["T_WHITESPACE"," ",228],["T_VARIABLE","$generator",228],")",";",["T_WHITESPACE","\n    ",228],"}",["T_WHITESPACE","\n\n    ",229],["T_DOC_COMMENT","\/**\n     * Will iterate over every specified part. Traversing functions can aggregate\n     * results using variables in the closure or instance variables. This function\n     * is commonly used as a way for traversing all query parts that\n     * are going to be used for constructing a query.\n     *\n     * The callback will receive 2 parameters, the first one is the value of the query\n     * part that is being iterated and the second the name of such part.\n     *\n     * ### Example:\n     * ```\n     * $query->select(['title'])->from('articles')->traverse(function ($value, $clause) {\n     *     if ($clause === 'select') {\n     *         var_dump($value);\n     *     }\n     * }, ['select', 'from']);\n     * ```\n     *\n     * @param callable $visitor A function or callable to be executed for each part\n     * @param array $parts The query clauses to traverse\n     * @return $this\n     *\/",231],["T_WHITESPACE","\n    ",252],["T_PUBLIC","public",253],["T_WHITESPACE"," ",253],["T_FUNCTION","function",253],["T_WHITESPACE"," ",253],["T_STRING","traverse",253],"(",["T_CALLABLE","callable",253],["T_WHITESPACE"," ",253],["T_VARIABLE","$visitor",253],",",["T_WHITESPACE"," ",253],["T_ARRAY","array",253],["T_WHITESPACE"," ",253],["T_VARIABLE","$parts",253],["T_WHITESPACE"," ",253],"=",["T_WHITESPACE"," ",253],"[","]",")",["T_WHITESPACE","\n    ",253],"{",["T_WHITESPACE","\n        ",254],["T_VARIABLE","$parts",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_VARIABLE","$parts",255],["T_WHITESPACE"," ",255],"?",":",["T_WHITESPACE"," ",255],["T_STRING","array_keys",255],"(",["T_VARIABLE","$this",255],["T_OBJECT_OPERATOR","->",255],["T_STRING","_parts",255],")",";",["T_WHITESPACE","\n        ",255],["T_FOREACH","foreach",256],["T_WHITESPACE"," ",256],"(",["T_VARIABLE","$parts",256],["T_WHITESPACE"," ",256],["T_AS","as",256],["T_WHITESPACE"," ",256],["T_VARIABLE","$name",256],")",["T_WHITESPACE"," ",256],"{",["T_WHITESPACE","\n            ",256],["T_VARIABLE","$visitor",257],"(",["T_VARIABLE","$this",257],["T_OBJECT_OPERATOR","->",257],["T_STRING","_parts",257],"[",["T_VARIABLE","$name",257],"]",",",["T_WHITESPACE"," ",257],["T_VARIABLE","$name",257],")",";",["T_WHITESPACE","\n        ",257],"}",["T_WHITESPACE","\n\n        ",258],["T_RETURN","return",260],["T_WHITESPACE"," ",260],["T_VARIABLE","$this",260],";",["T_WHITESPACE","\n    ",260],"}",["T_WHITESPACE","\n\n    ",261],["T_DOC_COMMENT","\/**\n     * Adds new fields to be returned by a SELECT statement when this query is\n     * executed. Fields can be passed as an array of strings, array of expression\n     * objects, a single expression or a single string.\n     *\n     * If an array is passed, keys will be used to alias fields using the value as the\n     * real field to be aliased. It is possible to alias strings, Expression objects or\n     * even other Query objects.\n     *\n     * If a callable function is passed, the returning array of the function will\n     * be used as the list of fields.\n     *\n     * By default this function will append any passed argument to the list of fields\n     * to be selected, unless the second argument is set to true.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $query->select(['id', 'title']); \/\/ Produces SELECT id, title\n     * $query->select(['author' => 'author_id']); \/\/ Appends author: SELECT id, title, author_id as author\n     * $query->select('id', true); \/\/ Resets the list: SELECT id\n     * $query->select(['total' => $countQuery]); \/\/ SELECT id, (SELECT ...) AS total\n     * $query->select(function ($query) {\n     *     return ['article_id', 'total' => $query->count('*')];\n     * })\n     * ```\n     *\n     * By default no fields are selected, if you have an instance of `Cake\\ORM\\Query` and try to append\n     * fields you should also call `Cake\\ORM\\Query::autoFields()` to select the default fields\n     * from the table.\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string|callable $fields fields to be added to the list.\n     * @param bool $overwrite whether to reset fields with passed list or not\n     * @return $this\n     *\/",263],["T_WHITESPACE","\n    ",297],["T_PUBLIC","public",298],["T_WHITESPACE"," ",298],["T_FUNCTION","function",298],["T_WHITESPACE"," ",298],["T_STRING","select",298],"(",["T_VARIABLE","$fields",298],["T_WHITESPACE"," ",298],"=",["T_WHITESPACE"," ",298],"[","]",",",["T_WHITESPACE"," ",298],["T_VARIABLE","$overwrite",298],["T_WHITESPACE"," ",298],"=",["T_WHITESPACE"," ",298],["T_STRING","false",298],")",["T_WHITESPACE","\n    ",298],"{",["T_WHITESPACE","\n        ",299],["T_IF","if",300],["T_WHITESPACE"," ",300],"(","!",["T_STRING","is_string",300],"(",["T_VARIABLE","$fields",300],")",["T_WHITESPACE"," ",300],["T_BOOLEAN_AND","&&",300],["T_WHITESPACE"," ",300],["T_STRING","is_callable",300],"(",["T_VARIABLE","$fields",300],")",")",["T_WHITESPACE"," ",300],"{",["T_WHITESPACE","\n            ",300],["T_VARIABLE","$fields",301],["T_WHITESPACE"," ",301],"=",["T_WHITESPACE"," ",301],["T_VARIABLE","$fields",301],"(",["T_VARIABLE","$this",301],")",";",["T_WHITESPACE","\n        ",301],"}",["T_WHITESPACE","\n\n        ",302],["T_IF","if",304],["T_WHITESPACE"," ",304],"(","!",["T_STRING","is_array",304],"(",["T_VARIABLE","$fields",304],")",")",["T_WHITESPACE"," ",304],"{",["T_WHITESPACE","\n            ",304],["T_VARIABLE","$fields",305],["T_WHITESPACE"," ",305],"=",["T_WHITESPACE"," ",305],"[",["T_VARIABLE","$fields",305],"]",";",["T_WHITESPACE","\n        ",305],"}",["T_WHITESPACE","\n\n        ",306],["T_IF","if",308],["T_WHITESPACE"," ",308],"(",["T_VARIABLE","$overwrite",308],")",["T_WHITESPACE"," ",308],"{",["T_WHITESPACE","\n            ",308],["T_VARIABLE","$this",309],["T_OBJECT_OPERATOR","->",309],["T_STRING","_parts",309],"[",["T_CONSTANT_ENCAPSED_STRING","'select'",309],"]",["T_WHITESPACE"," ",309],"=",["T_WHITESPACE"," ",309],["T_VARIABLE","$fields",309],";",["T_WHITESPACE","\n        ",309],"}",["T_WHITESPACE"," ",310],["T_ELSE","else",310],["T_WHITESPACE"," ",310],"{",["T_WHITESPACE","\n            ",310],["T_VARIABLE","$this",311],["T_OBJECT_OPERATOR","->",311],["T_STRING","_parts",311],"[",["T_CONSTANT_ENCAPSED_STRING","'select'",311],"]",["T_WHITESPACE"," ",311],"=",["T_WHITESPACE"," ",311],["T_STRING","array_merge",311],"(",["T_VARIABLE","$this",311],["T_OBJECT_OPERATOR","->",311],["T_STRING","_parts",311],"[",["T_CONSTANT_ENCAPSED_STRING","'select'",311],"]",",",["T_WHITESPACE"," ",311],["T_VARIABLE","$fields",311],")",";",["T_WHITESPACE","\n        ",311],"}",["T_WHITESPACE","\n\n        ",312],["T_VARIABLE","$this",314],["T_OBJECT_OPERATOR","->",314],["T_STRING","_dirty",314],"(",")",";",["T_WHITESPACE","\n        ",314],["T_VARIABLE","$this",315],["T_OBJECT_OPERATOR","->",315],["T_STRING","_type",315],["T_WHITESPACE"," ",315],"=",["T_WHITESPACE"," ",315],["T_CONSTANT_ENCAPSED_STRING","'select'",315],";",["T_WHITESPACE","\n\n        ",315],["T_RETURN","return",317],["T_WHITESPACE"," ",317],["T_VARIABLE","$this",317],";",["T_WHITESPACE","\n    ",317],"}",["T_WHITESPACE","\n\n    ",318],["T_DOC_COMMENT","\/**\n     * Adds a DISTINCT clause to the query to remove duplicates from the result set.\n     * This clause can only be used for select statements.\n     *\n     * If you wish to filter duplicates based of those rows sharing a particular field\n     * or set of fields, you may pass an array of fields to filter on. Beware that\n     * this option might not be fully supported in all database systems.\n     *\n     * ### Examples:\n     *\n     * ```\n     * \/\/ Filters products with the same name and city\n     * $query->select(['name', 'city'])->from('products')->distinct();\n     *\n     * \/\/ Filters products in the same city\n     * $query->distinct(['city']);\n     * $query->distinct('city');\n     *\n     * \/\/ Filter products with the same name\n     * $query->distinct(['name'], true);\n     * $query->distinct('name', true);\n     * ```\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string|bool $on Enable\/disable distinct class\n     * or list of fields to be filtered on\n     * @param bool $overwrite whether to reset fields with passed list or not\n     * @return $this\n     *\/",320],["T_WHITESPACE","\n    ",347],["T_PUBLIC","public",348],["T_WHITESPACE"," ",348],["T_FUNCTION","function",348],["T_WHITESPACE"," ",348],["T_STRING","distinct",348],"(",["T_VARIABLE","$on",348],["T_WHITESPACE"," ",348],"=",["T_WHITESPACE"," ",348],"[","]",",",["T_WHITESPACE"," ",348],["T_VARIABLE","$overwrite",348],["T_WHITESPACE"," ",348],"=",["T_WHITESPACE"," ",348],["T_STRING","false",348],")",["T_WHITESPACE","\n    ",348],"{",["T_WHITESPACE","\n        ",349],["T_IF","if",350],["T_WHITESPACE"," ",350],"(",["T_VARIABLE","$on",350],["T_WHITESPACE"," ",350],["T_IS_IDENTICAL","===",350],["T_WHITESPACE"," ",350],"[","]",")",["T_WHITESPACE"," ",350],"{",["T_WHITESPACE","\n            ",350],["T_VARIABLE","$on",351],["T_WHITESPACE"," ",351],"=",["T_WHITESPACE"," ",351],["T_STRING","true",351],";",["T_WHITESPACE","\n        ",351],"}",["T_WHITESPACE"," ",352],["T_ELSEIF","elseif",352],["T_WHITESPACE"," ",352],"(",["T_STRING","is_string",352],"(",["T_VARIABLE","$on",352],")",")",["T_WHITESPACE"," ",352],"{",["T_WHITESPACE","\n            ",352],["T_VARIABLE","$on",353],["T_WHITESPACE"," ",353],"=",["T_WHITESPACE"," ",353],"[",["T_VARIABLE","$on",353],"]",";",["T_WHITESPACE","\n        ",353],"}",["T_WHITESPACE","\n\n        ",354],["T_IF","if",356],["T_WHITESPACE"," ",356],"(",["T_STRING","is_array",356],"(",["T_VARIABLE","$on",356],")",")",["T_WHITESPACE"," ",356],"{",["T_WHITESPACE","\n            ",356],["T_VARIABLE","$merge",357],["T_WHITESPACE"," ",357],"=",["T_WHITESPACE"," ",357],"[","]",";",["T_WHITESPACE","\n            ",357],["T_IF","if",358],["T_WHITESPACE"," ",358],"(",["T_STRING","is_array",358],"(",["T_VARIABLE","$this",358],["T_OBJECT_OPERATOR","->",358],["T_STRING","_parts",358],"[",["T_CONSTANT_ENCAPSED_STRING","'distinct'",358],"]",")",")",["T_WHITESPACE"," ",358],"{",["T_WHITESPACE","\n                ",358],["T_VARIABLE","$merge",359],["T_WHITESPACE"," ",359],"=",["T_WHITESPACE"," ",359],["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","_parts",359],"[",["T_CONSTANT_ENCAPSED_STRING","'distinct'",359],"]",";",["T_WHITESPACE","\n            ",359],"}",["T_WHITESPACE","\n            ",360],["T_VARIABLE","$on",361],["T_WHITESPACE"," ",361],"=",["T_WHITESPACE"," ",361],"(",["T_VARIABLE","$overwrite",361],")",["T_WHITESPACE"," ",361],"?",["T_WHITESPACE"," ",361],["T_STRING","array_values",361],"(",["T_VARIABLE","$on",361],")",["T_WHITESPACE"," ",361],":",["T_WHITESPACE"," ",361],["T_STRING","array_merge",361],"(",["T_VARIABLE","$merge",361],",",["T_WHITESPACE"," ",361],["T_STRING","array_values",361],"(",["T_VARIABLE","$on",361],")",")",";",["T_WHITESPACE","\n        ",361],"}",["T_WHITESPACE","\n\n        ",362],["T_VARIABLE","$this",364],["T_OBJECT_OPERATOR","->",364],["T_STRING","_parts",364],"[",["T_CONSTANT_ENCAPSED_STRING","'distinct'",364],"]",["T_WHITESPACE"," ",364],"=",["T_WHITESPACE"," ",364],["T_VARIABLE","$on",364],";",["T_WHITESPACE","\n        ",364],["T_VARIABLE","$this",365],["T_OBJECT_OPERATOR","->",365],["T_STRING","_dirty",365],"(",")",";",["T_WHITESPACE","\n\n        ",365],["T_RETURN","return",367],["T_WHITESPACE"," ",367],["T_VARIABLE","$this",367],";",["T_WHITESPACE","\n    ",367],"}",["T_WHITESPACE","\n\n    ",368],["T_DOC_COMMENT","\/**\n     * Adds a single or multiple SELECT modifiers to be used in the SELECT.\n     *\n     * By default this function will append any passed argument to the list of modifiers\n     * to be applied, unless the second argument is set to true.\n     *\n     * ### Example:\n     *\n     * ```\n     * \/\/ Ignore cache query in MySQL\n     * $query->select(['name', 'city'])->from('products')->modifier('SQL_NO_CACHE');\n     * \/\/ It will produce the SQL: SELECT SQL_NO_CACHE name, city FROM products\n     *\n     * \/\/ Or with multiple modifiers\n     * $query->select(['name', 'city'])->from('products')->modifier(['HIGH_PRIORITY', 'SQL_NO_CACHE']);\n     * \/\/ It will produce the SQL: SELECT HIGH_PRIORITY SQL_NO_CACHE name, city FROM products\n     * ```\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string $modifiers modifiers to be applied to the query\n     * @param bool $overwrite whether to reset order with field list or not\n     * @return $this\n     *\/",370],["T_WHITESPACE","\n    ",391],["T_PUBLIC","public",392],["T_WHITESPACE"," ",392],["T_FUNCTION","function",392],["T_WHITESPACE"," ",392],["T_STRING","modifier",392],"(",["T_VARIABLE","$modifiers",392],",",["T_WHITESPACE"," ",392],["T_VARIABLE","$overwrite",392],["T_WHITESPACE"," ",392],"=",["T_WHITESPACE"," ",392],["T_STRING","false",392],")",["T_WHITESPACE","\n    ",392],"{",["T_WHITESPACE","\n        ",393],["T_VARIABLE","$this",394],["T_OBJECT_OPERATOR","->",394],["T_STRING","_dirty",394],"(",")",";",["T_WHITESPACE","\n        ",394],["T_IF","if",395],["T_WHITESPACE"," ",395],"(",["T_VARIABLE","$overwrite",395],")",["T_WHITESPACE"," ",395],"{",["T_WHITESPACE","\n            ",395],["T_VARIABLE","$this",396],["T_OBJECT_OPERATOR","->",396],["T_STRING","_parts",396],"[",["T_CONSTANT_ENCAPSED_STRING","'modifier'",396],"]",["T_WHITESPACE"," ",396],"=",["T_WHITESPACE"," ",396],"[","]",";",["T_WHITESPACE","\n        ",396],"}",["T_WHITESPACE","\n        ",397],["T_VARIABLE","$this",398],["T_OBJECT_OPERATOR","->",398],["T_STRING","_parts",398],"[",["T_CONSTANT_ENCAPSED_STRING","'modifier'",398],"]",["T_WHITESPACE"," ",398],"=",["T_WHITESPACE"," ",398],["T_STRING","array_merge",398],"(",["T_VARIABLE","$this",398],["T_OBJECT_OPERATOR","->",398],["T_STRING","_parts",398],"[",["T_CONSTANT_ENCAPSED_STRING","'modifier'",398],"]",",",["T_WHITESPACE"," ",398],["T_ARRAY_CAST","(array)",398],["T_VARIABLE","$modifiers",398],")",";",["T_WHITESPACE","\n\n        ",398],["T_RETURN","return",400],["T_WHITESPACE"," ",400],["T_VARIABLE","$this",400],";",["T_WHITESPACE","\n    ",400],"}",["T_WHITESPACE","\n\n    ",401],["T_DOC_COMMENT","\/**\n     * Adds a single or multiple tables to be used in the FROM clause for this query.\n     * Tables can be passed as an array of strings, array of expression\n     * objects, a single expression or a single string.\n     *\n     * If an array is passed, keys will be used to alias tables using the value as the\n     * real field to be aliased. It is possible to alias strings, ExpressionInterface objects or\n     * even other Query objects.\n     *\n     * By default this function will append any passed argument to the list of tables\n     * to be selected from, unless the second argument is set to true.\n     *\n     * This method can be used for select, update and delete statements.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $query->from(['p' => 'posts']); \/\/ Produces FROM posts p\n     * $query->from('authors'); \/\/ Appends authors: FROM posts p, authors\n     * $query->from(['products'], true); \/\/ Resets the list: FROM products\n     * $query->from(['sub' => $countQuery]); \/\/ FROM (SELECT ...) sub\n     * ```\n     *\n     * @param array|string $tables tables to be added to the list. This argument, can be\n     *  passed as an array of strings, array of expression objects, or a single string. See\n     *  the examples above for the valid call types.\n     * @param bool $overwrite whether to reset tables with passed list or not\n     * @return $this\n     *\/",403],["T_WHITESPACE","\n    ",431],["T_PUBLIC","public",432],["T_WHITESPACE"," ",432],["T_FUNCTION","function",432],["T_WHITESPACE"," ",432],["T_STRING","from",432],"(",["T_VARIABLE","$tables",432],["T_WHITESPACE"," ",432],"=",["T_WHITESPACE"," ",432],"[","]",",",["T_WHITESPACE"," ",432],["T_VARIABLE","$overwrite",432],["T_WHITESPACE"," ",432],"=",["T_WHITESPACE"," ",432],["T_STRING","false",432],")",["T_WHITESPACE","\n    ",432],"{",["T_WHITESPACE","\n        ",433],["T_IF","if",434],["T_WHITESPACE"," ",434],"(",["T_EMPTY","empty",434],"(",["T_VARIABLE","$tables",434],")",")",["T_WHITESPACE"," ",434],"{",["T_WHITESPACE","\n            ",434],["T_RETURN","return",435],["T_WHITESPACE"," ",435],["T_VARIABLE","$this",435],["T_OBJECT_OPERATOR","->",435],["T_STRING","_parts",435],"[",["T_CONSTANT_ENCAPSED_STRING","'from'",435],"]",";",["T_WHITESPACE","\n        ",435],"}",["T_WHITESPACE","\n\n        ",436],["T_IF","if",438],["T_WHITESPACE"," ",438],"(",["T_STRING","is_string",438],"(",["T_VARIABLE","$tables",438],")",")",["T_WHITESPACE"," ",438],"{",["T_WHITESPACE","\n            ",438],["T_VARIABLE","$tables",439],["T_WHITESPACE"," ",439],"=",["T_WHITESPACE"," ",439],"[",["T_VARIABLE","$tables",439],"]",";",["T_WHITESPACE","\n        ",439],"}",["T_WHITESPACE","\n\n        ",440],["T_IF","if",442],["T_WHITESPACE"," ",442],"(",["T_VARIABLE","$overwrite",442],")",["T_WHITESPACE"," ",442],"{",["T_WHITESPACE","\n            ",442],["T_VARIABLE","$this",443],["T_OBJECT_OPERATOR","->",443],["T_STRING","_parts",443],"[",["T_CONSTANT_ENCAPSED_STRING","'from'",443],"]",["T_WHITESPACE"," ",443],"=",["T_WHITESPACE"," ",443],["T_VARIABLE","$tables",443],";",["T_WHITESPACE","\n        ",443],"}",["T_WHITESPACE"," ",444],["T_ELSE","else",444],["T_WHITESPACE"," ",444],"{",["T_WHITESPACE","\n            ",444],["T_VARIABLE","$this",445],["T_OBJECT_OPERATOR","->",445],["T_STRING","_parts",445],"[",["T_CONSTANT_ENCAPSED_STRING","'from'",445],"]",["T_WHITESPACE"," ",445],"=",["T_WHITESPACE"," ",445],["T_STRING","array_merge",445],"(",["T_VARIABLE","$this",445],["T_OBJECT_OPERATOR","->",445],["T_STRING","_parts",445],"[",["T_CONSTANT_ENCAPSED_STRING","'from'",445],"]",",",["T_WHITESPACE"," ",445],["T_VARIABLE","$tables",445],")",";",["T_WHITESPACE","\n        ",445],"}",["T_WHITESPACE","\n\n        ",446],["T_VARIABLE","$this",448],["T_OBJECT_OPERATOR","->",448],["T_STRING","_dirty",448],"(",")",";",["T_WHITESPACE","\n\n        ",448],["T_RETURN","return",450],["T_WHITESPACE"," ",450],["T_VARIABLE","$this",450],";",["T_WHITESPACE","\n    ",450],"}",["T_WHITESPACE","\n\n    ",451],["T_DOC_COMMENT","\/**\n     * Adds a single or multiple tables to be used as JOIN clauses to this query.\n     * Tables can be passed as an array of strings, an array describing the\n     * join parts, an array with multiple join descriptions, or a single string.\n     *\n     * By default this function will append any passed argument to the list of tables\n     * to be joined, unless the third argument is set to true.\n     *\n     * When no join type is specified an INNER JOIN is used by default:\n     * `$query->join(['authors'])` will produce `INNER JOIN authors ON 1 = 1`\n     *\n     * It is also possible to alias joins using the array key:\n     * `$query->join(['a' => 'authors'])`` will produce `INNER JOIN authors a ON 1 = 1`\n     *\n     * A join can be fully described and aliased using the array notation:\n     *\n     * ```\n     * $query->join([\n     *     'a' => [\n     *         'table' => 'authors',\n     *         'type' => 'LEFT',\n     *         'conditions' => 'a.id = b.author_id'\n     *     ]\n     * ]);\n     * \/\/ Produces LEFT JOIN authors a ON a.id = b.author_id\n     * ```\n     *\n     * You can even specify multiple joins in an array, including the full description:\n     *\n     * ```\n     * $query->join([\n     *     'a' => [\n     *         'table' => 'authors',\n     *         'type' => 'LEFT',\n     *         'conditions' => 'a.id = b.author_id'\n     *     ],\n     *     'p' => [\n     *         'table' => 'publishers',\n     *         'type' => 'INNER',\n     *         'conditions' => 'p.id = b.publisher_id AND p.name = \"Cake Software Foundation\"'\n     *     ]\n     * ]);\n     * \/\/ LEFT JOIN authors a ON a.id = b.author_id\n     * \/\/ INNER JOIN publishers p ON p.id = b.publisher_id AND p.name = \"Cake Software Foundation\"\n     * ```\n     *\n     * ### Using conditions and types\n     *\n     * Conditions can be expressed, as in the examples above, using a string for comparing\n     * columns, or string with already quoted literal values. Additionally it is\n     * possible to use conditions expressed in arrays or expression objects.\n     *\n     * When using arrays for expressing conditions, it is often desirable to convert\n     * the literal values to the correct database representation. This is achieved\n     * using the second parameter of this function.\n     *\n     * ```\n     * $query->join(['a' => [\n     *     'table' => 'articles',\n     *     'conditions' => [\n     *         'a.posted >=' => new DateTime('-3 days'),\n     *         'a.published' => true,\n     *         'a.author_id = authors.id'\n     *     ]\n     * ]], ['a.posted' => 'datetime', 'a.published' => 'boolean'])\n     * ```\n     *\n     * ### Overwriting joins\n     *\n     * When creating aliased joins using the array notation, you can override\n     * previous join definitions by using the same alias in consequent\n     * calls to this function or you can replace all previously defined joins\n     * with another list if the third parameter for this function is set to true.\n     *\n     * ```\n     * $query->join(['alias' => 'table']); \/\/ joins table with as alias\n     * $query->join(['alias' => 'another_table']); \/\/ joins another_table with as alias\n     * $query->join(['something' => 'different_table'], [], true); \/\/ resets joins list\n     * ```\n     *\n     * @param array|string|null $tables list of tables to be joined in the query\n     * @param array $types associative array of type names used to bind values to query\n     * @param bool $overwrite whether to reset joins with passed list or not\n     * @see \\Cake\\Database\\Type\n     * @return $this\n     *\/",453],["T_WHITESPACE","\n    ",538],["T_PUBLIC","public",539],["T_WHITESPACE"," ",539],["T_FUNCTION","function",539],["T_WHITESPACE"," ",539],["T_STRING","join",539],"(",["T_VARIABLE","$tables",539],["T_WHITESPACE"," ",539],"=",["T_WHITESPACE"," ",539],["T_STRING","null",539],",",["T_WHITESPACE"," ",539],["T_VARIABLE","$types",539],["T_WHITESPACE"," ",539],"=",["T_WHITESPACE"," ",539],"[","]",",",["T_WHITESPACE"," ",539],["T_VARIABLE","$overwrite",539],["T_WHITESPACE"," ",539],"=",["T_WHITESPACE"," ",539],["T_STRING","false",539],")",["T_WHITESPACE","\n    ",539],"{",["T_WHITESPACE","\n        ",540],["T_IF","if",541],["T_WHITESPACE"," ",541],"(",["T_VARIABLE","$tables",541],["T_WHITESPACE"," ",541],["T_IS_IDENTICAL","===",541],["T_WHITESPACE"," ",541],["T_STRING","null",541],")",["T_WHITESPACE"," ",541],"{",["T_WHITESPACE","\n            ",541],["T_RETURN","return",542],["T_WHITESPACE"," ",542],["T_VARIABLE","$this",542],["T_OBJECT_OPERATOR","->",542],["T_STRING","_parts",542],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",542],"]",";",["T_WHITESPACE","\n        ",542],"}",["T_WHITESPACE","\n\n        ",543],["T_IF","if",545],["T_WHITESPACE"," ",545],"(",["T_STRING","is_string",545],"(",["T_VARIABLE","$tables",545],")",["T_WHITESPACE"," ",545],["T_BOOLEAN_OR","||",545],["T_WHITESPACE"," ",545],["T_ISSET","isset",545],"(",["T_VARIABLE","$tables",545],"[",["T_CONSTANT_ENCAPSED_STRING","'table'",545],"]",")",")",["T_WHITESPACE"," ",545],"{",["T_WHITESPACE","\n            ",545],["T_VARIABLE","$tables",546],["T_WHITESPACE"," ",546],"=",["T_WHITESPACE"," ",546],"[",["T_VARIABLE","$tables",546],"]",";",["T_WHITESPACE","\n        ",546],"}",["T_WHITESPACE","\n\n        ",547],["T_VARIABLE","$joins",549],["T_WHITESPACE"," ",549],"=",["T_WHITESPACE"," ",549],"[","]",";",["T_WHITESPACE","\n        ",549],["T_VARIABLE","$i",550],["T_WHITESPACE"," ",550],"=",["T_WHITESPACE"," ",550],["T_STRING","count",550],"(",["T_VARIABLE","$this",550],["T_OBJECT_OPERATOR","->",550],["T_STRING","_parts",550],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",550],"]",")",";",["T_WHITESPACE","\n        ",550],["T_FOREACH","foreach",551],["T_WHITESPACE"," ",551],"(",["T_VARIABLE","$tables",551],["T_WHITESPACE"," ",551],["T_AS","as",551],["T_WHITESPACE"," ",551],["T_VARIABLE","$alias",551],["T_WHITESPACE"," ",551],["T_DOUBLE_ARROW","=>",551],["T_WHITESPACE"," ",551],["T_VARIABLE","$t",551],")",["T_WHITESPACE"," ",551],"{",["T_WHITESPACE","\n            ",551],["T_IF","if",552],["T_WHITESPACE"," ",552],"(","!",["T_STRING","is_array",552],"(",["T_VARIABLE","$t",552],")",")",["T_WHITESPACE"," ",552],"{",["T_WHITESPACE","\n                ",552],["T_VARIABLE","$t",553],["T_WHITESPACE"," ",553],"=",["T_WHITESPACE"," ",553],"[",["T_CONSTANT_ENCAPSED_STRING","'table'",553],["T_WHITESPACE"," ",553],["T_DOUBLE_ARROW","=>",553],["T_WHITESPACE"," ",553],["T_VARIABLE","$t",553],",",["T_WHITESPACE"," ",553],["T_CONSTANT_ENCAPSED_STRING","'conditions'",553],["T_WHITESPACE"," ",553],["T_DOUBLE_ARROW","=>",553],["T_WHITESPACE"," ",553],["T_VARIABLE","$this",553],["T_OBJECT_OPERATOR","->",553],["T_STRING","newExpr",553],"(",")","]",";",["T_WHITESPACE","\n            ",553],"}",["T_WHITESPACE","\n\n            ",554],["T_IF","if",556],["T_WHITESPACE"," ",556],"(","!",["T_STRING","is_string",556],"(",["T_VARIABLE","$t",556],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",556],"]",")",["T_WHITESPACE"," ",556],["T_BOOLEAN_AND","&&",556],["T_WHITESPACE"," ",556],["T_STRING","is_callable",556],"(",["T_VARIABLE","$t",556],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",556],"]",")",")",["T_WHITESPACE"," ",556],"{",["T_WHITESPACE","\n                ",556],["T_VARIABLE","$t",557],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",557],"]",["T_WHITESPACE"," ",557],"=",["T_WHITESPACE"," ",557],["T_VARIABLE","$t",557],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",557],"]","(",["T_VARIABLE","$this",557],["T_OBJECT_OPERATOR","->",557],["T_STRING","newExpr",557],"(",")",",",["T_WHITESPACE"," ",557],["T_VARIABLE","$this",557],")",";",["T_WHITESPACE","\n            ",557],"}",["T_WHITESPACE","\n\n            ",558],["T_IF","if",560],["T_WHITESPACE"," ",560],"(","!","(",["T_VARIABLE","$t",560],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",560],"]",["T_WHITESPACE"," ",560],["T_INSTANCEOF","instanceof",560],["T_WHITESPACE"," ",560],["T_STRING","ExpressionInterface",560],")",")",["T_WHITESPACE"," ",560],"{",["T_WHITESPACE","\n                ",560],["T_VARIABLE","$t",561],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",561],"]",["T_WHITESPACE"," ",561],"=",["T_WHITESPACE"," ",561],["T_VARIABLE","$this",561],["T_OBJECT_OPERATOR","->",561],["T_STRING","newExpr",561],"(",")",["T_OBJECT_OPERATOR","->",561],["T_STRING","add",561],"(",["T_VARIABLE","$t",561],"[",["T_CONSTANT_ENCAPSED_STRING","'conditions'",561],"]",",",["T_WHITESPACE"," ",561],["T_VARIABLE","$types",561],")",";",["T_WHITESPACE","\n            ",561],"}",["T_WHITESPACE","\n            ",562],["T_VARIABLE","$alias",563],["T_WHITESPACE"," ",563],"=",["T_WHITESPACE"," ",563],["T_STRING","is_string",563],"(",["T_VARIABLE","$alias",563],")",["T_WHITESPACE"," ",563],"?",["T_WHITESPACE"," ",563],["T_VARIABLE","$alias",563],["T_WHITESPACE"," ",563],":",["T_WHITESPACE"," ",563],["T_STRING","null",563],";",["T_WHITESPACE","\n            ",563],["T_VARIABLE","$joins",564],"[",["T_VARIABLE","$alias",564],["T_WHITESPACE"," ",564],"?",":",["T_WHITESPACE"," ",564],["T_VARIABLE","$i",564],["T_INC","++",564],"]",["T_WHITESPACE"," ",564],"=",["T_WHITESPACE"," ",564],["T_VARIABLE","$t",564],["T_WHITESPACE"," ",564],"+",["T_WHITESPACE"," ",564],"[",["T_CONSTANT_ENCAPSED_STRING","'type'",564],["T_WHITESPACE"," ",564],["T_DOUBLE_ARROW","=>",564],["T_WHITESPACE"," ",564],["T_CONSTANT_ENCAPSED_STRING","'INNER'",564],",",["T_WHITESPACE"," ",564],["T_CONSTANT_ENCAPSED_STRING","'alias'",564],["T_WHITESPACE"," ",564],["T_DOUBLE_ARROW","=>",564],["T_WHITESPACE"," ",564],["T_VARIABLE","$alias",564],"]",";",["T_WHITESPACE","\n        ",564],"}",["T_WHITESPACE","\n\n        ",565],["T_IF","if",567],["T_WHITESPACE"," ",567],"(",["T_VARIABLE","$overwrite",567],")",["T_WHITESPACE"," ",567],"{",["T_WHITESPACE","\n            ",567],["T_VARIABLE","$this",568],["T_OBJECT_OPERATOR","->",568],["T_STRING","_parts",568],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",568],"]",["T_WHITESPACE"," ",568],"=",["T_WHITESPACE"," ",568],["T_VARIABLE","$joins",568],";",["T_WHITESPACE","\n        ",568],"}",["T_WHITESPACE"," ",569],["T_ELSE","else",569],["T_WHITESPACE"," ",569],"{",["T_WHITESPACE","\n            ",569],["T_VARIABLE","$this",570],["T_OBJECT_OPERATOR","->",570],["T_STRING","_parts",570],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",570],"]",["T_WHITESPACE"," ",570],"=",["T_WHITESPACE"," ",570],["T_STRING","array_merge",570],"(",["T_VARIABLE","$this",570],["T_OBJECT_OPERATOR","->",570],["T_STRING","_parts",570],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",570],"]",",",["T_WHITESPACE"," ",570],["T_VARIABLE","$joins",570],")",";",["T_WHITESPACE","\n        ",570],"}",["T_WHITESPACE","\n\n        ",571],["T_VARIABLE","$this",573],["T_OBJECT_OPERATOR","->",573],["T_STRING","_dirty",573],"(",")",";",["T_WHITESPACE","\n\n        ",573],["T_RETURN","return",575],["T_WHITESPACE"," ",575],["T_VARIABLE","$this",575],";",["T_WHITESPACE","\n    ",575],"}",["T_WHITESPACE","\n\n    ",576],["T_DOC_COMMENT","\/**\n     * Remove a join if it has been defined.\n     *\n     * Useful when you are redefining joins or want to re-order\n     * the join clauses.\n     *\n     * @param string $name The alias\/name of the join to remove.\n     * @return $this\n     *\/",578],["T_WHITESPACE","\n    ",586],["T_PUBLIC","public",587],["T_WHITESPACE"," ",587],["T_FUNCTION","function",587],["T_WHITESPACE"," ",587],["T_STRING","removeJoin",587],"(",["T_VARIABLE","$name",587],")",["T_WHITESPACE","\n    ",587],"{",["T_WHITESPACE","\n        ",588],["T_UNSET","unset",589],"(",["T_VARIABLE","$this",589],["T_OBJECT_OPERATOR","->",589],["T_STRING","_parts",589],"[",["T_CONSTANT_ENCAPSED_STRING","'join'",589],"]","[",["T_VARIABLE","$name",589],"]",")",";",["T_WHITESPACE","\n        ",589],["T_VARIABLE","$this",590],["T_OBJECT_OPERATOR","->",590],["T_STRING","_dirty",590],"(",")",";",["T_WHITESPACE","\n\n        ",590],["T_RETURN","return",592],["T_WHITESPACE"," ",592],["T_VARIABLE","$this",592],";",["T_WHITESPACE","\n    ",592],"}",["T_WHITESPACE","\n\n    ",593],["T_DOC_COMMENT","\/**\n     * Adds a single LEFT JOIN clause to the query.\n     *\n     * This is a shorthand method for building joins via `join()`.\n     *\n     * The table name can be passed as a string, or as an array in case it needs to\n     * be aliased:\n     *\n     * ```\n     * \/\/ LEFT JOIN authors ON authors.id = posts.author_id\n     * $query->leftJoin('authors', 'authors.id = posts.author_id');\n     *\n     * \/\/ LEFT JOIN authors a ON a.id = posts.author_id\n     * $query->leftJoin(['a' => 'authors'], 'a.id = posts.author_id');\n     * ```\n     *\n     * Conditions can be passed as strings, arrays, or expression objects. When\n     * using arrays it is possible to combine them with the `$types` parameter\n     * in order to define how to convert the values:\n     *\n     * ```\n     * $query->leftJoin(['a' => 'articles'], [\n     *      'a.posted >=' => new DateTime('-3 days'),\n     *      'a.published' => true,\n     *      'a.author_id = authors.id'\n     * ], ['a.posted' => 'datetime', 'a.published' => 'boolean']);\n     * ```\n     *\n     * See `join()` for further details on conditions and types.\n     *\n     * @param string|array $table The table to join with\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions The conditions\n     * to use for joining.\n     * @param array $types a list of types associated to the conditions used for converting\n     * values to the corresponding database representation.\n     * @return $this\n     *\/",595],["T_WHITESPACE","\n    ",631],["T_PUBLIC","public",632],["T_WHITESPACE"," ",632],["T_FUNCTION","function",632],["T_WHITESPACE"," ",632],["T_STRING","leftJoin",632],"(",["T_VARIABLE","$table",632],",",["T_WHITESPACE"," ",632],["T_VARIABLE","$conditions",632],["T_WHITESPACE"," ",632],"=",["T_WHITESPACE"," ",632],"[","]",",",["T_WHITESPACE"," ",632],["T_VARIABLE","$types",632],["T_WHITESPACE"," ",632],"=",["T_WHITESPACE"," ",632],"[","]",")",["T_WHITESPACE","\n    ",632],"{",["T_WHITESPACE","\n        ",633],["T_RETURN","return",634],["T_WHITESPACE"," ",634],["T_VARIABLE","$this",634],["T_OBJECT_OPERATOR","->",634],["T_STRING","join",634],"(",["T_VARIABLE","$this",634],["T_OBJECT_OPERATOR","->",634],["T_STRING","_makeJoin",634],"(",["T_VARIABLE","$table",634],",",["T_WHITESPACE"," ",634],["T_VARIABLE","$conditions",634],",",["T_WHITESPACE"," ",634],["T_CONSTANT_ENCAPSED_STRING","'LEFT'",634],")",",",["T_WHITESPACE"," ",634],["T_VARIABLE","$types",634],")",";",["T_WHITESPACE","\n    ",634],"}",["T_WHITESPACE","\n\n    ",635],["T_DOC_COMMENT","\/**\n     * Adds a single RIGHT JOIN clause to the query.\n     *\n     * This is a shorthand method for building joins via `join()`.\n     *\n     * The arguments of this method are identical to the `leftJoin()` shorthand, please refer\n     * to that methods description for further details.\n     *\n     * @param string|array $table The table to join with\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions The conditions\n     * to use for joining.\n     * @param array $types a list of types associated to the conditions used for converting\n     * values to the corresponding database representation.\n     * @return $this\n     *\/",637],["T_WHITESPACE","\n    ",651],["T_PUBLIC","public",652],["T_WHITESPACE"," ",652],["T_FUNCTION","function",652],["T_WHITESPACE"," ",652],["T_STRING","rightJoin",652],"(",["T_VARIABLE","$table",652],",",["T_WHITESPACE"," ",652],["T_VARIABLE","$conditions",652],["T_WHITESPACE"," ",652],"=",["T_WHITESPACE"," ",652],"[","]",",",["T_WHITESPACE"," ",652],["T_VARIABLE","$types",652],["T_WHITESPACE"," ",652],"=",["T_WHITESPACE"," ",652],"[","]",")",["T_WHITESPACE","\n    ",652],"{",["T_WHITESPACE","\n        ",653],["T_RETURN","return",654],["T_WHITESPACE"," ",654],["T_VARIABLE","$this",654],["T_OBJECT_OPERATOR","->",654],["T_STRING","join",654],"(",["T_VARIABLE","$this",654],["T_OBJECT_OPERATOR","->",654],["T_STRING","_makeJoin",654],"(",["T_VARIABLE","$table",654],",",["T_WHITESPACE"," ",654],["T_VARIABLE","$conditions",654],",",["T_WHITESPACE"," ",654],["T_CONSTANT_ENCAPSED_STRING","'RIGHT'",654],")",",",["T_WHITESPACE"," ",654],["T_VARIABLE","$types",654],")",";",["T_WHITESPACE","\n    ",654],"}",["T_WHITESPACE","\n\n    ",655],["T_DOC_COMMENT","\/**\n     * Adds a single INNER JOIN clause to the query.\n     *\n     * This is a shorthand method for building joins via `join()`.\n     *\n     * The arguments of this method are identical to the `leftJoin()` shorthand, please refer\n     * to that methods description for further details.\n     *\n     * @param string|array $table The table to join with\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions The conditions\n     * to use for joining.\n     * @param array $types a list of types associated to the conditions used for converting\n     * values to the corresponding database representation.\n     * @return $this\n     *\/",657],["T_WHITESPACE","\n    ",671],["T_PUBLIC","public",672],["T_WHITESPACE"," ",672],["T_FUNCTION","function",672],["T_WHITESPACE"," ",672],["T_STRING","innerJoin",672],"(",["T_VARIABLE","$table",672],",",["T_WHITESPACE"," ",672],["T_VARIABLE","$conditions",672],["T_WHITESPACE"," ",672],"=",["T_WHITESPACE"," ",672],"[","]",",",["T_WHITESPACE"," ",672],["T_VARIABLE","$types",672],["T_WHITESPACE"," ",672],"=",["T_WHITESPACE"," ",672],"[","]",")",["T_WHITESPACE","\n    ",672],"{",["T_WHITESPACE","\n        ",673],["T_RETURN","return",674],["T_WHITESPACE"," ",674],["T_VARIABLE","$this",674],["T_OBJECT_OPERATOR","->",674],["T_STRING","join",674],"(",["T_VARIABLE","$this",674],["T_OBJECT_OPERATOR","->",674],["T_STRING","_makeJoin",674],"(",["T_VARIABLE","$table",674],",",["T_WHITESPACE"," ",674],["T_VARIABLE","$conditions",674],",",["T_WHITESPACE"," ",674],["T_CONSTANT_ENCAPSED_STRING","'INNER'",674],")",",",["T_WHITESPACE"," ",674],["T_VARIABLE","$types",674],")",";",["T_WHITESPACE","\n    ",674],"}",["T_WHITESPACE","\n\n    ",675],["T_DOC_COMMENT","\/**\n     * Returns an array that can be passed to the join method describing a single join clause\n     *\n     * @param string|array $table The table to join with\n     * @param string|array|\\Cake\\Database\\ExpressionInterface $conditions The conditions\n     * to use for joining.\n     * @param string $type the join type to use\n     * @return array\n     *\/",677],["T_WHITESPACE","\n    ",685],["T_PROTECTED","protected",686],["T_WHITESPACE"," ",686],["T_FUNCTION","function",686],["T_WHITESPACE"," ",686],["T_STRING","_makeJoin",686],"(",["T_VARIABLE","$table",686],",",["T_WHITESPACE"," ",686],["T_VARIABLE","$conditions",686],",",["T_WHITESPACE"," ",686],["T_VARIABLE","$type",686],")",["T_WHITESPACE","\n    ",686],"{",["T_WHITESPACE","\n        ",687],["T_VARIABLE","$alias",688],["T_WHITESPACE"," ",688],"=",["T_WHITESPACE"," ",688],["T_VARIABLE","$table",688],";",["T_WHITESPACE","\n\n        ",688],["T_IF","if",690],["T_WHITESPACE"," ",690],"(",["T_STRING","is_array",690],"(",["T_VARIABLE","$table",690],")",")",["T_WHITESPACE"," ",690],"{",["T_WHITESPACE","\n            ",690],["T_VARIABLE","$alias",691],["T_WHITESPACE"," ",691],"=",["T_WHITESPACE"," ",691],["T_STRING","key",691],"(",["T_VARIABLE","$table",691],")",";",["T_WHITESPACE","\n            ",691],["T_VARIABLE","$table",692],["T_WHITESPACE"," ",692],"=",["T_WHITESPACE"," ",692],["T_STRING","current",692],"(",["T_VARIABLE","$table",692],")",";",["T_WHITESPACE","\n        ",692],"}",["T_WHITESPACE","\n\n        ",693],["T_RETURN","return",695],["T_WHITESPACE"," ",695],"[",["T_WHITESPACE","\n            ",695],["T_VARIABLE","$alias",696],["T_WHITESPACE"," ",696],["T_DOUBLE_ARROW","=>",696],["T_WHITESPACE"," ",696],"[",["T_WHITESPACE","\n                ",696],["T_CONSTANT_ENCAPSED_STRING","'table'",697],["T_WHITESPACE"," ",697],["T_DOUBLE_ARROW","=>",697],["T_WHITESPACE"," ",697],["T_VARIABLE","$table",697],",",["T_WHITESPACE","\n                ",697],["T_CONSTANT_ENCAPSED_STRING","'conditions'",698],["T_WHITESPACE"," ",698],["T_DOUBLE_ARROW","=>",698],["T_WHITESPACE"," ",698],["T_VARIABLE","$conditions",698],",",["T_WHITESPACE","\n                ",698],["T_CONSTANT_ENCAPSED_STRING","'type'",699],["T_WHITESPACE"," ",699],["T_DOUBLE_ARROW","=>",699],["T_WHITESPACE"," ",699],["T_VARIABLE","$type",699],["T_WHITESPACE","\n            ",699],"]",["T_WHITESPACE","\n        ",700],"]",";",["T_WHITESPACE","\n    ",701],"}",["T_WHITESPACE","\n\n    ",702],["T_DOC_COMMENT","\/**\n     * Adds a condition or set of conditions to be used in the WHERE clause for this\n     * query. Conditions can be expressed as an array of fields as keys with\n     * comparison operators in it, the values for the array will be used for comparing\n     * the field to such literal. Finally, conditions can be expressed as a single\n     * string or an array of strings.\n     *\n     * When using arrays, each entry will be joined to the rest of the conditions using\n     * an AND operator. Consecutive calls to this function will also join the new\n     * conditions specified using the AND operator. Additionally, values can be\n     * expressed using expression objects which can include other query objects.\n     *\n     * Any conditions created with this methods can be used with any SELECT, UPDATE\n     * and DELETE type of queries.\n     *\n     * ### Conditions using operators:\n     *\n     * ```\n     * $query->where([\n     *     'posted >=' => new DateTime('3 days ago'),\n     *     'title LIKE' => 'Hello W%',\n     *     'author_id' => 1,\n     * ], ['posted' => 'datetime']);\n     * ```\n     *\n     * The previous example produces:\n     *\n     * `WHERE posted >= 2012-01-27 AND title LIKE 'Hello W%' AND author_id = 1`\n     *\n     * Second parameter is used to specify what type is expected for each passed\n     * key. Valid types can be used from the mapped with Database\\Type class.\n     *\n     * ### Nesting conditions with conjunctions:\n     *\n     * ```\n     * $query->where([\n     *     'author_id !=' => 1,\n     *     'OR' => ['published' => true, 'posted <' => new DateTime('now')],\n     *     'NOT' => ['title' => 'Hello']\n     * ], ['published' => boolean, 'posted' => 'datetime']\n     * ```\n     *\n     * The previous example produces:\n     *\n     * `WHERE author_id = 1 AND (published = 1 OR posted < '2012-02-01') AND NOT (title = 'Hello')`\n     *\n     * You can nest conditions using conjunctions as much as you like. Sometimes, you\n     * may want to define 2 different options for the same key, in that case, you can\n     * wrap each condition inside a new array:\n     *\n     * `$query->where(['OR' => [['published' => false], ['published' => true]])`\n     *\n     * Keep in mind that every time you call where() with the third param set to false\n     * (default), it will join the passed conditions to the previous stored list using\n     * the AND operator. Also, using the same array key twice in consecutive calls to\n     * this method will not override the previous value.\n     *\n     * ### Using expressions objects:\n     *\n     * ```\n     * $exp = $query->newExpr()->add(['id !=' => 100, 'author_id' != 1])->tieWith('OR');\n     * $query->where(['published' => true], ['published' => 'boolean'])->where($exp);\n     * ```\n     *\n     * The previous example produces:\n     *\n     * `WHERE (id != 100 OR author_id != 1) AND published = 1`\n     *\n     * Other Query objects that be used as conditions for any field.\n     *\n     * ### Adding conditions in multiple steps:\n     *\n     * You can use callable functions to construct complex expressions, functions\n     * receive as first argument a new QueryExpression object and this query instance\n     * as second argument. Functions must return an expression object, that will be\n     * added the list of conditions for the query using the AND operator.\n     *\n     * ```\n     * $query\n     *   ->where(['title !=' => 'Hello World'])\n     *   ->where(function ($exp, $query) {\n     *     $or = $exp->or_(['id' => 1]);\n     *     $and = $exp->and_(['id >' => 2, 'id <' => 10]);\n     *    return $or->add($and);\n     *   });\n     * ```\n     *\n     * * The previous example produces:\n     *\n     * `WHERE title != 'Hello World' AND (id = 1 OR (id > 2 AND id < 10))`\n     *\n     * ### Conditions as strings:\n     *\n     * ```\n     * $query->where(['articles.author_id = authors.id', 'modified IS NULL']);\n     * ```\n     *\n     * The previous example produces:\n     *\n     * `WHERE articles.author_id = authors.id AND modified IS NULL`\n     *\n     * Please note that when using the array notation or the expression objects, all\n     * values will be correctly quoted and transformed to the correspondent database\n     * data type automatically for you, thus securing your application from SQL injections.\n     * If you use string conditions make sure that your values are correctly quoted.\n     * The safest thing you can do is to never use string conditions.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable|null $conditions The conditions to filter on.\n     * @param array $types associative array of type names used to bind values to query\n     * @param bool $overwrite whether to reset conditions with passed list or not\n     * @see \\Cake\\Database\\Type\n     * @see \\Cake\\Database\\Expression\\QueryExpression\n     * @return $this\n     *\/",704],["T_WHITESPACE","\n    ",817],["T_PUBLIC","public",818],["T_WHITESPACE"," ",818],["T_FUNCTION","function",818],["T_WHITESPACE"," ",818],["T_STRING","where",818],"(",["T_VARIABLE","$conditions",818],["T_WHITESPACE"," ",818],"=",["T_WHITESPACE"," ",818],["T_STRING","null",818],",",["T_WHITESPACE"," ",818],["T_VARIABLE","$types",818],["T_WHITESPACE"," ",818],"=",["T_WHITESPACE"," ",818],"[","]",",",["T_WHITESPACE"," ",818],["T_VARIABLE","$overwrite",818],["T_WHITESPACE"," ",818],"=",["T_WHITESPACE"," ",818],["T_STRING","false",818],")",["T_WHITESPACE","\n    ",818],"{",["T_WHITESPACE","\n        ",819],["T_IF","if",820],["T_WHITESPACE"," ",820],"(",["T_VARIABLE","$overwrite",820],")",["T_WHITESPACE"," ",820],"{",["T_WHITESPACE","\n            ",820],["T_VARIABLE","$this",821],["T_OBJECT_OPERATOR","->",821],["T_STRING","_parts",821],"[",["T_CONSTANT_ENCAPSED_STRING","'where'",821],"]",["T_WHITESPACE"," ",821],"=",["T_WHITESPACE"," ",821],["T_VARIABLE","$this",821],["T_OBJECT_OPERATOR","->",821],["T_STRING","newExpr",821],"(",")",";",["T_WHITESPACE","\n        ",821],"}",["T_WHITESPACE","\n        ",822],["T_VARIABLE","$this",823],["T_OBJECT_OPERATOR","->",823],["T_STRING","_conjugate",823],"(",["T_CONSTANT_ENCAPSED_STRING","'where'",823],",",["T_WHITESPACE"," ",823],["T_VARIABLE","$conditions",823],",",["T_WHITESPACE"," ",823],["T_CONSTANT_ENCAPSED_STRING","'AND'",823],",",["T_WHITESPACE"," ",823],["T_VARIABLE","$types",823],")",";",["T_WHITESPACE","\n\n        ",823],["T_RETURN","return",825],["T_WHITESPACE"," ",825],["T_VARIABLE","$this",825],";",["T_WHITESPACE","\n    ",825],"}",["T_WHITESPACE","\n\n    ",826],["T_DOC_COMMENT","\/**\n     * Connects any previously defined set of conditions to the provided list\n     * using the AND operator. This function accepts the conditions list in the same\n     * format as the method `where` does, hence you can use arrays, expression objects\n     * callback functions or strings.\n     *\n     * It is important to notice that when calling this function, any previous set\n     * of conditions defined for this query will be treated as a single argument for\n     * the AND operator. This function will not only operate the most recently defined\n     * condition, but all the conditions as a whole.\n     *\n     * When using an array for defining conditions, creating constraints form each\n     * array entry will use the same logic as with the `where()` function. This means\n     * that each array entry will be joined to the other using the AND operator, unless\n     * you nest the conditions in the array using other operator.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $query->where(['title' => 'Hello World')->andWhere(['author_id' => 1]);\n     * ```\n     *\n     * Will produce:\n     *\n     * `WHERE title = 'Hello World' AND author_id = 1`\n     *\n     * ```\n     * $query\n     *   ->where(['OR' => ['published' => false, 'published is NULL']])\n     *   ->andWhere(['author_id' => 1, 'comments_count >' => 10])\n     * ```\n     *\n     * Produces:\n     *\n     * `WHERE (published = 0 OR published IS NULL) AND author_id = 1 AND comments_count > 10`\n     *\n     * ```\n     * $query\n     *   ->where(['title' => 'Foo'])\n     *   ->andWhere(function ($exp, $query) {\n     *     return $exp\n     *       ->add(['author_id' => 1])\n     *       ->or_(['author_id' => 2]);\n     *   });\n     * ```\n     *\n     * Generates the following conditions:\n     *\n     * `WHERE (title = 'Foo') AND (author_id = 1 OR author_id = 2)`\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable $conditions The conditions to add with AND.\n     * @param array $types associative array of type names used to bind values to query\n     * @see \\Cake\\Database\\Query::where()\n     * @see \\Cake\\Database\\Type\n     * @return $this\n     *\/",828],["T_WHITESPACE","\n    ",883],["T_PUBLIC","public",884],["T_WHITESPACE"," ",884],["T_FUNCTION","function",884],["T_WHITESPACE"," ",884],["T_STRING","andWhere",884],"(",["T_VARIABLE","$conditions",884],",",["T_WHITESPACE"," ",884],["T_VARIABLE","$types",884],["T_WHITESPACE"," ",884],"=",["T_WHITESPACE"," ",884],"[","]",")",["T_WHITESPACE","\n    ",884],"{",["T_WHITESPACE","\n        ",885],["T_VARIABLE","$this",886],["T_OBJECT_OPERATOR","->",886],["T_STRING","_conjugate",886],"(",["T_CONSTANT_ENCAPSED_STRING","'where'",886],",",["T_WHITESPACE"," ",886],["T_VARIABLE","$conditions",886],",",["T_WHITESPACE"," ",886],["T_CONSTANT_ENCAPSED_STRING","'AND'",886],",",["T_WHITESPACE"," ",886],["T_VARIABLE","$types",886],")",";",["T_WHITESPACE","\n\n        ",886],["T_RETURN","return",888],["T_WHITESPACE"," ",888],["T_VARIABLE","$this",888],";",["T_WHITESPACE","\n    ",888],"}",["T_WHITESPACE","\n\n    ",889],["T_DOC_COMMENT","\/**\n     * Connects any previously defined set of conditions to the provided list\n     * using the OR operator. This function accepts the conditions list in the same\n     * format as the method `where` does, hence you can use arrays, expression objects\n     * callback functions or strings.\n     *\n     * It is important to notice that when calling this function, any previous set\n     * of conditions defined for this query will be treated as a single argument for\n     * the OR operator. This function will not only operate the most recently defined\n     * condition, but all the conditions as a whole.\n     *\n     * When using an array for defining conditions, creating constraints form each\n     * array entry will use the same logic as with the `where()` function. This means\n     * that each array entry will be joined to the other using the OR operator, unless\n     * you nest the conditions in the array using other operator.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $query->where(['title' => 'Hello World')->orWhere(['title' => 'Foo']);\n     * ```\n     *\n     * Will produce:\n     *\n     * `WHERE title = 'Hello World' OR title = 'Foo'`\n     *\n     * ```\n     * $query\n     *   ->where(['OR' => ['published' => false, 'published is NULL']])\n     *   ->orWhere(['author_id' => 1, 'comments_count >' => 10])\n     * ```\n     *\n     * Produces:\n     *\n     * `WHERE (published = 0 OR published IS NULL) OR (author_id = 1 AND comments_count > 10)`\n     *\n     * ```\n     * $query\n     *   ->where(['title' => 'Foo'])\n     *   ->orWhere(function ($exp, $query) {\n     *     return $exp\n     *       ->add(['author_id' => 1])\n     *       ->or_(['author_id' => 2]);\n     *   });\n     * ```\n     *\n     * Generates the following conditions:\n     *\n     * `WHERE (title = 'Foo') OR (author_id = 1 OR author_id = 2)`\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable $conditions The conditions to add with OR.\n     * @param array $types associative array of type names used to bind values to query\n     * @see \\Cake\\Database\\Query::where()\n     * @see \\Cake\\Database\\Type\n     * @return $this\n     *\/",891],["T_WHITESPACE","\n    ",946],["T_PUBLIC","public",947],["T_WHITESPACE"," ",947],["T_FUNCTION","function",947],["T_WHITESPACE"," ",947],["T_STRING","orWhere",947],"(",["T_VARIABLE","$conditions",947],",",["T_WHITESPACE"," ",947],["T_VARIABLE","$types",947],["T_WHITESPACE"," ",947],"=",["T_WHITESPACE"," ",947],"[","]",")",["T_WHITESPACE","\n    ",947],"{",["T_WHITESPACE","\n        ",948],["T_VARIABLE","$this",949],["T_OBJECT_OPERATOR","->",949],["T_STRING","_conjugate",949],"(",["T_CONSTANT_ENCAPSED_STRING","'where'",949],",",["T_WHITESPACE"," ",949],["T_VARIABLE","$conditions",949],",",["T_WHITESPACE"," ",949],["T_CONSTANT_ENCAPSED_STRING","'OR'",949],",",["T_WHITESPACE"," ",949],["T_VARIABLE","$types",949],")",";",["T_WHITESPACE","\n\n        ",949],["T_RETURN","return",951],["T_WHITESPACE"," ",951],["T_VARIABLE","$this",951],";",["T_WHITESPACE","\n    ",951],"}",["T_WHITESPACE","\n\n    ",952],["T_DOC_COMMENT","\/**\n     * Adds a single or multiple fields to be used in the ORDER clause for this query.\n     * Fields can be passed as an array of strings, array of expression\n     * objects, a single expression or a single string.\n     *\n     * If an array is passed, keys will be used as the field itself and the value will\n     * represent the order in which such field should be ordered. When called multiple\n     * times with the same fields as key, the last order definition will prevail over\n     * the others.\n     *\n     * By default this function will append any passed argument to the list of fields\n     * to be selected, unless the second argument is set to true.\n     *\n     * ### Examples:\n     *\n     * ```\n     * $query->order(['title' => 'DESC', 'author_id' => 'ASC']);\n     * ```\n     *\n     * Produces:\n     *\n     * `ORDER BY title DESC, author_id ASC`\n     *\n     * ```\n     * $query->order(['title' => 'DESC NULLS FIRST'])->order('author_id');\n     * ```\n     *\n     * Will generate:\n     *\n     * `ORDER BY title DESC NULLS FIRST, author_id`\n     *\n     * ```\n     * $expression = $query->newExpr()->add(['id % 2 = 0']);\n     * $query->order($expression)->order(['title' => 'ASC']);\n     * ```\n     *\n     * Will become:\n     *\n     * `ORDER BY (id %2 = 0), title ASC`\n     *\n     * If you need to set complex expressions as order conditions, you\n     * should use `orderAsc()` or `orderDesc()`.\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string $fields fields to be added to the list\n     * @param bool $overwrite whether to reset order with field list or not\n     * @return $this\n     *\/",954],["T_WHITESPACE","\n    ",1000],["T_PUBLIC","public",1001],["T_WHITESPACE"," ",1001],["T_FUNCTION","function",1001],["T_WHITESPACE"," ",1001],["T_STRING","order",1001],"(",["T_VARIABLE","$fields",1001],",",["T_WHITESPACE"," ",1001],["T_VARIABLE","$overwrite",1001],["T_WHITESPACE"," ",1001],"=",["T_WHITESPACE"," ",1001],["T_STRING","false",1001],")",["T_WHITESPACE","\n    ",1001],"{",["T_WHITESPACE","\n        ",1002],["T_IF","if",1003],["T_WHITESPACE"," ",1003],"(",["T_VARIABLE","$overwrite",1003],")",["T_WHITESPACE"," ",1003],"{",["T_WHITESPACE","\n            ",1003],["T_VARIABLE","$this",1004],["T_OBJECT_OPERATOR","->",1004],["T_STRING","_parts",1004],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1004],"]",["T_WHITESPACE"," ",1004],"=",["T_WHITESPACE"," ",1004],["T_STRING","null",1004],";",["T_WHITESPACE","\n        ",1004],"}",["T_WHITESPACE","\n\n        ",1005],["T_IF","if",1007],["T_WHITESPACE"," ",1007],"(","!",["T_VARIABLE","$fields",1007],")",["T_WHITESPACE"," ",1007],"{",["T_WHITESPACE","\n            ",1007],["T_RETURN","return",1008],["T_WHITESPACE"," ",1008],["T_VARIABLE","$this",1008],";",["T_WHITESPACE","\n        ",1008],"}",["T_WHITESPACE","\n\n        ",1009],["T_IF","if",1011],["T_WHITESPACE"," ",1011],"(","!",["T_VARIABLE","$this",1011],["T_OBJECT_OPERATOR","->",1011],["T_STRING","_parts",1011],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1011],"]",")",["T_WHITESPACE"," ",1011],"{",["T_WHITESPACE","\n            ",1011],["T_VARIABLE","$this",1012],["T_OBJECT_OPERATOR","->",1012],["T_STRING","_parts",1012],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1012],"]",["T_WHITESPACE"," ",1012],"=",["T_WHITESPACE"," ",1012],["T_NEW","new",1012],["T_WHITESPACE"," ",1012],["T_STRING","OrderByExpression",1012],"(",")",";",["T_WHITESPACE","\n        ",1012],"}",["T_WHITESPACE","\n        ",1013],["T_VARIABLE","$this",1014],["T_OBJECT_OPERATOR","->",1014],["T_STRING","_conjugate",1014],"(",["T_CONSTANT_ENCAPSED_STRING","'order'",1014],",",["T_WHITESPACE"," ",1014],["T_VARIABLE","$fields",1014],",",["T_WHITESPACE"," ",1014],["T_CONSTANT_ENCAPSED_STRING","''",1014],",",["T_WHITESPACE"," ",1014],"[","]",")",";",["T_WHITESPACE","\n\n        ",1014],["T_RETURN","return",1016],["T_WHITESPACE"," ",1016],["T_VARIABLE","$this",1016],";",["T_WHITESPACE","\n    ",1016],"}",["T_WHITESPACE","\n\n    ",1017],["T_DOC_COMMENT","\/**\n     * Add an ORDER BY clause with an ASC direction.\n     *\n     * This method allows you to set complex expressions\n     * as order conditions unlike order()\n     *\n     * @param string|\\Cake\\Database\\Expression\\QueryExpression $field The field to order on.\n     * @param bool $overwrite Whether or not to reset the order clauses.\n     * @return $this\n     *\/",1019],["T_WHITESPACE","\n    ",1028],["T_PUBLIC","public",1029],["T_WHITESPACE"," ",1029],["T_FUNCTION","function",1029],["T_WHITESPACE"," ",1029],["T_STRING","orderAsc",1029],"(",["T_VARIABLE","$field",1029],",",["T_WHITESPACE"," ",1029],["T_VARIABLE","$overwrite",1029],["T_WHITESPACE"," ",1029],"=",["T_WHITESPACE"," ",1029],["T_STRING","false",1029],")",["T_WHITESPACE","\n    ",1029],"{",["T_WHITESPACE","\n        ",1030],["T_IF","if",1031],["T_WHITESPACE"," ",1031],"(",["T_VARIABLE","$overwrite",1031],")",["T_WHITESPACE"," ",1031],"{",["T_WHITESPACE","\n            ",1031],["T_VARIABLE","$this",1032],["T_OBJECT_OPERATOR","->",1032],["T_STRING","_parts",1032],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1032],"]",["T_WHITESPACE"," ",1032],"=",["T_WHITESPACE"," ",1032],["T_STRING","null",1032],";",["T_WHITESPACE","\n        ",1032],"}",["T_WHITESPACE","\n        ",1033],["T_IF","if",1034],["T_WHITESPACE"," ",1034],"(","!",["T_VARIABLE","$field",1034],")",["T_WHITESPACE"," ",1034],"{",["T_WHITESPACE","\n            ",1034],["T_RETURN","return",1035],["T_WHITESPACE"," ",1035],["T_VARIABLE","$this",1035],";",["T_WHITESPACE","\n        ",1035],"}",["T_WHITESPACE","\n\n        ",1036],["T_IF","if",1038],["T_WHITESPACE"," ",1038],"(","!",["T_VARIABLE","$this",1038],["T_OBJECT_OPERATOR","->",1038],["T_STRING","_parts",1038],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1038],"]",")",["T_WHITESPACE"," ",1038],"{",["T_WHITESPACE","\n            ",1038],["T_VARIABLE","$this",1039],["T_OBJECT_OPERATOR","->",1039],["T_STRING","_parts",1039],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1039],"]",["T_WHITESPACE"," ",1039],"=",["T_WHITESPACE"," ",1039],["T_NEW","new",1039],["T_WHITESPACE"," ",1039],["T_STRING","OrderByExpression",1039],"(",")",";",["T_WHITESPACE","\n        ",1039],"}",["T_WHITESPACE","\n        ",1040],["T_VARIABLE","$this",1041],["T_OBJECT_OPERATOR","->",1041],["T_STRING","_parts",1041],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1041],"]",["T_OBJECT_OPERATOR","->",1041],["T_STRING","add",1041],"(",["T_NEW","new",1041],["T_WHITESPACE"," ",1041],["T_STRING","OrderClauseExpression",1041],"(",["T_VARIABLE","$field",1041],",",["T_WHITESPACE"," ",1041],["T_CONSTANT_ENCAPSED_STRING","'ASC'",1041],")",")",";",["T_WHITESPACE","\n\n        ",1041],["T_RETURN","return",1043],["T_WHITESPACE"," ",1043],["T_VARIABLE","$this",1043],";",["T_WHITESPACE","\n    ",1043],"}",["T_WHITESPACE","\n\n    ",1044],["T_DOC_COMMENT","\/**\n     * Add an ORDER BY clause with a DESC direction.\n     *\n     * This method allows you to set complex expressions\n     * as order conditions unlike order()\n     *\n     * @param string|\\Cake\\Database\\Expression\\QueryExpression $field The field to order on.\n     * @param bool $overwrite Whether or not to reset the order clauses.\n     * @return $this\n     *\/",1046],["T_WHITESPACE","\n    ",1055],["T_PUBLIC","public",1056],["T_WHITESPACE"," ",1056],["T_FUNCTION","function",1056],["T_WHITESPACE"," ",1056],["T_STRING","orderDesc",1056],"(",["T_VARIABLE","$field",1056],",",["T_WHITESPACE"," ",1056],["T_VARIABLE","$overwrite",1056],["T_WHITESPACE"," ",1056],"=",["T_WHITESPACE"," ",1056],["T_STRING","false",1056],")",["T_WHITESPACE","\n    ",1056],"{",["T_WHITESPACE","\n        ",1057],["T_IF","if",1058],["T_WHITESPACE"," ",1058],"(",["T_VARIABLE","$overwrite",1058],")",["T_WHITESPACE"," ",1058],"{",["T_WHITESPACE","\n            ",1058],["T_VARIABLE","$this",1059],["T_OBJECT_OPERATOR","->",1059],["T_STRING","_parts",1059],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1059],"]",["T_WHITESPACE"," ",1059],"=",["T_WHITESPACE"," ",1059],["T_STRING","null",1059],";",["T_WHITESPACE","\n        ",1059],"}",["T_WHITESPACE","\n        ",1060],["T_IF","if",1061],["T_WHITESPACE"," ",1061],"(","!",["T_VARIABLE","$field",1061],")",["T_WHITESPACE"," ",1061],"{",["T_WHITESPACE","\n            ",1061],["T_RETURN","return",1062],["T_WHITESPACE"," ",1062],["T_VARIABLE","$this",1062],";",["T_WHITESPACE","\n        ",1062],"}",["T_WHITESPACE","\n\n        ",1063],["T_IF","if",1065],["T_WHITESPACE"," ",1065],"(","!",["T_VARIABLE","$this",1065],["T_OBJECT_OPERATOR","->",1065],["T_STRING","_parts",1065],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1065],"]",")",["T_WHITESPACE"," ",1065],"{",["T_WHITESPACE","\n            ",1065],["T_VARIABLE","$this",1066],["T_OBJECT_OPERATOR","->",1066],["T_STRING","_parts",1066],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1066],"]",["T_WHITESPACE"," ",1066],"=",["T_WHITESPACE"," ",1066],["T_NEW","new",1066],["T_WHITESPACE"," ",1066],["T_STRING","OrderByExpression",1066],"(",")",";",["T_WHITESPACE","\n        ",1066],"}",["T_WHITESPACE","\n        ",1067],["T_VARIABLE","$this",1068],["T_OBJECT_OPERATOR","->",1068],["T_STRING","_parts",1068],"[",["T_CONSTANT_ENCAPSED_STRING","'order'",1068],"]",["T_OBJECT_OPERATOR","->",1068],["T_STRING","add",1068],"(",["T_NEW","new",1068],["T_WHITESPACE"," ",1068],["T_STRING","OrderClauseExpression",1068],"(",["T_VARIABLE","$field",1068],",",["T_WHITESPACE"," ",1068],["T_CONSTANT_ENCAPSED_STRING","'DESC'",1068],")",")",";",["T_WHITESPACE","\n\n        ",1068],["T_RETURN","return",1070],["T_WHITESPACE"," ",1070],["T_VARIABLE","$this",1070],";",["T_WHITESPACE","\n    ",1070],"}",["T_WHITESPACE","\n\n    ",1071],["T_DOC_COMMENT","\/**\n     * Adds a single or multiple fields to be used in the GROUP BY clause for this query.\n     * Fields can be passed as an array of strings, array of expression\n     * objects, a single expression or a single string.\n     *\n     * By default this function will append any passed argument to the list of fields\n     * to be grouped, unless the second argument is set to true.\n     *\n     * ### Examples:\n     *\n     * ```\n     * \/\/ Produces GROUP BY id, title\n     * $query->group(['id', 'title']);\n     *\n     * \/\/ Produces GROUP BY title\n     * $query->group('title');\n     * ```\n     *\n     * @param array|\\Cake\\Database\\ExpressionInterface|string $fields fields to be added to the list\n     * @param bool $overwrite whether to reset fields with passed list or not\n     * @return $this\n     *\/",1073],["T_WHITESPACE","\n    ",1094],["T_PUBLIC","public",1095],["T_WHITESPACE"," ",1095],["T_FUNCTION","function",1095],["T_WHITESPACE"," ",1095],["T_STRING","group",1095],"(",["T_VARIABLE","$fields",1095],",",["T_WHITESPACE"," ",1095],["T_VARIABLE","$overwrite",1095],["T_WHITESPACE"," ",1095],"=",["T_WHITESPACE"," ",1095],["T_STRING","false",1095],")",["T_WHITESPACE","\n    ",1095],"{",["T_WHITESPACE","\n        ",1096],["T_IF","if",1097],["T_WHITESPACE"," ",1097],"(",["T_VARIABLE","$overwrite",1097],")",["T_WHITESPACE"," ",1097],"{",["T_WHITESPACE","\n            ",1097],["T_VARIABLE","$this",1098],["T_OBJECT_OPERATOR","->",1098],["T_STRING","_parts",1098],"[",["T_CONSTANT_ENCAPSED_STRING","'group'",1098],"]",["T_WHITESPACE"," ",1098],"=",["T_WHITESPACE"," ",1098],"[","]",";",["T_WHITESPACE","\n        ",1098],"}",["T_WHITESPACE","\n\n        ",1099],["T_IF","if",1101],["T_WHITESPACE"," ",1101],"(","!",["T_STRING","is_array",1101],"(",["T_VARIABLE","$fields",1101],")",")",["T_WHITESPACE"," ",1101],"{",["T_WHITESPACE","\n            ",1101],["T_VARIABLE","$fields",1102],["T_WHITESPACE"," ",1102],"=",["T_WHITESPACE"," ",1102],"[",["T_VARIABLE","$fields",1102],"]",";",["T_WHITESPACE","\n        ",1102],"}",["T_WHITESPACE","\n\n        ",1103],["T_VARIABLE","$this",1105],["T_OBJECT_OPERATOR","->",1105],["T_STRING","_parts",1105],"[",["T_CONSTANT_ENCAPSED_STRING","'group'",1105],"]",["T_WHITESPACE"," ",1105],"=",["T_WHITESPACE"," ",1105],["T_STRING","array_merge",1105],"(",["T_VARIABLE","$this",1105],["T_OBJECT_OPERATOR","->",1105],["T_STRING","_parts",1105],"[",["T_CONSTANT_ENCAPSED_STRING","'group'",1105],"]",",",["T_WHITESPACE"," ",1105],["T_STRING","array_values",1105],"(",["T_VARIABLE","$fields",1105],")",")",";",["T_WHITESPACE","\n        ",1105],["T_VARIABLE","$this",1106],["T_OBJECT_OPERATOR","->",1106],["T_STRING","_dirty",1106],"(",")",";",["T_WHITESPACE","\n\n        ",1106],["T_RETURN","return",1108],["T_WHITESPACE"," ",1108],["T_VARIABLE","$this",1108],";",["T_WHITESPACE","\n    ",1108],"}",["T_WHITESPACE","\n\n    ",1109],["T_DOC_COMMENT","\/**\n     * Adds a condition or set of conditions to be used in the HAVING clause for this\n     * query. This method operates in exactly the same way as the method `where()`\n     * does. Please refer to its documentation for an insight on how to using each\n     * parameter.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable|null $conditions The having conditions.\n     * @param array $types associative array of type names used to bind values to query\n     * @param bool $overwrite whether to reset conditions with passed list or not\n     * @see \\Cake\\Database\\Query::where()\n     * @return $this\n     *\/",1111],["T_WHITESPACE","\n    ",1122],["T_PUBLIC","public",1123],["T_WHITESPACE"," ",1123],["T_FUNCTION","function",1123],["T_WHITESPACE"," ",1123],["T_STRING","having",1123],"(",["T_VARIABLE","$conditions",1123],["T_WHITESPACE"," ",1123],"=",["T_WHITESPACE"," ",1123],["T_STRING","null",1123],",",["T_WHITESPACE"," ",1123],["T_VARIABLE","$types",1123],["T_WHITESPACE"," ",1123],"=",["T_WHITESPACE"," ",1123],"[","]",",",["T_WHITESPACE"," ",1123],["T_VARIABLE","$overwrite",1123],["T_WHITESPACE"," ",1123],"=",["T_WHITESPACE"," ",1123],["T_STRING","false",1123],")",["T_WHITESPACE","\n    ",1123],"{",["T_WHITESPACE","\n        ",1124],["T_IF","if",1125],["T_WHITESPACE"," ",1125],"(",["T_VARIABLE","$overwrite",1125],")",["T_WHITESPACE"," ",1125],"{",["T_WHITESPACE","\n            ",1125],["T_VARIABLE","$this",1126],["T_OBJECT_OPERATOR","->",1126],["T_STRING","_parts",1126],"[",["T_CONSTANT_ENCAPSED_STRING","'having'",1126],"]",["T_WHITESPACE"," ",1126],"=",["T_WHITESPACE"," ",1126],["T_VARIABLE","$this",1126],["T_OBJECT_OPERATOR","->",1126],["T_STRING","newExpr",1126],"(",")",";",["T_WHITESPACE","\n        ",1126],"}",["T_WHITESPACE","\n        ",1127],["T_VARIABLE","$this",1128],["T_OBJECT_OPERATOR","->",1128],["T_STRING","_conjugate",1128],"(",["T_CONSTANT_ENCAPSED_STRING","'having'",1128],",",["T_WHITESPACE"," ",1128],["T_VARIABLE","$conditions",1128],",",["T_WHITESPACE"," ",1128],["T_CONSTANT_ENCAPSED_STRING","'AND'",1128],",",["T_WHITESPACE"," ",1128],["T_VARIABLE","$types",1128],")",";",["T_WHITESPACE","\n\n        ",1128],["T_RETURN","return",1130],["T_WHITESPACE"," ",1130],["T_VARIABLE","$this",1130],";",["T_WHITESPACE","\n    ",1130],"}",["T_WHITESPACE","\n\n    ",1131],["T_DOC_COMMENT","\/**\n     * Connects any previously defined set of conditions to the provided list\n     * using the AND operator in the HAVING clause. This method operates in exactly\n     * the same way as the method `andWhere()` does. Please refer to its\n     * documentation for an insight on how to using each parameter.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable $conditions The AND conditions for HAVING.\n     * @param array $types associative array of type names used to bind values to query\n     * @see \\Cake\\Database\\Query::andWhere()\n     * @return $this\n     *\/",1133],["T_WHITESPACE","\n    ",1143],["T_PUBLIC","public",1144],["T_WHITESPACE"," ",1144],["T_FUNCTION","function",1144],["T_WHITESPACE"," ",1144],["T_STRING","andHaving",1144],"(",["T_VARIABLE","$conditions",1144],",",["T_WHITESPACE"," ",1144],["T_VARIABLE","$types",1144],["T_WHITESPACE"," ",1144],"=",["T_WHITESPACE"," ",1144],"[","]",")",["T_WHITESPACE","\n    ",1144],"{",["T_WHITESPACE","\n        ",1145],["T_VARIABLE","$this",1146],["T_OBJECT_OPERATOR","->",1146],["T_STRING","_conjugate",1146],"(",["T_CONSTANT_ENCAPSED_STRING","'having'",1146],",",["T_WHITESPACE"," ",1146],["T_VARIABLE","$conditions",1146],",",["T_WHITESPACE"," ",1146],["T_CONSTANT_ENCAPSED_STRING","'AND'",1146],",",["T_WHITESPACE"," ",1146],["T_VARIABLE","$types",1146],")",";",["T_WHITESPACE","\n\n        ",1146],["T_RETURN","return",1148],["T_WHITESPACE"," ",1148],["T_VARIABLE","$this",1148],";",["T_WHITESPACE","\n    ",1148],"}",["T_WHITESPACE","\n\n    ",1149],["T_DOC_COMMENT","\/**\n     * Connects any previously defined set of conditions to the provided list\n     * using the OR operator in the HAVING clause. This method operates in exactly\n     * the same way as the method `orWhere()` does. Please refer to its\n     * documentation for an insight on how to using each parameter.\n     *\n     * @param string|array|\\Cake\\Database\\ExpressionInterface|callable $conditions The OR conditions for HAVING.\n     * @param array $types associative array of type names used to bind values to query.\n     * @see \\Cake\\Database\\Query::orWhere()\n     * @return $this\n     *\/",1151],["T_WHITESPACE","\n    ",1161],["T_PUBLIC","public",1162],["T_WHITESPACE"," ",1162],["T_FUNCTION","function",1162],["T_WHITESPACE"," ",1162],["T_STRING","orHaving",1162],"(",["T_VARIABLE","$conditions",1162],",",["T_WHITESPACE"," ",1162],["T_VARIABLE","$types",1162],["T_WHITESPACE"," ",1162],"=",["T_WHITESPACE"," ",1162],"[","]",")",["T_WHITESPACE","\n    ",1162],"{",["T_WHITESPACE","\n        ",1163],["T_VARIABLE","$this",1164],["T_OBJECT_OPERATOR","->",1164],["T_STRING","_conjugate",1164],"(",["T_CONSTANT_ENCAPSED_STRING","'having'",1164],",",["T_WHITESPACE"," ",1164],["T_VARIABLE","$conditions",1164],",",["T_WHITESPACE"," ",1164],["T_CONSTANT_ENCAPSED_STRING","'OR'",1164],",",["T_WHITESPACE"," ",1164],["T_VARIABLE","$types",1164],")",";",["T_WHITESPACE","\n\n        ",1164],["T_RETURN","return",1166],["T_WHITESPACE"," ",1166],["T_VARIABLE","$this",1166],";",["T_WHITESPACE","\n    ",1166],"}",["T_WHITESPACE","\n\n    ",1167],["T_DOC_COMMENT","\/**\n     * Set the page of results you want.\n     *\n     * This method provides an easier to use interface to set the limit + offset\n     * in the record set you want as results. If empty the limit will default to\n     * the existing limit clause, and if that too is empty, then `25` will be used.\n     *\n     * Pages should start at 1.\n     *\n     * @param int $num The page number you want.\n     * @param int|null $limit The number of rows you want in the page. If null\n     *  the current limit clause will be used.\n     * @return $this\n     *\/",1169],["T_WHITESPACE","\n    ",1182],["T_PUBLIC","public",1183],["T_WHITESPACE"," ",1183],["T_FUNCTION","function",1183],["T_WHITESPACE"," ",1183],["T_STRING","page",1183],"(",["T_VARIABLE","$num",1183],",",["T_WHITESPACE"," ",1183],["T_VARIABLE","$limit",1183],["T_WHITESPACE"," ",1183],"=",["T_WHITESPACE"," ",1183],["T_STRING","null",1183],")",["T_WHITESPACE","\n    ",1183],"{",["T_WHITESPACE","\n        ",1184],["T_IF","if",1185],["T_WHITESPACE"," ",1185],"(",["T_VARIABLE","$limit",1185],["T_WHITESPACE"," ",1185],["T_IS_NOT_IDENTICAL","!==",1185],["T_WHITESPACE"," ",1185],["T_STRING","null",1185],")",["T_WHITESPACE"," ",1185],"{",["T_WHITESPACE","\n            ",1185],["T_VARIABLE","$this",1186],["T_OBJECT_OPERATOR","->",1186],["T_STRING","limit",1186],"(",["T_VARIABLE","$limit",1186],")",";",["T_WHITESPACE","\n        ",1186],"}",["T_WHITESPACE","\n        ",1187],["T_VARIABLE","$limit",1188],["T_WHITESPACE"," ",1188],"=",["T_WHITESPACE"," ",1188],["T_VARIABLE","$this",1188],["T_OBJECT_OPERATOR","->",1188],["T_STRING","clause",1188],"(",["T_CONSTANT_ENCAPSED_STRING","'limit'",1188],")",";",["T_WHITESPACE","\n        ",1188],["T_IF","if",1189],["T_WHITESPACE"," ",1189],"(",["T_VARIABLE","$limit",1189],["T_WHITESPACE"," ",1189],["T_IS_IDENTICAL","===",1189],["T_WHITESPACE"," ",1189],["T_STRING","null",1189],")",["T_WHITESPACE"," ",1189],"{",["T_WHITESPACE","\n            ",1189],["T_VARIABLE","$limit",1190],["T_WHITESPACE"," ",1190],"=",["T_WHITESPACE"," ",1190],["T_LNUMBER","25",1190],";",["T_WHITESPACE","\n            ",1190],["T_VARIABLE","$this",1191],["T_OBJECT_OPERATOR","->",1191],["T_STRING","limit",1191],"(",["T_VARIABLE","$limit",1191],")",";",["T_WHITESPACE","\n        ",1191],"}",["T_WHITESPACE","\n        ",1192],["T_VARIABLE","$offset",1193],["T_WHITESPACE"," ",1193],"=",["T_WHITESPACE"," ",1193],"(",["T_VARIABLE","$num",1193],["T_WHITESPACE"," ",1193],"-",["T_WHITESPACE"," ",1193],["T_LNUMBER","1",1193],")",["T_WHITESPACE"," ",1193],"*",["T_WHITESPACE"," ",1193],["T_VARIABLE","$limit",1193],";",["T_WHITESPACE","\n        ",1193],["T_IF","if",1194],["T_WHITESPACE"," ",1194],"(",["T_STRING","PHP_INT_MAX",1194],["T_WHITESPACE"," ",1194],["T_IS_SMALLER_OR_EQUAL","<=",1194],["T_WHITESPACE"," ",1194],["T_VARIABLE","$offset",1194],")",["T_WHITESPACE"," ",1194],"{",["T_WHITESPACE","\n            ",1194],["T_VARIABLE","$offset",1195],["T_WHITESPACE"," ",1195],"=",["T_WHITESPACE"," ",1195],["T_STRING","PHP_INT_MAX",1195],";",["T_WHITESPACE","\n        ",1195],"}",["T_WHITESPACE","\n        ",1196],["T_VARIABLE","$this",1197],["T_OBJECT_OPERATOR","->",1197],["T_STRING","offset",1197],"(",["T_INT_CAST","(int)",1197],["T_VARIABLE","$offset",1197],")",";",["T_WHITESPACE","\n\n        ",1197],["T_RETURN","return",1199],["T_WHITESPACE"," ",1199],["T_VARIABLE","$this",1199],";",["T_WHITESPACE","\n    ",1199],"}",["T_WHITESPACE","\n\n    ",1200],["T_DOC_COMMENT","\/**\n     * Sets the number of records that should be retrieved from database,\n     * accepts an integer or an expression object that evaluates to an integer.\n     * In some databases, this operation might not be supported or will require\n     * the query to be transformed in order to limit the result set size.\n     *\n     * ### Examples\n     *\n     * ```\n     * $query->limit(10) \/\/ generates LIMIT 10\n     * $query->limit($query->newExpr()->add(['1 + 1'])); \/\/ LIMIT (1 + 1)\n     * ```\n     *\n     * @param int|\\Cake\\Database\\ExpressionInterface $num number of records to be returned\n     * @return $this\n     *\/",1202],["T_WHITESPACE","\n    ",1217],["T_PUBLIC","public",1218],["T_WHITESPACE"," ",1218],["T_FUNCTION","function",1218],["T_WHITESPACE"," ",1218],["T_STRING","limit",1218],"(",["T_VARIABLE","$num",1218],")",["T_WHITESPACE","\n    ",1218],"{",["T_WHITESPACE","\n        ",1219],["T_VARIABLE","$this",1220],["T_OBJECT_OPERATOR","->",1220],["T_STRING","_dirty",1220],"(",")",";",["T_WHITESPACE","\n        ",1220],["T_IF","if",1221],["T_WHITESPACE"," ",1221],"(",["T_VARIABLE","$num",1221],["T_WHITESPACE"," ",1221],["T_IS_NOT_IDENTICAL","!==",1221],["T_WHITESPACE"," ",1221],["T_STRING","null",1221],["T_WHITESPACE"," ",1221],["T_BOOLEAN_AND","&&",1221],["T_WHITESPACE"," ",1221],"!",["T_STRING","is_object",1221],"(",["T_VARIABLE","$num",1221],")",")",["T_WHITESPACE"," ",1221],"{",["T_WHITESPACE","\n            ",1221],["T_VARIABLE","$num",1222],["T_WHITESPACE"," ",1222],"=",["T_WHITESPACE"," ",1222],["T_INT_CAST","(int)",1222],["T_VARIABLE","$num",1222],";",["T_WHITESPACE","\n        ",1222],"}",["T_WHITESPACE","\n        ",1223],["T_VARIABLE","$this",1224],["T_OBJECT_OPERATOR","->",1224],["T_STRING","_parts",1224],"[",["T_CONSTANT_ENCAPSED_STRING","'limit'",1224],"]",["T_WHITESPACE"," ",1224],"=",["T_WHITESPACE"," ",1224],["T_VARIABLE","$num",1224],";",["T_WHITESPACE","\n\n        ",1224],["T_RETURN","return",1226],["T_WHITESPACE"," ",1226],["T_VARIABLE","$this",1226],";",["T_WHITESPACE","\n    ",1226],"}",["T_WHITESPACE","\n\n    ",1227],["T_DOC_COMMENT","\/**\n     * Sets the number of records that should be skipped from the original result set\n     * This is commonly used for paginating large results. Accepts an integer or an\n     * expression object that evaluates to an integer.\n     *\n     * In some databases, this operation might not be supported or will require\n     * the query to be transformed in order to limit the result set size.\n     *\n     * ### Examples\n     *\n     * ```\n     * $query->offset(10) \/\/ generates OFFSET 10\n     * $query->offset($query->newExpr()->add(['1 + 1'])); \/\/ OFFSET (1 + 1)\n     * ```\n     *\n     * @param int|\\Cake\\Database\\ExpressionInterface $num number of records to be skipped\n     * @return $this\n     *\/",1229],["T_WHITESPACE","\n    ",1246],["T_PUBLIC","public",1247],["T_WHITESPACE"," ",1247],["T_FUNCTION","function",1247],["T_WHITESPACE"," ",1247],["T_STRING","offset",1247],"(",["T_VARIABLE","$num",1247],")",["T_WHITESPACE","\n    ",1247],"{",["T_WHITESPACE","\n        ",1248],["T_VARIABLE","$this",1249],["T_OBJECT_OPERATOR","->",1249],["T_STRING","_dirty",1249],"(",")",";",["T_WHITESPACE","\n        ",1249],["T_IF","if",1250],["T_WHITESPACE"," ",1250],"(",["T_VARIABLE","$num",1250],["T_WHITESPACE"," ",1250],["T_IS_NOT_IDENTICAL","!==",1250],["T_WHITESPACE"," ",1250],["T_STRING","null",1250],["T_WHITESPACE"," ",1250],["T_BOOLEAN_AND","&&",1250],["T_WHITESPACE"," ",1250],"!",["T_STRING","is_object",1250],"(",["T_VARIABLE","$num",1250],")",")",["T_WHITESPACE"," ",1250],"{",["T_WHITESPACE","\n            ",1250],["T_VARIABLE","$num",1251],["T_WHITESPACE"," ",1251],"=",["T_WHITESPACE"," ",1251],["T_INT_CAST","(int)",1251],["T_VARIABLE","$num",1251],";",["T_WHITESPACE","\n        ",1251],"}",["T_WHITESPACE","\n        ",1252],["T_VARIABLE","$this",1253],["T_OBJECT_OPERATOR","->",1253],["T_STRING","_parts",1253],"[",["T_CONSTANT_ENCAPSED_STRING","'offset'",1253],"]",["T_WHITESPACE"," ",1253],"=",["T_WHITESPACE"," ",1253],["T_VARIABLE","$num",1253],";",["T_WHITESPACE","\n\n        ",1253],["T_RETURN","return",1255],["T_WHITESPACE"," ",1255],["T_VARIABLE","$this",1255],";",["T_WHITESPACE","\n    ",1255],"}",["T_WHITESPACE","\n\n    ",1256],["T_DOC_COMMENT","\/**\n     * Adds a complete query to be used in conjunction with an UNION operator with\n     * this query. This is used to combine the result set of this query with the one\n     * that will be returned by the passed query. You can add as many queries as you\n     * required by calling multiple times this method with different queries.\n     *\n     * By default, the UNION operator will remove duplicate rows, if you wish to include\n     * every row for all queries, use unionAll().\n     *\n     * ### Examples\n     *\n     * ```\n     * $union = (new Query($conn))->select(['id', 'title'])->from(['a' => 'articles']);\n     * $query->select(['id', 'name'])->from(['d' => 'things'])->union($union);\n     * ```\n     *\n     * Will produce:\n     *\n     * `SELECT id, name FROM things d UNION SELECT id, title FROM articles a`\n     *\n     * @param string|\\Cake\\Database\\Query $query full SQL query to be used in UNION operator\n     * @param bool $overwrite whether to reset the list of queries to be operated or not\n     * @return $this\n     *\/",1258],["T_WHITESPACE","\n    ",1281],["T_PUBLIC","public",1282],["T_WHITESPACE"," ",1282],["T_FUNCTION","function",1282],["T_WHITESPACE"," ",1282],["T_STRING","union",1282],"(",["T_VARIABLE","$query",1282],",",["T_WHITESPACE"," ",1282],["T_VARIABLE","$overwrite",1282],["T_WHITESPACE"," ",1282],"=",["T_WHITESPACE"," ",1282],["T_STRING","false",1282],")",["T_WHITESPACE","\n    ",1282],"{",["T_WHITESPACE","\n        ",1283],["T_IF","if",1284],["T_WHITESPACE"," ",1284],"(",["T_VARIABLE","$overwrite",1284],")",["T_WHITESPACE"," ",1284],"{",["T_WHITESPACE","\n            ",1284],["T_VARIABLE","$this",1285],["T_OBJECT_OPERATOR","->",1285],["T_STRING","_parts",1285],"[",["T_CONSTANT_ENCAPSED_STRING","'union'",1285],"]",["T_WHITESPACE"," ",1285],"=",["T_WHITESPACE"," ",1285],"[","]",";",["T_WHITESPACE","\n        ",1285],"}",["T_WHITESPACE","\n        ",1286],["T_VARIABLE","$this",1287],["T_OBJECT_OPERATOR","->",1287],["T_STRING","_parts",1287],"[",["T_CONSTANT_ENCAPSED_STRING","'union'",1287],"]","[","]",["T_WHITESPACE"," ",1287],"=",["T_WHITESPACE"," ",1287],"[",["T_WHITESPACE","\n            ",1287],["T_CONSTANT_ENCAPSED_STRING","'all'",1288],["T_WHITESPACE"," ",1288],["T_DOUBLE_ARROW","=>",1288],["T_WHITESPACE"," ",1288],["T_STRING","false",1288],",",["T_WHITESPACE","\n            ",1288],["T_CONSTANT_ENCAPSED_STRING","'query'",1289],["T_WHITESPACE"," ",1289],["T_DOUBLE_ARROW","=>",1289],["T_WHITESPACE"," ",1289],["T_VARIABLE","$query",1289],["T_WHITESPACE","\n        ",1289],"]",";",["T_WHITESPACE","\n        ",1290],["T_VARIABLE","$this",1291],["T_OBJECT_OPERATOR","->",1291],["T_STRING","_dirty",1291],"(",")",";",["T_WHITESPACE","\n\n        ",1291],["T_RETURN","return",1293],["T_WHITESPACE"," ",1293],["T_VARIABLE","$this",1293],";",["T_WHITESPACE","\n    ",1293],"}",["T_WHITESPACE","\n\n    ",1294],["T_DOC_COMMENT","\/**\n     * Adds a complete query to be used in conjunction with the UNION ALL operator with\n     * this query. This is used to combine the result set of this query with the one\n     * that will be returned by the passed query. You can add as many queries as you\n     * required by calling multiple times this method with different queries.\n     *\n     * Unlike UNION, UNION ALL will not remove duplicate rows.\n     *\n     * ```\n     * $union = (new Query($conn))->select(['id', 'title'])->from(['a' => 'articles']);\n     * $query->select(['id', 'name'])->from(['d' => 'things'])->unionAll($union);\n     * ```\n     *\n     * Will produce:\n     *\n     * `SELECT id, name FROM things d UNION ALL SELECT id, title FROM articles a`\n     *\n     * @param string|\\Cake\\Database\\Query $query full SQL query to be used in UNION operator\n     * @param bool $overwrite whether to reset the list of queries to be operated or not\n     * @return $this\n     *\/",1296],["T_WHITESPACE","\n    ",1316],["T_PUBLIC","public",1317],["T_WHITESPACE"," ",1317],["T_FUNCTION","function",1317],["T_WHITESPACE"," ",1317],["T_STRING","unionAll",1317],"(",["T_VARIABLE","$query",1317],",",["T_WHITESPACE"," ",1317],["T_VARIABLE","$overwrite",1317],["T_WHITESPACE"," ",1317],"=",["T_WHITESPACE"," ",1317],["T_STRING","false",1317],")",["T_WHITESPACE","\n    ",1317],"{",["T_WHITESPACE","\n        ",1318],["T_IF","if",1319],["T_WHITESPACE"," ",1319],"(",["T_VARIABLE","$overwrite",1319],")",["T_WHITESPACE"," ",1319],"{",["T_WHITESPACE","\n            ",1319],["T_VARIABLE","$this",1320],["T_OBJECT_OPERATOR","->",1320],["T_STRING","_parts",1320],"[",["T_CONSTANT_ENCAPSED_STRING","'union'",1320],"]",["T_WHITESPACE"," ",1320],"=",["T_WHITESPACE"," ",1320],"[","]",";",["T_WHITESPACE","\n        ",1320],"}",["T_WHITESPACE","\n        ",1321],["T_VARIABLE","$this",1322],["T_OBJECT_OPERATOR","->",1322],["T_STRING","_parts",1322],"[",["T_CONSTANT_ENCAPSED_STRING","'union'",1322],"]","[","]",["T_WHITESPACE"," ",1322],"=",["T_WHITESPACE"," ",1322],"[",["T_WHITESPACE","\n            ",1322],["T_CONSTANT_ENCAPSED_STRING","'all'",1323],["T_WHITESPACE"," ",1323],["T_DOUBLE_ARROW","=>",1323],["T_WHITESPACE"," ",1323],["T_STRING","true",1323],",",["T_WHITESPACE","\n            ",1323],["T_CONSTANT_ENCAPSED_STRING","'query'",1324],["T_WHITESPACE"," ",1324],["T_DOUBLE_ARROW","=>",1324],["T_WHITESPACE"," ",1324],["T_VARIABLE","$query",1324],["T_WHITESPACE","\n        ",1324],"]",";",["T_WHITESPACE","\n        ",1325],["T_VARIABLE","$this",1326],["T_OBJECT_OPERATOR","->",1326],["T_STRING","_dirty",1326],"(",")",";",["T_WHITESPACE","\n\n        ",1326],["T_RETURN","return",1328],["T_WHITESPACE"," ",1328],["T_VARIABLE","$this",1328],";",["T_WHITESPACE","\n    ",1328],"}",["T_WHITESPACE","\n\n    ",1329],["T_DOC_COMMENT","\/**\n     * Create an insert query.\n     *\n     * Note calling this method will reset any data previously set\n     * with Query::values().\n     *\n     * @param array $columns The columns to insert into.\n     * @param array $types A map between columns & their datatypes.\n     * @return $this\n     * @throws \\RuntimeException When there are 0 columns.\n     *\/",1331],["T_WHITESPACE","\n    ",1341],["T_PUBLIC","public",1342],["T_WHITESPACE"," ",1342],["T_FUNCTION","function",1342],["T_WHITESPACE"," ",1342],["T_STRING","insert",1342],"(",["T_ARRAY","array",1342],["T_WHITESPACE"," ",1342],["T_VARIABLE","$columns",1342],",",["T_WHITESPACE"," ",1342],["T_ARRAY","array",1342],["T_WHITESPACE"," ",1342],["T_VARIABLE","$types",1342],["T_WHITESPACE"," ",1342],"=",["T_WHITESPACE"," ",1342],"[","]",")",["T_WHITESPACE","\n    ",1342],"{",["T_WHITESPACE","\n        ",1343],["T_IF","if",1344],["T_WHITESPACE"," ",1344],"(",["T_EMPTY","empty",1344],"(",["T_VARIABLE","$columns",1344],")",")",["T_WHITESPACE"," ",1344],"{",["T_WHITESPACE","\n            ",1344],["T_THROW","throw",1345],["T_WHITESPACE"," ",1345],["T_NEW","new",1345],["T_WHITESPACE"," ",1345],["T_STRING","RuntimeException",1345],"(",["T_CONSTANT_ENCAPSED_STRING","'At least 1 column is required to perform an insert.'",1345],")",";",["T_WHITESPACE","\n        ",1345],"}",["T_WHITESPACE","\n        ",1346],["T_VARIABLE","$this",1347],["T_OBJECT_OPERATOR","->",1347],["T_STRING","_dirty",1347],"(",")",";",["T_WHITESPACE","\n        ",1347],["T_VARIABLE","$this",1348],["T_OBJECT_OPERATOR","->",1348],["T_STRING","_type",1348],["T_WHITESPACE"," ",1348],"=",["T_WHITESPACE"," ",1348],["T_CONSTANT_ENCAPSED_STRING","'insert'",1348],";",["T_WHITESPACE","\n        ",1348],["T_VARIABLE","$this",1349],["T_OBJECT_OPERATOR","->",1349],["T_STRING","_parts",1349],"[",["T_CONSTANT_ENCAPSED_STRING","'insert'",1349],"]","[",["T_LNUMBER","1",1349],"]",["T_WHITESPACE"," ",1349],"=",["T_WHITESPACE"," ",1349],["T_VARIABLE","$columns",1349],";",["T_WHITESPACE","\n        ",1349],["T_IF","if",1350],["T_WHITESPACE"," ",1350],"(","!",["T_VARIABLE","$this",1350],["T_OBJECT_OPERATOR","->",1350],["T_STRING","_parts",1350],"[",["T_CONSTANT_ENCAPSED_STRING","'values'",1350],"]",")",["T_WHITESPACE"," ",1350],"{",["T_WHITESPACE","\n            ",1350],["T_VARIABLE","$this",1351],["T_OBJECT_OPERATOR","->",1351],["T_STRING","_parts",1351],"[",["T_CONSTANT_ENCAPSED_STRING","'values'",1351],"]",["T_WHITESPACE"," ",1351],"=",["T_WHITESPACE"," ",1351],["T_NEW","new",1351],["T_WHITESPACE"," ",1351],["T_STRING","ValuesExpression",1351],"(",["T_VARIABLE","$columns",1351],",",["T_WHITESPACE"," ",1351],["T_VARIABLE","$this",1351],["T_OBJECT_OPERATOR","->",1351],["T_STRING","typeMap",1351],"(",")",["T_OBJECT_OPERATOR","->",1351],["T_STRING","types",1351],"(",["T_VARIABLE","$types",1351],")",")",";",["T_WHITESPACE","\n        ",1351],"}",["T_WHITESPACE"," ",1352],["T_ELSE","else",1352],["T_WHITESPACE"," ",1352],"{",["T_WHITESPACE","\n            ",1352],["T_VARIABLE","$this",1353],["T_OBJECT_OPERATOR","->",1353],["T_STRING","_parts",1353],"[",["T_CONSTANT_ENCAPSED_STRING","'values'",1353],"]",["T_OBJECT_OPERATOR","->",1353],["T_STRING","columns",1353],"(",["T_VARIABLE","$columns",1353],")",";",["T_WHITESPACE","\n        ",1353],"}",["T_WHITESPACE","\n\n        ",1354],["T_RETURN","return",1356],["T_WHITESPACE"," ",1356],["T_VARIABLE","$this",1356],";",["T_WHITESPACE","\n    ",1356],"}",["T_WHITESPACE","\n\n    ",1357],["T_DOC_COMMENT","\/**\n     * Set the table name for insert queries.\n     *\n     * @param string $table The table name to insert into.\n     * @return $this\n     *\/",1359],["T_WHITESPACE","\n    ",1364],["T_PUBLIC","public",1365],["T_WHITESPACE"," ",1365],["T_FUNCTION","function",1365],["T_WHITESPACE"," ",1365],["T_STRING","into",1365],"(",["T_VARIABLE","$table",1365],")",["T_WHITESPACE","\n    ",1365],"{",["T_WHITESPACE","\n        ",1366],["T_VARIABLE","$this",1367],["T_OBJECT_OPERATOR","->",1367],["T_STRING","_dirty",1367],"(",")",";",["T_WHITESPACE","\n        ",1367],["T_VARIABLE","$this",1368],["T_OBJECT_OPERATOR","->",1368],["T_STRING","_type",1368],["T_WHITESPACE"," ",1368],"=",["T_WHITESPACE"," ",1368],["T_CONSTANT_ENCAPSED_STRING","'insert'",1368],";",["T_WHITESPACE","\n        ",1368],["T_VARIABLE","$this",1369],["T_OBJECT_OPERATOR","->",1369],["T_STRING","_parts",1369],"[",["T_CONSTANT_ENCAPSED_STRING","'insert'",1369],"]","[",["T_LNUMBER","0",1369],"]",["T_WHITESPACE"," ",1369],"=",["T_WHITESPACE"," ",1369],["T_VARIABLE","$table",1369],";",["T_WHITESPACE","\n\n        ",1369],["T_RETURN","return",1371],["T_WHITESPACE"," ",1371],["T_VARIABLE","$this",1371],";",["T_WHITESPACE","\n    ",1371],"}",["T_WHITESPACE","\n\n    ",1372],["T_DOC_COMMENT","\/**\n     * Set the values for an insert query.\n     *\n     * Multi inserts can be performed by calling values() more than one time,\n     * or by providing an array of value sets. Additionally $data can be a Query\n     * instance to insert data from another SELECT statement.\n     *\n     * @param array|\\Cake\\Database\\Query $data The data to insert.\n     * @return $this\n     * @throws \\Cake\\Database\\Exception if you try to set values before declaring columns.\n     *   Or if you try to set values on non-insert queries.\n     *\/",1374],["T_WHITESPACE","\n    ",1385],["T_PUBLIC","public",1386],["T_WHITESPACE"," ",1386],["T_FUNCTION","function",1386],["T_WHITESPACE"," ",1386],["T_STRING","values",1386],"(",["T_VARIABLE","$data",1386],")",["T_WHITESPACE","\n    ",1386],"{",["T_WHITESPACE","\n        ",1387],["T_IF","if",1388],["T_WHITESPACE"," ",1388],"(",["T_VARIABLE","$this",1388],["T_OBJECT_OPERATOR","->",1388],["T_STRING","_type",1388],["T_WHITESPACE"," ",1388],["T_IS_NOT_IDENTICAL","!==",1388],["T_WHITESPACE"," ",1388],["T_CONSTANT_ENCAPSED_STRING","'insert'",1388],")",["T_WHITESPACE"," ",1388],"{",["T_WHITESPACE","\n            ",1388],["T_THROW","throw",1389],["T_WHITESPACE"," ",1389],["T_NEW","new",1389],["T_WHITESPACE"," ",1389],["T_STRING","Exception",1389],"(",["T_WHITESPACE","\n                ",1389],["T_CONSTANT_ENCAPSED_STRING","'You cannot add values before defining columns to use.'",1390],["T_WHITESPACE","\n            ",1390],")",";",["T_WHITESPACE","\n        ",1391],"}",["T_WHITESPACE","\n        ",1392],["T_IF","if",1393],["T_WHITESPACE"," ",1393],"(",["T_EMPTY","empty",1393],"(",["T_VARIABLE","$this",1393],["T_OBJECT_OPERATOR","->",1393],["T_STRING","_parts",1393],"[",["T_CONSTANT_ENCAPSED_STRING","'insert'",1393],"]",")",")",["T_WHITESPACE"," ",1393],"{",["T_WHITESPACE","\n            ",1393],["T_THROW","throw",1394],["T_WHITESPACE"," ",1394],["T_NEW","new",1394],["T_WHITESPACE"," ",1394],["T_STRING","Exception",1394],"(",["T_WHITESPACE","\n                ",1394],["T_CONSTANT_ENCAPSED_STRING","'You cannot add values before defining columns to use.'",1395],["T_WHITESPACE","\n            ",1395],")",";",["T_WHITESPACE","\n        ",1396],"}",["T_WHITESPACE","\n\n        ",1397],["T_VARIABLE","$this",1399],["T_OBJECT_OPERATOR","->",1399],["T_STRING","_dirty",1399],"(",")",";",["T_WHITESPACE","\n        ",1399],["T_IF","if",1400],["T_WHITESPACE"," ",1400],"(",["T_VARIABLE","$data",1400],["T_WHITESPACE"," ",1400],["T_INSTANCEOF","instanceof",1400],["T_WHITESPACE"," ",1400],["T_STRING","ValuesExpression",1400],")",["T_WHITESPACE"," ",1400],"{",["T_WHITESPACE","\n            ",1400],["T_VARIABLE","$this",1401],["T_OBJECT_OPERATOR","->",1401],["T_STRING","_parts",1401],"[",["T_CONSTANT_ENCAPSED_STRING","'values'",1401],"]",["T_WHITESPACE"," ",1401],"=",["T_WHITESPACE"," ",1401],["T_VARIABLE","$data",1401],";",["T_WHITESPACE","\n\n            ",1401],["T_RETURN","return",1403],["T_WHITESPACE"," ",1403],["T_VARIABLE","$this",1403],";",["T_WHITESPACE","\n        ",1403],"}",["T_WHITESPACE","\n\n        ",1404],["T_VARIABLE","$this",1406],["T_OBJECT_OPERATOR","->",1406],["T_STRING","_parts",1406],"[",["T_CONSTANT_ENCAPSED_STRING","'values'",1406],"]",["T_OBJECT_OPERATOR","->",1406],["T_STRING","add",1406],"(",["T_VARIABLE","$data",1406],")",";",["T_WHITESPACE","\n\n        ",1406],["T_RETURN","return",1408],["T_WHITESPACE"," ",1408],["T_VARIABLE","$this",1408],";",["T_WHITESPACE","\n    ",1408],"}",["T_WHITESPACE","\n\n    ",1409],["T_DOC_COMMENT","\/**\n     * Create an update query.\n     *\n     * Can be combined with set() and where() methods to create update queries.\n     *\n     * @param string|\\Cake\\Database\\ExpressionInterface $table The table you want to update.\n     * @return $this\n     *\/",1411],["T_WHITESPACE","\n    ",1418],["T_PUBLIC","public",1419],["T_WHITESPACE"," ",1419],["T_FUNCTION","function",1419],["T_WHITESPACE"," ",1419],["T_STRING","update",1419],"(",["T_VARIABLE","$table",1419],")",["T_WHITESPACE","\n    ",1419],"{",["T_WHITESPACE","\n        ",1420],["T_IF","if",1421],["T_WHITESPACE"," ",1421],"(","!",["T_STRING","is_string",1421],"(",["T_VARIABLE","$table",1421],")",["T_WHITESPACE"," ",1421],["T_BOOLEAN_AND","&&",1421],["T_WHITESPACE"," ",1421],"!","(",["T_VARIABLE","$table",1421],["T_WHITESPACE"," ",1421],["T_INSTANCEOF","instanceof",1421],["T_WHITESPACE"," ",1421],["T_STRING","ExpressionInterface",1421],")",")",["T_WHITESPACE"," ",1421],"{",["T_WHITESPACE","\n            ",1421],["T_VARIABLE","$text",1422],["T_WHITESPACE"," ",1422],"=",["T_WHITESPACE"," ",1422],["T_CONSTANT_ENCAPSED_STRING","'Table must be of type string or \"%s\", got \"%s\"'",1422],";",["T_WHITESPACE","\n            ",1422],["T_VARIABLE","$message",1423],["T_WHITESPACE"," ",1423],"=",["T_WHITESPACE"," ",1423],["T_STRING","sprintf",1423],"(",["T_VARIABLE","$text",1423],",",["T_WHITESPACE"," ",1423],["T_STRING","ExpressionInterface",1423],["T_DOUBLE_COLON","::",1423],["T_CLASS","class",1423],",",["T_WHITESPACE"," ",1423],["T_STRING","gettype",1423],"(",["T_VARIABLE","$table",1423],")",")",";",["T_WHITESPACE","\n            ",1423],["T_THROW","throw",1424],["T_WHITESPACE"," ",1424],["T_NEW","new",1424],["T_WHITESPACE"," ",1424],["T_STRING","InvalidArgumentException",1424],"(",["T_VARIABLE","$message",1424],")",";",["T_WHITESPACE","\n        ",1424],"}",["T_WHITESPACE","\n\n        ",1425],["T_VARIABLE","$this",1427],["T_OBJECT_OPERATOR","->",1427],["T_STRING","_dirty",1427],"(",")",";",["T_WHITESPACE","\n        ",1427],["T_VARIABLE","$this",1428],["T_OBJECT_OPERATOR","->",1428],["T_STRING","_type",1428],["T_WHITESPACE"," ",1428],"=",["T_WHITESPACE"," ",1428],["T_CONSTANT_ENCAPSED_STRING","'update'",1428],";",["T_WHITESPACE","\n        ",1428],["T_VARIABLE","$this",1429],["T_OBJECT_OPERATOR","->",1429],["T_STRING","_parts",1429],"[",["T_CONSTANT_ENCAPSED_STRING","'update'",1429],"]","[",["T_LNUMBER","0",1429],"]",["T_WHITESPACE"," ",1429],"=",["T_WHITESPACE"," ",1429],["T_VARIABLE","$table",1429],";",["T_WHITESPACE","\n\n        ",1429],["T_RETURN","return",1431],["T_WHITESPACE"," ",1431],["T_VARIABLE","$this",1431],";",["T_WHITESPACE","\n    ",1431],"}",["T_WHITESPACE","\n\n    ",1432],["T_DOC_COMMENT","\/**\n     * Set one or many fields to update.\n     *\n     * ### Examples\n     *\n     * Passing a string:\n     *\n     * ```\n     * $query->update('articles')->set('title', 'The Title');\n     * ```\n     *\n     * Passing an array:\n     *\n     * ```\n     * $query->update('articles')->set(['title' => 'The Title'], ['title' => 'string']);\n     * ```\n     *\n     * Passing a callable:\n     *\n     * ```\n     * $query->update('articles')->set(function ($exp) {\n     *   return $exp->eq('title', 'The title', 'string');\n     * });\n     * ```\n     *\n     * @param string|array|callable|\\Cake\\Database\\Expression\\QueryExpression $key The column name or array of keys\n     *    + values to set. This can also be a QueryExpression containing a SQL fragment.\n     *    It can also be a callable, that is required to return an expression object.\n     * @param mixed $value The value to update $key to. Can be null if $key is an\n     *    array or QueryExpression. When $key is an array, this parameter will be\n     *    used as $types instead.\n     * @param array $types The column types to treat data as.\n     * @return $this\n     *\/",1434],["T_WHITESPACE","\n    ",1467],["T_PUBLIC","public",1468],["T_WHITESPACE"," ",1468],["T_FUNCTION","function",1468],["T_WHITESPACE"," ",1468],["T_STRING","set",1468],"(",["T_VARIABLE","$key",1468],",",["T_WHITESPACE"," ",1468],["T_VARIABLE","$value",1468],["T_WHITESPACE"," ",1468],"=",["T_WHITESPACE"," ",1468],["T_STRING","null",1468],",",["T_WHITESPACE"," ",1468],["T_VARIABLE","$types",1468],["T_WHITESPACE"," ",1468],"=",["T_WHITESPACE"," ",1468],"[","]",")",["T_WHITESPACE","\n    ",1468],"{",["T_WHITESPACE","\n        ",1469],["T_IF","if",1470],["T_WHITESPACE"," ",1470],"(",["T_EMPTY","empty",1470],"(",["T_VARIABLE","$this",1470],["T_OBJECT_OPERATOR","->",1470],["T_STRING","_parts",1470],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1470],"]",")",")",["T_WHITESPACE"," ",1470],"{",["T_WHITESPACE","\n            ",1470],["T_VARIABLE","$this",1471],["T_OBJECT_OPERATOR","->",1471],["T_STRING","_parts",1471],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1471],"]",["T_WHITESPACE"," ",1471],"=",["T_WHITESPACE"," ",1471],["T_VARIABLE","$this",1471],["T_OBJECT_OPERATOR","->",1471],["T_STRING","newExpr",1471],"(",")",["T_OBJECT_OPERATOR","->",1471],["T_STRING","tieWith",1471],"(",["T_CONSTANT_ENCAPSED_STRING","','",1471],")",";",["T_WHITESPACE","\n        ",1471],"}",["T_WHITESPACE","\n\n        ",1472],["T_IF","if",1474],["T_WHITESPACE"," ",1474],"(",["T_VARIABLE","$this",1474],["T_OBJECT_OPERATOR","->",1474],["T_STRING","_parts",1474],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1474],"]",["T_OBJECT_OPERATOR","->",1474],["T_STRING","isCallable",1474],"(",["T_VARIABLE","$key",1474],")",")",["T_WHITESPACE"," ",1474],"{",["T_WHITESPACE","\n            ",1474],["T_VARIABLE","$exp",1475],["T_WHITESPACE"," ",1475],"=",["T_WHITESPACE"," ",1475],["T_VARIABLE","$this",1475],["T_OBJECT_OPERATOR","->",1475],["T_STRING","newExpr",1475],"(",")",["T_OBJECT_OPERATOR","->",1475],["T_STRING","tieWith",1475],"(",["T_CONSTANT_ENCAPSED_STRING","','",1475],")",";",["T_WHITESPACE","\n            ",1475],["T_VARIABLE","$this",1476],["T_OBJECT_OPERATOR","->",1476],["T_STRING","_parts",1476],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1476],"]",["T_OBJECT_OPERATOR","->",1476],["T_STRING","add",1476],"(",["T_VARIABLE","$key",1476],"(",["T_VARIABLE","$exp",1476],")",")",";",["T_WHITESPACE","\n\n            ",1476],["T_RETURN","return",1478],["T_WHITESPACE"," ",1478],["T_VARIABLE","$this",1478],";",["T_WHITESPACE","\n        ",1478],"}",["T_WHITESPACE","\n\n        ",1479],["T_IF","if",1481],["T_WHITESPACE"," ",1481],"(",["T_STRING","is_array",1481],"(",["T_VARIABLE","$key",1481],")",["T_WHITESPACE"," ",1481],["T_BOOLEAN_OR","||",1481],["T_WHITESPACE"," ",1481],["T_VARIABLE","$key",1481],["T_WHITESPACE"," ",1481],["T_INSTANCEOF","instanceof",1481],["T_WHITESPACE"," ",1481],["T_STRING","ExpressionInterface",1481],")",["T_WHITESPACE"," ",1481],"{",["T_WHITESPACE","\n            ",1481],["T_VARIABLE","$types",1482],["T_WHITESPACE"," ",1482],"=",["T_WHITESPACE"," ",1482],["T_ARRAY_CAST","(array)",1482],["T_VARIABLE","$value",1482],";",["T_WHITESPACE","\n            ",1482],["T_VARIABLE","$this",1483],["T_OBJECT_OPERATOR","->",1483],["T_STRING","_parts",1483],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1483],"]",["T_OBJECT_OPERATOR","->",1483],["T_STRING","add",1483],"(",["T_VARIABLE","$key",1483],",",["T_WHITESPACE"," ",1483],["T_VARIABLE","$types",1483],")",";",["T_WHITESPACE","\n\n            ",1483],["T_RETURN","return",1485],["T_WHITESPACE"," ",1485],["T_VARIABLE","$this",1485],";",["T_WHITESPACE","\n        ",1485],"}",["T_WHITESPACE","\n\n        ",1486],["T_IF","if",1488],["T_WHITESPACE"," ",1488],"(",["T_STRING","is_string",1488],"(",["T_VARIABLE","$types",1488],")",["T_WHITESPACE"," ",1488],["T_BOOLEAN_AND","&&",1488],["T_WHITESPACE"," ",1488],["T_STRING","is_string",1488],"(",["T_VARIABLE","$key",1488],")",")",["T_WHITESPACE"," ",1488],"{",["T_WHITESPACE","\n            ",1488],["T_VARIABLE","$types",1489],["T_WHITESPACE"," ",1489],"=",["T_WHITESPACE"," ",1489],"[",["T_VARIABLE","$key",1489],["T_WHITESPACE"," ",1489],["T_DOUBLE_ARROW","=>",1489],["T_WHITESPACE"," ",1489],["T_VARIABLE","$types",1489],"]",";",["T_WHITESPACE","\n        ",1489],"}",["T_WHITESPACE","\n        ",1490],["T_VARIABLE","$this",1491],["T_OBJECT_OPERATOR","->",1491],["T_STRING","_parts",1491],"[",["T_CONSTANT_ENCAPSED_STRING","'set'",1491],"]",["T_OBJECT_OPERATOR","->",1491],["T_STRING","eq",1491],"(",["T_VARIABLE","$key",1491],",",["T_WHITESPACE"," ",1491],["T_VARIABLE","$value",1491],",",["T_WHITESPACE"," ",1491],["T_VARIABLE","$types",1491],")",";",["T_WHITESPACE","\n\n        ",1491],["T_RETURN","return",1493],["T_WHITESPACE"," ",1493],["T_VARIABLE","$this",1493],";",["T_WHITESPACE","\n    ",1493],"}",["T_WHITESPACE","\n\n    ",1494],["T_DOC_COMMENT","\/**\n     * Create a delete query.\n     *\n     * Can be combined with from(), where() and other methods to\n     * create delete queries with specific conditions.\n     *\n     * @param string|null $table The table to use when deleting.\n     * @return $this\n     *\/",1496],["T_WHITESPACE","\n    ",1504],["T_PUBLIC","public",1505],["T_WHITESPACE"," ",1505],["T_FUNCTION","function",1505],["T_WHITESPACE"," ",1505],["T_STRING","delete",1505],"(",["T_VARIABLE","$table",1505],["T_WHITESPACE"," ",1505],"=",["T_WHITESPACE"," ",1505],["T_STRING","null",1505],")",["T_WHITESPACE","\n    ",1505],"{",["T_WHITESPACE","\n        ",1506],["T_VARIABLE","$this",1507],["T_OBJECT_OPERATOR","->",1507],["T_STRING","_dirty",1507],"(",")",";",["T_WHITESPACE","\n        ",1507],["T_VARIABLE","$this",1508],["T_OBJECT_OPERATOR","->",1508],["T_STRING","_type",1508],["T_WHITESPACE"," ",1508],"=",["T_WHITESPACE"," ",1508],["T_CONSTANT_ENCAPSED_STRING","'delete'",1508],";",["T_WHITESPACE","\n        ",1508],["T_IF","if",1509],["T_WHITESPACE"," ",1509],"(",["T_VARIABLE","$table",1509],["T_WHITESPACE"," ",1509],["T_IS_NOT_IDENTICAL","!==",1509],["T_WHITESPACE"," ",1509],["T_STRING","null",1509],")",["T_WHITESPACE"," ",1509],"{",["T_WHITESPACE","\n            ",1509],["T_VARIABLE","$this",1510],["T_OBJECT_OPERATOR","->",1510],["T_STRING","from",1510],"(",["T_VARIABLE","$table",1510],")",";",["T_WHITESPACE","\n        ",1510],"}",["T_WHITESPACE","\n\n        ",1511],["T_RETURN","return",1513],["T_WHITESPACE"," ",1513],["T_VARIABLE","$this",1513],";",["T_WHITESPACE","\n    ",1513],"}",["T_WHITESPACE","\n\n    ",1514],["T_DOC_COMMENT","\/**\n     * A string or expression that will be appended to the generated query\n     *\n     * ### Examples:\n     * ```\n     * $query->select('id')->where(['author_id' => 1])->epilog('FOR UPDATE');\n     * $query\n     *  ->insert('articles', ['title'])\n     *  ->values(['author_id' => 1])\n     *  ->epilog('RETURNING id');\n     * ```\n     *\n     * @param string|\\Cake\\Database\\Expression\\QueryExpression|null $expression The expression to be appended\n     * @return $this\n     *\/",1516],["T_WHITESPACE","\n    ",1530],["T_PUBLIC","public",1531],["T_WHITESPACE"," ",1531],["T_FUNCTION","function",1531],["T_WHITESPACE"," ",1531],["T_STRING","epilog",1531],"(",["T_VARIABLE","$expression",1531],["T_WHITESPACE"," ",1531],"=",["T_WHITESPACE"," ",1531],["T_STRING","null",1531],")",["T_WHITESPACE","\n    ",1531],"{",["T_WHITESPACE","\n        ",1532],["T_VARIABLE","$this",1533],["T_OBJECT_OPERATOR","->",1533],["T_STRING","_dirty",1533],"(",")",";",["T_WHITESPACE","\n        ",1533],["T_VARIABLE","$this",1534],["T_OBJECT_OPERATOR","->",1534],["T_STRING","_parts",1534],"[",["T_CONSTANT_ENCAPSED_STRING","'epilog'",1534],"]",["T_WHITESPACE"," ",1534],"=",["T_WHITESPACE"," ",1534],["T_VARIABLE","$expression",1534],";",["T_WHITESPACE","\n\n        ",1534],["T_RETURN","return",1536],["T_WHITESPACE"," ",1536],["T_VARIABLE","$this",1536],";",["T_WHITESPACE","\n    ",1536],"}",["T_WHITESPACE","\n\n    ",1537],["T_DOC_COMMENT","\/**\n     * Returns the type of this query (select, insert, update, delete)\n     *\n     * @return string\n     *\/",1539],["T_WHITESPACE","\n    ",1543],["T_PUBLIC","public",1544],["T_WHITESPACE"," ",1544],["T_FUNCTION","function",1544],["T_WHITESPACE"," ",1544],["T_STRING","type",1544],"(",")",["T_WHITESPACE","\n    ",1544],"{",["T_WHITESPACE","\n        ",1545],["T_RETURN","return",1546],["T_WHITESPACE"," ",1546],["T_VARIABLE","$this",1546],["T_OBJECT_OPERATOR","->",1546],["T_STRING","_type",1546],";",["T_WHITESPACE","\n    ",1546],"}",["T_WHITESPACE","\n\n    ",1547],["T_DOC_COMMENT","\/**\n     * Returns a new QueryExpression object. This is a handy function when\n     * building complex queries using a fluent interface. You can also override\n     * this function in subclasses to use a more specialized QueryExpression class\n     * if required.\n     *\n     * You can optionally pass a single raw SQL string or an array or expressions in\n     * any format accepted by \\Cake\\Database\\Expression\\QueryExpression:\n     *\n     * ```\n     * $expression = $query->newExpr(); \/\/ Returns an empty expression object\n     * $expression = $query->newExpr('Table.column = Table2.column'); \/\/ Return a raw SQL expression\n     * ```\n     *\n     * @param mixed $rawExpression A string, array or anything you want wrapped in an expression object\n     * @return \\Cake\\Database\\Expression\\QueryExpression\n     *\/",1549],["T_WHITESPACE","\n    ",1565],["T_PUBLIC","public",1566],["T_WHITESPACE"," ",1566],["T_FUNCTION","function",1566],["T_WHITESPACE"," ",1566],["T_STRING","newExpr",1566],"(",["T_VARIABLE","$rawExpression",1566],["T_WHITESPACE"," ",1566],"=",["T_WHITESPACE"," ",1566],["T_STRING","null",1566],")",["T_WHITESPACE","\n    ",1566],"{",["T_WHITESPACE","\n        ",1567],["T_VARIABLE","$expression",1568],["T_WHITESPACE"," ",1568],"=",["T_WHITESPACE"," ",1568],["T_NEW","new",1568],["T_WHITESPACE"," ",1568],["T_STRING","QueryExpression",1568],"(","[","]",",",["T_WHITESPACE"," ",1568],["T_VARIABLE","$this",1568],["T_OBJECT_OPERATOR","->",1568],["T_STRING","typeMap",1568],"(",")",")",";",["T_WHITESPACE","\n\n        ",1568],["T_IF","if",1570],["T_WHITESPACE"," ",1570],"(",["T_VARIABLE","$rawExpression",1570],["T_WHITESPACE"," ",1570],["T_IS_NOT_IDENTICAL","!==",1570],["T_WHITESPACE"," ",1570],["T_STRING","null",1570],")",["T_WHITESPACE"," ",1570],"{",["T_WHITESPACE","\n            ",1570],["T_VARIABLE","$expression",1571],["T_OBJECT_OPERATOR","->",1571],["T_STRING","add",1571],"(",["T_VARIABLE","$rawExpression",1571],")",";",["T_WHITESPACE","\n        ",1571],"}",["T_WHITESPACE","\n\n        ",1572],["T_RETURN","return",1574],["T_WHITESPACE"," ",1574],["T_VARIABLE","$expression",1574],";",["T_WHITESPACE","\n    ",1574],"}",["T_WHITESPACE","\n\n    ",1575],["T_DOC_COMMENT","\/**\n     * Returns an instance of a functions builder object that can be used for\n     * generating arbitrary SQL functions.\n     *\n     * ### Example:\n     *\n     * ```\n     * $query->func()->count('*');\n     * $query->func()->dateDiff(['2012-01-05', '2012-01-02'])\n     * ```\n     *\n     * @return \\Cake\\Database\\FunctionsBuilder\n     *\/",1577],["T_WHITESPACE","\n    ",1589],["T_PUBLIC","public",1590],["T_WHITESPACE"," ",1590],["T_FUNCTION","function",1590],["T_WHITESPACE"," ",1590],["T_STRING","func",1590],"(",")",["T_WHITESPACE","\n    ",1590],"{",["T_WHITESPACE","\n        ",1591],["T_IF","if",1592],["T_WHITESPACE"," ",1592],"(",["T_EMPTY","empty",1592],"(",["T_VARIABLE","$this",1592],["T_OBJECT_OPERATOR","->",1592],["T_STRING","_functionsBuilder",1592],")",")",["T_WHITESPACE"," ",1592],"{",["T_WHITESPACE","\n            ",1592],["T_VARIABLE","$this",1593],["T_OBJECT_OPERATOR","->",1593],["T_STRING","_functionsBuilder",1593],["T_WHITESPACE"," ",1593],"=",["T_WHITESPACE"," ",1593],["T_NEW","new",1593],["T_WHITESPACE"," ",1593],["T_STRING","FunctionsBuilder",1593],"(",")",";",["T_WHITESPACE","\n        ",1593],"}",["T_WHITESPACE","\n\n        ",1594],["T_RETURN","return",1596],["T_WHITESPACE"," ",1596],["T_VARIABLE","$this",1596],["T_OBJECT_OPERATOR","->",1596],["T_STRING","_functionsBuilder",1596],";",["T_WHITESPACE","\n    ",1596],"}",["T_WHITESPACE","\n\n    ",1597],["T_DOC_COMMENT","\/**\n     * Executes this query and returns a results iterator. This function is required\n     * for implementing the IteratorAggregate interface and allows the query to be\n     * iterated without having to call execute() manually, thus making it look like\n     * a result set instead of the query itself.\n     *\n     * @return \\Iterator\n     *\/",1599],["T_WHITESPACE","\n    ",1606],["T_PUBLIC","public",1607],["T_WHITESPACE"," ",1607],["T_FUNCTION","function",1607],["T_WHITESPACE"," ",1607],["T_STRING","getIterator",1607],"(",")",["T_WHITESPACE","\n    ",1607],"{",["T_WHITESPACE","\n        ",1608],["T_IF","if",1609],["T_WHITESPACE"," ",1609],"(",["T_EMPTY","empty",1609],"(",["T_VARIABLE","$this",1609],["T_OBJECT_OPERATOR","->",1609],["T_STRING","_iterator",1609],")",["T_WHITESPACE"," ",1609],["T_BOOLEAN_OR","||",1609],["T_WHITESPACE"," ",1609],["T_VARIABLE","$this",1609],["T_OBJECT_OPERATOR","->",1609],["T_STRING","_dirty",1609],")",["T_WHITESPACE"," ",1609],"{",["T_WHITESPACE","\n            ",1609],["T_VARIABLE","$this",1610],["T_OBJECT_OPERATOR","->",1610],["T_STRING","_iterator",1610],["T_WHITESPACE"," ",1610],"=",["T_WHITESPACE"," ",1610],["T_VARIABLE","$this",1610],["T_OBJECT_OPERATOR","->",1610],["T_STRING","execute",1610],"(",")",";",["T_WHITESPACE","\n        ",1610],"}",["T_WHITESPACE","\n\n        ",1611],["T_RETURN","return",1613],["T_WHITESPACE"," ",1613],["T_VARIABLE","$this",1613],["T_OBJECT_OPERATOR","->",1613],["T_STRING","_iterator",1613],";",["T_WHITESPACE","\n    ",1613],"}",["T_WHITESPACE","\n\n    ",1614],["T_DOC_COMMENT","\/**\n     * Returns any data that was stored in the specified clause. This is useful for\n     * modifying any internal part of the query and it is used by the SQL dialects\n     * to transform the query accordingly before it is executed. The valid clauses that\n     * can be retrieved are: delete, update, set, insert, values, select, distinct,\n     * from, join, set, where, group, having, order, limit, offset and union.\n     *\n     * The return value for each of those parts may vary. Some clauses use QueryExpression\n     * to internally store their state, some use arrays and others may use booleans or\n     * integers. This is summary of the return types for each clause.\n     *\n     * - update: string The name of the table to update\n     * - set: QueryExpression\n     * - insert: array, will return an array containing the table + columns.\n     * - values: ValuesExpression\n     * - select: array, will return empty array when no fields are set\n     * - distinct: boolean\n     * - from: array of tables\n     * - join: array\n     * - set: array\n     * - where: QueryExpression, returns null when not set\n     * - group: array\n     * - having: QueryExpression, returns null when not set\n     * - order: OrderByExpression, returns null when not set\n     * - limit: integer or QueryExpression, null when not set\n     * - offset: integer or QueryExpression, null when not set\n     * - union: array\n     *\n     * @param string $name name of the clause to be returned\n     * @return mixed\n     *\/",1616],["T_WHITESPACE","\n    ",1646],["T_PUBLIC","public",1647],["T_WHITESPACE"," ",1647],["T_FUNCTION","function",1647],["T_WHITESPACE"," ",1647],["T_STRING","clause",1647],"(",["T_VARIABLE","$name",1647],")",["T_WHITESPACE","\n    ",1647],"{",["T_WHITESPACE","\n        ",1648],["T_RETURN","return",1649],["T_WHITESPACE"," ",1649],["T_VARIABLE","$this",1649],["T_OBJECT_OPERATOR","->",1649],["T_STRING","_parts",1649],"[",["T_VARIABLE","$name",1649],"]",";",["T_WHITESPACE","\n    ",1649],"}",["T_WHITESPACE","\n\n    ",1650],["T_DOC_COMMENT","\/**\n     * Registers a callback to be executed for each result that is fetched from the\n     * result set, the callback function will receive as first parameter an array with\n     * the raw data from the database for every row that is fetched and must return the\n     * row with any possible modifications.\n     *\n     * Callbacks will be executed lazily, if only 3 rows are fetched for database it will\n     * called 3 times, event though there might be more rows to be fetched in the cursor.\n     *\n     * Callbacks are stacked in the order they are registered, if you wish to reset the stack\n     * the call this function with the second parameter set to true.\n     *\n     * If you wish to remove all decorators from the stack, set the first parameter\n     * to null and the second to true.\n     *\n     * ### Example\n     *\n     * ```\n     * $query->decorateResults(function ($row) {\n     *   $row['order_total'] = $row['subtotal'] + ($row['subtotal'] * $row['tax']);\n     *    return $row;\n     * });\n     * ```\n     *\n     * @param callable|null $callback The callback to invoke when results are fetched.\n     * @param bool $overwrite Whether or not this should append or replace all existing decorators.\n     * @return $this\n     *\/",1652],["T_WHITESPACE","\n    ",1679],["T_PUBLIC","public",1680],["T_WHITESPACE"," ",1680],["T_FUNCTION","function",1680],["T_WHITESPACE"," ",1680],["T_STRING","decorateResults",1680],"(",["T_VARIABLE","$callback",1680],",",["T_WHITESPACE"," ",1680],["T_VARIABLE","$overwrite",1680],["T_WHITESPACE"," ",1680],"=",["T_WHITESPACE"," ",1680],["T_STRING","false",1680],")",["T_WHITESPACE","\n    ",1680],"{",["T_WHITESPACE","\n        ",1681],["T_IF","if",1682],["T_WHITESPACE"," ",1682],"(",["T_VARIABLE","$overwrite",1682],")",["T_WHITESPACE"," ",1682],"{",["T_WHITESPACE","\n            ",1682],["T_VARIABLE","$this",1683],["T_OBJECT_OPERATOR","->",1683],["T_STRING","_resultDecorators",1683],["T_WHITESPACE"," ",1683],"=",["T_WHITESPACE"," ",1683],"[","]",";",["T_WHITESPACE","\n            ",1683],["T_VARIABLE","$this",1684],["T_OBJECT_OPERATOR","->",1684],["T_STRING","_typeCastAttached",1684],["T_WHITESPACE"," ",1684],"=",["T_WHITESPACE"," ",1684],["T_STRING","false",1684],";",["T_WHITESPACE","\n        ",1684],"}",["T_WHITESPACE","\n\n        ",1685],["T_IF","if",1687],["T_WHITESPACE"," ",1687],"(",["T_VARIABLE","$callback",1687],["T_WHITESPACE"," ",1687],["T_IS_NOT_IDENTICAL","!==",1687],["T_WHITESPACE"," ",1687],["T_STRING","null",1687],")",["T_WHITESPACE"," ",1687],"{",["T_WHITESPACE","\n            ",1687],["T_VARIABLE","$this",1688],["T_OBJECT_OPERATOR","->",1688],["T_STRING","_resultDecorators",1688],"[","]",["T_WHITESPACE"," ",1688],"=",["T_WHITESPACE"," ",1688],["T_VARIABLE","$callback",1688],";",["T_WHITESPACE","\n        ",1688],"}",["T_WHITESPACE","\n\n        ",1689],["T_RETURN","return",1691],["T_WHITESPACE"," ",1691],["T_VARIABLE","$this",1691],";",["T_WHITESPACE","\n    ",1691],"}",["T_WHITESPACE","\n\n    ",1692],["T_DOC_COMMENT","\/**\n     * This function works similar to the traverse() function, with the difference\n     * that it does a full depth traversal of the entire expression tree. This will execute\n     * the provided callback function for each ExpressionInterface object that is\n     * stored inside this query at any nesting depth in any part of the query.\n     *\n     * Callback will receive as first parameter the currently visited expression.\n     *\n     * @param callable $callback the function to be executed for each ExpressionInterface\n     *   found inside this query.\n     * @return $this|null\n     *\/",1694],["T_WHITESPACE","\n    ",1705],["T_PUBLIC","public",1706],["T_WHITESPACE"," ",1706],["T_FUNCTION","function",1706],["T_WHITESPACE"," ",1706],["T_STRING","traverseExpressions",1706],"(",["T_CALLABLE","callable",1706],["T_WHITESPACE"," ",1706],["T_VARIABLE","$callback",1706],")",["T_WHITESPACE","\n    ",1706],"{",["T_WHITESPACE","\n        ",1707],["T_VARIABLE","$visitor",1708],["T_WHITESPACE"," ",1708],"=",["T_WHITESPACE"," ",1708],["T_FUNCTION","function",1708],["T_WHITESPACE"," ",1708],"(",["T_VARIABLE","$expression",1708],")",["T_WHITESPACE"," ",1708],["T_USE","use",1708],["T_WHITESPACE"," ",1708],"(","&",["T_VARIABLE","$visitor",1708],",",["T_WHITESPACE"," ",1708],["T_VARIABLE","$callback",1708],")",["T_WHITESPACE"," ",1708],"{",["T_WHITESPACE","\n            ",1708],["T_IF","if",1709],["T_WHITESPACE"," ",1709],"(",["T_STRING","is_array",1709],"(",["T_VARIABLE","$expression",1709],")",")",["T_WHITESPACE"," ",1709],"{",["T_WHITESPACE","\n                ",1709],["T_FOREACH","foreach",1710],["T_WHITESPACE"," ",1710],"(",["T_VARIABLE","$expression",1710],["T_WHITESPACE"," ",1710],["T_AS","as",1710],["T_WHITESPACE"," ",1710],["T_VARIABLE","$e",1710],")",["T_WHITESPACE"," ",1710],"{",["T_WHITESPACE","\n                    ",1710],["T_VARIABLE","$visitor",1711],"(",["T_VARIABLE","$e",1711],")",";",["T_WHITESPACE","\n                ",1711],"}",["T_WHITESPACE","\n\n                ",1712],["T_RETURN","return",1714],["T_WHITESPACE"," ",1714],["T_STRING","null",1714],";",["T_WHITESPACE","\n            ",1714],"}",["T_WHITESPACE","\n\n            ",1715],["T_IF","if",1717],["T_WHITESPACE"," ",1717],"(",["T_VARIABLE","$expression",1717],["T_WHITESPACE"," ",1717],["T_INSTANCEOF","instanceof",1717],["T_WHITESPACE"," ",1717],["T_STRING","ExpressionInterface",1717],")",["T_WHITESPACE"," ",1717],"{",["T_WHITESPACE","\n                ",1717],["T_VARIABLE","$expression",1718],["T_OBJECT_OPERATOR","->",1718],["T_STRING","traverse",1718],"(",["T_VARIABLE","$visitor",1718],")",";",["T_WHITESPACE","\n\n                ",1718],["T_IF","if",1720],["T_WHITESPACE"," ",1720],"(","!","(",["T_VARIABLE","$expression",1720],["T_WHITESPACE"," ",1720],["T_INSTANCEOF","instanceof",1720],["T_WHITESPACE"," ",1720],["T_STRING","self",1720],")",")",["T_WHITESPACE"," ",1720],"{",["T_WHITESPACE","\n                    ",1720],["T_VARIABLE","$callback",1721],"(",["T_VARIABLE","$expression",1721],")",";",["T_WHITESPACE","\n                ",1721],"}",["T_WHITESPACE","\n            ",1722],"}",["T_WHITESPACE","\n        ",1723],"}",";",["T_WHITESPACE","\n\n        ",1724],["T_RETURN","return",1726],["T_WHITESPACE"," ",1726],["T_VARIABLE","$this",1726],["T_OBJECT_OPERATOR","->",1726],["T_STRING","traverse",1726],"(",["T_VARIABLE","$visitor",1726],")",";",["T_WHITESPACE","\n    ",1726],"}",["T_WHITESPACE","\n\n    ",1727],["T_DOC_COMMENT","\/**\n     * Associates a query placeholder to a value and a type.\n     *\n     * If type is expressed as \"atype[]\" (note braces) then it will cause the\n     * placeholder to be re-written dynamically so if the value is an array, it\n     * will create as many placeholders as values are in it. For example:\n     *\n     * ```\n     * $query->bind(':id', [1, 2, 3], 'int[]');\n     * ```\n     *\n     * Will create 3 int placeholders. When using named placeholders, this method\n     * requires that the placeholders include `:` e.g. `:value`.\n     *\n     * @param string|int $param placeholder to be replaced with quoted version\n     *   of $value\n     * @param mixed $value The value to be bound\n     * @param string|int $type the mapped type name, used for casting when sending\n     *   to database\n     * @return $this\n     *\/",1729],["T_WHITESPACE","\n    ",1749],["T_PUBLIC","public",1750],["T_WHITESPACE"," ",1750],["T_FUNCTION","function",1750],["T_WHITESPACE"," ",1750],["T_STRING","bind",1750],"(",["T_VARIABLE","$param",1750],",",["T_WHITESPACE"," ",1750],["T_VARIABLE","$value",1750],",",["T_WHITESPACE"," ",1750],["T_VARIABLE","$type",1750],["T_WHITESPACE"," ",1750],"=",["T_WHITESPACE"," ",1750],["T_CONSTANT_ENCAPSED_STRING","'string'",1750],")",["T_WHITESPACE","\n    ",1750],"{",["T_WHITESPACE","\n        ",1751],["T_VARIABLE","$this",1752],["T_OBJECT_OPERATOR","->",1752],["T_STRING","valueBinder",1752],"(",")",["T_OBJECT_OPERATOR","->",1752],["T_STRING","bind",1752],"(",["T_VARIABLE","$param",1752],",",["T_WHITESPACE"," ",1752],["T_VARIABLE","$value",1752],",",["T_WHITESPACE"," ",1752],["T_VARIABLE","$type",1752],")",";",["T_WHITESPACE","\n\n        ",1752],["T_RETURN","return",1754],["T_WHITESPACE"," ",1754],["T_VARIABLE","$this",1754],";",["T_WHITESPACE","\n    ",1754],"}",["T_WHITESPACE","\n\n    ",1755],["T_DOC_COMMENT","\/**\n     * Returns the currently used ValueBinder instance. If a value is passed,\n     * it will be set as the new instance to be used.\n     *\n     * A ValueBinder is responsible for generating query placeholders and temporarily\n     * associate values to those placeholders so that they can be passed correctly\n     * statement object.\n     *\n     * @param \\Cake\\Database\\ValueBinder|null $binder new instance to be set. If no value is passed the\n     *   default one will be returned\n     * @return $this|\\Cake\\Database\\ValueBinder\n     *\/",1757],["T_WHITESPACE","\n    ",1768],["T_PUBLIC","public",1769],["T_WHITESPACE"," ",1769],["T_FUNCTION","function",1769],["T_WHITESPACE"," ",1769],["T_STRING","valueBinder",1769],"(",["T_VARIABLE","$binder",1769],["T_WHITESPACE"," ",1769],"=",["T_WHITESPACE"," ",1769],["T_STRING","null",1769],")",["T_WHITESPACE","\n    ",1769],"{",["T_WHITESPACE","\n        ",1770],["T_IF","if",1771],["T_WHITESPACE"," ",1771],"(",["T_VARIABLE","$binder",1771],["T_WHITESPACE"," ",1771],["T_IS_IDENTICAL","===",1771],["T_WHITESPACE"," ",1771],["T_STRING","null",1771],")",["T_WHITESPACE"," ",1771],"{",["T_WHITESPACE","\n            ",1771],["T_IF","if",1772],["T_WHITESPACE"," ",1772],"(",["T_VARIABLE","$this",1772],["T_OBJECT_OPERATOR","->",1772],["T_STRING","_valueBinder",1772],["T_WHITESPACE"," ",1772],["T_IS_IDENTICAL","===",1772],["T_WHITESPACE"," ",1772],["T_STRING","null",1772],")",["T_WHITESPACE"," ",1772],"{",["T_WHITESPACE","\n                ",1772],["T_VARIABLE","$this",1773],["T_OBJECT_OPERATOR","->",1773],["T_STRING","_valueBinder",1773],["T_WHITESPACE"," ",1773],"=",["T_WHITESPACE"," ",1773],["T_NEW","new",1773],["T_WHITESPACE"," ",1773],["T_STRING","ValueBinder",1773],"(",")",";",["T_WHITESPACE","\n            ",1773],"}",["T_WHITESPACE","\n\n            ",1774],["T_RETURN","return",1776],["T_WHITESPACE"," ",1776],["T_VARIABLE","$this",1776],["T_OBJECT_OPERATOR","->",1776],["T_STRING","_valueBinder",1776],";",["T_WHITESPACE","\n        ",1776],"}",["T_WHITESPACE","\n        ",1777],["T_VARIABLE","$this",1778],["T_OBJECT_OPERATOR","->",1778],["T_STRING","_valueBinder",1778],["T_WHITESPACE"," ",1778],"=",["T_WHITESPACE"," ",1778],["T_VARIABLE","$binder",1778],";",["T_WHITESPACE","\n\n        ",1778],["T_RETURN","return",1780],["T_WHITESPACE"," ",1780],["T_VARIABLE","$this",1780],";",["T_WHITESPACE","\n    ",1780],"}",["T_WHITESPACE","\n\n    ",1781],["T_DOC_COMMENT","\/**\n     * Enable\/Disable buffered results.\n     *\n     * When enabled the results returned by this Query will be\n     * buffered. This enables you to iterate a result set multiple times, or\n     * both cache and iterate it.\n     *\n     * When disabled it will consume less memory as fetched results are not\n     * remembered for future iterations.\n     *\n     * If called with no arguments, it will return whether or not buffering is\n     * enabled.\n     *\n     * @param bool|null $enable whether or not to enable buffering\n     * @return bool|$this\n     *\/",1783],["T_WHITESPACE","\n    ",1798],["T_PUBLIC","public",1799],["T_WHITESPACE"," ",1799],["T_FUNCTION","function",1799],["T_WHITESPACE"," ",1799],["T_STRING","bufferResults",1799],"(",["T_VARIABLE","$enable",1799],["T_WHITESPACE"," ",1799],"=",["T_WHITESPACE"," ",1799],["T_STRING","null",1799],")",["T_WHITESPACE","\n    ",1799],"{",["T_WHITESPACE","\n        ",1800],["T_IF","if",1801],["T_WHITESPACE"," ",1801],"(",["T_VARIABLE","$enable",1801],["T_WHITESPACE"," ",1801],["T_IS_IDENTICAL","===",1801],["T_WHITESPACE"," ",1801],["T_STRING","null",1801],")",["T_WHITESPACE"," ",1801],"{",["T_WHITESPACE","\n            ",1801],["T_RETURN","return",1802],["T_WHITESPACE"," ",1802],["T_VARIABLE","$this",1802],["T_OBJECT_OPERATOR","->",1802],["T_STRING","_useBufferedResults",1802],";",["T_WHITESPACE","\n        ",1802],"}",["T_WHITESPACE","\n\n        ",1803],["T_VARIABLE","$this",1805],["T_OBJECT_OPERATOR","->",1805],["T_STRING","_dirty",1805],"(",")",";",["T_WHITESPACE","\n        ",1805],["T_VARIABLE","$this",1806],["T_OBJECT_OPERATOR","->",1806],["T_STRING","_useBufferedResults",1806],["T_WHITESPACE"," ",1806],"=",["T_WHITESPACE"," ",1806],["T_BOOL_CAST","(bool)",1806],["T_VARIABLE","$enable",1806],";",["T_WHITESPACE","\n\n        ",1806],["T_RETURN","return",1808],["T_WHITESPACE"," ",1808],["T_VARIABLE","$this",1808],";",["T_WHITESPACE","\n    ",1808],"}",["T_WHITESPACE","\n\n    ",1809],["T_DOC_COMMENT","\/**\n     * Sets the TypeMap class where the types for each of the fields in the\n     * select clause are stored.\n     *\n     * When called with no arguments, the current TypeMap object is returned.\n     *\n     * @param \\Cake\\Database\\TypeMap|null $typeMap The map object to use\n     * @return $this|\\Cake\\Database\\TypeMap\n     *\/",1811],["T_WHITESPACE","\n    ",1819],["T_PUBLIC","public",1820],["T_WHITESPACE"," ",1820],["T_FUNCTION","function",1820],["T_WHITESPACE"," ",1820],["T_STRING","selectTypeMap",1820],"(",["T_STRING","TypeMap",1820],["T_WHITESPACE"," ",1820],["T_VARIABLE","$typeMap",1820],["T_WHITESPACE"," ",1820],"=",["T_WHITESPACE"," ",1820],["T_STRING","null",1820],")",["T_WHITESPACE","\n    ",1820],"{",["T_WHITESPACE","\n        ",1821],["T_IF","if",1822],["T_WHITESPACE"," ",1822],"(",["T_VARIABLE","$typeMap",1822],["T_WHITESPACE"," ",1822],["T_IS_IDENTICAL","===",1822],["T_WHITESPACE"," ",1822],["T_STRING","null",1822],["T_WHITESPACE"," ",1822],["T_BOOLEAN_AND","&&",1822],["T_WHITESPACE"," ",1822],["T_VARIABLE","$this",1822],["T_OBJECT_OPERATOR","->",1822],["T_STRING","_selectTypeMap",1822],["T_WHITESPACE"," ",1822],["T_IS_IDENTICAL","===",1822],["T_WHITESPACE"," ",1822],["T_STRING","null",1822],")",["T_WHITESPACE"," ",1822],"{",["T_WHITESPACE","\n            ",1822],["T_VARIABLE","$this",1823],["T_OBJECT_OPERATOR","->",1823],["T_STRING","_selectTypeMap",1823],["T_WHITESPACE"," ",1823],"=",["T_WHITESPACE"," ",1823],["T_NEW","new",1823],["T_WHITESPACE"," ",1823],["T_STRING","TypeMap",1823],"(",")",";",["T_WHITESPACE","\n        ",1823],"}",["T_WHITESPACE","\n\n        ",1824],["T_IF","if",1826],["T_WHITESPACE"," ",1826],"(",["T_VARIABLE","$typeMap",1826],["T_WHITESPACE"," ",1826],["T_IS_IDENTICAL","===",1826],["T_WHITESPACE"," ",1826],["T_STRING","null",1826],")",["T_WHITESPACE"," ",1826],"{",["T_WHITESPACE","\n            ",1826],["T_RETURN","return",1827],["T_WHITESPACE"," ",1827],["T_VARIABLE","$this",1827],["T_OBJECT_OPERATOR","->",1827],["T_STRING","_selectTypeMap",1827],";",["T_WHITESPACE","\n        ",1827],"}",["T_WHITESPACE","\n\n        ",1828],["T_VARIABLE","$this",1830],["T_OBJECT_OPERATOR","->",1830],["T_STRING","_selectTypeMap",1830],["T_WHITESPACE"," ",1830],"=",["T_WHITESPACE"," ",1830],["T_VARIABLE","$typeMap",1830],";",["T_WHITESPACE","\n\n        ",1830],["T_RETURN","return",1832],["T_WHITESPACE"," ",1832],["T_VARIABLE","$this",1832],";",["T_WHITESPACE","\n    ",1832],"}",["T_WHITESPACE","\n\n    ",1833],["T_DOC_COMMENT","\/**\n     * Auxiliary function used to wrap the original statement from the driver with\n     * any registered callbacks.\n     *\n     * @param \\Cake\\Database\\StatementInterface $statement to be decorated\n     * @return \\Cake\\Database\\Statement\\CallbackStatement\n     *\/",1835],["T_WHITESPACE","\n    ",1841],["T_PROTECTED","protected",1842],["T_WHITESPACE"," ",1842],["T_FUNCTION","function",1842],["T_WHITESPACE"," ",1842],["T_STRING","_decorateStatement",1842],"(",["T_VARIABLE","$statement",1842],")",["T_WHITESPACE","\n    ",1842],"{",["T_WHITESPACE","\n        ",1843],["T_FOREACH","foreach",1844],["T_WHITESPACE"," ",1844],"(",["T_VARIABLE","$this",1844],["T_OBJECT_OPERATOR","->",1844],["T_STRING","_resultDecorators",1844],["T_WHITESPACE"," ",1844],["T_AS","as",1844],["T_WHITESPACE"," ",1844],["T_VARIABLE","$f",1844],")",["T_WHITESPACE"," ",1844],"{",["T_WHITESPACE","\n            ",1844],["T_VARIABLE","$statement",1845],["T_WHITESPACE"," ",1845],"=",["T_WHITESPACE"," ",1845],["T_NEW","new",1845],["T_WHITESPACE"," ",1845],["T_STRING","CallbackStatement",1845],"(",["T_VARIABLE","$statement",1845],",",["T_WHITESPACE"," ",1845],["T_VARIABLE","$this",1845],["T_OBJECT_OPERATOR","->",1845],["T_STRING","connection",1845],"(",")",["T_OBJECT_OPERATOR","->",1845],["T_STRING","driver",1845],"(",")",",",["T_WHITESPACE"," ",1845],["T_VARIABLE","$f",1845],")",";",["T_WHITESPACE","\n        ",1845],"}",["T_WHITESPACE","\n\n        ",1846],["T_RETURN","return",1848],["T_WHITESPACE"," ",1848],["T_VARIABLE","$statement",1848],";",["T_WHITESPACE","\n    ",1848],"}",["T_WHITESPACE","\n\n    ",1849],["T_DOC_COMMENT","\/**\n     * Helper function used to build conditions by composing QueryExpression objects.\n     *\n     * @param string $part Name of the query part to append the new part to\n     * @param string|null|array|\\Cake\\Database\\ExpressionInterface|callable $append Expression or builder function to append.\n     * @param string $conjunction type of conjunction to be used to operate part\n     * @param array $types associative array of type names used to bind values to query\n     * @return void\n     *\/",1851],["T_WHITESPACE","\n    ",1859],["T_PROTECTED","protected",1860],["T_WHITESPACE"," ",1860],["T_FUNCTION","function",1860],["T_WHITESPACE"," ",1860],["T_STRING","_conjugate",1860],"(",["T_VARIABLE","$part",1860],",",["T_WHITESPACE"," ",1860],["T_VARIABLE","$append",1860],",",["T_WHITESPACE"," ",1860],["T_VARIABLE","$conjunction",1860],",",["T_WHITESPACE"," ",1860],["T_VARIABLE","$types",1860],")",["T_WHITESPACE","\n    ",1860],"{",["T_WHITESPACE","\n        ",1861],["T_VARIABLE","$expression",1862],["T_WHITESPACE"," ",1862],"=",["T_WHITESPACE"," ",1862],["T_VARIABLE","$this",1862],["T_OBJECT_OPERATOR","->",1862],["T_STRING","_parts",1862],"[",["T_VARIABLE","$part",1862],"]",["T_WHITESPACE"," ",1862],"?",":",["T_WHITESPACE"," ",1862],["T_VARIABLE","$this",1862],["T_OBJECT_OPERATOR","->",1862],["T_STRING","newExpr",1862],"(",")",";",["T_WHITESPACE","\n        ",1862],["T_IF","if",1863],["T_WHITESPACE"," ",1863],"(",["T_EMPTY","empty",1863],"(",["T_VARIABLE","$append",1863],")",")",["T_WHITESPACE"," ",1863],"{",["T_WHITESPACE","\n            ",1863],["T_VARIABLE","$this",1864],["T_OBJECT_OPERATOR","->",1864],["T_STRING","_parts",1864],"[",["T_VARIABLE","$part",1864],"]",["T_WHITESPACE"," ",1864],"=",["T_WHITESPACE"," ",1864],["T_VARIABLE","$expression",1864],";",["T_WHITESPACE","\n\n            ",1864],["T_RETURN","return",1866],";",["T_WHITESPACE","\n        ",1866],"}",["T_WHITESPACE","\n\n        ",1867],["T_IF","if",1869],["T_WHITESPACE"," ",1869],"(",["T_VARIABLE","$expression",1869],["T_OBJECT_OPERATOR","->",1869],["T_STRING","isCallable",1869],"(",["T_VARIABLE","$append",1869],")",")",["T_WHITESPACE"," ",1869],"{",["T_WHITESPACE","\n            ",1869],["T_VARIABLE","$append",1870],["T_WHITESPACE"," ",1870],"=",["T_WHITESPACE"," ",1870],["T_VARIABLE","$append",1870],"(",["T_VARIABLE","$this",1870],["T_OBJECT_OPERATOR","->",1870],["T_STRING","newExpr",1870],"(",")",",",["T_WHITESPACE"," ",1870],["T_VARIABLE","$this",1870],")",";",["T_WHITESPACE","\n        ",1870],"}",["T_WHITESPACE","\n\n        ",1871],["T_IF","if",1873],["T_WHITESPACE"," ",1873],"(",["T_VARIABLE","$expression",1873],["T_OBJECT_OPERATOR","->",1873],["T_STRING","tieWith",1873],"(",")",["T_WHITESPACE"," ",1873],["T_IS_IDENTICAL","===",1873],["T_WHITESPACE"," ",1873],["T_VARIABLE","$conjunction",1873],")",["T_WHITESPACE"," ",1873],"{",["T_WHITESPACE","\n            ",1873],["T_VARIABLE","$expression",1874],["T_OBJECT_OPERATOR","->",1874],["T_STRING","add",1874],"(",["T_VARIABLE","$append",1874],",",["T_WHITESPACE"," ",1874],["T_VARIABLE","$types",1874],")",";",["T_WHITESPACE","\n        ",1874],"}",["T_WHITESPACE"," ",1875],["T_ELSE","else",1875],["T_WHITESPACE"," ",1875],"{",["T_WHITESPACE","\n            ",1875],["T_VARIABLE","$expression",1876],["T_WHITESPACE"," ",1876],"=",["T_WHITESPACE"," ",1876],["T_VARIABLE","$this",1876],["T_OBJECT_OPERATOR","->",1876],["T_STRING","newExpr",1876],"(",")",["T_WHITESPACE","\n                ",1876],["T_OBJECT_OPERATOR","->",1877],["T_STRING","tieWith",1877],"(",["T_VARIABLE","$conjunction",1877],")",["T_WHITESPACE","\n                ",1877],["T_OBJECT_OPERATOR","->",1878],["T_STRING","add",1878],"(","[",["T_VARIABLE","$append",1878],",",["T_WHITESPACE"," ",1878],["T_VARIABLE","$expression",1878],"]",",",["T_WHITESPACE"," ",1878],["T_VARIABLE","$types",1878],")",";",["T_WHITESPACE","\n        ",1878],"}",["T_WHITESPACE","\n\n        ",1879],["T_VARIABLE","$this",1881],["T_OBJECT_OPERATOR","->",1881],["T_STRING","_parts",1881],"[",["T_VARIABLE","$part",1881],"]",["T_WHITESPACE"," ",1881],"=",["T_WHITESPACE"," ",1881],["T_VARIABLE","$expression",1881],";",["T_WHITESPACE","\n        ",1881],["T_VARIABLE","$this",1882],["T_OBJECT_OPERATOR","->",1882],["T_STRING","_dirty",1882],"(",")",";",["T_WHITESPACE","\n    ",1882],"}",["T_WHITESPACE","\n\n    ",1883],["T_DOC_COMMENT","\/**\n     * Marks a query as dirty, removing any preprocessed information\n     * from in memory caching.\n     *\n     * @return void\n     *\/",1885],["T_WHITESPACE","\n    ",1890],["T_PROTECTED","protected",1891],["T_WHITESPACE"," ",1891],["T_FUNCTION","function",1891],["T_WHITESPACE"," ",1891],["T_STRING","_dirty",1891],"(",")",["T_WHITESPACE","\n    ",1891],"{",["T_WHITESPACE","\n        ",1892],["T_VARIABLE","$this",1893],["T_OBJECT_OPERATOR","->",1893],["T_STRING","_dirty",1893],["T_WHITESPACE"," ",1893],"=",["T_WHITESPACE"," ",1893],["T_STRING","true",1893],";",["T_WHITESPACE","\n\n        ",1893],["T_IF","if",1895],["T_WHITESPACE"," ",1895],"(",["T_VARIABLE","$this",1895],["T_OBJECT_OPERATOR","->",1895],["T_STRING","_iterator",1895],["T_WHITESPACE"," ",1895],["T_BOOLEAN_AND","&&",1895],["T_WHITESPACE"," ",1895],["T_VARIABLE","$this",1895],["T_OBJECT_OPERATOR","->",1895],["T_STRING","_valueBinder",1895],")",["T_WHITESPACE"," ",1895],"{",["T_WHITESPACE","\n            ",1895],["T_VARIABLE","$this",1896],["T_OBJECT_OPERATOR","->",1896],["T_STRING","valueBinder",1896],"(",")",["T_OBJECT_OPERATOR","->",1896],["T_STRING","reset",1896],"(",")",";",["T_WHITESPACE","\n        ",1896],"}",["T_WHITESPACE","\n    ",1897],"}",["T_WHITESPACE","\n\n    ",1898],["T_DOC_COMMENT","\/**\n     * Do a deep clone on this object.\n     *\n     * Will clone all of the expression objects used in\n     * each of the clauses, as well as the valueBinder.\n     *\n     * @return void\n     *\/",1900],["T_WHITESPACE","\n    ",1907],["T_PUBLIC","public",1908],["T_WHITESPACE"," ",1908],["T_FUNCTION","function",1908],["T_WHITESPACE"," ",1908],["T_STRING","__clone",1908],"(",")",["T_WHITESPACE","\n    ",1908],"{",["T_WHITESPACE","\n        ",1909],["T_VARIABLE","$this",1910],["T_OBJECT_OPERATOR","->",1910],["T_STRING","_iterator",1910],["T_WHITESPACE"," ",1910],"=",["T_WHITESPACE"," ",1910],["T_STRING","null",1910],";",["T_WHITESPACE","\n        ",1910],["T_IF","if",1911],["T_WHITESPACE"," ",1911],"(",["T_VARIABLE","$this",1911],["T_OBJECT_OPERATOR","->",1911],["T_STRING","_valueBinder",1911],["T_WHITESPACE"," ",1911],["T_IS_NOT_IDENTICAL","!==",1911],["T_WHITESPACE"," ",1911],["T_STRING","null",1911],")",["T_WHITESPACE"," ",1911],"{",["T_WHITESPACE","\n            ",1911],["T_VARIABLE","$this",1912],["T_OBJECT_OPERATOR","->",1912],["T_STRING","_valueBinder",1912],["T_WHITESPACE"," ",1912],"=",["T_WHITESPACE"," ",1912],["T_CLONE","clone",1912],["T_WHITESPACE"," ",1912],["T_VARIABLE","$this",1912],["T_OBJECT_OPERATOR","->",1912],["T_STRING","_valueBinder",1912],";",["T_WHITESPACE","\n        ",1912],"}",["T_WHITESPACE","\n        ",1913],["T_IF","if",1914],["T_WHITESPACE"," ",1914],"(",["T_VARIABLE","$this",1914],["T_OBJECT_OPERATOR","->",1914],["T_STRING","_selectTypeMap",1914],["T_WHITESPACE"," ",1914],["T_IS_NOT_IDENTICAL","!==",1914],["T_WHITESPACE"," ",1914],["T_STRING","null",1914],")",["T_WHITESPACE"," ",1914],"{",["T_WHITESPACE","\n            ",1914],["T_VARIABLE","$this",1915],["T_OBJECT_OPERATOR","->",1915],["T_STRING","_selectTypeMap",1915],["T_WHITESPACE"," ",1915],"=",["T_WHITESPACE"," ",1915],["T_CLONE","clone",1915],["T_WHITESPACE"," ",1915],["T_VARIABLE","$this",1915],["T_OBJECT_OPERATOR","->",1915],["T_STRING","_selectTypeMap",1915],";",["T_WHITESPACE","\n        ",1915],"}",["T_WHITESPACE","\n        ",1916],["T_FOREACH","foreach",1917],["T_WHITESPACE"," ",1917],"(",["T_VARIABLE","$this",1917],["T_OBJECT_OPERATOR","->",1917],["T_STRING","_parts",1917],["T_WHITESPACE"," ",1917],["T_AS","as",1917],["T_WHITESPACE"," ",1917],["T_VARIABLE","$name",1917],["T_WHITESPACE"," ",1917],["T_DOUBLE_ARROW","=>",1917],["T_WHITESPACE"," ",1917],["T_VARIABLE","$part",1917],")",["T_WHITESPACE"," ",1917],"{",["T_WHITESPACE","\n            ",1917],["T_IF","if",1918],["T_WHITESPACE"," ",1918],"(",["T_EMPTY","empty",1918],"(",["T_VARIABLE","$part",1918],")",")",["T_WHITESPACE"," ",1918],"{",["T_WHITESPACE","\n                ",1918],["T_CONTINUE","continue",1919],";",["T_WHITESPACE","\n            ",1919],"}",["T_WHITESPACE","\n            ",1920],["T_IF","if",1921],["T_WHITESPACE"," ",1921],"(",["T_STRING","is_array",1921],"(",["T_VARIABLE","$part",1921],")",")",["T_WHITESPACE"," ",1921],"{",["T_WHITESPACE","\n                ",1921],["T_FOREACH","foreach",1922],["T_WHITESPACE"," ",1922],"(",["T_VARIABLE","$part",1922],["T_WHITESPACE"," ",1922],["T_AS","as",1922],["T_WHITESPACE"," ",1922],["T_VARIABLE","$i",1922],["T_WHITESPACE"," ",1922],["T_DOUBLE_ARROW","=>",1922],["T_WHITESPACE"," ",1922],["T_VARIABLE","$piece",1922],")",["T_WHITESPACE"," ",1922],"{",["T_WHITESPACE","\n                    ",1922],["T_IF","if",1923],["T_WHITESPACE"," ",1923],"(",["T_VARIABLE","$piece",1923],["T_WHITESPACE"," ",1923],["T_INSTANCEOF","instanceof",1923],["T_WHITESPACE"," ",1923],["T_STRING","ExpressionInterface",1923],")",["T_WHITESPACE"," ",1923],"{",["T_WHITESPACE","\n                        ",1923],["T_VARIABLE","$this",1924],["T_OBJECT_OPERATOR","->",1924],["T_STRING","_parts",1924],"[",["T_VARIABLE","$name",1924],"]","[",["T_VARIABLE","$i",1924],"]",["T_WHITESPACE"," ",1924],"=",["T_WHITESPACE"," ",1924],["T_CLONE","clone",1924],["T_WHITESPACE"," ",1924],["T_VARIABLE","$piece",1924],";",["T_WHITESPACE","\n                    ",1924],"}",["T_WHITESPACE","\n                ",1925],"}",["T_WHITESPACE","\n            ",1926],"}",["T_WHITESPACE","\n            ",1927],["T_IF","if",1928],["T_WHITESPACE"," ",1928],"(",["T_VARIABLE","$part",1928],["T_WHITESPACE"," ",1928],["T_INSTANCEOF","instanceof",1928],["T_WHITESPACE"," ",1928],["T_STRING","ExpressionInterface",1928],")",["T_WHITESPACE"," ",1928],"{",["T_WHITESPACE","\n                ",1928],["T_VARIABLE","$this",1929],["T_OBJECT_OPERATOR","->",1929],["T_STRING","_parts",1929],"[",["T_VARIABLE","$name",1929],"]",["T_WHITESPACE"," ",1929],"=",["T_WHITESPACE"," ",1929],["T_CLONE","clone",1929],["T_WHITESPACE"," ",1929],["T_VARIABLE","$part",1929],";",["T_WHITESPACE","\n            ",1929],"}",["T_WHITESPACE","\n        ",1930],"}",["T_WHITESPACE","\n    ",1931],"}",["T_WHITESPACE","\n\n    ",1932],["T_DOC_COMMENT","\/**\n     * Returns string representation of this query (complete SQL statement).\n     *\n     * @return string\n     *\/",1934],["T_WHITESPACE","\n    ",1938],["T_PUBLIC","public",1939],["T_WHITESPACE"," ",1939],["T_FUNCTION","function",1939],["T_WHITESPACE"," ",1939],["T_STRING","__toString",1939],"(",")",["T_WHITESPACE","\n    ",1939],"{",["T_WHITESPACE","\n        ",1940],["T_RETURN","return",1941],["T_WHITESPACE"," ",1941],["T_VARIABLE","$this",1941],["T_OBJECT_OPERATOR","->",1941],["T_STRING","sql",1941],"(",")",";",["T_WHITESPACE","\n    ",1941],"}",["T_WHITESPACE","\n\n    ",1942],["T_DOC_COMMENT","\/**\n     * Returns an array that can be used to describe the internal state of this\n     * object.\n     *\n     * @return array\n     *\/",1944],["T_WHITESPACE","\n    ",1949],["T_PUBLIC","public",1950],["T_WHITESPACE"," ",1950],["T_FUNCTION","function",1950],["T_WHITESPACE"," ",1950],["T_STRING","__debugInfo",1950],"(",")",["T_WHITESPACE","\n    ",1950],"{",["T_WHITESPACE","\n        ",1951],["T_TRY","try",1952],["T_WHITESPACE"," ",1952],"{",["T_WHITESPACE","\n            ",1952],["T_VARIABLE","$restore",1953],["T_WHITESPACE"," ",1953],"=",["T_WHITESPACE"," ",1953],["T_STRING","set_error_handler",1953],"(",["T_FUNCTION","function",1953],["T_WHITESPACE"," ",1953],"(",["T_VARIABLE","$errno",1953],",",["T_WHITESPACE"," ",1953],["T_VARIABLE","$errstr",1953],")",["T_WHITESPACE"," ",1953],"{",["T_WHITESPACE","\n                ",1953],["T_THROW","throw",1954],["T_WHITESPACE"," ",1954],["T_NEW","new",1954],["T_WHITESPACE"," ",1954],["T_STRING","RuntimeException",1954],"(",["T_VARIABLE","$errstr",1954],",",["T_WHITESPACE"," ",1954],["T_VARIABLE","$errno",1954],")",";",["T_WHITESPACE","\n            ",1954],"}",",",["T_WHITESPACE"," ",1955],["T_STRING","E_ALL",1955],")",";",["T_WHITESPACE","\n            ",1955],["T_VARIABLE","$sql",1956],["T_WHITESPACE"," ",1956],"=",["T_WHITESPACE"," ",1956],["T_VARIABLE","$this",1956],["T_OBJECT_OPERATOR","->",1956],["T_STRING","sql",1956],"(",")",";",["T_WHITESPACE","\n            ",1956],["T_VARIABLE","$params",1957],["T_WHITESPACE"," ",1957],"=",["T_WHITESPACE"," ",1957],["T_VARIABLE","$this",1957],["T_OBJECT_OPERATOR","->",1957],["T_STRING","valueBinder",1957],"(",")",["T_OBJECT_OPERATOR","->",1957],["T_STRING","bindings",1957],"(",")",";",["T_WHITESPACE","\n        ",1957],"}",["T_WHITESPACE"," ",1958],["T_CATCH","catch",1958],["T_WHITESPACE"," ",1958],"(",["T_STRING","RuntimeException",1958],["T_WHITESPACE"," ",1958],["T_VARIABLE","$e",1958],")",["T_WHITESPACE"," ",1958],"{",["T_WHITESPACE","\n            ",1958],["T_VARIABLE","$sql",1959],["T_WHITESPACE"," ",1959],"=",["T_WHITESPACE"," ",1959],["T_CONSTANT_ENCAPSED_STRING","'SQL could not be generated for this query as it is incomplete.'",1959],";",["T_WHITESPACE","\n            ",1959],["T_VARIABLE","$params",1960],["T_WHITESPACE"," ",1960],"=",["T_WHITESPACE"," ",1960],"[","]",";",["T_WHITESPACE","\n        ",1960],"}",["T_WHITESPACE"," ",1961],["T_FINALLY","finally",1961],["T_WHITESPACE"," ",1961],"{",["T_WHITESPACE","\n            ",1961],["T_STRING","restore_error_handler",1962],"(",")",";",["T_WHITESPACE","\n        ",1962],"}",["T_WHITESPACE","\n\n        ",1963],["T_RETURN","return",1965],["T_WHITESPACE"," ",1965],"[",["T_WHITESPACE","\n            ",1965],["T_CONSTANT_ENCAPSED_STRING","'(help)'",1966],["T_WHITESPACE"," ",1966],["T_DOUBLE_ARROW","=>",1966],["T_WHITESPACE"," ",1966],["T_CONSTANT_ENCAPSED_STRING","'This is a Query object, to get the results execute or iterate it.'",1966],",",["T_WHITESPACE","\n            ",1966],["T_CONSTANT_ENCAPSED_STRING","'sql'",1967],["T_WHITESPACE"," ",1967],["T_DOUBLE_ARROW","=>",1967],["T_WHITESPACE"," ",1967],["T_VARIABLE","$sql",1967],",",["T_WHITESPACE","\n            ",1967],["T_CONSTANT_ENCAPSED_STRING","'params'",1968],["T_WHITESPACE"," ",1968],["T_DOUBLE_ARROW","=>",1968],["T_WHITESPACE"," ",1968],["T_VARIABLE","$params",1968],",",["T_WHITESPACE","\n            ",1968],["T_CONSTANT_ENCAPSED_STRING","'defaultTypes'",1969],["T_WHITESPACE"," ",1969],["T_DOUBLE_ARROW","=>",1969],["T_WHITESPACE"," ",1969],["T_VARIABLE","$this",1969],["T_OBJECT_OPERATOR","->",1969],["T_STRING","defaultTypes",1969],"(",")",",",["T_WHITESPACE","\n            ",1969],["T_CONSTANT_ENCAPSED_STRING","'decorators'",1970],["T_WHITESPACE"," ",1970],["T_DOUBLE_ARROW","=>",1970],["T_WHITESPACE"," ",1970],["T_STRING","count",1970],"(",["T_VARIABLE","$this",1970],["T_OBJECT_OPERATOR","->",1970],["T_STRING","_resultDecorators",1970],")",",",["T_WHITESPACE","\n            ",1970],["T_CONSTANT_ENCAPSED_STRING","'executed'",1971],["T_WHITESPACE"," ",1971],["T_DOUBLE_ARROW","=>",1971],["T_WHITESPACE"," ",1971],["T_VARIABLE","$this",1971],["T_OBJECT_OPERATOR","->",1971],["T_STRING","_iterator",1971],["T_WHITESPACE"," ",1971],"?",["T_WHITESPACE"," ",1971],["T_STRING","true",1971],["T_WHITESPACE"," ",1971],":",["T_WHITESPACE"," ",1971],["T_STRING","false",1971],["T_WHITESPACE","\n        ",1971],"]",";",["T_WHITESPACE","\n    ",1972],"}",["T_WHITESPACE","\n",1973],"}",["T_WHITESPACE","\n",1974]]