[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.2.14\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Database",15],";",["T_WHITESPACE","\n\n",15],["T_DOC_COMMENT","\/**\n * Encapsulates all conversion functions for values coming from a database into PHP and\n * going from PHP into a database.\n *\/",17],["T_WHITESPACE","\n",20],["T_INTERFACE","interface",21],["T_WHITESPACE"," ",21],["T_STRING","TypeInterface",21],["T_WHITESPACE","\n",21],"{",["T_WHITESPACE","\n\n    ",22],["T_DOC_COMMENT","\/**\n     * Casts given value from a PHP type to one acceptable by a database.\n     *\n     * @param mixed $value Value to be converted to a database equivalent.\n     * @param \\Cake\\Database\\Driver $driver Object from which database preferences and configuration will be extracted.\n     * @return mixed Given PHP type casted to one acceptable by a database.\n     *\/",24],["T_WHITESPACE","\n    ",30],["T_PUBLIC","public",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","toDatabase",31],"(",["T_VARIABLE","$value",31],",",["T_WHITESPACE"," ",31],["T_STRING","Driver",31],["T_WHITESPACE"," ",31],["T_VARIABLE","$driver",31],")",";",["T_WHITESPACE","\n\n    ",31],["T_DOC_COMMENT","\/**\n     * Casts given value from a database type to a PHP equivalent.\n     *\n     * @param mixed $value Value to be converted to PHP equivalent\n     * @param \\Cake\\Database\\Driver $driver Object from which database preferences and configuration will be extracted\n     * @return mixed Given value casted from a database to a PHP equivalent.\n     *\/",33],["T_WHITESPACE","\n    ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","toPHP",40],"(",["T_VARIABLE","$value",40],",",["T_WHITESPACE"," ",40],["T_STRING","Driver",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$driver",40],")",";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * Casts given value to its Statement equivalent.\n     *\n     * @param mixed $value Value to be converted to PDO statement.\n     * @param \\Cake\\Database\\Driver $driver Object from which database preferences and configuration will be extracted.\n     * @return mixed Given value casted to its Statement equivalent.\n     *\/",42],["T_WHITESPACE","\n    ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","toStatement",49],"(",["T_VARIABLE","$value",49],",",["T_WHITESPACE"," ",49],["T_STRING","Driver",49],["T_WHITESPACE"," ",49],["T_VARIABLE","$driver",49],")",";",["T_WHITESPACE","\n\n    ",49],["T_DOC_COMMENT","\/**\n     * Marshalls flat data into PHP objects.\n     *\n     * Most useful for converting request data into PHP objects,\n     * that make sense for the rest of the ORM\/Database layers.\n     *\n     * @param mixed $value The value to convert.\n     * @return mixed Converted value.\n     *\/",51],["T_WHITESPACE","\n    ",59],["T_PUBLIC","public",60],["T_WHITESPACE"," ",60],["T_FUNCTION","function",60],["T_WHITESPACE"," ",60],["T_STRING","marshal",60],"(",["T_VARIABLE","$value",60],")",";",["T_WHITESPACE","\n\n    ",60],["T_DOC_COMMENT","\/**\n     * Returns the base type name that this class is inheriting.\n     *\n     * This is useful when extending base type for adding extra functionality,\n     * but still want the rest of the framework to use the same assumptions it would\n     * do about the base type it inherits from.\n     *\n     * @return string The base type name that this class is inheriting.\n     *\/",62],["T_WHITESPACE","\n    ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","getBaseType",71],"(",")",";",["T_WHITESPACE","\n\n    ",71],["T_DOC_COMMENT","\/**\n     * Returns type identifier name for this object.\n     *\n     * @return string The type identifier name for this object.\n     *\/",73],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","getName",78],"(",")",";",["T_WHITESPACE","\n\n    ",78],["T_DOC_COMMENT","\/**\n     * Generate a new primary key value for a given type.\n     *\n     * This method can be used by types to create new primary key values\n     * when entities are inserted.\n     *\n     * @return mixed A new primary key value.\n     * @see \\Cake\\Database\\Type\\UuidType\n     *\/",80],["T_WHITESPACE","\n    ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","newId",89],"(",")",";",["T_WHITESPACE","\n",89],"}",["T_WHITESPACE","\n",90]]