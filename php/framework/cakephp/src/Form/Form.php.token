[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * CakePHP(tm) : Rapid Development Framework (http:\/\/cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http:\/\/cakefoundation.org)\n * @link          http:\/\/cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http:\/\/www.opensource.org\/licenses\/mit-license.php MIT License\n *\/",2],["T_WHITESPACE","\n",14],["T_NAMESPACE","namespace",15],["T_WHITESPACE"," ",15],["T_STRING","Cake",15],["T_NS_SEPARATOR","\\",15],["T_STRING","Form",15],";",["T_WHITESPACE","\n\n",15],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","Cake",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Validation",17],["T_NS_SEPARATOR","\\",17],["T_STRING","Validator",17],";",["T_WHITESPACE","\n\n",17],["T_DOC_COMMENT","\/**\n * Form abstraction used to create forms not tied to ORM backed models,\n * or to other permanent datastores. Ideal for implementing forms on top of\n * API services, or contact forms.\n *\n * ### Building a form\n *\n * This class is most useful when subclassed. In a subclass you\n * should define the `_buildSchema`, `_buildValidator` and optionally,\n * the `_execute` methods. These allow you to declare your form's\n * fields, validation and primary action respectively.\n *\n * You can also define the validation and schema by chaining method\n * calls off of `$form->schema()` and `$form->validator()`.\n *\n * Forms are conventionally placed in the `App\\Form` namespace.\n *\/",19],["T_WHITESPACE","\n",35],["T_CLASS","class",36],["T_WHITESPACE"," ",36],["T_STRING","Form",36],["T_WHITESPACE","\n",36],"{",["T_WHITESPACE","\n\n    ",37],["T_DOC_COMMENT","\/**\n     * The schema used by this form.\n     *\n     * @var \\Cake\\Form\\Schema;\n     *\/",39],["T_WHITESPACE","\n    ",43],["T_PROTECTED","protected",44],["T_WHITESPACE"," ",44],["T_VARIABLE","$_schema",44],";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * The errors if any\n     *\n     * @var array\n     *\/",46],["T_WHITESPACE","\n    ",50],["T_PROTECTED","protected",51],["T_WHITESPACE"," ",51],["T_VARIABLE","$_errors",51],["T_WHITESPACE"," ",51],"=",["T_WHITESPACE"," ",51],"[","]",";",["T_WHITESPACE","\n\n    ",51],["T_DOC_COMMENT","\/**\n     * The validator used by this form.\n     *\n     * @var \\Cake\\Validation\\Validator;\n     *\/",53],["T_WHITESPACE","\n    ",57],["T_PROTECTED","protected",58],["T_WHITESPACE"," ",58],["T_VARIABLE","$_validator",58],";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Get\/Set the schema for this form.\n     *\n     * This method will call `_buildSchema()` when the schema\n     * is first built. This hook method lets you configure the\n     * schema or load a pre-defined one.\n     *\n     * @param \\Cake\\Form\\Schema|null $schema The schema to set, or null.\n     * @return \\Cake\\Form\\Schema the schema instance.\n     *\/",60],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","schema",70],"(",["T_STRING","Schema",70],["T_WHITESPACE"," ",70],["T_VARIABLE","$schema",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_STRING","null",70],")",["T_WHITESPACE","\n    ",70],"{",["T_WHITESPACE","\n        ",71],["T_IF","if",72],["T_WHITESPACE"," ",72],"(",["T_VARIABLE","$schema",72],["T_WHITESPACE"," ",72],["T_IS_IDENTICAL","===",72],["T_WHITESPACE"," ",72],["T_STRING","null",72],["T_WHITESPACE"," ",72],["T_BOOLEAN_AND","&&",72],["T_WHITESPACE"," ",72],["T_EMPTY","empty",72],"(",["T_VARIABLE","$this",72],["T_OBJECT_OPERATOR","->",72],["T_STRING","_schema",72],")",")",["T_WHITESPACE"," ",72],"{",["T_WHITESPACE","\n            ",72],["T_VARIABLE","$schema",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_VARIABLE","$this",73],["T_OBJECT_OPERATOR","->",73],["T_STRING","_buildSchema",73],"(",["T_NEW","new",73],["T_WHITESPACE"," ",73],["T_STRING","Schema",73],"(",")",")",";",["T_WHITESPACE","\n        ",73],"}",["T_WHITESPACE","\n        ",74],["T_IF","if",75],["T_WHITESPACE"," ",75],"(",["T_VARIABLE","$schema",75],")",["T_WHITESPACE"," ",75],"{",["T_WHITESPACE","\n            ",75],["T_VARIABLE","$this",76],["T_OBJECT_OPERATOR","->",76],["T_STRING","_schema",76],["T_WHITESPACE"," ",76],"=",["T_WHITESPACE"," ",76],["T_VARIABLE","$schema",76],";",["T_WHITESPACE","\n        ",76],"}",["T_WHITESPACE","\n\n        ",77],["T_RETURN","return",79],["T_WHITESPACE"," ",79],["T_VARIABLE","$this",79],["T_OBJECT_OPERATOR","->",79],["T_STRING","_schema",79],";",["T_WHITESPACE","\n    ",79],"}",["T_WHITESPACE","\n\n    ",80],["T_DOC_COMMENT","\/**\n     * A hook method intended to be implemented by subclasses.\n     *\n     * You can use this method to define the schema using\n     * the methods on Cake\\Form\\Schema, or loads a pre-defined\n     * schema from a concrete class.\n     *\n     * @param \\Cake\\Form\\Schema $schema The schema to customize.\n     * @return \\Cake\\Form\\Schema The schema to use.\n     *\/",82],["T_WHITESPACE","\n    ",91],["T_PROTECTED","protected",92],["T_WHITESPACE"," ",92],["T_FUNCTION","function",92],["T_WHITESPACE"," ",92],["T_STRING","_buildSchema",92],"(",["T_STRING","Schema",92],["T_WHITESPACE"," ",92],["T_VARIABLE","$schema",92],")",["T_WHITESPACE","\n    ",92],"{",["T_WHITESPACE","\n        ",93],["T_RETURN","return",94],["T_WHITESPACE"," ",94],["T_VARIABLE","$schema",94],";",["T_WHITESPACE","\n    ",94],"}",["T_WHITESPACE","\n\n    ",95],["T_DOC_COMMENT","\/**\n     * Get\/Set the validator for this form.\n     *\n     * This method will call `_buildValidator()` when the validator\n     * is first built. This hook method lets you configure the\n     * validator or load a pre-defined one.\n     *\n     * @param \\Cake\\Validation\\Validator|null $validator The validator to set, or null.\n     * @return \\Cake\\Validation\\Validator the validator instance.\n     *\/",97],["T_WHITESPACE","\n    ",106],["T_PUBLIC","public",107],["T_WHITESPACE"," ",107],["T_FUNCTION","function",107],["T_WHITESPACE"," ",107],["T_STRING","validator",107],"(",["T_STRING","Validator",107],["T_WHITESPACE"," ",107],["T_VARIABLE","$validator",107],["T_WHITESPACE"," ",107],"=",["T_WHITESPACE"," ",107],["T_STRING","null",107],")",["T_WHITESPACE","\n    ",107],"{",["T_WHITESPACE","\n        ",108],["T_IF","if",109],["T_WHITESPACE"," ",109],"(",["T_VARIABLE","$validator",109],["T_WHITESPACE"," ",109],["T_IS_IDENTICAL","===",109],["T_WHITESPACE"," ",109],["T_STRING","null",109],["T_WHITESPACE"," ",109],["T_BOOLEAN_AND","&&",109],["T_WHITESPACE"," ",109],["T_EMPTY","empty",109],"(",["T_VARIABLE","$this",109],["T_OBJECT_OPERATOR","->",109],["T_STRING","_validator",109],")",")",["T_WHITESPACE"," ",109],"{",["T_WHITESPACE","\n            ",109],["T_VARIABLE","$validator",110],["T_WHITESPACE"," ",110],"=",["T_WHITESPACE"," ",110],["T_VARIABLE","$this",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","_buildValidator",110],"(",["T_NEW","new",110],["T_WHITESPACE"," ",110],["T_STRING","Validator",110],"(",")",")",";",["T_WHITESPACE","\n        ",110],"}",["T_WHITESPACE","\n        ",111],["T_IF","if",112],["T_WHITESPACE"," ",112],"(",["T_VARIABLE","$validator",112],")",["T_WHITESPACE"," ",112],"{",["T_WHITESPACE","\n            ",112],["T_VARIABLE","$this",113],["T_OBJECT_OPERATOR","->",113],["T_STRING","_validator",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_VARIABLE","$validator",113],";",["T_WHITESPACE","\n        ",113],"}",["T_WHITESPACE","\n\n        ",114],["T_RETURN","return",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$this",116],["T_OBJECT_OPERATOR","->",116],["T_STRING","_validator",116],";",["T_WHITESPACE","\n    ",116],"}",["T_WHITESPACE","\n\n    ",117],["T_DOC_COMMENT","\/**\n     * A hook method intended to be implemented by subclasses.\n     *\n     * You can use this method to define the validator using\n     * the methods on Cake\\Validation\\Validator or loads a pre-defined\n     * validator from a concrete class.\n     *\n     * @param \\Cake\\Validation\\Validator $validator The validator to customize.\n     * @return \\Cake\\Validation\\Validator The validator to use.\n     *\/",119],["T_WHITESPACE","\n    ",128],["T_PROTECTED","protected",129],["T_WHITESPACE"," ",129],["T_FUNCTION","function",129],["T_WHITESPACE"," ",129],["T_STRING","_buildValidator",129],"(",["T_STRING","Validator",129],["T_WHITESPACE"," ",129],["T_VARIABLE","$validator",129],")",["T_WHITESPACE","\n    ",129],"{",["T_WHITESPACE","\n        ",130],["T_RETURN","return",131],["T_WHITESPACE"," ",131],["T_VARIABLE","$validator",131],";",["T_WHITESPACE","\n    ",131],"}",["T_WHITESPACE","\n\n    ",132],["T_DOC_COMMENT","\/**\n     * Used to check if $data passes this form's validation.\n     *\n     * @param array $data The data to check.\n     * @return bool Whether or not the data is valid.\n     *\/",134],["T_WHITESPACE","\n    ",139],["T_PUBLIC","public",140],["T_WHITESPACE"," ",140],["T_FUNCTION","function",140],["T_WHITESPACE"," ",140],["T_STRING","validate",140],"(",["T_ARRAY","array",140],["T_WHITESPACE"," ",140],["T_VARIABLE","$data",140],")",["T_WHITESPACE","\n    ",140],"{",["T_WHITESPACE","\n        ",141],["T_VARIABLE","$validator",142],["T_WHITESPACE"," ",142],"=",["T_WHITESPACE"," ",142],["T_VARIABLE","$this",142],["T_OBJECT_OPERATOR","->",142],["T_STRING","validator",142],"(",")",";",["T_WHITESPACE","\n        ",142],["T_VARIABLE","$this",143],["T_OBJECT_OPERATOR","->",143],["T_STRING","_errors",143],["T_WHITESPACE"," ",143],"=",["T_WHITESPACE"," ",143],["T_VARIABLE","$validator",143],["T_OBJECT_OPERATOR","->",143],["T_STRING","errors",143],"(",["T_VARIABLE","$data",143],")",";",["T_WHITESPACE","\n\n        ",143],["T_RETURN","return",145],["T_WHITESPACE"," ",145],["T_STRING","count",145],"(",["T_VARIABLE","$this",145],["T_OBJECT_OPERATOR","->",145],["T_STRING","_errors",145],")",["T_WHITESPACE"," ",145],["T_IS_IDENTICAL","===",145],["T_WHITESPACE"," ",145],["T_LNUMBER","0",145],";",["T_WHITESPACE","\n    ",145],"}",["T_WHITESPACE","\n\n    ",146],["T_DOC_COMMENT","\/**\n     * Get the errors in the form\n     *\n     * Will return the errors from the last call\n     * to `validate()` or `execute()`.\n     *\n     * @return array Last set validation errors.\n     *\/",148],["T_WHITESPACE","\n    ",155],["T_PUBLIC","public",156],["T_WHITESPACE"," ",156],["T_FUNCTION","function",156],["T_WHITESPACE"," ",156],["T_STRING","errors",156],"(",")",["T_WHITESPACE","\n    ",156],"{",["T_WHITESPACE","\n        ",157],["T_RETURN","return",158],["T_WHITESPACE"," ",158],["T_VARIABLE","$this",158],["T_OBJECT_OPERATOR","->",158],["T_STRING","_errors",158],";",["T_WHITESPACE","\n    ",158],"}",["T_WHITESPACE","\n\n    ",159],["T_DOC_COMMENT","\/**\n     * Execute the form if it is valid.\n     *\n     * First validates the form, then calls the `_execute()` hook method.\n     * This hook method can be implemented in subclasses to perform\n     * the action of the form. This may be sending email, interacting\n     * with a remote API, or anything else you may need.\n     *\n     * @param array $data Form data.\n     * @return bool False on validation failure, otherwise returns the\n     *   result of the `_execute()` method.\n     *\/",161],["T_WHITESPACE","\n    ",172],["T_PUBLIC","public",173],["T_WHITESPACE"," ",173],["T_FUNCTION","function",173],["T_WHITESPACE"," ",173],["T_STRING","execute",173],"(",["T_ARRAY","array",173],["T_WHITESPACE"," ",173],["T_VARIABLE","$data",173],")",["T_WHITESPACE","\n    ",173],"{",["T_WHITESPACE","\n        ",174],["T_IF","if",175],["T_WHITESPACE"," ",175],"(","!",["T_VARIABLE","$this",175],["T_OBJECT_OPERATOR","->",175],["T_STRING","validate",175],"(",["T_VARIABLE","$data",175],")",")",["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n            ",175],["T_RETURN","return",176],["T_WHITESPACE"," ",176],["T_STRING","false",176],";",["T_WHITESPACE","\n        ",176],"}",["T_WHITESPACE","\n\n        ",177],["T_RETURN","return",179],["T_WHITESPACE"," ",179],["T_VARIABLE","$this",179],["T_OBJECT_OPERATOR","->",179],["T_STRING","_execute",179],"(",["T_VARIABLE","$data",179],")",";",["T_WHITESPACE","\n    ",179],"}",["T_WHITESPACE","\n\n    ",180],["T_DOC_COMMENT","\/**\n     * Hook method to be implemented in subclasses.\n     *\n     * Used by `execute()` to execute the form's action.\n     *\n     * @param array $data Form data.\n     * @return bool\n     *\/",182],["T_WHITESPACE","\n    ",189],["T_PROTECTED","protected",190],["T_WHITESPACE"," ",190],["T_FUNCTION","function",190],["T_WHITESPACE"," ",190],["T_STRING","_execute",190],"(",["T_ARRAY","array",190],["T_WHITESPACE"," ",190],["T_VARIABLE","$data",190],")",["T_WHITESPACE","\n    ",190],"{",["T_WHITESPACE","\n        ",191],["T_RETURN","return",192],["T_WHITESPACE"," ",192],["T_STRING","true",192],";",["T_WHITESPACE","\n    ",192],"}",["T_WHITESPACE","\n\n    ",193],["T_DOC_COMMENT","\/**\n     * Get the printable version of a Form instance.\n     *\n     * @return array\n     *\/",195],["T_WHITESPACE","\n    ",199],["T_PUBLIC","public",200],["T_WHITESPACE"," ",200],["T_FUNCTION","function",200],["T_WHITESPACE"," ",200],["T_STRING","__debugInfo",200],"(",")",["T_WHITESPACE","\n    ",200],"{",["T_WHITESPACE","\n        ",201],["T_VARIABLE","$special",202],["T_WHITESPACE"," ",202],"=",["T_WHITESPACE"," ",202],"[",["T_WHITESPACE","\n            ",202],["T_CONSTANT_ENCAPSED_STRING","'_schema'",203],["T_WHITESPACE"," ",203],["T_DOUBLE_ARROW","=>",203],["T_WHITESPACE"," ",203],["T_VARIABLE","$this",203],["T_OBJECT_OPERATOR","->",203],["T_STRING","schema",203],"(",")",["T_OBJECT_OPERATOR","->",203],["T_STRING","__debugInfo",203],"(",")",",",["T_WHITESPACE","\n            ",203],["T_CONSTANT_ENCAPSED_STRING","'_errors'",204],["T_WHITESPACE"," ",204],["T_DOUBLE_ARROW","=>",204],["T_WHITESPACE"," ",204],["T_VARIABLE","$this",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","errors",204],"(",")",",",["T_WHITESPACE","\n            ",204],["T_CONSTANT_ENCAPSED_STRING","'_validator'",205],["T_WHITESPACE"," ",205],["T_DOUBLE_ARROW","=>",205],["T_WHITESPACE"," ",205],["T_VARIABLE","$this",205],["T_OBJECT_OPERATOR","->",205],["T_STRING","validator",205],"(",")",["T_OBJECT_OPERATOR","->",205],["T_STRING","__debugInfo",205],"(",")",["T_WHITESPACE","\n        ",205],"]",";",["T_WHITESPACE","\n\n        ",206],["T_RETURN","return",208],["T_WHITESPACE"," ",208],["T_VARIABLE","$special",208],["T_WHITESPACE"," ",208],"+",["T_WHITESPACE"," ",208],["T_STRING","get_object_vars",208],"(",["T_VARIABLE","$this",208],")",";",["T_WHITESPACE","\n    ",208],"}",["T_WHITESPACE","\n",209],"}",["T_WHITESPACE","\n",210]]