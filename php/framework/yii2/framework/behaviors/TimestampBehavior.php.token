[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","behaviors",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","yii",10],["T_NS_SEPARATOR","\\",10],["T_STRING","base",10],["T_NS_SEPARATOR","\\",10],["T_STRING","InvalidCallException",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","yii",11],["T_NS_SEPARATOR","\\",11],["T_STRING","db",11],["T_NS_SEPARATOR","\\",11],["T_STRING","BaseActiveRecord",11],";",["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * TimestampBehavior automatically fills the specified attributes with the current timestamp.\n *\n * To use TimestampBehavior, insert the following code to your ActiveRecord class:\n *\n * ```php\n * use yii\\behaviors\\TimestampBehavior;\n *\n * public function behaviors()\n * {\n *     return [\n *         TimestampBehavior::className(),\n *     ];\n * }\n * ```\n *\n * By default, TimestampBehavior will fill the `created_at` and `updated_at` attributes with the current timestamp\n * when the associated AR object is being inserted; it will fill the `updated_at` attribute\n * with the timestamp when the AR object is being updated. The timestamp value is obtained by `time()`.\n *\n * Because attribute values will be set automatically by this behavior, they are usually not user input and should therefore\n * not be validated, i.e. `created_at` and `updated_at` should not appear in the [[\\yii\\base\\Model::rules()|rules()]] method of the model.\n *\n * For the above implementation to work with MySQL database, please declare the columns(`created_at`, `updated_at`) as int(11) for being UNIX timestamp.\n *\n * If your attribute names are different or you want to use a different way of calculating the timestamp,\n * you may configure the [[createdAtAttribute]], [[updatedAtAttribute]] and [[value]] properties like the following:\n *\n * ```php\n * use yii\\db\\Expression;\n *\n * public function behaviors()\n * {\n *     return [\n *         [\n *             'class' => TimestampBehavior::className(),\n *             'createdAtAttribute' => 'create_time',\n *             'updatedAtAttribute' => 'update_time',\n *             'value' => new Expression('NOW()'),\n *         ],\n *     ];\n * }\n * ```\n *\n * In case you use an [[\\yii\\db\\Expression]] object as in the example above, the attribute will not hold the timestamp value, but\n * the Expression object itself after the record has been saved. If you need the value from DB afterwards you should call\n * the [[\\yii\\db\\ActiveRecord::refresh()|refresh()]] method of the record.\n *\n * TimestampBehavior also provides a method named [[touch()]] that allows you to assign the current\n * timestamp to the specified attribute(s) and save them to the database. For example,\n *\n * ```php\n * $model->touch('creation_time');\n * ```\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @author Alexander Kochetov <creocoder@gmail.com>\n * @since 2.0\n *\/",13],["T_WHITESPACE","\n",71],["T_CLASS","class",72],["T_WHITESPACE"," ",72],["T_STRING","TimestampBehavior",72],["T_WHITESPACE"," ",72],["T_EXTENDS","extends",72],["T_WHITESPACE"," ",72],["T_STRING","AttributeBehavior",72],["T_WHITESPACE","\n",72],"{",["T_WHITESPACE","\n    ",73],["T_DOC_COMMENT","\/**\n     * @var string the attribute that will receive timestamp value\n     * Set this property to false if you do not want to record the creation time.\n     *\/",74],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$createdAtAttribute",78],["T_WHITESPACE"," ",78],"=",["T_WHITESPACE"," ",78],["T_CONSTANT_ENCAPSED_STRING","'created_at'",78],";",["T_WHITESPACE","\n    ",78],["T_DOC_COMMENT","\/**\n     * @var string the attribute that will receive timestamp value.\n     * Set this property to false if you do not want to record the update time.\n     *\/",79],["T_WHITESPACE","\n    ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_VARIABLE","$updatedAtAttribute",83],["T_WHITESPACE"," ",83],"=",["T_WHITESPACE"," ",83],["T_CONSTANT_ENCAPSED_STRING","'updated_at'",83],";",["T_WHITESPACE","\n    ",83],["T_DOC_COMMENT","\/**\n     * @inheritdoc\n     *\n     * In case, when the value is `null`, the result of the PHP function [time()](http:\/\/php.net\/manual\/en\/function.time.php)\n     * will be used as value.\n     *\/",84],["T_WHITESPACE","\n    ",89],["T_PUBLIC","public",90],["T_WHITESPACE"," ",90],["T_VARIABLE","$value",90],";",["T_WHITESPACE","\n\n\n    ",90],["T_DOC_COMMENT","\/**\n     * @inheritdoc\n     *\/",93],["T_WHITESPACE","\n    ",95],["T_PUBLIC","public",96],["T_WHITESPACE"," ",96],["T_FUNCTION","function",96],["T_WHITESPACE"," ",96],["T_STRING","init",96],"(",")",["T_WHITESPACE","\n    ",96],"{",["T_WHITESPACE","\n        ",97],["T_STRING","parent",98],["T_DOUBLE_COLON","::",98],["T_STRING","init",98],"(",")",";",["T_WHITESPACE","\n\n        ",98],["T_IF","if",100],["T_WHITESPACE"," ",100],"(",["T_EMPTY","empty",100],"(",["T_VARIABLE","$this",100],["T_OBJECT_OPERATOR","->",100],["T_STRING","attributes",100],")",")",["T_WHITESPACE"," ",100],"{",["T_WHITESPACE","\n            ",100],["T_VARIABLE","$this",101],["T_OBJECT_OPERATOR","->",101],["T_STRING","attributes",101],["T_WHITESPACE"," ",101],"=",["T_WHITESPACE"," ",101],"[",["T_WHITESPACE","\n                ",101],["T_STRING","BaseActiveRecord",102],["T_DOUBLE_COLON","::",102],["T_STRING","EVENT_BEFORE_INSERT",102],["T_WHITESPACE"," ",102],["T_DOUBLE_ARROW","=>",102],["T_WHITESPACE"," ",102],"[",["T_VARIABLE","$this",102],["T_OBJECT_OPERATOR","->",102],["T_STRING","createdAtAttribute",102],",",["T_WHITESPACE"," ",102],["T_VARIABLE","$this",102],["T_OBJECT_OPERATOR","->",102],["T_STRING","updatedAtAttribute",102],"]",",",["T_WHITESPACE","\n                ",102],["T_STRING","BaseActiveRecord",103],["T_DOUBLE_COLON","::",103],["T_STRING","EVENT_BEFORE_UPDATE",103],["T_WHITESPACE"," ",103],["T_DOUBLE_ARROW","=>",103],["T_WHITESPACE"," ",103],["T_VARIABLE","$this",103],["T_OBJECT_OPERATOR","->",103],["T_STRING","updatedAtAttribute",103],",",["T_WHITESPACE","\n            ",103],"]",";",["T_WHITESPACE","\n        ",104],"}",["T_WHITESPACE","\n    ",105],"}",["T_WHITESPACE","\n\n    ",106],["T_DOC_COMMENT","\/**\n     * @inheritdoc\n     *\n     * In case, when the [[value]] is `null`, the result of the PHP function [time()](http:\/\/php.net\/manual\/en\/function.time.php)\n     * will be used as value.\n     *\/",108],["T_WHITESPACE","\n    ",113],["T_PROTECTED","protected",114],["T_WHITESPACE"," ",114],["T_FUNCTION","function",114],["T_WHITESPACE"," ",114],["T_STRING","getValue",114],"(",["T_VARIABLE","$event",114],")",["T_WHITESPACE","\n    ",114],"{",["T_WHITESPACE","\n        ",115],["T_IF","if",116],["T_WHITESPACE"," ",116],"(",["T_VARIABLE","$this",116],["T_OBJECT_OPERATOR","->",116],["T_STRING","value",116],["T_WHITESPACE"," ",116],["T_IS_IDENTICAL","===",116],["T_WHITESPACE"," ",116],["T_STRING","null",116],")",["T_WHITESPACE"," ",116],"{",["T_WHITESPACE","\n            ",116],["T_RETURN","return",117],["T_WHITESPACE"," ",117],["T_STRING","time",117],"(",")",";",["T_WHITESPACE","\n        ",117],"}",["T_WHITESPACE","\n        ",118],["T_RETURN","return",119],["T_WHITESPACE"," ",119],["T_STRING","parent",119],["T_DOUBLE_COLON","::",119],["T_STRING","getValue",119],"(",["T_VARIABLE","$event",119],")",";",["T_WHITESPACE","\n    ",119],"}",["T_WHITESPACE","\n\n    ",120],["T_DOC_COMMENT","\/**\n     * Updates a timestamp attribute to the current timestamp.\n     *\n     * ```php\n     * $model->touch('lastVisit');\n     * ```\n     * @param string $attribute the name of the attribute to update.\n     * @throws InvalidCallException if owner is a new record (since version 2.0.6).\n     *\/",122],["T_WHITESPACE","\n    ",130],["T_PUBLIC","public",131],["T_WHITESPACE"," ",131],["T_FUNCTION","function",131],["T_WHITESPACE"," ",131],["T_STRING","touch",131],"(",["T_VARIABLE","$attribute",131],")",["T_WHITESPACE","\n    ",131],"{",["T_WHITESPACE","\n        ",132],["T_COMMENT","\/* @var $owner BaseActiveRecord *\/",133],["T_WHITESPACE","\n        ",133],["T_VARIABLE","$owner",134],["T_WHITESPACE"," ",134],"=",["T_WHITESPACE"," ",134],["T_VARIABLE","$this",134],["T_OBJECT_OPERATOR","->",134],["T_STRING","owner",134],";",["T_WHITESPACE","\n        ",134],["T_IF","if",135],["T_WHITESPACE"," ",135],"(",["T_VARIABLE","$owner",135],["T_OBJECT_OPERATOR","->",135],["T_STRING","getIsNewRecord",135],"(",")",")",["T_WHITESPACE"," ",135],"{",["T_WHITESPACE","\n            ",135],["T_THROW","throw",136],["T_WHITESPACE"," ",136],["T_NEW","new",136],["T_WHITESPACE"," ",136],["T_STRING","InvalidCallException",136],"(",["T_CONSTANT_ENCAPSED_STRING","'Updating the timestamp is not possible on a new record.'",136],")",";",["T_WHITESPACE","\n        ",136],"}",["T_WHITESPACE","\n        ",137],["T_VARIABLE","$owner",138],["T_OBJECT_OPERATOR","->",138],["T_STRING","updateAttributes",138],"(",["T_STRING","array_fill_keys",138],"(",["T_ARRAY_CAST","(array)",138],["T_WHITESPACE"," ",138],["T_VARIABLE","$attribute",138],",",["T_WHITESPACE"," ",138],["T_VARIABLE","$this",138],["T_OBJECT_OPERATOR","->",138],["T_STRING","getValue",138],"(",["T_STRING","null",138],")",")",")",";",["T_WHITESPACE","\n    ",138],"}",["T_WHITESPACE","\n",139],"}",["T_WHITESPACE","\n",140]]