[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","behaviors",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","Closure",11],";",["T_WHITESPACE","\n",11],["T_USE","use",12],["T_WHITESPACE"," ",12],["T_STRING","yii",12],["T_NS_SEPARATOR","\\",12],["T_STRING","base",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Behavior",12],";",["T_WHITESPACE","\n",12],["T_USE","use",13],["T_WHITESPACE"," ",13],["T_STRING","yii",13],["T_NS_SEPARATOR","\\",13],["T_STRING","base",13],["T_NS_SEPARATOR","\\",13],["T_STRING","Event",13],";",["T_WHITESPACE","\n",13],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","yii",14],["T_NS_SEPARATOR","\\",14],["T_STRING","db",14],["T_NS_SEPARATOR","\\",14],["T_STRING","ActiveRecord",14],";",["T_WHITESPACE","\n\n",14],["T_DOC_COMMENT","\/**\n * AttributeBehavior automatically assigns a specified value to one or multiple attributes of an ActiveRecord\n * object when certain events happen.\n *\n * To use AttributeBehavior, configure the [[attributes]] property which should specify the list of attributes\n * that need to be updated and the corresponding events that should trigger the update. Then configure the\n * [[value]] property with a PHP callable whose return value will be used to assign to the current attribute(s).\n * For example,\n *\n * ```php\n * use yii\\behaviors\\AttributeBehavior;\n *\n * public function behaviors()\n * {\n *     return [\n *         [\n *             'class' => AttributeBehavior::className(),\n *             'attributes' => [\n *                 ActiveRecord::EVENT_BEFORE_INSERT => 'attribute1',\n *                 ActiveRecord::EVENT_BEFORE_UPDATE => 'attribute2',\n *             ],\n *             'value' => function ($event) {\n *                 return 'some value';\n *             },\n *         ],\n *     ];\n * }\n * ```\n *\n * Because attribute values will be set automatically by this behavior, they are usually not user input and should therefore\n * not be validated, i.e. they should not appear in the [[\\yii\\base\\Model::rules()|rules()]] method of the model.\n *\n * @author Luciano Baraglia <luciano.baraglia@gmail.com>\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",16],["T_WHITESPACE","\n",51],["T_CLASS","class",52],["T_WHITESPACE"," ",52],["T_STRING","AttributeBehavior",52],["T_WHITESPACE"," ",52],["T_EXTENDS","extends",52],["T_WHITESPACE"," ",52],["T_STRING","Behavior",52],["T_WHITESPACE","\n",52],"{",["T_WHITESPACE","\n    ",53],["T_DOC_COMMENT","\/**\n     * @var array list of attributes that are to be automatically filled with the value specified via [[value]].\n     * The array keys are the ActiveRecord events upon which the attributes are to be updated,\n     * and the array values are the corresponding attribute(s) to be updated. You can use a string to represent\n     * a single attribute, or an array to represent a list of attributes. For example,\n     *\n     * ```php\n     * [\n     *     ActiveRecord::EVENT_BEFORE_INSERT => ['attribute1', 'attribute2'],\n     *     ActiveRecord::EVENT_BEFORE_UPDATE => 'attribute2',\n     * ]\n     * ```\n     *\/",54],["T_WHITESPACE","\n    ",66],["T_PUBLIC","public",67],["T_WHITESPACE"," ",67],["T_VARIABLE","$attributes",67],["T_WHITESPACE"," ",67],"=",["T_WHITESPACE"," ",67],"[","]",";",["T_WHITESPACE","\n    ",67],["T_DOC_COMMENT","\/**\n     * @var mixed the value that will be assigned to the current attributes. This can be an anonymous function,\n     * callable in array format (e.g. `[$this, 'methodName']`), an [[\\yii\\db\\Expression|Expression]] object representing a DB expression\n     * (e.g. `new Expression('NOW()')`), scalar, string or an arbitrary value. If the former, the return value of the\n     * function will be assigned to the attributes.\n     * The signature of the function should be as follows,\n     *\n     * ```php\n     * function ($event)\n     * {\n     *     \/\/ return value will be assigned to the attribute\n     * }\n     * ```\n     *\/",68],["T_WHITESPACE","\n    ",81],["T_PUBLIC","public",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$value",82],";",["T_WHITESPACE","\n    ",82],["T_DOC_COMMENT","\/**\n     * @var bool whether to skip this behavior when the `$owner` has not been\n     * modified\n     * @since 2.0.8\n     *\/",83],["T_WHITESPACE","\n    ",87],["T_PUBLIC","public",88],["T_WHITESPACE"," ",88],["T_VARIABLE","$skipUpdateOnClean",88],["T_WHITESPACE"," ",88],"=",["T_WHITESPACE"," ",88],["T_STRING","true",88],";",["T_WHITESPACE","\n\n\n    ",88],["T_DOC_COMMENT","\/**\n     * @inheritdoc\n     *\/",91],["T_WHITESPACE","\n    ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","events",94],"(",")",["T_WHITESPACE","\n    ",94],"{",["T_WHITESPACE","\n        ",95],["T_RETURN","return",96],["T_WHITESPACE"," ",96],["T_STRING","array_fill_keys",96],"(",["T_WHITESPACE","\n            ",96],["T_STRING","array_keys",97],"(",["T_VARIABLE","$this",97],["T_OBJECT_OPERATOR","->",97],["T_STRING","attributes",97],")",",",["T_WHITESPACE","\n            ",97],["T_CONSTANT_ENCAPSED_STRING","'evaluateAttributes'",98],["T_WHITESPACE","\n        ",98],")",";",["T_WHITESPACE","\n    ",99],"}",["T_WHITESPACE","\n\n    ",100],["T_DOC_COMMENT","\/**\n     * Evaluates the attribute value and assigns it to the current attributes.\n     * @param Event $event\n     *\/",102],["T_WHITESPACE","\n    ",105],["T_PUBLIC","public",106],["T_WHITESPACE"," ",106],["T_FUNCTION","function",106],["T_WHITESPACE"," ",106],["T_STRING","evaluateAttributes",106],"(",["T_VARIABLE","$event",106],")",["T_WHITESPACE","\n    ",106],"{",["T_WHITESPACE","\n        ",107],["T_IF","if",108],["T_WHITESPACE"," ",108],"(",["T_VARIABLE","$this",108],["T_OBJECT_OPERATOR","->",108],["T_STRING","skipUpdateOnClean",108],["T_WHITESPACE","\n            ",108],["T_BOOLEAN_AND","&&",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$event",109],["T_OBJECT_OPERATOR","->",109],["T_STRING","name",109],["T_WHITESPACE"," ",109],["T_IS_EQUAL","==",109],["T_WHITESPACE"," ",109],["T_STRING","ActiveRecord",109],["T_DOUBLE_COLON","::",109],["T_STRING","EVENT_BEFORE_UPDATE",109],["T_WHITESPACE","\n            ",109],["T_BOOLEAN_AND","&&",110],["T_WHITESPACE"," ",110],["T_EMPTY","empty",110],"(",["T_VARIABLE","$this",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","owner",110],["T_OBJECT_OPERATOR","->",110],["T_STRING","dirtyAttributes",110],")",["T_WHITESPACE","\n        ",110],")",["T_WHITESPACE"," ",111],"{",["T_WHITESPACE","\n            ",111],["T_RETURN","return",112],";",["T_WHITESPACE","\n        ",112],"}",["T_WHITESPACE","\n\n        ",113],["T_IF","if",115],["T_WHITESPACE"," ",115],"(","!",["T_EMPTY","empty",115],"(",["T_VARIABLE","$this",115],["T_OBJECT_OPERATOR","->",115],["T_STRING","attributes",115],"[",["T_VARIABLE","$event",115],["T_OBJECT_OPERATOR","->",115],["T_STRING","name",115],"]",")",")",["T_WHITESPACE"," ",115],"{",["T_WHITESPACE","\n            ",115],["T_VARIABLE","$attributes",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],["T_ARRAY_CAST","(array)",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$this",116],["T_OBJECT_OPERATOR","->",116],["T_STRING","attributes",116],"[",["T_VARIABLE","$event",116],["T_OBJECT_OPERATOR","->",116],["T_STRING","name",116],"]",";",["T_WHITESPACE","\n            ",116],["T_VARIABLE","$value",117],["T_WHITESPACE"," ",117],"=",["T_WHITESPACE"," ",117],["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","getValue",117],"(",["T_VARIABLE","$event",117],")",";",["T_WHITESPACE","\n            ",117],["T_FOREACH","foreach",118],["T_WHITESPACE"," ",118],"(",["T_VARIABLE","$attributes",118],["T_WHITESPACE"," ",118],["T_AS","as",118],["T_WHITESPACE"," ",118],["T_VARIABLE","$attribute",118],")",["T_WHITESPACE"," ",118],"{",["T_WHITESPACE","\n                ",118],["T_COMMENT","\/\/ ignore attribute names which are not string (e.g. when set by TimestampBehavior::updatedAtAttribute)\n",119],["T_WHITESPACE","                ",120],["T_IF","if",120],["T_WHITESPACE"," ",120],"(",["T_STRING","is_string",120],"(",["T_VARIABLE","$attribute",120],")",")",["T_WHITESPACE"," ",120],"{",["T_WHITESPACE","\n                    ",120],["T_VARIABLE","$this",121],["T_OBJECT_OPERATOR","->",121],["T_STRING","owner",121],["T_OBJECT_OPERATOR","->",121],["T_VARIABLE","$attribute",121],["T_WHITESPACE"," ",121],"=",["T_WHITESPACE"," ",121],["T_VARIABLE","$value",121],";",["T_WHITESPACE","\n                ",121],"}",["T_WHITESPACE","\n            ",122],"}",["T_WHITESPACE","\n        ",123],"}",["T_WHITESPACE","\n    ",124],"}",["T_WHITESPACE","\n\n    ",125],["T_DOC_COMMENT","\/**\n     * Returns the value for the current attributes.\n     * This method is called by [[evaluateAttributes()]]. Its return value will be assigned\n     * to the attributes corresponding to the triggering event.\n     * @param Event $event the event that triggers the current attribute updating.\n     * @return mixed the attribute value\n     *\/",127],["T_WHITESPACE","\n    ",133],["T_PROTECTED","protected",134],["T_WHITESPACE"," ",134],["T_FUNCTION","function",134],["T_WHITESPACE"," ",134],["T_STRING","getValue",134],"(",["T_VARIABLE","$event",134],")",["T_WHITESPACE","\n    ",134],"{",["T_WHITESPACE","\n        ",135],["T_IF","if",136],["T_WHITESPACE"," ",136],"(",["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","value",136],["T_WHITESPACE"," ",136],["T_INSTANCEOF","instanceof",136],["T_WHITESPACE"," ",136],["T_STRING","Closure",136],["T_WHITESPACE"," ",136],["T_BOOLEAN_OR","||",136],["T_WHITESPACE"," ",136],["T_STRING","is_array",136],"(",["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","value",136],")",["T_WHITESPACE"," ",136],["T_BOOLEAN_AND","&&",136],["T_WHITESPACE"," ",136],["T_STRING","is_callable",136],"(",["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","value",136],")",")",["T_WHITESPACE"," ",136],"{",["T_WHITESPACE","\n            ",136],["T_RETURN","return",137],["T_WHITESPACE"," ",137],["T_STRING","call_user_func",137],"(",["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","value",137],",",["T_WHITESPACE"," ",137],["T_VARIABLE","$event",137],")",";",["T_WHITESPACE","\n        ",137],"}",["T_WHITESPACE","\n\n        ",138],["T_RETURN","return",140],["T_WHITESPACE"," ",140],["T_VARIABLE","$this",140],["T_OBJECT_OPERATOR","->",140],["T_STRING","value",140],";",["T_WHITESPACE","\n    ",140],"}",["T_WHITESPACE","\n",141],"}",["T_WHITESPACE","\n",142]]