[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","web",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * IdentityInterface is the interface that should be implemented by a class providing identity information.\n *\n * This interface can typically be implemented by a user model class. For example, the following\n * code shows how to implement this interface by a User ActiveRecord class:\n *\n * ```php\n * class User extends ActiveRecord implements IdentityInterface\n * {\n *     public static function findIdentity($id)\n *     {\n *         return static::findOne($id);\n *     }\n *\n *     public static function findIdentityByAccessToken($token, $type = null)\n *     {\n *         return static::findOne(['access_token' => $token]);\n *     }\n *\n *     public function getId()\n *     {\n *         return $this->id;\n *     }\n *\n *     public function getAuthKey()\n *     {\n *         return $this->authKey;\n *     }\n *\n *     public function validateAuthKey($authKey)\n *     {\n *         return $this->authKey === $authKey;\n *     }\n * }\n * ```\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",48],["T_INTERFACE","interface",49],["T_WHITESPACE"," ",49],["T_STRING","IdentityInterface",49],["T_WHITESPACE","\n",49],"{",["T_WHITESPACE","\n    ",50],["T_DOC_COMMENT","\/**\n     * Finds an identity by the given ID.\n     * @param string|int $id the ID to be looked for\n     * @return IdentityInterface the identity object that matches the given ID.\n     * Null should be returned if such an identity cannot be found\n     * or the identity is not in an active state (disabled, deleted, etc.)\n     *\/",51],["T_WHITESPACE","\n    ",57],["T_PUBLIC","public",58],["T_WHITESPACE"," ",58],["T_STATIC","static",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","findIdentity",58],"(",["T_VARIABLE","$id",58],")",";",["T_WHITESPACE","\n\n    ",58],["T_DOC_COMMENT","\/**\n     * Finds an identity by the given token.\n     * @param mixed $token the token to be looked for\n     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.\n     * For example, [[\\yii\\filters\\auth\\HttpBearerAuth]] will set this parameter to be `yii\\filters\\auth\\HttpBearerAuth`.\n     * @return IdentityInterface the identity object that matches the given token.\n     * Null should be returned if such an identity cannot be found\n     * or the identity is not in an active state (disabled, deleted, etc.)\n     *\/",60],["T_WHITESPACE","\n    ",68],["T_PUBLIC","public",69],["T_WHITESPACE"," ",69],["T_STATIC","static",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","findIdentityByAccessToken",69],"(",["T_VARIABLE","$token",69],",",["T_WHITESPACE"," ",69],["T_VARIABLE","$type",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_STRING","null",69],")",";",["T_WHITESPACE","\n\n    ",69],["T_DOC_COMMENT","\/**\n     * Returns an ID that can uniquely identify a user identity.\n     * @return string|int an ID that uniquely identifies a user identity.\n     *\/",71],["T_WHITESPACE","\n    ",74],["T_PUBLIC","public",75],["T_WHITESPACE"," ",75],["T_FUNCTION","function",75],["T_WHITESPACE"," ",75],["T_STRING","getId",75],"(",")",";",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Returns a key that can be used to check the validity of a given identity ID.\n     *\n     * The key should be unique for each individual user, and should be persistent\n     * so that it can be used to check the validity of the user identity.\n     *\n     * The space of such keys should be big enough to defeat potential identity attacks.\n     *\n     * This is required if [[User::enableAutoLogin]] is enabled.\n     * @return string a key that is used to check the validity of a given identity ID.\n     * @see validateAuthKey()\n     *\/",77],["T_WHITESPACE","\n    ",88],["T_PUBLIC","public",89],["T_WHITESPACE"," ",89],["T_FUNCTION","function",89],["T_WHITESPACE"," ",89],["T_STRING","getAuthKey",89],"(",")",";",["T_WHITESPACE","\n\n    ",89],["T_DOC_COMMENT","\/**\n     * Validates the given auth key.\n     *\n     * This is required if [[User::enableAutoLogin]] is enabled.\n     * @param string $authKey the given auth key\n     * @return bool whether the given auth key is valid.\n     * @see getAuthKey()\n     *\/",91],["T_WHITESPACE","\n    ",98],["T_PUBLIC","public",99],["T_WHITESPACE"," ",99],["T_FUNCTION","function",99],["T_WHITESPACE"," ",99],["T_STRING","validateAuthKey",99],"(",["T_VARIABLE","$authKey",99],")",";",["T_WHITESPACE","\n",99],"}",["T_WHITESPACE","\n",100]]