[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","mutex",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","yii",11],["T_NS_SEPARATOR","\\",11],["T_STRING","base",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Component",11],";",["T_WHITESPACE","\n\n",11],["T_DOC_COMMENT","\/**\n * The Mutex component allows mutual execution of concurrent processes in order to prevent \"race conditions\".\n * This is achieved by using a \"lock\" mechanism. Each possibly concurrent thread cooperates by acquiring\n * a lock before accessing the corresponding data.\n *\n * Usage example:\n *\n * ```\n * if ($mutex->acquire($mutexName)) {\n *     \/\/ business logic execution\n * } else {\n *     \/\/ execution is blocked!\n * }\n * ```\n *\n * This is a base class, which should be extended in order to implement the actual lock mechanism.\n *\n * @author resurtm <resurtm@gmail.com>\n * @since 2.0\n *\/",13],["T_WHITESPACE","\n",32],["T_ABSTRACT","abstract",33],["T_WHITESPACE"," ",33],["T_CLASS","class",33],["T_WHITESPACE"," ",33],["T_STRING","Mutex",33],["T_WHITESPACE"," ",33],["T_EXTENDS","extends",33],["T_WHITESPACE"," ",33],["T_STRING","Component",33],["T_WHITESPACE","\n",33],"{",["T_WHITESPACE","\n    ",34],["T_DOC_COMMENT","\/**\n     * @var bool whether all locks acquired in this process (i.e. local locks) must be released automatically\n     * before finishing script execution. Defaults to true. Setting this property to true means that all locks\n     * acquired in this process must be released (regardless of errors or exceptions).\n     *\/",35],["T_WHITESPACE","\n    ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_VARIABLE","$autoRelease",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_STRING","true",40],";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * @var string[] names of the locks acquired by the current PHP process.\n     *\/",42],["T_WHITESPACE","\n    ",44],["T_PRIVATE","private",45],["T_WHITESPACE"," ",45],["T_VARIABLE","$_locks",45],["T_WHITESPACE"," ",45],"=",["T_WHITESPACE"," ",45],"[","]",";",["T_WHITESPACE","\n\n\n    ",45],["T_DOC_COMMENT","\/**\n     * Initializes the Mutex component.\n     *\/",48],["T_WHITESPACE","\n    ",50],["T_PUBLIC","public",51],["T_WHITESPACE"," ",51],["T_FUNCTION","function",51],["T_WHITESPACE"," ",51],["T_STRING","init",51],"(",")",["T_WHITESPACE","\n    ",51],"{",["T_WHITESPACE","\n        ",52],["T_IF","if",53],["T_WHITESPACE"," ",53],"(",["T_VARIABLE","$this",53],["T_OBJECT_OPERATOR","->",53],["T_STRING","autoRelease",53],")",["T_WHITESPACE"," ",53],"{",["T_WHITESPACE","\n            ",53],["T_VARIABLE","$locks",54],["T_WHITESPACE"," ",54],"=",["T_WHITESPACE"," ",54],"&",["T_VARIABLE","$this",54],["T_OBJECT_OPERATOR","->",54],["T_STRING","_locks",54],";",["T_WHITESPACE","\n            ",54],["T_STRING","register_shutdown_function",55],"(",["T_FUNCTION","function",55],["T_WHITESPACE"," ",55],"(",")",["T_WHITESPACE"," ",55],["T_USE","use",55],["T_WHITESPACE"," ",55],"(","&",["T_VARIABLE","$locks",55],")",["T_WHITESPACE"," ",55],"{",["T_WHITESPACE","\n                ",55],["T_FOREACH","foreach",56],["T_WHITESPACE"," ",56],"(",["T_VARIABLE","$locks",56],["T_WHITESPACE"," ",56],["T_AS","as",56],["T_WHITESPACE"," ",56],["T_VARIABLE","$lock",56],")",["T_WHITESPACE"," ",56],"{",["T_WHITESPACE","\n                    ",56],["T_VARIABLE","$this",57],["T_OBJECT_OPERATOR","->",57],["T_STRING","release",57],"(",["T_VARIABLE","$lock",57],")",";",["T_WHITESPACE","\n                ",57],"}",["T_WHITESPACE","\n            ",58],"}",")",";",["T_WHITESPACE","\n        ",59],"}",["T_WHITESPACE","\n    ",60],"}",["T_WHITESPACE","\n\n    ",61],["T_DOC_COMMENT","\/**\n     * Acquires a lock by name.\n     * @param string $name of the lock to be acquired. Must be unique.\n     * @param int $timeout time to wait for lock to be released. Defaults to zero meaning that method will return\n     * false immediately in case lock was already acquired.\n     * @return bool lock acquiring result.\n     *\/",63],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","acquire",70],"(",["T_VARIABLE","$name",70],",",["T_WHITESPACE"," ",70],["T_VARIABLE","$timeout",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_LNUMBER","0",70],")",["T_WHITESPACE","\n    ",70],"{",["T_WHITESPACE","\n        ",71],["T_IF","if",72],["T_WHITESPACE"," ",72],"(",["T_VARIABLE","$this",72],["T_OBJECT_OPERATOR","->",72],["T_STRING","acquireLock",72],"(",["T_VARIABLE","$name",72],",",["T_WHITESPACE"," ",72],["T_VARIABLE","$timeout",72],")",")",["T_WHITESPACE"," ",72],"{",["T_WHITESPACE","\n            ",72],["T_VARIABLE","$this",73],["T_OBJECT_OPERATOR","->",73],["T_STRING","_locks",73],"[","]",["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_VARIABLE","$name",73],";",["T_WHITESPACE","\n\n            ",73],["T_RETURN","return",75],["T_WHITESPACE"," ",75],["T_STRING","true",75],";",["T_WHITESPACE","\n        ",75],"}",["T_WHITESPACE"," ",76],["T_ELSE","else",76],["T_WHITESPACE"," ",76],"{",["T_WHITESPACE","\n            ",76],["T_RETURN","return",77],["T_WHITESPACE"," ",77],["T_STRING","false",77],";",["T_WHITESPACE","\n        ",77],"}",["T_WHITESPACE","\n    ",78],"}",["T_WHITESPACE","\n\n    ",79],["T_DOC_COMMENT","\/**\n     * Releases acquired lock. This method will return false in case the lock was not found.\n     * @param string $name of the lock to be released. This lock must already exist.\n     * @return bool lock release result: false in case named lock was not found..\n     *\/",81],["T_WHITESPACE","\n    ",85],["T_PUBLIC","public",86],["T_WHITESPACE"," ",86],["T_FUNCTION","function",86],["T_WHITESPACE"," ",86],["T_STRING","release",86],"(",["T_VARIABLE","$name",86],")",["T_WHITESPACE","\n    ",86],"{",["T_WHITESPACE","\n        ",87],["T_IF","if",88],["T_WHITESPACE"," ",88],"(",["T_VARIABLE","$this",88],["T_OBJECT_OPERATOR","->",88],["T_STRING","releaseLock",88],"(",["T_VARIABLE","$name",88],")",")",["T_WHITESPACE"," ",88],"{",["T_WHITESPACE","\n            ",88],["T_VARIABLE","$index",89],["T_WHITESPACE"," ",89],"=",["T_WHITESPACE"," ",89],["T_STRING","array_search",89],"(",["T_VARIABLE","$name",89],",",["T_WHITESPACE"," ",89],["T_VARIABLE","$this",89],["T_OBJECT_OPERATOR","->",89],["T_STRING","_locks",89],")",";",["T_WHITESPACE","\n            ",89],["T_IF","if",90],["T_WHITESPACE"," ",90],"(",["T_VARIABLE","$index",90],["T_WHITESPACE"," ",90],["T_IS_NOT_IDENTICAL","!==",90],["T_WHITESPACE"," ",90],["T_STRING","false",90],")",["T_WHITESPACE"," ",90],"{",["T_WHITESPACE","\n                ",90],["T_UNSET","unset",91],"(",["T_VARIABLE","$this",91],["T_OBJECT_OPERATOR","->",91],["T_STRING","_locks",91],"[",["T_VARIABLE","$index",91],"]",")",";",["T_WHITESPACE","\n            ",91],"}",["T_WHITESPACE","\n\n            ",92],["T_RETURN","return",94],["T_WHITESPACE"," ",94],["T_STRING","true",94],";",["T_WHITESPACE","\n        ",94],"}",["T_WHITESPACE"," ",95],["T_ELSE","else",95],["T_WHITESPACE"," ",95],"{",["T_WHITESPACE","\n            ",95],["T_RETURN","return",96],["T_WHITESPACE"," ",96],["T_STRING","false",96],";",["T_WHITESPACE","\n        ",96],"}",["T_WHITESPACE","\n    ",97],"}",["T_WHITESPACE","\n\n    ",98],["T_DOC_COMMENT","\/**\n     * This method should be extended by a concrete Mutex implementations. Acquires lock by name.\n     * @param string $name of the lock to be acquired.\n     * @param int $timeout time to wait for the lock to be released.\n     * @return bool acquiring result.\n     *\/",100],["T_WHITESPACE","\n    ",105],["T_ABSTRACT","abstract",106],["T_WHITESPACE"," ",106],["T_PROTECTED","protected",106],["T_WHITESPACE"," ",106],["T_FUNCTION","function",106],["T_WHITESPACE"," ",106],["T_STRING","acquireLock",106],"(",["T_VARIABLE","$name",106],",",["T_WHITESPACE"," ",106],["T_VARIABLE","$timeout",106],["T_WHITESPACE"," ",106],"=",["T_WHITESPACE"," ",106],["T_LNUMBER","0",106],")",";",["T_WHITESPACE","\n\n    ",106],["T_DOC_COMMENT","\/**\n     * This method should be extended by a concrete Mutex implementations. Releases lock by given name.\n     * @param string $name of the lock to be released.\n     * @return bool release result.\n     *\/",108],["T_WHITESPACE","\n    ",112],["T_ABSTRACT","abstract",113],["T_WHITESPACE"," ",113],["T_PROTECTED","protected",113],["T_WHITESPACE"," ",113],["T_FUNCTION","function",113],["T_WHITESPACE"," ",113],["T_STRING","releaseLock",113],"(",["T_VARIABLE","$name",113],")",";",["T_WHITESPACE","\n",113],"}",["T_WHITESPACE","\n",114]]