[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","caching",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * XCache provides XCache caching in terms of an application component.\n *\n * To use this application component, the [XCache PHP extension](http:\/\/xcache.lighttpd.net\/) must be loaded.\n * Also note that the [[flush()]] functionality will work correctly only if \"xcache.admin.enable_auth\"\n * is set to \"Off\" in php.ini.\n *\n * See [[Cache]] for common cache operations that XCache supports.\n *\n * For more details and usage information on Cache, see the [guide article on caching](guide:caching-overview).\n * \n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",23],["T_CLASS","class",24],["T_WHITESPACE"," ",24],["T_STRING","XCache",24],["T_WHITESPACE"," ",24],["T_EXTENDS","extends",24],["T_WHITESPACE"," ",24],["T_STRING","Cache",24],["T_WHITESPACE","\n",24],"{",["T_WHITESPACE","\n    ",25],["T_DOC_COMMENT","\/**\n     * Checks whether a specified key exists in the cache.\n     * This can be faster than getting the value from the cache if the data is big.\n     * Note that this method does not check whether the dependency associated\n     * with the cached data, if there is any, has changed. So a call to [[get]]\n     * may return false while exists returns true.\n     * @param mixed $key a key identifying the cached value. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @return bool true if a value exists in cache, false if the value is not in the cache or expired.\n     *\/",26],["T_WHITESPACE","\n    ",35],["T_PUBLIC","public",36],["T_WHITESPACE"," ",36],["T_FUNCTION","function",36],["T_WHITESPACE"," ",36],["T_STRING","exists",36],"(",["T_VARIABLE","$key",36],")",["T_WHITESPACE","\n    ",36],"{",["T_WHITESPACE","\n        ",37],["T_VARIABLE","$key",38],["T_WHITESPACE"," ",38],"=",["T_WHITESPACE"," ",38],["T_VARIABLE","$this",38],["T_OBJECT_OPERATOR","->",38],["T_STRING","buildKey",38],"(",["T_VARIABLE","$key",38],")",";",["T_WHITESPACE","\n\n        ",38],["T_RETURN","return",40],["T_WHITESPACE"," ",40],["T_STRING","xcache_isset",40],"(",["T_VARIABLE","$key",40],")",";",["T_WHITESPACE","\n    ",40],"}",["T_WHITESPACE","\n\n    ",41],["T_DOC_COMMENT","\/**\n     * Retrieves a value from cache with a specified key.\n     * This is the implementation of the method declared in the parent class.\n     * @param string $key a unique key identifying the cached value\n     * @return mixed|false the value stored in cache, false if the value is not in the cache or expired.\n     *\/",43],["T_WHITESPACE","\n    ",48],["T_PROTECTED","protected",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","getValue",49],"(",["T_VARIABLE","$key",49],")",["T_WHITESPACE","\n    ",49],"{",["T_WHITESPACE","\n        ",50],["T_RETURN","return",51],["T_WHITESPACE"," ",51],["T_STRING","xcache_isset",51],"(",["T_VARIABLE","$key",51],")",["T_WHITESPACE"," ",51],"?",["T_WHITESPACE"," ",51],["T_STRING","xcache_get",51],"(",["T_VARIABLE","$key",51],")",["T_WHITESPACE"," ",51],":",["T_WHITESPACE"," ",51],["T_STRING","false",51],";",["T_WHITESPACE","\n    ",51],"}",["T_WHITESPACE","\n\n    ",52],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key in cache.\n     * This is the implementation of the method declared in the parent class.\n     *\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],\n     * it could be something else.\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",54],["T_WHITESPACE","\n    ",63],["T_PROTECTED","protected",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","setValue",64],"(",["T_VARIABLE","$key",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$value",64],",",["T_WHITESPACE"," ",64],["T_VARIABLE","$duration",64],")",["T_WHITESPACE","\n    ",64],"{",["T_WHITESPACE","\n        ",65],["T_RETURN","return",66],["T_WHITESPACE"," ",66],["T_STRING","xcache_set",66],"(",["T_VARIABLE","$key",66],",",["T_WHITESPACE"," ",66],["T_VARIABLE","$value",66],",",["T_WHITESPACE"," ",66],["T_VARIABLE","$duration",66],")",";",["T_WHITESPACE","\n    ",66],"}",["T_WHITESPACE","\n\n    ",67],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key into cache if the cache does not contain this key.\n     * This is the implementation of the method declared in the parent class.\n     *\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],\n     * it could be something else.\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",69],["T_WHITESPACE","\n    ",78],["T_PROTECTED","protected",79],["T_WHITESPACE"," ",79],["T_FUNCTION","function",79],["T_WHITESPACE"," ",79],["T_STRING","addValue",79],"(",["T_VARIABLE","$key",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$value",79],",",["T_WHITESPACE"," ",79],["T_VARIABLE","$duration",79],")",["T_WHITESPACE","\n    ",79],"{",["T_WHITESPACE","\n        ",80],["T_RETURN","return",81],["T_WHITESPACE"," ",81],"!",["T_STRING","xcache_isset",81],"(",["T_VARIABLE","$key",81],")",["T_WHITESPACE"," ",81],"?",["T_WHITESPACE"," ",81],["T_VARIABLE","$this",81],["T_OBJECT_OPERATOR","->",81],["T_STRING","setValue",81],"(",["T_VARIABLE","$key",81],",",["T_WHITESPACE"," ",81],["T_VARIABLE","$value",81],",",["T_WHITESPACE"," ",81],["T_VARIABLE","$duration",81],")",["T_WHITESPACE"," ",81],":",["T_WHITESPACE"," ",81],["T_STRING","false",81],";",["T_WHITESPACE","\n    ",81],"}",["T_WHITESPACE","\n\n    ",82],["T_DOC_COMMENT","\/**\n     * Deletes a value with the specified key from cache\n     * This is the implementation of the method declared in the parent class.\n     * @param string $key the key of the value to be deleted\n     * @return bool if no error happens during deletion\n     *\/",84],["T_WHITESPACE","\n    ",89],["T_PROTECTED","protected",90],["T_WHITESPACE"," ",90],["T_FUNCTION","function",90],["T_WHITESPACE"," ",90],["T_STRING","deleteValue",90],"(",["T_VARIABLE","$key",90],")",["T_WHITESPACE","\n    ",90],"{",["T_WHITESPACE","\n        ",91],["T_RETURN","return",92],["T_WHITESPACE"," ",92],["T_STRING","xcache_unset",92],"(",["T_VARIABLE","$key",92],")",";",["T_WHITESPACE","\n    ",92],"}",["T_WHITESPACE","\n\n    ",93],["T_DOC_COMMENT","\/**\n     * Deletes all values from cache.\n     * This is the implementation of the method declared in the parent class.\n     * @return bool whether the flush operation was successful.\n     *\/",95],["T_WHITESPACE","\n    ",99],["T_PROTECTED","protected",100],["T_WHITESPACE"," ",100],["T_FUNCTION","function",100],["T_WHITESPACE"," ",100],["T_STRING","flushValues",100],"(",")",["T_WHITESPACE","\n    ",100],"{",["T_WHITESPACE","\n        ",101],["T_FOR","for",102],["T_WHITESPACE"," ",102],"(",["T_VARIABLE","$i",102],["T_WHITESPACE"," ",102],"=",["T_WHITESPACE"," ",102],["T_LNUMBER","0",102],",",["T_WHITESPACE"," ",102],["T_VARIABLE","$max",102],["T_WHITESPACE"," ",102],"=",["T_WHITESPACE"," ",102],["T_STRING","xcache_count",102],"(",["T_STRING","XC_TYPE_VAR",102],")",";",["T_WHITESPACE"," ",102],["T_VARIABLE","$i",102],["T_WHITESPACE"," ",102],"<",["T_WHITESPACE"," ",102],["T_VARIABLE","$max",102],";",["T_WHITESPACE"," ",102],["T_VARIABLE","$i",102],["T_INC","++",102],")",["T_WHITESPACE"," ",102],"{",["T_WHITESPACE","\n            ",102],["T_IF","if",103],["T_WHITESPACE"," ",103],"(",["T_STRING","xcache_clear_cache",103],"(",["T_STRING","XC_TYPE_VAR",103],",",["T_WHITESPACE"," ",103],["T_VARIABLE","$i",103],")",["T_WHITESPACE"," ",103],["T_IS_IDENTICAL","===",103],["T_WHITESPACE"," ",103],["T_STRING","false",103],")",["T_WHITESPACE"," ",103],"{",["T_WHITESPACE","\n                ",103],["T_RETURN","return",104],["T_WHITESPACE"," ",104],["T_STRING","false",104],";",["T_WHITESPACE","\n            ",104],"}",["T_WHITESPACE","\n        ",105],"}",["T_WHITESPACE","\n\n        ",106],["T_RETURN","return",108],["T_WHITESPACE"," ",108],["T_STRING","true",108],";",["T_WHITESPACE","\n    ",108],"}",["T_WHITESPACE","\n",109],"}",["T_WHITESPACE","\n",110]]