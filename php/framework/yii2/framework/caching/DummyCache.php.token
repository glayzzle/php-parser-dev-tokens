[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","caching",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * DummyCache is a placeholder cache component.\n *\n * DummyCache does not cache anything. It is provided so that one can always configure\n * a 'cache' application component and save the check of existence of `\\Yii::$app->cache`.\n * By replacing DummyCache with some other cache component, one can quickly switch from\n * non-caching mode to caching mode.\n *\n * For more details and usage information on Cache, see the [guide article on caching](guide:caching-overview).\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",22],["T_CLASS","class",23],["T_WHITESPACE"," ",23],["T_STRING","DummyCache",23],["T_WHITESPACE"," ",23],["T_EXTENDS","extends",23],["T_WHITESPACE"," ",23],["T_STRING","Cache",23],["T_WHITESPACE","\n",23],"{",["T_WHITESPACE","\n    ",24],["T_DOC_COMMENT","\/**\n     * Retrieves a value from cache with a specified key.\n     * This is the implementation of the method declared in the parent class.\n     * @param string $key a unique key identifying the cached value\n     * @return mixed|false the value stored in cache, false if the value is not in the cache or expired.\n     *\/",25],["T_WHITESPACE","\n    ",30],["T_PROTECTED","protected",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","getValue",31],"(",["T_VARIABLE","$key",31],")",["T_WHITESPACE","\n    ",31],"{",["T_WHITESPACE","\n        ",32],["T_RETURN","return",33],["T_WHITESPACE"," ",33],["T_STRING","false",33],";",["T_WHITESPACE","\n    ",33],"}",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key in cache.\n     * This is the implementation of the method declared in the parent class.\n     *\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",36],["T_WHITESPACE","\n    ",44],["T_PROTECTED","protected",45],["T_WHITESPACE"," ",45],["T_FUNCTION","function",45],["T_WHITESPACE"," ",45],["T_STRING","setValue",45],"(",["T_VARIABLE","$key",45],",",["T_WHITESPACE"," ",45],["T_VARIABLE","$value",45],",",["T_WHITESPACE"," ",45],["T_VARIABLE","$duration",45],")",["T_WHITESPACE","\n    ",45],"{",["T_WHITESPACE","\n        ",46],["T_RETURN","return",47],["T_WHITESPACE"," ",47],["T_STRING","true",47],";",["T_WHITESPACE","\n    ",47],"}",["T_WHITESPACE","\n\n    ",48],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key into cache if the cache does not contain this key.\n     * This is the implementation of the method declared in the parent class.\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",50],["T_WHITESPACE","\n    ",57],["T_PROTECTED","protected",58],["T_WHITESPACE"," ",58],["T_FUNCTION","function",58],["T_WHITESPACE"," ",58],["T_STRING","addValue",58],"(",["T_VARIABLE","$key",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$value",58],",",["T_WHITESPACE"," ",58],["T_VARIABLE","$duration",58],")",["T_WHITESPACE","\n    ",58],"{",["T_WHITESPACE","\n        ",59],["T_RETURN","return",60],["T_WHITESPACE"," ",60],["T_STRING","true",60],";",["T_WHITESPACE","\n    ",60],"}",["T_WHITESPACE","\n\n    ",61],["T_DOC_COMMENT","\/**\n     * Deletes a value with the specified key from cache\n     * This is the implementation of the method declared in the parent class.\n     * @param string $key the key of the value to be deleted\n     * @return bool if no error happens during deletion\n     *\/",63],["T_WHITESPACE","\n    ",68],["T_PROTECTED","protected",69],["T_WHITESPACE"," ",69],["T_FUNCTION","function",69],["T_WHITESPACE"," ",69],["T_STRING","deleteValue",69],"(",["T_VARIABLE","$key",69],")",["T_WHITESPACE","\n    ",69],"{",["T_WHITESPACE","\n        ",70],["T_RETURN","return",71],["T_WHITESPACE"," ",71],["T_STRING","true",71],";",["T_WHITESPACE","\n    ",71],"}",["T_WHITESPACE","\n\n    ",72],["T_DOC_COMMENT","\/**\n     * Deletes all values from cache.\n     * This is the implementation of the method declared in the parent class.\n     * @return bool whether the flush operation was successful.\n     *\/",74],["T_WHITESPACE","\n    ",78],["T_PROTECTED","protected",79],["T_WHITESPACE"," ",79],["T_FUNCTION","function",79],["T_WHITESPACE"," ",79],["T_STRING","flushValues",79],"(",")",["T_WHITESPACE","\n    ",79],"{",["T_WHITESPACE","\n        ",80],["T_RETURN","return",81],["T_WHITESPACE"," ",81],["T_STRING","true",81],";",["T_WHITESPACE","\n    ",81],"}",["T_WHITESPACE","\n",82],"}",["T_WHITESPACE","\n",83]]