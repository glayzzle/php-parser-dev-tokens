[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","caching",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","yii",11],["T_NS_SEPARATOR","\\",11],["T_STRING","base",11],["T_NS_SEPARATOR","\\",11],["T_STRING","Component",11],";",["T_WHITESPACE","\n",11],["T_USE","use",12],["T_WHITESPACE"," ",12],["T_STRING","yii",12],["T_NS_SEPARATOR","\\",12],["T_STRING","helpers",12],["T_NS_SEPARATOR","\\",12],["T_STRING","StringHelper",12],";",["T_WHITESPACE","\n\n",12],["T_DOC_COMMENT","\/**\n * Cache is the base class for cache classes supporting different cache storage implementations.\n *\n * A data item can be stored in the cache by calling [[set()]] and be retrieved back\n * later (in the same or different request) by [[get()]]. In both operations,\n * a key identifying the data item is required. An expiration time and\/or a [[Dependency|dependency]]\n * can also be specified when calling [[set()]]. If the data item expires or the dependency\n * changes at the time of calling [[get()]], the cache will return no data.\n *\n * A typical usage pattern of cache is like the following:\n *\n * ```php\n * $key = 'demo';\n * $data = $cache->get($key);\n * if ($data === false) {\n *     \/\/ ...generate $data here...\n *     $cache->set($key, $data, $duration, $dependency);\n * }\n * ```\n *\n * Because Cache implements the [[\\ArrayAccess]] interface, it can be used like an array. For example,\n *\n * ```php\n * $cache['foo'] = 'some data';\n * echo $cache['foo'];\n * ```\n *\n * Derived classes should implement the following methods which do the actual cache storage operations:\n *\n * - [[getValue()]]: retrieve the value with a key (if any) from cache\n * - [[setValue()]]: store the value with a key into cache\n * - [[addValue()]]: store the value only if the cache does not have this key before\n * - [[deleteValue()]]: delete the value with the specified key from cache\n * - [[flushValues()]]: delete all values from cache\n *\n * For more details and usage information on Cache, see the [guide article on caching](guide:caching-overview).\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",14],["T_WHITESPACE","\n",53],["T_ABSTRACT","abstract",54],["T_WHITESPACE"," ",54],["T_CLASS","class",54],["T_WHITESPACE"," ",54],["T_STRING","Cache",54],["T_WHITESPACE"," ",54],["T_EXTENDS","extends",54],["T_WHITESPACE"," ",54],["T_STRING","Component",54],["T_WHITESPACE"," ",54],["T_IMPLEMENTS","implements",54],["T_WHITESPACE"," ",54],["T_NS_SEPARATOR","\\",54],["T_STRING","ArrayAccess",54],["T_WHITESPACE","\n",54],"{",["T_WHITESPACE","\n    ",55],["T_DOC_COMMENT","\/**\n     * @var string a string prefixed to every cache key so that it is unique globally in the whole cache storage.\n     * It is recommended that you set a unique cache key prefix for each application if the same cache\n     * storage is being used by different applications.\n     *\n     * To ensure interoperability, only alphanumeric characters should be used.\n     *\/",56],["T_WHITESPACE","\n    ",62],["T_PUBLIC","public",63],["T_WHITESPACE"," ",63],["T_VARIABLE","$keyPrefix",63],";",["T_WHITESPACE","\n    ",63],["T_DOC_COMMENT","\/**\n     * @var null|array|false the functions used to serialize and unserialize cached data. Defaults to null, meaning\n     * using the default PHP `serialize()` and `unserialize()` functions. If you want to use some more efficient\n     * serializer (e.g. [igbinary](http:\/\/pecl.php.net\/package\/igbinary)), you may configure this property with\n     * a two-element array. The first element specifies the serialization function, and the second the deserialization\n     * function. If this property is set false, data will be directly sent to and retrieved from the underlying\n     * cache component without any serialization or deserialization. You should not turn off serialization if\n     * you are using [[Dependency|cache dependency]], because it relies on data serialization. Also, some\n     * implementations of the cache can not correctly save and retrieve data different from a string type.\n     *\/",64],["T_WHITESPACE","\n    ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_VARIABLE","$serializer",74],";",["T_WHITESPACE","\n    ",74],["T_DOC_COMMENT","\/**\n     * @var integer default duration in seconds before a cache entry will expire. Default value is 0, meaning infinity.\n     * This value is used by [[set()]] if the duration is not explicitly given.\n     * @since 2.0.11\n     *\/",75],["T_WHITESPACE","\n    ",79],["T_PUBLIC","public",80],["T_WHITESPACE"," ",80],["T_VARIABLE","$defaultDuration",80],["T_WHITESPACE"," ",80],"=",["T_WHITESPACE"," ",80],["T_LNUMBER","0",80],";",["T_WHITESPACE","\n\n\n    ",80],["T_DOC_COMMENT","\/**\n     * Builds a normalized cache key from a given key.\n     *\n     * If the given key is a string containing alphanumeric characters only and no more than 32 characters,\n     * then the key will be returned back prefixed with [[keyPrefix]]. Otherwise, a normalized key\n     * is generated by serializing the given key, applying MD5 hashing, and prefixing with [[keyPrefix]].\n     *\n     * @param mixed $key the key to be normalized\n     * @return string the generated cache key\n     *\/",83],["T_WHITESPACE","\n    ",92],["T_PUBLIC","public",93],["T_WHITESPACE"," ",93],["T_FUNCTION","function",93],["T_WHITESPACE"," ",93],["T_STRING","buildKey",93],"(",["T_VARIABLE","$key",93],")",["T_WHITESPACE","\n    ",93],"{",["T_WHITESPACE","\n        ",94],["T_IF","if",95],["T_WHITESPACE"," ",95],"(",["T_STRING","is_string",95],"(",["T_VARIABLE","$key",95],")",")",["T_WHITESPACE"," ",95],"{",["T_WHITESPACE","\n            ",95],["T_VARIABLE","$key",96],["T_WHITESPACE"," ",96],"=",["T_WHITESPACE"," ",96],["T_STRING","ctype_alnum",96],"(",["T_VARIABLE","$key",96],")",["T_WHITESPACE"," ",96],["T_BOOLEAN_AND","&&",96],["T_WHITESPACE"," ",96],["T_STRING","StringHelper",96],["T_DOUBLE_COLON","::",96],["T_STRING","byteLength",96],"(",["T_VARIABLE","$key",96],")",["T_WHITESPACE"," ",96],["T_IS_SMALLER_OR_EQUAL","<=",96],["T_WHITESPACE"," ",96],["T_LNUMBER","32",96],["T_WHITESPACE"," ",96],"?",["T_WHITESPACE"," ",96],["T_VARIABLE","$key",96],["T_WHITESPACE"," ",96],":",["T_WHITESPACE"," ",96],["T_STRING","md5",96],"(",["T_VARIABLE","$key",96],")",";",["T_WHITESPACE","\n        ",96],"}",["T_WHITESPACE"," ",97],["T_ELSE","else",97],["T_WHITESPACE"," ",97],"{",["T_WHITESPACE","\n            ",97],["T_VARIABLE","$key",98],["T_WHITESPACE"," ",98],"=",["T_WHITESPACE"," ",98],["T_STRING","md5",98],"(",["T_STRING","json_encode",98],"(",["T_VARIABLE","$key",98],")",")",";",["T_WHITESPACE","\n        ",98],"}",["T_WHITESPACE","\n\n        ",99],["T_RETURN","return",101],["T_WHITESPACE"," ",101],["T_VARIABLE","$this",101],["T_OBJECT_OPERATOR","->",101],["T_STRING","keyPrefix",101],["T_WHITESPACE"," ",101],".",["T_WHITESPACE"," ",101],["T_VARIABLE","$key",101],";",["T_WHITESPACE","\n    ",101],"}",["T_WHITESPACE","\n\n    ",102],["T_DOC_COMMENT","\/**\n     * Retrieves a value from cache with a specified key.\n     * @param mixed $key a key identifying the cached value. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @return mixed the value stored in cache, false if the value is not in the cache, expired,\n     * or the dependency associated with the cached data has changed.\n     *\/",104],["T_WHITESPACE","\n    ",110],["T_PUBLIC","public",111],["T_WHITESPACE"," ",111],["T_FUNCTION","function",111],["T_WHITESPACE"," ",111],["T_STRING","get",111],"(",["T_VARIABLE","$key",111],")",["T_WHITESPACE","\n    ",111],"{",["T_WHITESPACE","\n        ",112],["T_VARIABLE","$key",113],["T_WHITESPACE"," ",113],"=",["T_WHITESPACE"," ",113],["T_VARIABLE","$this",113],["T_OBJECT_OPERATOR","->",113],["T_STRING","buildKey",113],"(",["T_VARIABLE","$key",113],")",";",["T_WHITESPACE","\n        ",113],["T_VARIABLE","$value",114],["T_WHITESPACE"," ",114],"=",["T_WHITESPACE"," ",114],["T_VARIABLE","$this",114],["T_OBJECT_OPERATOR","->",114],["T_STRING","getValue",114],"(",["T_VARIABLE","$key",114],")",";",["T_WHITESPACE","\n        ",114],["T_IF","if",115],["T_WHITESPACE"," ",115],"(",["T_VARIABLE","$value",115],["T_WHITESPACE"," ",115],["T_IS_IDENTICAL","===",115],["T_WHITESPACE"," ",115],["T_STRING","false",115],["T_WHITESPACE"," ",115],["T_BOOLEAN_OR","||",115],["T_WHITESPACE"," ",115],["T_VARIABLE","$this",115],["T_OBJECT_OPERATOR","->",115],["T_STRING","serializer",115],["T_WHITESPACE"," ",115],["T_IS_IDENTICAL","===",115],["T_WHITESPACE"," ",115],["T_STRING","false",115],")",["T_WHITESPACE"," ",115],"{",["T_WHITESPACE","\n            ",115],["T_RETURN","return",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$value",116],";",["T_WHITESPACE","\n        ",116],"}",["T_WHITESPACE"," ",117],["T_ELSEIF","elseif",117],["T_WHITESPACE"," ",117],"(",["T_VARIABLE","$this",117],["T_OBJECT_OPERATOR","->",117],["T_STRING","serializer",117],["T_WHITESPACE"," ",117],["T_IS_IDENTICAL","===",117],["T_WHITESPACE"," ",117],["T_STRING","null",117],")",["T_WHITESPACE"," ",117],"{",["T_WHITESPACE","\n            ",117],["T_VARIABLE","$value",118],["T_WHITESPACE"," ",118],"=",["T_WHITESPACE"," ",118],["T_STRING","unserialize",118],"(",["T_VARIABLE","$value",118],")",";",["T_WHITESPACE","\n        ",118],"}",["T_WHITESPACE"," ",119],["T_ELSE","else",119],["T_WHITESPACE"," ",119],"{",["T_WHITESPACE","\n            ",119],["T_VARIABLE","$value",120],["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_STRING","call_user_func",120],"(",["T_VARIABLE","$this",120],["T_OBJECT_OPERATOR","->",120],["T_STRING","serializer",120],"[",["T_LNUMBER","1",120],"]",",",["T_WHITESPACE"," ",120],["T_VARIABLE","$value",120],")",";",["T_WHITESPACE","\n        ",120],"}",["T_WHITESPACE","\n        ",121],["T_IF","if",122],["T_WHITESPACE"," ",122],"(",["T_STRING","is_array",122],"(",["T_VARIABLE","$value",122],")",["T_WHITESPACE"," ",122],["T_BOOLEAN_AND","&&",122],["T_WHITESPACE"," ",122],"!","(",["T_VARIABLE","$value",122],"[",["T_LNUMBER","1",122],"]",["T_WHITESPACE"," ",122],["T_INSTANCEOF","instanceof",122],["T_WHITESPACE"," ",122],["T_STRING","Dependency",122],["T_WHITESPACE"," ",122],["T_BOOLEAN_AND","&&",122],["T_WHITESPACE"," ",122],["T_VARIABLE","$value",122],"[",["T_LNUMBER","1",122],"]",["T_OBJECT_OPERATOR","->",122],["T_STRING","isChanged",122],"(",["T_VARIABLE","$this",122],")",")",")",["T_WHITESPACE"," ",122],"{",["T_WHITESPACE","\n            ",122],["T_RETURN","return",123],["T_WHITESPACE"," ",123],["T_VARIABLE","$value",123],"[",["T_LNUMBER","0",123],"]",";",["T_WHITESPACE","\n        ",123],"}",["T_WHITESPACE"," ",124],["T_ELSE","else",124],["T_WHITESPACE"," ",124],"{",["T_WHITESPACE","\n            ",124],["T_RETURN","return",125],["T_WHITESPACE"," ",125],["T_STRING","false",125],";",["T_WHITESPACE","\n        ",125],"}",["T_WHITESPACE","\n    ",126],"}",["T_WHITESPACE","\n\n    ",127],["T_DOC_COMMENT","\/**\n     * Checks whether a specified key exists in the cache.\n     * This can be faster than getting the value from the cache if the data is big.\n     * In case a cache does not support this feature natively, this method will try to simulate it\n     * but has no performance improvement over getting it.\n     * Note that this method does not check whether the dependency associated\n     * with the cached data, if there is any, has changed. So a call to [[get]]\n     * may return false while exists returns true.\n     * @param mixed $key a key identifying the cached value. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @return bool true if a value exists in cache, false if the value is not in the cache or expired.\n     *\/",129],["T_WHITESPACE","\n    ",140],["T_PUBLIC","public",141],["T_WHITESPACE"," ",141],["T_FUNCTION","function",141],["T_WHITESPACE"," ",141],["T_STRING","exists",141],"(",["T_VARIABLE","$key",141],")",["T_WHITESPACE","\n    ",141],"{",["T_WHITESPACE","\n        ",142],["T_VARIABLE","$key",143],["T_WHITESPACE"," ",143],"=",["T_WHITESPACE"," ",143],["T_VARIABLE","$this",143],["T_OBJECT_OPERATOR","->",143],["T_STRING","buildKey",143],"(",["T_VARIABLE","$key",143],")",";",["T_WHITESPACE","\n        ",143],["T_VARIABLE","$value",144],["T_WHITESPACE"," ",144],"=",["T_WHITESPACE"," ",144],["T_VARIABLE","$this",144],["T_OBJECT_OPERATOR","->",144],["T_STRING","getValue",144],"(",["T_VARIABLE","$key",144],")",";",["T_WHITESPACE","\n\n        ",144],["T_RETURN","return",146],["T_WHITESPACE"," ",146],["T_VARIABLE","$value",146],["T_WHITESPACE"," ",146],["T_IS_NOT_IDENTICAL","!==",146],["T_WHITESPACE"," ",146],["T_STRING","false",146],";",["T_WHITESPACE","\n    ",146],"}",["T_WHITESPACE","\n\n    ",147],["T_DOC_COMMENT","\/**\n     * Retrieves multiple values from cache with the specified keys.\n     * Some caches (such as memcache, apc) allow retrieving multiple cached values at the same time,\n     * which may improve the performance. In case a cache does not support this feature natively,\n     * this method will try to simulate it.\n     *\n     * @param string[] $keys list of string keys identifying the cached values\n     * @return array list of cached values corresponding to the specified keys. The array\n     * is returned in terms of (key, value) pairs.\n     * If a value is not cached or expired, the corresponding array value will be false.\n     * @deprecated This method is an alias for [[multiGet()]] and will be removed in 2.1.0.\n     *\/",149],["T_WHITESPACE","\n    ",160],["T_PUBLIC","public",161],["T_WHITESPACE"," ",161],["T_FUNCTION","function",161],["T_WHITESPACE"," ",161],["T_STRING","mget",161],"(",["T_VARIABLE","$keys",161],")",["T_WHITESPACE","\n    ",161],"{",["T_WHITESPACE","\n        ",162],["T_RETURN","return",163],["T_WHITESPACE"," ",163],["T_VARIABLE","$this",163],["T_OBJECT_OPERATOR","->",163],["T_STRING","multiGet",163],"(",["T_VARIABLE","$keys",163],")",";",["T_WHITESPACE","\n    ",163],"}",["T_WHITESPACE","\n\n    ",164],["T_DOC_COMMENT","\/**\n     * Retrieves multiple values from cache with the specified keys.\n     * Some caches (such as memcache, apc) allow retrieving multiple cached values at the same time,\n     * which may improve the performance. In case a cache does not support this feature natively,\n     * this method will try to simulate it.\n     * @param string[] $keys list of string keys identifying the cached values\n     * @return array list of cached values corresponding to the specified keys. The array\n     * is returned in terms of (key, value) pairs.\n     * If a value is not cached or expired, the corresponding array value will be false.\n     * @since 2.0.7\n     *\/",166],["T_WHITESPACE","\n    ",176],["T_PUBLIC","public",177],["T_WHITESPACE"," ",177],["T_FUNCTION","function",177],["T_WHITESPACE"," ",177],["T_STRING","multiGet",177],"(",["T_VARIABLE","$keys",177],")",["T_WHITESPACE","\n    ",177],"{",["T_WHITESPACE","\n        ",178],["T_VARIABLE","$keyMap",179],["T_WHITESPACE"," ",179],"=",["T_WHITESPACE"," ",179],"[","]",";",["T_WHITESPACE","\n        ",179],["T_FOREACH","foreach",180],["T_WHITESPACE"," ",180],"(",["T_VARIABLE","$keys",180],["T_WHITESPACE"," ",180],["T_AS","as",180],["T_WHITESPACE"," ",180],["T_VARIABLE","$key",180],")",["T_WHITESPACE"," ",180],"{",["T_WHITESPACE","\n            ",180],["T_VARIABLE","$keyMap",181],"[",["T_VARIABLE","$key",181],"]",["T_WHITESPACE"," ",181],"=",["T_WHITESPACE"," ",181],["T_VARIABLE","$this",181],["T_OBJECT_OPERATOR","->",181],["T_STRING","buildKey",181],"(",["T_VARIABLE","$key",181],")",";",["T_WHITESPACE","\n        ",181],"}",["T_WHITESPACE","\n        ",182],["T_VARIABLE","$values",183],["T_WHITESPACE"," ",183],"=",["T_WHITESPACE"," ",183],["T_VARIABLE","$this",183],["T_OBJECT_OPERATOR","->",183],["T_STRING","getValues",183],"(",["T_STRING","array_values",183],"(",["T_VARIABLE","$keyMap",183],")",")",";",["T_WHITESPACE","\n        ",183],["T_VARIABLE","$results",184],["T_WHITESPACE"," ",184],"=",["T_WHITESPACE"," ",184],"[","]",";",["T_WHITESPACE","\n        ",184],["T_FOREACH","foreach",185],["T_WHITESPACE"," ",185],"(",["T_VARIABLE","$keyMap",185],["T_WHITESPACE"," ",185],["T_AS","as",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$key",185],["T_WHITESPACE"," ",185],["T_DOUBLE_ARROW","=>",185],["T_WHITESPACE"," ",185],["T_VARIABLE","$newKey",185],")",["T_WHITESPACE"," ",185],"{",["T_WHITESPACE","\n            ",185],["T_VARIABLE","$results",186],"[",["T_VARIABLE","$key",186],"]",["T_WHITESPACE"," ",186],"=",["T_WHITESPACE"," ",186],["T_STRING","false",186],";",["T_WHITESPACE","\n            ",186],["T_IF","if",187],["T_WHITESPACE"," ",187],"(",["T_ISSET","isset",187],"(",["T_VARIABLE","$values",187],"[",["T_VARIABLE","$newKey",187],"]",")",")",["T_WHITESPACE"," ",187],"{",["T_WHITESPACE","\n                ",187],["T_IF","if",188],["T_WHITESPACE"," ",188],"(",["T_VARIABLE","$this",188],["T_OBJECT_OPERATOR","->",188],["T_STRING","serializer",188],["T_WHITESPACE"," ",188],["T_IS_IDENTICAL","===",188],["T_WHITESPACE"," ",188],["T_STRING","false",188],")",["T_WHITESPACE"," ",188],"{",["T_WHITESPACE","\n                    ",188],["T_VARIABLE","$results",189],"[",["T_VARIABLE","$key",189],"]",["T_WHITESPACE"," ",189],"=",["T_WHITESPACE"," ",189],["T_VARIABLE","$values",189],"[",["T_VARIABLE","$newKey",189],"]",";",["T_WHITESPACE","\n                ",189],"}",["T_WHITESPACE"," ",190],["T_ELSE","else",190],["T_WHITESPACE"," ",190],"{",["T_WHITESPACE","\n                    ",190],["T_VARIABLE","$value",191],["T_WHITESPACE"," ",191],"=",["T_WHITESPACE"," ",191],["T_VARIABLE","$this",191],["T_OBJECT_OPERATOR","->",191],["T_STRING","serializer",191],["T_WHITESPACE"," ",191],["T_IS_IDENTICAL","===",191],["T_WHITESPACE"," ",191],["T_STRING","null",191],["T_WHITESPACE"," ",191],"?",["T_WHITESPACE"," ",191],["T_STRING","unserialize",191],"(",["T_VARIABLE","$values",191],"[",["T_VARIABLE","$newKey",191],"]",")",["T_WHITESPACE","\n                        ",191],":",["T_WHITESPACE"," ",192],["T_STRING","call_user_func",192],"(",["T_VARIABLE","$this",192],["T_OBJECT_OPERATOR","->",192],["T_STRING","serializer",192],"[",["T_LNUMBER","1",192],"]",",",["T_WHITESPACE"," ",192],["T_VARIABLE","$values",192],"[",["T_VARIABLE","$newKey",192],"]",")",";",["T_WHITESPACE","\n\n                    ",192],["T_IF","if",194],["T_WHITESPACE"," ",194],"(",["T_STRING","is_array",194],"(",["T_VARIABLE","$value",194],")",["T_WHITESPACE"," ",194],["T_BOOLEAN_AND","&&",194],["T_WHITESPACE"," ",194],"!","(",["T_VARIABLE","$value",194],"[",["T_LNUMBER","1",194],"]",["T_WHITESPACE"," ",194],["T_INSTANCEOF","instanceof",194],["T_WHITESPACE"," ",194],["T_STRING","Dependency",194],["T_WHITESPACE"," ",194],["T_BOOLEAN_AND","&&",194],["T_WHITESPACE"," ",194],["T_VARIABLE","$value",194],"[",["T_LNUMBER","1",194],"]",["T_OBJECT_OPERATOR","->",194],["T_STRING","isChanged",194],"(",["T_VARIABLE","$this",194],")",")",")",["T_WHITESPACE"," ",194],"{",["T_WHITESPACE","\n                        ",194],["T_VARIABLE","$results",195],"[",["T_VARIABLE","$key",195],"]",["T_WHITESPACE"," ",195],"=",["T_WHITESPACE"," ",195],["T_VARIABLE","$value",195],"[",["T_LNUMBER","0",195],"]",";",["T_WHITESPACE","\n                    ",195],"}",["T_WHITESPACE","\n                ",196],"}",["T_WHITESPACE","\n            ",197],"}",["T_WHITESPACE","\n        ",198],"}",["T_WHITESPACE","\n\n        ",199],["T_RETURN","return",201],["T_WHITESPACE"," ",201],["T_VARIABLE","$results",201],";",["T_WHITESPACE","\n    ",201],"}",["T_WHITESPACE","\n\n    ",202],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key into cache.\n     * If the cache already contains such a key, the existing value and\n     * expiration time will be replaced with the new ones, respectively.\n     *\n     * @param mixed $key a key identifying the value to be cached. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @param mixed $value the value to be cached\n     * @param int $duration default duration in seconds before the cache will expire. If not set,\n     * default [[defaultDuration]] value is used.\n     * @param Dependency $dependency dependency of the cached item. If the dependency changes,\n     * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return bool whether the value is successfully stored into cache\n     *\/",204],["T_WHITESPACE","\n    ",218],["T_PUBLIC","public",219],["T_WHITESPACE"," ",219],["T_FUNCTION","function",219],["T_WHITESPACE"," ",219],["T_STRING","set",219],"(",["T_VARIABLE","$key",219],",",["T_WHITESPACE"," ",219],["T_VARIABLE","$value",219],",",["T_WHITESPACE"," ",219],["T_VARIABLE","$duration",219],["T_WHITESPACE"," ",219],"=",["T_WHITESPACE"," ",219],["T_STRING","null",219],",",["T_WHITESPACE"," ",219],["T_VARIABLE","$dependency",219],["T_WHITESPACE"," ",219],"=",["T_WHITESPACE"," ",219],["T_STRING","null",219],")",["T_WHITESPACE","\n    ",219],"{",["T_WHITESPACE","\n        ",220],["T_IF","if",221],["T_WHITESPACE"," ",221],"(",["T_VARIABLE","$duration",221],["T_WHITESPACE"," ",221],["T_IS_IDENTICAL","===",221],["T_WHITESPACE"," ",221],["T_STRING","null",221],")",["T_WHITESPACE"," ",221],"{",["T_WHITESPACE","\n            ",221],["T_VARIABLE","$duration",222],["T_WHITESPACE"," ",222],"=",["T_WHITESPACE"," ",222],["T_VARIABLE","$this",222],["T_OBJECT_OPERATOR","->",222],["T_STRING","defaultDuration",222],";",["T_WHITESPACE","\n        ",222],"}",["T_WHITESPACE","\n\n        ",223],["T_IF","if",225],["T_WHITESPACE"," ",225],"(",["T_VARIABLE","$dependency",225],["T_WHITESPACE"," ",225],["T_IS_NOT_IDENTICAL","!==",225],["T_WHITESPACE"," ",225],["T_STRING","null",225],["T_WHITESPACE"," ",225],["T_BOOLEAN_AND","&&",225],["T_WHITESPACE"," ",225],["T_VARIABLE","$this",225],["T_OBJECT_OPERATOR","->",225],["T_STRING","serializer",225],["T_WHITESPACE"," ",225],["T_IS_NOT_IDENTICAL","!==",225],["T_WHITESPACE"," ",225],["T_STRING","false",225],")",["T_WHITESPACE"," ",225],"{",["T_WHITESPACE","\n            ",225],["T_VARIABLE","$dependency",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","evaluateDependency",226],"(",["T_VARIABLE","$this",226],")",";",["T_WHITESPACE","\n        ",226],"}",["T_WHITESPACE","\n        ",227],["T_IF","if",228],["T_WHITESPACE"," ",228],"(",["T_VARIABLE","$this",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","serializer",228],["T_WHITESPACE"," ",228],["T_IS_IDENTICAL","===",228],["T_WHITESPACE"," ",228],["T_STRING","null",228],")",["T_WHITESPACE"," ",228],"{",["T_WHITESPACE","\n            ",228],["T_VARIABLE","$value",229],["T_WHITESPACE"," ",229],"=",["T_WHITESPACE"," ",229],["T_STRING","serialize",229],"(","[",["T_VARIABLE","$value",229],",",["T_WHITESPACE"," ",229],["T_VARIABLE","$dependency",229],"]",")",";",["T_WHITESPACE","\n        ",229],"}",["T_WHITESPACE"," ",230],["T_ELSEIF","elseif",230],["T_WHITESPACE"," ",230],"(",["T_VARIABLE","$this",230],["T_OBJECT_OPERATOR","->",230],["T_STRING","serializer",230],["T_WHITESPACE"," ",230],["T_IS_NOT_IDENTICAL","!==",230],["T_WHITESPACE"," ",230],["T_STRING","false",230],")",["T_WHITESPACE"," ",230],"{",["T_WHITESPACE","\n            ",230],["T_VARIABLE","$value",231],["T_WHITESPACE"," ",231],"=",["T_WHITESPACE"," ",231],["T_STRING","call_user_func",231],"(",["T_VARIABLE","$this",231],["T_OBJECT_OPERATOR","->",231],["T_STRING","serializer",231],"[",["T_LNUMBER","0",231],"]",",",["T_WHITESPACE"," ",231],"[",["T_VARIABLE","$value",231],",",["T_WHITESPACE"," ",231],["T_VARIABLE","$dependency",231],"]",")",";",["T_WHITESPACE","\n        ",231],"}",["T_WHITESPACE","\n        ",232],["T_VARIABLE","$key",233],["T_WHITESPACE"," ",233],"=",["T_WHITESPACE"," ",233],["T_VARIABLE","$this",233],["T_OBJECT_OPERATOR","->",233],["T_STRING","buildKey",233],"(",["T_VARIABLE","$key",233],")",";",["T_WHITESPACE","\n\n        ",233],["T_RETURN","return",235],["T_WHITESPACE"," ",235],["T_VARIABLE","$this",235],["T_OBJECT_OPERATOR","->",235],["T_STRING","setValue",235],"(",["T_VARIABLE","$key",235],",",["T_WHITESPACE"," ",235],["T_VARIABLE","$value",235],",",["T_WHITESPACE"," ",235],["T_VARIABLE","$duration",235],")",";",["T_WHITESPACE","\n    ",235],"}",["T_WHITESPACE","\n\n    ",236],["T_DOC_COMMENT","\/**\n     * Stores multiple items in cache. Each item contains a value identified by a key.\n     * If the cache already contains such a key, the existing value and\n     * expiration time will be replaced with the new ones, respectively.\n     *\n     * @param array $items the items to be cached, as key-value pairs.\n     * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.\n     * @param Dependency $dependency dependency of the cached items. If the dependency changes,\n     * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return array array of failed keys\n     * @deprecated This method is an alias for [[multiSet()]] and will be removed in 2.1.0.\n     *\/",238],["T_WHITESPACE","\n    ",250],["T_PUBLIC","public",251],["T_WHITESPACE"," ",251],["T_FUNCTION","function",251],["T_WHITESPACE"," ",251],["T_STRING","mset",251],"(",["T_VARIABLE","$items",251],",",["T_WHITESPACE"," ",251],["T_VARIABLE","$duration",251],["T_WHITESPACE"," ",251],"=",["T_WHITESPACE"," ",251],["T_LNUMBER","0",251],",",["T_WHITESPACE"," ",251],["T_VARIABLE","$dependency",251],["T_WHITESPACE"," ",251],"=",["T_WHITESPACE"," ",251],["T_STRING","null",251],")",["T_WHITESPACE","\n    ",251],"{",["T_WHITESPACE","\n        ",252],["T_RETURN","return",253],["T_WHITESPACE"," ",253],["T_VARIABLE","$this",253],["T_OBJECT_OPERATOR","->",253],["T_STRING","multiSet",253],"(",["T_VARIABLE","$items",253],",",["T_WHITESPACE"," ",253],["T_VARIABLE","$duration",253],",",["T_WHITESPACE"," ",253],["T_VARIABLE","$dependency",253],")",";",["T_WHITESPACE","\n    ",253],"}",["T_WHITESPACE","\n\n    ",254],["T_DOC_COMMENT","\/**\n     * Stores multiple items in cache. Each item contains a value identified by a key.\n     * If the cache already contains such a key, the existing value and\n     * expiration time will be replaced with the new ones, respectively.\n     *\n     * @param array $items the items to be cached, as key-value pairs.\n     * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.\n     * @param Dependency $dependency dependency of the cached items. If the dependency changes,\n     * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return array array of failed keys\n     * @since 2.0.7\n     *\/",256],["T_WHITESPACE","\n    ",268],["T_PUBLIC","public",269],["T_WHITESPACE"," ",269],["T_FUNCTION","function",269],["T_WHITESPACE"," ",269],["T_STRING","multiSet",269],"(",["T_VARIABLE","$items",269],",",["T_WHITESPACE"," ",269],["T_VARIABLE","$duration",269],["T_WHITESPACE"," ",269],"=",["T_WHITESPACE"," ",269],["T_LNUMBER","0",269],",",["T_WHITESPACE"," ",269],["T_VARIABLE","$dependency",269],["T_WHITESPACE"," ",269],"=",["T_WHITESPACE"," ",269],["T_STRING","null",269],")",["T_WHITESPACE","\n    ",269],"{",["T_WHITESPACE","\n        ",270],["T_IF","if",271],["T_WHITESPACE"," ",271],"(",["T_VARIABLE","$dependency",271],["T_WHITESPACE"," ",271],["T_IS_NOT_IDENTICAL","!==",271],["T_WHITESPACE"," ",271],["T_STRING","null",271],["T_WHITESPACE"," ",271],["T_BOOLEAN_AND","&&",271],["T_WHITESPACE"," ",271],["T_VARIABLE","$this",271],["T_OBJECT_OPERATOR","->",271],["T_STRING","serializer",271],["T_WHITESPACE"," ",271],["T_IS_NOT_IDENTICAL","!==",271],["T_WHITESPACE"," ",271],["T_STRING","false",271],")",["T_WHITESPACE"," ",271],"{",["T_WHITESPACE","\n            ",271],["T_VARIABLE","$dependency",272],["T_OBJECT_OPERATOR","->",272],["T_STRING","evaluateDependency",272],"(",["T_VARIABLE","$this",272],")",";",["T_WHITESPACE","\n        ",272],"}",["T_WHITESPACE","\n\n        ",273],["T_VARIABLE","$data",275],["T_WHITESPACE"," ",275],"=",["T_WHITESPACE"," ",275],"[","]",";",["T_WHITESPACE","\n        ",275],["T_FOREACH","foreach",276],["T_WHITESPACE"," ",276],"(",["T_VARIABLE","$items",276],["T_WHITESPACE"," ",276],["T_AS","as",276],["T_WHITESPACE"," ",276],["T_VARIABLE","$key",276],["T_WHITESPACE"," ",276],["T_DOUBLE_ARROW","=>",276],["T_WHITESPACE"," ",276],["T_VARIABLE","$value",276],")",["T_WHITESPACE"," ",276],"{",["T_WHITESPACE","\n            ",276],["T_IF","if",277],["T_WHITESPACE"," ",277],"(",["T_VARIABLE","$this",277],["T_OBJECT_OPERATOR","->",277],["T_STRING","serializer",277],["T_WHITESPACE"," ",277],["T_IS_IDENTICAL","===",277],["T_WHITESPACE"," ",277],["T_STRING","null",277],")",["T_WHITESPACE"," ",277],"{",["T_WHITESPACE","\n                ",277],["T_VARIABLE","$value",278],["T_WHITESPACE"," ",278],"=",["T_WHITESPACE"," ",278],["T_STRING","serialize",278],"(","[",["T_VARIABLE","$value",278],",",["T_WHITESPACE"," ",278],["T_VARIABLE","$dependency",278],"]",")",";",["T_WHITESPACE","\n            ",278],"}",["T_WHITESPACE"," ",279],["T_ELSEIF","elseif",279],["T_WHITESPACE"," ",279],"(",["T_VARIABLE","$this",279],["T_OBJECT_OPERATOR","->",279],["T_STRING","serializer",279],["T_WHITESPACE"," ",279],["T_IS_NOT_IDENTICAL","!==",279],["T_WHITESPACE"," ",279],["T_STRING","false",279],")",["T_WHITESPACE"," ",279],"{",["T_WHITESPACE","\n                ",279],["T_VARIABLE","$value",280],["T_WHITESPACE"," ",280],"=",["T_WHITESPACE"," ",280],["T_STRING","call_user_func",280],"(",["T_VARIABLE","$this",280],["T_OBJECT_OPERATOR","->",280],["T_STRING","serializer",280],"[",["T_LNUMBER","0",280],"]",",",["T_WHITESPACE"," ",280],"[",["T_VARIABLE","$value",280],",",["T_WHITESPACE"," ",280],["T_VARIABLE","$dependency",280],"]",")",";",["T_WHITESPACE","\n            ",280],"}",["T_WHITESPACE","\n\n            ",281],["T_VARIABLE","$key",283],["T_WHITESPACE"," ",283],"=",["T_WHITESPACE"," ",283],["T_VARIABLE","$this",283],["T_OBJECT_OPERATOR","->",283],["T_STRING","buildKey",283],"(",["T_VARIABLE","$key",283],")",";",["T_WHITESPACE","\n            ",283],["T_VARIABLE","$data",284],"[",["T_VARIABLE","$key",284],"]",["T_WHITESPACE"," ",284],"=",["T_WHITESPACE"," ",284],["T_VARIABLE","$value",284],";",["T_WHITESPACE","\n        ",284],"}",["T_WHITESPACE","\n\n        ",285],["T_RETURN","return",287],["T_WHITESPACE"," ",287],["T_VARIABLE","$this",287],["T_OBJECT_OPERATOR","->",287],["T_STRING","setValues",287],"(",["T_VARIABLE","$data",287],",",["T_WHITESPACE"," ",287],["T_VARIABLE","$duration",287],")",";",["T_WHITESPACE","\n    ",287],"}",["T_WHITESPACE","\n\n    ",288],["T_DOC_COMMENT","\/**\n     * Stores multiple items in cache. Each item contains a value identified by a key.\n     * If the cache already contains such a key, the existing value and expiration time will be preserved.\n     *\n     * @param array $items the items to be cached, as key-value pairs.\n     * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.\n     * @param Dependency $dependency dependency of the cached items. If the dependency changes,\n     * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return array array of failed keys\n     * @deprecated This method is an alias for [[multiAdd()]] and will be removed in 2.1.0.\n     *\/",290],["T_WHITESPACE","\n    ",301],["T_PUBLIC","public",302],["T_WHITESPACE"," ",302],["T_FUNCTION","function",302],["T_WHITESPACE"," ",302],["T_STRING","madd",302],"(",["T_VARIABLE","$items",302],",",["T_WHITESPACE"," ",302],["T_VARIABLE","$duration",302],["T_WHITESPACE"," ",302],"=",["T_WHITESPACE"," ",302],["T_LNUMBER","0",302],",",["T_WHITESPACE"," ",302],["T_VARIABLE","$dependency",302],["T_WHITESPACE"," ",302],"=",["T_WHITESPACE"," ",302],["T_STRING","null",302],")",["T_WHITESPACE","\n    ",302],"{",["T_WHITESPACE","\n        ",303],["T_RETURN","return",304],["T_WHITESPACE"," ",304],["T_VARIABLE","$this",304],["T_OBJECT_OPERATOR","->",304],["T_STRING","multiAdd",304],"(",["T_VARIABLE","$items",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$duration",304],",",["T_WHITESPACE"," ",304],["T_VARIABLE","$dependency",304],")",";",["T_WHITESPACE","\n    ",304],"}",["T_WHITESPACE","\n\n    ",305],["T_DOC_COMMENT","\/**\n     * Stores multiple items in cache. Each item contains a value identified by a key.\n     * If the cache already contains such a key, the existing value and expiration time will be preserved.\n     *\n     * @param array $items the items to be cached, as key-value pairs.\n     * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.\n     * @param Dependency $dependency dependency of the cached items. If the dependency changes,\n     * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return array array of failed keys\n     * @since 2.0.7\n     *\/",307],["T_WHITESPACE","\n    ",318],["T_PUBLIC","public",319],["T_WHITESPACE"," ",319],["T_FUNCTION","function",319],["T_WHITESPACE"," ",319],["T_STRING","multiAdd",319],"(",["T_VARIABLE","$items",319],",",["T_WHITESPACE"," ",319],["T_VARIABLE","$duration",319],["T_WHITESPACE"," ",319],"=",["T_WHITESPACE"," ",319],["T_LNUMBER","0",319],",",["T_WHITESPACE"," ",319],["T_VARIABLE","$dependency",319],["T_WHITESPACE"," ",319],"=",["T_WHITESPACE"," ",319],["T_STRING","null",319],")",["T_WHITESPACE","\n    ",319],"{",["T_WHITESPACE","\n        ",320],["T_IF","if",321],["T_WHITESPACE"," ",321],"(",["T_VARIABLE","$dependency",321],["T_WHITESPACE"," ",321],["T_IS_NOT_IDENTICAL","!==",321],["T_WHITESPACE"," ",321],["T_STRING","null",321],["T_WHITESPACE"," ",321],["T_BOOLEAN_AND","&&",321],["T_WHITESPACE"," ",321],["T_VARIABLE","$this",321],["T_OBJECT_OPERATOR","->",321],["T_STRING","serializer",321],["T_WHITESPACE"," ",321],["T_IS_NOT_IDENTICAL","!==",321],["T_WHITESPACE"," ",321],["T_STRING","false",321],")",["T_WHITESPACE"," ",321],"{",["T_WHITESPACE","\n            ",321],["T_VARIABLE","$dependency",322],["T_OBJECT_OPERATOR","->",322],["T_STRING","evaluateDependency",322],"(",["T_VARIABLE","$this",322],")",";",["T_WHITESPACE","\n        ",322],"}",["T_WHITESPACE","\n\n        ",323],["T_VARIABLE","$data",325],["T_WHITESPACE"," ",325],"=",["T_WHITESPACE"," ",325],"[","]",";",["T_WHITESPACE","\n        ",325],["T_FOREACH","foreach",326],["T_WHITESPACE"," ",326],"(",["T_VARIABLE","$items",326],["T_WHITESPACE"," ",326],["T_AS","as",326],["T_WHITESPACE"," ",326],["T_VARIABLE","$key",326],["T_WHITESPACE"," ",326],["T_DOUBLE_ARROW","=>",326],["T_WHITESPACE"," ",326],["T_VARIABLE","$value",326],")",["T_WHITESPACE"," ",326],"{",["T_WHITESPACE","\n            ",326],["T_IF","if",327],["T_WHITESPACE"," ",327],"(",["T_VARIABLE","$this",327],["T_OBJECT_OPERATOR","->",327],["T_STRING","serializer",327],["T_WHITESPACE"," ",327],["T_IS_IDENTICAL","===",327],["T_WHITESPACE"," ",327],["T_STRING","null",327],")",["T_WHITESPACE"," ",327],"{",["T_WHITESPACE","\n                ",327],["T_VARIABLE","$value",328],["T_WHITESPACE"," ",328],"=",["T_WHITESPACE"," ",328],["T_STRING","serialize",328],"(","[",["T_VARIABLE","$value",328],",",["T_WHITESPACE"," ",328],["T_VARIABLE","$dependency",328],"]",")",";",["T_WHITESPACE","\n            ",328],"}",["T_WHITESPACE"," ",329],["T_ELSEIF","elseif",329],["T_WHITESPACE"," ",329],"(",["T_VARIABLE","$this",329],["T_OBJECT_OPERATOR","->",329],["T_STRING","serializer",329],["T_WHITESPACE"," ",329],["T_IS_NOT_IDENTICAL","!==",329],["T_WHITESPACE"," ",329],["T_STRING","false",329],")",["T_WHITESPACE"," ",329],"{",["T_WHITESPACE","\n                ",329],["T_VARIABLE","$value",330],["T_WHITESPACE"," ",330],"=",["T_WHITESPACE"," ",330],["T_STRING","call_user_func",330],"(",["T_VARIABLE","$this",330],["T_OBJECT_OPERATOR","->",330],["T_STRING","serializer",330],"[",["T_LNUMBER","0",330],"]",",",["T_WHITESPACE"," ",330],"[",["T_VARIABLE","$value",330],",",["T_WHITESPACE"," ",330],["T_VARIABLE","$dependency",330],"]",")",";",["T_WHITESPACE","\n            ",330],"}",["T_WHITESPACE","\n\n            ",331],["T_VARIABLE","$key",333],["T_WHITESPACE"," ",333],"=",["T_WHITESPACE"," ",333],["T_VARIABLE","$this",333],["T_OBJECT_OPERATOR","->",333],["T_STRING","buildKey",333],"(",["T_VARIABLE","$key",333],")",";",["T_WHITESPACE","\n            ",333],["T_VARIABLE","$data",334],"[",["T_VARIABLE","$key",334],"]",["T_WHITESPACE"," ",334],"=",["T_WHITESPACE"," ",334],["T_VARIABLE","$value",334],";",["T_WHITESPACE","\n        ",334],"}",["T_WHITESPACE","\n\n        ",335],["T_RETURN","return",337],["T_WHITESPACE"," ",337],["T_VARIABLE","$this",337],["T_OBJECT_OPERATOR","->",337],["T_STRING","addValues",337],"(",["T_VARIABLE","$data",337],",",["T_WHITESPACE"," ",337],["T_VARIABLE","$duration",337],")",";",["T_WHITESPACE","\n    ",337],"}",["T_WHITESPACE","\n\n    ",338],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key into cache if the cache does not contain this key.\n     * Nothing will be done if the cache already contains the key.\n     * @param mixed $key a key identifying the value to be cached. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @param mixed $value the value to be cached\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @param Dependency $dependency dependency of the cached item. If the dependency changes,\n     * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is false.\n     * @return bool whether the value is successfully stored into cache\n     *\/",340],["T_WHITESPACE","\n    ",351],["T_PUBLIC","public",352],["T_WHITESPACE"," ",352],["T_FUNCTION","function",352],["T_WHITESPACE"," ",352],["T_STRING","add",352],"(",["T_VARIABLE","$key",352],",",["T_WHITESPACE"," ",352],["T_VARIABLE","$value",352],",",["T_WHITESPACE"," ",352],["T_VARIABLE","$duration",352],["T_WHITESPACE"," ",352],"=",["T_WHITESPACE"," ",352],["T_LNUMBER","0",352],",",["T_WHITESPACE"," ",352],["T_VARIABLE","$dependency",352],["T_WHITESPACE"," ",352],"=",["T_WHITESPACE"," ",352],["T_STRING","null",352],")",["T_WHITESPACE","\n    ",352],"{",["T_WHITESPACE","\n        ",353],["T_IF","if",354],["T_WHITESPACE"," ",354],"(",["T_VARIABLE","$dependency",354],["T_WHITESPACE"," ",354],["T_IS_NOT_IDENTICAL","!==",354],["T_WHITESPACE"," ",354],["T_STRING","null",354],["T_WHITESPACE"," ",354],["T_BOOLEAN_AND","&&",354],["T_WHITESPACE"," ",354],["T_VARIABLE","$this",354],["T_OBJECT_OPERATOR","->",354],["T_STRING","serializer",354],["T_WHITESPACE"," ",354],["T_IS_NOT_IDENTICAL","!==",354],["T_WHITESPACE"," ",354],["T_STRING","false",354],")",["T_WHITESPACE"," ",354],"{",["T_WHITESPACE","\n            ",354],["T_VARIABLE","$dependency",355],["T_OBJECT_OPERATOR","->",355],["T_STRING","evaluateDependency",355],"(",["T_VARIABLE","$this",355],")",";",["T_WHITESPACE","\n        ",355],"}",["T_WHITESPACE","\n        ",356],["T_IF","if",357],["T_WHITESPACE"," ",357],"(",["T_VARIABLE","$this",357],["T_OBJECT_OPERATOR","->",357],["T_STRING","serializer",357],["T_WHITESPACE"," ",357],["T_IS_IDENTICAL","===",357],["T_WHITESPACE"," ",357],["T_STRING","null",357],")",["T_WHITESPACE"," ",357],"{",["T_WHITESPACE","\n            ",357],["T_VARIABLE","$value",358],["T_WHITESPACE"," ",358],"=",["T_WHITESPACE"," ",358],["T_STRING","serialize",358],"(","[",["T_VARIABLE","$value",358],",",["T_WHITESPACE"," ",358],["T_VARIABLE","$dependency",358],"]",")",";",["T_WHITESPACE","\n        ",358],"}",["T_WHITESPACE"," ",359],["T_ELSEIF","elseif",359],["T_WHITESPACE"," ",359],"(",["T_VARIABLE","$this",359],["T_OBJECT_OPERATOR","->",359],["T_STRING","serializer",359],["T_WHITESPACE"," ",359],["T_IS_NOT_IDENTICAL","!==",359],["T_WHITESPACE"," ",359],["T_STRING","false",359],")",["T_WHITESPACE"," ",359],"{",["T_WHITESPACE","\n            ",359],["T_VARIABLE","$value",360],["T_WHITESPACE"," ",360],"=",["T_WHITESPACE"," ",360],["T_STRING","call_user_func",360],"(",["T_VARIABLE","$this",360],["T_OBJECT_OPERATOR","->",360],["T_STRING","serializer",360],"[",["T_LNUMBER","0",360],"]",",",["T_WHITESPACE"," ",360],"[",["T_VARIABLE","$value",360],",",["T_WHITESPACE"," ",360],["T_VARIABLE","$dependency",360],"]",")",";",["T_WHITESPACE","\n        ",360],"}",["T_WHITESPACE","\n        ",361],["T_VARIABLE","$key",362],["T_WHITESPACE"," ",362],"=",["T_WHITESPACE"," ",362],["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","buildKey",362],"(",["T_VARIABLE","$key",362],")",";",["T_WHITESPACE","\n\n        ",362],["T_RETURN","return",364],["T_WHITESPACE"," ",364],["T_VARIABLE","$this",364],["T_OBJECT_OPERATOR","->",364],["T_STRING","addValue",364],"(",["T_VARIABLE","$key",364],",",["T_WHITESPACE"," ",364],["T_VARIABLE","$value",364],",",["T_WHITESPACE"," ",364],["T_VARIABLE","$duration",364],")",";",["T_WHITESPACE","\n    ",364],"}",["T_WHITESPACE","\n\n    ",365],["T_DOC_COMMENT","\/**\n     * Deletes a value with the specified key from cache\n     * @param mixed $key a key identifying the value to be deleted from cache. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @return bool if no error happens during deletion\n     *\/",367],["T_WHITESPACE","\n    ",372],["T_PUBLIC","public",373],["T_WHITESPACE"," ",373],["T_FUNCTION","function",373],["T_WHITESPACE"," ",373],["T_STRING","delete",373],"(",["T_VARIABLE","$key",373],")",["T_WHITESPACE","\n    ",373],"{",["T_WHITESPACE","\n        ",374],["T_VARIABLE","$key",375],["T_WHITESPACE"," ",375],"=",["T_WHITESPACE"," ",375],["T_VARIABLE","$this",375],["T_OBJECT_OPERATOR","->",375],["T_STRING","buildKey",375],"(",["T_VARIABLE","$key",375],")",";",["T_WHITESPACE","\n\n        ",375],["T_RETURN","return",377],["T_WHITESPACE"," ",377],["T_VARIABLE","$this",377],["T_OBJECT_OPERATOR","->",377],["T_STRING","deleteValue",377],"(",["T_VARIABLE","$key",377],")",";",["T_WHITESPACE","\n    ",377],"}",["T_WHITESPACE","\n\n    ",378],["T_DOC_COMMENT","\/**\n     * Deletes all values from cache.\n     * Be careful of performing this operation if the cache is shared among multiple applications.\n     * @return bool whether the flush operation was successful.\n     *\/",380],["T_WHITESPACE","\n    ",384],["T_PUBLIC","public",385],["T_WHITESPACE"," ",385],["T_FUNCTION","function",385],["T_WHITESPACE"," ",385],["T_STRING","flush",385],"(",")",["T_WHITESPACE","\n    ",385],"{",["T_WHITESPACE","\n        ",386],["T_RETURN","return",387],["T_WHITESPACE"," ",387],["T_VARIABLE","$this",387],["T_OBJECT_OPERATOR","->",387],["T_STRING","flushValues",387],"(",")",";",["T_WHITESPACE","\n    ",387],"}",["T_WHITESPACE","\n\n    ",388],["T_DOC_COMMENT","\/**\n     * Retrieves a value from cache with a specified key.\n     * This method should be implemented by child classes to retrieve the data\n     * from specific cache storage.\n     * @param string $key a unique key identifying the cached value\n     * @return mixed|false the value stored in cache, false if the value is not in the cache or expired. Most often\n     * value is a string. If you have disabled [[serializer]], it could be something else.\n     *\/",390],["T_WHITESPACE","\n    ",397],["T_ABSTRACT","abstract",398],["T_WHITESPACE"," ",398],["T_PROTECTED","protected",398],["T_WHITESPACE"," ",398],["T_FUNCTION","function",398],["T_WHITESPACE"," ",398],["T_STRING","getValue",398],"(",["T_VARIABLE","$key",398],")",";",["T_WHITESPACE","\n\n    ",398],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key in cache.\n     * This method should be implemented by child classes to store the data\n     * in specific cache storage.\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],\n     * it could be something else.\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",400],["T_WHITESPACE","\n    ",409],["T_ABSTRACT","abstract",410],["T_WHITESPACE"," ",410],["T_PROTECTED","protected",410],["T_WHITESPACE"," ",410],["T_FUNCTION","function",410],["T_WHITESPACE"," ",410],["T_STRING","setValue",410],"(",["T_VARIABLE","$key",410],",",["T_WHITESPACE"," ",410],["T_VARIABLE","$value",410],",",["T_WHITESPACE"," ",410],["T_VARIABLE","$duration",410],")",";",["T_WHITESPACE","\n\n    ",410],["T_DOC_COMMENT","\/**\n     * Stores a value identified by a key into cache if the cache does not contain this key.\n     * This method should be implemented by child classes to store the data\n     * in specific cache storage.\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],\n     * it could be something else.\n     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.\n     * @return bool true if the value is successfully stored into cache, false otherwise\n     *\/",412],["T_WHITESPACE","\n    ",421],["T_ABSTRACT","abstract",422],["T_WHITESPACE"," ",422],["T_PROTECTED","protected",422],["T_WHITESPACE"," ",422],["T_FUNCTION","function",422],["T_WHITESPACE"," ",422],["T_STRING","addValue",422],"(",["T_VARIABLE","$key",422],",",["T_WHITESPACE"," ",422],["T_VARIABLE","$value",422],",",["T_WHITESPACE"," ",422],["T_VARIABLE","$duration",422],")",";",["T_WHITESPACE","\n\n    ",422],["T_DOC_COMMENT","\/**\n     * Deletes a value with the specified key from cache\n     * This method should be implemented by child classes to delete the data from actual cache storage.\n     * @param string $key the key of the value to be deleted\n     * @return bool if no error happens during deletion\n     *\/",424],["T_WHITESPACE","\n    ",429],["T_ABSTRACT","abstract",430],["T_WHITESPACE"," ",430],["T_PROTECTED","protected",430],["T_WHITESPACE"," ",430],["T_FUNCTION","function",430],["T_WHITESPACE"," ",430],["T_STRING","deleteValue",430],"(",["T_VARIABLE","$key",430],")",";",["T_WHITESPACE","\n\n    ",430],["T_DOC_COMMENT","\/**\n     * Deletes all values from cache.\n     * Child classes may implement this method to realize the flush operation.\n     * @return bool whether the flush operation was successful.\n     *\/",432],["T_WHITESPACE","\n    ",436],["T_ABSTRACT","abstract",437],["T_WHITESPACE"," ",437],["T_PROTECTED","protected",437],["T_WHITESPACE"," ",437],["T_FUNCTION","function",437],["T_WHITESPACE"," ",437],["T_STRING","flushValues",437],"(",")",";",["T_WHITESPACE","\n\n    ",437],["T_DOC_COMMENT","\/**\n     * Retrieves multiple values from cache with the specified keys.\n     * The default implementation calls [[getValue()]] multiple times to retrieve\n     * the cached values one by one. If the underlying cache storage supports multiget,\n     * this method should be overridden to exploit that feature.\n     * @param array $keys a list of keys identifying the cached values\n     * @return array a list of cached values indexed by the keys\n     *\/",439],["T_WHITESPACE","\n    ",446],["T_PROTECTED","protected",447],["T_WHITESPACE"," ",447],["T_FUNCTION","function",447],["T_WHITESPACE"," ",447],["T_STRING","getValues",447],"(",["T_VARIABLE","$keys",447],")",["T_WHITESPACE","\n    ",447],"{",["T_WHITESPACE","\n        ",448],["T_VARIABLE","$results",449],["T_WHITESPACE"," ",449],"=",["T_WHITESPACE"," ",449],"[","]",";",["T_WHITESPACE","\n        ",449],["T_FOREACH","foreach",450],["T_WHITESPACE"," ",450],"(",["T_VARIABLE","$keys",450],["T_WHITESPACE"," ",450],["T_AS","as",450],["T_WHITESPACE"," ",450],["T_VARIABLE","$key",450],")",["T_WHITESPACE"," ",450],"{",["T_WHITESPACE","\n            ",450],["T_VARIABLE","$results",451],"[",["T_VARIABLE","$key",451],"]",["T_WHITESPACE"," ",451],"=",["T_WHITESPACE"," ",451],["T_VARIABLE","$this",451],["T_OBJECT_OPERATOR","->",451],["T_STRING","getValue",451],"(",["T_VARIABLE","$key",451],")",";",["T_WHITESPACE","\n        ",451],"}",["T_WHITESPACE","\n\n        ",452],["T_RETURN","return",454],["T_WHITESPACE"," ",454],["T_VARIABLE","$results",454],";",["T_WHITESPACE","\n    ",454],"}",["T_WHITESPACE","\n\n    ",455],["T_DOC_COMMENT","\/**\n     * Stores multiple key-value pairs in cache.\n     * The default implementation calls [[setValue()]] multiple times store values one by one. If the underlying cache\n     * storage supports multi-set, this method should be overridden to exploit that feature.\n     * @param array $data array where key corresponds to cache key while value is the value stored\n     * @param int $duration the number of seconds in which the cached values will expire. 0 means never expire.\n     * @return array array of failed keys\n     *\/",457],["T_WHITESPACE","\n    ",464],["T_PROTECTED","protected",465],["T_WHITESPACE"," ",465],["T_FUNCTION","function",465],["T_WHITESPACE"," ",465],["T_STRING","setValues",465],"(",["T_VARIABLE","$data",465],",",["T_WHITESPACE"," ",465],["T_VARIABLE","$duration",465],")",["T_WHITESPACE","\n    ",465],"{",["T_WHITESPACE","\n        ",466],["T_VARIABLE","$failedKeys",467],["T_WHITESPACE"," ",467],"=",["T_WHITESPACE"," ",467],"[","]",";",["T_WHITESPACE","\n        ",467],["T_FOREACH","foreach",468],["T_WHITESPACE"," ",468],"(",["T_VARIABLE","$data",468],["T_WHITESPACE"," ",468],["T_AS","as",468],["T_WHITESPACE"," ",468],["T_VARIABLE","$key",468],["T_WHITESPACE"," ",468],["T_DOUBLE_ARROW","=>",468],["T_WHITESPACE"," ",468],["T_VARIABLE","$value",468],")",["T_WHITESPACE"," ",468],"{",["T_WHITESPACE","\n            ",468],["T_IF","if",469],["T_WHITESPACE"," ",469],"(",["T_VARIABLE","$this",469],["T_OBJECT_OPERATOR","->",469],["T_STRING","setValue",469],"(",["T_VARIABLE","$key",469],",",["T_WHITESPACE"," ",469],["T_VARIABLE","$value",469],",",["T_WHITESPACE"," ",469],["T_VARIABLE","$duration",469],")",["T_WHITESPACE"," ",469],["T_IS_IDENTICAL","===",469],["T_WHITESPACE"," ",469],["T_STRING","false",469],")",["T_WHITESPACE"," ",469],"{",["T_WHITESPACE","\n                ",469],["T_VARIABLE","$failedKeys",470],"[","]",["T_WHITESPACE"," ",470],"=",["T_WHITESPACE"," ",470],["T_VARIABLE","$key",470],";",["T_WHITESPACE","\n            ",470],"}",["T_WHITESPACE","\n        ",471],"}",["T_WHITESPACE","\n\n        ",472],["T_RETURN","return",474],["T_WHITESPACE"," ",474],["T_VARIABLE","$failedKeys",474],";",["T_WHITESPACE","\n    ",474],"}",["T_WHITESPACE","\n\n    ",475],["T_DOC_COMMENT","\/**\n     * Adds multiple key-value pairs to cache.\n     * The default implementation calls [[addValue()]] multiple times add values one by one. If the underlying cache\n     * storage supports multi-add, this method should be overridden to exploit that feature.\n     * @param array $data array where key corresponds to cache key while value is the value stored.\n     * @param int $duration the number of seconds in which the cached values will expire. 0 means never expire.\n     * @return array array of failed keys\n     *\/",477],["T_WHITESPACE","\n    ",484],["T_PROTECTED","protected",485],["T_WHITESPACE"," ",485],["T_FUNCTION","function",485],["T_WHITESPACE"," ",485],["T_STRING","addValues",485],"(",["T_VARIABLE","$data",485],",",["T_WHITESPACE"," ",485],["T_VARIABLE","$duration",485],")",["T_WHITESPACE","\n    ",485],"{",["T_WHITESPACE","\n        ",486],["T_VARIABLE","$failedKeys",487],["T_WHITESPACE"," ",487],"=",["T_WHITESPACE"," ",487],"[","]",";",["T_WHITESPACE","\n        ",487],["T_FOREACH","foreach",488],["T_WHITESPACE"," ",488],"(",["T_VARIABLE","$data",488],["T_WHITESPACE"," ",488],["T_AS","as",488],["T_WHITESPACE"," ",488],["T_VARIABLE","$key",488],["T_WHITESPACE"," ",488],["T_DOUBLE_ARROW","=>",488],["T_WHITESPACE"," ",488],["T_VARIABLE","$value",488],")",["T_WHITESPACE"," ",488],"{",["T_WHITESPACE","\n            ",488],["T_IF","if",489],["T_WHITESPACE"," ",489],"(",["T_VARIABLE","$this",489],["T_OBJECT_OPERATOR","->",489],["T_STRING","addValue",489],"(",["T_VARIABLE","$key",489],",",["T_WHITESPACE"," ",489],["T_VARIABLE","$value",489],",",["T_WHITESPACE"," ",489],["T_VARIABLE","$duration",489],")",["T_WHITESPACE"," ",489],["T_IS_IDENTICAL","===",489],["T_WHITESPACE"," ",489],["T_STRING","false",489],")",["T_WHITESPACE"," ",489],"{",["T_WHITESPACE","\n                ",489],["T_VARIABLE","$failedKeys",490],"[","]",["T_WHITESPACE"," ",490],"=",["T_WHITESPACE"," ",490],["T_VARIABLE","$key",490],";",["T_WHITESPACE","\n            ",490],"}",["T_WHITESPACE","\n        ",491],"}",["T_WHITESPACE","\n\n        ",492],["T_RETURN","return",494],["T_WHITESPACE"," ",494],["T_VARIABLE","$failedKeys",494],";",["T_WHITESPACE","\n    ",494],"}",["T_WHITESPACE","\n\n    ",495],["T_DOC_COMMENT","\/**\n     * Returns whether there is a cache entry with a specified key.\n     * This method is required by the interface [[\\ArrayAccess]].\n     * @param string $key a key identifying the cached value\n     * @return bool\n     *\/",497],["T_WHITESPACE","\n    ",502],["T_PUBLIC","public",503],["T_WHITESPACE"," ",503],["T_FUNCTION","function",503],["T_WHITESPACE"," ",503],["T_STRING","offsetExists",503],"(",["T_VARIABLE","$key",503],")",["T_WHITESPACE","\n    ",503],"{",["T_WHITESPACE","\n        ",504],["T_RETURN","return",505],["T_WHITESPACE"," ",505],["T_VARIABLE","$this",505],["T_OBJECT_OPERATOR","->",505],["T_STRING","get",505],"(",["T_VARIABLE","$key",505],")",["T_WHITESPACE"," ",505],["T_IS_NOT_IDENTICAL","!==",505],["T_WHITESPACE"," ",505],["T_STRING","false",505],";",["T_WHITESPACE","\n    ",505],"}",["T_WHITESPACE","\n\n    ",506],["T_DOC_COMMENT","\/**\n     * Retrieves the value from cache with a specified key.\n     * This method is required by the interface [[\\ArrayAccess]].\n     * @param string $key a key identifying the cached value\n     * @return mixed the value stored in cache, false if the value is not in the cache or expired.\n     *\/",508],["T_WHITESPACE","\n    ",513],["T_PUBLIC","public",514],["T_WHITESPACE"," ",514],["T_FUNCTION","function",514],["T_WHITESPACE"," ",514],["T_STRING","offsetGet",514],"(",["T_VARIABLE","$key",514],")",["T_WHITESPACE","\n    ",514],"{",["T_WHITESPACE","\n        ",515],["T_RETURN","return",516],["T_WHITESPACE"," ",516],["T_VARIABLE","$this",516],["T_OBJECT_OPERATOR","->",516],["T_STRING","get",516],"(",["T_VARIABLE","$key",516],")",";",["T_WHITESPACE","\n    ",516],"}",["T_WHITESPACE","\n\n    ",517],["T_DOC_COMMENT","\/**\n     * Stores the value identified by a key into cache.\n     * If the cache already contains such a key, the existing value will be\n     * replaced with the new ones. To add expiration and dependencies, use the [[set()]] method.\n     * This method is required by the interface [[\\ArrayAccess]].\n     * @param string $key the key identifying the value to be cached\n     * @param mixed $value the value to be cached\n     *\/",519],["T_WHITESPACE","\n    ",526],["T_PUBLIC","public",527],["T_WHITESPACE"," ",527],["T_FUNCTION","function",527],["T_WHITESPACE"," ",527],["T_STRING","offsetSet",527],"(",["T_VARIABLE","$key",527],",",["T_WHITESPACE"," ",527],["T_VARIABLE","$value",527],")",["T_WHITESPACE","\n    ",527],"{",["T_WHITESPACE","\n        ",528],["T_VARIABLE","$this",529],["T_OBJECT_OPERATOR","->",529],["T_STRING","set",529],"(",["T_VARIABLE","$key",529],",",["T_WHITESPACE"," ",529],["T_VARIABLE","$value",529],")",";",["T_WHITESPACE","\n    ",529],"}",["T_WHITESPACE","\n\n    ",530],["T_DOC_COMMENT","\/**\n     * Deletes the value with the specified key from cache\n     * This method is required by the interface [[\\ArrayAccess]].\n     * @param string $key the key of the value to be deleted\n     *\/",532],["T_WHITESPACE","\n    ",536],["T_PUBLIC","public",537],["T_WHITESPACE"," ",537],["T_FUNCTION","function",537],["T_WHITESPACE"," ",537],["T_STRING","offsetUnset",537],"(",["T_VARIABLE","$key",537],")",["T_WHITESPACE","\n    ",537],"{",["T_WHITESPACE","\n        ",538],["T_VARIABLE","$this",539],["T_OBJECT_OPERATOR","->",539],["T_STRING","delete",539],"(",["T_VARIABLE","$key",539],")",";",["T_WHITESPACE","\n    ",539],"}",["T_WHITESPACE","\n\n    ",540],["T_DOC_COMMENT","\/**\n     * Method combines both [[set()]] and [[get()]] methods to retrieve value identified by a $key,\n     * or to store the result of $closure execution if there is no cache available for the $key.\n     *\n     * Usage example:\n     *\n     * ```php\n     * public function getTopProducts($count = 10) {\n     *     $cache = $this->cache; \/\/ Could be Yii::$app->cache\n     *     return $cache->getOrSet(['top-n-products', 'n' => $count], function ($cache) use ($count) {\n     *         return Products::find()->mostPopular()->limit(10)->all();\n     *     }, 1000);\n     * }\n     * ```\n     *\n     * @param mixed $key a key identifying the value to be cached. This can be a simple string or\n     * a complex data structure consisting of factors representing the key.\n     * @param \\Closure $closure the closure that will be used to generate a value to be cached.\n     * In case $closure returns `false`, the value will not be cached.\n     * @param int $duration default duration in seconds before the cache will expire. If not set,\n     * [[defaultDuration]] value will be used.\n     * @param Dependency $dependency dependency of the cached item. If the dependency changes,\n     * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].\n     * This parameter is ignored if [[serializer]] is `false`.\n     * @return mixed result of $closure execution\n     * @since 2.0.11\n     *\/",542],["T_WHITESPACE","\n    ",568],["T_PUBLIC","public",569],["T_WHITESPACE"," ",569],["T_FUNCTION","function",569],["T_WHITESPACE"," ",569],["T_STRING","getOrSet",569],"(",["T_VARIABLE","$key",569],",",["T_WHITESPACE"," ",569],["T_NS_SEPARATOR","\\",569],["T_STRING","Closure",569],["T_WHITESPACE"," ",569],["T_VARIABLE","$closure",569],",",["T_WHITESPACE"," ",569],["T_VARIABLE","$duration",569],["T_WHITESPACE"," ",569],"=",["T_WHITESPACE"," ",569],["T_STRING","null",569],",",["T_WHITESPACE"," ",569],["T_VARIABLE","$dependency",569],["T_WHITESPACE"," ",569],"=",["T_WHITESPACE"," ",569],["T_STRING","null",569],")",["T_WHITESPACE","\n    ",569],"{",["T_WHITESPACE","\n        ",570],["T_IF","if",571],["T_WHITESPACE"," ",571],"(","(",["T_VARIABLE","$value",571],["T_WHITESPACE"," ",571],"=",["T_WHITESPACE"," ",571],["T_VARIABLE","$this",571],["T_OBJECT_OPERATOR","->",571],["T_STRING","get",571],"(",["T_VARIABLE","$key",571],")",")",["T_WHITESPACE"," ",571],["T_IS_NOT_IDENTICAL","!==",571],["T_WHITESPACE"," ",571],["T_STRING","false",571],")",["T_WHITESPACE"," ",571],"{",["T_WHITESPACE","\n            ",571],["T_RETURN","return",572],["T_WHITESPACE"," ",572],["T_VARIABLE","$value",572],";",["T_WHITESPACE","\n        ",572],"}",["T_WHITESPACE","\n\n        ",573],["T_VARIABLE","$value",575],["T_WHITESPACE"," ",575],"=",["T_WHITESPACE"," ",575],["T_STRING","call_user_func",575],"(",["T_VARIABLE","$closure",575],",",["T_WHITESPACE"," ",575],["T_VARIABLE","$this",575],")",";",["T_WHITESPACE","\n        ",575],["T_IF","if",576],["T_WHITESPACE"," ",576],"(","!",["T_VARIABLE","$this",576],["T_OBJECT_OPERATOR","->",576],["T_STRING","set",576],"(",["T_VARIABLE","$key",576],",",["T_WHITESPACE"," ",576],["T_VARIABLE","$value",576],",",["T_WHITESPACE"," ",576],["T_VARIABLE","$duration",576],",",["T_WHITESPACE"," ",576],["T_VARIABLE","$dependency",576],")",")",["T_WHITESPACE"," ",576],"{",["T_WHITESPACE","\n            ",576],["T_STRING","Yii",577],["T_DOUBLE_COLON","::",577],["T_STRING","warning",577],"(",["T_CONSTANT_ENCAPSED_STRING","'Failed to set cache value for key '",577],["T_WHITESPACE"," ",577],".",["T_WHITESPACE"," ",577],["T_STRING","json_encode",577],"(",["T_VARIABLE","$value",577],")",",",["T_WHITESPACE"," ",577],["T_METHOD_C","__METHOD__",577],")",";",["T_WHITESPACE","\n        ",577],"}",["T_WHITESPACE","\n\n        ",578],["T_RETURN","return",580],["T_WHITESPACE"," ",580],["T_VARIABLE","$value",580],";",["T_WHITESPACE","\n    ",580],"}",["T_WHITESPACE","\n",581],"}",["T_WHITESPACE","\n",582]]