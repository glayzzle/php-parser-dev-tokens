[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","db",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * ActiveQueryInterface defines the common interface to be implemented by active record query classes.\n *\n * That are methods for either normal queries that return active records but also relational queries\n * in which the query represents a relation between two active record classes and will return related\n * records only.\n *\n * A class implementing this interface should also use [[ActiveQueryTrait]] and [[ActiveRelationTrait]].\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @author Carsten Brandt <mail@cebe.cc>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","ActiveQueryInterface",23],["T_WHITESPACE"," ",23],["T_EXTENDS","extends",23],["T_WHITESPACE"," ",23],["T_STRING","QueryInterface",23],["T_WHITESPACE","\n",23],"{",["T_WHITESPACE","\n    ",24],["T_DOC_COMMENT","\/**\n     * Sets the [[asArray]] property.\n     * @param bool $value whether to return the query results in terms of arrays instead of Active Records.\n     * @return $this the query object itself\n     *\/",25],["T_WHITESPACE","\n    ",29],["T_PUBLIC","public",30],["T_WHITESPACE"," ",30],["T_FUNCTION","function",30],["T_WHITESPACE"," ",30],["T_STRING","asArray",30],"(",["T_VARIABLE","$value",30],["T_WHITESPACE"," ",30],"=",["T_WHITESPACE"," ",30],["T_STRING","true",30],")",";",["T_WHITESPACE","\n\n    ",30],["T_DOC_COMMENT","\/**\n     * Executes query and returns a single row of result.\n     * @param Connection $db the DB connection used to create the DB command.\n     * If `null`, the DB connection returned by [[ActiveQueryTrait::$modelClass|modelClass]] will be used.\n     * @return ActiveRecordInterface|array|null a single row of query result. Depending on the setting of [[asArray]],\n     * the query result may be either an array or an ActiveRecord object. `null` will be returned\n     * if the query results in nothing.\n     *\/",32],["T_WHITESPACE","\n    ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","one",40],"(",["T_VARIABLE","$db",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_STRING","null",40],")",";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * Sets the [[indexBy]] property.\n     * @param string|callable $column the name of the column by which the query results should be indexed by.\n     * This can also be a callable (e.g. anonymous function) that returns the index value based on the given\n     * row or model data. The signature of the callable should be:\n     *\n     * ```php\n     * \/\/ $model is an AR instance when `asArray` is false,\n     * \/\/ or an array of column values when `asArray` is true.\n     * function ($model)\n     * {\n     *     \/\/ return the index value corresponding to $model\n     * }\n     * ```\n     *\n     * @return $this the query object itself\n     *\/",42],["T_WHITESPACE","\n    ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","indexBy",59],"(",["T_VARIABLE","$column",59],")",";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * Specifies the relations with which this query should be performed.\n     *\n     * The parameters to this method can be either one or multiple strings, or a single array\n     * of relation names and the optional callbacks to customize the relations.\n     *\n     * A relation name can refer to a relation defined in [[ActiveQueryTrait::modelClass|modelClass]]\n     * or a sub-relation that stands for a relation of a related record.\n     * For example, `orders.address` means the `address` relation defined\n     * in the model class corresponding to the `orders` relation.\n     *\n     * The following are some usage examples:\n     *\n     * ```php\n     * \/\/ find customers together with their orders and country\n     * Customer::find()->with('orders', 'country')->all();\n     * \/\/ find customers together with their orders and the orders' shipping address\n     * Customer::find()->with('orders.address')->all();\n     * \/\/ find customers together with their country and orders of status 1\n     * Customer::find()->with([\n     *     'orders' => function (\\yii\\db\\ActiveQuery $query) {\n     *         $query->andWhere('status = 1');\n     *     },\n     *     'country',\n     * ])->all();\n     * ```\n     *\n     * @return $this the query object itself\n     *\/",61],["T_WHITESPACE","\n    ",89],["T_PUBLIC","public",90],["T_WHITESPACE"," ",90],["T_FUNCTION","function",90],["T_WHITESPACE"," ",90],["T_STRING","with",90],"(",")",";",["T_WHITESPACE","\n\n    ",90],["T_DOC_COMMENT","\/**\n     * Specifies the relation associated with the junction table for use in relational query.\n     * @param string $relationName the relation name. This refers to a relation declared in the [[ActiveRelationTrait::primaryModel|primaryModel]] of the relation.\n     * @param callable $callable a PHP callback for customizing the relation associated with the junction table.\n     * Its signature should be `function($query)`, where `$query` is the query to be customized.\n     * @return $this the relation object itself.\n     *\/",92],["T_WHITESPACE","\n    ",98],["T_PUBLIC","public",99],["T_WHITESPACE"," ",99],["T_FUNCTION","function",99],["T_WHITESPACE"," ",99],["T_STRING","via",99],"(",["T_VARIABLE","$relationName",99],",",["T_WHITESPACE"," ",99],["T_CALLABLE","callable",99],["T_WHITESPACE"," ",99],["T_VARIABLE","$callable",99],["T_WHITESPACE"," ",99],"=",["T_WHITESPACE"," ",99],["T_STRING","null",99],")",";",["T_WHITESPACE","\n\n    ",99],["T_DOC_COMMENT","\/**\n     * Finds the related records for the specified primary record.\n     * This method is invoked when a relation of an ActiveRecord is being accessed in a lazy fashion.\n     * @param string $name the relation name\n     * @param ActiveRecordInterface $model the primary model\n     * @return mixed the related record(s)\n     *\/",101],["T_WHITESPACE","\n    ",107],["T_PUBLIC","public",108],["T_WHITESPACE"," ",108],["T_FUNCTION","function",108],["T_WHITESPACE"," ",108],["T_STRING","findFor",108],"(",["T_VARIABLE","$name",108],",",["T_WHITESPACE"," ",108],["T_VARIABLE","$model",108],")",";",["T_WHITESPACE","\n",108],"}",["T_WHITESPACE","\n",109]]