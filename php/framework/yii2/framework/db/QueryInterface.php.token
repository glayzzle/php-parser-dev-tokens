[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","db",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * The QueryInterface defines the minimum set of methods to be implemented by a database query.\n *\n * The default implementation of this interface is provided by [[QueryTrait]].\n *\n * It has support for getting [[one]] instance or [[all]].\n * Allows pagination via [[limit]] and [[offset]].\n * Sorting is supported via [[orderBy]] and items can be limited to match some conditions using [[where]].\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @author Carsten Brandt <mail@cebe.cc>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","QueryInterface",23],["T_WHITESPACE","\n",23],"{",["T_WHITESPACE","\n    ",24],["T_DOC_COMMENT","\/**\n     * Executes the query and returns all results as an array.\n     * @param Connection $db the database connection used to execute the query.\n     * If this parameter is not given, the `db` application component will be used.\n     * @return array the query results. If the query results in nothing, an empty array will be returned.\n     *\/",25],["T_WHITESPACE","\n    ",30],["T_PUBLIC","public",31],["T_WHITESPACE"," ",31],["T_FUNCTION","function",31],["T_WHITESPACE"," ",31],["T_STRING","all",31],"(",["T_VARIABLE","$db",31],["T_WHITESPACE"," ",31],"=",["T_WHITESPACE"," ",31],["T_STRING","null",31],")",";",["T_WHITESPACE","\n\n    ",31],["T_DOC_COMMENT","\/**\n     * Executes the query and returns a single row of result.\n     * @param Connection $db the database connection used to execute the query.\n     * If this parameter is not given, the `db` application component will be used.\n     * @return array|bool the first row (in terms of an array) of the query result. False is returned if the query\n     * results in nothing.\n     *\/",33],["T_WHITESPACE","\n    ",39],["T_PUBLIC","public",40],["T_WHITESPACE"," ",40],["T_FUNCTION","function",40],["T_WHITESPACE"," ",40],["T_STRING","one",40],"(",["T_VARIABLE","$db",40],["T_WHITESPACE"," ",40],"=",["T_WHITESPACE"," ",40],["T_STRING","null",40],")",";",["T_WHITESPACE","\n\n    ",40],["T_DOC_COMMENT","\/**\n     * Returns the number of records.\n     * @param string $q the COUNT expression. Defaults to '*'.\n     * @param Connection $db the database connection used to execute the query.\n     * If this parameter is not given, the `db` application component will be used.\n     * @return int number of records.\n     *\/",42],["T_WHITESPACE","\n    ",48],["T_PUBLIC","public",49],["T_WHITESPACE"," ",49],["T_FUNCTION","function",49],["T_WHITESPACE"," ",49],["T_STRING","count",49],"(",["T_VARIABLE","$q",49],["T_WHITESPACE"," ",49],"=",["T_WHITESPACE"," ",49],["T_CONSTANT_ENCAPSED_STRING","'*'",49],",",["T_WHITESPACE"," ",49],["T_VARIABLE","$db",49],["T_WHITESPACE"," ",49],"=",["T_WHITESPACE"," ",49],["T_STRING","null",49],")",";",["T_WHITESPACE","\n\n    ",49],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the query result contains any row of data.\n     * @param Connection $db the database connection used to execute the query.\n     * If this parameter is not given, the `db` application component will be used.\n     * @return bool whether the query result contains any row of data.\n     *\/",51],["T_WHITESPACE","\n    ",56],["T_PUBLIC","public",57],["T_WHITESPACE"," ",57],["T_FUNCTION","function",57],["T_WHITESPACE"," ",57],["T_STRING","exists",57],"(",["T_VARIABLE","$db",57],["T_WHITESPACE"," ",57],"=",["T_WHITESPACE"," ",57],["T_STRING","null",57],")",";",["T_WHITESPACE","\n\n    ",57],["T_DOC_COMMENT","\/**\n     * Sets the [[indexBy]] property.\n     * @param string|callable $column the name of the column by which the query results should be indexed by.\n     * This can also be a callable (e.g. anonymous function) that returns the index value based on the given\n     * row data. The signature of the callable should be:\n     *\n     * ```php\n     * function ($row)\n     * {\n     *     \/\/ return the index value corresponding to $row\n     * }\n     * ```\n     *\n     * @return $this the query object itself\n     *\/",59],["T_WHITESPACE","\n    ",73],["T_PUBLIC","public",74],["T_WHITESPACE"," ",74],["T_FUNCTION","function",74],["T_WHITESPACE"," ",74],["T_STRING","indexBy",74],"(",["T_VARIABLE","$column",74],")",";",["T_WHITESPACE","\n\n    ",74],["T_DOC_COMMENT","\/**\n     * Sets the WHERE part of the query.\n     *\n     * The `$condition` specified as an array can be in one of the following two formats:\n     *\n     * - hash format: `['column1' => value1, 'column2' => value2, ...]`\n     * - operator format: `[operator, operand1, operand2, ...]`\n     *\n     * A condition in hash format represents the following SQL expression in general:\n     * `column1=value1 AND column2=value2 AND ...`. In case when a value is an array,\n     * an `IN` expression will be generated. And if a value is `null`, `IS NULL` will be used\n     * in the generated expression. Below are some examples:\n     *\n     * - `['type' => 1, 'status' => 2]` generates `(type = 1) AND (status = 2)`.\n     * - `['id' => [1, 2, 3], 'status' => 2]` generates `(id IN (1, 2, 3)) AND (status = 2)`.\n     * - `['status' => null]` generates `status IS NULL`.\n     *\n     * A condition in operator format generates the SQL expression according to the specified operator, which\n     * can be one of the following:\n     *\n     * - **and**: the operands should be concatenated together using `AND`. For example,\n     *   `['and', 'id=1', 'id=2']` will generate `id=1 AND id=2`. If an operand is an array,\n     *   it will be converted into a string using the rules described here. For example,\n     *   `['and', 'type=1', ['or', 'id=1', 'id=2']]` will generate `type=1 AND (id=1 OR id=2)`.\n     *   The method will *not* do any quoting or escaping.\n     *\n     * - **or**: similar to the `and` operator except that the operands are concatenated using `OR`. For example,\n     *   `['or', ['type' => [7, 8, 9]], ['id' => [1, 2, 3]]]` will generate `(type IN (7, 8, 9) OR (id IN (1, 2, 3)))`.\n     *\n     * - **not**: this will take only one operand and build the negation of it by prefixing the query string with `NOT`.\n     *   For example `['not', ['attribute' => null]]` will result in the condition `NOT (attribute IS NULL)`.\n     *\n     * - **between**: operand 1 should be the column name, and operand 2 and 3 should be the\n     *   starting and ending values of the range that the column is in.\n     *   For example, `['between', 'id', 1, 10]` will generate `id BETWEEN 1 AND 10`.\n     *\n     * - **not between**: similar to `between` except the `BETWEEN` is replaced with `NOT BETWEEN`\n     *   in the generated condition.\n     *\n     * - **in**: operand 1 should be a column or DB expression, and operand 2 be an array representing\n     *   the range of the values that the column or DB expression should be in. For example,\n     *   `['in', 'id', [1, 2, 3]]` will generate `id IN (1, 2, 3)`.\n     *   The method will properly quote the column name and escape values in the range.\n     *\n     *   To create a composite `IN` condition you can use and array for the column name and value, where the values are indexed by the column name:\n     *   `['in', ['id', 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']] ]`.\n     *\n     *   You may also specify a sub-query that is used to get the values for the `IN`-condition:\n     *   `['in', 'user_id', (new Query())->select('id')->from('users')->where(['active' => 1])]`\n     *\n     * - **not in**: similar to the `in` operator except that `IN` is replaced with `NOT IN` in the generated condition.\n     *\n     * - **like**: operand 1 should be a column or DB expression, and operand 2 be a string or an array representing\n     *   the values that the column or DB expression should be like.\n     *   For example, `['like', 'name', 'tester']` will generate `name LIKE '%tester%'`.\n     *   When the value range is given as an array, multiple `LIKE` predicates will be generated and concatenated\n     *   using `AND`. For example, `['like', 'name', ['test', 'sample']]` will generate\n     *   `name LIKE '%test%' AND name LIKE '%sample%'`.\n     *   The method will properly quote the column name and escape special characters in the values.\n     *   Sometimes, you may want to add the percentage characters to the matching value by yourself, you may supply\n     *   a third operand `false` to do so. For example, `['like', 'name', '%tester', false]` will generate `name LIKE '%tester'`.\n     *\n     * - **or like**: similar to the `like` operator except that `OR` is used to concatenate the `LIKE`\n     *   predicates when operand 2 is an array.\n     *\n     * - **not like**: similar to the `like` operator except that `LIKE` is replaced with `NOT LIKE`\n     *   in the generated condition.\n     *\n     * - **or not like**: similar to the `not like` operator except that `OR` is used to concatenate\n     *   the `NOT LIKE` predicates.\n     *\n     * - **exists**: operand 1 is a query object that used to build an `EXISTS` condition. For example\n     *   `['exists', (new Query())->select('id')->from('users')->where(['active' => 1])]` will result in the following SQL expression:\n     *   `EXISTS (SELECT \"id\" FROM \"users\" WHERE \"active\"=1)`.\n     *\n     * - **not exists**: similar to the `exists` operator except that `EXISTS` is replaced with `NOT EXISTS` in the generated condition.\n     *\n     * - Additionally you can specify arbitrary operators as follows: A condition of `['>=', 'id', 10]` will result in the\n     *   following SQL expression: `id >= 10`.\n     *\n     * @param string|array $condition the conditions that should be put in the WHERE part.\n     * @return $this the query object itself\n     * @see andWhere()\n     * @see orWhere()\n     *\/",76],["T_WHITESPACE","\n    ",160],["T_PUBLIC","public",161],["T_WHITESPACE"," ",161],["T_FUNCTION","function",161],["T_WHITESPACE"," ",161],["T_STRING","where",161],"(",["T_VARIABLE","$condition",161],")",";",["T_WHITESPACE","\n\n    ",161],["T_DOC_COMMENT","\/**\n     * Adds an additional WHERE condition to the existing one.\n     * The new condition and the existing one will be joined using the 'AND' operator.\n     * @param string|array $condition the new WHERE condition. Please refer to [[where()]]\n     * on how to specify this parameter.\n     * @return $this the query object itself\n     * @see where()\n     * @see orWhere()\n     *\/",163],["T_WHITESPACE","\n    ",171],["T_PUBLIC","public",172],["T_WHITESPACE"," ",172],["T_FUNCTION","function",172],["T_WHITESPACE"," ",172],["T_STRING","andWhere",172],"(",["T_VARIABLE","$condition",172],")",";",["T_WHITESPACE","\n\n    ",172],["T_DOC_COMMENT","\/**\n     * Adds an additional WHERE condition to the existing one.\n     * The new condition and the existing one will be joined using the 'OR' operator.\n     * @param string|array $condition the new WHERE condition. Please refer to [[where()]]\n     * on how to specify this parameter.\n     * @return $this the query object itself\n     * @see where()\n     * @see andWhere()\n     *\/",174],["T_WHITESPACE","\n    ",182],["T_PUBLIC","public",183],["T_WHITESPACE"," ",183],["T_FUNCTION","function",183],["T_WHITESPACE"," ",183],["T_STRING","orWhere",183],"(",["T_VARIABLE","$condition",183],")",";",["T_WHITESPACE","\n\n    ",183],["T_DOC_COMMENT","\/**\n     * Sets the WHERE part of the query ignoring empty parameters.\n     *\n     * @param array $condition the conditions that should be put in the WHERE part. Please refer to [[where()]]\n     * on how to specify this parameter.\n     * @return $this the query object itself\n     * @see andFilterWhere()\n     * @see orFilterWhere()\n     *\/",185],["T_WHITESPACE","\n    ",193],["T_PUBLIC","public",194],["T_WHITESPACE"," ",194],["T_FUNCTION","function",194],["T_WHITESPACE"," ",194],["T_STRING","filterWhere",194],"(",["T_ARRAY","array",194],["T_WHITESPACE"," ",194],["T_VARIABLE","$condition",194],")",";",["T_WHITESPACE","\n\n    ",194],["T_DOC_COMMENT","\/**\n     * Adds an additional WHERE condition to the existing one ignoring empty parameters.\n     * The new condition and the existing one will be joined using the 'AND' operator.\n     * @param array $condition the new WHERE condition. Please refer to [[where()]]\n     * on how to specify this parameter.\n     * @return $this the query object itself\n     * @see filterWhere()\n     * @see orFilterWhere()\n     *\/",196],["T_WHITESPACE","\n    ",204],["T_PUBLIC","public",205],["T_WHITESPACE"," ",205],["T_FUNCTION","function",205],["T_WHITESPACE"," ",205],["T_STRING","andFilterWhere",205],"(",["T_ARRAY","array",205],["T_WHITESPACE"," ",205],["T_VARIABLE","$condition",205],")",";",["T_WHITESPACE","\n\n    ",205],["T_DOC_COMMENT","\/**\n     * Adds an additional WHERE condition to the existing one ignoring empty parameters.\n     * The new condition and the existing one will be joined using the 'OR' operator.\n     * @param array $condition the new WHERE condition. Please refer to [[where()]]\n     * on how to specify this parameter.\n     * @return $this the query object itself\n     * @see filterWhere()\n     * @see andFilterWhere()\n     *\/",207],["T_WHITESPACE","\n    ",215],["T_PUBLIC","public",216],["T_WHITESPACE"," ",216],["T_FUNCTION","function",216],["T_WHITESPACE"," ",216],["T_STRING","orFilterWhere",216],"(",["T_ARRAY","array",216],["T_WHITESPACE"," ",216],["T_VARIABLE","$condition",216],")",";",["T_WHITESPACE","\n\n    ",216],["T_DOC_COMMENT","\/**\n     * Sets the ORDER BY part of the query.\n     * @param string|array $columns the columns (and the directions) to be ordered by.\n     * Columns can be specified in either a string (e.g. \"id ASC, name DESC\") or an array\n     * (e.g. `['id' => SORT_ASC, 'name' => SORT_DESC]`).\n     * The method will automatically quote the column names unless a column contains some parenthesis\n     * (which means the column contains a DB expression).\n     * @return $this the query object itself\n     * @see addOrderBy()\n     *\/",218],["T_WHITESPACE","\n    ",227],["T_PUBLIC","public",228],["T_WHITESPACE"," ",228],["T_FUNCTION","function",228],["T_WHITESPACE"," ",228],["T_STRING","orderBy",228],"(",["T_VARIABLE","$columns",228],")",";",["T_WHITESPACE","\n\n    ",228],["T_DOC_COMMENT","\/**\n     * Adds additional ORDER BY columns to the query.\n     * @param string|array $columns the columns (and the directions) to be ordered by.\n     * Columns can be specified in either a string (e.g. \"id ASC, name DESC\") or an array\n     * (e.g. `['id' => SORT_ASC, 'name' => SORT_DESC]`).\n     * The method will automatically quote the column names unless a column contains some parenthesis\n     * (which means the column contains a DB expression).\n     * @return $this the query object itself\n     * @see orderBy()\n     *\/",230],["T_WHITESPACE","\n    ",239],["T_PUBLIC","public",240],["T_WHITESPACE"," ",240],["T_FUNCTION","function",240],["T_WHITESPACE"," ",240],["T_STRING","addOrderBy",240],"(",["T_VARIABLE","$columns",240],")",";",["T_WHITESPACE","\n\n    ",240],["T_DOC_COMMENT","\/**\n     * Sets the LIMIT part of the query.\n     * @param int $limit the limit. Use null or negative value to disable limit.\n     * @return $this the query object itself\n     *\/",242],["T_WHITESPACE","\n    ",246],["T_PUBLIC","public",247],["T_WHITESPACE"," ",247],["T_FUNCTION","function",247],["T_WHITESPACE"," ",247],["T_STRING","limit",247],"(",["T_VARIABLE","$limit",247],")",";",["T_WHITESPACE","\n\n    ",247],["T_DOC_COMMENT","\/**\n     * Sets the OFFSET part of the query.\n     * @param int $offset the offset. Use null or negative value to disable offset.\n     * @return $this the query object itself\n     *\/",249],["T_WHITESPACE","\n    ",253],["T_PUBLIC","public",254],["T_WHITESPACE"," ",254],["T_FUNCTION","function",254],["T_WHITESPACE"," ",254],["T_STRING","offset",254],"(",["T_VARIABLE","$offset",254],")",";",["T_WHITESPACE","\n\n    ",254],["T_DOC_COMMENT","\/**\n     * Sets whether to emulate query execution, preventing any interaction with data storage.\n     * After this mode is enabled, methods, returning query results like [[one()]], [[all()]], [[exists()]]\n     * and so on, will return empty or false values.\n     * You should use this method in case your program logic indicates query should not return any results, like\n     * in case you set false where condition like `0=1`.\n     * @param boolean $value whether to prevent query execution.\n     * @return $this the query object itself.\n     * @since 2.0.11\n     *\/",256],["T_WHITESPACE","\n    ",265],["T_PUBLIC","public",266],["T_WHITESPACE"," ",266],["T_FUNCTION","function",266],["T_WHITESPACE"," ",266],["T_STRING","emulateExecution",266],"(",["T_VARIABLE","$value",266],["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_STRING","true",266],")",";",["T_WHITESPACE","\n",266],"}",["T_WHITESPACE","\n",267]]