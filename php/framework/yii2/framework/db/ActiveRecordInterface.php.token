[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","db",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * ActiveRecordInterface\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @author Carsten Brandt <mail@cebe.cc>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",16],["T_INTERFACE","interface",17],["T_WHITESPACE"," ",17],["T_STRING","ActiveRecordInterface",17],["T_WHITESPACE","\n",17],"{",["T_WHITESPACE","\n    ",18],["T_DOC_COMMENT","\/**\n     * Returns the primary key **name(s)** for this AR class.\n     *\n     * Note that an array should be returned even when the record only has a single primary key.\n     *\n     * For the primary key **value** see [[getPrimaryKey()]] instead.\n     *\n     * @return string[] the primary key name(s) for this AR class.\n     *\/",19],["T_WHITESPACE","\n    ",27],["T_PUBLIC","public",28],["T_WHITESPACE"," ",28],["T_STATIC","static",28],["T_WHITESPACE"," ",28],["T_FUNCTION","function",28],["T_WHITESPACE"," ",28],["T_STRING","primaryKey",28],"(",")",";",["T_WHITESPACE","\n\n    ",28],["T_DOC_COMMENT","\/**\n     * Returns the list of all attribute names of the record.\n     * @return array list of attribute names.\n     *\/",30],["T_WHITESPACE","\n    ",33],["T_PUBLIC","public",34],["T_WHITESPACE"," ",34],["T_FUNCTION","function",34],["T_WHITESPACE"," ",34],["T_STRING","attributes",34],"(",")",";",["T_WHITESPACE","\n\n    ",34],["T_DOC_COMMENT","\/**\n     * Returns the named attribute value.\n     * If this record is the result of a query and the attribute is not loaded,\n     * `null` will be returned.\n     * @param string $name the attribute name\n     * @return mixed the attribute value. `null` if the attribute is not set or does not exist.\n     * @see hasAttribute()\n     *\/",36],["T_WHITESPACE","\n    ",43],["T_PUBLIC","public",44],["T_WHITESPACE"," ",44],["T_FUNCTION","function",44],["T_WHITESPACE"," ",44],["T_STRING","getAttribute",44],"(",["T_VARIABLE","$name",44],")",";",["T_WHITESPACE","\n\n    ",44],["T_DOC_COMMENT","\/**\n     * Sets the named attribute value.\n     * @param string $name the attribute name.\n     * @param mixed $value the attribute value.\n     * @see hasAttribute()\n     *\/",46],["T_WHITESPACE","\n    ",51],["T_PUBLIC","public",52],["T_WHITESPACE"," ",52],["T_FUNCTION","function",52],["T_WHITESPACE"," ",52],["T_STRING","setAttribute",52],"(",["T_VARIABLE","$name",52],",",["T_WHITESPACE"," ",52],["T_VARIABLE","$value",52],")",";",["T_WHITESPACE","\n\n    ",52],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the record has an attribute with the specified name.\n     * @param string $name the name of the attribute\n     * @return bool whether the record has an attribute with the specified name.\n     *\/",54],["T_WHITESPACE","\n    ",58],["T_PUBLIC","public",59],["T_WHITESPACE"," ",59],["T_FUNCTION","function",59],["T_WHITESPACE"," ",59],["T_STRING","hasAttribute",59],"(",["T_VARIABLE","$name",59],")",";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * Returns the primary key value(s).\n     * @param bool $asArray whether to return the primary key value as an array. If true,\n     * the return value will be an array with attribute names as keys and attribute values as values.\n     * Note that for composite primary keys, an array will always be returned regardless of this parameter value.\n     * @return mixed the primary key value. An array (attribute name => attribute value) is returned if the primary key\n     * is composite or `$asArray` is true. A string is returned otherwise (`null` will be returned if\n     * the key value is `null`).\n     *\/",61],["T_WHITESPACE","\n    ",69],["T_PUBLIC","public",70],["T_WHITESPACE"," ",70],["T_FUNCTION","function",70],["T_WHITESPACE"," ",70],["T_STRING","getPrimaryKey",70],"(",["T_VARIABLE","$asArray",70],["T_WHITESPACE"," ",70],"=",["T_WHITESPACE"," ",70],["T_STRING","false",70],")",";",["T_WHITESPACE","\n\n    ",70],["T_DOC_COMMENT","\/**\n     * Returns the old primary key value(s).\n     * This refers to the primary key value that is populated into the record\n     * after executing a find method (e.g. find(), findOne()).\n     * The value remains unchanged even if the primary key attribute is manually assigned with a different value.\n     * @param bool $asArray whether to return the primary key value as an array. If true,\n     * the return value will be an array with column name as key and column value as value.\n     * If this is `false` (default), a scalar value will be returned for non-composite primary key.\n     * @property mixed The old primary key value. An array (column name => column value) is\n     * returned if the primary key is composite. A string is returned otherwise (`null` will be\n     * returned if the key value is `null`).\n     * @return mixed the old primary key value. An array (column name => column value) is returned if the primary key\n     * is composite or `$asArray` is true. A string is returned otherwise (`null` will be returned if\n     * the key value is `null`).\n     *\/",72],["T_WHITESPACE","\n    ",86],["T_PUBLIC","public",87],["T_WHITESPACE"," ",87],["T_FUNCTION","function",87],["T_WHITESPACE"," ",87],["T_STRING","getOldPrimaryKey",87],"(",["T_VARIABLE","$asArray",87],["T_WHITESPACE"," ",87],"=",["T_WHITESPACE"," ",87],["T_STRING","false",87],")",";",["T_WHITESPACE","\n\n    ",87],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the given set of attributes represents the primary key for this model\n     * @param array $keys the set of attributes to check\n     * @return bool whether the given set of attributes represents the primary key for this model\n     *\/",89],["T_WHITESPACE","\n    ",93],["T_PUBLIC","public",94],["T_WHITESPACE"," ",94],["T_STATIC","static",94],["T_WHITESPACE"," ",94],["T_FUNCTION","function",94],["T_WHITESPACE"," ",94],["T_STRING","isPrimaryKey",94],"(",["T_VARIABLE","$keys",94],")",";",["T_WHITESPACE","\n\n    ",94],["T_DOC_COMMENT","\/**\n     * Creates an [[ActiveQueryInterface]] instance for query purpose.\n     *\n     * The returned [[ActiveQueryInterface]] instance can be further customized by calling\n     * methods defined in [[ActiveQueryInterface]] before `one()` or `all()` is called to return\n     * populated ActiveRecord instances. For example,\n     *\n     * ```php\n     * \/\/ find the customer whose ID is 1\n     * $customer = Customer::find()->where(['id' => 1])->one();\n     *\n     * \/\/ find all active customers and order them by their age:\n     * $customers = Customer::find()\n     *     ->where(['status' => 1])\n     *     ->orderBy('age')\n     *     ->all();\n     * ```\n     *\n     * This method is also called by [[BaseActiveRecord::hasOne()]] and [[BaseActiveRecord::hasMany()]] to\n     * create a relational query.\n     *\n     * You may override this method to return a customized query. For example,\n     *\n     * ```php\n     * class Customer extends ActiveRecord\n     * {\n     *     public static function find()\n     *     {\n     *         \/\/ use CustomerQuery instead of the default ActiveQuery\n     *         return new CustomerQuery(get_called_class());\n     *     }\n     * }\n     * ```\n     *\n     * The following code shows how to apply a default condition for all queries:\n     *\n     * ```php\n     * class Customer extends ActiveRecord\n     * {\n     *     public static function find()\n     *     {\n     *         return parent::find()->where(['deleted' => false]);\n     *     }\n     * }\n     *\n     * \/\/ Use andWhere()\/orWhere() to apply the default condition\n     * \/\/ SELECT FROM customer WHERE `deleted`=:deleted AND age>30\n     * $customers = Customer::find()->andWhere('age>30')->all();\n     *\n     * \/\/ Use where() to ignore the default condition\n     * \/\/ SELECT FROM customer WHERE age>30\n     * $customers = Customer::find()->where('age>30')->all();\n     *\n     * @return ActiveQueryInterface the newly created [[ActiveQueryInterface]] instance.\n     *\/",96],["T_WHITESPACE","\n    ",150],["T_PUBLIC","public",151],["T_WHITESPACE"," ",151],["T_STATIC","static",151],["T_WHITESPACE"," ",151],["T_FUNCTION","function",151],["T_WHITESPACE"," ",151],["T_STRING","find",151],"(",")",";",["T_WHITESPACE","\n\n    ",151],["T_DOC_COMMENT","\/**\n     * Returns a single active record model instance by a primary key or an array of column values.\n     *\n     * The method accepts:\n     *\n     *  - a scalar value (integer or string): query by a single primary key value and return the\n     *    corresponding record (or `null` if not found).\n     *  - a non-associative array: query by a list of primary key values and return the\n     *    first record (or `null` if not found).\n     *  - an associative array of name-value pairs: query by a set of attribute values and return a single record\n     *    matching all of them (or `null` if not found). Note that `['id' => 1, 2]` is treated as a non-associative array.\n     *\n     * That this method will automatically call the `one()` method and return an [[ActiveRecordInterface|ActiveRecord]]\n     * instance. For example,\n     *\n     * ```php\n     * \/\/ find a single customer whose primary key value is 10\n     * $customer = Customer::findOne(10);\n     *\n     * \/\/ the above code is equivalent to:\n     * $customer = Customer::find()->where(['id' => 10])->one();\n     *\n     * \/\/ find the first customer whose age is 30 and whose status is 1\n     * $customer = Customer::findOne(['age' => 30, 'status' => 1]);\n     *\n     * \/\/ the above code is equivalent to:\n     * $customer = Customer::find()->where(['age' => 30, 'status' => 1])->one();\n     * ```\n     *\n     * @param mixed $condition primary key value or a set of column values\n     * @return static ActiveRecord instance matching the condition, or `null` if nothing matches.\n     *\/",153],["T_WHITESPACE","\n    ",184],["T_PUBLIC","public",185],["T_WHITESPACE"," ",185],["T_STATIC","static",185],["T_WHITESPACE"," ",185],["T_FUNCTION","function",185],["T_WHITESPACE"," ",185],["T_STRING","findOne",185],"(",["T_VARIABLE","$condition",185],")",";",["T_WHITESPACE","\n\n    ",185],["T_DOC_COMMENT","\/**\n     * Returns a list of active record models that match the specified primary key value(s) or a set of column values.\n     *\n     * The method accepts:\n     *\n     *  - a scalar value (integer or string): query by a single primary key value and return an array containing the\n     *    corresponding record (or an empty array if not found).\n     *  - a non-associative array: query by a list of primary key values and return the\n     *    corresponding records (or an empty array if none was found).\n     *    Note that an empty condition will result in an empty result as it will be interpreted as a search for\n     *    primary keys and not an empty `WHERE` condition.\n     *  - an associative array of name-value pairs: query by a set of attribute values and return an array of records\n     *    matching all of them (or an empty array if none was found). Note that `['id' => 1, 2]` is treated as\n     *    a non-associative array.\n     *\n     * This method will automatically call the `all()` method and return an array of [[ActiveRecordInterface|ActiveRecord]]\n     * instances. For example,\n     *\n     * ```php\n     * \/\/ find the customers whose primary key value is 10\n     * $customers = Customer::findAll(10);\n     *\n     * \/\/ the above code is equivalent to:\n     * $customers = Customer::find()->where(['id' => 10])->all();\n     *\n     * \/\/ find the customers whose primary key value is 10, 11 or 12.\n     * $customers = Customer::findAll([10, 11, 12]);\n     *\n     * \/\/ the above code is equivalent to:\n     * $customers = Customer::find()->where(['id' => [10, 11, 12]])->all();\n     *\n     * \/\/ find customers whose age is 30 and whose status is 1\n     * $customers = Customer::findAll(['age' => 30, 'status' => 1]);\n     *\n     * \/\/ the above code is equivalent to:\n     * $customers = Customer::find()->where(['age' => 30, 'status' => 1])->all();\n     * ```\n     *\n     * @param mixed $condition primary key value or a set of column values\n     * @return array an array of ActiveRecord instance, or an empty array if nothing matches.\n     *\/",187],["T_WHITESPACE","\n    ",227],["T_PUBLIC","public",228],["T_WHITESPACE"," ",228],["T_STATIC","static",228],["T_WHITESPACE"," ",228],["T_FUNCTION","function",228],["T_WHITESPACE"," ",228],["T_STRING","findAll",228],"(",["T_VARIABLE","$condition",228],")",";",["T_WHITESPACE","\n\n    ",228],["T_DOC_COMMENT","\/**\n     * Updates records using the provided attribute values and conditions.\n     * For example, to change the status to be 1 for all customers whose status is 2:\n     *\n     * ```php\n     * Customer::updateAll(['status' => 1], ['status' => '2']);\n     * ```\n     *\n     * @param array $attributes attribute values (name-value pairs) to be saved for the record.\n     * Unlike [[update()]] these are not going to be validated.\n     * @param array $condition the condition that matches the records that should get updated.\n     * Please refer to [[QueryInterface::where()]] on how to specify this parameter.\n     * An empty condition will match all records.\n     * @return int the number of rows updated\n     *\/",230],["T_WHITESPACE","\n    ",244],["T_PUBLIC","public",245],["T_WHITESPACE"," ",245],["T_STATIC","static",245],["T_WHITESPACE"," ",245],["T_FUNCTION","function",245],["T_WHITESPACE"," ",245],["T_STRING","updateAll",245],"(",["T_VARIABLE","$attributes",245],",",["T_WHITESPACE"," ",245],["T_VARIABLE","$condition",245],["T_WHITESPACE"," ",245],"=",["T_WHITESPACE"," ",245],["T_STRING","null",245],")",";",["T_WHITESPACE","\n\n    ",245],["T_DOC_COMMENT","\/**\n     * Deletes records using the provided conditions.\n     * WARNING: If you do not specify any condition, this method will delete ALL rows in the table.\n     *\n     * For example, to delete all customers whose status is 3:\n     *\n     * ```php\n     * Customer::deleteAll([status = 3]);\n     * ```\n     *\n     * @param array $condition the condition that matches the records that should get deleted.\n     * Please refer to [[QueryInterface::where()]] on how to specify this parameter.\n     * An empty condition will match all records.\n     * @return int the number of rows deleted\n     *\/",247],["T_WHITESPACE","\n    ",261],["T_PUBLIC","public",262],["T_WHITESPACE"," ",262],["T_STATIC","static",262],["T_WHITESPACE"," ",262],["T_FUNCTION","function",262],["T_WHITESPACE"," ",262],["T_STRING","deleteAll",262],"(",["T_VARIABLE","$condition",262],["T_WHITESPACE"," ",262],"=",["T_WHITESPACE"," ",262],["T_STRING","null",262],")",";",["T_WHITESPACE","\n\n    ",262],["T_DOC_COMMENT","\/**\n     * Saves the current record.\n     *\n     * This method will call [[insert()]] when [[getIsNewRecord()|isNewRecord]] is true, or [[update()]]\n     * when [[getIsNewRecord()|isNewRecord]] is false.\n     *\n     * For example, to save a customer record:\n     *\n     * ```php\n     * $customer = new Customer; \/\/ or $customer = Customer::findOne($id);\n     * $customer->name = $name;\n     * $customer->email = $email;\n     * $customer->save();\n     * ```\n     *\n     * @param bool $runValidation whether to perform validation (calling [[\\yii\\base\\Model::validate()|validate()]])\n     * before saving the record. Defaults to `true`. If the validation fails, the record\n     * will not be saved to the database and this method will return `false`.\n     * @param array $attributeNames list of attribute names that need to be saved. Defaults to `null`,\n     * meaning all attributes that are loaded from DB will be saved.\n     * @return bool whether the saving succeeded (i.e. no validation errors occurred).\n     *\/",264],["T_WHITESPACE","\n    ",285],["T_PUBLIC","public",286],["T_WHITESPACE"," ",286],["T_FUNCTION","function",286],["T_WHITESPACE"," ",286],["T_STRING","save",286],"(",["T_VARIABLE","$runValidation",286],["T_WHITESPACE"," ",286],"=",["T_WHITESPACE"," ",286],["T_STRING","true",286],",",["T_WHITESPACE"," ",286],["T_VARIABLE","$attributeNames",286],["T_WHITESPACE"," ",286],"=",["T_WHITESPACE"," ",286],["T_STRING","null",286],")",";",["T_WHITESPACE","\n\n    ",286],["T_DOC_COMMENT","\/**\n     * Inserts the record into the database using the attribute values of this record.\n     *\n     * Usage example:\n     *\n     * ```php\n     * $customer = new Customer;\n     * $customer->name = $name;\n     * $customer->email = $email;\n     * $customer->insert();\n     * ```\n     *\n     * @param bool $runValidation whether to perform validation (calling [[\\yii\\base\\Model::validate()|validate()]])\n     * before saving the record. Defaults to `true`. If the validation fails, the record\n     * will not be saved to the database and this method will return `false`.\n     * @param array $attributes list of attributes that need to be saved. Defaults to `null`,\n     * meaning all attributes that are loaded from DB will be saved.\n     * @return bool whether the attributes are valid and the record is inserted successfully.\n     *\/",288],["T_WHITESPACE","\n    ",306],["T_PUBLIC","public",307],["T_WHITESPACE"," ",307],["T_FUNCTION","function",307],["T_WHITESPACE"," ",307],["T_STRING","insert",307],"(",["T_VARIABLE","$runValidation",307],["T_WHITESPACE"," ",307],"=",["T_WHITESPACE"," ",307],["T_STRING","true",307],",",["T_WHITESPACE"," ",307],["T_VARIABLE","$attributes",307],["T_WHITESPACE"," ",307],"=",["T_WHITESPACE"," ",307],["T_STRING","null",307],")",";",["T_WHITESPACE","\n\n    ",307],["T_DOC_COMMENT","\/**\n     * Saves the changes to this active record into the database.\n     *\n     * Usage example:\n     *\n     * ```php\n     * $customer = Customer::findOne($id);\n     * $customer->name = $name;\n     * $customer->email = $email;\n     * $customer->update();\n     * ```\n     *\n     * @param bool $runValidation whether to perform validation (calling [[\\yii\\base\\Model::validate()|validate()]])\n     * before saving the record. Defaults to `true`. If the validation fails, the record\n     * will not be saved to the database and this method will return `false`.\n     * @param array $attributeNames list of attributes that need to be saved. Defaults to `null`,\n     * meaning all attributes that are loaded from DB will be saved.\n     * @return int|bool the number of rows affected, or `false` if validation fails\n     * or updating process is stopped for other reasons.\n     * Note that it is possible that the number of rows affected is 0, even though the\n     * update execution is successful.\n     *\/",309],["T_WHITESPACE","\n    ",330],["T_PUBLIC","public",331],["T_WHITESPACE"," ",331],["T_FUNCTION","function",331],["T_WHITESPACE"," ",331],["T_STRING","update",331],"(",["T_VARIABLE","$runValidation",331],["T_WHITESPACE"," ",331],"=",["T_WHITESPACE"," ",331],["T_STRING","true",331],",",["T_WHITESPACE"," ",331],["T_VARIABLE","$attributeNames",331],["T_WHITESPACE"," ",331],"=",["T_WHITESPACE"," ",331],["T_STRING","null",331],")",";",["T_WHITESPACE","\n\n    ",331],["T_DOC_COMMENT","\/**\n     * Deletes the record from the database.\n     *\n     * @return int|bool the number of rows deleted, or `false` if the deletion is unsuccessful for some reason.\n     * Note that it is possible that the number of rows deleted is 0, even though the deletion execution is successful.\n     *\/",333],["T_WHITESPACE","\n    ",338],["T_PUBLIC","public",339],["T_WHITESPACE"," ",339],["T_FUNCTION","function",339],["T_WHITESPACE"," ",339],["T_STRING","delete",339],"(",")",";",["T_WHITESPACE","\n\n    ",339],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the current record is new (not saved in the database).\n     * @return bool whether the record is new and should be inserted when calling [[save()]].\n     *\/",341],["T_WHITESPACE","\n    ",344],["T_PUBLIC","public",345],["T_WHITESPACE"," ",345],["T_FUNCTION","function",345],["T_WHITESPACE"," ",345],["T_STRING","getIsNewRecord",345],"(",")",";",["T_WHITESPACE","\n\n    ",345],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the given active record is the same as the current one.\n     * Two [[getIsNewRecord()|new]] records are considered to be not equal.\n     * @param static $record record to compare to\n     * @return bool whether the two active records refer to the same row in the same database table.\n     *\/",347],["T_WHITESPACE","\n    ",352],["T_PUBLIC","public",353],["T_WHITESPACE"," ",353],["T_FUNCTION","function",353],["T_WHITESPACE"," ",353],["T_STRING","equals",353],"(",["T_VARIABLE","$record",353],")",";",["T_WHITESPACE","\n\n    ",353],["T_DOC_COMMENT","\/**\n     * Returns the relation object with the specified name.\n     * A relation is defined by a getter method which returns an object implementing the [[ActiveQueryInterface]]\n     * (normally this would be a relational [[ActiveQuery]] object).\n     * It can be declared in either the ActiveRecord class itself or one of its behaviors.\n     * @param string $name the relation name, e.g. `orders` for a relation defined via `getOrders()` method (case-sensitive).\n     * @param bool $throwException whether to throw exception if the relation does not exist.\n     * @return ActiveQueryInterface the relational query object\n     *\/",355],["T_WHITESPACE","\n    ",363],["T_PUBLIC","public",364],["T_WHITESPACE"," ",364],["T_FUNCTION","function",364],["T_WHITESPACE"," ",364],["T_STRING","getRelation",364],"(",["T_VARIABLE","$name",364],",",["T_WHITESPACE"," ",364],["T_VARIABLE","$throwException",364],["T_WHITESPACE"," ",364],"=",["T_WHITESPACE"," ",364],["T_STRING","true",364],")",";",["T_WHITESPACE","\n\n    ",364],["T_DOC_COMMENT","\/**\n     * Populates the named relation with the related records.\n     * Note that this method does not check if the relation exists or not.\n     * @param string $name the relation name, e.g. `orders` for a relation defined via `getOrders()` method (case-sensitive).\n     * @param ActiveRecordInterface|array|null $records the related records to be populated into the relation.\n     * @since 2.0.8\n     *\/",366],["T_WHITESPACE","\n    ",372],["T_PUBLIC","public",373],["T_WHITESPACE"," ",373],["T_FUNCTION","function",373],["T_WHITESPACE"," ",373],["T_STRING","populateRelation",373],"(",["T_VARIABLE","$name",373],",",["T_WHITESPACE"," ",373],["T_VARIABLE","$records",373],")",";",["T_WHITESPACE","\n\n    ",373],["T_DOC_COMMENT","\/**\n     * Establishes the relationship between two records.\n     *\n     * The relationship is established by setting the foreign key value(s) in one record\n     * to be the corresponding primary key value(s) in the other record.\n     * The record with the foreign key will be saved into database without performing validation.\n     *\n     * If the relationship involves a junction table, a new row will be inserted into the\n     * junction table which contains the primary key values from both records.\n     *\n     * This method requires that the primary key value is not `null`.\n     *\n     * @param string $name the case sensitive name of the relationship, e.g. `orders` for a relation defined via `getOrders()` method.\n     * @param static $model the record to be linked with the current one.\n     * @param array $extraColumns additional column values to be saved into the junction table.\n     * This parameter is only meaningful for a relationship involving a junction table\n     * (i.e., a relation set with [[ActiveQueryInterface::via()]]).\n     *\/",375],["T_WHITESPACE","\n    ",392],["T_PUBLIC","public",393],["T_WHITESPACE"," ",393],["T_FUNCTION","function",393],["T_WHITESPACE"," ",393],["T_STRING","link",393],"(",["T_VARIABLE","$name",393],",",["T_WHITESPACE"," ",393],["T_VARIABLE","$model",393],",",["T_WHITESPACE"," ",393],["T_VARIABLE","$extraColumns",393],["T_WHITESPACE"," ",393],"=",["T_WHITESPACE"," ",393],"[","]",")",";",["T_WHITESPACE","\n\n    ",393],["T_DOC_COMMENT","\/**\n     * Destroys the relationship between two records.\n     *\n     * The record with the foreign key of the relationship will be deleted if `$delete` is true.\n     * Otherwise, the foreign key will be set `null` and the record will be saved without validation.\n     *\n     * @param string $name the case sensitive name of the relationship, e.g. `orders` for a relation defined via `getOrders()` method.\n     * @param static $model the model to be unlinked from the current one.\n     * @param bool $delete whether to delete the model that contains the foreign key.\n     * If false, the model's foreign key will be set `null` and saved.\n     * If true, the model containing the foreign key will be deleted.\n     *\/",395],["T_WHITESPACE","\n    ",406],["T_PUBLIC","public",407],["T_WHITESPACE"," ",407],["T_FUNCTION","function",407],["T_WHITESPACE"," ",407],["T_STRING","unlink",407],"(",["T_VARIABLE","$name",407],",",["T_WHITESPACE"," ",407],["T_VARIABLE","$model",407],",",["T_WHITESPACE"," ",407],["T_VARIABLE","$delete",407],["T_WHITESPACE"," ",407],"=",["T_WHITESPACE"," ",407],["T_STRING","false",407],")",";",["T_WHITESPACE","\n\n    ",407],["T_DOC_COMMENT","\/**\n     * Returns the connection used by this AR class.\n     * @return mixed the database connection used by this AR class.\n     *\/",409],["T_WHITESPACE","\n    ",412],["T_PUBLIC","public",413],["T_WHITESPACE"," ",413],["T_STATIC","static",413],["T_WHITESPACE"," ",413],["T_FUNCTION","function",413],["T_WHITESPACE"," ",413],["T_STRING","getDb",413],"(",")",";",["T_WHITESPACE","\n",413],"}",["T_WHITESPACE","\n",414]]