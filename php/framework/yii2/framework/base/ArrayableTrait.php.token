[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","base",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","yii",11],["T_NS_SEPARATOR","\\",11],["T_STRING","helpers",11],["T_NS_SEPARATOR","\\",11],["T_STRING","ArrayHelper",11],";",["T_WHITESPACE","\n",11],["T_USE","use",12],["T_WHITESPACE"," ",12],["T_STRING","yii",12],["T_NS_SEPARATOR","\\",12],["T_STRING","web",12],["T_NS_SEPARATOR","\\",12],["T_STRING","Link",12],";",["T_WHITESPACE","\n",12],["T_USE","use",13],["T_WHITESPACE"," ",13],["T_STRING","yii",13],["T_NS_SEPARATOR","\\",13],["T_STRING","web",13],["T_NS_SEPARATOR","\\",13],["T_STRING","Linkable",13],";",["T_WHITESPACE","\n\n",13],["T_DOC_COMMENT","\/**\n * ArrayableTrait provides a common implementation of the [[Arrayable]] interface.\n *\n * ArrayableTrait implements [[toArray()]] by respecting the field definitions as declared\n * in [[fields()]] and [[extraFields()]].\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",15],["T_WHITESPACE","\n",23],["T_TRAIT","trait",24],["T_WHITESPACE"," ",24],["T_STRING","ArrayableTrait",24],["T_WHITESPACE","\n",24],"{",["T_WHITESPACE","\n    ",25],["T_DOC_COMMENT","\/**\n     * Returns the list of fields that should be returned by default by [[toArray()]] when no specific fields are specified.\n     *\n     * A field is a named element in the returned array by [[toArray()]].\n     *\n     * This method should return an array of field names or field definitions.\n     * If the former, the field name will be treated as an object property name whose value will be used\n     * as the field value. If the latter, the array key should be the field name while the array value should be\n     * the corresponding field definition which can be either an object property name or a PHP callable\n     * returning the corresponding field value. The signature of the callable should be:\n     *\n     * ```php\n     * function ($model, $field) {\n     *     \/\/ return field value\n     * }\n     * ```\n     *\n     * For example, the following code declares four fields:\n     *\n     * - `email`: the field name is the same as the property name `email`;\n     * - `firstName` and `lastName`: the field names are `firstName` and `lastName`, and their\n     *   values are obtained from the `first_name` and `last_name` properties;\n     * - `fullName`: the field name is `fullName`. Its value is obtained by concatenating `first_name`\n     *   and `last_name`.\n     *\n     * ```php\n     * return [\n     *     'email',\n     *     'firstName' => 'first_name',\n     *     'lastName' => 'last_name',\n     *     'fullName' => function () {\n     *         return $this->first_name . ' ' . $this->last_name;\n     *     },\n     * ];\n     * ```\n     *\n     * In this method, you may also want to return different lists of fields based on some context\n     * information. For example, depending on the privilege of the current application user,\n     * you may return different sets of visible fields or filter out some fields.\n     *\n     * The default implementation of this method returns the public object member variables indexed by themselves.\n     *\n     * @return array the list of field names or field definitions.\n     * @see toArray()\n     *\/",26],["T_WHITESPACE","\n    ",70],["T_PUBLIC","public",71],["T_WHITESPACE"," ",71],["T_FUNCTION","function",71],["T_WHITESPACE"," ",71],["T_STRING","fields",71],"(",")",["T_WHITESPACE","\n    ",71],"{",["T_WHITESPACE","\n        ",72],["T_VARIABLE","$fields",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_STRING","array_keys",73],"(",["T_STRING","Yii",73],["T_DOUBLE_COLON","::",73],["T_STRING","getObjectVars",73],"(",["T_VARIABLE","$this",73],")",")",";",["T_WHITESPACE","\n        ",73],["T_RETURN","return",74],["T_WHITESPACE"," ",74],["T_STRING","array_combine",74],"(",["T_VARIABLE","$fields",74],",",["T_WHITESPACE"," ",74],["T_VARIABLE","$fields",74],")",";",["T_WHITESPACE","\n    ",74],"}",["T_WHITESPACE","\n\n    ",75],["T_DOC_COMMENT","\/**\n     * Returns the list of fields that can be expanded further and returned by [[toArray()]].\n     *\n     * This method is similar to [[fields()]] except that the list of fields returned\n     * by this method are not returned by default by [[toArray()]]. Only when field names\n     * to be expanded are explicitly specified when calling [[toArray()]], will their values\n     * be exported.\n     *\n     * The default implementation returns an empty array.\n     *\n     * You may override this method to return a list of expandable fields based on some context information\n     * (e.g. the current application user).\n     *\n     * @return array the list of expandable field names or field definitions. Please refer\n     * to [[fields()]] on the format of the return value.\n     * @see toArray()\n     * @see fields()\n     *\/",77],["T_WHITESPACE","\n    ",94],["T_PUBLIC","public",95],["T_WHITESPACE"," ",95],["T_FUNCTION","function",95],["T_WHITESPACE"," ",95],["T_STRING","extraFields",95],"(",")",["T_WHITESPACE","\n    ",95],"{",["T_WHITESPACE","\n        ",96],["T_RETURN","return",97],["T_WHITESPACE"," ",97],"[","]",";",["T_WHITESPACE","\n    ",97],"}",["T_WHITESPACE","\n\n    ",98],["T_DOC_COMMENT","\/**\n     * Converts the model into an array.\n     *\n     * This method will first identify which fields to be included in the resulting array by calling [[resolveFields()]].\n     * It will then turn the model into an array with these fields. If `$recursive` is true,\n     * any embedded objects will also be converted into arrays.\n     *\n     * If the model implements the [[Linkable]] interface, the resulting array will also have a `_link` element\n     * which refers to a list of links as specified by the interface.\n     *\n     * @param array $fields the fields being requested. If empty, all fields as specified by [[fields()]] will be returned.\n     * @param array $expand the additional fields being requested for exporting. Only fields declared in [[extraFields()]]\n     * will be considered.\n     * @param bool $recursive whether to recursively return array representation of embedded objects.\n     * @return array the array representation of the object\n     *\/",100],["T_WHITESPACE","\n    ",115],["T_PUBLIC","public",116],["T_WHITESPACE"," ",116],["T_FUNCTION","function",116],["T_WHITESPACE"," ",116],["T_STRING","toArray",116],"(",["T_ARRAY","array",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$fields",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],"[","]",",",["T_WHITESPACE"," ",116],["T_ARRAY","array",116],["T_WHITESPACE"," ",116],["T_VARIABLE","$expand",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],"[","]",",",["T_WHITESPACE"," ",116],["T_VARIABLE","$recursive",116],["T_WHITESPACE"," ",116],"=",["T_WHITESPACE"," ",116],["T_STRING","true",116],")",["T_WHITESPACE","\n    ",116],"{",["T_WHITESPACE","\n        ",117],["T_VARIABLE","$data",118],["T_WHITESPACE"," ",118],"=",["T_WHITESPACE"," ",118],"[","]",";",["T_WHITESPACE","\n        ",118],["T_FOREACH","foreach",119],["T_WHITESPACE"," ",119],"(",["T_VARIABLE","$this",119],["T_OBJECT_OPERATOR","->",119],["T_STRING","resolveFields",119],"(",["T_VARIABLE","$fields",119],",",["T_WHITESPACE"," ",119],["T_VARIABLE","$expand",119],")",["T_WHITESPACE"," ",119],["T_AS","as",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$field",119],["T_WHITESPACE"," ",119],["T_DOUBLE_ARROW","=>",119],["T_WHITESPACE"," ",119],["T_VARIABLE","$definition",119],")",["T_WHITESPACE"," ",119],"{",["T_WHITESPACE","\n            ",119],["T_VARIABLE","$data",120],"[",["T_VARIABLE","$field",120],"]",["T_WHITESPACE"," ",120],"=",["T_WHITESPACE"," ",120],["T_STRING","is_string",120],"(",["T_VARIABLE","$definition",120],")",["T_WHITESPACE"," ",120],"?",["T_WHITESPACE"," ",120],["T_VARIABLE","$this",120],["T_OBJECT_OPERATOR","->",120],["T_VARIABLE","$definition",120],["T_WHITESPACE"," ",120],":",["T_WHITESPACE"," ",120],["T_STRING","call_user_func",120],"(",["T_VARIABLE","$definition",120],",",["T_WHITESPACE"," ",120],["T_VARIABLE","$this",120],",",["T_WHITESPACE"," ",120],["T_VARIABLE","$field",120],")",";",["T_WHITESPACE","\n        ",120],"}",["T_WHITESPACE","\n\n        ",121],["T_IF","if",123],["T_WHITESPACE"," ",123],"(",["T_VARIABLE","$this",123],["T_WHITESPACE"," ",123],["T_INSTANCEOF","instanceof",123],["T_WHITESPACE"," ",123],["T_STRING","Linkable",123],")",["T_WHITESPACE"," ",123],"{",["T_WHITESPACE","\n            ",123],["T_VARIABLE","$data",124],"[",["T_CONSTANT_ENCAPSED_STRING","'_links'",124],"]",["T_WHITESPACE"," ",124],"=",["T_WHITESPACE"," ",124],["T_STRING","Link",124],["T_DOUBLE_COLON","::",124],["T_STRING","serialize",124],"(",["T_VARIABLE","$this",124],["T_OBJECT_OPERATOR","->",124],["T_STRING","getLinks",124],"(",")",")",";",["T_WHITESPACE","\n        ",124],"}",["T_WHITESPACE","\n\n        ",125],["T_RETURN","return",127],["T_WHITESPACE"," ",127],["T_VARIABLE","$recursive",127],["T_WHITESPACE"," ",127],"?",["T_WHITESPACE"," ",127],["T_STRING","ArrayHelper",127],["T_DOUBLE_COLON","::",127],["T_STRING","toArray",127],"(",["T_VARIABLE","$data",127],")",["T_WHITESPACE"," ",127],":",["T_WHITESPACE"," ",127],["T_VARIABLE","$data",127],";",["T_WHITESPACE","\n    ",127],"}",["T_WHITESPACE","\n\n    ",128],["T_DOC_COMMENT","\/**\n     * Determines which fields can be returned by [[toArray()]].\n     * This method will check the requested fields against those declared in [[fields()]] and [[extraFields()]]\n     * to determine which fields can be returned.\n     * @param array $fields the fields being requested for exporting\n     * @param array $expand the additional fields being requested for exporting\n     * @return array the list of fields to be exported. The array keys are the field names, and the array values\n     * are the corresponding object property names or PHP callables returning the field values.\n     *\/",130],["T_WHITESPACE","\n    ",138],["T_PROTECTED","protected",139],["T_WHITESPACE"," ",139],["T_FUNCTION","function",139],["T_WHITESPACE"," ",139],["T_STRING","resolveFields",139],"(",["T_ARRAY","array",139],["T_WHITESPACE"," ",139],["T_VARIABLE","$fields",139],",",["T_WHITESPACE"," ",139],["T_ARRAY","array",139],["T_WHITESPACE"," ",139],["T_VARIABLE","$expand",139],")",["T_WHITESPACE","\n    ",139],"{",["T_WHITESPACE","\n        ",140],["T_VARIABLE","$result",141],["T_WHITESPACE"," ",141],"=",["T_WHITESPACE"," ",141],"[","]",";",["T_WHITESPACE","\n\n        ",141],["T_FOREACH","foreach",143],["T_WHITESPACE"," ",143],"(",["T_VARIABLE","$this",143],["T_OBJECT_OPERATOR","->",143],["T_STRING","fields",143],"(",")",["T_WHITESPACE"," ",143],["T_AS","as",143],["T_WHITESPACE"," ",143],["T_VARIABLE","$field",143],["T_WHITESPACE"," ",143],["T_DOUBLE_ARROW","=>",143],["T_WHITESPACE"," ",143],["T_VARIABLE","$definition",143],")",["T_WHITESPACE"," ",143],"{",["T_WHITESPACE","\n            ",143],["T_IF","if",144],["T_WHITESPACE"," ",144],"(",["T_STRING","is_int",144],"(",["T_VARIABLE","$field",144],")",")",["T_WHITESPACE"," ",144],"{",["T_WHITESPACE","\n                ",144],["T_VARIABLE","$field",145],["T_WHITESPACE"," ",145],"=",["T_WHITESPACE"," ",145],["T_VARIABLE","$definition",145],";",["T_WHITESPACE","\n            ",145],"}",["T_WHITESPACE","\n            ",146],["T_IF","if",147],["T_WHITESPACE"," ",147],"(",["T_EMPTY","empty",147],"(",["T_VARIABLE","$fields",147],")",["T_WHITESPACE"," ",147],["T_BOOLEAN_OR","||",147],["T_WHITESPACE"," ",147],["T_STRING","in_array",147],"(",["T_VARIABLE","$field",147],",",["T_WHITESPACE"," ",147],["T_VARIABLE","$fields",147],",",["T_WHITESPACE"," ",147],["T_STRING","true",147],")",")",["T_WHITESPACE"," ",147],"{",["T_WHITESPACE","\n                ",147],["T_VARIABLE","$result",148],"[",["T_VARIABLE","$field",148],"]",["T_WHITESPACE"," ",148],"=",["T_WHITESPACE"," ",148],["T_VARIABLE","$definition",148],";",["T_WHITESPACE","\n            ",148],"}",["T_WHITESPACE","\n        ",149],"}",["T_WHITESPACE","\n\n        ",150],["T_IF","if",152],["T_WHITESPACE"," ",152],"(",["T_EMPTY","empty",152],"(",["T_VARIABLE","$expand",152],")",")",["T_WHITESPACE"," ",152],"{",["T_WHITESPACE","\n            ",152],["T_RETURN","return",153],["T_WHITESPACE"," ",153],["T_VARIABLE","$result",153],";",["T_WHITESPACE","\n        ",153],"}",["T_WHITESPACE","\n\n        ",154],["T_FOREACH","foreach",156],["T_WHITESPACE"," ",156],"(",["T_VARIABLE","$this",156],["T_OBJECT_OPERATOR","->",156],["T_STRING","extraFields",156],"(",")",["T_WHITESPACE"," ",156],["T_AS","as",156],["T_WHITESPACE"," ",156],["T_VARIABLE","$field",156],["T_WHITESPACE"," ",156],["T_DOUBLE_ARROW","=>",156],["T_WHITESPACE"," ",156],["T_VARIABLE","$definition",156],")",["T_WHITESPACE"," ",156],"{",["T_WHITESPACE","\n            ",156],["T_IF","if",157],["T_WHITESPACE"," ",157],"(",["T_STRING","is_int",157],"(",["T_VARIABLE","$field",157],")",")",["T_WHITESPACE"," ",157],"{",["T_WHITESPACE","\n                ",157],["T_VARIABLE","$field",158],["T_WHITESPACE"," ",158],"=",["T_WHITESPACE"," ",158],["T_VARIABLE","$definition",158],";",["T_WHITESPACE","\n            ",158],"}",["T_WHITESPACE","\n            ",159],["T_IF","if",160],["T_WHITESPACE"," ",160],"(",["T_STRING","in_array",160],"(",["T_VARIABLE","$field",160],",",["T_WHITESPACE"," ",160],["T_VARIABLE","$expand",160],",",["T_WHITESPACE"," ",160],["T_STRING","true",160],")",")",["T_WHITESPACE"," ",160],"{",["T_WHITESPACE","\n                ",160],["T_VARIABLE","$result",161],"[",["T_VARIABLE","$field",161],"]",["T_WHITESPACE"," ",161],"=",["T_WHITESPACE"," ",161],["T_VARIABLE","$definition",161],";",["T_WHITESPACE","\n            ",161],"}",["T_WHITESPACE","\n        ",162],"}",["T_WHITESPACE","\n\n        ",163],["T_RETURN","return",165],["T_WHITESPACE"," ",165],["T_VARIABLE","$result",165],";",["T_WHITESPACE","\n    ",165],"}",["T_WHITESPACE","\n",166],"}",["T_WHITESPACE","\n",167]]