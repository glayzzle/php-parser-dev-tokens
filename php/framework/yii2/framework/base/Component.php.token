[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","base",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n\n",10],["T_DOC_COMMENT","\/**\n * Component is the base class that implements the *property*, *event* and *behavior* features.\n *\n * Component provides the *event* and *behavior* features, in addition to the *property* feature which is implemented in\n * its parent class [[\\yii\\base\\Object|Object]].\n *\n * Event is a way to \"inject\" custom code into existing code at certain places. For example, a comment object can trigger\n * an \"add\" event when the user adds a comment. We can write custom code and attach it to this event so that when the event\n * is triggered (i.e. comment will be added), our custom code will be executed.\n *\n * An event is identified by a name that should be unique within the class it is defined at. Event names are *case-sensitive*.\n *\n * One or multiple PHP callbacks, called *event handlers*, can be attached to an event. You can call [[trigger()]] to\n * raise an event. When an event is raised, the event handlers will be invoked automatically in the order they were\n * attached.\n *\n * To attach an event handler to an event, call [[on()]]:\n *\n * ```php\n * $post->on('update', function ($event) {\n *     \/\/ send email notification\n * });\n * ```\n *\n * In the above, an anonymous function is attached to the \"update\" event of the post. You may attach\n * the following types of event handlers:\n *\n * - anonymous function: `function ($event) { ... }`\n * - object method: `[$object, 'handleAdd']`\n * - static class method: `['Page', 'handleAdd']`\n * - global function: `'handleAdd'`\n *\n * The signature of an event handler should be like the following:\n *\n * ```php\n * function foo($event)\n * ```\n *\n * where `$event` is an [[Event]] object which includes parameters associated with the event.\n *\n * You can also attach a handler to an event when configuring a component with a configuration array.\n * The syntax is like the following:\n *\n * ```php\n * [\n *     'on add' => function ($event) { ... }\n * ]\n * ```\n *\n * where `on add` stands for attaching an event to the `add` event.\n *\n * Sometimes, you may want to associate extra data with an event handler when you attach it to an event\n * and then access it when the handler is invoked. You may do so by\n *\n * ```php\n * $post->on('update', function ($event) {\n *     \/\/ the data can be accessed via $event->data\n * }, $data);\n * ```\n *\n * A behavior is an instance of [[Behavior]] or its child class. A component can be attached with one or multiple\n * behaviors. When a behavior is attached to a component, its public properties and methods can be accessed via the\n * component directly, as if the component owns those properties and methods.\n *\n * To attach a behavior to a component, declare it in [[behaviors()]], or explicitly call [[attachBehavior]]. Behaviors\n * declared in [[behaviors()]] are automatically attached to the corresponding component.\n *\n * One can also attach a behavior to a component when configuring it with a configuration array. The syntax is like the\n * following:\n *\n * ```php\n * [\n *     'as tree' => [\n *         'class' => 'Tree',\n *     ],\n * ]\n * ```\n *\n * where `as tree` stands for attaching a behavior named `tree`, and the array will be passed to [[\\Yii::createObject()]]\n * to create the behavior object.\n *\n * For more details and usage information on Component, see the [guide article on components](guide:concept-components).\n *\n * @property Behavior[] $behaviors List of behaviors attached to this component. This property is read-only.\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",12],["T_WHITESPACE","\n",99],["T_CLASS","class",100],["T_WHITESPACE"," ",100],["T_STRING","Component",100],["T_WHITESPACE"," ",100],["T_EXTENDS","extends",100],["T_WHITESPACE"," ",100],["T_STRING","Object",100],["T_WHITESPACE","\n",100],"{",["T_WHITESPACE","\n    ",101],["T_DOC_COMMENT","\/**\n     * @var array the attached event handlers (event name => handlers)\n     *\/",102],["T_WHITESPACE","\n    ",104],["T_PRIVATE","private",105],["T_WHITESPACE"," ",105],["T_VARIABLE","$_events",105],["T_WHITESPACE"," ",105],"=",["T_WHITESPACE"," ",105],"[","]",";",["T_WHITESPACE","\n    ",105],["T_DOC_COMMENT","\/**\n     * @var Behavior[]|null the attached behaviors (behavior name => behavior). This is `null` when not initialized.\n     *\/",106],["T_WHITESPACE","\n    ",108],["T_PRIVATE","private",109],["T_WHITESPACE"," ",109],["T_VARIABLE","$_behaviors",109],";",["T_WHITESPACE","\n\n\n    ",109],["T_DOC_COMMENT","\/**\n     * Returns the value of a component property.\n     * This method will check in the following order and act accordingly:\n     *\n     *  - a property defined by a getter: return the getter result\n     *  - a property of a behavior: return the behavior property value\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `$value = $component->property;`.\n     * @param string $name the property name\n     * @return mixed the property value or the value of a behavior's property\n     * @throws UnknownPropertyException if the property is not defined\n     * @throws InvalidCallException if the property is write-only.\n     * @see __set()\n     *\/",112],["T_WHITESPACE","\n    ",126],["T_PUBLIC","public",127],["T_WHITESPACE"," ",127],["T_FUNCTION","function",127],["T_WHITESPACE"," ",127],["T_STRING","__get",127],"(",["T_VARIABLE","$name",127],")",["T_WHITESPACE","\n    ",127],"{",["T_WHITESPACE","\n        ",128],["T_VARIABLE","$getter",129],["T_WHITESPACE"," ",129],"=",["T_WHITESPACE"," ",129],["T_CONSTANT_ENCAPSED_STRING","'get'",129],["T_WHITESPACE"," ",129],".",["T_WHITESPACE"," ",129],["T_VARIABLE","$name",129],";",["T_WHITESPACE","\n        ",129],["T_IF","if",130],["T_WHITESPACE"," ",130],"(",["T_STRING","method_exists",130],"(",["T_VARIABLE","$this",130],",",["T_WHITESPACE"," ",130],["T_VARIABLE","$getter",130],")",")",["T_WHITESPACE"," ",130],"{",["T_WHITESPACE","\n            ",130],["T_COMMENT","\/\/ read property, e.g. getName()\n",131],["T_WHITESPACE","            ",132],["T_RETURN","return",132],["T_WHITESPACE"," ",132],["T_VARIABLE","$this",132],["T_OBJECT_OPERATOR","->",132],["T_VARIABLE","$getter",132],"(",")",";",["T_WHITESPACE","\n        ",132],"}",["T_WHITESPACE","\n\n        ",133],["T_COMMENT","\/\/ behavior property\n",135],["T_WHITESPACE","        ",136],["T_VARIABLE","$this",136],["T_OBJECT_OPERATOR","->",136],["T_STRING","ensureBehaviors",136],"(",")",";",["T_WHITESPACE","\n        ",136],["T_FOREACH","foreach",137],["T_WHITESPACE"," ",137],"(",["T_VARIABLE","$this",137],["T_OBJECT_OPERATOR","->",137],["T_STRING","_behaviors",137],["T_WHITESPACE"," ",137],["T_AS","as",137],["T_WHITESPACE"," ",137],["T_VARIABLE","$behavior",137],")",["T_WHITESPACE"," ",137],"{",["T_WHITESPACE","\n            ",137],["T_IF","if",138],["T_WHITESPACE"," ",138],"(",["T_VARIABLE","$behavior",138],["T_OBJECT_OPERATOR","->",138],["T_STRING","canGetProperty",138],"(",["T_VARIABLE","$name",138],")",")",["T_WHITESPACE"," ",138],"{",["T_WHITESPACE","\n                ",138],["T_RETURN","return",139],["T_WHITESPACE"," ",139],["T_VARIABLE","$behavior",139],["T_OBJECT_OPERATOR","->",139],["T_VARIABLE","$name",139],";",["T_WHITESPACE","\n            ",139],"}",["T_WHITESPACE","\n        ",140],"}",["T_WHITESPACE","\n\n        ",141],["T_IF","if",143],["T_WHITESPACE"," ",143],"(",["T_STRING","method_exists",143],"(",["T_VARIABLE","$this",143],",",["T_WHITESPACE"," ",143],["T_CONSTANT_ENCAPSED_STRING","'set'",143],["T_WHITESPACE"," ",143],".",["T_WHITESPACE"," ",143],["T_VARIABLE","$name",143],")",")",["T_WHITESPACE"," ",143],"{",["T_WHITESPACE","\n            ",143],["T_THROW","throw",144],["T_WHITESPACE"," ",144],["T_NEW","new",144],["T_WHITESPACE"," ",144],["T_STRING","InvalidCallException",144],"(",["T_CONSTANT_ENCAPSED_STRING","'Getting write-only property: '",144],["T_WHITESPACE"," ",144],".",["T_WHITESPACE"," ",144],["T_STRING","get_class",144],"(",["T_VARIABLE","$this",144],")",["T_WHITESPACE"," ",144],".",["T_WHITESPACE"," ",144],["T_CONSTANT_ENCAPSED_STRING","'::'",144],["T_WHITESPACE"," ",144],".",["T_WHITESPACE"," ",144],["T_VARIABLE","$name",144],")",";",["T_WHITESPACE","\n        ",144],"}",["T_WHITESPACE","\n\n        ",145],["T_THROW","throw",147],["T_WHITESPACE"," ",147],["T_NEW","new",147],["T_WHITESPACE"," ",147],["T_STRING","UnknownPropertyException",147],"(",["T_CONSTANT_ENCAPSED_STRING","'Getting unknown property: '",147],["T_WHITESPACE"," ",147],".",["T_WHITESPACE"," ",147],["T_STRING","get_class",147],"(",["T_VARIABLE","$this",147],")",["T_WHITESPACE"," ",147],".",["T_WHITESPACE"," ",147],["T_CONSTANT_ENCAPSED_STRING","'::'",147],["T_WHITESPACE"," ",147],".",["T_WHITESPACE"," ",147],["T_VARIABLE","$name",147],")",";",["T_WHITESPACE","\n    ",147],"}",["T_WHITESPACE","\n\n    ",148],["T_DOC_COMMENT","\/**\n     * Sets the value of a component property.\n     * This method will check in the following order and act accordingly:\n     *\n     *  - a property defined by a setter: set the property value\n     *  - an event in the format of \"on xyz\": attach the handler to the event \"xyz\"\n     *  - a behavior in the format of \"as xyz\": attach the behavior named as \"xyz\"\n     *  - a property of a behavior: set the behavior property value\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `$component->property = $value;`.\n     * @param string $name the property name or the event name\n     * @param mixed $value the property value\n     * @throws UnknownPropertyException if the property is not defined\n     * @throws InvalidCallException if the property is read-only.\n     * @see __get()\n     *\/",150],["T_WHITESPACE","\n    ",166],["T_PUBLIC","public",167],["T_WHITESPACE"," ",167],["T_FUNCTION","function",167],["T_WHITESPACE"," ",167],["T_STRING","__set",167],"(",["T_VARIABLE","$name",167],",",["T_WHITESPACE"," ",167],["T_VARIABLE","$value",167],")",["T_WHITESPACE","\n    ",167],"{",["T_WHITESPACE","\n        ",168],["T_VARIABLE","$setter",169],["T_WHITESPACE"," ",169],"=",["T_WHITESPACE"," ",169],["T_CONSTANT_ENCAPSED_STRING","'set'",169],["T_WHITESPACE"," ",169],".",["T_WHITESPACE"," ",169],["T_VARIABLE","$name",169],";",["T_WHITESPACE","\n        ",169],["T_IF","if",170],["T_WHITESPACE"," ",170],"(",["T_STRING","method_exists",170],"(",["T_VARIABLE","$this",170],",",["T_WHITESPACE"," ",170],["T_VARIABLE","$setter",170],")",")",["T_WHITESPACE"," ",170],"{",["T_WHITESPACE","\n            ",170],["T_COMMENT","\/\/ set property\n",171],["T_WHITESPACE","            ",172],["T_VARIABLE","$this",172],["T_OBJECT_OPERATOR","->",172],["T_VARIABLE","$setter",172],"(",["T_VARIABLE","$value",172],")",";",["T_WHITESPACE","\n\n            ",172],["T_RETURN","return",174],";",["T_WHITESPACE","\n        ",174],"}",["T_WHITESPACE"," ",175],["T_ELSEIF","elseif",175],["T_WHITESPACE"," ",175],"(",["T_STRING","strncmp",175],"(",["T_VARIABLE","$name",175],",",["T_WHITESPACE"," ",175],["T_CONSTANT_ENCAPSED_STRING","'on '",175],",",["T_WHITESPACE"," ",175],["T_LNUMBER","3",175],")",["T_WHITESPACE"," ",175],["T_IS_IDENTICAL","===",175],["T_WHITESPACE"," ",175],["T_LNUMBER","0",175],")",["T_WHITESPACE"," ",175],"{",["T_WHITESPACE","\n            ",175],["T_COMMENT","\/\/ on event: attach event handler\n",176],["T_WHITESPACE","            ",177],["T_VARIABLE","$this",177],["T_OBJECT_OPERATOR","->",177],["T_STRING","on",177],"(",["T_STRING","trim",177],"(",["T_STRING","substr",177],"(",["T_VARIABLE","$name",177],",",["T_WHITESPACE"," ",177],["T_LNUMBER","3",177],")",")",",",["T_WHITESPACE"," ",177],["T_VARIABLE","$value",177],")",";",["T_WHITESPACE","\n\n            ",177],["T_RETURN","return",179],";",["T_WHITESPACE","\n        ",179],"}",["T_WHITESPACE"," ",180],["T_ELSEIF","elseif",180],["T_WHITESPACE"," ",180],"(",["T_STRING","strncmp",180],"(",["T_VARIABLE","$name",180],",",["T_WHITESPACE"," ",180],["T_CONSTANT_ENCAPSED_STRING","'as '",180],",",["T_WHITESPACE"," ",180],["T_LNUMBER","3",180],")",["T_WHITESPACE"," ",180],["T_IS_IDENTICAL","===",180],["T_WHITESPACE"," ",180],["T_LNUMBER","0",180],")",["T_WHITESPACE"," ",180],"{",["T_WHITESPACE","\n            ",180],["T_COMMENT","\/\/ as behavior: attach behavior\n",181],["T_WHITESPACE","            ",182],["T_VARIABLE","$name",182],["T_WHITESPACE"," ",182],"=",["T_WHITESPACE"," ",182],["T_STRING","trim",182],"(",["T_STRING","substr",182],"(",["T_VARIABLE","$name",182],",",["T_WHITESPACE"," ",182],["T_LNUMBER","3",182],")",")",";",["T_WHITESPACE","\n            ",182],["T_VARIABLE","$this",183],["T_OBJECT_OPERATOR","->",183],["T_STRING","attachBehavior",183],"(",["T_VARIABLE","$name",183],",",["T_WHITESPACE"," ",183],["T_VARIABLE","$value",183],["T_WHITESPACE"," ",183],["T_INSTANCEOF","instanceof",183],["T_WHITESPACE"," ",183],["T_STRING","Behavior",183],["T_WHITESPACE"," ",183],"?",["T_WHITESPACE"," ",183],["T_VARIABLE","$value",183],["T_WHITESPACE"," ",183],":",["T_WHITESPACE"," ",183],["T_STRING","Yii",183],["T_DOUBLE_COLON","::",183],["T_STRING","createObject",183],"(",["T_VARIABLE","$value",183],")",")",";",["T_WHITESPACE","\n\n            ",183],["T_RETURN","return",185],";",["T_WHITESPACE","\n        ",185],"}",["T_WHITESPACE","\n\n        ",186],["T_COMMENT","\/\/ behavior property\n",188],["T_WHITESPACE","        ",189],["T_VARIABLE","$this",189],["T_OBJECT_OPERATOR","->",189],["T_STRING","ensureBehaviors",189],"(",")",";",["T_WHITESPACE","\n        ",189],["T_FOREACH","foreach",190],["T_WHITESPACE"," ",190],"(",["T_VARIABLE","$this",190],["T_OBJECT_OPERATOR","->",190],["T_STRING","_behaviors",190],["T_WHITESPACE"," ",190],["T_AS","as",190],["T_WHITESPACE"," ",190],["T_VARIABLE","$behavior",190],")",["T_WHITESPACE"," ",190],"{",["T_WHITESPACE","\n            ",190],["T_IF","if",191],["T_WHITESPACE"," ",191],"(",["T_VARIABLE","$behavior",191],["T_OBJECT_OPERATOR","->",191],["T_STRING","canSetProperty",191],"(",["T_VARIABLE","$name",191],")",")",["T_WHITESPACE"," ",191],"{",["T_WHITESPACE","\n                ",191],["T_VARIABLE","$behavior",192],["T_OBJECT_OPERATOR","->",192],["T_VARIABLE","$name",192],["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],["T_VARIABLE","$value",192],";",["T_WHITESPACE","\n                ",192],["T_RETURN","return",193],";",["T_WHITESPACE","\n            ",193],"}",["T_WHITESPACE","\n        ",194],"}",["T_WHITESPACE","\n\n        ",195],["T_IF","if",197],["T_WHITESPACE"," ",197],"(",["T_STRING","method_exists",197],"(",["T_VARIABLE","$this",197],",",["T_WHITESPACE"," ",197],["T_CONSTANT_ENCAPSED_STRING","'get'",197],["T_WHITESPACE"," ",197],".",["T_WHITESPACE"," ",197],["T_VARIABLE","$name",197],")",")",["T_WHITESPACE"," ",197],"{",["T_WHITESPACE","\n            ",197],["T_THROW","throw",198],["T_WHITESPACE"," ",198],["T_NEW","new",198],["T_WHITESPACE"," ",198],["T_STRING","InvalidCallException",198],"(",["T_CONSTANT_ENCAPSED_STRING","'Setting read-only property: '",198],["T_WHITESPACE"," ",198],".",["T_WHITESPACE"," ",198],["T_STRING","get_class",198],"(",["T_VARIABLE","$this",198],")",["T_WHITESPACE"," ",198],".",["T_WHITESPACE"," ",198],["T_CONSTANT_ENCAPSED_STRING","'::'",198],["T_WHITESPACE"," ",198],".",["T_WHITESPACE"," ",198],["T_VARIABLE","$name",198],")",";",["T_WHITESPACE","\n        ",198],"}",["T_WHITESPACE","\n\n        ",199],["T_THROW","throw",201],["T_WHITESPACE"," ",201],["T_NEW","new",201],["T_WHITESPACE"," ",201],["T_STRING","UnknownPropertyException",201],"(",["T_CONSTANT_ENCAPSED_STRING","'Setting unknown property: '",201],["T_WHITESPACE"," ",201],".",["T_WHITESPACE"," ",201],["T_STRING","get_class",201],"(",["T_VARIABLE","$this",201],")",["T_WHITESPACE"," ",201],".",["T_WHITESPACE"," ",201],["T_CONSTANT_ENCAPSED_STRING","'::'",201],["T_WHITESPACE"," ",201],".",["T_WHITESPACE"," ",201],["T_VARIABLE","$name",201],")",";",["T_WHITESPACE","\n    ",201],"}",["T_WHITESPACE","\n\n    ",202],["T_DOC_COMMENT","\/**\n     * Checks if a property is set, i.e. defined and not null.\n     * This method will check in the following order and act accordingly:\n     *\n     *  - a property defined by a setter: return whether the property is set\n     *  - a property of a behavior: return whether the property is set\n     *  - return `false` for non existing properties\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `isset($component->property)`.\n     * @param string $name the property name or the event name\n     * @return bool whether the named property is set\n     * @see http:\/\/php.net\/manual\/en\/function.isset.php\n     *\/",204],["T_WHITESPACE","\n    ",217],["T_PUBLIC","public",218],["T_WHITESPACE"," ",218],["T_FUNCTION","function",218],["T_WHITESPACE"," ",218],["T_STRING","__isset",218],"(",["T_VARIABLE","$name",218],")",["T_WHITESPACE","\n    ",218],"{",["T_WHITESPACE","\n        ",219],["T_VARIABLE","$getter",220],["T_WHITESPACE"," ",220],"=",["T_WHITESPACE"," ",220],["T_CONSTANT_ENCAPSED_STRING","'get'",220],["T_WHITESPACE"," ",220],".",["T_WHITESPACE"," ",220],["T_VARIABLE","$name",220],";",["T_WHITESPACE","\n        ",220],["T_IF","if",221],["T_WHITESPACE"," ",221],"(",["T_STRING","method_exists",221],"(",["T_VARIABLE","$this",221],",",["T_WHITESPACE"," ",221],["T_VARIABLE","$getter",221],")",")",["T_WHITESPACE"," ",221],"{",["T_WHITESPACE","\n            ",221],["T_RETURN","return",222],["T_WHITESPACE"," ",222],["T_VARIABLE","$this",222],["T_OBJECT_OPERATOR","->",222],["T_VARIABLE","$getter",222],"(",")",["T_WHITESPACE"," ",222],["T_IS_NOT_IDENTICAL","!==",222],["T_WHITESPACE"," ",222],["T_STRING","null",222],";",["T_WHITESPACE","\n        ",222],"}",["T_WHITESPACE","\n\n        ",223],["T_COMMENT","\/\/ behavior property\n",225],["T_WHITESPACE","        ",226],["T_VARIABLE","$this",226],["T_OBJECT_OPERATOR","->",226],["T_STRING","ensureBehaviors",226],"(",")",";",["T_WHITESPACE","\n        ",226],["T_FOREACH","foreach",227],["T_WHITESPACE"," ",227],"(",["T_VARIABLE","$this",227],["T_OBJECT_OPERATOR","->",227],["T_STRING","_behaviors",227],["T_WHITESPACE"," ",227],["T_AS","as",227],["T_WHITESPACE"," ",227],["T_VARIABLE","$behavior",227],")",["T_WHITESPACE"," ",227],"{",["T_WHITESPACE","\n            ",227],["T_IF","if",228],["T_WHITESPACE"," ",228],"(",["T_VARIABLE","$behavior",228],["T_OBJECT_OPERATOR","->",228],["T_STRING","canGetProperty",228],"(",["T_VARIABLE","$name",228],")",")",["T_WHITESPACE"," ",228],"{",["T_WHITESPACE","\n                ",228],["T_RETURN","return",229],["T_WHITESPACE"," ",229],["T_VARIABLE","$behavior",229],["T_OBJECT_OPERATOR","->",229],["T_VARIABLE","$name",229],["T_WHITESPACE"," ",229],["T_IS_NOT_IDENTICAL","!==",229],["T_WHITESPACE"," ",229],["T_STRING","null",229],";",["T_WHITESPACE","\n            ",229],"}",["T_WHITESPACE","\n        ",230],"}",["T_WHITESPACE","\n\n        ",231],["T_RETURN","return",233],["T_WHITESPACE"," ",233],["T_STRING","false",233],";",["T_WHITESPACE","\n    ",233],"}",["T_WHITESPACE","\n\n    ",234],["T_DOC_COMMENT","\/**\n     * Sets a component property to be null.\n     * This method will check in the following order and act accordingly:\n     *\n     *  - a property defined by a setter: set the property value to be null\n     *  - a property of a behavior: set the property value to be null\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `unset($component->property)`.\n     * @param string $name the property name\n     * @throws InvalidCallException if the property is read only.\n     * @see http:\/\/php.net\/manual\/en\/function.unset.php\n     *\/",236],["T_WHITESPACE","\n    ",248],["T_PUBLIC","public",249],["T_WHITESPACE"," ",249],["T_FUNCTION","function",249],["T_WHITESPACE"," ",249],["T_STRING","__unset",249],"(",["T_VARIABLE","$name",249],")",["T_WHITESPACE","\n    ",249],"{",["T_WHITESPACE","\n        ",250],["T_VARIABLE","$setter",251],["T_WHITESPACE"," ",251],"=",["T_WHITESPACE"," ",251],["T_CONSTANT_ENCAPSED_STRING","'set'",251],["T_WHITESPACE"," ",251],".",["T_WHITESPACE"," ",251],["T_VARIABLE","$name",251],";",["T_WHITESPACE","\n        ",251],["T_IF","if",252],["T_WHITESPACE"," ",252],"(",["T_STRING","method_exists",252],"(",["T_VARIABLE","$this",252],",",["T_WHITESPACE"," ",252],["T_VARIABLE","$setter",252],")",")",["T_WHITESPACE"," ",252],"{",["T_WHITESPACE","\n            ",252],["T_VARIABLE","$this",253],["T_OBJECT_OPERATOR","->",253],["T_VARIABLE","$setter",253],"(",["T_STRING","null",253],")",";",["T_WHITESPACE","\n            ",253],["T_RETURN","return",254],";",["T_WHITESPACE","\n        ",254],"}",["T_WHITESPACE","\n\n        ",255],["T_COMMENT","\/\/ behavior property\n",257],["T_WHITESPACE","        ",258],["T_VARIABLE","$this",258],["T_OBJECT_OPERATOR","->",258],["T_STRING","ensureBehaviors",258],"(",")",";",["T_WHITESPACE","\n        ",258],["T_FOREACH","foreach",259],["T_WHITESPACE"," ",259],"(",["T_VARIABLE","$this",259],["T_OBJECT_OPERATOR","->",259],["T_STRING","_behaviors",259],["T_WHITESPACE"," ",259],["T_AS","as",259],["T_WHITESPACE"," ",259],["T_VARIABLE","$behavior",259],")",["T_WHITESPACE"," ",259],"{",["T_WHITESPACE","\n            ",259],["T_IF","if",260],["T_WHITESPACE"," ",260],"(",["T_VARIABLE","$behavior",260],["T_OBJECT_OPERATOR","->",260],["T_STRING","canSetProperty",260],"(",["T_VARIABLE","$name",260],")",")",["T_WHITESPACE"," ",260],"{",["T_WHITESPACE","\n                ",260],["T_VARIABLE","$behavior",261],["T_OBJECT_OPERATOR","->",261],["T_VARIABLE","$name",261],["T_WHITESPACE"," ",261],"=",["T_WHITESPACE"," ",261],["T_STRING","null",261],";",["T_WHITESPACE","\n                ",261],["T_RETURN","return",262],";",["T_WHITESPACE","\n            ",262],"}",["T_WHITESPACE","\n        ",263],"}",["T_WHITESPACE","\n\n        ",264],["T_THROW","throw",266],["T_WHITESPACE"," ",266],["T_NEW","new",266],["T_WHITESPACE"," ",266],["T_STRING","InvalidCallException",266],"(",["T_CONSTANT_ENCAPSED_STRING","'Unsetting an unknown or read-only property: '",266],["T_WHITESPACE"," ",266],".",["T_WHITESPACE"," ",266],["T_STRING","get_class",266],"(",["T_VARIABLE","$this",266],")",["T_WHITESPACE"," ",266],".",["T_WHITESPACE"," ",266],["T_CONSTANT_ENCAPSED_STRING","'::'",266],["T_WHITESPACE"," ",266],".",["T_WHITESPACE"," ",266],["T_VARIABLE","$name",266],")",";",["T_WHITESPACE","\n    ",266],"}",["T_WHITESPACE","\n\n    ",267],["T_DOC_COMMENT","\/**\n     * Calls the named method which is not a class method.\n     *\n     * This method will check if any attached behavior has\n     * the named method and will execute it if available.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when an unknown method is being invoked.\n     * @param string $name the method name\n     * @param array $params method parameters\n     * @return mixed the method return value\n     * @throws UnknownMethodException when calling unknown method\n     *\/",269],["T_WHITESPACE","\n    ",281],["T_PUBLIC","public",282],["T_WHITESPACE"," ",282],["T_FUNCTION","function",282],["T_WHITESPACE"," ",282],["T_STRING","__call",282],"(",["T_VARIABLE","$name",282],",",["T_WHITESPACE"," ",282],["T_VARIABLE","$params",282],")",["T_WHITESPACE","\n    ",282],"{",["T_WHITESPACE","\n        ",283],["T_VARIABLE","$this",284],["T_OBJECT_OPERATOR","->",284],["T_STRING","ensureBehaviors",284],"(",")",";",["T_WHITESPACE","\n        ",284],["T_FOREACH","foreach",285],["T_WHITESPACE"," ",285],"(",["T_VARIABLE","$this",285],["T_OBJECT_OPERATOR","->",285],["T_STRING","_behaviors",285],["T_WHITESPACE"," ",285],["T_AS","as",285],["T_WHITESPACE"," ",285],["T_VARIABLE","$object",285],")",["T_WHITESPACE"," ",285],"{",["T_WHITESPACE","\n            ",285],["T_IF","if",286],["T_WHITESPACE"," ",286],"(",["T_VARIABLE","$object",286],["T_OBJECT_OPERATOR","->",286],["T_STRING","hasMethod",286],"(",["T_VARIABLE","$name",286],")",")",["T_WHITESPACE"," ",286],"{",["T_WHITESPACE","\n                ",286],["T_RETURN","return",287],["T_WHITESPACE"," ",287],["T_STRING","call_user_func_array",287],"(","[",["T_VARIABLE","$object",287],",",["T_WHITESPACE"," ",287],["T_VARIABLE","$name",287],"]",",",["T_WHITESPACE"," ",287],["T_VARIABLE","$params",287],")",";",["T_WHITESPACE","\n            ",287],"}",["T_WHITESPACE","\n        ",288],"}",["T_WHITESPACE","\n        ",289],["T_THROW","throw",290],["T_WHITESPACE"," ",290],["T_NEW","new",290],["T_WHITESPACE"," ",290],["T_STRING","UnknownMethodException",290],"(",["T_CONSTANT_ENCAPSED_STRING","'Calling unknown method: '",290],["T_WHITESPACE"," ",290],".",["T_WHITESPACE"," ",290],["T_STRING","get_class",290],"(",["T_VARIABLE","$this",290],")",["T_WHITESPACE"," ",290],".",["T_WHITESPACE"," ",290],"\"",["T_ENCAPSED_AND_WHITESPACE","::",290],["T_VARIABLE","$name",290],["T_ENCAPSED_AND_WHITESPACE","()",290],"\"",")",";",["T_WHITESPACE","\n    ",290],"}",["T_WHITESPACE","\n\n    ",291],["T_DOC_COMMENT","\/**\n     * This method is called after the object is created by cloning an existing one.\n     * It removes all behaviors because they are attached to the old object.\n     *\/",293],["T_WHITESPACE","\n    ",296],["T_PUBLIC","public",297],["T_WHITESPACE"," ",297],["T_FUNCTION","function",297],["T_WHITESPACE"," ",297],["T_STRING","__clone",297],"(",")",["T_WHITESPACE","\n    ",297],"{",["T_WHITESPACE","\n        ",298],["T_VARIABLE","$this",299],["T_OBJECT_OPERATOR","->",299],["T_STRING","_events",299],["T_WHITESPACE"," ",299],"=",["T_WHITESPACE"," ",299],"[","]",";",["T_WHITESPACE","\n        ",299],["T_VARIABLE","$this",300],["T_OBJECT_OPERATOR","->",300],["T_STRING","_behaviors",300],["T_WHITESPACE"," ",300],"=",["T_WHITESPACE"," ",300],["T_STRING","null",300],";",["T_WHITESPACE","\n    ",300],"}",["T_WHITESPACE","\n\n    ",301],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property is defined for this component.\n     * A property is defined if:\n     *\n     * - the class has a getter or setter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     * - an attached behavior has a property of the given name (when `$checkBehaviors` is true).\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @param bool $checkBehaviors whether to treat behaviors' properties as properties of this component\n     * @return bool whether the property is defined\n     * @see canGetProperty()\n     * @see canSetProperty()\n     *\/",303],["T_WHITESPACE","\n    ",318],["T_PUBLIC","public",319],["T_WHITESPACE"," ",319],["T_FUNCTION","function",319],["T_WHITESPACE"," ",319],["T_STRING","hasProperty",319],"(",["T_VARIABLE","$name",319],",",["T_WHITESPACE"," ",319],["T_VARIABLE","$checkVars",319],["T_WHITESPACE"," ",319],"=",["T_WHITESPACE"," ",319],["T_STRING","true",319],",",["T_WHITESPACE"," ",319],["T_VARIABLE","$checkBehaviors",319],["T_WHITESPACE"," ",319],"=",["T_WHITESPACE"," ",319],["T_STRING","true",319],")",["T_WHITESPACE","\n    ",319],"{",["T_WHITESPACE","\n        ",320],["T_RETURN","return",321],["T_WHITESPACE"," ",321],["T_VARIABLE","$this",321],["T_OBJECT_OPERATOR","->",321],["T_STRING","canGetProperty",321],"(",["T_VARIABLE","$name",321],",",["T_WHITESPACE"," ",321],["T_VARIABLE","$checkVars",321],",",["T_WHITESPACE"," ",321],["T_VARIABLE","$checkBehaviors",321],")",["T_WHITESPACE"," ",321],["T_BOOLEAN_OR","||",321],["T_WHITESPACE"," ",321],["T_VARIABLE","$this",321],["T_OBJECT_OPERATOR","->",321],["T_STRING","canSetProperty",321],"(",["T_VARIABLE","$name",321],",",["T_WHITESPACE"," ",321],["T_STRING","false",321],",",["T_WHITESPACE"," ",321],["T_VARIABLE","$checkBehaviors",321],")",";",["T_WHITESPACE","\n    ",321],"}",["T_WHITESPACE","\n\n    ",322],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property can be read.\n     * A property can be read if:\n     *\n     * - the class has a getter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     * - an attached behavior has a readable property of the given name (when `$checkBehaviors` is true).\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @param bool $checkBehaviors whether to treat behaviors' properties as properties of this component\n     * @return bool whether the property can be read\n     * @see canSetProperty()\n     *\/",324],["T_WHITESPACE","\n    ",338],["T_PUBLIC","public",339],["T_WHITESPACE"," ",339],["T_FUNCTION","function",339],["T_WHITESPACE"," ",339],["T_STRING","canGetProperty",339],"(",["T_VARIABLE","$name",339],",",["T_WHITESPACE"," ",339],["T_VARIABLE","$checkVars",339],["T_WHITESPACE"," ",339],"=",["T_WHITESPACE"," ",339],["T_STRING","true",339],",",["T_WHITESPACE"," ",339],["T_VARIABLE","$checkBehaviors",339],["T_WHITESPACE"," ",339],"=",["T_WHITESPACE"," ",339],["T_STRING","true",339],")",["T_WHITESPACE","\n    ",339],"{",["T_WHITESPACE","\n        ",340],["T_IF","if",341],["T_WHITESPACE"," ",341],"(",["T_STRING","method_exists",341],"(",["T_VARIABLE","$this",341],",",["T_WHITESPACE"," ",341],["T_CONSTANT_ENCAPSED_STRING","'get'",341],["T_WHITESPACE"," ",341],".",["T_WHITESPACE"," ",341],["T_VARIABLE","$name",341],")",["T_WHITESPACE"," ",341],["T_BOOLEAN_OR","||",341],["T_WHITESPACE"," ",341],["T_VARIABLE","$checkVars",341],["T_WHITESPACE"," ",341],["T_BOOLEAN_AND","&&",341],["T_WHITESPACE"," ",341],["T_STRING","property_exists",341],"(",["T_VARIABLE","$this",341],",",["T_WHITESPACE"," ",341],["T_VARIABLE","$name",341],")",")",["T_WHITESPACE"," ",341],"{",["T_WHITESPACE","\n            ",341],["T_RETURN","return",342],["T_WHITESPACE"," ",342],["T_STRING","true",342],";",["T_WHITESPACE","\n        ",342],"}",["T_WHITESPACE"," ",343],["T_ELSEIF","elseif",343],["T_WHITESPACE"," ",343],"(",["T_VARIABLE","$checkBehaviors",343],")",["T_WHITESPACE"," ",343],"{",["T_WHITESPACE","\n            ",343],["T_VARIABLE","$this",344],["T_OBJECT_OPERATOR","->",344],["T_STRING","ensureBehaviors",344],"(",")",";",["T_WHITESPACE","\n            ",344],["T_FOREACH","foreach",345],["T_WHITESPACE"," ",345],"(",["T_VARIABLE","$this",345],["T_OBJECT_OPERATOR","->",345],["T_STRING","_behaviors",345],["T_WHITESPACE"," ",345],["T_AS","as",345],["T_WHITESPACE"," ",345],["T_VARIABLE","$behavior",345],")",["T_WHITESPACE"," ",345],"{",["T_WHITESPACE","\n                ",345],["T_IF","if",346],["T_WHITESPACE"," ",346],"(",["T_VARIABLE","$behavior",346],["T_OBJECT_OPERATOR","->",346],["T_STRING","canGetProperty",346],"(",["T_VARIABLE","$name",346],",",["T_WHITESPACE"," ",346],["T_VARIABLE","$checkVars",346],")",")",["T_WHITESPACE"," ",346],"{",["T_WHITESPACE","\n                    ",346],["T_RETURN","return",347],["T_WHITESPACE"," ",347],["T_STRING","true",347],";",["T_WHITESPACE","\n                ",347],"}",["T_WHITESPACE","\n            ",348],"}",["T_WHITESPACE","\n        ",349],"}",["T_WHITESPACE","\n        ",350],["T_RETURN","return",351],["T_WHITESPACE"," ",351],["T_STRING","false",351],";",["T_WHITESPACE","\n    ",351],"}",["T_WHITESPACE","\n\n    ",352],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property can be set.\n     * A property can be written if:\n     *\n     * - the class has a setter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     * - an attached behavior has a writable property of the given name (when `$checkBehaviors` is true).\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @param bool $checkBehaviors whether to treat behaviors' properties as properties of this component\n     * @return bool whether the property can be written\n     * @see canGetProperty()\n     *\/",354],["T_WHITESPACE","\n    ",368],["T_PUBLIC","public",369],["T_WHITESPACE"," ",369],["T_FUNCTION","function",369],["T_WHITESPACE"," ",369],["T_STRING","canSetProperty",369],"(",["T_VARIABLE","$name",369],",",["T_WHITESPACE"," ",369],["T_VARIABLE","$checkVars",369],["T_WHITESPACE"," ",369],"=",["T_WHITESPACE"," ",369],["T_STRING","true",369],",",["T_WHITESPACE"," ",369],["T_VARIABLE","$checkBehaviors",369],["T_WHITESPACE"," ",369],"=",["T_WHITESPACE"," ",369],["T_STRING","true",369],")",["T_WHITESPACE","\n    ",369],"{",["T_WHITESPACE","\n        ",370],["T_IF","if",371],["T_WHITESPACE"," ",371],"(",["T_STRING","method_exists",371],"(",["T_VARIABLE","$this",371],",",["T_WHITESPACE"," ",371],["T_CONSTANT_ENCAPSED_STRING","'set'",371],["T_WHITESPACE"," ",371],".",["T_WHITESPACE"," ",371],["T_VARIABLE","$name",371],")",["T_WHITESPACE"," ",371],["T_BOOLEAN_OR","||",371],["T_WHITESPACE"," ",371],["T_VARIABLE","$checkVars",371],["T_WHITESPACE"," ",371],["T_BOOLEAN_AND","&&",371],["T_WHITESPACE"," ",371],["T_STRING","property_exists",371],"(",["T_VARIABLE","$this",371],",",["T_WHITESPACE"," ",371],["T_VARIABLE","$name",371],")",")",["T_WHITESPACE"," ",371],"{",["T_WHITESPACE","\n            ",371],["T_RETURN","return",372],["T_WHITESPACE"," ",372],["T_STRING","true",372],";",["T_WHITESPACE","\n        ",372],"}",["T_WHITESPACE"," ",373],["T_ELSEIF","elseif",373],["T_WHITESPACE"," ",373],"(",["T_VARIABLE","$checkBehaviors",373],")",["T_WHITESPACE"," ",373],"{",["T_WHITESPACE","\n            ",373],["T_VARIABLE","$this",374],["T_OBJECT_OPERATOR","->",374],["T_STRING","ensureBehaviors",374],"(",")",";",["T_WHITESPACE","\n            ",374],["T_FOREACH","foreach",375],["T_WHITESPACE"," ",375],"(",["T_VARIABLE","$this",375],["T_OBJECT_OPERATOR","->",375],["T_STRING","_behaviors",375],["T_WHITESPACE"," ",375],["T_AS","as",375],["T_WHITESPACE"," ",375],["T_VARIABLE","$behavior",375],")",["T_WHITESPACE"," ",375],"{",["T_WHITESPACE","\n                ",375],["T_IF","if",376],["T_WHITESPACE"," ",376],"(",["T_VARIABLE","$behavior",376],["T_OBJECT_OPERATOR","->",376],["T_STRING","canSetProperty",376],"(",["T_VARIABLE","$name",376],",",["T_WHITESPACE"," ",376],["T_VARIABLE","$checkVars",376],")",")",["T_WHITESPACE"," ",376],"{",["T_WHITESPACE","\n                    ",376],["T_RETURN","return",377],["T_WHITESPACE"," ",377],["T_STRING","true",377],";",["T_WHITESPACE","\n                ",377],"}",["T_WHITESPACE","\n            ",378],"}",["T_WHITESPACE","\n        ",379],"}",["T_WHITESPACE","\n        ",380],["T_RETURN","return",381],["T_WHITESPACE"," ",381],["T_STRING","false",381],";",["T_WHITESPACE","\n    ",381],"}",["T_WHITESPACE","\n\n    ",382],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a method is defined.\n     * A method is defined if:\n     *\n     * - the class has a method with the specified name\n     * - an attached behavior has a method with the given name (when `$checkBehaviors` is true).\n     *\n     * @param string $name the property name\n     * @param bool $checkBehaviors whether to treat behaviors' methods as methods of this component\n     * @return bool whether the method is defined\n     *\/",384],["T_WHITESPACE","\n    ",394],["T_PUBLIC","public",395],["T_WHITESPACE"," ",395],["T_FUNCTION","function",395],["T_WHITESPACE"," ",395],["T_STRING","hasMethod",395],"(",["T_VARIABLE","$name",395],",",["T_WHITESPACE"," ",395],["T_VARIABLE","$checkBehaviors",395],["T_WHITESPACE"," ",395],"=",["T_WHITESPACE"," ",395],["T_STRING","true",395],")",["T_WHITESPACE","\n    ",395],"{",["T_WHITESPACE","\n        ",396],["T_IF","if",397],["T_WHITESPACE"," ",397],"(",["T_STRING","method_exists",397],"(",["T_VARIABLE","$this",397],",",["T_WHITESPACE"," ",397],["T_VARIABLE","$name",397],")",")",["T_WHITESPACE"," ",397],"{",["T_WHITESPACE","\n            ",397],["T_RETURN","return",398],["T_WHITESPACE"," ",398],["T_STRING","true",398],";",["T_WHITESPACE","\n        ",398],"}",["T_WHITESPACE"," ",399],["T_ELSEIF","elseif",399],["T_WHITESPACE"," ",399],"(",["T_VARIABLE","$checkBehaviors",399],")",["T_WHITESPACE"," ",399],"{",["T_WHITESPACE","\n            ",399],["T_VARIABLE","$this",400],["T_OBJECT_OPERATOR","->",400],["T_STRING","ensureBehaviors",400],"(",")",";",["T_WHITESPACE","\n            ",400],["T_FOREACH","foreach",401],["T_WHITESPACE"," ",401],"(",["T_VARIABLE","$this",401],["T_OBJECT_OPERATOR","->",401],["T_STRING","_behaviors",401],["T_WHITESPACE"," ",401],["T_AS","as",401],["T_WHITESPACE"," ",401],["T_VARIABLE","$behavior",401],")",["T_WHITESPACE"," ",401],"{",["T_WHITESPACE","\n                ",401],["T_IF","if",402],["T_WHITESPACE"," ",402],"(",["T_VARIABLE","$behavior",402],["T_OBJECT_OPERATOR","->",402],["T_STRING","hasMethod",402],"(",["T_VARIABLE","$name",402],")",")",["T_WHITESPACE"," ",402],"{",["T_WHITESPACE","\n                    ",402],["T_RETURN","return",403],["T_WHITESPACE"," ",403],["T_STRING","true",403],";",["T_WHITESPACE","\n                ",403],"}",["T_WHITESPACE","\n            ",404],"}",["T_WHITESPACE","\n        ",405],"}",["T_WHITESPACE","\n        ",406],["T_RETURN","return",407],["T_WHITESPACE"," ",407],["T_STRING","false",407],";",["T_WHITESPACE","\n    ",407],"}",["T_WHITESPACE","\n\n    ",408],["T_DOC_COMMENT","\/**\n     * Returns a list of behaviors that this component should behave as.\n     *\n     * Child classes may override this method to specify the behaviors they want to behave as.\n     *\n     * The return value of this method should be an array of behavior objects or configurations\n     * indexed by behavior names. A behavior configuration can be either a string specifying\n     * the behavior class or an array of the following structure:\n     *\n     * ```php\n     * 'behaviorName' => [\n     *     'class' => 'BehaviorClass',\n     *     'property1' => 'value1',\n     *     'property2' => 'value2',\n     * ]\n     * ```\n     *\n     * Note that a behavior class must extend from [[Behavior]]. Behaviors can be attached using a name or anonymously.\n     * When a name is used as the array key, using this name, the behavior can later be retrieved using [[getBehavior()]]\n     * or be detached using [[detachBehavior()]]. Anonymous behaviors can not be retrieved or detached.\n     *\n     * Behaviors declared in this method will be attached to the component automatically (on demand).\n     *\n     * @return array the behavior configurations.\n     *\/",410],["T_WHITESPACE","\n    ",434],["T_PUBLIC","public",435],["T_WHITESPACE"," ",435],["T_FUNCTION","function",435],["T_WHITESPACE"," ",435],["T_STRING","behaviors",435],"(",")",["T_WHITESPACE","\n    ",435],"{",["T_WHITESPACE","\n        ",436],["T_RETURN","return",437],["T_WHITESPACE"," ",437],"[","]",";",["T_WHITESPACE","\n    ",437],"}",["T_WHITESPACE","\n\n    ",438],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether there is any handler attached to the named event.\n     * @param string $name the event name\n     * @return bool whether there is any handler attached to the event.\n     *\/",440],["T_WHITESPACE","\n    ",444],["T_PUBLIC","public",445],["T_WHITESPACE"," ",445],["T_FUNCTION","function",445],["T_WHITESPACE"," ",445],["T_STRING","hasEventHandlers",445],"(",["T_VARIABLE","$name",445],")",["T_WHITESPACE","\n    ",445],"{",["T_WHITESPACE","\n        ",446],["T_VARIABLE","$this",447],["T_OBJECT_OPERATOR","->",447],["T_STRING","ensureBehaviors",447],"(",")",";",["T_WHITESPACE","\n        ",447],["T_RETURN","return",448],["T_WHITESPACE"," ",448],"!",["T_EMPTY","empty",448],"(",["T_VARIABLE","$this",448],["T_OBJECT_OPERATOR","->",448],["T_STRING","_events",448],"[",["T_VARIABLE","$name",448],"]",")",["T_WHITESPACE"," ",448],["T_BOOLEAN_OR","||",448],["T_WHITESPACE"," ",448],["T_STRING","Event",448],["T_DOUBLE_COLON","::",448],["T_STRING","hasHandlers",448],"(",["T_VARIABLE","$this",448],",",["T_WHITESPACE"," ",448],["T_VARIABLE","$name",448],")",";",["T_WHITESPACE","\n    ",448],"}",["T_WHITESPACE","\n\n    ",449],["T_DOC_COMMENT","\/**\n     * Attaches an event handler to an event.\n     *\n     * The event handler must be a valid PHP callback. The following are\n     * some examples:\n     *\n     * ```\n     * function ($event) { ... }         \/\/ anonymous function\n     * [$object, 'handleClick']          \/\/ $object->handleClick()\n     * ['Page', 'handleClick']           \/\/ Page::handleClick()\n     * 'handleClick'                     \/\/ global function handleClick()\n     * ```\n     *\n     * The event handler must be defined with the following signature,\n     *\n     * ```\n     * function ($event)\n     * ```\n     *\n     * where `$event` is an [[Event]] object which includes parameters associated with the event.\n     *\n     * @param string $name the event name\n     * @param callable $handler the event handler\n     * @param mixed $data the data to be passed to the event handler when the event is triggered.\n     * When the event handler is invoked, this data can be accessed via [[Event::data]].\n     * @param bool $append whether to append new event handler to the end of the existing\n     * handler list. If false, the new handler will be inserted at the beginning of the existing\n     * handler list.\n     * @see off()\n     *\/",451],["T_WHITESPACE","\n    ",480],["T_PUBLIC","public",481],["T_WHITESPACE"," ",481],["T_FUNCTION","function",481],["T_WHITESPACE"," ",481],["T_STRING","on",481],"(",["T_VARIABLE","$name",481],",",["T_WHITESPACE"," ",481],["T_VARIABLE","$handler",481],",",["T_WHITESPACE"," ",481],["T_VARIABLE","$data",481],["T_WHITESPACE"," ",481],"=",["T_WHITESPACE"," ",481],["T_STRING","null",481],",",["T_WHITESPACE"," ",481],["T_VARIABLE","$append",481],["T_WHITESPACE"," ",481],"=",["T_WHITESPACE"," ",481],["T_STRING","true",481],")",["T_WHITESPACE","\n    ",481],"{",["T_WHITESPACE","\n        ",482],["T_VARIABLE","$this",483],["T_OBJECT_OPERATOR","->",483],["T_STRING","ensureBehaviors",483],"(",")",";",["T_WHITESPACE","\n        ",483],["T_IF","if",484],["T_WHITESPACE"," ",484],"(",["T_VARIABLE","$append",484],["T_WHITESPACE"," ",484],["T_BOOLEAN_OR","||",484],["T_WHITESPACE"," ",484],["T_EMPTY","empty",484],"(",["T_VARIABLE","$this",484],["T_OBJECT_OPERATOR","->",484],["T_STRING","_events",484],"[",["T_VARIABLE","$name",484],"]",")",")",["T_WHITESPACE"," ",484],"{",["T_WHITESPACE","\n            ",484],["T_VARIABLE","$this",485],["T_OBJECT_OPERATOR","->",485],["T_STRING","_events",485],"[",["T_VARIABLE","$name",485],"]","[","]",["T_WHITESPACE"," ",485],"=",["T_WHITESPACE"," ",485],"[",["T_VARIABLE","$handler",485],",",["T_WHITESPACE"," ",485],["T_VARIABLE","$data",485],"]",";",["T_WHITESPACE","\n        ",485],"}",["T_WHITESPACE"," ",486],["T_ELSE","else",486],["T_WHITESPACE"," ",486],"{",["T_WHITESPACE","\n            ",486],["T_STRING","array_unshift",487],"(",["T_VARIABLE","$this",487],["T_OBJECT_OPERATOR","->",487],["T_STRING","_events",487],"[",["T_VARIABLE","$name",487],"]",",",["T_WHITESPACE"," ",487],"[",["T_VARIABLE","$handler",487],",",["T_WHITESPACE"," ",487],["T_VARIABLE","$data",487],"]",")",";",["T_WHITESPACE","\n        ",487],"}",["T_WHITESPACE","\n    ",488],"}",["T_WHITESPACE","\n\n    ",489],["T_DOC_COMMENT","\/**\n     * Detaches an existing event handler from this component.\n     * This method is the opposite of [[on()]].\n     * @param string $name event name\n     * @param callable $handler the event handler to be removed.\n     * If it is null, all handlers attached to the named event will be removed.\n     * @return bool if a handler is found and detached\n     * @see on()\n     *\/",491],["T_WHITESPACE","\n    ",499],["T_PUBLIC","public",500],["T_WHITESPACE"," ",500],["T_FUNCTION","function",500],["T_WHITESPACE"," ",500],["T_STRING","off",500],"(",["T_VARIABLE","$name",500],",",["T_WHITESPACE"," ",500],["T_VARIABLE","$handler",500],["T_WHITESPACE"," ",500],"=",["T_WHITESPACE"," ",500],["T_STRING","null",500],")",["T_WHITESPACE","\n    ",500],"{",["T_WHITESPACE","\n        ",501],["T_VARIABLE","$this",502],["T_OBJECT_OPERATOR","->",502],["T_STRING","ensureBehaviors",502],"(",")",";",["T_WHITESPACE","\n        ",502],["T_IF","if",503],["T_WHITESPACE"," ",503],"(",["T_EMPTY","empty",503],"(",["T_VARIABLE","$this",503],["T_OBJECT_OPERATOR","->",503],["T_STRING","_events",503],"[",["T_VARIABLE","$name",503],"]",")",")",["T_WHITESPACE"," ",503],"{",["T_WHITESPACE","\n            ",503],["T_RETURN","return",504],["T_WHITESPACE"," ",504],["T_STRING","false",504],";",["T_WHITESPACE","\n        ",504],"}",["T_WHITESPACE","\n        ",505],["T_IF","if",506],["T_WHITESPACE"," ",506],"(",["T_VARIABLE","$handler",506],["T_WHITESPACE"," ",506],["T_IS_IDENTICAL","===",506],["T_WHITESPACE"," ",506],["T_STRING","null",506],")",["T_WHITESPACE"," ",506],"{",["T_WHITESPACE","\n            ",506],["T_UNSET","unset",507],"(",["T_VARIABLE","$this",507],["T_OBJECT_OPERATOR","->",507],["T_STRING","_events",507],"[",["T_VARIABLE","$name",507],"]",")",";",["T_WHITESPACE","\n            ",507],["T_RETURN","return",508],["T_WHITESPACE"," ",508],["T_STRING","true",508],";",["T_WHITESPACE","\n        ",508],"}",["T_WHITESPACE","\n\n        ",509],["T_VARIABLE","$removed",511],["T_WHITESPACE"," ",511],"=",["T_WHITESPACE"," ",511],["T_STRING","false",511],";",["T_WHITESPACE","\n        ",511],["T_FOREACH","foreach",512],["T_WHITESPACE"," ",512],"(",["T_VARIABLE","$this",512],["T_OBJECT_OPERATOR","->",512],["T_STRING","_events",512],"[",["T_VARIABLE","$name",512],"]",["T_WHITESPACE"," ",512],["T_AS","as",512],["T_WHITESPACE"," ",512],["T_VARIABLE","$i",512],["T_WHITESPACE"," ",512],["T_DOUBLE_ARROW","=>",512],["T_WHITESPACE"," ",512],["T_VARIABLE","$event",512],")",["T_WHITESPACE"," ",512],"{",["T_WHITESPACE","\n            ",512],["T_IF","if",513],["T_WHITESPACE"," ",513],"(",["T_VARIABLE","$event",513],"[",["T_LNUMBER","0",513],"]",["T_WHITESPACE"," ",513],["T_IS_IDENTICAL","===",513],["T_WHITESPACE"," ",513],["T_VARIABLE","$handler",513],")",["T_WHITESPACE"," ",513],"{",["T_WHITESPACE","\n                ",513],["T_UNSET","unset",514],"(",["T_VARIABLE","$this",514],["T_OBJECT_OPERATOR","->",514],["T_STRING","_events",514],"[",["T_VARIABLE","$name",514],"]","[",["T_VARIABLE","$i",514],"]",")",";",["T_WHITESPACE","\n                ",514],["T_VARIABLE","$removed",515],["T_WHITESPACE"," ",515],"=",["T_WHITESPACE"," ",515],["T_STRING","true",515],";",["T_WHITESPACE","\n            ",515],"}",["T_WHITESPACE","\n        ",516],"}",["T_WHITESPACE","\n        ",517],["T_IF","if",518],["T_WHITESPACE"," ",518],"(",["T_VARIABLE","$removed",518],")",["T_WHITESPACE"," ",518],"{",["T_WHITESPACE","\n            ",518],["T_VARIABLE","$this",519],["T_OBJECT_OPERATOR","->",519],["T_STRING","_events",519],"[",["T_VARIABLE","$name",519],"]",["T_WHITESPACE"," ",519],"=",["T_WHITESPACE"," ",519],["T_STRING","array_values",519],"(",["T_VARIABLE","$this",519],["T_OBJECT_OPERATOR","->",519],["T_STRING","_events",519],"[",["T_VARIABLE","$name",519],"]",")",";",["T_WHITESPACE","\n        ",519],"}",["T_WHITESPACE","\n        ",520],["T_RETURN","return",521],["T_WHITESPACE"," ",521],["T_VARIABLE","$removed",521],";",["T_WHITESPACE","\n    ",521],"}",["T_WHITESPACE","\n\n    ",522],["T_DOC_COMMENT","\/**\n     * Triggers an event.\n     * This method represents the happening of an event. It invokes\n     * all attached handlers for the event including class-level handlers.\n     * @param string $name the event name\n     * @param Event $event the event parameter. If not set, a default [[Event]] object will be created.\n     *\/",524],["T_WHITESPACE","\n    ",530],["T_PUBLIC","public",531],["T_WHITESPACE"," ",531],["T_FUNCTION","function",531],["T_WHITESPACE"," ",531],["T_STRING","trigger",531],"(",["T_VARIABLE","$name",531],",",["T_WHITESPACE"," ",531],["T_STRING","Event",531],["T_WHITESPACE"," ",531],["T_VARIABLE","$event",531],["T_WHITESPACE"," ",531],"=",["T_WHITESPACE"," ",531],["T_STRING","null",531],")",["T_WHITESPACE","\n    ",531],"{",["T_WHITESPACE","\n        ",532],["T_VARIABLE","$this",533],["T_OBJECT_OPERATOR","->",533],["T_STRING","ensureBehaviors",533],"(",")",";",["T_WHITESPACE","\n        ",533],["T_IF","if",534],["T_WHITESPACE"," ",534],"(","!",["T_EMPTY","empty",534],"(",["T_VARIABLE","$this",534],["T_OBJECT_OPERATOR","->",534],["T_STRING","_events",534],"[",["T_VARIABLE","$name",534],"]",")",")",["T_WHITESPACE"," ",534],"{",["T_WHITESPACE","\n            ",534],["T_IF","if",535],["T_WHITESPACE"," ",535],"(",["T_VARIABLE","$event",535],["T_WHITESPACE"," ",535],["T_IS_IDENTICAL","===",535],["T_WHITESPACE"," ",535],["T_STRING","null",535],")",["T_WHITESPACE"," ",535],"{",["T_WHITESPACE","\n                ",535],["T_VARIABLE","$event",536],["T_WHITESPACE"," ",536],"=",["T_WHITESPACE"," ",536],["T_NEW","new",536],["T_WHITESPACE"," ",536],["T_STRING","Event",536],";",["T_WHITESPACE","\n            ",536],"}",["T_WHITESPACE","\n            ",537],["T_IF","if",538],["T_WHITESPACE"," ",538],"(",["T_VARIABLE","$event",538],["T_OBJECT_OPERATOR","->",538],["T_STRING","sender",538],["T_WHITESPACE"," ",538],["T_IS_IDENTICAL","===",538],["T_WHITESPACE"," ",538],["T_STRING","null",538],")",["T_WHITESPACE"," ",538],"{",["T_WHITESPACE","\n                ",538],["T_VARIABLE","$event",539],["T_OBJECT_OPERATOR","->",539],["T_STRING","sender",539],["T_WHITESPACE"," ",539],"=",["T_WHITESPACE"," ",539],["T_VARIABLE","$this",539],";",["T_WHITESPACE","\n            ",539],"}",["T_WHITESPACE","\n            ",540],["T_VARIABLE","$event",541],["T_OBJECT_OPERATOR","->",541],["T_STRING","handled",541],["T_WHITESPACE"," ",541],"=",["T_WHITESPACE"," ",541],["T_STRING","false",541],";",["T_WHITESPACE","\n            ",541],["T_VARIABLE","$event",542],["T_OBJECT_OPERATOR","->",542],["T_STRING","name",542],["T_WHITESPACE"," ",542],"=",["T_WHITESPACE"," ",542],["T_VARIABLE","$name",542],";",["T_WHITESPACE","\n            ",542],["T_FOREACH","foreach",543],["T_WHITESPACE"," ",543],"(",["T_VARIABLE","$this",543],["T_OBJECT_OPERATOR","->",543],["T_STRING","_events",543],"[",["T_VARIABLE","$name",543],"]",["T_WHITESPACE"," ",543],["T_AS","as",543],["T_WHITESPACE"," ",543],["T_VARIABLE","$handler",543],")",["T_WHITESPACE"," ",543],"{",["T_WHITESPACE","\n                ",543],["T_VARIABLE","$event",544],["T_OBJECT_OPERATOR","->",544],["T_STRING","data",544],["T_WHITESPACE"," ",544],"=",["T_WHITESPACE"," ",544],["T_VARIABLE","$handler",544],"[",["T_LNUMBER","1",544],"]",";",["T_WHITESPACE","\n                ",544],["T_STRING","call_user_func",545],"(",["T_VARIABLE","$handler",545],"[",["T_LNUMBER","0",545],"]",",",["T_WHITESPACE"," ",545],["T_VARIABLE","$event",545],")",";",["T_WHITESPACE","\n                ",545],["T_COMMENT","\/\/ stop further handling if the event is handled\n",546],["T_WHITESPACE","                ",547],["T_IF","if",547],["T_WHITESPACE"," ",547],"(",["T_VARIABLE","$event",547],["T_OBJECT_OPERATOR","->",547],["T_STRING","handled",547],")",["T_WHITESPACE"," ",547],"{",["T_WHITESPACE","\n                    ",547],["T_RETURN","return",548],";",["T_WHITESPACE","\n                ",548],"}",["T_WHITESPACE","\n            ",549],"}",["T_WHITESPACE","\n        ",550],"}",["T_WHITESPACE","\n        ",551],["T_COMMENT","\/\/ invoke class-level attached handlers\n",552],["T_WHITESPACE","        ",553],["T_STRING","Event",553],["T_DOUBLE_COLON","::",553],["T_STRING","trigger",553],"(",["T_VARIABLE","$this",553],",",["T_WHITESPACE"," ",553],["T_VARIABLE","$name",553],",",["T_WHITESPACE"," ",553],["T_VARIABLE","$event",553],")",";",["T_WHITESPACE","\n    ",553],"}",["T_WHITESPACE","\n\n    ",554],["T_DOC_COMMENT","\/**\n     * Returns the named behavior object.\n     * @param string $name the behavior name\n     * @return null|Behavior the behavior object, or null if the behavior does not exist\n     *\/",556],["T_WHITESPACE","\n    ",560],["T_PUBLIC","public",561],["T_WHITESPACE"," ",561],["T_FUNCTION","function",561],["T_WHITESPACE"," ",561],["T_STRING","getBehavior",561],"(",["T_VARIABLE","$name",561],")",["T_WHITESPACE","\n    ",561],"{",["T_WHITESPACE","\n        ",562],["T_VARIABLE","$this",563],["T_OBJECT_OPERATOR","->",563],["T_STRING","ensureBehaviors",563],"(",")",";",["T_WHITESPACE","\n        ",563],["T_RETURN","return",564],["T_WHITESPACE"," ",564],["T_ISSET","isset",564],"(",["T_VARIABLE","$this",564],["T_OBJECT_OPERATOR","->",564],["T_STRING","_behaviors",564],"[",["T_VARIABLE","$name",564],"]",")",["T_WHITESPACE"," ",564],"?",["T_WHITESPACE"," ",564],["T_VARIABLE","$this",564],["T_OBJECT_OPERATOR","->",564],["T_STRING","_behaviors",564],"[",["T_VARIABLE","$name",564],"]",["T_WHITESPACE"," ",564],":",["T_WHITESPACE"," ",564],["T_STRING","null",564],";",["T_WHITESPACE","\n    ",564],"}",["T_WHITESPACE","\n\n    ",565],["T_DOC_COMMENT","\/**\n     * Returns all behaviors attached to this component.\n     * @return Behavior[] list of behaviors attached to this component\n     *\/",567],["T_WHITESPACE","\n    ",570],["T_PUBLIC","public",571],["T_WHITESPACE"," ",571],["T_FUNCTION","function",571],["T_WHITESPACE"," ",571],["T_STRING","getBehaviors",571],"(",")",["T_WHITESPACE","\n    ",571],"{",["T_WHITESPACE","\n        ",572],["T_VARIABLE","$this",573],["T_OBJECT_OPERATOR","->",573],["T_STRING","ensureBehaviors",573],"(",")",";",["T_WHITESPACE","\n        ",573],["T_RETURN","return",574],["T_WHITESPACE"," ",574],["T_VARIABLE","$this",574],["T_OBJECT_OPERATOR","->",574],["T_STRING","_behaviors",574],";",["T_WHITESPACE","\n    ",574],"}",["T_WHITESPACE","\n\n    ",575],["T_DOC_COMMENT","\/**\n     * Attaches a behavior to this component.\n     * This method will create the behavior object based on the given\n     * configuration. After that, the behavior object will be attached to\n     * this component by calling the [[Behavior::attach()]] method.\n     * @param string $name the name of the behavior.\n     * @param string|array|Behavior $behavior the behavior configuration. This can be one of the following:\n     *\n     *  - a [[Behavior]] object\n     *  - a string specifying the behavior class\n     *  - an object configuration array that will be passed to [[Yii::createObject()]] to create the behavior object.\n     *\n     * @return Behavior the behavior object\n     * @see detachBehavior()\n     *\/",577],["T_WHITESPACE","\n    ",591],["T_PUBLIC","public",592],["T_WHITESPACE"," ",592],["T_FUNCTION","function",592],["T_WHITESPACE"," ",592],["T_STRING","attachBehavior",592],"(",["T_VARIABLE","$name",592],",",["T_WHITESPACE"," ",592],["T_VARIABLE","$behavior",592],")",["T_WHITESPACE","\n    ",592],"{",["T_WHITESPACE","\n        ",593],["T_VARIABLE","$this",594],["T_OBJECT_OPERATOR","->",594],["T_STRING","ensureBehaviors",594],"(",")",";",["T_WHITESPACE","\n        ",594],["T_RETURN","return",595],["T_WHITESPACE"," ",595],["T_VARIABLE","$this",595],["T_OBJECT_OPERATOR","->",595],["T_STRING","attachBehaviorInternal",595],"(",["T_VARIABLE","$name",595],",",["T_WHITESPACE"," ",595],["T_VARIABLE","$behavior",595],")",";",["T_WHITESPACE","\n    ",595],"}",["T_WHITESPACE","\n\n    ",596],["T_DOC_COMMENT","\/**\n     * Attaches a list of behaviors to the component.\n     * Each behavior is indexed by its name and should be a [[Behavior]] object,\n     * a string specifying the behavior class, or an configuration array for creating the behavior.\n     * @param array $behaviors list of behaviors to be attached to the component\n     * @see attachBehavior()\n     *\/",598],["T_WHITESPACE","\n    ",604],["T_PUBLIC","public",605],["T_WHITESPACE"," ",605],["T_FUNCTION","function",605],["T_WHITESPACE"," ",605],["T_STRING","attachBehaviors",605],"(",["T_VARIABLE","$behaviors",605],")",["T_WHITESPACE","\n    ",605],"{",["T_WHITESPACE","\n        ",606],["T_VARIABLE","$this",607],["T_OBJECT_OPERATOR","->",607],["T_STRING","ensureBehaviors",607],"(",")",";",["T_WHITESPACE","\n        ",607],["T_FOREACH","foreach",608],["T_WHITESPACE"," ",608],"(",["T_VARIABLE","$behaviors",608],["T_WHITESPACE"," ",608],["T_AS","as",608],["T_WHITESPACE"," ",608],["T_VARIABLE","$name",608],["T_WHITESPACE"," ",608],["T_DOUBLE_ARROW","=>",608],["T_WHITESPACE"," ",608],["T_VARIABLE","$behavior",608],")",["T_WHITESPACE"," ",608],"{",["T_WHITESPACE","\n            ",608],["T_VARIABLE","$this",609],["T_OBJECT_OPERATOR","->",609],["T_STRING","attachBehaviorInternal",609],"(",["T_VARIABLE","$name",609],",",["T_WHITESPACE"," ",609],["T_VARIABLE","$behavior",609],")",";",["T_WHITESPACE","\n        ",609],"}",["T_WHITESPACE","\n    ",610],"}",["T_WHITESPACE","\n\n    ",611],["T_DOC_COMMENT","\/**\n     * Detaches a behavior from the component.\n     * The behavior's [[Behavior::detach()]] method will be invoked.\n     * @param string $name the behavior's name.\n     * @return null|Behavior the detached behavior. Null if the behavior does not exist.\n     *\/",613],["T_WHITESPACE","\n    ",618],["T_PUBLIC","public",619],["T_WHITESPACE"," ",619],["T_FUNCTION","function",619],["T_WHITESPACE"," ",619],["T_STRING","detachBehavior",619],"(",["T_VARIABLE","$name",619],")",["T_WHITESPACE","\n    ",619],"{",["T_WHITESPACE","\n        ",620],["T_VARIABLE","$this",621],["T_OBJECT_OPERATOR","->",621],["T_STRING","ensureBehaviors",621],"(",")",";",["T_WHITESPACE","\n        ",621],["T_IF","if",622],["T_WHITESPACE"," ",622],"(",["T_ISSET","isset",622],"(",["T_VARIABLE","$this",622],["T_OBJECT_OPERATOR","->",622],["T_STRING","_behaviors",622],"[",["T_VARIABLE","$name",622],"]",")",")",["T_WHITESPACE"," ",622],"{",["T_WHITESPACE","\n            ",622],["T_VARIABLE","$behavior",623],["T_WHITESPACE"," ",623],"=",["T_WHITESPACE"," ",623],["T_VARIABLE","$this",623],["T_OBJECT_OPERATOR","->",623],["T_STRING","_behaviors",623],"[",["T_VARIABLE","$name",623],"]",";",["T_WHITESPACE","\n            ",623],["T_UNSET","unset",624],"(",["T_VARIABLE","$this",624],["T_OBJECT_OPERATOR","->",624],["T_STRING","_behaviors",624],"[",["T_VARIABLE","$name",624],"]",")",";",["T_WHITESPACE","\n            ",624],["T_VARIABLE","$behavior",625],["T_OBJECT_OPERATOR","->",625],["T_STRING","detach",625],"(",")",";",["T_WHITESPACE","\n            ",625],["T_RETURN","return",626],["T_WHITESPACE"," ",626],["T_VARIABLE","$behavior",626],";",["T_WHITESPACE","\n        ",626],"}",["T_WHITESPACE","\n\n        ",627],["T_RETURN","return",629],["T_WHITESPACE"," ",629],["T_STRING","null",629],";",["T_WHITESPACE","\n    ",629],"}",["T_WHITESPACE","\n\n    ",630],["T_DOC_COMMENT","\/**\n     * Detaches all behaviors from the component.\n     *\/",632],["T_WHITESPACE","\n    ",634],["T_PUBLIC","public",635],["T_WHITESPACE"," ",635],["T_FUNCTION","function",635],["T_WHITESPACE"," ",635],["T_STRING","detachBehaviors",635],"(",")",["T_WHITESPACE","\n    ",635],"{",["T_WHITESPACE","\n        ",636],["T_VARIABLE","$this",637],["T_OBJECT_OPERATOR","->",637],["T_STRING","ensureBehaviors",637],"(",")",";",["T_WHITESPACE","\n        ",637],["T_FOREACH","foreach",638],["T_WHITESPACE"," ",638],"(",["T_VARIABLE","$this",638],["T_OBJECT_OPERATOR","->",638],["T_STRING","_behaviors",638],["T_WHITESPACE"," ",638],["T_AS","as",638],["T_WHITESPACE"," ",638],["T_VARIABLE","$name",638],["T_WHITESPACE"," ",638],["T_DOUBLE_ARROW","=>",638],["T_WHITESPACE"," ",638],["T_VARIABLE","$behavior",638],")",["T_WHITESPACE"," ",638],"{",["T_WHITESPACE","\n            ",638],["T_VARIABLE","$this",639],["T_OBJECT_OPERATOR","->",639],["T_STRING","detachBehavior",639],"(",["T_VARIABLE","$name",639],")",";",["T_WHITESPACE","\n        ",639],"}",["T_WHITESPACE","\n    ",640],"}",["T_WHITESPACE","\n\n    ",641],["T_DOC_COMMENT","\/**\n     * Makes sure that the behaviors declared in [[behaviors()]] are attached to this component.\n     *\/",643],["T_WHITESPACE","\n    ",645],["T_PUBLIC","public",646],["T_WHITESPACE"," ",646],["T_FUNCTION","function",646],["T_WHITESPACE"," ",646],["T_STRING","ensureBehaviors",646],"(",")",["T_WHITESPACE","\n    ",646],"{",["T_WHITESPACE","\n        ",647],["T_IF","if",648],["T_WHITESPACE"," ",648],"(",["T_VARIABLE","$this",648],["T_OBJECT_OPERATOR","->",648],["T_STRING","_behaviors",648],["T_WHITESPACE"," ",648],["T_IS_IDENTICAL","===",648],["T_WHITESPACE"," ",648],["T_STRING","null",648],")",["T_WHITESPACE"," ",648],"{",["T_WHITESPACE","\n            ",648],["T_VARIABLE","$this",649],["T_OBJECT_OPERATOR","->",649],["T_STRING","_behaviors",649],["T_WHITESPACE"," ",649],"=",["T_WHITESPACE"," ",649],"[","]",";",["T_WHITESPACE","\n            ",649],["T_FOREACH","foreach",650],["T_WHITESPACE"," ",650],"(",["T_VARIABLE","$this",650],["T_OBJECT_OPERATOR","->",650],["T_STRING","behaviors",650],"(",")",["T_WHITESPACE"," ",650],["T_AS","as",650],["T_WHITESPACE"," ",650],["T_VARIABLE","$name",650],["T_WHITESPACE"," ",650],["T_DOUBLE_ARROW","=>",650],["T_WHITESPACE"," ",650],["T_VARIABLE","$behavior",650],")",["T_WHITESPACE"," ",650],"{",["T_WHITESPACE","\n                ",650],["T_VARIABLE","$this",651],["T_OBJECT_OPERATOR","->",651],["T_STRING","attachBehaviorInternal",651],"(",["T_VARIABLE","$name",651],",",["T_WHITESPACE"," ",651],["T_VARIABLE","$behavior",651],")",";",["T_WHITESPACE","\n            ",651],"}",["T_WHITESPACE","\n        ",652],"}",["T_WHITESPACE","\n    ",653],"}",["T_WHITESPACE","\n\n    ",654],["T_DOC_COMMENT","\/**\n     * Attaches a behavior to this component.\n     * @param string|int $name the name of the behavior. If this is an integer, it means the behavior\n     * is an anonymous one. Otherwise, the behavior is a named one and any existing behavior with the same name\n     * will be detached first.\n     * @param string|array|Behavior $behavior the behavior to be attached\n     * @return Behavior the attached behavior.\n     *\/",656],["T_WHITESPACE","\n    ",663],["T_PRIVATE","private",664],["T_WHITESPACE"," ",664],["T_FUNCTION","function",664],["T_WHITESPACE"," ",664],["T_STRING","attachBehaviorInternal",664],"(",["T_VARIABLE","$name",664],",",["T_WHITESPACE"," ",664],["T_VARIABLE","$behavior",664],")",["T_WHITESPACE","\n    ",664],"{",["T_WHITESPACE","\n        ",665],["T_IF","if",666],["T_WHITESPACE"," ",666],"(","!","(",["T_VARIABLE","$behavior",666],["T_WHITESPACE"," ",666],["T_INSTANCEOF","instanceof",666],["T_WHITESPACE"," ",666],["T_STRING","Behavior",666],")",")",["T_WHITESPACE"," ",666],"{",["T_WHITESPACE","\n            ",666],["T_VARIABLE","$behavior",667],["T_WHITESPACE"," ",667],"=",["T_WHITESPACE"," ",667],["T_STRING","Yii",667],["T_DOUBLE_COLON","::",667],["T_STRING","createObject",667],"(",["T_VARIABLE","$behavior",667],")",";",["T_WHITESPACE","\n        ",667],"}",["T_WHITESPACE","\n        ",668],["T_IF","if",669],["T_WHITESPACE"," ",669],"(",["T_STRING","is_int",669],"(",["T_VARIABLE","$name",669],")",")",["T_WHITESPACE"," ",669],"{",["T_WHITESPACE","\n            ",669],["T_VARIABLE","$behavior",670],["T_OBJECT_OPERATOR","->",670],["T_STRING","attach",670],"(",["T_VARIABLE","$this",670],")",";",["T_WHITESPACE","\n            ",670],["T_VARIABLE","$this",671],["T_OBJECT_OPERATOR","->",671],["T_STRING","_behaviors",671],"[","]",["T_WHITESPACE"," ",671],"=",["T_WHITESPACE"," ",671],["T_VARIABLE","$behavior",671],";",["T_WHITESPACE","\n        ",671],"}",["T_WHITESPACE","\n\n        ",672],["T_IF","if",674],["T_WHITESPACE"," ",674],"(",["T_ISSET","isset",674],"(",["T_VARIABLE","$this",674],["T_OBJECT_OPERATOR","->",674],["T_STRING","_behaviors",674],"[",["T_VARIABLE","$name",674],"]",")",")",["T_WHITESPACE"," ",674],"{",["T_WHITESPACE","\n            ",674],["T_VARIABLE","$this",675],["T_OBJECT_OPERATOR","->",675],["T_STRING","_behaviors",675],"[",["T_VARIABLE","$name",675],"]",["T_OBJECT_OPERATOR","->",675],["T_STRING","detach",675],"(",")",";",["T_WHITESPACE","\n        ",675],"}",["T_WHITESPACE","\n        ",676],["T_VARIABLE","$behavior",677],["T_OBJECT_OPERATOR","->",677],["T_STRING","attach",677],"(",["T_VARIABLE","$this",677],")",";",["T_WHITESPACE","\n        ",677],["T_VARIABLE","$this",678],["T_OBJECT_OPERATOR","->",678],["T_STRING","_behaviors",678],"[",["T_VARIABLE","$name",678],"]",["T_WHITESPACE"," ",678],"=",["T_WHITESPACE"," ",678],["T_VARIABLE","$behavior",678],";",["T_WHITESPACE","\n\n        ",678],["T_RETURN","return",680],["T_WHITESPACE"," ",680],["T_VARIABLE","$behavior",680],";",["T_WHITESPACE","\n    ",680],"}",["T_WHITESPACE","\n",681],"}",["T_WHITESPACE","\n",682]]