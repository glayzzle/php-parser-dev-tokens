[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","base",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n\n",10],["T_DOC_COMMENT","\/**\n * Object is the base class that implements the *property* feature.\n *\n * A property is defined by a getter method (e.g. `getLabel`), and\/or a setter method (e.g. `setLabel`). For example,\n * the following getter and setter methods define a property named `label`:\n *\n * ```php\n * private $_label;\n *\n * public function getLabel()\n * {\n *     return $this->_label;\n * }\n *\n * public function setLabel($value)\n * {\n *     $this->_label = $value;\n * }\n * ```\n *\n * Property names are *case-insensitive*.\n *\n * A property can be accessed like a member variable of an object. Reading or writing a property will cause the invocation\n * of the corresponding getter or setter method. For example,\n *\n * ```php\n * \/\/ equivalent to $label = $object->getLabel();\n * $label = $object->label;\n * \/\/ equivalent to $object->setLabel('abc');\n * $object->label = 'abc';\n * ```\n *\n * If a property has only a getter method and has no setter method, it is considered as *read-only*. In this case, trying\n * to modify the property value will cause an exception.\n *\n * One can call [[hasProperty()]], [[canGetProperty()]] and\/or [[canSetProperty()]] to check the existence of a property.\n *\n * Besides the property feature, Object also introduces an important object initialization life cycle. In particular,\n * creating an new instance of Object or its derived class will involve the following life cycles sequentially:\n *\n * 1. the class constructor is invoked;\n * 2. object properties are initialized according to the given configuration;\n * 3. the `init()` method is invoked.\n *\n * In the above, both Step 2 and 3 occur at the end of the class constructor. It is recommended that\n * you perform object initialization in the `init()` method because at that stage, the object configuration\n * is already applied.\n *\n * In order to ensure the above life cycles, if a child class of Object needs to override the constructor,\n * it should be done like the following:\n *\n * ```php\n * public function __construct($param1, $param2, ..., $config = [])\n * {\n *     ...\n *     parent::__construct($config);\n * }\n * ```\n *\n * That is, a `$config` parameter (defaults to `[]`) should be declared as the last parameter\n * of the constructor, and the parent implementation should be called at the end of the constructor.\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",12],["T_WHITESPACE","\n",76],["T_CLASS","class",77],["T_WHITESPACE"," ",77],["T_STRING","Object",77],["T_WHITESPACE"," ",77],["T_IMPLEMENTS","implements",77],["T_WHITESPACE"," ",77],["T_STRING","Configurable",77],["T_WHITESPACE","\n",77],"{",["T_WHITESPACE","\n    ",78],["T_DOC_COMMENT","\/**\n     * Returns the fully qualified name of this class.\n     * @return string the fully qualified name of this class.\n     *\/",79],["T_WHITESPACE","\n    ",82],["T_PUBLIC","public",83],["T_WHITESPACE"," ",83],["T_STATIC","static",83],["T_WHITESPACE"," ",83],["T_FUNCTION","function",83],["T_WHITESPACE"," ",83],["T_STRING","className",83],"(",")",["T_WHITESPACE","\n    ",83],"{",["T_WHITESPACE","\n        ",84],["T_RETURN","return",85],["T_WHITESPACE"," ",85],["T_STRING","get_called_class",85],"(",")",";",["T_WHITESPACE","\n    ",85],"}",["T_WHITESPACE","\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Constructor.\n     * The default implementation does two things:\n     *\n     * - Initializes the object with the given configuration `$config`.\n     * - Call [[init()]].\n     *\n     * If this method is overridden in a child class, it is recommended that\n     *\n     * - the last parameter of the constructor is a configuration array, like `$config` here.\n     * - call the parent implementation at the end of the constructor.\n     *\n     * @param array $config name-value pairs that will be used to initialize the object properties\n     *\/",88],["T_WHITESPACE","\n    ",101],["T_PUBLIC","public",102],["T_WHITESPACE"," ",102],["T_FUNCTION","function",102],["T_WHITESPACE"," ",102],["T_STRING","__construct",102],"(",["T_VARIABLE","$config",102],["T_WHITESPACE"," ",102],"=",["T_WHITESPACE"," ",102],"[","]",")",["T_WHITESPACE","\n    ",102],"{",["T_WHITESPACE","\n        ",103],["T_IF","if",104],["T_WHITESPACE"," ",104],"(","!",["T_EMPTY","empty",104],"(",["T_VARIABLE","$config",104],")",")",["T_WHITESPACE"," ",104],"{",["T_WHITESPACE","\n            ",104],["T_STRING","Yii",105],["T_DOUBLE_COLON","::",105],["T_STRING","configure",105],"(",["T_VARIABLE","$this",105],",",["T_WHITESPACE"," ",105],["T_VARIABLE","$config",105],")",";",["T_WHITESPACE","\n        ",105],"}",["T_WHITESPACE","\n        ",106],["T_VARIABLE","$this",107],["T_OBJECT_OPERATOR","->",107],["T_STRING","init",107],"(",")",";",["T_WHITESPACE","\n    ",107],"}",["T_WHITESPACE","\n\n    ",108],["T_DOC_COMMENT","\/**\n     * Initializes the object.\n     * This method is invoked at the end of the constructor after the object is initialized with the\n     * given configuration.\n     *\/",110],["T_WHITESPACE","\n    ",114],["T_PUBLIC","public",115],["T_WHITESPACE"," ",115],["T_FUNCTION","function",115],["T_WHITESPACE"," ",115],["T_STRING","init",115],"(",")",["T_WHITESPACE","\n    ",115],"{",["T_WHITESPACE","\n    ",116],"}",["T_WHITESPACE","\n\n    ",117],["T_DOC_COMMENT","\/**\n     * Returns the value of an object property.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `$value = $object->property;`.\n     * @param string $name the property name\n     * @return mixed the property value\n     * @throws UnknownPropertyException if the property is not defined\n     * @throws InvalidCallException if the property is write-only\n     * @see __set()\n     *\/",119],["T_WHITESPACE","\n    ",129],["T_PUBLIC","public",130],["T_WHITESPACE"," ",130],["T_FUNCTION","function",130],["T_WHITESPACE"," ",130],["T_STRING","__get",130],"(",["T_VARIABLE","$name",130],")",["T_WHITESPACE","\n    ",130],"{",["T_WHITESPACE","\n        ",131],["T_VARIABLE","$getter",132],["T_WHITESPACE"," ",132],"=",["T_WHITESPACE"," ",132],["T_CONSTANT_ENCAPSED_STRING","'get'",132],["T_WHITESPACE"," ",132],".",["T_WHITESPACE"," ",132],["T_VARIABLE","$name",132],";",["T_WHITESPACE","\n        ",132],["T_IF","if",133],["T_WHITESPACE"," ",133],"(",["T_STRING","method_exists",133],"(",["T_VARIABLE","$this",133],",",["T_WHITESPACE"," ",133],["T_VARIABLE","$getter",133],")",")",["T_WHITESPACE"," ",133],"{",["T_WHITESPACE","\n            ",133],["T_RETURN","return",134],["T_WHITESPACE"," ",134],["T_VARIABLE","$this",134],["T_OBJECT_OPERATOR","->",134],["T_VARIABLE","$getter",134],"(",")",";",["T_WHITESPACE","\n        ",134],"}",["T_WHITESPACE"," ",135],["T_ELSEIF","elseif",135],["T_WHITESPACE"," ",135],"(",["T_STRING","method_exists",135],"(",["T_VARIABLE","$this",135],",",["T_WHITESPACE"," ",135],["T_CONSTANT_ENCAPSED_STRING","'set'",135],["T_WHITESPACE"," ",135],".",["T_WHITESPACE"," ",135],["T_VARIABLE","$name",135],")",")",["T_WHITESPACE"," ",135],"{",["T_WHITESPACE","\n            ",135],["T_THROW","throw",136],["T_WHITESPACE"," ",136],["T_NEW","new",136],["T_WHITESPACE"," ",136],["T_STRING","InvalidCallException",136],"(",["T_CONSTANT_ENCAPSED_STRING","'Getting write-only property: '",136],["T_WHITESPACE"," ",136],".",["T_WHITESPACE"," ",136],["T_STRING","get_class",136],"(",["T_VARIABLE","$this",136],")",["T_WHITESPACE"," ",136],".",["T_WHITESPACE"," ",136],["T_CONSTANT_ENCAPSED_STRING","'::'",136],["T_WHITESPACE"," ",136],".",["T_WHITESPACE"," ",136],["T_VARIABLE","$name",136],")",";",["T_WHITESPACE","\n        ",136],"}",["T_WHITESPACE"," ",137],["T_ELSE","else",137],["T_WHITESPACE"," ",137],"{",["T_WHITESPACE","\n            ",137],["T_THROW","throw",138],["T_WHITESPACE"," ",138],["T_NEW","new",138],["T_WHITESPACE"," ",138],["T_STRING","UnknownPropertyException",138],"(",["T_CONSTANT_ENCAPSED_STRING","'Getting unknown property: '",138],["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_STRING","get_class",138],"(",["T_VARIABLE","$this",138],")",["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_CONSTANT_ENCAPSED_STRING","'::'",138],["T_WHITESPACE"," ",138],".",["T_WHITESPACE"," ",138],["T_VARIABLE","$name",138],")",";",["T_WHITESPACE","\n        ",138],"}",["T_WHITESPACE","\n    ",139],"}",["T_WHITESPACE","\n\n    ",140],["T_DOC_COMMENT","\/**\n     * Sets value of an object property.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `$object->property = $value;`.\n     * @param string $name the property name or the event name\n     * @param mixed $value the property value\n     * @throws UnknownPropertyException if the property is not defined\n     * @throws InvalidCallException if the property is read-only\n     * @see __get()\n     *\/",142],["T_WHITESPACE","\n    ",152],["T_PUBLIC","public",153],["T_WHITESPACE"," ",153],["T_FUNCTION","function",153],["T_WHITESPACE"," ",153],["T_STRING","__set",153],"(",["T_VARIABLE","$name",153],",",["T_WHITESPACE"," ",153],["T_VARIABLE","$value",153],")",["T_WHITESPACE","\n    ",153],"{",["T_WHITESPACE","\n        ",154],["T_VARIABLE","$setter",155],["T_WHITESPACE"," ",155],"=",["T_WHITESPACE"," ",155],["T_CONSTANT_ENCAPSED_STRING","'set'",155],["T_WHITESPACE"," ",155],".",["T_WHITESPACE"," ",155],["T_VARIABLE","$name",155],";",["T_WHITESPACE","\n        ",155],["T_IF","if",156],["T_WHITESPACE"," ",156],"(",["T_STRING","method_exists",156],"(",["T_VARIABLE","$this",156],",",["T_WHITESPACE"," ",156],["T_VARIABLE","$setter",156],")",")",["T_WHITESPACE"," ",156],"{",["T_WHITESPACE","\n            ",156],["T_VARIABLE","$this",157],["T_OBJECT_OPERATOR","->",157],["T_VARIABLE","$setter",157],"(",["T_VARIABLE","$value",157],")",";",["T_WHITESPACE","\n        ",157],"}",["T_WHITESPACE"," ",158],["T_ELSEIF","elseif",158],["T_WHITESPACE"," ",158],"(",["T_STRING","method_exists",158],"(",["T_VARIABLE","$this",158],",",["T_WHITESPACE"," ",158],["T_CONSTANT_ENCAPSED_STRING","'get'",158],["T_WHITESPACE"," ",158],".",["T_WHITESPACE"," ",158],["T_VARIABLE","$name",158],")",")",["T_WHITESPACE"," ",158],"{",["T_WHITESPACE","\n            ",158],["T_THROW","throw",159],["T_WHITESPACE"," ",159],["T_NEW","new",159],["T_WHITESPACE"," ",159],["T_STRING","InvalidCallException",159],"(",["T_CONSTANT_ENCAPSED_STRING","'Setting read-only property: '",159],["T_WHITESPACE"," ",159],".",["T_WHITESPACE"," ",159],["T_STRING","get_class",159],"(",["T_VARIABLE","$this",159],")",["T_WHITESPACE"," ",159],".",["T_WHITESPACE"," ",159],["T_CONSTANT_ENCAPSED_STRING","'::'",159],["T_WHITESPACE"," ",159],".",["T_WHITESPACE"," ",159],["T_VARIABLE","$name",159],")",";",["T_WHITESPACE","\n        ",159],"}",["T_WHITESPACE"," ",160],["T_ELSE","else",160],["T_WHITESPACE"," ",160],"{",["T_WHITESPACE","\n            ",160],["T_THROW","throw",161],["T_WHITESPACE"," ",161],["T_NEW","new",161],["T_WHITESPACE"," ",161],["T_STRING","UnknownPropertyException",161],"(",["T_CONSTANT_ENCAPSED_STRING","'Setting unknown property: '",161],["T_WHITESPACE"," ",161],".",["T_WHITESPACE"," ",161],["T_STRING","get_class",161],"(",["T_VARIABLE","$this",161],")",["T_WHITESPACE"," ",161],".",["T_WHITESPACE"," ",161],["T_CONSTANT_ENCAPSED_STRING","'::'",161],["T_WHITESPACE"," ",161],".",["T_WHITESPACE"," ",161],["T_VARIABLE","$name",161],")",";",["T_WHITESPACE","\n        ",161],"}",["T_WHITESPACE","\n    ",162],"}",["T_WHITESPACE","\n\n    ",163],["T_DOC_COMMENT","\/**\n     * Checks if a property is set, i.e. defined and not null.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `isset($object->property)`.\n     *\n     * Note that if the property is not defined, false will be returned.\n     * @param string $name the property name or the event name\n     * @return bool whether the named property is set (not null).\n     * @see http:\/\/php.net\/manual\/en\/function.isset.php\n     *\/",165],["T_WHITESPACE","\n    ",175],["T_PUBLIC","public",176],["T_WHITESPACE"," ",176],["T_FUNCTION","function",176],["T_WHITESPACE"," ",176],["T_STRING","__isset",176],"(",["T_VARIABLE","$name",176],")",["T_WHITESPACE","\n    ",176],"{",["T_WHITESPACE","\n        ",177],["T_VARIABLE","$getter",178],["T_WHITESPACE"," ",178],"=",["T_WHITESPACE"," ",178],["T_CONSTANT_ENCAPSED_STRING","'get'",178],["T_WHITESPACE"," ",178],".",["T_WHITESPACE"," ",178],["T_VARIABLE","$name",178],";",["T_WHITESPACE","\n        ",178],["T_IF","if",179],["T_WHITESPACE"," ",179],"(",["T_STRING","method_exists",179],"(",["T_VARIABLE","$this",179],",",["T_WHITESPACE"," ",179],["T_VARIABLE","$getter",179],")",")",["T_WHITESPACE"," ",179],"{",["T_WHITESPACE","\n            ",179],["T_RETURN","return",180],["T_WHITESPACE"," ",180],["T_VARIABLE","$this",180],["T_OBJECT_OPERATOR","->",180],["T_VARIABLE","$getter",180],"(",")",["T_WHITESPACE"," ",180],["T_IS_NOT_IDENTICAL","!==",180],["T_WHITESPACE"," ",180],["T_STRING","null",180],";",["T_WHITESPACE","\n        ",180],"}",["T_WHITESPACE"," ",181],["T_ELSE","else",181],["T_WHITESPACE"," ",181],"{",["T_WHITESPACE","\n            ",181],["T_RETURN","return",182],["T_WHITESPACE"," ",182],["T_STRING","false",182],";",["T_WHITESPACE","\n        ",182],"}",["T_WHITESPACE","\n    ",183],"}",["T_WHITESPACE","\n\n    ",184],["T_DOC_COMMENT","\/**\n     * Sets an object property to null.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when executing `unset($object->property)`.\n     *\n     * Note that if the property is not defined, this method will do nothing.\n     * If the property is read-only, it will throw an exception.\n     * @param string $name the property name\n     * @throws InvalidCallException if the property is read only.\n     * @see http:\/\/php.net\/manual\/en\/function.unset.php\n     *\/",186],["T_WHITESPACE","\n    ",197],["T_PUBLIC","public",198],["T_WHITESPACE"," ",198],["T_FUNCTION","function",198],["T_WHITESPACE"," ",198],["T_STRING","__unset",198],"(",["T_VARIABLE","$name",198],")",["T_WHITESPACE","\n    ",198],"{",["T_WHITESPACE","\n        ",199],["T_VARIABLE","$setter",200],["T_WHITESPACE"," ",200],"=",["T_WHITESPACE"," ",200],["T_CONSTANT_ENCAPSED_STRING","'set'",200],["T_WHITESPACE"," ",200],".",["T_WHITESPACE"," ",200],["T_VARIABLE","$name",200],";",["T_WHITESPACE","\n        ",200],["T_IF","if",201],["T_WHITESPACE"," ",201],"(",["T_STRING","method_exists",201],"(",["T_VARIABLE","$this",201],",",["T_WHITESPACE"," ",201],["T_VARIABLE","$setter",201],")",")",["T_WHITESPACE"," ",201],"{",["T_WHITESPACE","\n            ",201],["T_VARIABLE","$this",202],["T_OBJECT_OPERATOR","->",202],["T_VARIABLE","$setter",202],"(",["T_STRING","null",202],")",";",["T_WHITESPACE","\n        ",202],"}",["T_WHITESPACE"," ",203],["T_ELSEIF","elseif",203],["T_WHITESPACE"," ",203],"(",["T_STRING","method_exists",203],"(",["T_VARIABLE","$this",203],",",["T_WHITESPACE"," ",203],["T_CONSTANT_ENCAPSED_STRING","'get'",203],["T_WHITESPACE"," ",203],".",["T_WHITESPACE"," ",203],["T_VARIABLE","$name",203],")",")",["T_WHITESPACE"," ",203],"{",["T_WHITESPACE","\n            ",203],["T_THROW","throw",204],["T_WHITESPACE"," ",204],["T_NEW","new",204],["T_WHITESPACE"," ",204],["T_STRING","InvalidCallException",204],"(",["T_CONSTANT_ENCAPSED_STRING","'Unsetting read-only property: '",204],["T_WHITESPACE"," ",204],".",["T_WHITESPACE"," ",204],["T_STRING","get_class",204],"(",["T_VARIABLE","$this",204],")",["T_WHITESPACE"," ",204],".",["T_WHITESPACE"," ",204],["T_CONSTANT_ENCAPSED_STRING","'::'",204],["T_WHITESPACE"," ",204],".",["T_WHITESPACE"," ",204],["T_VARIABLE","$name",204],")",";",["T_WHITESPACE","\n        ",204],"}",["T_WHITESPACE","\n    ",205],"}",["T_WHITESPACE","\n\n    ",206],["T_DOC_COMMENT","\/**\n     * Calls the named method which is not a class method.\n     *\n     * Do not call this method directly as it is a PHP magic method that\n     * will be implicitly called when an unknown method is being invoked.\n     * @param string $name the method name\n     * @param array $params method parameters\n     * @throws UnknownMethodException when calling unknown method\n     * @return mixed the method return value\n     *\/",208],["T_WHITESPACE","\n    ",217],["T_PUBLIC","public",218],["T_WHITESPACE"," ",218],["T_FUNCTION","function",218],["T_WHITESPACE"," ",218],["T_STRING","__call",218],"(",["T_VARIABLE","$name",218],",",["T_WHITESPACE"," ",218],["T_VARIABLE","$params",218],")",["T_WHITESPACE","\n    ",218],"{",["T_WHITESPACE","\n        ",219],["T_THROW","throw",220],["T_WHITESPACE"," ",220],["T_NEW","new",220],["T_WHITESPACE"," ",220],["T_STRING","UnknownMethodException",220],"(",["T_CONSTANT_ENCAPSED_STRING","'Calling unknown method: '",220],["T_WHITESPACE"," ",220],".",["T_WHITESPACE"," ",220],["T_STRING","get_class",220],"(",["T_VARIABLE","$this",220],")",["T_WHITESPACE"," ",220],".",["T_WHITESPACE"," ",220],"\"",["T_ENCAPSED_AND_WHITESPACE","::",220],["T_VARIABLE","$name",220],["T_ENCAPSED_AND_WHITESPACE","()",220],"\"",")",";",["T_WHITESPACE","\n    ",220],"}",["T_WHITESPACE","\n\n    ",221],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property is defined.\n     * A property is defined if:\n     *\n     * - the class has a getter or setter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @return bool whether the property is defined\n     * @see canGetProperty()\n     * @see canSetProperty()\n     *\/",223],["T_WHITESPACE","\n    ",236],["T_PUBLIC","public",237],["T_WHITESPACE"," ",237],["T_FUNCTION","function",237],["T_WHITESPACE"," ",237],["T_STRING","hasProperty",237],"(",["T_VARIABLE","$name",237],",",["T_WHITESPACE"," ",237],["T_VARIABLE","$checkVars",237],["T_WHITESPACE"," ",237],"=",["T_WHITESPACE"," ",237],["T_STRING","true",237],")",["T_WHITESPACE","\n    ",237],"{",["T_WHITESPACE","\n        ",238],["T_RETURN","return",239],["T_WHITESPACE"," ",239],["T_VARIABLE","$this",239],["T_OBJECT_OPERATOR","->",239],["T_STRING","canGetProperty",239],"(",["T_VARIABLE","$name",239],",",["T_WHITESPACE"," ",239],["T_VARIABLE","$checkVars",239],")",["T_WHITESPACE"," ",239],["T_BOOLEAN_OR","||",239],["T_WHITESPACE"," ",239],["T_VARIABLE","$this",239],["T_OBJECT_OPERATOR","->",239],["T_STRING","canSetProperty",239],"(",["T_VARIABLE","$name",239],",",["T_WHITESPACE"," ",239],["T_STRING","false",239],")",";",["T_WHITESPACE","\n    ",239],"}",["T_WHITESPACE","\n\n    ",240],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property can be read.\n     * A property is readable if:\n     *\n     * - the class has a getter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @return bool whether the property can be read\n     * @see canSetProperty()\n     *\/",242],["T_WHITESPACE","\n    ",254],["T_PUBLIC","public",255],["T_WHITESPACE"," ",255],["T_FUNCTION","function",255],["T_WHITESPACE"," ",255],["T_STRING","canGetProperty",255],"(",["T_VARIABLE","$name",255],",",["T_WHITESPACE"," ",255],["T_VARIABLE","$checkVars",255],["T_WHITESPACE"," ",255],"=",["T_WHITESPACE"," ",255],["T_STRING","true",255],")",["T_WHITESPACE","\n    ",255],"{",["T_WHITESPACE","\n        ",256],["T_RETURN","return",257],["T_WHITESPACE"," ",257],["T_STRING","method_exists",257],"(",["T_VARIABLE","$this",257],",",["T_WHITESPACE"," ",257],["T_CONSTANT_ENCAPSED_STRING","'get'",257],["T_WHITESPACE"," ",257],".",["T_WHITESPACE"," ",257],["T_VARIABLE","$name",257],")",["T_WHITESPACE"," ",257],["T_BOOLEAN_OR","||",257],["T_WHITESPACE"," ",257],["T_VARIABLE","$checkVars",257],["T_WHITESPACE"," ",257],["T_BOOLEAN_AND","&&",257],["T_WHITESPACE"," ",257],["T_STRING","property_exists",257],"(",["T_VARIABLE","$this",257],",",["T_WHITESPACE"," ",257],["T_VARIABLE","$name",257],")",";",["T_WHITESPACE","\n    ",257],"}",["T_WHITESPACE","\n\n    ",258],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a property can be set.\n     * A property is writable if:\n     *\n     * - the class has a setter method associated with the specified name\n     *   (in this case, property name is case-insensitive);\n     * - the class has a member variable with the specified name (when `$checkVars` is true);\n     *\n     * @param string $name the property name\n     * @param bool $checkVars whether to treat member variables as properties\n     * @return bool whether the property can be written\n     * @see canGetProperty()\n     *\/",260],["T_WHITESPACE","\n    ",272],["T_PUBLIC","public",273],["T_WHITESPACE"," ",273],["T_FUNCTION","function",273],["T_WHITESPACE"," ",273],["T_STRING","canSetProperty",273],"(",["T_VARIABLE","$name",273],",",["T_WHITESPACE"," ",273],["T_VARIABLE","$checkVars",273],["T_WHITESPACE"," ",273],"=",["T_WHITESPACE"," ",273],["T_STRING","true",273],")",["T_WHITESPACE","\n    ",273],"{",["T_WHITESPACE","\n        ",274],["T_RETURN","return",275],["T_WHITESPACE"," ",275],["T_STRING","method_exists",275],"(",["T_VARIABLE","$this",275],",",["T_WHITESPACE"," ",275],["T_CONSTANT_ENCAPSED_STRING","'set'",275],["T_WHITESPACE"," ",275],".",["T_WHITESPACE"," ",275],["T_VARIABLE","$name",275],")",["T_WHITESPACE"," ",275],["T_BOOLEAN_OR","||",275],["T_WHITESPACE"," ",275],["T_VARIABLE","$checkVars",275],["T_WHITESPACE"," ",275],["T_BOOLEAN_AND","&&",275],["T_WHITESPACE"," ",275],["T_STRING","property_exists",275],"(",["T_VARIABLE","$this",275],",",["T_WHITESPACE"," ",275],["T_VARIABLE","$name",275],")",";",["T_WHITESPACE","\n    ",275],"}",["T_WHITESPACE","\n\n    ",276],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether a method is defined.\n     *\n     * The default implementation is a call to php function `method_exists()`.\n     * You may override this method when you implemented the php magic method `__call()`.\n     * @param string $name the method name\n     * @return bool whether the method is defined\n     *\/",278],["T_WHITESPACE","\n    ",285],["T_PUBLIC","public",286],["T_WHITESPACE"," ",286],["T_FUNCTION","function",286],["T_WHITESPACE"," ",286],["T_STRING","hasMethod",286],"(",["T_VARIABLE","$name",286],")",["T_WHITESPACE","\n    ",286],"{",["T_WHITESPACE","\n        ",287],["T_RETURN","return",288],["T_WHITESPACE"," ",288],["T_STRING","method_exists",288],"(",["T_VARIABLE","$this",288],",",["T_WHITESPACE"," ",288],["T_VARIABLE","$name",288],")",";",["T_WHITESPACE","\n    ",288],"}",["T_WHITESPACE","\n",289],"}",["T_WHITESPACE","\n",290]]