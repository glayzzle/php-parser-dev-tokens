[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","base",8],";",["T_WHITESPACE","\n\n",8],["T_USE","use",10],["T_WHITESPACE"," ",10],["T_STRING","Yii",10],";",["T_WHITESPACE","\n",10],["T_USE","use",11],["T_WHITESPACE"," ",11],["T_STRING","ArrayAccess",11],";",["T_WHITESPACE","\n",11],["T_USE","use",12],["T_WHITESPACE"," ",12],["T_STRING","ArrayObject",12],";",["T_WHITESPACE","\n",12],["T_USE","use",13],["T_WHITESPACE"," ",13],["T_STRING","ArrayIterator",13],";",["T_WHITESPACE","\n",13],["T_USE","use",14],["T_WHITESPACE"," ",14],["T_STRING","ReflectionClass",14],";",["T_WHITESPACE","\n",14],["T_USE","use",15],["T_WHITESPACE"," ",15],["T_STRING","IteratorAggregate",15],";",["T_WHITESPACE","\n",15],["T_USE","use",16],["T_WHITESPACE"," ",16],["T_STRING","yii",16],["T_NS_SEPARATOR","\\",16],["T_STRING","helpers",16],["T_NS_SEPARATOR","\\",16],["T_STRING","Inflector",16],";",["T_WHITESPACE","\n",16],["T_USE","use",17],["T_WHITESPACE"," ",17],["T_STRING","yii",17],["T_NS_SEPARATOR","\\",17],["T_STRING","validators",17],["T_NS_SEPARATOR","\\",17],["T_STRING","RequiredValidator",17],";",["T_WHITESPACE","\n",17],["T_USE","use",18],["T_WHITESPACE"," ",18],["T_STRING","yii",18],["T_NS_SEPARATOR","\\",18],["T_STRING","validators",18],["T_NS_SEPARATOR","\\",18],["T_STRING","Validator",18],";",["T_WHITESPACE","\n\n",18],["T_DOC_COMMENT","\/**\n * Model is the base class for data models.\n *\n * Model implements the following commonly used features:\n *\n * - attribute declaration: by default, every public class member is considered as\n *   a model attribute\n * - attribute labels: each attribute may be associated with a label for display purpose\n * - massive attribute assignment\n * - scenario-based validation\n *\n * Model also raises the following events when performing data validation:\n *\n * - [[EVENT_BEFORE_VALIDATE]]: an event raised at the beginning of [[validate()]]\n * - [[EVENT_AFTER_VALIDATE]]: an event raised at the end of [[validate()]]\n *\n * You may directly use Model to store model data, or extend it with customization.\n *\n * For more details and usage information on Model, see the [guide article on models](guide:structure-models).\n *\n * @property \\yii\\validators\\Validator[] $activeValidators The validators applicable to the current\n * [[scenario]]. This property is read-only.\n * @property array $attributes Attribute values (name => value).\n * @property array $errors An array of errors for all attributes. Empty array is returned if no error. The\n * result is a two-dimensional array. See [[getErrors()]] for detailed description. This property is read-only.\n * @property array $firstErrors The first errors. The array keys are the attribute names, and the array values\n * are the corresponding error messages. An empty array will be returned if there is no error. This property is\n * read-only.\n * @property ArrayIterator $iterator An iterator for traversing the items in the list. This property is\n * read-only.\n * @property string $scenario The scenario that this model is in. Defaults to [[SCENARIO_DEFAULT]].\n * @property ArrayObject|\\yii\\validators\\Validator[] $validators All the validators declared in the model.\n * This property is read-only.\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",20],["T_WHITESPACE","\n",56],["T_CLASS","class",57],["T_WHITESPACE"," ",57],["T_STRING","Model",57],["T_WHITESPACE"," ",57],["T_EXTENDS","extends",57],["T_WHITESPACE"," ",57],["T_STRING","Component",57],["T_WHITESPACE"," ",57],["T_IMPLEMENTS","implements",57],["T_WHITESPACE"," ",57],["T_STRING","IteratorAggregate",57],",",["T_WHITESPACE"," ",57],["T_STRING","ArrayAccess",57],",",["T_WHITESPACE"," ",57],["T_STRING","Arrayable",57],["T_WHITESPACE","\n",57],"{",["T_WHITESPACE","\n    ",58],["T_USE","use",59],["T_WHITESPACE"," ",59],["T_STRING","ArrayableTrait",59],";",["T_WHITESPACE","\n\n    ",59],["T_DOC_COMMENT","\/**\n     * The name of the default scenario.\n     *\/",61],["T_WHITESPACE","\n    ",63],["T_CONST","const",64],["T_WHITESPACE"," ",64],["T_STRING","SCENARIO_DEFAULT",64],["T_WHITESPACE"," ",64],"=",["T_WHITESPACE"," ",64],["T_CONSTANT_ENCAPSED_STRING","'default'",64],";",["T_WHITESPACE","\n    ",64],["T_DOC_COMMENT","\/**\n     * @event ModelEvent an event raised at the beginning of [[validate()]]. You may set\n     * [[ModelEvent::isValid]] to be false to stop the validation.\n     *\/",65],["T_WHITESPACE","\n    ",68],["T_CONST","const",69],["T_WHITESPACE"," ",69],["T_STRING","EVENT_BEFORE_VALIDATE",69],["T_WHITESPACE"," ",69],"=",["T_WHITESPACE"," ",69],["T_CONSTANT_ENCAPSED_STRING","'beforeValidate'",69],";",["T_WHITESPACE","\n    ",69],["T_DOC_COMMENT","\/**\n     * @event Event an event raised at the end of [[validate()]]\n     *\/",70],["T_WHITESPACE","\n    ",72],["T_CONST","const",73],["T_WHITESPACE"," ",73],["T_STRING","EVENT_AFTER_VALIDATE",73],["T_WHITESPACE"," ",73],"=",["T_WHITESPACE"," ",73],["T_CONSTANT_ENCAPSED_STRING","'afterValidate'",73],";",["T_WHITESPACE","\n\n    ",73],["T_DOC_COMMENT","\/**\n     * @var array validation errors (attribute name => array of errors)\n     *\/",75],["T_WHITESPACE","\n    ",77],["T_PRIVATE","private",78],["T_WHITESPACE"," ",78],["T_VARIABLE","$_errors",78],";",["T_WHITESPACE","\n    ",78],["T_DOC_COMMENT","\/**\n     * @var ArrayObject list of validators\n     *\/",79],["T_WHITESPACE","\n    ",81],["T_PRIVATE","private",82],["T_WHITESPACE"," ",82],["T_VARIABLE","$_validators",82],";",["T_WHITESPACE","\n    ",82],["T_DOC_COMMENT","\/**\n     * @var string current scenario\n     *\/",83],["T_WHITESPACE","\n    ",85],["T_PRIVATE","private",86],["T_WHITESPACE"," ",86],["T_VARIABLE","$_scenario",86],["T_WHITESPACE"," ",86],"=",["T_WHITESPACE"," ",86],["T_STRING","self",86],["T_DOUBLE_COLON","::",86],["T_STRING","SCENARIO_DEFAULT",86],";",["T_WHITESPACE","\n\n\n    ",86],["T_DOC_COMMENT","\/**\n     * Returns the validation rules for attributes.\n     *\n     * Validation rules are used by [[validate()]] to check if attribute values are valid.\n     * Child classes may override this method to declare different validation rules.\n     *\n     * Each rule is an array with the following structure:\n     *\n     * ```php\n     * [\n     *     ['attribute1', 'attribute2'],\n     *     'validator type',\n     *     'on' => ['scenario1', 'scenario2'],\n     *     \/\/...other parameters...\n     * ]\n     * ```\n     *\n     * where\n     *\n     *  - attribute list: required, specifies the attributes array to be validated, for single attribute you can pass a string;\n     *  - validator type: required, specifies the validator to be used. It can be a built-in validator name,\n     *    a method name of the model class, an anonymous function, or a validator class name.\n     *  - on: optional, specifies the [[scenario|scenarios]] array in which the validation\n     *    rule can be applied. If this option is not set, the rule will apply to all scenarios.\n     *  - additional name-value pairs can be specified to initialize the corresponding validator properties.\n     *    Please refer to individual validator class API for possible properties.\n     *\n     * A validator can be either an object of a class extending [[Validator]], or a model class method\n     * (called *inline validator*) that has the following signature:\n     *\n     * ```php\n     * \/\/ $params refers to validation parameters given in the rule\n     * function validatorName($attribute, $params)\n     * ```\n     *\n     * In the above `$attribute` refers to the attribute currently being validated while `$params` contains an array of\n     * validator configuration options such as `max` in case of `string` validator. The value of the attribute currently being validated\n     * can be accessed as `$this->$attribute`. Note the `$` before `attribute`; this is taking the value of the variable\n     * `$attribute` and using it as the name of the property to access.\n     *\n     * Yii also provides a set of [[Validator::builtInValidators|built-in validators]].\n     * Each one has an alias name which can be used when specifying a validation rule.\n     *\n     * Below are some examples:\n     *\n     * ```php\n     * [\n     *     \/\/ built-in \"required\" validator\n     *     [['username', 'password'], 'required'],\n     *     \/\/ built-in \"string\" validator customized with \"min\" and \"max\" properties\n     *     ['username', 'string', 'min' => 3, 'max' => 12],\n     *     \/\/ built-in \"compare\" validator that is used in \"register\" scenario only\n     *     ['password', 'compare', 'compareAttribute' => 'password2', 'on' => 'register'],\n     *     \/\/ an inline validator defined via the \"authenticate()\" method in the model class\n     *     ['password', 'authenticate', 'on' => 'login'],\n     *     \/\/ a validator of class \"DateRangeValidator\"\n     *     ['dateRange', 'DateRangeValidator'],\n     * ];\n     * ```\n     *\n     * Note, in order to inherit rules defined in the parent class, a child class needs to\n     * merge the parent rules with child rules using functions such as `array_merge()`.\n     *\n     * @return array validation rules\n     * @see scenarios()\n     *\/",89],["T_WHITESPACE","\n    ",154],["T_PUBLIC","public",155],["T_WHITESPACE"," ",155],["T_FUNCTION","function",155],["T_WHITESPACE"," ",155],["T_STRING","rules",155],"(",")",["T_WHITESPACE","\n    ",155],"{",["T_WHITESPACE","\n        ",156],["T_RETURN","return",157],["T_WHITESPACE"," ",157],"[","]",";",["T_WHITESPACE","\n    ",157],"}",["T_WHITESPACE","\n\n    ",158],["T_DOC_COMMENT","\/**\n     * Returns a list of scenarios and the corresponding active attributes.\n     * An active attribute is one that is subject to validation in the current scenario.\n     * The returned array should be in the following format:\n     *\n     * ```php\n     * [\n     *     'scenario1' => ['attribute11', 'attribute12', ...],\n     *     'scenario2' => ['attribute21', 'attribute22', ...],\n     *     ...\n     * ]\n     * ```\n     *\n     * By default, an active attribute is considered safe and can be massively assigned.\n     * If an attribute should NOT be massively assigned (thus considered unsafe),\n     * please prefix the attribute with an exclamation character (e.g. `'!rank'`).\n     *\n     * The default implementation of this method will return all scenarios found in the [[rules()]]\n     * declaration. A special scenario named [[SCENARIO_DEFAULT]] will contain all attributes\n     * found in the [[rules()]]. Each scenario will be associated with the attributes that\n     * are being validated by the validation rules that apply to the scenario.\n     *\n     * @return array a list of scenarios and the corresponding active attributes.\n     *\/",160],["T_WHITESPACE","\n    ",183],["T_PUBLIC","public",184],["T_WHITESPACE"," ",184],["T_FUNCTION","function",184],["T_WHITESPACE"," ",184],["T_STRING","scenarios",184],"(",")",["T_WHITESPACE","\n    ",184],"{",["T_WHITESPACE","\n        ",185],["T_VARIABLE","$scenarios",186],["T_WHITESPACE"," ",186],"=",["T_WHITESPACE"," ",186],"[",["T_STRING","self",186],["T_DOUBLE_COLON","::",186],["T_STRING","SCENARIO_DEFAULT",186],["T_WHITESPACE"," ",186],["T_DOUBLE_ARROW","=>",186],["T_WHITESPACE"," ",186],"[","]","]",";",["T_WHITESPACE","\n        ",186],["T_FOREACH","foreach",187],["T_WHITESPACE"," ",187],"(",["T_VARIABLE","$this",187],["T_OBJECT_OPERATOR","->",187],["T_STRING","getValidators",187],"(",")",["T_WHITESPACE"," ",187],["T_AS","as",187],["T_WHITESPACE"," ",187],["T_VARIABLE","$validator",187],")",["T_WHITESPACE"," ",187],"{",["T_WHITESPACE","\n            ",187],["T_FOREACH","foreach",188],["T_WHITESPACE"," ",188],"(",["T_VARIABLE","$validator",188],["T_OBJECT_OPERATOR","->",188],["T_STRING","on",188],["T_WHITESPACE"," ",188],["T_AS","as",188],["T_WHITESPACE"," ",188],["T_VARIABLE","$scenario",188],")",["T_WHITESPACE"," ",188],"{",["T_WHITESPACE","\n                ",188],["T_VARIABLE","$scenarios",189],"[",["T_VARIABLE","$scenario",189],"]",["T_WHITESPACE"," ",189],"=",["T_WHITESPACE"," ",189],"[","]",";",["T_WHITESPACE","\n            ",189],"}",["T_WHITESPACE","\n            ",190],["T_FOREACH","foreach",191],["T_WHITESPACE"," ",191],"(",["T_VARIABLE","$validator",191],["T_OBJECT_OPERATOR","->",191],["T_STRING","except",191],["T_WHITESPACE"," ",191],["T_AS","as",191],["T_WHITESPACE"," ",191],["T_VARIABLE","$scenario",191],")",["T_WHITESPACE"," ",191],"{",["T_WHITESPACE","\n                ",191],["T_VARIABLE","$scenarios",192],"[",["T_VARIABLE","$scenario",192],"]",["T_WHITESPACE"," ",192],"=",["T_WHITESPACE"," ",192],"[","]",";",["T_WHITESPACE","\n            ",192],"}",["T_WHITESPACE","\n        ",193],"}",["T_WHITESPACE","\n        ",194],["T_VARIABLE","$names",195],["T_WHITESPACE"," ",195],"=",["T_WHITESPACE"," ",195],["T_STRING","array_keys",195],"(",["T_VARIABLE","$scenarios",195],")",";",["T_WHITESPACE","\n\n        ",195],["T_FOREACH","foreach",197],["T_WHITESPACE"," ",197],"(",["T_VARIABLE","$this",197],["T_OBJECT_OPERATOR","->",197],["T_STRING","getValidators",197],"(",")",["T_WHITESPACE"," ",197],["T_AS","as",197],["T_WHITESPACE"," ",197],["T_VARIABLE","$validator",197],")",["T_WHITESPACE"," ",197],"{",["T_WHITESPACE","\n            ",197],["T_IF","if",198],["T_WHITESPACE"," ",198],"(",["T_EMPTY","empty",198],"(",["T_VARIABLE","$validator",198],["T_OBJECT_OPERATOR","->",198],["T_STRING","on",198],")",["T_WHITESPACE"," ",198],["T_BOOLEAN_AND","&&",198],["T_WHITESPACE"," ",198],["T_EMPTY","empty",198],"(",["T_VARIABLE","$validator",198],["T_OBJECT_OPERATOR","->",198],["T_STRING","except",198],")",")",["T_WHITESPACE"," ",198],"{",["T_WHITESPACE","\n                ",198],["T_FOREACH","foreach",199],["T_WHITESPACE"," ",199],"(",["T_VARIABLE","$names",199],["T_WHITESPACE"," ",199],["T_AS","as",199],["T_WHITESPACE"," ",199],["T_VARIABLE","$name",199],")",["T_WHITESPACE"," ",199],"{",["T_WHITESPACE","\n                    ",199],["T_FOREACH","foreach",200],["T_WHITESPACE"," ",200],"(",["T_VARIABLE","$validator",200],["T_OBJECT_OPERATOR","->",200],["T_STRING","attributes",200],["T_WHITESPACE"," ",200],["T_AS","as",200],["T_WHITESPACE"," ",200],["T_VARIABLE","$attribute",200],")",["T_WHITESPACE"," ",200],"{",["T_WHITESPACE","\n                        ",200],["T_VARIABLE","$scenarios",201],"[",["T_VARIABLE","$name",201],"]","[",["T_VARIABLE","$attribute",201],"]",["T_WHITESPACE"," ",201],"=",["T_WHITESPACE"," ",201],["T_STRING","true",201],";",["T_WHITESPACE","\n                    ",201],"}",["T_WHITESPACE","\n                ",202],"}",["T_WHITESPACE","\n            ",203],"}",["T_WHITESPACE"," ",204],["T_ELSEIF","elseif",204],["T_WHITESPACE"," ",204],"(",["T_EMPTY","empty",204],"(",["T_VARIABLE","$validator",204],["T_OBJECT_OPERATOR","->",204],["T_STRING","on",204],")",")",["T_WHITESPACE"," ",204],"{",["T_WHITESPACE","\n                ",204],["T_FOREACH","foreach",205],["T_WHITESPACE"," ",205],"(",["T_VARIABLE","$names",205],["T_WHITESPACE"," ",205],["T_AS","as",205],["T_WHITESPACE"," ",205],["T_VARIABLE","$name",205],")",["T_WHITESPACE"," ",205],"{",["T_WHITESPACE","\n                    ",205],["T_IF","if",206],["T_WHITESPACE"," ",206],"(","!",["T_STRING","in_array",206],"(",["T_VARIABLE","$name",206],",",["T_WHITESPACE"," ",206],["T_VARIABLE","$validator",206],["T_OBJECT_OPERATOR","->",206],["T_STRING","except",206],",",["T_WHITESPACE"," ",206],["T_STRING","true",206],")",")",["T_WHITESPACE"," ",206],"{",["T_WHITESPACE","\n                        ",206],["T_FOREACH","foreach",207],["T_WHITESPACE"," ",207],"(",["T_VARIABLE","$validator",207],["T_OBJECT_OPERATOR","->",207],["T_STRING","attributes",207],["T_WHITESPACE"," ",207],["T_AS","as",207],["T_WHITESPACE"," ",207],["T_VARIABLE","$attribute",207],")",["T_WHITESPACE"," ",207],"{",["T_WHITESPACE","\n                            ",207],["T_VARIABLE","$scenarios",208],"[",["T_VARIABLE","$name",208],"]","[",["T_VARIABLE","$attribute",208],"]",["T_WHITESPACE"," ",208],"=",["T_WHITESPACE"," ",208],["T_STRING","true",208],";",["T_WHITESPACE","\n                        ",208],"}",["T_WHITESPACE","\n                    ",209],"}",["T_WHITESPACE","\n                ",210],"}",["T_WHITESPACE","\n            ",211],"}",["T_WHITESPACE"," ",212],["T_ELSE","else",212],["T_WHITESPACE"," ",212],"{",["T_WHITESPACE","\n                ",212],["T_FOREACH","foreach",213],["T_WHITESPACE"," ",213],"(",["T_VARIABLE","$validator",213],["T_OBJECT_OPERATOR","->",213],["T_STRING","on",213],["T_WHITESPACE"," ",213],["T_AS","as",213],["T_WHITESPACE"," ",213],["T_VARIABLE","$name",213],")",["T_WHITESPACE"," ",213],"{",["T_WHITESPACE","\n                    ",213],["T_FOREACH","foreach",214],["T_WHITESPACE"," ",214],"(",["T_VARIABLE","$validator",214],["T_OBJECT_OPERATOR","->",214],["T_STRING","attributes",214],["T_WHITESPACE"," ",214],["T_AS","as",214],["T_WHITESPACE"," ",214],["T_VARIABLE","$attribute",214],")",["T_WHITESPACE"," ",214],"{",["T_WHITESPACE","\n                        ",214],["T_VARIABLE","$scenarios",215],"[",["T_VARIABLE","$name",215],"]","[",["T_VARIABLE","$attribute",215],"]",["T_WHITESPACE"," ",215],"=",["T_WHITESPACE"," ",215],["T_STRING","true",215],";",["T_WHITESPACE","\n                    ",215],"}",["T_WHITESPACE","\n                ",216],"}",["T_WHITESPACE","\n            ",217],"}",["T_WHITESPACE","\n        ",218],"}",["T_WHITESPACE","\n\n        ",219],["T_FOREACH","foreach",221],["T_WHITESPACE"," ",221],"(",["T_VARIABLE","$scenarios",221],["T_WHITESPACE"," ",221],["T_AS","as",221],["T_WHITESPACE"," ",221],["T_VARIABLE","$scenario",221],["T_WHITESPACE"," ",221],["T_DOUBLE_ARROW","=>",221],["T_WHITESPACE"," ",221],["T_VARIABLE","$attributes",221],")",["T_WHITESPACE"," ",221],"{",["T_WHITESPACE","\n            ",221],["T_IF","if",222],["T_WHITESPACE"," ",222],"(","!",["T_EMPTY","empty",222],"(",["T_VARIABLE","$attributes",222],")",")",["T_WHITESPACE"," ",222],"{",["T_WHITESPACE","\n                ",222],["T_VARIABLE","$scenarios",223],"[",["T_VARIABLE","$scenario",223],"]",["T_WHITESPACE"," ",223],"=",["T_WHITESPACE"," ",223],["T_STRING","array_keys",223],"(",["T_VARIABLE","$attributes",223],")",";",["T_WHITESPACE","\n            ",223],"}",["T_WHITESPACE","\n        ",224],"}",["T_WHITESPACE","\n\n        ",225],["T_RETURN","return",227],["T_WHITESPACE"," ",227],["T_VARIABLE","$scenarios",227],";",["T_WHITESPACE","\n    ",227],"}",["T_WHITESPACE","\n\n    ",228],["T_DOC_COMMENT","\/**\n     * Returns the form name that this model class should use.\n     *\n     * The form name is mainly used by [[\\yii\\widgets\\ActiveForm]] to determine how to name\n     * the input fields for the attributes in a model. If the form name is \"A\" and an attribute\n     * name is \"b\", then the corresponding input name would be \"A[b]\". If the form name is\n     * an empty string, then the input name would be \"b\".\n     *\n     * The purpose of the above naming schema is that for forms which contain multiple different models,\n     * the attributes of each model are grouped in sub-arrays of the POST-data and it is easier to\n     * differentiate between them.\n     *\n     * By default, this method returns the model class name (without the namespace part)\n     * as the form name. You may override it when the model is used in different forms.\n     *\n     * @return string the form name of this model class.\n     * @see load()\n     *\/",230],["T_WHITESPACE","\n    ",247],["T_PUBLIC","public",248],["T_WHITESPACE"," ",248],["T_FUNCTION","function",248],["T_WHITESPACE"," ",248],["T_STRING","formName",248],"(",")",["T_WHITESPACE","\n    ",248],"{",["T_WHITESPACE","\n        ",249],["T_VARIABLE","$reflector",250],["T_WHITESPACE"," ",250],"=",["T_WHITESPACE"," ",250],["T_NEW","new",250],["T_WHITESPACE"," ",250],["T_STRING","ReflectionClass",250],"(",["T_VARIABLE","$this",250],")",";",["T_WHITESPACE","\n        ",250],["T_RETURN","return",251],["T_WHITESPACE"," ",251],["T_VARIABLE","$reflector",251],["T_OBJECT_OPERATOR","->",251],["T_STRING","getShortName",251],"(",")",";",["T_WHITESPACE","\n    ",251],"}",["T_WHITESPACE","\n\n    ",252],["T_DOC_COMMENT","\/**\n     * Returns the list of attribute names.\n     * By default, this method returns all public non-static properties of the class.\n     * You may override this method to change the default behavior.\n     * @return array list of attribute names.\n     *\/",254],["T_WHITESPACE","\n    ",259],["T_PUBLIC","public",260],["T_WHITESPACE"," ",260],["T_FUNCTION","function",260],["T_WHITESPACE"," ",260],["T_STRING","attributes",260],"(",")",["T_WHITESPACE","\n    ",260],"{",["T_WHITESPACE","\n        ",261],["T_VARIABLE","$class",262],["T_WHITESPACE"," ",262],"=",["T_WHITESPACE"," ",262],["T_NEW","new",262],["T_WHITESPACE"," ",262],["T_STRING","ReflectionClass",262],"(",["T_VARIABLE","$this",262],")",";",["T_WHITESPACE","\n        ",262],["T_VARIABLE","$names",263],["T_WHITESPACE"," ",263],"=",["T_WHITESPACE"," ",263],"[","]",";",["T_WHITESPACE","\n        ",263],["T_FOREACH","foreach",264],["T_WHITESPACE"," ",264],"(",["T_VARIABLE","$class",264],["T_OBJECT_OPERATOR","->",264],["T_STRING","getProperties",264],"(",["T_NS_SEPARATOR","\\",264],["T_STRING","ReflectionProperty",264],["T_DOUBLE_COLON","::",264],["T_STRING","IS_PUBLIC",264],")",["T_WHITESPACE"," ",264],["T_AS","as",264],["T_WHITESPACE"," ",264],["T_VARIABLE","$property",264],")",["T_WHITESPACE"," ",264],"{",["T_WHITESPACE","\n            ",264],["T_IF","if",265],["T_WHITESPACE"," ",265],"(","!",["T_VARIABLE","$property",265],["T_OBJECT_OPERATOR","->",265],["T_STRING","isStatic",265],"(",")",")",["T_WHITESPACE"," ",265],"{",["T_WHITESPACE","\n                ",265],["T_VARIABLE","$names",266],"[","]",["T_WHITESPACE"," ",266],"=",["T_WHITESPACE"," ",266],["T_VARIABLE","$property",266],["T_OBJECT_OPERATOR","->",266],["T_STRING","getName",266],"(",")",";",["T_WHITESPACE","\n            ",266],"}",["T_WHITESPACE","\n        ",267],"}",["T_WHITESPACE","\n\n        ",268],["T_RETURN","return",270],["T_WHITESPACE"," ",270],["T_VARIABLE","$names",270],";",["T_WHITESPACE","\n    ",270],"}",["T_WHITESPACE","\n\n    ",271],["T_DOC_COMMENT","\/**\n     * Returns the attribute labels.\n     *\n     * Attribute labels are mainly used for display purpose. For example, given an attribute\n     * `firstName`, we can declare a label `First Name` which is more user-friendly and can\n     * be displayed to end users.\n     *\n     * By default an attribute label is generated using [[generateAttributeLabel()]].\n     * This method allows you to explicitly specify attribute labels.\n     *\n     * Note, in order to inherit labels defined in the parent class, a child class needs to\n     * merge the parent labels with child labels using functions such as `array_merge()`.\n     *\n     * @return array attribute labels (name => label)\n     * @see generateAttributeLabel()\n     *\/",273],["T_WHITESPACE","\n    ",288],["T_PUBLIC","public",289],["T_WHITESPACE"," ",289],["T_FUNCTION","function",289],["T_WHITESPACE"," ",289],["T_STRING","attributeLabels",289],"(",")",["T_WHITESPACE","\n    ",289],"{",["T_WHITESPACE","\n        ",290],["T_RETURN","return",291],["T_WHITESPACE"," ",291],"[","]",";",["T_WHITESPACE","\n    ",291],"}",["T_WHITESPACE","\n\n    ",292],["T_DOC_COMMENT","\/**\n     * Returns the attribute hints.\n     *\n     * Attribute hints are mainly used for display purpose. For example, given an attribute\n     * `isPublic`, we can declare a hint `Whether the post should be visible for not logged in users`,\n     * which provides user-friendly description of the attribute meaning and can be displayed to end users.\n     *\n     * Unlike label hint will not be generated, if its explicit declaration is omitted.\n     *\n     * Note, in order to inherit hints defined in the parent class, a child class needs to\n     * merge the parent hints with child hints using functions such as `array_merge()`.\n     *\n     * @return array attribute hints (name => hint)\n     * @since 2.0.4\n     *\/",294],["T_WHITESPACE","\n    ",308],["T_PUBLIC","public",309],["T_WHITESPACE"," ",309],["T_FUNCTION","function",309],["T_WHITESPACE"," ",309],["T_STRING","attributeHints",309],"(",")",["T_WHITESPACE","\n    ",309],"{",["T_WHITESPACE","\n        ",310],["T_RETURN","return",311],["T_WHITESPACE"," ",311],"[","]",";",["T_WHITESPACE","\n    ",311],"}",["T_WHITESPACE","\n\n    ",312],["T_DOC_COMMENT","\/**\n     * Performs the data validation.\n     *\n     * This method executes the validation rules applicable to the current [[scenario]].\n     * The following criteria are used to determine whether a rule is currently applicable:\n     *\n     * - the rule must be associated with the attributes relevant to the current scenario;\n     * - the rules must be effective for the current scenario.\n     *\n     * This method will call [[beforeValidate()]] and [[afterValidate()]] before and\n     * after the actual validation, respectively. If [[beforeValidate()]] returns false,\n     * the validation will be cancelled and [[afterValidate()]] will not be called.\n     *\n     * Errors found during the validation can be retrieved via [[getErrors()]],\n     * [[getFirstErrors()]] and [[getFirstError()]].\n     *\n     * @param array $attributeNames list of attribute names that should be validated.\n     * If this parameter is empty, it means any attribute listed in the applicable\n     * validation rules should be validated.\n     * @param bool $clearErrors whether to call [[clearErrors()]] before performing validation\n     * @return bool whether the validation is successful without any error.\n     * @throws InvalidParamException if the current scenario is unknown.\n     *\/",314],["T_WHITESPACE","\n    ",336],["T_PUBLIC","public",337],["T_WHITESPACE"," ",337],["T_FUNCTION","function",337],["T_WHITESPACE"," ",337],["T_STRING","validate",337],"(",["T_VARIABLE","$attributeNames",337],["T_WHITESPACE"," ",337],"=",["T_WHITESPACE"," ",337],["T_STRING","null",337],",",["T_WHITESPACE"," ",337],["T_VARIABLE","$clearErrors",337],["T_WHITESPACE"," ",337],"=",["T_WHITESPACE"," ",337],["T_STRING","true",337],")",["T_WHITESPACE","\n    ",337],"{",["T_WHITESPACE","\n        ",338],["T_IF","if",339],["T_WHITESPACE"," ",339],"(",["T_VARIABLE","$clearErrors",339],")",["T_WHITESPACE"," ",339],"{",["T_WHITESPACE","\n            ",339],["T_VARIABLE","$this",340],["T_OBJECT_OPERATOR","->",340],["T_STRING","clearErrors",340],"(",")",";",["T_WHITESPACE","\n        ",340],"}",["T_WHITESPACE","\n\n        ",341],["T_IF","if",343],["T_WHITESPACE"," ",343],"(","!",["T_VARIABLE","$this",343],["T_OBJECT_OPERATOR","->",343],["T_STRING","beforeValidate",343],"(",")",")",["T_WHITESPACE"," ",343],"{",["T_WHITESPACE","\n            ",343],["T_RETURN","return",344],["T_WHITESPACE"," ",344],["T_STRING","false",344],";",["T_WHITESPACE","\n        ",344],"}",["T_WHITESPACE","\n\n        ",345],["T_VARIABLE","$scenarios",347],["T_WHITESPACE"," ",347],"=",["T_WHITESPACE"," ",347],["T_VARIABLE","$this",347],["T_OBJECT_OPERATOR","->",347],["T_STRING","scenarios",347],"(",")",";",["T_WHITESPACE","\n        ",347],["T_VARIABLE","$scenario",348],["T_WHITESPACE"," ",348],"=",["T_WHITESPACE"," ",348],["T_VARIABLE","$this",348],["T_OBJECT_OPERATOR","->",348],["T_STRING","getScenario",348],"(",")",";",["T_WHITESPACE","\n        ",348],["T_IF","if",349],["T_WHITESPACE"," ",349],"(","!",["T_ISSET","isset",349],"(",["T_VARIABLE","$scenarios",349],"[",["T_VARIABLE","$scenario",349],"]",")",")",["T_WHITESPACE"," ",349],"{",["T_WHITESPACE","\n            ",349],["T_THROW","throw",350],["T_WHITESPACE"," ",350],["T_NEW","new",350],["T_WHITESPACE"," ",350],["T_STRING","InvalidParamException",350],"(","\"",["T_ENCAPSED_AND_WHITESPACE","Unknown scenario: ",350],["T_VARIABLE","$scenario",350],"\"",")",";",["T_WHITESPACE","\n        ",350],"}",["T_WHITESPACE","\n\n        ",351],["T_IF","if",353],["T_WHITESPACE"," ",353],"(",["T_VARIABLE","$attributeNames",353],["T_WHITESPACE"," ",353],["T_IS_IDENTICAL","===",353],["T_WHITESPACE"," ",353],["T_STRING","null",353],")",["T_WHITESPACE"," ",353],"{",["T_WHITESPACE","\n            ",353],["T_VARIABLE","$attributeNames",354],["T_WHITESPACE"," ",354],"=",["T_WHITESPACE"," ",354],["T_VARIABLE","$this",354],["T_OBJECT_OPERATOR","->",354],["T_STRING","activeAttributes",354],"(",")",";",["T_WHITESPACE","\n        ",354],"}",["T_WHITESPACE","\n\n        ",355],["T_FOREACH","foreach",357],["T_WHITESPACE"," ",357],"(",["T_VARIABLE","$this",357],["T_OBJECT_OPERATOR","->",357],["T_STRING","getActiveValidators",357],"(",")",["T_WHITESPACE"," ",357],["T_AS","as",357],["T_WHITESPACE"," ",357],["T_VARIABLE","$validator",357],")",["T_WHITESPACE"," ",357],"{",["T_WHITESPACE","\n            ",357],["T_VARIABLE","$validator",358],["T_OBJECT_OPERATOR","->",358],["T_STRING","validateAttributes",358],"(",["T_VARIABLE","$this",358],",",["T_WHITESPACE"," ",358],["T_VARIABLE","$attributeNames",358],")",";",["T_WHITESPACE","\n        ",358],"}",["T_WHITESPACE","\n        ",359],["T_VARIABLE","$this",360],["T_OBJECT_OPERATOR","->",360],["T_STRING","afterValidate",360],"(",")",";",["T_WHITESPACE","\n\n        ",360],["T_RETURN","return",362],["T_WHITESPACE"," ",362],"!",["T_VARIABLE","$this",362],["T_OBJECT_OPERATOR","->",362],["T_STRING","hasErrors",362],"(",")",";",["T_WHITESPACE","\n    ",362],"}",["T_WHITESPACE","\n\n    ",363],["T_DOC_COMMENT","\/**\n     * This method is invoked before validation starts.\n     * The default implementation raises a `beforeValidate` event.\n     * You may override this method to do preliminary checks before validation.\n     * Make sure the parent implementation is invoked so that the event can be raised.\n     * @return bool whether the validation should be executed. Defaults to true.\n     * If false is returned, the validation will stop and the model is considered invalid.\n     *\/",365],["T_WHITESPACE","\n    ",372],["T_PUBLIC","public",373],["T_WHITESPACE"," ",373],["T_FUNCTION","function",373],["T_WHITESPACE"," ",373],["T_STRING","beforeValidate",373],"(",")",["T_WHITESPACE","\n    ",373],"{",["T_WHITESPACE","\n        ",374],["T_VARIABLE","$event",375],["T_WHITESPACE"," ",375],"=",["T_WHITESPACE"," ",375],["T_NEW","new",375],["T_WHITESPACE"," ",375],["T_STRING","ModelEvent",375],";",["T_WHITESPACE","\n        ",375],["T_VARIABLE","$this",376],["T_OBJECT_OPERATOR","->",376],["T_STRING","trigger",376],"(",["T_STRING","self",376],["T_DOUBLE_COLON","::",376],["T_STRING","EVENT_BEFORE_VALIDATE",376],",",["T_WHITESPACE"," ",376],["T_VARIABLE","$event",376],")",";",["T_WHITESPACE","\n\n        ",376],["T_RETURN","return",378],["T_WHITESPACE"," ",378],["T_VARIABLE","$event",378],["T_OBJECT_OPERATOR","->",378],["T_STRING","isValid",378],";",["T_WHITESPACE","\n    ",378],"}",["T_WHITESPACE","\n\n    ",379],["T_DOC_COMMENT","\/**\n     * This method is invoked after validation ends.\n     * The default implementation raises an `afterValidate` event.\n     * You may override this method to do postprocessing after validation.\n     * Make sure the parent implementation is invoked so that the event can be raised.\n     *\/",381],["T_WHITESPACE","\n    ",386],["T_PUBLIC","public",387],["T_WHITESPACE"," ",387],["T_FUNCTION","function",387],["T_WHITESPACE"," ",387],["T_STRING","afterValidate",387],"(",")",["T_WHITESPACE","\n    ",387],"{",["T_WHITESPACE","\n        ",388],["T_VARIABLE","$this",389],["T_OBJECT_OPERATOR","->",389],["T_STRING","trigger",389],"(",["T_STRING","self",389],["T_DOUBLE_COLON","::",389],["T_STRING","EVENT_AFTER_VALIDATE",389],")",";",["T_WHITESPACE","\n    ",389],"}",["T_WHITESPACE","\n\n    ",390],["T_DOC_COMMENT","\/**\n     * Returns all the validators declared in [[rules()]].\n     *\n     * This method differs from [[getActiveValidators()]] in that the latter\n     * only returns the validators applicable to the current [[scenario]].\n     *\n     * Because this method returns an ArrayObject object, you may\n     * manipulate it by inserting or removing validators (useful in model behaviors).\n     * For example,\n     *\n     * ```php\n     * $model->validators[] = $newValidator;\n     * ```\n     *\n     * @return ArrayObject|\\yii\\validators\\Validator[] all the validators declared in the model.\n     *\/",392],["T_WHITESPACE","\n    ",407],["T_PUBLIC","public",408],["T_WHITESPACE"," ",408],["T_FUNCTION","function",408],["T_WHITESPACE"," ",408],["T_STRING","getValidators",408],"(",")",["T_WHITESPACE","\n    ",408],"{",["T_WHITESPACE","\n        ",409],["T_IF","if",410],["T_WHITESPACE"," ",410],"(",["T_VARIABLE","$this",410],["T_OBJECT_OPERATOR","->",410],["T_STRING","_validators",410],["T_WHITESPACE"," ",410],["T_IS_IDENTICAL","===",410],["T_WHITESPACE"," ",410],["T_STRING","null",410],")",["T_WHITESPACE"," ",410],"{",["T_WHITESPACE","\n            ",410],["T_VARIABLE","$this",411],["T_OBJECT_OPERATOR","->",411],["T_STRING","_validators",411],["T_WHITESPACE"," ",411],"=",["T_WHITESPACE"," ",411],["T_VARIABLE","$this",411],["T_OBJECT_OPERATOR","->",411],["T_STRING","createValidators",411],"(",")",";",["T_WHITESPACE","\n        ",411],"}",["T_WHITESPACE","\n        ",412],["T_RETURN","return",413],["T_WHITESPACE"," ",413],["T_VARIABLE","$this",413],["T_OBJECT_OPERATOR","->",413],["T_STRING","_validators",413],";",["T_WHITESPACE","\n    ",413],"}",["T_WHITESPACE","\n\n    ",414],["T_DOC_COMMENT","\/**\n     * Returns the validators applicable to the current [[scenario]].\n     * @param string $attribute the name of the attribute whose applicable validators should be returned.\n     * If this is null, the validators for ALL attributes in the model will be returned.\n     * @return \\yii\\validators\\Validator[] the validators applicable to the current [[scenario]].\n     *\/",416],["T_WHITESPACE","\n    ",421],["T_PUBLIC","public",422],["T_WHITESPACE"," ",422],["T_FUNCTION","function",422],["T_WHITESPACE"," ",422],["T_STRING","getActiveValidators",422],"(",["T_VARIABLE","$attribute",422],["T_WHITESPACE"," ",422],"=",["T_WHITESPACE"," ",422],["T_STRING","null",422],")",["T_WHITESPACE","\n    ",422],"{",["T_WHITESPACE","\n        ",423],["T_VARIABLE","$validators",424],["T_WHITESPACE"," ",424],"=",["T_WHITESPACE"," ",424],"[","]",";",["T_WHITESPACE","\n        ",424],["T_VARIABLE","$scenario",425],["T_WHITESPACE"," ",425],"=",["T_WHITESPACE"," ",425],["T_VARIABLE","$this",425],["T_OBJECT_OPERATOR","->",425],["T_STRING","getScenario",425],"(",")",";",["T_WHITESPACE","\n        ",425],["T_FOREACH","foreach",426],["T_WHITESPACE"," ",426],"(",["T_VARIABLE","$this",426],["T_OBJECT_OPERATOR","->",426],["T_STRING","getValidators",426],"(",")",["T_WHITESPACE"," ",426],["T_AS","as",426],["T_WHITESPACE"," ",426],["T_VARIABLE","$validator",426],")",["T_WHITESPACE"," ",426],"{",["T_WHITESPACE","\n            ",426],["T_IF","if",427],["T_WHITESPACE"," ",427],"(",["T_VARIABLE","$validator",427],["T_OBJECT_OPERATOR","->",427],["T_STRING","isActive",427],"(",["T_VARIABLE","$scenario",427],")",["T_WHITESPACE"," ",427],["T_BOOLEAN_AND","&&",427],["T_WHITESPACE"," ",427],"(",["T_VARIABLE","$attribute",427],["T_WHITESPACE"," ",427],["T_IS_IDENTICAL","===",427],["T_WHITESPACE"," ",427],["T_STRING","null",427],["T_WHITESPACE"," ",427],["T_BOOLEAN_OR","||",427],["T_WHITESPACE"," ",427],["T_STRING","in_array",427],"(",["T_VARIABLE","$attribute",427],",",["T_WHITESPACE"," ",427],["T_VARIABLE","$validator",427],["T_OBJECT_OPERATOR","->",427],["T_STRING","attributes",427],",",["T_WHITESPACE"," ",427],["T_STRING","true",427],")",")",")",["T_WHITESPACE"," ",427],"{",["T_WHITESPACE","\n                ",427],["T_VARIABLE","$validators",428],"[","]",["T_WHITESPACE"," ",428],"=",["T_WHITESPACE"," ",428],["T_VARIABLE","$validator",428],";",["T_WHITESPACE","\n            ",428],"}",["T_WHITESPACE","\n        ",429],"}",["T_WHITESPACE","\n        ",430],["T_RETURN","return",431],["T_WHITESPACE"," ",431],["T_VARIABLE","$validators",431],";",["T_WHITESPACE","\n    ",431],"}",["T_WHITESPACE","\n\n    ",432],["T_DOC_COMMENT","\/**\n     * Creates validator objects based on the validation rules specified in [[rules()]].\n     * Unlike [[getValidators()]], each time this method is called, a new list of validators will be returned.\n     * @return ArrayObject validators\n     * @throws InvalidConfigException if any validation rule configuration is invalid\n     *\/",434],["T_WHITESPACE","\n    ",439],["T_PUBLIC","public",440],["T_WHITESPACE"," ",440],["T_FUNCTION","function",440],["T_WHITESPACE"," ",440],["T_STRING","createValidators",440],"(",")",["T_WHITESPACE","\n    ",440],"{",["T_WHITESPACE","\n        ",441],["T_VARIABLE","$validators",442],["T_WHITESPACE"," ",442],"=",["T_WHITESPACE"," ",442],["T_NEW","new",442],["T_WHITESPACE"," ",442],["T_STRING","ArrayObject",442],";",["T_WHITESPACE","\n        ",442],["T_FOREACH","foreach",443],["T_WHITESPACE"," ",443],"(",["T_VARIABLE","$this",443],["T_OBJECT_OPERATOR","->",443],["T_STRING","rules",443],"(",")",["T_WHITESPACE"," ",443],["T_AS","as",443],["T_WHITESPACE"," ",443],["T_VARIABLE","$rule",443],")",["T_WHITESPACE"," ",443],"{",["T_WHITESPACE","\n            ",443],["T_IF","if",444],["T_WHITESPACE"," ",444],"(",["T_VARIABLE","$rule",444],["T_WHITESPACE"," ",444],["T_INSTANCEOF","instanceof",444],["T_WHITESPACE"," ",444],["T_STRING","Validator",444],")",["T_WHITESPACE"," ",444],"{",["T_WHITESPACE","\n                ",444],["T_VARIABLE","$validators",445],["T_OBJECT_OPERATOR","->",445],["T_STRING","append",445],"(",["T_VARIABLE","$rule",445],")",";",["T_WHITESPACE","\n            ",445],"}",["T_WHITESPACE"," ",446],["T_ELSEIF","elseif",446],["T_WHITESPACE"," ",446],"(",["T_STRING","is_array",446],"(",["T_VARIABLE","$rule",446],")",["T_WHITESPACE"," ",446],["T_BOOLEAN_AND","&&",446],["T_WHITESPACE"," ",446],["T_ISSET","isset",446],"(",["T_VARIABLE","$rule",446],"[",["T_LNUMBER","0",446],"]",",",["T_WHITESPACE"," ",446],["T_VARIABLE","$rule",446],"[",["T_LNUMBER","1",446],"]",")",")",["T_WHITESPACE"," ",446],"{",["T_WHITESPACE"," ",446],["T_COMMENT","\/\/ attributes, validator type\n",446],["T_WHITESPACE","                ",447],["T_VARIABLE","$validator",447],["T_WHITESPACE"," ",447],"=",["T_WHITESPACE"," ",447],["T_STRING","Validator",447],["T_DOUBLE_COLON","::",447],["T_STRING","createValidator",447],"(",["T_VARIABLE","$rule",447],"[",["T_LNUMBER","1",447],"]",",",["T_WHITESPACE"," ",447],["T_VARIABLE","$this",447],",",["T_WHITESPACE"," ",447],["T_ARRAY_CAST","(array)",447],["T_WHITESPACE"," ",447],["T_VARIABLE","$rule",447],"[",["T_LNUMBER","0",447],"]",",",["T_WHITESPACE"," ",447],["T_STRING","array_slice",447],"(",["T_VARIABLE","$rule",447],",",["T_WHITESPACE"," ",447],["T_LNUMBER","2",447],")",")",";",["T_WHITESPACE","\n                ",447],["T_VARIABLE","$validators",448],["T_OBJECT_OPERATOR","->",448],["T_STRING","append",448],"(",["T_VARIABLE","$validator",448],")",";",["T_WHITESPACE","\n            ",448],"}",["T_WHITESPACE"," ",449],["T_ELSE","else",449],["T_WHITESPACE"," ",449],"{",["T_WHITESPACE","\n                ",449],["T_THROW","throw",450],["T_WHITESPACE"," ",450],["T_NEW","new",450],["T_WHITESPACE"," ",450],["T_STRING","InvalidConfigException",450],"(",["T_CONSTANT_ENCAPSED_STRING","'Invalid validation rule: a rule must specify both attribute names and validator type.'",450],")",";",["T_WHITESPACE","\n            ",450],"}",["T_WHITESPACE","\n        ",451],"}",["T_WHITESPACE","\n        ",452],["T_RETURN","return",453],["T_WHITESPACE"," ",453],["T_VARIABLE","$validators",453],";",["T_WHITESPACE","\n    ",453],"}",["T_WHITESPACE","\n\n    ",454],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the attribute is required.\n     * This is determined by checking if the attribute is associated with a\n     * [[\\yii\\validators\\RequiredValidator|required]] validation rule in the\n     * current [[scenario]].\n     *\n     * Note that when the validator has a conditional validation applied using\n     * [[\\yii\\validators\\RequiredValidator::$when|$when]] this method will return\n     * `false` regardless of the `when` condition because it may be called be\n     * before the model is loaded with data.\n     *\n     * @param string $attribute attribute name\n     * @return bool whether the attribute is required\n     *\/",456],["T_WHITESPACE","\n    ",469],["T_PUBLIC","public",470],["T_WHITESPACE"," ",470],["T_FUNCTION","function",470],["T_WHITESPACE"," ",470],["T_STRING","isAttributeRequired",470],"(",["T_VARIABLE","$attribute",470],")",["T_WHITESPACE","\n    ",470],"{",["T_WHITESPACE","\n        ",471],["T_FOREACH","foreach",472],["T_WHITESPACE"," ",472],"(",["T_VARIABLE","$this",472],["T_OBJECT_OPERATOR","->",472],["T_STRING","getActiveValidators",472],"(",["T_VARIABLE","$attribute",472],")",["T_WHITESPACE"," ",472],["T_AS","as",472],["T_WHITESPACE"," ",472],["T_VARIABLE","$validator",472],")",["T_WHITESPACE"," ",472],"{",["T_WHITESPACE","\n            ",472],["T_IF","if",473],["T_WHITESPACE"," ",473],"(",["T_VARIABLE","$validator",473],["T_WHITESPACE"," ",473],["T_INSTANCEOF","instanceof",473],["T_WHITESPACE"," ",473],["T_STRING","RequiredValidator",473],["T_WHITESPACE"," ",473],["T_BOOLEAN_AND","&&",473],["T_WHITESPACE"," ",473],["T_VARIABLE","$validator",473],["T_OBJECT_OPERATOR","->",473],["T_STRING","when",473],["T_WHITESPACE"," ",473],["T_IS_IDENTICAL","===",473],["T_WHITESPACE"," ",473],["T_STRING","null",473],")",["T_WHITESPACE"," ",473],"{",["T_WHITESPACE","\n                ",473],["T_RETURN","return",474],["T_WHITESPACE"," ",474],["T_STRING","true",474],";",["T_WHITESPACE","\n            ",474],"}",["T_WHITESPACE","\n        ",475],"}",["T_WHITESPACE","\n        ",476],["T_RETURN","return",477],["T_WHITESPACE"," ",477],["T_STRING","false",477],";",["T_WHITESPACE","\n    ",477],"}",["T_WHITESPACE","\n\n    ",478],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the attribute is safe for massive assignments.\n     * @param string $attribute attribute name\n     * @return bool whether the attribute is safe for massive assignments\n     * @see safeAttributes()\n     *\/",480],["T_WHITESPACE","\n    ",485],["T_PUBLIC","public",486],["T_WHITESPACE"," ",486],["T_FUNCTION","function",486],["T_WHITESPACE"," ",486],["T_STRING","isAttributeSafe",486],"(",["T_VARIABLE","$attribute",486],")",["T_WHITESPACE","\n    ",486],"{",["T_WHITESPACE","\n        ",487],["T_RETURN","return",488],["T_WHITESPACE"," ",488],["T_STRING","in_array",488],"(",["T_VARIABLE","$attribute",488],",",["T_WHITESPACE"," ",488],["T_VARIABLE","$this",488],["T_OBJECT_OPERATOR","->",488],["T_STRING","safeAttributes",488],"(",")",",",["T_WHITESPACE"," ",488],["T_STRING","true",488],")",";",["T_WHITESPACE","\n    ",488],"}",["T_WHITESPACE","\n\n    ",489],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether the attribute is active in the current scenario.\n     * @param string $attribute attribute name\n     * @return bool whether the attribute is active in the current scenario\n     * @see activeAttributes()\n     *\/",491],["T_WHITESPACE","\n    ",496],["T_PUBLIC","public",497],["T_WHITESPACE"," ",497],["T_FUNCTION","function",497],["T_WHITESPACE"," ",497],["T_STRING","isAttributeActive",497],"(",["T_VARIABLE","$attribute",497],")",["T_WHITESPACE","\n    ",497],"{",["T_WHITESPACE","\n        ",498],["T_RETURN","return",499],["T_WHITESPACE"," ",499],["T_STRING","in_array",499],"(",["T_VARIABLE","$attribute",499],",",["T_WHITESPACE"," ",499],["T_VARIABLE","$this",499],["T_OBJECT_OPERATOR","->",499],["T_STRING","activeAttributes",499],"(",")",",",["T_WHITESPACE"," ",499],["T_STRING","true",499],")",";",["T_WHITESPACE","\n    ",499],"}",["T_WHITESPACE","\n\n    ",500],["T_DOC_COMMENT","\/**\n     * Returns the text label for the specified attribute.\n     * @param string $attribute the attribute name\n     * @return string the attribute label\n     * @see generateAttributeLabel()\n     * @see attributeLabels()\n     *\/",502],["T_WHITESPACE","\n    ",508],["T_PUBLIC","public",509],["T_WHITESPACE"," ",509],["T_FUNCTION","function",509],["T_WHITESPACE"," ",509],["T_STRING","getAttributeLabel",509],"(",["T_VARIABLE","$attribute",509],")",["T_WHITESPACE","\n    ",509],"{",["T_WHITESPACE","\n        ",510],["T_VARIABLE","$labels",511],["T_WHITESPACE"," ",511],"=",["T_WHITESPACE"," ",511],["T_VARIABLE","$this",511],["T_OBJECT_OPERATOR","->",511],["T_STRING","attributeLabels",511],"(",")",";",["T_WHITESPACE","\n        ",511],["T_RETURN","return",512],["T_WHITESPACE"," ",512],["T_ISSET","isset",512],"(",["T_VARIABLE","$labels",512],"[",["T_VARIABLE","$attribute",512],"]",")",["T_WHITESPACE"," ",512],"?",["T_WHITESPACE"," ",512],["T_VARIABLE","$labels",512],"[",["T_VARIABLE","$attribute",512],"]",["T_WHITESPACE"," ",512],":",["T_WHITESPACE"," ",512],["T_VARIABLE","$this",512],["T_OBJECT_OPERATOR","->",512],["T_STRING","generateAttributeLabel",512],"(",["T_VARIABLE","$attribute",512],")",";",["T_WHITESPACE","\n    ",512],"}",["T_WHITESPACE","\n\n    ",513],["T_DOC_COMMENT","\/**\n     * Returns the text hint for the specified attribute.\n     * @param string $attribute the attribute name\n     * @return string the attribute hint\n     * @see attributeHints()\n     * @since 2.0.4\n     *\/",515],["T_WHITESPACE","\n    ",521],["T_PUBLIC","public",522],["T_WHITESPACE"," ",522],["T_FUNCTION","function",522],["T_WHITESPACE"," ",522],["T_STRING","getAttributeHint",522],"(",["T_VARIABLE","$attribute",522],")",["T_WHITESPACE","\n    ",522],"{",["T_WHITESPACE","\n        ",523],["T_VARIABLE","$hints",524],["T_WHITESPACE"," ",524],"=",["T_WHITESPACE"," ",524],["T_VARIABLE","$this",524],["T_OBJECT_OPERATOR","->",524],["T_STRING","attributeHints",524],"(",")",";",["T_WHITESPACE","\n        ",524],["T_RETURN","return",525],["T_WHITESPACE"," ",525],["T_ISSET","isset",525],"(",["T_VARIABLE","$hints",525],"[",["T_VARIABLE","$attribute",525],"]",")",["T_WHITESPACE"," ",525],"?",["T_WHITESPACE"," ",525],["T_VARIABLE","$hints",525],"[",["T_VARIABLE","$attribute",525],"]",["T_WHITESPACE"," ",525],":",["T_WHITESPACE"," ",525],["T_CONSTANT_ENCAPSED_STRING","''",525],";",["T_WHITESPACE","\n    ",525],"}",["T_WHITESPACE","\n\n    ",526],["T_DOC_COMMENT","\/**\n     * Returns a value indicating whether there is any validation error.\n     * @param string|null $attribute attribute name. Use null to check all attributes.\n     * @return bool whether there is any error.\n     *\/",528],["T_WHITESPACE","\n    ",532],["T_PUBLIC","public",533],["T_WHITESPACE"," ",533],["T_FUNCTION","function",533],["T_WHITESPACE"," ",533],["T_STRING","hasErrors",533],"(",["T_VARIABLE","$attribute",533],["T_WHITESPACE"," ",533],"=",["T_WHITESPACE"," ",533],["T_STRING","null",533],")",["T_WHITESPACE","\n    ",533],"{",["T_WHITESPACE","\n        ",534],["T_RETURN","return",535],["T_WHITESPACE"," ",535],["T_VARIABLE","$attribute",535],["T_WHITESPACE"," ",535],["T_IS_IDENTICAL","===",535],["T_WHITESPACE"," ",535],["T_STRING","null",535],["T_WHITESPACE"," ",535],"?",["T_WHITESPACE"," ",535],"!",["T_EMPTY","empty",535],"(",["T_VARIABLE","$this",535],["T_OBJECT_OPERATOR","->",535],["T_STRING","_errors",535],")",["T_WHITESPACE"," ",535],":",["T_WHITESPACE"," ",535],["T_ISSET","isset",535],"(",["T_VARIABLE","$this",535],["T_OBJECT_OPERATOR","->",535],["T_STRING","_errors",535],"[",["T_VARIABLE","$attribute",535],"]",")",";",["T_WHITESPACE","\n    ",535],"}",["T_WHITESPACE","\n\n    ",536],["T_DOC_COMMENT","\/**\n     * Returns the errors for all attributes or a single attribute.\n     * @param string $attribute attribute name. Use null to retrieve errors for all attributes.\n     * @property array An array of errors for all attributes. Empty array is returned if no error.\n     * The result is a two-dimensional array. See [[getErrors()]] for detailed description.\n     * @return array errors for all attributes or the specified attribute. Empty array is returned if no error.\n     * Note that when returning errors for all attributes, the result is a two-dimensional array, like the following:\n     *\n     * ```php\n     * [\n     *     'username' => [\n     *         'Username is required.',\n     *         'Username must contain only word characters.',\n     *     ],\n     *     'email' => [\n     *         'Email address is invalid.',\n     *     ]\n     * ]\n     * ```\n     *\n     * @see getFirstErrors()\n     * @see getFirstError()\n     *\/",538],["T_WHITESPACE","\n    ",560],["T_PUBLIC","public",561],["T_WHITESPACE"," ",561],["T_FUNCTION","function",561],["T_WHITESPACE"," ",561],["T_STRING","getErrors",561],"(",["T_VARIABLE","$attribute",561],["T_WHITESPACE"," ",561],"=",["T_WHITESPACE"," ",561],["T_STRING","null",561],")",["T_WHITESPACE","\n    ",561],"{",["T_WHITESPACE","\n        ",562],["T_IF","if",563],["T_WHITESPACE"," ",563],"(",["T_VARIABLE","$attribute",563],["T_WHITESPACE"," ",563],["T_IS_IDENTICAL","===",563],["T_WHITESPACE"," ",563],["T_STRING","null",563],")",["T_WHITESPACE"," ",563],"{",["T_WHITESPACE","\n            ",563],["T_RETURN","return",564],["T_WHITESPACE"," ",564],["T_VARIABLE","$this",564],["T_OBJECT_OPERATOR","->",564],["T_STRING","_errors",564],["T_WHITESPACE"," ",564],["T_IS_IDENTICAL","===",564],["T_WHITESPACE"," ",564],["T_STRING","null",564],["T_WHITESPACE"," ",564],"?",["T_WHITESPACE"," ",564],"[","]",["T_WHITESPACE"," ",564],":",["T_WHITESPACE"," ",564],["T_VARIABLE","$this",564],["T_OBJECT_OPERATOR","->",564],["T_STRING","_errors",564],";",["T_WHITESPACE","\n        ",564],"}",["T_WHITESPACE","\n        ",565],["T_RETURN","return",566],["T_WHITESPACE"," ",566],["T_ISSET","isset",566],"(",["T_VARIABLE","$this",566],["T_OBJECT_OPERATOR","->",566],["T_STRING","_errors",566],"[",["T_VARIABLE","$attribute",566],"]",")",["T_WHITESPACE"," ",566],"?",["T_WHITESPACE"," ",566],["T_VARIABLE","$this",566],["T_OBJECT_OPERATOR","->",566],["T_STRING","_errors",566],"[",["T_VARIABLE","$attribute",566],"]",["T_WHITESPACE"," ",566],":",["T_WHITESPACE"," ",566],"[","]",";",["T_WHITESPACE","\n    ",566],"}",["T_WHITESPACE","\n\n    ",567],["T_DOC_COMMENT","\/**\n     * Returns the first error of every attribute in the model.\n     * @return array the first errors. The array keys are the attribute names, and the array\n     * values are the corresponding error messages. An empty array will be returned if there is no error.\n     * @see getErrors()\n     * @see getFirstError()\n     *\/",569],["T_WHITESPACE","\n    ",575],["T_PUBLIC","public",576],["T_WHITESPACE"," ",576],["T_FUNCTION","function",576],["T_WHITESPACE"," ",576],["T_STRING","getFirstErrors",576],"(",")",["T_WHITESPACE","\n    ",576],"{",["T_WHITESPACE","\n        ",577],["T_IF","if",578],["T_WHITESPACE"," ",578],"(",["T_EMPTY","empty",578],"(",["T_VARIABLE","$this",578],["T_OBJECT_OPERATOR","->",578],["T_STRING","_errors",578],")",")",["T_WHITESPACE"," ",578],"{",["T_WHITESPACE","\n            ",578],["T_RETURN","return",579],["T_WHITESPACE"," ",579],"[","]",";",["T_WHITESPACE","\n        ",579],"}",["T_WHITESPACE","\n\n        ",580],["T_VARIABLE","$errors",582],["T_WHITESPACE"," ",582],"=",["T_WHITESPACE"," ",582],"[","]",";",["T_WHITESPACE","\n        ",582],["T_FOREACH","foreach",583],["T_WHITESPACE"," ",583],"(",["T_VARIABLE","$this",583],["T_OBJECT_OPERATOR","->",583],["T_STRING","_errors",583],["T_WHITESPACE"," ",583],["T_AS","as",583],["T_WHITESPACE"," ",583],["T_VARIABLE","$name",583],["T_WHITESPACE"," ",583],["T_DOUBLE_ARROW","=>",583],["T_WHITESPACE"," ",583],["T_VARIABLE","$es",583],")",["T_WHITESPACE"," ",583],"{",["T_WHITESPACE","\n            ",583],["T_IF","if",584],["T_WHITESPACE"," ",584],"(","!",["T_EMPTY","empty",584],"(",["T_VARIABLE","$es",584],")",")",["T_WHITESPACE"," ",584],"{",["T_WHITESPACE","\n                ",584],["T_VARIABLE","$errors",585],"[",["T_VARIABLE","$name",585],"]",["T_WHITESPACE"," ",585],"=",["T_WHITESPACE"," ",585],["T_STRING","reset",585],"(",["T_VARIABLE","$es",585],")",";",["T_WHITESPACE","\n            ",585],"}",["T_WHITESPACE","\n        ",586],"}",["T_WHITESPACE","\n        ",587],["T_RETURN","return",588],["T_WHITESPACE"," ",588],["T_VARIABLE","$errors",588],";",["T_WHITESPACE","\n    ",588],"}",["T_WHITESPACE","\n\n    ",589],["T_DOC_COMMENT","\/**\n     * Returns the first error of the specified attribute.\n     * @param string $attribute attribute name.\n     * @return string the error message. Null is returned if no error.\n     * @see getErrors()\n     * @see getFirstErrors()\n     *\/",591],["T_WHITESPACE","\n    ",597],["T_PUBLIC","public",598],["T_WHITESPACE"," ",598],["T_FUNCTION","function",598],["T_WHITESPACE"," ",598],["T_STRING","getFirstError",598],"(",["T_VARIABLE","$attribute",598],")",["T_WHITESPACE","\n    ",598],"{",["T_WHITESPACE","\n        ",599],["T_RETURN","return",600],["T_WHITESPACE"," ",600],["T_ISSET","isset",600],"(",["T_VARIABLE","$this",600],["T_OBJECT_OPERATOR","->",600],["T_STRING","_errors",600],"[",["T_VARIABLE","$attribute",600],"]",")",["T_WHITESPACE"," ",600],"?",["T_WHITESPACE"," ",600],["T_STRING","reset",600],"(",["T_VARIABLE","$this",600],["T_OBJECT_OPERATOR","->",600],["T_STRING","_errors",600],"[",["T_VARIABLE","$attribute",600],"]",")",["T_WHITESPACE"," ",600],":",["T_WHITESPACE"," ",600],["T_STRING","null",600],";",["T_WHITESPACE","\n    ",600],"}",["T_WHITESPACE","\n\n    ",601],["T_DOC_COMMENT","\/**\n     * Adds a new error to the specified attribute.\n     * @param string $attribute attribute name\n     * @param string $error new error message\n     *\/",603],["T_WHITESPACE","\n    ",607],["T_PUBLIC","public",608],["T_WHITESPACE"," ",608],["T_FUNCTION","function",608],["T_WHITESPACE"," ",608],["T_STRING","addError",608],"(",["T_VARIABLE","$attribute",608],",",["T_WHITESPACE"," ",608],["T_VARIABLE","$error",608],["T_WHITESPACE"," ",608],"=",["T_WHITESPACE"," ",608],["T_CONSTANT_ENCAPSED_STRING","''",608],")",["T_WHITESPACE","\n    ",608],"{",["T_WHITESPACE","\n        ",609],["T_VARIABLE","$this",610],["T_OBJECT_OPERATOR","->",610],["T_STRING","_errors",610],"[",["T_VARIABLE","$attribute",610],"]","[","]",["T_WHITESPACE"," ",610],"=",["T_WHITESPACE"," ",610],["T_VARIABLE","$error",610],";",["T_WHITESPACE","\n    ",610],"}",["T_WHITESPACE","\n\n    ",611],["T_DOC_COMMENT","\/**\n     * Adds a list of errors.\n     * @param array $items a list of errors. The array keys must be attribute names.\n     * The array values should be error messages. If an attribute has multiple errors,\n     * these errors must be given in terms of an array.\n     * You may use the result of [[getErrors()]] as the value for this parameter.\n     * @since 2.0.2\n     *\/",613],["T_WHITESPACE","\n    ",620],["T_PUBLIC","public",621],["T_WHITESPACE"," ",621],["T_FUNCTION","function",621],["T_WHITESPACE"," ",621],["T_STRING","addErrors",621],"(",["T_ARRAY","array",621],["T_WHITESPACE"," ",621],["T_VARIABLE","$items",621],")",["T_WHITESPACE","\n    ",621],"{",["T_WHITESPACE","\n        ",622],["T_FOREACH","foreach",623],["T_WHITESPACE"," ",623],"(",["T_VARIABLE","$items",623],["T_WHITESPACE"," ",623],["T_AS","as",623],["T_WHITESPACE"," ",623],["T_VARIABLE","$attribute",623],["T_WHITESPACE"," ",623],["T_DOUBLE_ARROW","=>",623],["T_WHITESPACE"," ",623],["T_VARIABLE","$errors",623],")",["T_WHITESPACE"," ",623],"{",["T_WHITESPACE","\n            ",623],["T_IF","if",624],["T_WHITESPACE"," ",624],"(",["T_STRING","is_array",624],"(",["T_VARIABLE","$errors",624],")",")",["T_WHITESPACE"," ",624],"{",["T_WHITESPACE","\n                ",624],["T_FOREACH","foreach",625],["T_WHITESPACE"," ",625],"(",["T_VARIABLE","$errors",625],["T_WHITESPACE"," ",625],["T_AS","as",625],["T_WHITESPACE"," ",625],["T_VARIABLE","$error",625],")",["T_WHITESPACE"," ",625],"{",["T_WHITESPACE","\n                    ",625],["T_VARIABLE","$this",626],["T_OBJECT_OPERATOR","->",626],["T_STRING","addError",626],"(",["T_VARIABLE","$attribute",626],",",["T_WHITESPACE"," ",626],["T_VARIABLE","$error",626],")",";",["T_WHITESPACE","\n                ",626],"}",["T_WHITESPACE","\n            ",627],"}",["T_WHITESPACE"," ",628],["T_ELSE","else",628],["T_WHITESPACE"," ",628],"{",["T_WHITESPACE","\n                ",628],["T_VARIABLE","$this",629],["T_OBJECT_OPERATOR","->",629],["T_STRING","addError",629],"(",["T_VARIABLE","$attribute",629],",",["T_WHITESPACE"," ",629],["T_VARIABLE","$errors",629],")",";",["T_WHITESPACE","\n            ",629],"}",["T_WHITESPACE","\n        ",630],"}",["T_WHITESPACE","\n    ",631],"}",["T_WHITESPACE","\n\n    ",632],["T_DOC_COMMENT","\/**\n     * Removes errors for all attributes or a single attribute.\n     * @param string $attribute attribute name. Use null to remove errors for all attributes.\n     *\/",634],["T_WHITESPACE","\n    ",637],["T_PUBLIC","public",638],["T_WHITESPACE"," ",638],["T_FUNCTION","function",638],["T_WHITESPACE"," ",638],["T_STRING","clearErrors",638],"(",["T_VARIABLE","$attribute",638],["T_WHITESPACE"," ",638],"=",["T_WHITESPACE"," ",638],["T_STRING","null",638],")",["T_WHITESPACE","\n    ",638],"{",["T_WHITESPACE","\n        ",639],["T_IF","if",640],["T_WHITESPACE"," ",640],"(",["T_VARIABLE","$attribute",640],["T_WHITESPACE"," ",640],["T_IS_IDENTICAL","===",640],["T_WHITESPACE"," ",640],["T_STRING","null",640],")",["T_WHITESPACE"," ",640],"{",["T_WHITESPACE","\n            ",640],["T_VARIABLE","$this",641],["T_OBJECT_OPERATOR","->",641],["T_STRING","_errors",641],["T_WHITESPACE"," ",641],"=",["T_WHITESPACE"," ",641],"[","]",";",["T_WHITESPACE","\n        ",641],"}",["T_WHITESPACE"," ",642],["T_ELSE","else",642],["T_WHITESPACE"," ",642],"{",["T_WHITESPACE","\n            ",642],["T_UNSET","unset",643],"(",["T_VARIABLE","$this",643],["T_OBJECT_OPERATOR","->",643],["T_STRING","_errors",643],"[",["T_VARIABLE","$attribute",643],"]",")",";",["T_WHITESPACE","\n        ",643],"}",["T_WHITESPACE","\n    ",644],"}",["T_WHITESPACE","\n\n    ",645],["T_DOC_COMMENT","\/**\n     * Generates a user friendly attribute label based on the give attribute name.\n     * This is done by replacing underscores, dashes and dots with blanks and\n     * changing the first letter of each word to upper case.\n     * For example, 'department_name' or 'DepartmentName' will generate 'Department Name'.\n     * @param string $name the column name\n     * @return string the attribute label\n     *\/",647],["T_WHITESPACE","\n    ",654],["T_PUBLIC","public",655],["T_WHITESPACE"," ",655],["T_FUNCTION","function",655],["T_WHITESPACE"," ",655],["T_STRING","generateAttributeLabel",655],"(",["T_VARIABLE","$name",655],")",["T_WHITESPACE","\n    ",655],"{",["T_WHITESPACE","\n        ",656],["T_RETURN","return",657],["T_WHITESPACE"," ",657],["T_STRING","Inflector",657],["T_DOUBLE_COLON","::",657],["T_STRING","camel2words",657],"(",["T_VARIABLE","$name",657],",",["T_WHITESPACE"," ",657],["T_STRING","true",657],")",";",["T_WHITESPACE","\n    ",657],"}",["T_WHITESPACE","\n\n    ",658],["T_DOC_COMMENT","\/**\n     * Returns attribute values.\n     * @param array $names list of attributes whose value needs to be returned.\n     * Defaults to null, meaning all attributes listed in [[attributes()]] will be returned.\n     * If it is an array, only the attributes in the array will be returned.\n     * @param array $except list of attributes whose value should NOT be returned.\n     * @return array attribute values (name => value).\n     *\/",660],["T_WHITESPACE","\n    ",667],["T_PUBLIC","public",668],["T_WHITESPACE"," ",668],["T_FUNCTION","function",668],["T_WHITESPACE"," ",668],["T_STRING","getAttributes",668],"(",["T_VARIABLE","$names",668],["T_WHITESPACE"," ",668],"=",["T_WHITESPACE"," ",668],["T_STRING","null",668],",",["T_WHITESPACE"," ",668],["T_VARIABLE","$except",668],["T_WHITESPACE"," ",668],"=",["T_WHITESPACE"," ",668],"[","]",")",["T_WHITESPACE","\n    ",668],"{",["T_WHITESPACE","\n        ",669],["T_VARIABLE","$values",670],["T_WHITESPACE"," ",670],"=",["T_WHITESPACE"," ",670],"[","]",";",["T_WHITESPACE","\n        ",670],["T_IF","if",671],["T_WHITESPACE"," ",671],"(",["T_VARIABLE","$names",671],["T_WHITESPACE"," ",671],["T_IS_IDENTICAL","===",671],["T_WHITESPACE"," ",671],["T_STRING","null",671],")",["T_WHITESPACE"," ",671],"{",["T_WHITESPACE","\n            ",671],["T_VARIABLE","$names",672],["T_WHITESPACE"," ",672],"=",["T_WHITESPACE"," ",672],["T_VARIABLE","$this",672],["T_OBJECT_OPERATOR","->",672],["T_STRING","attributes",672],"(",")",";",["T_WHITESPACE","\n        ",672],"}",["T_WHITESPACE","\n        ",673],["T_FOREACH","foreach",674],["T_WHITESPACE"," ",674],"(",["T_VARIABLE","$names",674],["T_WHITESPACE"," ",674],["T_AS","as",674],["T_WHITESPACE"," ",674],["T_VARIABLE","$name",674],")",["T_WHITESPACE"," ",674],"{",["T_WHITESPACE","\n            ",674],["T_VARIABLE","$values",675],"[",["T_VARIABLE","$name",675],"]",["T_WHITESPACE"," ",675],"=",["T_WHITESPACE"," ",675],["T_VARIABLE","$this",675],["T_OBJECT_OPERATOR","->",675],["T_VARIABLE","$name",675],";",["T_WHITESPACE","\n        ",675],"}",["T_WHITESPACE","\n        ",676],["T_FOREACH","foreach",677],["T_WHITESPACE"," ",677],"(",["T_VARIABLE","$except",677],["T_WHITESPACE"," ",677],["T_AS","as",677],["T_WHITESPACE"," ",677],["T_VARIABLE","$name",677],")",["T_WHITESPACE"," ",677],"{",["T_WHITESPACE","\n            ",677],["T_UNSET","unset",678],"(",["T_VARIABLE","$values",678],"[",["T_VARIABLE","$name",678],"]",")",";",["T_WHITESPACE","\n        ",678],"}",["T_WHITESPACE","\n\n        ",679],["T_RETURN","return",681],["T_WHITESPACE"," ",681],["T_VARIABLE","$values",681],";",["T_WHITESPACE","\n    ",681],"}",["T_WHITESPACE","\n\n    ",682],["T_DOC_COMMENT","\/**\n     * Sets the attribute values in a massive way.\n     * @param array $values attribute values (name => value) to be assigned to the model.\n     * @param bool $safeOnly whether the assignments should only be done to the safe attributes.\n     * A safe attribute is one that is associated with a validation rule in the current [[scenario]].\n     * @see safeAttributes()\n     * @see attributes()\n     *\/",684],["T_WHITESPACE","\n    ",691],["T_PUBLIC","public",692],["T_WHITESPACE"," ",692],["T_FUNCTION","function",692],["T_WHITESPACE"," ",692],["T_STRING","setAttributes",692],"(",["T_VARIABLE","$values",692],",",["T_WHITESPACE"," ",692],["T_VARIABLE","$safeOnly",692],["T_WHITESPACE"," ",692],"=",["T_WHITESPACE"," ",692],["T_STRING","true",692],")",["T_WHITESPACE","\n    ",692],"{",["T_WHITESPACE","\n        ",693],["T_IF","if",694],["T_WHITESPACE"," ",694],"(",["T_STRING","is_array",694],"(",["T_VARIABLE","$values",694],")",")",["T_WHITESPACE"," ",694],"{",["T_WHITESPACE","\n            ",694],["T_VARIABLE","$attributes",695],["T_WHITESPACE"," ",695],"=",["T_WHITESPACE"," ",695],["T_STRING","array_flip",695],"(",["T_VARIABLE","$safeOnly",695],["T_WHITESPACE"," ",695],"?",["T_WHITESPACE"," ",695],["T_VARIABLE","$this",695],["T_OBJECT_OPERATOR","->",695],["T_STRING","safeAttributes",695],"(",")",["T_WHITESPACE"," ",695],":",["T_WHITESPACE"," ",695],["T_VARIABLE","$this",695],["T_OBJECT_OPERATOR","->",695],["T_STRING","attributes",695],"(",")",")",";",["T_WHITESPACE","\n            ",695],["T_FOREACH","foreach",696],["T_WHITESPACE"," ",696],"(",["T_VARIABLE","$values",696],["T_WHITESPACE"," ",696],["T_AS","as",696],["T_WHITESPACE"," ",696],["T_VARIABLE","$name",696],["T_WHITESPACE"," ",696],["T_DOUBLE_ARROW","=>",696],["T_WHITESPACE"," ",696],["T_VARIABLE","$value",696],")",["T_WHITESPACE"," ",696],"{",["T_WHITESPACE","\n                ",696],["T_IF","if",697],["T_WHITESPACE"," ",697],"(",["T_ISSET","isset",697],"(",["T_VARIABLE","$attributes",697],"[",["T_VARIABLE","$name",697],"]",")",")",["T_WHITESPACE"," ",697],"{",["T_WHITESPACE","\n                    ",697],["T_VARIABLE","$this",698],["T_OBJECT_OPERATOR","->",698],["T_VARIABLE","$name",698],["T_WHITESPACE"," ",698],"=",["T_WHITESPACE"," ",698],["T_VARIABLE","$value",698],";",["T_WHITESPACE","\n                ",698],"}",["T_WHITESPACE"," ",699],["T_ELSEIF","elseif",699],["T_WHITESPACE"," ",699],"(",["T_VARIABLE","$safeOnly",699],")",["T_WHITESPACE"," ",699],"{",["T_WHITESPACE","\n                    ",699],["T_VARIABLE","$this",700],["T_OBJECT_OPERATOR","->",700],["T_STRING","onUnsafeAttribute",700],"(",["T_VARIABLE","$name",700],",",["T_WHITESPACE"," ",700],["T_VARIABLE","$value",700],")",";",["T_WHITESPACE","\n                ",700],"}",["T_WHITESPACE","\n            ",701],"}",["T_WHITESPACE","\n        ",702],"}",["T_WHITESPACE","\n    ",703],"}",["T_WHITESPACE","\n\n    ",704],["T_DOC_COMMENT","\/**\n     * This method is invoked when an unsafe attribute is being massively assigned.\n     * The default implementation will log a warning message if YII_DEBUG is on.\n     * It does nothing otherwise.\n     * @param string $name the unsafe attribute name\n     * @param mixed $value the attribute value\n     *\/",706],["T_WHITESPACE","\n    ",712],["T_PUBLIC","public",713],["T_WHITESPACE"," ",713],["T_FUNCTION","function",713],["T_WHITESPACE"," ",713],["T_STRING","onUnsafeAttribute",713],"(",["T_VARIABLE","$name",713],",",["T_WHITESPACE"," ",713],["T_VARIABLE","$value",713],")",["T_WHITESPACE","\n    ",713],"{",["T_WHITESPACE","\n        ",714],["T_IF","if",715],["T_WHITESPACE"," ",715],"(",["T_STRING","YII_DEBUG",715],")",["T_WHITESPACE"," ",715],"{",["T_WHITESPACE","\n            ",715],["T_STRING","Yii",716],["T_DOUBLE_COLON","::",716],["T_STRING","trace",716],"(","\"",["T_ENCAPSED_AND_WHITESPACE","Failed to set unsafe attribute '",716],["T_VARIABLE","$name",716],["T_ENCAPSED_AND_WHITESPACE","' in '",716],"\"",["T_WHITESPACE"," ",716],".",["T_WHITESPACE"," ",716],["T_STRING","get_class",716],"(",["T_VARIABLE","$this",716],")",["T_WHITESPACE"," ",716],".",["T_WHITESPACE"," ",716],["T_CONSTANT_ENCAPSED_STRING","\"'.\"",716],",",["T_WHITESPACE"," ",716],["T_METHOD_C","__METHOD__",716],")",";",["T_WHITESPACE","\n        ",716],"}",["T_WHITESPACE","\n    ",717],"}",["T_WHITESPACE","\n\n    ",718],["T_DOC_COMMENT","\/**\n     * Returns the scenario that this model is used in.\n     *\n     * Scenario affects how validation is performed and which attributes can\n     * be massively assigned.\n     *\n     * @return string the scenario that this model is in. Defaults to [[SCENARIO_DEFAULT]].\n     *\/",720],["T_WHITESPACE","\n    ",727],["T_PUBLIC","public",728],["T_WHITESPACE"," ",728],["T_FUNCTION","function",728],["T_WHITESPACE"," ",728],["T_STRING","getScenario",728],"(",")",["T_WHITESPACE","\n    ",728],"{",["T_WHITESPACE","\n        ",729],["T_RETURN","return",730],["T_WHITESPACE"," ",730],["T_VARIABLE","$this",730],["T_OBJECT_OPERATOR","->",730],["T_STRING","_scenario",730],";",["T_WHITESPACE","\n    ",730],"}",["T_WHITESPACE","\n\n    ",731],["T_DOC_COMMENT","\/**\n     * Sets the scenario for the model.\n     * Note that this method does not check if the scenario exists or not.\n     * The method [[validate()]] will perform this check.\n     * @param string $value the scenario that this model is in.\n     *\/",733],["T_WHITESPACE","\n    ",738],["T_PUBLIC","public",739],["T_WHITESPACE"," ",739],["T_FUNCTION","function",739],["T_WHITESPACE"," ",739],["T_STRING","setScenario",739],"(",["T_VARIABLE","$value",739],")",["T_WHITESPACE","\n    ",739],"{",["T_WHITESPACE","\n        ",740],["T_VARIABLE","$this",741],["T_OBJECT_OPERATOR","->",741],["T_STRING","_scenario",741],["T_WHITESPACE"," ",741],"=",["T_WHITESPACE"," ",741],["T_VARIABLE","$value",741],";",["T_WHITESPACE","\n    ",741],"}",["T_WHITESPACE","\n\n    ",742],["T_DOC_COMMENT","\/**\n     * Returns the attribute names that are safe to be massively assigned in the current scenario.\n     * @return string[] safe attribute names\n     *\/",744],["T_WHITESPACE","\n    ",747],["T_PUBLIC","public",748],["T_WHITESPACE"," ",748],["T_FUNCTION","function",748],["T_WHITESPACE"," ",748],["T_STRING","safeAttributes",748],"(",")",["T_WHITESPACE","\n    ",748],"{",["T_WHITESPACE","\n        ",749],["T_VARIABLE","$scenario",750],["T_WHITESPACE"," ",750],"=",["T_WHITESPACE"," ",750],["T_VARIABLE","$this",750],["T_OBJECT_OPERATOR","->",750],["T_STRING","getScenario",750],"(",")",";",["T_WHITESPACE","\n        ",750],["T_VARIABLE","$scenarios",751],["T_WHITESPACE"," ",751],"=",["T_WHITESPACE"," ",751],["T_VARIABLE","$this",751],["T_OBJECT_OPERATOR","->",751],["T_STRING","scenarios",751],"(",")",";",["T_WHITESPACE","\n        ",751],["T_IF","if",752],["T_WHITESPACE"," ",752],"(","!",["T_ISSET","isset",752],"(",["T_VARIABLE","$scenarios",752],"[",["T_VARIABLE","$scenario",752],"]",")",")",["T_WHITESPACE"," ",752],"{",["T_WHITESPACE","\n            ",752],["T_RETURN","return",753],["T_WHITESPACE"," ",753],"[","]",";",["T_WHITESPACE","\n        ",753],"}",["T_WHITESPACE","\n        ",754],["T_VARIABLE","$attributes",755],["T_WHITESPACE"," ",755],"=",["T_WHITESPACE"," ",755],"[","]",";",["T_WHITESPACE","\n        ",755],["T_FOREACH","foreach",756],["T_WHITESPACE"," ",756],"(",["T_VARIABLE","$scenarios",756],"[",["T_VARIABLE","$scenario",756],"]",["T_WHITESPACE"," ",756],["T_AS","as",756],["T_WHITESPACE"," ",756],["T_VARIABLE","$attribute",756],")",["T_WHITESPACE"," ",756],"{",["T_WHITESPACE","\n            ",756],["T_IF","if",757],["T_WHITESPACE"," ",757],"(",["T_VARIABLE","$attribute",757],"[",["T_LNUMBER","0",757],"]",["T_WHITESPACE"," ",757],["T_IS_NOT_IDENTICAL","!==",757],["T_WHITESPACE"," ",757],["T_CONSTANT_ENCAPSED_STRING","'!'",757],["T_WHITESPACE"," ",757],["T_BOOLEAN_AND","&&",757],["T_WHITESPACE"," ",757],"!",["T_STRING","in_array",757],"(",["T_CONSTANT_ENCAPSED_STRING","'!'",757],["T_WHITESPACE"," ",757],".",["T_WHITESPACE"," ",757],["T_VARIABLE","$attribute",757],",",["T_WHITESPACE"," ",757],["T_VARIABLE","$scenarios",757],"[",["T_VARIABLE","$scenario",757],"]",")",")",["T_WHITESPACE"," ",757],"{",["T_WHITESPACE","\n                ",757],["T_VARIABLE","$attributes",758],"[","]",["T_WHITESPACE"," ",758],"=",["T_WHITESPACE"," ",758],["T_VARIABLE","$attribute",758],";",["T_WHITESPACE","\n            ",758],"}",["T_WHITESPACE","\n        ",759],"}",["T_WHITESPACE","\n\n        ",760],["T_RETURN","return",762],["T_WHITESPACE"," ",762],["T_VARIABLE","$attributes",762],";",["T_WHITESPACE","\n    ",762],"}",["T_WHITESPACE","\n\n    ",763],["T_DOC_COMMENT","\/**\n     * Returns the attribute names that are subject to validation in the current scenario.\n     * @return string[] safe attribute names\n     *\/",765],["T_WHITESPACE","\n    ",768],["T_PUBLIC","public",769],["T_WHITESPACE"," ",769],["T_FUNCTION","function",769],["T_WHITESPACE"," ",769],["T_STRING","activeAttributes",769],"(",")",["T_WHITESPACE","\n    ",769],"{",["T_WHITESPACE","\n        ",770],["T_VARIABLE","$scenario",771],["T_WHITESPACE"," ",771],"=",["T_WHITESPACE"," ",771],["T_VARIABLE","$this",771],["T_OBJECT_OPERATOR","->",771],["T_STRING","getScenario",771],"(",")",";",["T_WHITESPACE","\n        ",771],["T_VARIABLE","$scenarios",772],["T_WHITESPACE"," ",772],"=",["T_WHITESPACE"," ",772],["T_VARIABLE","$this",772],["T_OBJECT_OPERATOR","->",772],["T_STRING","scenarios",772],"(",")",";",["T_WHITESPACE","\n        ",772],["T_IF","if",773],["T_WHITESPACE"," ",773],"(","!",["T_ISSET","isset",773],"(",["T_VARIABLE","$scenarios",773],"[",["T_VARIABLE","$scenario",773],"]",")",")",["T_WHITESPACE"," ",773],"{",["T_WHITESPACE","\n            ",773],["T_RETURN","return",774],["T_WHITESPACE"," ",774],"[","]",";",["T_WHITESPACE","\n        ",774],"}",["T_WHITESPACE","\n        ",775],["T_VARIABLE","$attributes",776],["T_WHITESPACE"," ",776],"=",["T_WHITESPACE"," ",776],["T_VARIABLE","$scenarios",776],"[",["T_VARIABLE","$scenario",776],"]",";",["T_WHITESPACE","\n        ",776],["T_FOREACH","foreach",777],["T_WHITESPACE"," ",777],"(",["T_VARIABLE","$attributes",777],["T_WHITESPACE"," ",777],["T_AS","as",777],["T_WHITESPACE"," ",777],["T_VARIABLE","$i",777],["T_WHITESPACE"," ",777],["T_DOUBLE_ARROW","=>",777],["T_WHITESPACE"," ",777],["T_VARIABLE","$attribute",777],")",["T_WHITESPACE"," ",777],"{",["T_WHITESPACE","\n            ",777],["T_IF","if",778],["T_WHITESPACE"," ",778],"(",["T_VARIABLE","$attribute",778],"[",["T_LNUMBER","0",778],"]",["T_WHITESPACE"," ",778],["T_IS_IDENTICAL","===",778],["T_WHITESPACE"," ",778],["T_CONSTANT_ENCAPSED_STRING","'!'",778],")",["T_WHITESPACE"," ",778],"{",["T_WHITESPACE","\n                ",778],["T_VARIABLE","$attributes",779],"[",["T_VARIABLE","$i",779],"]",["T_WHITESPACE"," ",779],"=",["T_WHITESPACE"," ",779],["T_STRING","substr",779],"(",["T_VARIABLE","$attribute",779],",",["T_WHITESPACE"," ",779],["T_LNUMBER","1",779],")",";",["T_WHITESPACE","\n            ",779],"}",["T_WHITESPACE","\n        ",780],"}",["T_WHITESPACE","\n\n        ",781],["T_RETURN","return",783],["T_WHITESPACE"," ",783],["T_VARIABLE","$attributes",783],";",["T_WHITESPACE","\n    ",783],"}",["T_WHITESPACE","\n\n    ",784],["T_DOC_COMMENT","\/**\n     * Populates the model with input data.\n     *\n     * This method provides a convenient shortcut for:\n     *\n     * ```php\n     * if (isset($_POST['FormName'])) {\n     *     $model->attributes = $_POST['FormName'];\n     *     if ($model->save()) {\n     *         \/\/ handle success\n     *     }\n     * }\n     * ```\n     *\n     * which, with `load()` can be written as:\n     *\n     * ```php\n     * if ($model->load($_POST) && $model->save()) {\n     *     \/\/ handle success\n     * }\n     * ```\n     *\n     * `load()` gets the `'FormName'` from the model's [[formName()]] method (which you may override), unless the\n     * `$formName` parameter is given. If the form name is empty, `load()` populates the model with the whole of `$data`,\n     * instead of `$data['FormName']`.\n     *\n     * Note, that the data being populated is subject to the safety check by [[setAttributes()]].\n     *\n     * @param array $data the data array to load, typically `$_POST` or `$_GET`.\n     * @param string $formName the form name to use to load the data into the model.\n     * If not set, [[formName()]] is used.\n     * @return bool whether `load()` found the expected form in `$data`.\n     *\/",786],["T_WHITESPACE","\n    ",818],["T_PUBLIC","public",819],["T_WHITESPACE"," ",819],["T_FUNCTION","function",819],["T_WHITESPACE"," ",819],["T_STRING","load",819],"(",["T_VARIABLE","$data",819],",",["T_WHITESPACE"," ",819],["T_VARIABLE","$formName",819],["T_WHITESPACE"," ",819],"=",["T_WHITESPACE"," ",819],["T_STRING","null",819],")",["T_WHITESPACE","\n    ",819],"{",["T_WHITESPACE","\n        ",820],["T_VARIABLE","$scope",821],["T_WHITESPACE"," ",821],"=",["T_WHITESPACE"," ",821],["T_VARIABLE","$formName",821],["T_WHITESPACE"," ",821],["T_IS_IDENTICAL","===",821],["T_WHITESPACE"," ",821],["T_STRING","null",821],["T_WHITESPACE"," ",821],"?",["T_WHITESPACE"," ",821],["T_VARIABLE","$this",821],["T_OBJECT_OPERATOR","->",821],["T_STRING","formName",821],"(",")",["T_WHITESPACE"," ",821],":",["T_WHITESPACE"," ",821],["T_VARIABLE","$formName",821],";",["T_WHITESPACE","\n        ",821],["T_IF","if",822],["T_WHITESPACE"," ",822],"(",["T_VARIABLE","$scope",822],["T_WHITESPACE"," ",822],["T_IS_IDENTICAL","===",822],["T_WHITESPACE"," ",822],["T_CONSTANT_ENCAPSED_STRING","''",822],["T_WHITESPACE"," ",822],["T_BOOLEAN_AND","&&",822],["T_WHITESPACE"," ",822],"!",["T_EMPTY","empty",822],"(",["T_VARIABLE","$data",822],")",")",["T_WHITESPACE"," ",822],"{",["T_WHITESPACE","\n            ",822],["T_VARIABLE","$this",823],["T_OBJECT_OPERATOR","->",823],["T_STRING","setAttributes",823],"(",["T_VARIABLE","$data",823],")",";",["T_WHITESPACE","\n\n            ",823],["T_RETURN","return",825],["T_WHITESPACE"," ",825],["T_STRING","true",825],";",["T_WHITESPACE","\n        ",825],"}",["T_WHITESPACE"," ",826],["T_ELSEIF","elseif",826],["T_WHITESPACE"," ",826],"(",["T_ISSET","isset",826],"(",["T_VARIABLE","$data",826],"[",["T_VARIABLE","$scope",826],"]",")",")",["T_WHITESPACE"," ",826],"{",["T_WHITESPACE","\n            ",826],["T_VARIABLE","$this",827],["T_OBJECT_OPERATOR","->",827],["T_STRING","setAttributes",827],"(",["T_VARIABLE","$data",827],"[",["T_VARIABLE","$scope",827],"]",")",";",["T_WHITESPACE","\n\n            ",827],["T_RETURN","return",829],["T_WHITESPACE"," ",829],["T_STRING","true",829],";",["T_WHITESPACE","\n        ",829],"}",["T_WHITESPACE","\n        ",830],["T_RETURN","return",831],["T_WHITESPACE"," ",831],["T_STRING","false",831],";",["T_WHITESPACE","\n    ",831],"}",["T_WHITESPACE","\n\n    ",832],["T_DOC_COMMENT","\/**\n     * Populates a set of models with the data from end user.\n     * This method is mainly used to collect tabular data input.\n     * The data to be loaded for each model is `$data[formName][index]`, where `formName`\n     * refers to the value of [[formName()]], and `index` the index of the model in the `$models` array.\n     * If [[formName()]] is empty, `$data[index]` will be used to populate each model.\n     * The data being populated to each model is subject to the safety check by [[setAttributes()]].\n     * @param array $models the models to be populated. Note that all models should have the same class.\n     * @param array $data the data array. This is usually `$_POST` or `$_GET`, but can also be any valid array\n     * supplied by end user.\n     * @param string $formName the form name to be used for loading the data into the models.\n     * If not set, it will use the [[formName()]] value of the first model in `$models`.\n     * This parameter is available since version 2.0.1.\n     * @return bool whether at least one of the models is successfully populated.\n     *\/",834],["T_WHITESPACE","\n    ",848],["T_PUBLIC","public",849],["T_WHITESPACE"," ",849],["T_STATIC","static",849],["T_WHITESPACE"," ",849],["T_FUNCTION","function",849],["T_WHITESPACE"," ",849],["T_STRING","loadMultiple",849],"(",["T_VARIABLE","$models",849],",",["T_WHITESPACE"," ",849],["T_VARIABLE","$data",849],",",["T_WHITESPACE"," ",849],["T_VARIABLE","$formName",849],["T_WHITESPACE"," ",849],"=",["T_WHITESPACE"," ",849],["T_STRING","null",849],")",["T_WHITESPACE","\n    ",849],"{",["T_WHITESPACE","\n        ",850],["T_IF","if",851],["T_WHITESPACE"," ",851],"(",["T_VARIABLE","$formName",851],["T_WHITESPACE"," ",851],["T_IS_IDENTICAL","===",851],["T_WHITESPACE"," ",851],["T_STRING","null",851],")",["T_WHITESPACE"," ",851],"{",["T_WHITESPACE","\n            ",851],["T_COMMENT","\/* @var $first Model *\/",852],["T_WHITESPACE","\n            ",852],["T_VARIABLE","$first",853],["T_WHITESPACE"," ",853],"=",["T_WHITESPACE"," ",853],["T_STRING","reset",853],"(",["T_VARIABLE","$models",853],")",";",["T_WHITESPACE","\n            ",853],["T_IF","if",854],["T_WHITESPACE"," ",854],"(",["T_VARIABLE","$first",854],["T_WHITESPACE"," ",854],["T_IS_IDENTICAL","===",854],["T_WHITESPACE"," ",854],["T_STRING","false",854],")",["T_WHITESPACE"," ",854],"{",["T_WHITESPACE","\n                ",854],["T_RETURN","return",855],["T_WHITESPACE"," ",855],["T_STRING","false",855],";",["T_WHITESPACE","\n            ",855],"}",["T_WHITESPACE","\n            ",856],["T_VARIABLE","$formName",857],["T_WHITESPACE"," ",857],"=",["T_WHITESPACE"," ",857],["T_VARIABLE","$first",857],["T_OBJECT_OPERATOR","->",857],["T_STRING","formName",857],"(",")",";",["T_WHITESPACE","\n        ",857],"}",["T_WHITESPACE","\n\n        ",858],["T_VARIABLE","$success",860],["T_WHITESPACE"," ",860],"=",["T_WHITESPACE"," ",860],["T_STRING","false",860],";",["T_WHITESPACE","\n        ",860],["T_FOREACH","foreach",861],["T_WHITESPACE"," ",861],"(",["T_VARIABLE","$models",861],["T_WHITESPACE"," ",861],["T_AS","as",861],["T_WHITESPACE"," ",861],["T_VARIABLE","$i",861],["T_WHITESPACE"," ",861],["T_DOUBLE_ARROW","=>",861],["T_WHITESPACE"," ",861],["T_VARIABLE","$model",861],")",["T_WHITESPACE"," ",861],"{",["T_WHITESPACE","\n            ",861],["T_COMMENT","\/* @var $model Model *\/",862],["T_WHITESPACE","\n            ",862],["T_IF","if",863],["T_WHITESPACE"," ",863],"(",["T_VARIABLE","$formName",863],["T_WHITESPACE"," ",863],["T_IS_EQUAL","==",863],["T_WHITESPACE"," ",863],["T_CONSTANT_ENCAPSED_STRING","''",863],")",["T_WHITESPACE"," ",863],"{",["T_WHITESPACE","\n                ",863],["T_IF","if",864],["T_WHITESPACE"," ",864],"(","!",["T_EMPTY","empty",864],"(",["T_VARIABLE","$data",864],"[",["T_VARIABLE","$i",864],"]",")",")",["T_WHITESPACE"," ",864],"{",["T_WHITESPACE","\n                    ",864],["T_VARIABLE","$model",865],["T_OBJECT_OPERATOR","->",865],["T_STRING","load",865],"(",["T_VARIABLE","$data",865],"[",["T_VARIABLE","$i",865],"]",",",["T_WHITESPACE"," ",865],["T_CONSTANT_ENCAPSED_STRING","''",865],")",";",["T_WHITESPACE","\n                    ",865],["T_VARIABLE","$success",866],["T_WHITESPACE"," ",866],"=",["T_WHITESPACE"," ",866],["T_STRING","true",866],";",["T_WHITESPACE","\n                ",866],"}",["T_WHITESPACE","\n            ",867],"}",["T_WHITESPACE"," ",868],["T_ELSEIF","elseif",868],["T_WHITESPACE"," ",868],"(","!",["T_EMPTY","empty",868],"(",["T_VARIABLE","$data",868],"[",["T_VARIABLE","$formName",868],"]","[",["T_VARIABLE","$i",868],"]",")",")",["T_WHITESPACE"," ",868],"{",["T_WHITESPACE","\n                ",868],["T_VARIABLE","$model",869],["T_OBJECT_OPERATOR","->",869],["T_STRING","load",869],"(",["T_VARIABLE","$data",869],"[",["T_VARIABLE","$formName",869],"]","[",["T_VARIABLE","$i",869],"]",",",["T_WHITESPACE"," ",869],["T_CONSTANT_ENCAPSED_STRING","''",869],")",";",["T_WHITESPACE","\n                ",869],["T_VARIABLE","$success",870],["T_WHITESPACE"," ",870],"=",["T_WHITESPACE"," ",870],["T_STRING","true",870],";",["T_WHITESPACE","\n            ",870],"}",["T_WHITESPACE","\n        ",871],"}",["T_WHITESPACE","\n\n        ",872],["T_RETURN","return",874],["T_WHITESPACE"," ",874],["T_VARIABLE","$success",874],";",["T_WHITESPACE","\n    ",874],"}",["T_WHITESPACE","\n\n    ",875],["T_DOC_COMMENT","\/**\n     * Validates multiple models.\n     * This method will validate every model. The models being validated may\n     * be of the same or different types.\n     * @param array $models the models to be validated\n     * @param array $attributeNames list of attribute names that should be validated.\n     * If this parameter is empty, it means any attribute listed in the applicable\n     * validation rules should be validated.\n     * @return bool whether all models are valid. False will be returned if one\n     * or multiple models have validation error.\n     *\/",877],["T_WHITESPACE","\n    ",887],["T_PUBLIC","public",888],["T_WHITESPACE"," ",888],["T_STATIC","static",888],["T_WHITESPACE"," ",888],["T_FUNCTION","function",888],["T_WHITESPACE"," ",888],["T_STRING","validateMultiple",888],"(",["T_VARIABLE","$models",888],",",["T_WHITESPACE"," ",888],["T_VARIABLE","$attributeNames",888],["T_WHITESPACE"," ",888],"=",["T_WHITESPACE"," ",888],["T_STRING","null",888],")",["T_WHITESPACE","\n    ",888],"{",["T_WHITESPACE","\n        ",889],["T_VARIABLE","$valid",890],["T_WHITESPACE"," ",890],"=",["T_WHITESPACE"," ",890],["T_STRING","true",890],";",["T_WHITESPACE","\n        ",890],["T_COMMENT","\/* @var $model Model *\/",891],["T_WHITESPACE","\n        ",891],["T_FOREACH","foreach",892],["T_WHITESPACE"," ",892],"(",["T_VARIABLE","$models",892],["T_WHITESPACE"," ",892],["T_AS","as",892],["T_WHITESPACE"," ",892],["T_VARIABLE","$model",892],")",["T_WHITESPACE"," ",892],"{",["T_WHITESPACE","\n            ",892],["T_VARIABLE","$valid",893],["T_WHITESPACE"," ",893],"=",["T_WHITESPACE"," ",893],["T_VARIABLE","$model",893],["T_OBJECT_OPERATOR","->",893],["T_STRING","validate",893],"(",["T_VARIABLE","$attributeNames",893],")",["T_WHITESPACE"," ",893],["T_BOOLEAN_AND","&&",893],["T_WHITESPACE"," ",893],["T_VARIABLE","$valid",893],";",["T_WHITESPACE","\n        ",893],"}",["T_WHITESPACE","\n\n        ",894],["T_RETURN","return",896],["T_WHITESPACE"," ",896],["T_VARIABLE","$valid",896],";",["T_WHITESPACE","\n    ",896],"}",["T_WHITESPACE","\n\n    ",897],["T_DOC_COMMENT","\/**\n     * Returns the list of fields that should be returned by default by [[toArray()]] when no specific fields are specified.\n     *\n     * A field is a named element in the returned array by [[toArray()]].\n     *\n     * This method should return an array of field names or field definitions.\n     * If the former, the field name will be treated as an object property name whose value will be used\n     * as the field value. If the latter, the array key should be the field name while the array value should be\n     * the corresponding field definition which can be either an object property name or a PHP callable\n     * returning the corresponding field value. The signature of the callable should be:\n     *\n     * ```php\n     * function ($model, $field) {\n     *     \/\/ return field value\n     * }\n     * ```\n     *\n     * For example, the following code declares four fields:\n     *\n     * - `email`: the field name is the same as the property name `email`;\n     * - `firstName` and `lastName`: the field names are `firstName` and `lastName`, and their\n     *   values are obtained from the `first_name` and `last_name` properties;\n     * - `fullName`: the field name is `fullName`. Its value is obtained by concatenating `first_name`\n     *   and `last_name`.\n     *\n     * ```php\n     * return [\n     *     'email',\n     *     'firstName' => 'first_name',\n     *     'lastName' => 'last_name',\n     *     'fullName' => function ($model) {\n     *         return $model->first_name . ' ' . $model->last_name;\n     *     },\n     * ];\n     * ```\n     *\n     * In this method, you may also want to return different lists of fields based on some context\n     * information. For example, depending on [[scenario]] or the privilege of the current application user,\n     * you may return different sets of visible fields or filter out some fields.\n     *\n     * The default implementation of this method returns [[attributes()]] indexed by the same attribute names.\n     *\n     * @return array the list of field names or field definitions.\n     * @see toArray()\n     *\/",899],["T_WHITESPACE","\n    ",943],["T_PUBLIC","public",944],["T_WHITESPACE"," ",944],["T_FUNCTION","function",944],["T_WHITESPACE"," ",944],["T_STRING","fields",944],"(",")",["T_WHITESPACE","\n    ",944],"{",["T_WHITESPACE","\n        ",945],["T_VARIABLE","$fields",946],["T_WHITESPACE"," ",946],"=",["T_WHITESPACE"," ",946],["T_VARIABLE","$this",946],["T_OBJECT_OPERATOR","->",946],["T_STRING","attributes",946],"(",")",";",["T_WHITESPACE","\n\n        ",946],["T_RETURN","return",948],["T_WHITESPACE"," ",948],["T_STRING","array_combine",948],"(",["T_VARIABLE","$fields",948],",",["T_WHITESPACE"," ",948],["T_VARIABLE","$fields",948],")",";",["T_WHITESPACE","\n    ",948],"}",["T_WHITESPACE","\n\n    ",949],["T_DOC_COMMENT","\/**\n     * Returns an iterator for traversing the attributes in the model.\n     * This method is required by the interface [[\\IteratorAggregate]].\n     * @return ArrayIterator an iterator for traversing the items in the list.\n     *\/",951],["T_WHITESPACE","\n    ",955],["T_PUBLIC","public",956],["T_WHITESPACE"," ",956],["T_FUNCTION","function",956],["T_WHITESPACE"," ",956],["T_STRING","getIterator",956],"(",")",["T_WHITESPACE","\n    ",956],"{",["T_WHITESPACE","\n        ",957],["T_VARIABLE","$attributes",958],["T_WHITESPACE"," ",958],"=",["T_WHITESPACE"," ",958],["T_VARIABLE","$this",958],["T_OBJECT_OPERATOR","->",958],["T_STRING","getAttributes",958],"(",")",";",["T_WHITESPACE","\n        ",958],["T_RETURN","return",959],["T_WHITESPACE"," ",959],["T_NEW","new",959],["T_WHITESPACE"," ",959],["T_STRING","ArrayIterator",959],"(",["T_VARIABLE","$attributes",959],")",";",["T_WHITESPACE","\n    ",959],"}",["T_WHITESPACE","\n\n    ",960],["T_DOC_COMMENT","\/**\n     * Returns whether there is an element at the specified offset.\n     * This method is required by the SPL interface [[\\ArrayAccess]].\n     * It is implicitly called when you use something like `isset($model[$offset])`.\n     * @param mixed $offset the offset to check on.\n     * @return bool whether or not an offset exists.\n     *\/",962],["T_WHITESPACE","\n    ",968],["T_PUBLIC","public",969],["T_WHITESPACE"," ",969],["T_FUNCTION","function",969],["T_WHITESPACE"," ",969],["T_STRING","offsetExists",969],"(",["T_VARIABLE","$offset",969],")",["T_WHITESPACE","\n    ",969],"{",["T_WHITESPACE","\n        ",970],["T_RETURN","return",971],["T_WHITESPACE"," ",971],["T_ISSET","isset",971],"(",["T_VARIABLE","$this",971],["T_OBJECT_OPERATOR","->",971],["T_VARIABLE","$offset",971],")",";",["T_WHITESPACE","\n    ",971],"}",["T_WHITESPACE","\n\n    ",972],["T_DOC_COMMENT","\/**\n     * Returns the element at the specified offset.\n     * This method is required by the SPL interface [[\\ArrayAccess]].\n     * It is implicitly called when you use something like `$value = $model[$offset];`.\n     * @param mixed $offset the offset to retrieve element.\n     * @return mixed the element at the offset, null if no element is found at the offset\n     *\/",974],["T_WHITESPACE","\n    ",980],["T_PUBLIC","public",981],["T_WHITESPACE"," ",981],["T_FUNCTION","function",981],["T_WHITESPACE"," ",981],["T_STRING","offsetGet",981],"(",["T_VARIABLE","$offset",981],")",["T_WHITESPACE","\n    ",981],"{",["T_WHITESPACE","\n        ",982],["T_RETURN","return",983],["T_WHITESPACE"," ",983],["T_VARIABLE","$this",983],["T_OBJECT_OPERATOR","->",983],["T_VARIABLE","$offset",983],";",["T_WHITESPACE","\n    ",983],"}",["T_WHITESPACE","\n\n    ",984],["T_DOC_COMMENT","\/**\n     * Sets the element at the specified offset.\n     * This method is required by the SPL interface [[\\ArrayAccess]].\n     * It is implicitly called when you use something like `$model[$offset] = $item;`.\n     * @param int $offset the offset to set element\n     * @param mixed $item the element value\n     *\/",986],["T_WHITESPACE","\n    ",992],["T_PUBLIC","public",993],["T_WHITESPACE"," ",993],["T_FUNCTION","function",993],["T_WHITESPACE"," ",993],["T_STRING","offsetSet",993],"(",["T_VARIABLE","$offset",993],",",["T_WHITESPACE"," ",993],["T_VARIABLE","$item",993],")",["T_WHITESPACE","\n    ",993],"{",["T_WHITESPACE","\n        ",994],["T_VARIABLE","$this",995],["T_OBJECT_OPERATOR","->",995],["T_VARIABLE","$offset",995],["T_WHITESPACE"," ",995],"=",["T_WHITESPACE"," ",995],["T_VARIABLE","$item",995],";",["T_WHITESPACE","\n    ",995],"}",["T_WHITESPACE","\n\n    ",996],["T_DOC_COMMENT","\/**\n     * Sets the element value at the specified offset to null.\n     * This method is required by the SPL interface [[\\ArrayAccess]].\n     * It is implicitly called when you use something like `unset($model[$offset])`.\n     * @param mixed $offset the offset to unset element\n     *\/",998],["T_WHITESPACE","\n    ",1003],["T_PUBLIC","public",1004],["T_WHITESPACE"," ",1004],["T_FUNCTION","function",1004],["T_WHITESPACE"," ",1004],["T_STRING","offsetUnset",1004],"(",["T_VARIABLE","$offset",1004],")",["T_WHITESPACE","\n    ",1004],"{",["T_WHITESPACE","\n        ",1005],["T_VARIABLE","$this",1006],["T_OBJECT_OPERATOR","->",1006],["T_VARIABLE","$offset",1006],["T_WHITESPACE"," ",1006],"=",["T_WHITESPACE"," ",1006],["T_STRING","null",1006],";",["T_WHITESPACE","\n    ",1006],"}",["T_WHITESPACE","\n",1007],"}",["T_WHITESPACE","\n",1008]]