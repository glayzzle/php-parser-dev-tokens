[["T_OPEN_TAG","<?php\n",1],["T_DOC_COMMENT","\/**\n * @link http:\/\/www.yiiframework.com\/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http:\/\/www.yiiframework.com\/license\/\n *\/",2],["T_WHITESPACE","\n\n",6],["T_NAMESPACE","namespace",8],["T_WHITESPACE"," ",8],["T_STRING","yii",8],["T_NS_SEPARATOR","\\",8],["T_STRING","base",8],";",["T_WHITESPACE","\n\n",8],["T_DOC_COMMENT","\/**\n * Arrayable is the interface that should be implemented by classes who want to support customizable representation of their instances.\n *\n * For example, if a class implements Arrayable, by calling [[toArray()]], an instance of this class\n * can be turned into an array (including all its embedded objects) which can then be further transformed easily\n * into other formats, such as JSON, XML.\n *\n * The methods [[fields()]] and [[extraFields()]] allow the implementing classes to customize how and which of their data\n * should be formatted and put into the result of [[toArray()]].\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n *\/",10],["T_WHITESPACE","\n",22],["T_INTERFACE","interface",23],["T_WHITESPACE"," ",23],["T_STRING","Arrayable",23],["T_WHITESPACE","\n",23],"{",["T_WHITESPACE","\n    ",24],["T_DOC_COMMENT","\/**\n     * Returns the list of fields that should be returned by default by [[toArray()]] when no specific fields are specified.\n     *\n     * A field is a named element in the returned array by [[toArray()]].\n     *\n     * This method should return an array of field names or field definitions.\n     * If the former, the field name will be treated as an object property name whose value will be used\n     * as the field value. If the latter, the array key should be the field name while the array value should be\n     * the corresponding field definition which can be either an object property name or a PHP callable\n     * returning the corresponding field value. The signature of the callable should be:\n     *\n     * ```php\n     * function ($model, $field) {\n     *     \/\/ return field value\n     * }\n     * ```\n     *\n     * For example, the following code declares four fields:\n     *\n     * - `email`: the field name is the same as the property name `email`;\n     * - `firstName` and `lastName`: the field names are `firstName` and `lastName`, and their\n     *   values are obtained from the `first_name` and `last_name` properties;\n     * - `fullName`: the field name is `fullName`. Its value is obtained by concatenating `first_name`\n     *   and `last_name`.\n     *\n     * ```php\n     * return [\n     *     'email',\n     *     'firstName' => 'first_name',\n     *     'lastName' => 'last_name',\n     *     'fullName' => function ($model) {\n     *         return $model->first_name . ' ' . $model->last_name;\n     *     },\n     * ];\n     * ```\n     *\n     * @return array the list of field names or field definitions.\n     * @see toArray()\n     *\/",25],["T_WHITESPACE","\n    ",63],["T_PUBLIC","public",64],["T_WHITESPACE"," ",64],["T_FUNCTION","function",64],["T_WHITESPACE"," ",64],["T_STRING","fields",64],"(",")",";",["T_WHITESPACE","\n\n    ",64],["T_DOC_COMMENT","\/**\n     * Returns the list of additional fields that can be returned by [[toArray()]] in addition to those listed in [[fields()]].\n     *\n     * This method is similar to [[fields()]] except that the list of fields declared\n     * by this method are not returned by default by [[toArray()]]. Only when a field in the list\n     * is explicitly requested, will it be included in the result of [[toArray()]].\n     *\n     * @return array the list of expandable field names or field definitions. Please refer\n     * to [[fields()]] on the format of the return value.\n     * @see toArray()\n     * @see fields()\n     *\/",66],["T_WHITESPACE","\n    ",77],["T_PUBLIC","public",78],["T_WHITESPACE"," ",78],["T_FUNCTION","function",78],["T_WHITESPACE"," ",78],["T_STRING","extraFields",78],"(",")",";",["T_WHITESPACE","\n\n    ",78],["T_DOC_COMMENT","\/**\n     * Converts the object into an array.\n     *\n     * @param array $fields the fields that the output array should contain. Fields not specified\n     * in [[fields()]] will be ignored. If this parameter is empty, all fields as specified in [[fields()]] will be returned.\n     * @param array $expand the additional fields that the output array should contain.\n     * Fields not specified in [[extraFields()]] will be ignored. If this parameter is empty, no extra fields\n     * will be returned.\n     * @param bool $recursive whether to recursively return array representation of embedded objects.\n     * @return array the array representation of the object\n     *\/",80],["T_WHITESPACE","\n    ",90],["T_PUBLIC","public",91],["T_WHITESPACE"," ",91],["T_FUNCTION","function",91],["T_WHITESPACE"," ",91],["T_STRING","toArray",91],"(",["T_ARRAY","array",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$fields",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],"[","]",",",["T_WHITESPACE"," ",91],["T_ARRAY","array",91],["T_WHITESPACE"," ",91],["T_VARIABLE","$expand",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],"[","]",",",["T_WHITESPACE"," ",91],["T_VARIABLE","$recursive",91],["T_WHITESPACE"," ",91],"=",["T_WHITESPACE"," ",91],["T_STRING","true",91],")",";",["T_WHITESPACE","\n",91],"}",["T_WHITESPACE","\n",92]]